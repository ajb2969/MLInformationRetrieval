   Iterative deepening A*      Iterative deepening A*   Iterative deepening A* ( IDA* ) is a graph traversal and path search algorithm that can find the shortest path between a designated start node and any member of a set of goal nodes in a weighted graph. It is a variant of iterative deepening depth-first search that borrows the idea to use a heuristic function to evaluate the remaining cost to get to the goal from the A* search algorithm . Since it is a depth-first search algorithm, its memory usage is lower than in A*, but unlike ordinary iterative deepening search, it concentrates on exploring the most promising nodes and thus doesn't go to the same depth everywhere in the search tree. Unlike A*, IDA* doesn't utilize dynamic programming and therefore often ends up exploring the same nodes many times.  While the standard iterative deepening depth-first search uses search depth as the cutoff for each iteration, the IDA* uses the more informative     f   (  n  )    =    g   (  n  )    +   h   (  n  )           f  n       g  n     h  n      f(n)=g(n)+h(n)   where    g   (  n  )       g  n    g(n)   is the cost to travel from the root to node   n   n   n   and    h   (  n  )       h  n    h(n)   is a problem-specific heuristic estimate of the cost to travel from   n   n   n   to the solution. As in A*, the heuristic has to have particular properties to guarantee optimality (shortest paths); see Properties , below.  Applications of IDA* are found in such problems as planning . 1 The algorithm was first described by Richard Korf in 1985. 2  Pseudocode   node  current  node   g  the  cost  to  reach  current  node   f  estimated  cost  of  the  cheapest  path  (root..node..goal)   h ( node ) estimated  cost  of  the  cheapest  path  (node..goal)   cost ( node , succ ) path  cost  function   is_goal ( node ) goal  test   successors ( node ) node  expanding  function     procedure  ida_star ( root )   bound := h ( root )   loop   t := search ( root , 0, bound )   if  t = FOUND then  return FOUND   if  t = ∞ then  return NOT_FOUND   bound := t   end  loop   end  procedure     function  search ( node , g , bound )   f := g + h ( node )   if  f > bound  then  return  f   if  is_goal ( node ) then  return FOUND   min := ∞   for  succ  in  successors ( node ) do   t := search ( succ , g + cost ( node , succ ), bound )   if  t = FOUND then  return FOUND   if  t  min  then  min := t   end  for   return  min   end  function  Properties  Like A*, IDA* is guaranteed to find the shortest path leading from the given start node to any goal node in the problem graph, if the heuristic function   h   h   h   is admissible , i.e.,       h   (  n  )    ≤    h  *    (  n  )          h  n      superscript  h    n     h(n)\leq h^{*}(n)     for all nodes   n   n   n   , where    h  *     fragments  h     h*   is the true cost of the shortest path from   n   n   n   to the nearest goal (the "perfect heuristic"). 3  IDA* is slightly slower than A* (it explores the same nodes multiple times because it doesn't remember prior work) but is beneficial when the problem is memory constrained. A* search keeps a large queue of unexplored nodes that can quickly fill up memory. By contrast, because IDA* does not remember any node except the ones on the current path , it requires an amount of memory that is only linear in the length of the solution that it constructs. Its time complexity is analyzed by Korf et al. under the assumption that the heuristic cost estimate   h   h   h   is consistent , meaning that       h   (  n  )    ≤    cost   (  n  ,   n  ′   )    +   h   (   n  ′   )           h  n       cost   n   superscript  n  normal-′       h   superscript  n  normal-′       h(n)\leq\mathrm{cost}(n,n^{\prime})+h(n^{\prime})     for all nodes   n   n   n   and all neighbors   n   n   n   of   n   n   n   ; they conclude that compared to a brute-force tree search over an exponential-sized problem, IDA* achieves a smaller search depth (by a constant factor), but not a smaller branching factor. 4  Recursive best-first search is another memory-constrained version of A* search that can be faster in practice than IDA*, since it requires less regenerating of nodes. 5  References  "  Category:Graph algorithms  Category:Routing algorithms  Category:Search algorithms  Category:Game artificial intelligence  Category:Articles with example pseudocode     ↩  ↩  ↩  ↩      