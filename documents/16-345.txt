   Anti-unification (computer science)      Anti-unification (computer science)   Anti-unification is the process of constructing a generalization common to two given symbolic expressions. As in unification , several frameworks are distinguished depending on which expressions (also called terms) are allowed, and which expressions are considered equal. If variables representing functions are allowed in an expression, the process is called higher-order anti-unification , otherwise first-order anti-unification . If the generalization is required to have an instance literally equal to each input expression, the process is called syntactical anti-unification , otherwise E-anti-unification , or anti-unification modulo theory .  An anti-unification algorithm should compute for given expressions a complete , and minimal generalization set, that is, a set covering all generalizations, and containing no redundant members, respectively. Depending on the framework, a complete and minimal generalization set may have one, finitely many, or possibly infinitely many members, or may not exist at all; 1 it cannot be empty, since a trivial generalization exists in any case. For first-order syntactical anti-unification, Gordon Plotkin 2 3 gave an algorithm that computes a complete and minimal singleton generalization set containing the so-called least general generalization (lgg) .  Anti-unification should not be confused with dis-unification . The latter means the process of solving systems of inequations , that is of finding values for the variables such that all given inequations are satisfied. 4 This task is quite different from finding generalizations.  Prerequisites  Formally, an anti-unification approach presupposes   An infinite set $V$ of variables . For higher-order anti-unification, it is convenient to choose $V$ disjoint from the set of lambda-term bound variables .  A set $T$ of terms such that $V \subseteq T$ . For first-order and higher-order anti-unification, $T$ is usually the set of first-order terms (terms built from variable and function symbols) and lambda terms (terms containing some higher-order variables), respectively.  An equivalence relation  $\equiv$ on $T$ , indicating which terms are considered equal. For higher-order anti-unification, usually $t \equiv u$ if $t$ and $u$ are alpha equivalent . For first-order E-anti-unification, $\equiv$ reflects the background knowledge about certain function symbols; for example, if $\oplus$ is considered commutative, $t \equiv u$ if $u$ results from $t$ by swapping the arguments of $\oplus$ at some (possibly all) occurrences. 5 If there is no background knowledge at all, then only literally, or syntactically, identical terms are considered equal.   First-order term  Given a set $V$ of variable symbols, a set $C$ of constant symbols and sets $F_n$ of $n$ -ary function symbols, also called operator symbols, for each natural number $n \geq 1$ , the set of (unsorted first-order) terms $T$ is recursively defined to be the smallest set with the following properties: 6   every variable symbol is a term $$V \subseteq T$$ ,  every constant symbol is a term $$C \subseteq T$$ ,  from every $n$ terms $t_1,\ldots,t_n$ , and every $n$ -ary function symbol $f \in F_n$ , a larger term $f(t_1,\ldots,t_n)$ can be built.   For example, if $x \in V$ is a variable symbol, $1 \in C$ is a constant symbol, and $\textit{add} \in F_2$ is a binary function symbol, then $x \in T$ , $1 \in T$ , and (hence) $add(x,1) \in T$ by the first, second, and third term building rule, respectively. The latter term is usually written as $x+1$ , using Infix notation and the more common operator symbol $+$ for convenience.  Higher-order term  Substitution  A substitution is a mapping $\sigma: V \longrightarrow T$ from variables to terms; the notation $\{x_1 \mapsto t_1, \ldots, x_k \mapsto t_k \}$ refers to a substitution mapping each variable $x_i$ to the term $t_i$ , for $i=1,\ldots,k$ , and every other variable to itself. Applying that substitution to a term $t$ is written in postfix notation as $t \{x_1 \mapsto t_1, \ldots, x_k \mapsto t_k \}$ ; it means to (simultaneously) replace every occurrence of each variable $x_i$ in the term $t$ by $t_i$ . The result $t \sigma$ of applying a substitution $\sigma$ to a term $t$ is called an instance of that term $t$ . As a first-order example, applying the substitution $\{x \mapsto h(a,y), z \mapsto b\}$ to the term     | $f($  | $x$  | $,a,g($  | $z$  | $),y)$  | yields    | $f($  | $h(a,y)$  | $,a,g($  | $b$  | $),y)$  | .     Generalization, specialization  If a term $t$ has an instance equivalent to a term $u$ , that is, if $t \sigma \equiv u$ for some substitution $\sigma$ , then $t$ is called more general than $u$ , and $u$ is called more special than, or subsumed by, $t$ . For example, $x \oplus a$ is more general than $a \oplus b$ if $\oplus$ is commutative , since then $(x \oplus a)\{x \mapsto b\} = b \oplus a \equiv a \oplus b$ .  If $\equiv$ is literal (syntactic) identity of terms, a term may be both more general and more special than another one only if both terms differ just in their variable names, not in their syntactic structure; such terms are called variants , or renamings of each other. For example, $f(x_1,a,g(z_1),y_1)$ is a variant of $f(x_2,a,g(z_2),y_2)$ , since $f(x_1,a,g(z_1),y_1) \{ x_1 \mapsto x_2, y_2 \mapsto y_2, z_1 \mapsto z_2\} = f(x_2,a,g(z_2),y_2)$ and $f(x_2,a,g(z_2),y_2) \{x_1 \mapsto x_1, y_2 \mapsto y_1, z_2 \mapsto z_1\} = f(x_1,a,g(z_1),y_1)$ . However, $f(x_1,a,g(z_1),y_1)$ is not a variant of $f(x_2,a,g(x_2),x_2)$ , since no substitution can transform the latter term into the former one, although $\{x_1 \mapsto x_2, z_1 \mapsto x_2, y_1 \mapsto x_2 \}$ achieves the reverse direction. The latter term is hence properly more special than the former one.  A substitution $\sigma$ is more special than, or subsumed by, a substitution $\tau$ if $x \sigma$ is more special than $x \tau$ for each variable $x$ . For example, $\{ x \mapsto f(u), y \mapsto f(f(u)) \}$ is more special than $\{ x \mapsto z, y \mapsto f(z) \}$ , since $f(u)$ and $f(f(u))$ is more special than $z$ and $f(z)$ , respectively.  Anti-unification problem, generalization set  An anti-unification problem is a pair $\langle t_1, t_2 \rangle$ of terms. A term $t$ is a common generalization , or anti-unifier , of $t_1$ and $t_2$ if $t \sigma_1 \equiv t_1$ and $t \sigma_2 \equiv t_2$ for some substitutions $\sigma_1, \sigma_2$ . For a given anti-unification problem, a set $S$ of anti-unifiers is called complete if each generalization subsumes some term $t \in S$ ; the set $S$ is called minimal if none of its members subsumes another one.  First-order syntactical anti-unification  The framework of first-order syntactical anti-unification is based on $T$ being the set of first-order terms (over some given set $V$ of variables, $C$ of constants and $F_n$ of $n$ -ary function symbols) and on $\equiv$ being syntactic equality . In this framework, each anti-unification problem $\langle t_1, t_2 \rangle$ has a complete, and obviously minimal, singleton solution set $\{t\}$ . Its member $t$ is called the least general generalization (lgg) of the problem, it has an instance syntactically equal to $t_1$ and another one syntactically equal to $t_2$ . Any common generalization of $t_1$ and $t_2$ subsumes $t$ . The lgg is unique up to variants: if $S_1$ and $S_2$ are both complete and minimal solution sets of the same syntactical anti-unification problem, then $S_1 = \{ s_1\}$ and $S_2 = \{ s_2 \}$ for some terms $s_1$ and $s_2$ , that are renamings of each other.  Plotkin 7 8 has given an algorithm to compute the lgg of two given terms. It presupposes an injective mapping  $\phi: T \times T \longrightarrow V$ , that is, a mapping assigning each pair $s,t$ of terms an own variable $\phi(s,t)$ , such that no two pairs share the same variable. 9 The algorithm consists of two rules:       $f(s_1,\dots,s_n) \sqcup f(t_1,\ldots,t_n)$  $\rightsquigarrow$  $f( s_1 \sqcup t_1,  \ldots, s_n \sqcup t_n )$    $s \sqcup t$  $\rightsquigarrow$  $\phi(s,t)$       For example, $(0*0) \sqcup (4*4) \rightsquigarrow (0 \sqcup 4)*(0 \sqcup 4) \rightsquigarrow \phi(0,4) * \phi(0,4) \rightsquigarrow x*x$ ; this least general generalization reflects the common property of both inputs of being square numbers.  Plotkin used his algorithm to compute the " relative least general generalization (rlgg) " of two clause sets in first-order logic, which was the basis of the Golem approach to inductive logic programming .  First-order anti-unification modulo theory       Software.   Equational theories   One associative and commutative operation: ;  Commutative theories:  Free monoids:  Regular congruence classes: ;  A-, C-, AC-, ACU-theories with ordered sorts:   First-order sorted anti-unification   Taxonomic sorts: ; ;  Feature terms:    A-, C-, AC-, ACU-theories with ordered sorts: see above   Applications   Program analysis: ;  Code factoring:  Induction proving:  Information Extraction:  Case-based reasoning:   Anti-unification of trees and linguistic applications   Parse trees for sentences can be subject to least general generalization to derive a maximal common sub-parse trees for language learning. There are applications in search and text classification. 10  Parse thickets for paragraphs as graphs can be subject to least general generalization. 11  Operation of generalization commutes with the operation of transition from syntactic (parse trees) to semantic (symbolic expressions) level. The latter can then be subject to conventional anti-unification. 12 13   Higher-order anti-unification   Calculus of constructions:  Simply-typed lambda calculus (Input: Terms in the eta-long beta-normal form. Output: higher-order patterns): Baumgartner, Alexander; Kutsia, Temur; Levy, Jordi; Villaret, Mateu (Jun 2013). A Variant of Higher-Order Anti-Unification . Proc. RTA 2013. Vol. 21 of LIPIcs. Schloss Dagstuhl, 113-127. Software.  Restricted Higher-Order Substitutions: ;   Notes  References  "  Category:Inductive logic programming  Category:Automated theorem proving  Category:Logic in computer science  Category:Unification (computer science)     Complete generalization sets always exist, but it may be the case that every complete generalization set is non-minimal. ↩  ↩  ↩  Comon referred in 1986 to inequation-solving as "anti-unification", which nowadays has become quite unusual. ↩  E.g. $a \oplus (b \oplus f(x)) \equiv a \oplus (f(x) \oplus b) \equiv (b \oplus f(x)) \oplus a \equiv (f(x) \oplus b) \oplus a$ ↩  ; here: Sect.1.3 ↩    From a theoretical viewpoint, such a mapping exists, since both $V$ and $T \times T$ are countably infinite sets; for practical purposes, $\phi$ can be built up as needed, remembering assigned mappings $\langle s,t,\phi(s,t) \rangle$ in a hash table . ↩  ↩  ↩  ↩  ↩     