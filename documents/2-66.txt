   Shellsort      Shellsort    Shellsort , also known as Shell sort or Shell's method , is an in-place comparison sort . It can be seen as either a generalization of sorting by exchange ( bubble sort ) or sorting by insertion ( insertion sort ). 1 The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. Starting with far apart elements can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959. 2 3 The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem .  Description  Shellsort is a generalization of insertion sort that allows the exchange of items that are far apart. The idea is to arrange the list of elements so that, starting anywhere, considering every h th element gives a sorted list. Such a list is said to be h -sorted. Equivalently, it can be thought of as h interleaved lists, each individually sorted. 4 Beginning with large values of h , this rearrangement allows elements to move long distances in the original list, reducing large amounts of disorder quickly, and leaving less work for smaller h -sort steps to do. 5 If the file is then k-sorted for some smaller integer k , then the file remains h -sorted. Following this idea for a decreasing sequence of h values ending in 1 is guaranteed to leave a sorted list in the end. 6  An example run of Shellsort with gaps 5, 3 and 1 is shown below.          a   ;  1       a   ;  2       a   ;  3       a   ;  4       a   ;  5       a   ;  6       a   ;  7       a   ;  8       a   ;  9       a   ;  10       a   ;  11       a   ;  12        input data:    62    83    18    53    07    17    95    86    47    69    25    28      after 5-sorting:    17    28    18    47    07    25    83    86    53    69    62    95      after 3-sorting:    17    07    18    47    28    25    69    62    53    83    86    95      after 1-sorting:    07    17    18    25    28    47    53    62    69    83    86    95         missing-subexpression    fragments  a   subscript  normal-;  1     fragments  a   subscript  normal-;  2     fragments  a   subscript  normal-;  3     fragments  a   subscript  normal-;  4     fragments  a   subscript  normal-;  5     fragments  a   subscript  normal-;  6     fragments  a   subscript  normal-;  7     fragments  a   subscript  normal-;  8     fragments  a   subscript  normal-;  9     fragments  a   subscript  normal-;  10     fragments  a   subscript  normal-;  11     fragments  a   subscript  normal-;  12      input data:  62  83  18  53  07  17  95  86  47  69  25  28    after 5-sorting:  17  28  18  47  07  25  83  86  53  69  62  95    after 3-sorting:  17  07  18  47  28  25  69  62  53  83  86  95    after 1-sorting:  07  17  18  25  28  47  53  62  69  83  86  95     \begin{array}[]{rcccccccccccc}&a_{1}&a_{2}&a_{3}&a_{4}&a_{5}&a_{6}&a_{7%
 }&a_{8}&a_{9}&a_{10}&a_{11}&a_{12}\\
 \hbox{input data:}&62&83&18&53&07&17&95&86&47&69&25&28\\
 \hbox{after 5-sorting:}&17&28&18&47&07&25&83&86&53&69&62&95\\
 \hbox{after 3-sorting:}&17&07&18&47&28&25&69&62&53&83&86&95\\
 \hbox{after 1-sorting:}&07&17&18&25&28&47&53&62&69&83&86&95\\
 \end{array}     The first pass, 5-sorting, performs insertion sort on separate subarrays ( a 1 , a 6 , a 11 ), ( a 2 , a 7 , a 12 ), ( a 3 , a 8 ), ( a 4 , a 9 ), ( a 5 , a 10 ). For instance, it changes the subarray ( a 1 , a 6 , a 11 ) from (62, 17, 25) to (17, 25, 62). The next pass, 3-sorting, performs insertion sort on the subarrays ( a 1 , a 4 , a 7 , a 10 ), ( a 2 , a 5 , a 8 , a 11 ), ( a 3 , a 6 , a 9 , a 12 ). The last pass, 1-sorting, is an ordinary insertion sort of the entire array ( a 1 ,..., a 12 ).  As the example illustrates, the subarrays that Shellsort operates on are initially short; later they are longer but almost ordered. In both cases insertion sort works efficiently.  Shellsort is unstable : it may change the relative order of elements with equal values. It is an adaptive sorting algorithm in that it executes faster when the input is partially sorted.  Pseudocode  Using Marcin Ciura's gap sequence, with an inner insertion sort.  #  Sort  an  array  a[0...n-1].  gaps = [701, 301, 132, 57, 23, 10, 4, 1]   #  Start  with  the  largest  gap  and  work  down  to  a  gap  of  1   foreach (gap in gaps)  {   #  Do  a  gapped  insertion  sort  for  this  gap  size.   #  The  first  gap  elements  a[0..gap-1]  are  already  in  gapped  order   #  keep  adding  one  more  element  until  the  entire  array  is  gap  sorted    for (i = gap; i = gap and a[j - gap] > temp; j -= gap)  {  a[j] = a[j - gap]  }   #  put  temp  (the  original  a[i])  in  its  correct  location  a[j] = temp  }   }  Gap sequences  The question of deciding which gap sequence to use is difficult. Every gap sequence that contains 1 yields a correct sort; however, the properties of thus obtained versions of Shellsort may be very different.  The table below compares most proposed gap sequences published so far. Some of them have decreasing elements that depend on the size of the sorted array ( N ). Others are increasing infinite sequences, whose elements less than N should be used in reverse order.        General term ( k ≥ 1)   Concrete gaps   Worst-case time complexity   Author and year of publication           ⌊   N  /   2  k    ⌋        N   superscript  2  k      \lfloor N/2^{k}\rfloor           ⌊   N  2   ⌋   ,   ⌊   N  4   ⌋   ,  …  ,  1         N  2        N  4    normal-…  1    \left\lfloor\frac{N}{2}\right\rfloor,\left\lfloor\frac{N}{4}\right\rfloor,%
 \ldots,1          Θ   (   N  2   )       normal-Θ   superscript  N  2     \Theta(N^{2})   [when N =2 p ]   Shell , 1959 7          2   ⌊   N  /   2   k  +  1     ⌋    +  1        2      N   superscript  2    k  1       1    2\lfloor N/2^{k+1}\rfloor+1            2   ⌊   N  4   ⌋    +  1   ,  …  ,  3  ,  1         2      N  4     1   normal-…  3  1    2\left\lfloor\frac{N}{4}\right\rfloor+1,\ldots,3,1          Θ   (   N   3  /  2    )       normal-Θ   superscript  N    3  2      \Theta(N^{3/2})      Frank & Lazarus, 1960 {{Cite journal          2  k   -  1       superscript  2  k   1    2^{k}-1          1  ,  3  ,  7  ,  15  ,  31  ,  63  ,  …     1  3  7  15  31  63  normal-…    1,3,7,15,31,63,\ldots          Θ   (   N   3  /  2    )       normal-Θ   superscript  N    3  2      \Theta(N^{3/2})      Hibbard , 1963 {{Cite journal          2  k   +  1       superscript  2  k   1    2^{k}+1   , prefixed with 1       1  ,  3  ,  5  ,  9  ,  17  ,  33  ,  65  ,  …     1  3  5  9  17  33  65  normal-…    1,3,5,9,17,33,65,\ldots          Θ   (   N   3  /  2    )       normal-Θ   superscript  N    3  2      \Theta(N^{3/2})      Papernov & Stasevich, 1965 {{Cite journal     successive numbers of the form     2  p    3  q        superscript  2  p    superscript  3  q     2^{p}3^{q}          1  ,  2  ,  3  ,  4  ,  6  ,  8  ,  9  ,  12  ,  …     1  2  3  4  6  8  9  12  normal-…    1,2,3,4,6,8,9,12,\ldots          Θ   (   N    log  2   N    )       normal-Θ    N    superscript   2   N      \Theta(N\log^{2}N)      Pratt , 1971 {{Cite book          (    3  k   -  1   )   /  2         superscript  3  k   1   2    (3^{k}-1)/2   , not greater than    ⌈   N  /  3   ⌉        N  3     \lceil N/3\rceil          1  ,  4  ,  13  ,  40  ,  121  ,  …     1  4  13  40  121  normal-…    1,4,13,40,121,\ldots          Θ   (   N   3  /  2    )       normal-Θ   superscript  N    3  2      \Theta(N^{3/2})      Pratt , 1971 8          a  q   =  min   {  n  ∈  ℕ  :  n  ≥    (  5  /  2  )    q  +  1    ,      fragments   subscript  a  q      fragments  normal-{  n   N  normal-:  n    superscript   fragments  normal-(  5   2  normal-)     q  1    normal-,     a_{q}=\min\{n\in\mathbb{N}\colon n\geq(5/2)^{q+1},         1  ,  3  ,  7  ,  21  ,  48  ,  112  ,  …     1  3  7  21  48  112  normal-…    1,3,7,21,48,112,\ldots     : \forall p\colon0\le p       O   (   N   1  +     8   ln   (   5  /  2   )     /   ln  N       )       O   superscript  N    1        8      5  2       N         O(N^{1+\sqrt{8\ln(5/2)/\ln N}})           4  k   +   3  ⋅   2   k  -  1     +  1       superscript  4  k    normal-⋅  3   superscript  2    k  1     1    4^{k}+3\cdot 2^{k-1}+1      Incerpi & Sedgewick , 1985, {{Cite journal         1  ,  8  ,  23  ,  77  ,  281  ,  …     1  8  23  77  281  normal-…    1,8,23,77,281,\ldots   , prefixed with 1       O   (   N   4  /  3    )       O   superscript  N    4  3      O(N^{4/3})            9   (    4   k  -  1    -   2   k  2     )    +  1   ,     4   k  +  1    -   6  ⋅   2    k  +  1   2      +  1          9     superscript  4    k  1     superscript  2    k  2      1        superscript  4    k  1     normal-⋅  6   superscript  2      k  1   2      1     9(4^{k-1}-2^{\frac{k}{2}})+1,4^{k+1}-6\cdot 2^{\frac{k+1}{2}}+1      Sedgewick, 1986 9         1  ,  5  ,  19  ,  41  ,  109  ,  …     1  5  19  41  109  normal-…    1,5,19,41,109,\ldots          O   (   N   4  /  3    )       O   superscript  N    4  3      O(N^{4/3})            h  k   =   max   {   ⌊    5   h   k  -  1     /  11   ⌋   ,  1  }     ,    h  0   =  N      formulae-sequence     subscript  h  k           5   subscript  h    k  1     11    1       subscript  h  0   N     h_{k}=\max\left\{\left\lfloor 5h_{k-1}/11\right\rfloor,1\right\},h_{0}=N      Sedgewick, 1986 {{Cite journal          ⌊    5  N   11   ⌋   ,   ⌊    5  11    ⌊    5  N   11   ⌋    ⌋   ,  …  ,  1           5  N   11          5  11         5  N   11      normal-…  1    \left\lfloor\frac{5N}{11}\right\rfloor,\left\lfloor\frac{5}{11}\left\lfloor%
 \frac{5N}{11}\right\rfloor\right\rfloor,\ldots,1          ⌈     9  k   -   4  k     5  ⋅   4   k  -  1      ⌉           superscript  9  k    superscript  4  k     normal-⋅  5   superscript  4    k  1        \left\lceil\frac{9^{k}-4^{k}}{5\cdot 4^{k-1}}\right\rceil      ?   Gonnet & , 1991 {{Cite book         1  ,  4  ,  9  ,  20  ,  46  ,  103  ,  …     1  4  9  20  46  103  normal-…    1,4,9,20,46,103,\ldots          1  ,  4  ,  10  ,  23  ,  57  ,  132  ,  301  ,  701     1  4  10  23  57  132  301  701    1,4,10,23,57,132,301,701      ?   Tokuda, 1992 {{Cite book     unknown        h  k   =   ⌊   2.25   h   k  -  1     ⌋        subscript  h  k       2.25   subscript  h    k  1        h_{k}=\lfloor 2.25h_{k-1}\rfloor      ?   Ciura, 2001 {{Cite book        When the binary representation of N contains many consecutive zeroes, Shellsort using Shell's original gap sequence makes Θ( N 2 ) comparisons in the worst case. For instance, this case occurs for N equal to a power of two when elements greater and smaller than the median occupy odd and even positions respectively, since they are compared only in the last pass.  Although it has higher complexity than the O ( N log N ) that is optimal for comparison sorts, Pratt's version lends itself to sorting networks and has the same asymptotic gate complexity as Batcher's bitonic sorter .  Gonnet and Baeza-Yates observed that Shellsort makes the fewest comparisons on average when the ratios of successive gaps are roughly equal to 2.2. 10 This is why their sequence with ratio 2.2 and Tokuda's sequence with ratio 2.25 prove efficient. However, it is not known why this is so. Sedgewick recommends to use gaps that have low greatest common divisors or are pairwise coprime . 11  With respect to the average number of comparisons, the best known gap sequences are 1, 4, 10, 23, 57, 132, 301, 701 and similar, with gaps found experimentally. Optimal gaps beyond 701 remain unknown, but good results can be obtained by extending the above sequence according to the recursive formula     h  k   =   ⌈   h  k  ′   ⌉        subscript  h  k      subscript   superscript  h  normal-′   k      h_{k}=\lceil h^{\prime}_{k}\rceil   .  Tokuda's sequence, defined by the simple formula     h  k  ′   =    2.25   h   k  -  1   ′    +  1        subscript   superscript  h  normal-′   k       2.25   subscript   superscript  h  normal-′     k  1     1     h^{\prime}_{k}=2.25h^{\prime}_{k-1}+1   , where     h  1  ′   =  1       subscript   superscript  h  normal-′   1   1    h^{\prime}_{1}=1   ,      0.5349  N   N    -   0.4387  N   -   0.097   N     +   O   (  1  )            0.5349  N    N      0.4387  N     0.097    N       O  1     0.5349N\sqrt{N}-0.4387N-0.097\sqrt{N}+O(1)   , can be recommended for practical applications.  Computational complexity  The following property holds: after h 2 -sorting of any h 1 -sorted array, the array remains h 1 -sorted. 12 Every h 1 -sorted and h 2 -sorted array is also ( a 1 h 1 + a 2 h 2 )-sorted, for any nonnegative integers a 1 and a 2 . The worst-case complexity of Shellsort is therefore connected with the Frobenius problem : for given integers h 1 ,..., h n with gcd = 1, the Frobenius number g ( h 1 ,..., h n ) is the greatest integer that cannot be represented as a 1 h 1 + ... + a n h n with nonnegative integer a 1 ,..., a n . Using known formulae for Frobenius numbers, we can determine the worst-case complexity of Shellsort for several classes of gap sequences. 13 Proven results are shown in the above table.  With respect to the average number of operations, none of proven results concerns a practical gap sequence. For gaps that are powers of two, Espelid computed this average as      2   N  2    /  h   +    π   N  3   h            2   superscript  N  2    h       π   superscript  N  3   h      2N^{2}/h+\sqrt{\pi N^{3}h}   . 14  Knuth determined the average complexity of sorting an N -element array with two gaps ( h , 1) to be      N  2    4  c  h    +   O   (  N  )           superscript  N  2     4  c  h      O  N     \frac{N^{2}}{4ch}+O(N)   . 15 It follows that a two-pass Shellsort with h = Θ( N 1/3 ) makes on average O ( N 5/3 ) comparisons. Yao found the average complexity of a three-pass Shellsort. 16 His result was refined by Janson and Knuth: 17 the average number of comparisons made during a Shellsort with three gaps ( ch , cg , 1), where h and g are coprime, is      1   8  g      π   c  h      (   h  -  1   )    N   3  /  2     +   O   (   h  N   )            1    8  g        π    c  h       h  1    superscript  N    3  2       O    h  N      \frac{1}{8g}\sqrt{\frac{\pi}{ch}}(h-1)N^{3/2}+O(hN)   in the first pass,     ψ   (  h  ,  g  )   N   +    1  8     π  c     (   c  -  1   )    N   3  /  2     +   O   (    (   c  -  1   )   g   h   1  /  2    N   )    +   O   (    c  2    g  3    h  2    )          ψ   h  g   N       1  8       π  c      c  1    superscript  N    3  2       O      c  1   g   superscript  h    1  2    N      O     superscript  c  2    superscript  g  3    superscript  h  2       \psi(h,g)N+\frac{1}{8}\sqrt{\frac{\pi}{c}}(c-1)N^{3/2}+O((c-1)gh^{1/2}N)+O(c^{%
 2}g^{3}h^{2})   in the second pass and        π  h   128    g   +   O   (    g   -   1  /  2      h   1  /  2     )    +   O   (   g   h   -   1  /  2      )                π  h   128    g     O     superscript  g      1  2      superscript  h    1  2        O    g   superscript  h      1  2         \sqrt{\frac{\pi h}{128}}g+O(g^{-1/2}h^{1/2})+O(gh^{-1/2})   in the third pass. ψ ( h , g ) in the last formula is a complicated function asymptotically equal to     h  k   =   ⌊   2.25   h   k  -  1     ⌋        subscript  h  k       2.25   subscript  h    k  1        h_{k}=\lfloor 2.25h_{k-1}\rfloor   . In particular, when h = Θ( N 7/15 ) and g = Θ( N 1/5 ), the average time of sorting is O ( N 23/15 ).  Based on experiments, it is conjectured that Shellsort with Hibbard 's gap sequence runs in O ( N 5/4 ) average time, 18 and that Gonnet and Baeza-Yates's sequence requires on average 0.41 N ln N (ln ln N +1/6) element moves. 19 Approximations of the average number of operations formerly put forward for other sequences fail when sorted arrays contain millions of elements.  The graph below shows the average number of element comparisons in various variants of Shellsort, divided by the theoretical lower bound, i.e. log 2 N !, where the sequence 1, 4, 10, 23, 57, 132, 301, 701 has been extended according to the formula $h_k = \lfloor2.25 h_{k-1}\rfloor$ .  (Figure)  Shell sort average number of comparisons (English).svg   Applying the theory of Kolmogorov complexity , Jiang, Li, and Vitányi proved the following lower bounds for the order of the average number of operations in an m -pass Shellsort: Ω( mN 1+1/ m ) when m ≤log 2 N and Ω( mN ) when m >log 2 N . 20 Therefore Shellsort has prospects of running in an average time that asymptotically grows like N log N only when using gap sequences whose number of gaps grows in proportion to the logarithm of the array size. It is, however, unknown whether Shellsort can reach this asymptotic order of average-case complexity, which is optimal for comparison sorts.  The worst-case complexity of any version of Shellsort is of higher order: Plaxton, Poonen, and Suel showed that it grows at least as rapidly as Ω( N (log N /log log N ) 2 ). 21  Applications  Shellsort is now rarely used in serious applications. It performs more operations and has higher cache miss ratio than quicksort . However, since it can be implemented using little code and does not use the call stack , some implementations of the qsort function in the C standard library targeted at embedded systems use it instead of quicksort. Shellsort is, for example, used in the uClibc library. 22 For similar reasons, an implementation of Shellsort is present in the Linux kernel . 23  Shellsort can also serve as a sub-algorithm of introspective sort , to sort short subarrays and to prevent a pathological slowdown when the recursion depth exceeds a given limit. This principle is employed, for instance, in the bzip2 compressor. 24  See also   Comb sort   References  Bibliography    Analysis of Shellsort and Related Algorithms , Robert Sedgewick, Fourth European Symposium on Algorithms, Barcelona, September 1996.   External links   Shellsort with gaps 5, 3, 1 as a Hungarian folk dance   "  Category:Sorting algorithms  Category:Comparison sorts      ↩  Some older textbooks and references call this the "Shell-Metzner" sort after Marlene Metzner Norton , but according to Metzner, "I had nothing to do with the sort, and my name should never have been attached to it." See ↩  ↩  ↩       ↩  ↩  ↩  ↩   ↩  ↩    ↩  ↩  ↩  ↩  ↩     