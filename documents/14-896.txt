


ACE Encrypt




ACE Encrypt

ACE (Advanced Cryptographic Engine) — the collection of units, implementing both a public key encryption scheme and a digital signature scheme. Corresponding names for these schemes — «ACE Encrypt» and «ACE Sign». Schemes are based on Cramer-Shoup public key encryption scheme and Cramer-Shoup signature scheme. Introduced variants of these schemes are intended to achieve a good balance between performance and security of the whole encryption system.
Authors
All the algorithms, implemented in ACE are based on algorithms developed by Victor Shoup and Ronald Cramer. The full algorithms specification is written by Victor Shoup. Implementation of algorithms is done by Thomas Schweinberger and Mehdi Nassehi, its supporting and maintaining is done by Victor Shoup. Thomas Schweinberger participated in construction of ACE specification document and also wrote a user manual.
Ronald Cramer currently stays in the university of Aarhus, Denmark. He worked on the project of ACE Encrypt while his staying in ETH in Zürich, Switzerland.
Mehdi Nassehi and Thomas Schweinberger worked on ACE project in the IBM research lab in Zürich, Switzerland.
 Victor Shoup works in the IBM research lab in Zürich, Switzerland.
Security
The encryption scheme in ACE can be proven secure under reasonable and natural intractability assumptions. These four assumptions are:

The Decisional Diffie-Hellman (DDH) assumption
Strong RSA assumption
SHA-1 second preimage collision resistance
MARS sum/counter mode pseudo-randomness

Basic Terminology and Notation
Here we introduce some notations, being used in this article.
Basic mathematical notation


 
  — The set of integers.

 
  — The set of univariate polynomials with coefficients in the finite field 
 
 
 
  of cardinality 2.

 
  — integer 
 
 
 
  such that 
 
 
 
  for integer 
 
 
 
  and 
 
 
 
 .

 
  — polynomial 
 
 
 
  with 
 
 
 
  with 
 
 
 
 .
Basic string notation


 
  — The set of all strings.

 
  — The set of all strings with length n.
 For 
 
 
 
  — length of string 
 
 
 
 . The string of length zero is denoted 
 
 
 
 .
 For 
 
 

 
  — the result of 
 
 
 
  and 
 
 
 
  concatenation.
Bits, Bytes, Words


 
  — The set of bits.
  Let us take all sets of form 
 
 
 
 . For such a set A we define the "zero element":



 
 ;

 
  for 
 
 
 
 .

We define 
 
 
 
  as a set of bytes, and 
 
 
 
  as a set of words.
For 
 
 
 
  with 
 
 
 
  and 
 
 
 
  we define a padding operator:





Conversion operator
Conversion operator 
 
 
 
  makes a conversion between elements 
 
 
 
 .
Encryption Scheme
Encryption Key Pair
The encryption scheme employs two key types:
 ACE public key
 
 
 
 .
 ACE private key
 
 
 
 .
 For a given size parameter m 
 
 
 
 , such that 
 
 
 
 , key components are defined as:

 
  — a 256-bit prime number.

 
  — a m-bit prime number, such that 
 
 
 
 .

 
  — elements 
 
 
 
  (whose multiplicative order modulo 
 
 
 
  divides 
 
 
 
 ).

 
  — elements 
 
 
 
 .

 
  — elements 
 
 
 
  with 
 
 
 
  and 
 
 
 
 , where 
 
 
 
  and 
 
 
 
 .
Key Generation
Algorithm. Key Generation for ACE encryption scheme.
 Input: a size parameter m 
 
 
 
 , such that 
 
 
 
 .
 Output: a public/private key pair.

Generate a random prime 
 
 
 
 , such that 
 
 
 
 .
Generate a random prime 
 
 
 
 , 
 
 
 
 , such that 
 
 
 
 .
Generate a random integer 
 
 
 
 , such that 
 
 
 
 .
Generate random integers 
 
 
 
  and 
 
 

Compute the following integers in 
 
 
 
 :
 


 
 ,

 
 ,

 
 ,

 
 ,

 
 .

Generate random byte strings 
 
 
 
  and 
 
 
 
 , where 
 
 
 
  and 
 
 
 
 .
Return the public key/private key pair
 





Ciphertext Representation
A ciphertext of the ACE encryption scheme has the form




 
 ,


 where the components are defined as:

 
  — integers from 
 
 
 
  (whose multiplicative order modulo 
 
 
 
  divides 
 
 
 
 ).

 
  — element 
 
 
 
 .

 
  — element 
 
 
 
 .

 
  we call the preamble, and 
 
 
 
  — the cryptogram. If a cleartext is a string consisting of 
 
 
 
  байт, then the length of 
 
 
 
  is equal to 
 
 
 
 .
 We need to introduce the function 
 
 
 
 , which maps a ciphertext to its byte-string representation, and the corresponding inverse function 
 
 
 
 . For the integer 
 
 
 
 , word string 
 
 
 
 , integers 
 
 
 
 , and byte string 
 
 
 
 ,



 
 .


 For integer 
 
 
 
 , byte string 
 
 
 
 , such that 
 
 
 
 ,



 
 .

Encryption Process
Algorithm. ACE asymmetric encryption operation.
 input: public key 
 
 
 
  and byte string 
 
 
 
 .
 Output: byte string — ciphertext 
 
 
 
  of 
 
 
 
 .

Generate 
 
 
 
  at random.
Generate the ciphertext preamble:
 
Generate 
 
 
 
  at random.
Compute 
 
 
 
 , 
 
 
 
 .
Compute 
 
 
 
 ; note that 
 
 
 
 .
Compute 
 
 
 
 .

Compute the key for the symmetric encryption operation:
 


 
 , 
 
 
 
 .
Compute 
 
 
 
 .

Compute cryptogram 
 
 
 
 .
Encode the ciphertext:
 


 
 .

Return 
 
 
 
 .

Before starting off the symmetric encryption process, the input message 
 
 
 
  is divided into blocks 
 
 
 
 , where each of the block, possibly except the last one, is of 1024 bytes. Each block is encrypted by the stream cipher. For each encrypted block 
 
 
 
  16-byte message authentication code is computed. We get the cryptogram



 
 .
 
 
 
 .

Note that if 
 
 
 
 , then 
 
 
 
 . Algorithm. ACE asymmetric encryption process.
 Input
 
 


 Output
 
 
 
 , 
 
 
 
 .

If 
 
 
 
 , then return 
 
 
 
 .
Initialize a pseudo-random generator state:
 




Generate the key 
 
 
 
 :
 


 
 .



 
 .
While 
 
 
 
 .
 
Generate mask values for the encryption and MAC:
 


 
 .


 
 .

Encrypt the plaintext
 
 
 
 .
Generate the message authentication code:
 
If 
 
 
 
 , then 
 
 
 
 ; else 
 
 
 
 .


 
 .

Update the ciphertext
 
 
 
 .


 
 .

Return 
 
 
 
 .

Decryption process
Algorithm. ACE decryption process.
 Input: public key 
 
 
 
  and corresponding private key 
 
 
 
 , byt e string 
 
 
 
 .
 Output: Decrypted message 
 
 
 
 .

Decrypt the ciphertext:
 
If 
 
 
 
 , then return 
 
 
 
 .
Compute:
 


 
 ;


 note that 
 
 
 
 , where 
 
 
 
 .

Verify the ciphertext preamble:
 
If 
 
 
 
  or 
 
 
 
  or 
 
 
 
 , then return 
 
 
 
 .
If 
 
 
 
 , then return 
 
 
 
 .


 
 .
If 
 
 
 
 , then 
 
 
 
 .
Compute 
 
 
 
 ; note that 
 
 
 
 .
If 
 
 
 
 , then 
 
 
 
 .
If 
 
 
 
 , then return 
 
 
 
 .

Compute the key for the symmetric decryption operation:
 


 
 , 
 
 
 
 .
Compute 
 
 
 
 .

Compute 
 
 
 
 ;note that 
 
 
 
  can return 
 
 
 
 .
Return 
 
 
 
 .

Algorithm. Decryption operation 
 
 
 
 .
 Input
 
 


 Output: Decrypted message 
 
 
 
 .

If 
 
 
 
 , then return 
 
 
 
 .
Initialize a pseudo-random generator state:
 




Generate the key 
 
 
 
 :
 


 
 .



 
 .
While 
 
 
 
 .
 
If 
 
 
 
 , then return 
 
 
 
 .
Generate mask values for the encryption and MAC:
 


 
 .


 
 .

Verify the message authentication code:
 
If 
 
 
 
 , then 
 
 
 
 ; else 
 
 
 
 .


 
 .
If 
 
 
 
 , then return 
 
 
 
 .

Update the plaintext
 
 
 
 .


 
 .

Return 
 
 
 
 .

Signature Scheme
The signature scheme employs two key types:
 ACE Signature public key
 
 
 
 .
 ACE Signature private key
 
 
 
 .
 For the given size parameter 
 
 
 
 , such that 
 
 
 
 , key components are defined the following way:

 
  — 
 
 
 
 -bit prime number with 
 
 
 
  — is also a prime number.

 
  — 
 
 
 
 -bit prime number with 
 
 
 
  — is also a prime number.

 
  — 
 
 
 
 and has either 
 
 
 
  or 
 
 
 
  бит.

 
  — elements 
 
 
 
  (quadratic residues modulo 
 
 
 
 ).

 
  — 161-bit prime number.

 
  — element 
 
 


 
  — elements 
 
 
 
 .

 
  — elements 
 
 
 
 .
Key Generation
Algorithm. Key generation for the ACE public-key signature scheme.
 Input: size parameter 
 
 
 
 , such that 
 
 
 
 .
 Output: public/private key pair.

Generate random prime numbers
 
 
 
 , such that 
 
 
 
  and 
 
 
 
  — is also a prime number, and
 


 
 , 
 
 


и 
 
 
 
 ,
 where




 
  and 
 
 
 
 .

Set 
 
 
 
 .
Generate random prime number 
 
 
 
 , где 
 
 
 
 .
Generate random 
 
 
 
 , taking into account 
 
 
 
  and 
 
 
 
 , and compute 
 
 
 
 .
Generate random 
 
 
 
 and compute 
 
 
 
 .
Generate random byte strings 
 
 
 
 , and 
 
 
 
 .
Return public key/private key pair
 


 
 .


Signature Representation
The signature in the ACE signature scheme has the form 
 
 
 
 , where the components are defined the following way:

 
  — element 
 
 
 
 .

 
  — integer, such that 
 
 
 
 .

 
  — elements 
 
 
 
 .

 
  — element 
 
 
 
 ;note that 
 
 
 
 , where 
 
 
 
  — message being signed.
 We need to introduce the 
 
 
 
  function, which maps a signature into its byte string representation, and the corresponding inverse function 
 
 
 
 . For integer 
 
 
 
 , byte string 
 
 
 
 , integers 
 
 
 
  and 
 
 
 
 , and byte string 
 
 
 
 ,



 
 .


 For integer 
 
 
 
 , byte string 
 
 
 
 , where 
 
 
 
 ,



 
 .

Signature Generation Process
Algorithm. ACE Signature Generation Process.
 Input: public key 
 
 
 
  and corresponding private key 
 
 
 
  and byte string 
 
 
 
 , 
 
 
 
 .
 Output: byte string — digital signature 
 
 
 
 .

Perform the following steps to hash the input data:
 
Generate a hash key 
 
 
 
  at random, such that 
 
 
 
 .
Compute 
 
 
 
 .

Select 
 
 
 
  at random, and compute 
 
 
 
 .
Compute 
 
 
 
 .
Generate a random prime 
 
 
 
 , 
 
 
 
 , and its certificate of correctness 
 
 

 
 . Repeat this step until 
 
 
 
 .
Set 
 
 
 
 ; note that 
 
 
 
 .
Compute 
 
 
 
 , where
 
$b \leftarrow e^{-1}(a-r)rem(p^{\prime}q^{\prime})$,


 and where $p^{\prime}=(p-1)/2$ and $q^{\prime}=(q-1)/2$.
Encode the signature:
 
$\sigma \leftarrow SEncode(L_B(N),d,w,y,y^{\prime},\tilde{k})$.

Return $\sigma\,$

Notes
In the definition of ACE Encryption process and ACE Signature process some auxiliary function(e.g. UOWHash,ESHash and some other) are being used, definition of which goes beyond this article. You cand find more details about it in в.1
Implementation, Utilization and Performance
ACE Encryption scheme is recommended by NESSIE (New European Schemes for Signatures, Integrity and Encryption) as asymmetric encryption scheme. Press-release is dated by February 2003.
Both schemes were implemented in ANSI C, with the use of GNU GMP library. Tests were done on two platforms: Power PC 604 model 43P under AIX system and 266 MHz Pentium under Windows NT system. Result tables:
Table 1. Time costs on basic operations.





Power PC

Pentium




Operand size(byte)

Operand size(byte)




512

1024



Multiplication

3.5 * 10^(-5) sec

1.0 * 10^(-4) sec



Squaring

3.3 * 10^(-5) sec

1.0 * 10^(-4) sec



Exponentiation

1.9 * 10^(-2) sec

1.2 * 10^(-1) sec



Table 2. Performance of encryption scheme and signature scheme.





Power PC

Pentium




Fixed costs (ms)

MBit/sec



Encrypt

160

18



Decrypt

68

18



Sign

48

64



Sign set-up

29




Verify

52

65



Literature


External links

http://www.alphaworks.ibm.com/tech/ace
http://www.zurich.ibm.com/security/ace/
NESSIE Portfolio of recommended cryptographic primitives

"
Category:Cryptographic software



ACE: The Advanced Cryptographic Engine, T. Schweinberger and V. Shoup, manuscript 2000↩




