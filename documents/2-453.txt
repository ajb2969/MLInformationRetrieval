   Lenstra elliptic curve factorization      Lenstra elliptic curve factorization   The Lenstra elliptic curve factorization or the elliptic curve factorization method ( ECM ) is a fast, sub- exponential running time algorithm for integer factorization which employs elliptic curves . For general purpose factoring, ECM is the third-fastest known factoring method. The second fastest is the multiple polynomial quadratic sieve and the fastest is the general number field sieve . The Lenstra elliptic curve factorization is named after Hendrik Lenstra .  Practically speaking, ECM is considered a special purpose factoring algorithm as it is most suitable for finding small factors. , it is still the best algorithm for divisors not greatly exceeding 20 to 25 digits (64 to 83 bits or so), as its running time is dominated by the size of the smallest factor p rather than by the size of the number n to be factored. Frequently, ECM is used to remove small factors from a very large integer with many factors; if the remaining integer is still composite, then it has only large factors and is factored using general purpose techniques. The largest factor found using ECM so far has 83 digits and was discovered on 7 September 2013 by R. Propper. 1 Increasing the number of curves tested improves the chances of finding a factor, but they are not linear with the increase in the number of digits.  Lenstra's elliptic curve factorization  The Lenstra elliptic curve factorization method to find a factor of the given natural number   n   n   n   works as follows:   Pick a random elliptic curve over     ℤ  /  n   ℤ        ℤ  n   ℤ    \mathbb{Z}/n\mathbb{Z}   , with equation of the form     y  2   =     x  3   +   a  x   +  b      (   mod  n   )         superscript  y  2    annotated     superscript  x  3     a  x   b    pmod  n      y^{2}=x^{3}+ax+b\;\;(\mathop{{\rm mod}}n)   together with a non-trivial point     P   (   x  0   ,   y  0   )       P    subscript  x  0    subscript  y  0      P(x_{0},y_{0})   on it.  This can be done by first picking random      x  0   ,   y  0   ,  a   ∈    ℤ  /  n   ℤ         subscript  x  0    subscript  y  0   a       ℤ  n   ℤ     x_{0},y_{0},a\in\mathbb{Z}/n\mathbb{Z}   , and then calculating    b  =     y  0  2   -   x  0  3   -   a   x  0        (   mod  n   )        b   annotated     superscript   subscript  y  0   2    superscript   subscript  x  0   3     a   subscript  x  0      pmod  n      b=y_{0}^{2}-x_{0}^{3}-ax_{0}\;\;(\mathop{{\rm mod}}n)   .     'Addition' of P and Q as points in general defines a group operation P ⊕ Q on the curve whose product can be computed from formulas given in the article on elliptic curves .  Using this assumption, we can form repeated multiples of a point P : kP = P ⊕ ... ⊕ P ( k times). The addition formulas involve the taking the modular slope of a chord joining P and Q , and thus division between residue classes modulo n , performed using the extended Euclidean algorithm . In particular, division by some v (mod n ) includes calculation of the greatest common divisor gcd( v , n ).  If the slope is of the form u / v with gcd( u , n ) = 1, then v = 0 (mod n ) means that the result of the ⊕-addition will be   ∞     \infty   , the point 'at infinity' corresponding to the intersection of the 'vertical' line joining P ( x , y ), P ' ( x , − y ) and the curve. However, if gcd( v , n ) is neither 1 nor n , then the ⊕-addition will not produce a meaningful point on the curve, which shows that our elliptic curve is not a group (mod n ), but, more importantly for now, gcd( v , n ) is a non-trivial factor of n .     Compute eP on the elliptic curve (mod n ), where e is product of many small numbers: say, a product of small primes raised to small powers, as in the p − 1 algorithm , or the factorial  B ! for some not too large B . This can be done efficiently, one small factor at a time. Say, to get B ! P , first compute 2 P , then 3(2 P ), then 4(3! P ), and so on. Of course, B should be small enough so that B -wise ⊕-addition can be performed in reasonable time.      If we were able to finish all the calculations above without encountering non-invertible elements (mod n ), then we need to try again with some other curve and starting point.  If at some stage we found kP = ∞ ( infinity on the elliptic curve), we should start over with a new curve and starting point, since this point   ∞     \infty   is the group identity element, so is unchanged under any further addition operations.  If we encountered a gcd( v , n ) at some stage that was neither 1 nor n , then we are done: it is a non-trivial factor of n .    The time complexity depends on the size of the factor and can be represented by exp((√2 + o (1)) √(ln p ln ln p )), where p is the smallest factor of n , or     L  p    [   1  2   ,   2   ]        subscript  L  p      1  2     2      L_{p}\left[\frac{1}{2},\sqrt{2}\right]   , in L-notation .  Why does the algorithm work?  If p and q are two prime divisors of n , then y 2 = x 3 + ax + b (mod n ) implies the same equation also modulo p and modulo q . These two smaller elliptic curves with the   ⊞   normal-⊞   \boxplus   -addition are now genuine groups . If these groups have N p and N q elements, respectively, then for any point P on the original curve, by Lagrange's theorem , k > 0 is minimal such that     k  P   =  ∞        k  P      kP=\infty   on the curve modulo p implies that k divides N p ; moreover,      N  p   P   =  ∞         subscript  N  p   P      N_{p}P=\infty   . The analogous statement holds for the curve modulo q . When the elliptic curve is chosen randomly, then N p and N q are random numbers close to p + 1 and q + 1, respectively (see below). Hence it is unlikely that most of the prime factors of N p and N q are the same, and it is quite likely that while computing eP , we will encounter some kP that is ∞ modulo p but not modulo q , or vice versa. When this is the case, kP does not exist on the original curve, and in the computations we found some v with either gcd( v , p ) = p or gcd( v , q ) = q , but not both. That is, gcd( v , n ) gave a non-trivial factor of n .  ECM is at its core an improvement of the older p − 1 algorithm . The p − 1 algorithm finds prime factors p such that p − 1 is b-powersmooth for small values of b . For any e , a multiple of p − 1, and any a  relatively prime to p , by Fermat's little theorem we have a e ≡ 1 ( mod  p ). Then gcd ( a e − 1, n ) is likely to produce a factor of n . However, the algorithm fails when p - 1 has large prime factors, as is the case for numbers containing strong primes , for example.  ECM gets around this obstacle by considering the group of a random elliptic curve over the finite field  Z p , rather than considering the multiplicative group of Z p which always has order p − 1.  The order of the group of an elliptic curve over Z p varies (quite randomly) between p + 1 − 2√ p and p + 1 + 2√ p by Hasse's theorem , and is likely to be smooth for some elliptic curves. Although there is no proof that a smooth group order will be found in the Hasse-interval, by using heuristic probabilistic methods, the Canfield–Erdős–Pomerance theorem with suitably optimized parameter choices, and the L-notation , we can expect to try L [√2/2, √2] curves before getting a smooth group order. This heuristic estimate is very reliable in practice.  An example  The following example is from , with some details added.  We want to factor n = 455839. Let's choose the elliptic curve y 2 = x 3 + 5 x – 5, with the point P = (1, 1) on it, and let's try to compute (10!) P .  The slope of the tangent line at some point A =( x , y ) is s = (3 x 2 + 5)/(2 y ) (mod n). Using s we can compute 2 A . If the value of s is of the form a/b where b > 1 and gcd( a , b ) = 1, we have to find the modular inverse of b . If it does not exist, gcd( n , b ) is a non-trivial factor of n .  First we compute 2 P . We have s ( P ) = s (1,1) = 4, so the coordinates of 2 P = ( x′ , y′ ) are and  = 4(1 – 14) – 1 = –53, all numbers understood (mod n ). Just to check that this 2 P is indeed on the curve: (–53) 2 = 2809 = 14 3 + 5·14 – 5.  Then we compute 3(2 P ). We have s (2 P ) = s (14,-53) = –593/106 (mod n ). Using the Euclidean algorithm : 455839 = 4300·106 + 39, then 106 = 2·39 + 28, then 39 = 28 + 11, then 28 = 2·11 + 6, then 11 = 6 + 5, then 6 = 5 + 1. Hence gcd(455839, 106) = 1, and working backwards (a version of the extended Euclidean algorithm ): 1 = 6 – 5 = 2·6 – 11 = 2·28 – 5·11 = 7·28 – 5·39 = 7·106 – 19·39 = 81707·106 – 19·455839. Hence 106 −1 = 81707 (mod 455839), and –593/106 = –133317 (mod 455839). Given this s , we can compute the coordinates of 2(2 P ), just as we did above: 4 P = (259851, 116255). Just to check that this is indeed a point on the curve: y 2 = 54514 = x 3 + 5 x – 5 (mod 455839). After this, we can compute     3   (   2  P   )    =    4  P   ⊞   2  P          3    2  P     normal-⊞    4  P     2  P      3(2P)=4P\boxplus 2P   .  We can similarly compute 4! P , and so on, but 8! P requires inverting 599 (mod 455839). The Euclidean algorithm gives that 455839 is divisible by 599, and we have found a factorization 455839 = 599·761.  The reason that this worked is that the curve (mod 599) has 640 = 2 7 ·5 points, while (mod 761) it has 777 = 3·7·37 points. Moreover, 640 and 777 are the smallest positive integers k such that kP = ∞ on the curve (mod 599) and (mod 761), respectively. Since 8! is a multiple of 640 but not a multiple of 777, we have 8! P = ∞ on the curve (mod 599), but not on the curve (mod 761), hence the repeated addition broke down here, yielding the factorization.  The algorithm with projective coordinates  Before considering the projective plane over    (    ℤ  /  n   ℤ   )        ℤ  n   ℤ    (\mathbb{Z}/n\mathbb{Z})   /~, first consider a 'normal' projective space over ℝ: Instead of points, lines through the origin are studied. A line may be represented as a non-zero point    (  x  ,  y  ,  z  )     x  y  z    (x,y,z)   , under an equivalence relation ~ given by    (  x  ,  y  ,  z  )     x  y  z    (x,y,z)   ~    (   x  ′   ,   y  ′   ,   z  ′   )      superscript  x  normal-′    superscript  y  normal-′    superscript  z  normal-′     (x^{\prime},y^{\prime},z^{\prime})   ⇔ ∃ c ≠ 0 such that x' = c x , y' = c y and z' = c z . Under this equivalence relation, the space is called the projective plane     (   P  2   )     superscript  P  2    (P^{2})   ; points, denoted by    (   x  :  y  :  z   )       normal-:  x  y    normal-:    z     (x:y:z)   , correspond to lines in a three-dimensional space that pass through the origin. Note that the point    (   0  :  0  :  0   )       normal-:  0  0    normal-:    0     (0:0:0)   does not exist in this space since to draw a line in any possible direction requires at least one of x',y' or z' ≠ 0. Now observe that almost all lines go through any given reference plane - such as the ( X,Y ,1)-plane, whilst the lines precisely parallel to this plane, having coordinates ( X,Y ,0), specify directions uniquely, as 'points at infinity' that are used in the affine ( X,Y )-plane it lies above.  In the algorithm, only the group structure of an elliptic curve over the field ℝ is used. Since we do not necessarily need the field ℝ, a finite field will also provide a group structure on an elliptic curve. However, considering the same curve and operation over    (    ℤ  /  n   ℤ   )        ℤ  n   ℤ    (\mathbb{Z}/n\mathbb{Z})   /~ with   n   n   n   not a prime does not give a group. The Elliptic Curve Method makes use of the failure cases of the addition law.  We now state the algorithm in projective coordinates. The neutral element is then given by the point at infinity    (   0  :  1  :  0   )       normal-:  0  1    normal-:    0     (0:1:0)   . Let   n   n   n   be a (positive) integer and consider the elliptic curve (a set of points with some structure on it)    E   (  Z  /  n  Z  )   =   {   (  x  :  y  :  z  )   ∈    P  2    |   y  2   z  =   x  3   +  a  x   z  2   +  b   z  3   }      fragments  E   fragments  normal-(  Z   n  Z  normal-)     fragments  normal-{   fragments  normal-(  x  normal-:  y  normal-:  z  normal-)     superscript  P  2   normal-|   superscript  y  2   z    superscript  x  3    a  x   superscript  z  2    b   superscript  z  3   normal-}     E(Z/nZ)=\{(x:y:z)\in P^{2}\ |\ y^{2}z=x^{3}+axz^{2}+bz^{3}\}   .   Pick     x  P   ,   y  P   ,  a      subscript  x  P    subscript  y  P   a    x_{P},y_{P},a   in     ℤ  /  n   ℤ        ℤ  n   ℤ    \mathbb{Z}/n\mathbb{Z}   (   a   a   a   ≠ 0).  Calculate    b  =    y  P  2   -   x  P  3   -   a   x  P         b     superscript   subscript  y  P   2    superscript   subscript  x  P   3     a   subscript  x  P       b=y_{P}^{2}-x_{P}^{3}-ax_{P}   . The elliptic curve   E   E   E   is then in Weierstrass form given by     y  2   =    x  3   +   a  x   +  b        superscript  y  2      superscript  x  3     a  x   b     y^{2}=x^{3}+ax+b   and by using projective coordinates the elliptic curve is given by the homogeneous equation     Z   Y  2    =    X  3   +   a   Z  2   X   +   b   Z  3           Z   superscript  Y  2       superscript  X  3     a   superscript  Z  2   X     b   superscript  Z  3       ZY^{2}=X^{3}+aZ^{2}X+bZ^{3}   . It has the point    P  =   (   x  P   :   y  P   :  1  )      fragments  P    fragments  normal-(   subscript  x  P   normal-:   subscript  y  P   normal-:  1  normal-)     P=(x_{P}:y_{P}:1)   .  Choose an upperbound    B  ∈  ℤ      B  ℤ    B\in\mathbb{Z}   for this elliptic curve. Remark: You will only find factors   p   p   p   if the group order of the elliptic curve   E   E   E   over     ℤ  /  p   ℤ        ℤ  p   ℤ    \mathbb{Z}/p\mathbb{Z}   (denoted by #    E   (    ℤ  /  p   ℤ   )       E      ℤ  p   ℤ     E(\mathbb{Z}/p\mathbb{Z})   ) is B-smooth , which means that all prime factors of #    E   (    ℤ  /  p   ℤ   )       E      ℤ  p   ℤ     E(\mathbb{Z}/p\mathbb{Z})   have to be less or equal to   B   B   B   .  Calculate    k  =   lcm   (  1  ,  …  ,  B  )        k    lcm   1  normal-…  B      k={\rm lcm}(1,\dots,B)   .  Calculate     k  P   :=   P  +  P  +  ⋯  +  P      assign    k  P     P  P  normal-⋯  P     kP:=P+P+\cdots+P   (k times) in the ring    E   (    ℤ  /  n   ℤ   )       E      ℤ  n   ℤ     E(\mathbb{Z}/n\mathbb{Z})   . Note that if #    E   (    ℤ  /  n   ℤ   )       E      ℤ  n   ℤ     E(\mathbb{Z}/n\mathbb{Z})   is   B   B   B   -smooth and   n   n   n   is prime (and therefore     ℤ  /  n   ℤ        ℤ  n   ℤ    \mathbb{Z}/n\mathbb{Z}   is a field) that    k  P  =   (  0  :  1  :  0  )      fragments  k  P    fragments  normal-(  0  normal-:  1  normal-:  0  normal-)     kP=(0:1:0)   . However, if only #    E   (    ℤ  /  p   ℤ   )       E      ℤ  p   ℤ     E(\mathbb{Z}/p\mathbb{Z})   is B-smooth for some divisor   p   p   p   of   n   n   n   , the product might not be (0:1:0) because addition and multiplication are not well-defined if   n   n   n   is not prime. In this case, a non-trivial divisor can be found.  If not, then go back to step 2. If this does occur, then you will notice this when simplifying the product    k  P      k  P    kP   .   In point 5 it is said that under the right circumstances a non-trivial divisor can be found. As pointed out in Lenstra's article (Factoring Integers with Elliptic Curves) the addition needs the assumption     gcd   (    x  1   -   x  2    ,  n  )    =  1           subscript  x  1    subscript  x  2    n   1    \gcd(x_{1}-x_{2},n)=1   . If    P  ,  Q     P  Q    P,Q   are not    (   0  :  1  :  0   )       normal-:  0  1    normal-:    0     (0:1:0)   and distinct (otherwise addition works similarly, but is a little different), then addition works as follows:   To calculate     R  =   P  +  Q    ;      R    P  Q     R=P+Q;       P  =   (   x  1   :   y  1   :  1  )      fragments  P    fragments  normal-(   subscript  x  1   normal-:   subscript  y  1   normal-:  1  normal-)     P=(x_{1}:y_{1}:1)   ,    Q  =   (   x  2   :   y  2   :  1  )      fragments  Q    fragments  normal-(   subscript  x  2   normal-:   subscript  y  2   normal-:  1  normal-)     Q=(x_{2}:y_{2}:1)   ,      λ  =    (    y  1   -   y  2    )     (    x  1   -   x  2    )    -  1         λ       subscript  y  1    subscript  y  2     superscript     subscript  x  1    subscript  x  2      1       \lambda=(y_{1}-y_{2})(x_{1}-x_{2})^{-1}   ,       x  3   =    λ  2   -   x  1   -   x  2         subscript  x  3      superscript  λ  2    subscript  x  1    subscript  x  2      x_{3}=\lambda^{2}-x_{1}-x_{2}   ,       y  3   =    λ   (    x  1   -   x  3    )    -   y  1         subscript  y  3       λ     subscript  x  1    subscript  x  3      subscript  y  1      y_{3}=\lambda(x_{1}-x_{3})-y_{1}   ,      R  =  P  +  Q  =   (   x  3   :   y  3   :  1  )      fragments  R   P   Q    fragments  normal-(   subscript  x  3   normal-:   subscript  y  3   normal-:  1  normal-)     R=P+Q=(x_{3}:y_{3}:1)   .   If addition fails, this will be due to a failure calculating   λ   λ   \lambda   . In particular, because     (    x  1   -   x  2    )    -  1      superscript     subscript  x  1    subscript  x  2      1     (x_{1}-x_{2})^{-1}   can not always be calculated if   n   n   n   is not prime (and therefore     ℤ  /  n   ℤ        ℤ  n   ℤ    \mathbb{Z}/n\mathbb{Z}   is not a field). Without making use of     ℤ  /  n   ℤ        ℤ  n   ℤ    \mathbb{Z}/n\mathbb{Z}   being a field, one could calculate:        λ  ′   =    y  1   -   y  2         superscript  λ  normal-′      subscript  y  1    subscript  y  2      \lambda^{\prime}=y_{1}-y_{2}   ,       x  3  ′   =    λ   ′   2   -    x  1     (    x  1   -   x  2    )   2    -    x  2     (    x  1   -   x  2    )   2          superscript   subscript  x  3   normal-′      superscript   superscript  λ  normal-′   2      subscript  x  1    superscript     subscript  x  1    subscript  x  2    2       subscript  x  2    superscript     subscript  x  1    subscript  x  2    2       x_{3}^{\prime}={\lambda^{\prime}}^{2}-x_{1}(x_{1}-x_{2})^{2}-x_{2}(x_{1}-x_{2}%
 )^{2}   ,       y  3  ′   =     λ  ′    (     x  1     (    x  1   -   x  2    )   2    -   x  3  ′    )    -    y  1     (    x  1   -   x  2    )   3          superscript   subscript  y  3   normal-′        superscript  λ  normal-′        subscript  x  1    superscript     subscript  x  1    subscript  x  2    2     superscript   subscript  x  3   normal-′        subscript  y  1    superscript     subscript  x  1    subscript  x  2    3       y_{3}^{\prime}=\lambda^{\prime}(x_{1}(x_{1}-x_{2})^{2}-x_{3}^{\prime})-y_{1}(x%
 _{1}-x_{2})^{3}   ,      R  =  P  +  Q  =   (   x  3  ′    (   x  1   -   x  2   )   :   y  3  ′   :    (   x  1   -   x  2   )   3   )      fragments  R   P   Q    fragments  normal-(   superscript   subscript  x  3   normal-′    fragments  normal-(   subscript  x  1     subscript  x  2   normal-)   normal-:   superscript   subscript  y  3   normal-′   normal-:   superscript   fragments  normal-(   subscript  x  1     subscript  x  2   normal-)   3   normal-)     R=P+Q=(x_{3}^{\prime}(x_{1}-x_{2}):y_{3}^{\prime}:(x_{1}-x_{2})^{3})   , and simplify if possible.   This calculation is always legal and if the gcd of the   Z   Z   Z   -coordinate with   n   n   n   ≠ (1 or   n   n   n   ), so when simplifying fails, a non-trivial divisor of   n   n   n   is found.  Twisted Edwards curves  The use of Edwards curves needs fewer modular multiplications and less time than the use of Montgomery curves or Weierstrass curves (other used methods). Using Edwards curves you can also find more primes.  Definition: Let   k   k   k   be a field in which    2  ≠  0      2  0    2\neq 0   , and let     a  ,  d   ∈   k  ∖   {  0  }         a  d     k   0      a,d\in k\setminus\{0\}   with    a  ≠  d      a  d    a\neq d   . Then the twisted Edwards curve    E   E  ,  a  ,  d      subscript  E   E  a  d     E_{E,a,d}   is given by       a   x  2    +   y  2    =   1  +   d   x  2    y  2      .          a   superscript  x  2     superscript  y  2      1    d   superscript  x  2    superscript  y  2       ax^{2}+y^{2}=1+dx^{2}y^{2}.   An Edwards curve is a twisted Edwards curve in which    a  =  1      a  1    a=1   .  There are five known ways to build a set of point on an Edwards curve: the set of affine points, the set of projective points, the set of inverted points, the set of extended points and the set of completed points.  The set of affine points is given by    {    (  x  ,  y  )   ∈   A  2    :     a   x  2    +   y  2    =   1  +   d   x  2    y  2      }     conditional-set     x  y    superscript  A  2          a   superscript  x  2     superscript  y  2      1    d   superscript  x  2    superscript  y  2        \{(x,y)\in A^{2}:ax^{2}+y^{2}=1+dx^{2}y^{2}\}   .  The addition law is given by      (  e  ,  f  )   ,   (  g  ,  h  )    ↦   (     e  h   +   f  g     1  +   d  e  g  f  h     ,     f  h   -   a  e  g     1  -   d  e  g  f  h     )      maps-to    e  f    g  h           e  h     f  g      1    d  e  g  f  h           f  h     a  e  g      1    d  e  g  f  h        (e,f),(g,h)\mapsto\left(\frac{eh+fg}{1+degfh},\frac{fh-aeg}{1-degfh}\right)   . The point (0,1) is its neutral element and the negative of    (  e  ,  f  )     e  f    (e,f)   is    (   -  e   ,  f  )       e   f    (-e,f)   . The other representations are defined similar to how the projective Weierstrass curve follows from the affine.  Any elliptic curve in Edwards form has a point of order 4. So the torsion group of an Edwards curve over   ℚ   ℚ   \mathbb{Q}   is isomorphic to either      ℤ  /  4   ℤ   ,    ℤ  /  8   ℤ   ,    ℤ  /  12   ℤ   ,       ℤ  /  2   ℤ   ×  ℤ   /  4   ℤ          ℤ  4   ℤ       ℤ  8   ℤ       ℤ  12   ℤ             ℤ  2   ℤ   ℤ   4   ℤ     \mathbb{Z}/4\mathbb{Z},\mathbb{Z}/8\mathbb{Z},\mathbb{Z}/12\mathbb{Z},\mathbb{%
 Z}/2\mathbb{Z}\times\mathbb{Z}/4\mathbb{Z}   or        ℤ  /  2   ℤ   ×  ℤ   /  8   ℤ              ℤ  2   ℤ   ℤ   8   ℤ    \mathbb{Z}/2\mathbb{Z}\times\mathbb{Z}/8\mathbb{Z}   .  The most interesting cases for ECM are     ℤ  /  12   ℤ        ℤ  12   ℤ    \mathbb{Z}/12\mathbb{Z}   and        ℤ  /  2   ℤ   ×  ℤ   /  8   ℤ              ℤ  2   ℤ   ℤ   8   ℤ    \mathbb{Z}/2\mathbb{Z}\times\mathbb{Z}/8\mathbb{Z}   , since they force the group orders of the curve modulo primes to be divisible by 12 and 16 respectively. The following curves have a torsion group isomorphic to     ℤ  /  12   ℤ        ℤ  12   ℤ    \mathbb{Z}/12\mathbb{Z}   :         x  2   +   y  2    =   1  +   d   x  2    y  2            superscript  x  2    superscript  y  2      1    d   superscript  x  2    superscript  y  2       x^{2}+y^{2}=1+dx^{2}y^{2}   with point    (  a  ,  b  )     a  b    (a,b)   where     b  ∉   {   -  2   ,   -   1  /  2    ,  0  ,   ±  1   }    ,    a  2   =   -   (    b  2   +   2  b    )        formulae-sequence    b     2       1  2    0   plus-or-minus  1        superscript  a  2        superscript  b  2     2  b        b\notin\{-2,-1/2,0,\pm 1\},a^{2}=-(b^{2}+2b)   and    d  =   -    (    2  b   +  1   )   /   (    a  2    b  2    )         d          2  b   1      superscript  a  2    superscript  b  2        d=-(2b+1)/(a^{2}b^{2})           x  2   +   y  2    =   1  +   d   x  2    y  2            superscript  x  2    superscript  y  2      1    d   superscript  x  2    superscript  y  2       x^{2}+y^{2}=1+dx^{2}y^{2}   with point    (  a  ,  b  )     a  b    (a,b)   where     a  =     u  2   -  1     u  2   +  1     ,   b  =   -     (   u  -  1   )   2     u  2   +  1         formulae-sequence    a       superscript  u  2   1      superscript  u  2   1       b       superscript    u  1   2      superscript  u  2   1        a=\frac{u^{2}-1}{u^{2}+1},b=-\frac{(u-1)^{2}}{u^{2}+1}   and      d  =      (    u  2   +  1   )   3    (     u  2   -   4  u    +  1   )       (   u  -  1   )   6     (   u  +  1   )   2      ,   u  ∉   {  0  ,   ±  1   }     .     formulae-sequence    d       superscript     superscript  u  2   1   3        superscript  u  2     4  u    1       superscript    u  1   6    superscript    u  1   2        u   0   plus-or-minus  1       d=\frac{(u^{2}+1)^{3}(u^{2}-4u+1)}{(u-1)^{6}(u+1)^{2}},u\notin\{0,\pm 1\}.      Every Edwards curve with a point of order 3 can be written in the ways shown above. Curves with torsion group isomorphic to        ℤ  /  2   ℤ   ×  ℤ   /  8   ℤ              ℤ  2   ℤ   ℤ   8   ℤ    \mathbb{Z}/2\mathbb{Z}\times\mathbb{Z}/8\mathbb{Z}   and        ℤ  /  2   ℤ   ×  ℤ   /  4   ℤ              ℤ  2   ℤ   ℤ   4   ℤ    \mathbb{Z}/2\mathbb{Z}\times\mathbb{Z}/4\mathbb{Z}   can be found on http://eprint.iacr.org/2008/016 , top of page 30.  Stage 2  The above text is about the first stage of elliptic curve factorisation. There one hopes to find a prime divisor   p   p   p   such that    s  P      s  P    sP   is the neutral element of    E   (    ℤ  /  p   ℤ   )       E      ℤ  p   ℤ     E(\mathbb{Z}/p\mathbb{Z})   . In the second stage one hopes to have found a prime divisor   q   q   q   such that    s  P      s  P    sP   has small prime order in    E   (    ℤ  /  q   ℤ   )       E      ℤ  q   ℤ     E(\mathbb{Z}/q\mathbb{Z})   .  We hope the order to be between    B  1     subscript  B  1    B_{1}   and    B  2     subscript  B  2    B_{2}   , where    B  1     subscript  B  1    B_{1}   is determined in stage 1 and    B  2     subscript  B  2    B_{2}   is new stage 2 parameter. Checking for a small order of    s  P      s  P    sP   , can be done by computing     (   l  s   )   P        l  s   P    (ls)P   modulo   n   n   n   for each prime   l   l   l   .  Success probability using EECM-MPFQ  For speedup techniques using Edward curves and implementation results, see: http://eprint.iacr.org/2008/016 pages 30–32.  Hyperelliptic curve method (HECM)  There are recent developments in using hyperelliptic curves to factor integers. Cosset shows in his article (of 2010) that one can build a hyperelliptic curve with genus two (so a curve     y  2   =   f   (  x  )         superscript  y  2     f  x     y^{2}=f(x)   with   f   f   f   of degree 5) which gives the same result as using two 'normal' elliptic curves at the same time. By making use of the Kummer Surface calculation is more efficient. The disadvantages of the hyperelliptic curve (versus an elliptic curve) are compensated by this alternative way of calculating. Therefore Cosset roughly claims that using hyperelliptic curves for factorization is no worse than using elliptic curves.  See also   UBASIC for practical program (ECMX).   References                 External links   Factorization using the Elliptic Curve Method , a Java applet which uses ECM and switches to the Self-Initializing Quadratic Sieve when it is faster.  GMP-ECM , an efficient implementation of ECM.  ECMNet , an easy client-server implementation that works with several factorization projects.  pyecm , a python implementation of ECM. Much faster with psyco and/or gmpy.  Distributed computing project yoyo@Home Subproject ECM is a program for Elliptic Curve Factorization which is used by a couple of projects to find factors for different kind of numbers.  Lenstra Elliptic Curve Factorization algorithm source code Simple C and GMP Elliptic Curve Factorization Algorithm source code   "  Category:Integer factorization algorithms  Category:Finite fields     50 largest factors found by ECM ↩     