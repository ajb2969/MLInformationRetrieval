   Cache-oblivious distribution sort      Cache-oblivious distribution sort  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     The cache-oblivious distribution sort is a comparison-based  sorting algorithm . It was introduced in 1999 in the context of the cache oblivious model . In the external memory model, the number of memory transfers it needs to perform a sort of   N   N   N   items on a machine with cache of size   Z   Z   Z   and cache lines of length   L   L   L   is    O   (    N  L     log  Z   N    )       O      N  L     subscript   Z   N      O(\frac{N}{L}\log_{Z}N)   , under the tall cache assumption that    Z  =   Ω   (   L  2   )        Z    normal-Ω   superscript  L  2      Z=\Omega(L^{2})   . This number of memory transfers has been shown to be asymptotically optimal for comparison sorts. This distribution sort also achieves the asymptotically optimal runtime complexity of    Θ   (   N   log  N    )       normal-Θ    N    N      \Theta(N\log N)   .  Algorithm  Basic Overview  Distribution sort operates on a contiguous array of   N   N   N   elements. To sort the elements, it performs the following:   Partition the array into    N      N    \sqrt{N}   contiguous subarrays of size    N      N    \sqrt{N}   , and recursively sort each subarray.  Distribute the elements of the sorted subarrays into    q  ≤   N       q    N     q\leq\sqrt{N}   buckets     B  1   ,   B  2   ,  …  ,   B  q       subscript  B  1    subscript  B  2   normal-…   subscript  B  q     B_{1},B_{2},\ldots,B_{q}   each of size at most    2   N       2    N     2\sqrt{N}   such that for every i from 1 to q-1, every element of bucket    B  i     subscript  B  i    B_{i}   is not larger than any element in     B   i  +  1    .     subscript  B    i  1     B_{i+1}.   This distribution step is the main step of this algorithm, and is covered in more detail below.  Recursively sort each bucket.  Output the concatenation of the buckets.   Distribution Step  As mentioned in step 2 above, the goal of the distribution step is to distribute the sorted subarrays into q buckets      B  1   ,   B  2   ,  …  ,   B  q    .      subscript  B  1    subscript  B  2   normal-…   subscript  B  q     B_{1},B_{2},\ldots,B_{q}.   The distribution step algorithm maintains two invariants. The first is that each bucket has size at most    2   N       2    N     2\sqrt{N}   at any time, and any element in bucket    B  i     subscript  B  i    B_{i}   is no larger than any element in bucket     B   i  +  1    .     subscript  B    i  1     B_{i+1}.   The second is that every bucket has an associated pivot , a value which is greater than all elements in the bucket.  Initially, the algorithm starts with one empty bucket with pivot   ∞     \infty   . As it fills buckets, it creates new buckets by splitting a bucket into two when it would be made overfull (by having at least    (    2   N    +  1   )        2    N    1    (2\sqrt{N}+1)   elements placed into it). The split is done by performing the linear time median finding algorithm, and partitioning based on this median. The pivot of the lower bucket will be set to the median found, and the pivot of the higher bucket will be set to the same as the bucket before the split. At the end of the distribution step, all elements are in the buckets, and the two invariants will still hold.  To accomplish this, each subarray and bucket will have a state associated with it. The state of a subarray consists of an index next of the next element to be read from the subarray, and a bucket number bnum indicating which bucket index the element should be copied to. By convention,     b  n  u  m   =  ∞        b  n  u  m      bnum=\infty   if all elements in the subarray have been distributed. (Note that when we split a bucket, we have to increment all bnum values of all subarrays whose bnum value is greater than the index of the bucket that is split.) The state of a bucket consists of the value of the bucket's pivot, and the number of elements currently in the bucket.  Consider the follow basic strategy: iterate through each subarray, attempting to copy over its element at position next . If the element is smaller than the pivot of bucket bnum , then place it in that bucket, possibly incurring a bucket split. Otherwise, increment bnum until a bucket whose pivot is large enough is found. Though this correctly distributes all elements, it does not exhibit a good cache performance.  Instead, the distribution step is performed in a recursive divide-and-conquer. The step will be performed as a call to the function distribute , which takes three parameters i, j, and m. distribute (i,j,m) will distribute elements from the i-th through (i+m-1)-th subarrays into buckets, starting from    B  j     subscript  B  j    B_{j}   . It requires as a precondition that each subarray r in the range    i  ,  …  ,    i  +  m   -  1      i  normal-…      i  m   1     i,\ldots,i+m-1   has its     b  n  u  m   [  r  ]    ≥  j        b  n  u  m   delimited-[]  r    j    bnum[r]\geq j   . The execution of distribute (i,j,m) will guarantee that each     b  n  u  m   [  r  ]    ≥   j  +  m         b  n  u  m   delimited-[]  r      j  m     bnum[r]\geq j+m   . The whole distribution step is distribute     (  1  ,  1  ,   N   )     1  1    N     (1,1,\sqrt{N})   . Pseudocode for the implementation of distribute is shown below:  def distribute(i,j,m): if m ==  1 :
     copy_elems(i,j) else :
     distribute(i,j,m / 2 )
     distribute(i + m / 2 ,j,m / 2 )
     distribute(i,j + m / 2 ,m / 2 )
     distribute(i + m / 2 ,j + m / 2 ,m / 2 )  The base case, where m=1, has a call to the subroutine copy_elems . In this base case, all elements from subarray i that belong to bucket j are added at once. If this leads to bucket j having too many elements, it splits the bucket with the procedure described beforehand.  References   Harald Prokop. Cache-Oblivious Algorithms . Masters thesis, MIT. 1999.   "  Category:Sorting algorithms  Category:Comparison sorts  Category:External memory algorithms  Category:Models of computation  Category:Cache (computing)  Category:Analysis of algorithms  