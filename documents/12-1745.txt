


Kind (type theory)




Kind (type theory)

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In the area of mathematical logic and computer science known as type theory, a kind is the type of a type constructor or, less commonly, the type of a higher-order type operator. A kind system is essentially a simply typed lambda calculus "one level up", endowed with a primitive type, denoted 
 
 
 
  and called "type", which is the kind of any data type which does not need any type parameters.
A kind is sometimes confusingly described as the "type of a (data) type", but it is actually more of an arity specifier. Syntactically, it is natural to consider polymorphic types to be type constructors, thus non-polymorphic types to be nullary type constructors. But all nullary constructors, thus all monomorphic types, have the same, simplest kind; namely 
 
 
 
 .
Since higher-order type operators are uncommon in programming languages, in most programming practice, kinds are used to distinguish between data types and the types of constructors which are used to implement parametric polymorphism. Kinds appear, either explicitly or implicitly, in languages whose type systems account for parametric polymorphism in a programatically accessible way, such as Haskell and Scala.1
Examples



 
 , pronounced "type", is the kind of all data types seen as nullary type constructors, and also called proper types in this context. This normally includes function types in functional programming languages.


 
  is the kind of a unary type constructor, e.g. of a list type constructor.


 
  is the kind of a binary type constructor (via currying), e.g. of a pair type constructor, and also that of a function type constructor (not to be confused with the result of its application, which itself is a function type, thus of kind 
 
 
 
 )


 
  is the kind of a higher-order type operator from unary type constructors to proper types. See Pierce (2002), chapter 32 for an application.

Kinds in Haskell
(Note: Haskell documentation uses the same arrow for both function types and kinds.)
Haskell's kind system2 has just two rules:



 
 , pronounced "type" is the kind of all data types.


 
  is the kind of a unary type constructor, which takes a type of kind 
 
 
 
  and produces a type of kind 
 
 
 
 .

An inhabited type (as proper types are called in Haskell) is a type which has values. For instance, ignoring type classes which complicate the picture, 4 is a value of type Int, while [1, 2, 3] is a value of type [Int] (list of Ints). Therefore, Int and [Int] have kind 
 
 
 
 , but so does any function type, for instance Int -> Bool or even Int -> Int -> Bool.
A type constructor takes one or more type arguments, and produces a data type when enough arguments are supplied, i.e. it supports partial application thanks to currying.34 This is how Haskell achieves parametric types. For instance, the type [] (list) is a type constructor - it takes a single argument to specify the type of the elements of the list. Hence, [Int] (list of Ints), [Float] (list of Floats) and even [[Int]] (list of lists of Ints) are valid applications of the [] type constructor. Therefore, [] is a type of kind 
 
 
 
 . Because Int has kind 
 
 
 
 , applying it to [] results in [Int], of kind 
 
 
 
 . The 2-tuple constructor (,) has kind 
 
 
 
 , the 3-tuple constructor (,,) has kind 
 
 
 
  and so on.
Kind inference
Standard Haskell does not allow polymorphic kinds. This is in contrast to parametric polymorphism on types, which is supported in Haskell. For instance, in the following example:
data Tree z  = Leaf | Fork (Tree z) (Tree z)
the kind of z could be anything, including 
 
 
 
 , but also 
 
 
 
  etc. Haskell by default will always infer kinds to be 
 
 
 
 , unless the type explicitly indicates otherwise (see below). Therefore the type checker will reject the following use of Tree:
type FunnyTree = Tree []     -- invalid
because the kind of [], 
 
 
 
  does not match the expected kind for z, which is always 
 
 
 
 .
Higher-order type operators are allowed however. For instance:
data App unt z = Z (unt z)
has kind 
 
 
 
 , i.e. unt is expected to be a unary data constructor, which gets applied to its argument, which must be a type, and returns another type.
GHC has the extension PolyKinds, which, together with KindSignatures, allows polymorphic kinds. For example:
data Tree (z :: k) = Leaf | Fork (Tree z) (Tree z)
 type FunnyTree = Tree []     -- OK
See also

System F-omega
Pure type system

References


, chapter 29, "Type Operators and Kinding"

"
Category:Type theory Category:Data types



Generics of a Higher Kind
Kinds - The Haskell 98 Report





