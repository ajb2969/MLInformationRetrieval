   Original proof of Gödel's completeness theorem      Original proof of Gödel's completeness theorem   The proof of Gödel's completeness theorem given by Kurt Gödel in his doctoral dissertation of 1929 (and a rewritten version of the dissertation, published as an article in 1930) is not easy to read today; it uses concepts and formalism that are no longer used and terminology that is often obscure. The version given below attempts to represent all the steps in the proof and all the important ideas faithfully, while restating the proof in the modern language of mathematical logic . This outline should not be considered a rigorous proof of the theorem.  Definitions and assumptions  We work with first-order predicate calculus . Our languages allow constant, function and relation symbols. Structures consist of (non-empty) domains and interpretations of the relevant symbols as constant members, functions or relations over that domain.  We fix some axiomatization of the predicate calculus: logical axioms and rules of inference. Any of the several well-known axiomatisations will do; we assume without proof all the basic well-known results about our formalism (such as the normal form theorem or the soundness theorem ) that we need.  We axiomatize predicate calculus without equality , i.e. there are no special axioms expressing the properties of equality as a special relation symbol. After the basic form of the theorem is proved, it will be easy to extend it to the case of predicate calculus with equality .  Statement of the theorem and its proof  In the following, we state two equivalent forms of the theorem, and show their equivalence.  Later, we prove the theorem. This is done in the following steps:   Reducing the theorem to sentences (formulas with no free variables) in prenex form , i.e. with all quantifiers (   ∀   normal-∀   ∀   and   ∃   normal-∃   ∃   ) at the beginning. Furthermore, we reduce it to formulas whose first quantifier is   ∀   normal-∀   ∀   . This is possible because for every sentence, there is an equivalent one in prenex form whose first quantifier is   ∀   normal-∀   ∀   .  Reducing the theorem to sentences of the form . While we cannot do this by simply rearranging the quantifiers, we show that it is yet enough to prove the theorem for sentences of that form.  Finally we prove the theorem for sentences of that form.  This is done by first noting that a sentence such as ∃ x 1 ∃ x 2 ...∃ x k ∃ y 1 ∃ y 2 ...∃ y m φ( x 1 ... x k , y 1 ... y m ) }} is either refutable or has some model in which it holds; this model is simply assigning truth values to the subpropositions from which B is built. The reason for that is the completeness of propositional logic , with the existential quantifiers playing no role.  We extend this result to more and more complex and lengthy sentences, D n (n=1,2...), built out from B, so that either any of them is refutable and therefore so is φ, or all of them are not refutable and therefore each holds in some model.  We finally use the models in which the D n hold (in case all are not refutable) in order to build a model in which φ holds.    Theorem 1. Every formula valid in all structures is provable.  This is the most basic form of the completeness theorem. We immediately restate it in a form more convenient for our purposes:  Theorem 2. Every formula φ is either refutable or satisfiable in some structure.  "φ is refutable" means by definition "¬φ is provable".  Equivalence of both theorems  To see the equivalence, note first that if Theorem 1 holds, and φ is not satisfiable in any structure, then ¬φ is valid in all structures and therefore provable, thus φ is refutable and Theorem 2 holds. If on the other hand Theorem 2 holds and φ is valid in all structures, then ¬φ is not satisfiable in any structure and therefore refutable; then ¬¬φ is provable and then so is φ, thus Theorem 1 holds.  Proof of theorem 2: first step  We approach the proof of Theorem 2 by successively restricting the class of all formulas φ for which we need to prove "φ is either refutable or satisfiable". At the beginning we need to prove this for all possible formulas φ in our language. However, suppose that for every formula φ there is some formula ψ taken from a more restricted class of formulas C , such that "ψ is either refutable or satisfiable" → "φ is either refutable or satisfiable". Then, once this claim (expressed in the previous sentence) is proved, it will suffice to prove "φ is either refutable or satisfiable" only for φ's belonging to the class C . Note also that if φ is provably equivalent to ψ ( i.e. , (φ≡ψ) is provable), then it is indeed the case that "ψ is either refutable or satisfiable" → "φ is either refutable or satisfiable" (the soundness theorem is needed to show this).  There are standard techniques for rewriting an arbitrary formula into one that does not use function or constant symbols, at the cost of introducing additional quantifiers; we will therefore assume that all formulas are free of such symbols. Gödel's paper uses a version of first-order predicate calculus that has no function or constant symbols to begin with.  Next we consider a generic formula φ (which no longer uses function or constant symbols) and apply the prenex form theorem to find a formula ψ in normal form such that φ≡ψ (ψ being in normal form means that all the quantifiers in ψ, if there are any, are found at the very beginning of ψ). It follows now that we need only prove Theorem 2 for formulas φ in normal form.  Next, we eliminate all free variables from φ by quantifying them existentially: if, say, x 1 ...x n are free in φ, we form    ψ  =   ∃    x  1   …   ∃    x  n   ϕ          ψ       subscript  x  1   normal-…       subscript  x  n   ϕ        \psi=\exists x_{1}...\exists x_{n}\phi   . If ψ is satisfiable in a structure M, then certainly so is φ and if ψ is refutable, then     ¬  ψ   =   ∀    x  1   …   ∀    x  n   ¬  ϕ             ψ    for-all     subscript  x  1   normal-…   for-all     subscript  x  n    ϕ        \neg\psi=\forall x_{1}...\forall x_{n}\neg\phi   is provable, and then so is ¬φ, thus φ is refutable. We see that we can restrict φ to be a sentence , that is, a formula with no free variables.  Finally, we would like, for reasons of technical convenience, that the prefix of φ (that is, the string of quantifiers at the beginning of φ, which is in normal form) begin with a universal quantifier and end with an existential quantifier. To achieve this for a generic φ (subject to restrictions we have already proved), we take some one-place relation symbol F unused in φ, and two new variables y and z .. If φ = (P)Φ , where (P) stands for the prefix of φ and Φ for the matrix (the remaining, quantifier-free part of φ) we form    ψ  =   ∀   y   (  P  )    ∃   z   (   Φ  ∧   [    F   (  y  )    ∨   ¬  F   (  z  )     ]    )           ψ   for-all    y  P      z    normal-Φ   delimited-[]      F  y      F  z            \psi=\forall y(P)\exists z(\Phi\wedge[F(y)\vee\neg F(z)])   . Since    ∀   y   ∃   z   (    F   (  y  )    ∨   ¬  F   (  z  )     )         for-all    y      z      F  y      F  z         \forall y\exists z(F(y)\vee\neg F(z))   is clearly provable, it is easy to see that    ϕ  =  ψ      ϕ  ψ    \phi=\psi   is provable.  Reducing the theorem to formulas of degree 1  Our generic formula φ now is a sentence, in normal form, and its prefix starts with a universal quantifier and ends with an existential quantifier. Let us call the class of all such formulas R . We are faced with proving that every formula in R is either refutable or satisfiable. Given our formula φ, we group strings of quantifiers of one kind together in blocks:       ϕ  =    (   ∀    x  1   …   ∀   x   k  1       )    (   ∃    x    k  1   +  1    …   ∃   x   k  2       )   …  …    .    (   ∀    x    k   n  -  2    +  1    …   ∀   x   k   n  -  1        )    (   ∃    x    k   n  -  1    +  1    …   ∃   x   k  n       )    (  Φ  )       formulae-sequence    ϕ     for-all     subscript  x  1   normal-…   for-all   subscript  x   subscript  k  1            subscript  x     subscript  k  1   1    normal-…     subscript  x   subscript  k  2       normal-…  normal-…       for-all     subscript  x     subscript  k    n  2    1    normal-…   for-all   subscript  x   subscript  k    n  1             subscript  x     subscript  k    n  1    1    normal-…     subscript  x   subscript  k  n       normal-Φ     \phi=(\forall x_{1}...\forall x_{k_{1}})(\exists x_{k_{1}+1}...\exists x_{k_{2%
 }}).......(\forall x_{k_{n-2}+1}...\forall x_{k_{n-1}})(\exists x_{k_{n-1}+1}.%
 ..\exists x_{k_{n}})(\Phi)     We define the degree of   ϕ   ϕ   \phi   to be the number of universal quantifier blocks, separated by existential quantifier blocks as shown above, in the prefix of   ϕ   ϕ   \phi   . The following lemma, which Gödel adapted from Skolem's proof of the Löwenheim-Skolem theorem , lets us sharply reduce the complexity of the generic formula   ϕ   ϕ   \phi   we need to prove the theorem for:  Lemma . Let k >=1. If every formula in R of degree k is either refutable or satisfiable, then so is every formula in R of degree k+1 .   Comment : Take a formula φ of degree k+1 of the form    ϕ  =    (   ∀  x   )    (   ∃  y   )    (   ∀  u   )    (    \exist   v   )    (  P  )   ψ       ϕ     for-all  x     y    for-all  u     \exist  v   P  ψ     \phi=(\forall x)(\exists y)(\forall u)(\exist v)(P)\psi   , where     (  P  )   ψ      P  ψ    (P)\psi   is the remainder of   ϕ   ϕ   \phi   (it is thus of degree k-1 ). φ states that for every x there is a y such that... (something). It would have been nice to have a predicate ''Q' '' so that for every x, Q'(x,y) would be true if and only if y is the required one to make (something) true. Then we could have written a formula of degree k, which is equivalent to φ, namely     (  ∀   x  ′   )    (  ∀  x  )    (  ∀  y  )    (  ∀  u  )    (   \exist   v  )    (   \exist    y  ′   )    (  P  )    Q  ′    (   x  ′   ,   y  ′   )   ∧   (   Q  ′    (  x  ,  y  )   →  ψ  )      fragments   fragments  normal-(  for-all   superscript  x  normal-′   normal-)    fragments  normal-(  for-all  x  normal-)    fragments  normal-(  for-all  y  normal-)    fragments  normal-(  for-all  u  normal-)    fragments  normal-(  \exist  v  normal-)    fragments  normal-(  \exist   superscript  y  normal-′   normal-)    fragments  normal-(  P  normal-)    superscript  Q  normal-′    fragments  normal-(   superscript  x  normal-′   normal-,   superscript  y  normal-′   normal-)     fragments  normal-(   superscript  Q  normal-′    fragments  normal-(  x  normal-,  y  normal-)   normal-→  ψ  normal-)     (\forall x^{\prime})(\forall x)(\forall y)(\forall u)(\exist v)(\exist y^{%
 \prime})(P)Q^{\prime}(x^{\prime},y^{\prime})\wedge(Q^{\prime}(x,y)\rightarrow\psi)   . This formula is indeed equivalent to φ because it states that for every x, if there is a y thatsatisfies Q'(x,y), then (something) holds, and furthermore, we know that there is such a y, because for every x', there is a y' that satisfies Q'(x',y'). Therefore φ follows from this formula. It is also easy to show that if the formula is false, then so is φ. Unfortunately , in general there is no such predicate Q'. However, this idea can be understood as a basis for the following proof of the Lemma.   Proof. Let φ be a formula of degree k+1 ; then we can write it as      ϕ  =    (   ∀  x   )    (   ∃  y   )    (   ∀  u   )    (    \exist   v   )    (  P  )   ψ       ϕ     for-all  x     y    for-all  u     \exist  v   P  ψ     \phi=(\forall x)(\exists y)(\forall u)(\exist v)(P)\psi     where (P) is the remainder of the prefix of   ϕ   ϕ   \phi   (it is thus of degree k-1 ) and   ψ   ψ   \psi   is the quantifier-free matrix of   ϕ   ϕ   \phi   . x , y , u and v denote here tuples of variables rather than single variables; e.g.     (   ∀  x   )     for-all  x    (\forall x)   really stands for    ∀    x  1    ∀    x  2   …   ∀   x  n          for-all     subscript  x  1    for-all     subscript  x  2   normal-…   for-all   subscript  x  n         \forall x_{1}\forall x_{2}...\forall x_{n}   where     x  1   …   x  n        subscript  x  1   normal-…   subscript  x  n     x_{1}...x_{n}   are some distinct variables.  Let now x ' and y ' be tuples of previously unused variables of the same length as x and y respectively, and let Q be a previously unused relation symbol that takes as many arguments as the sum of lengths of x and y ; we consider the formula      Φ  =   (  ∀   x  ′   )    (  ∃   y  ′   )   Q   (   x  ′   ,   y  ′   )   ∧   (  ∀  x  )    (  ∀  y  )    (  Q   (  x  ,  y  )   →   (  ∀  u  )    (   \exist   v  )    (  P  )   ψ  )      fragments  Φ    fragments  normal-(  for-all   superscript  x  normal-′   normal-)    fragments  normal-(    superscript  y  normal-′   normal-)   Q   fragments  normal-(   superscript  x  normal-′   normal-,   superscript  y  normal-′   normal-)     fragments  normal-(  for-all  x  normal-)    fragments  normal-(  for-all  y  normal-)    fragments  normal-(  Q   fragments  normal-(  x  normal-,  y  normal-)   normal-→   fragments  normal-(  for-all  u  normal-)    fragments  normal-(  \exist  v  normal-)    fragments  normal-(  P  normal-)   ψ  normal-)     \Phi=(\forall x^{\prime})(\exists y^{\prime})Q(x^{\prime},y^{\prime})\wedge(%
 \forall x)(\forall y)(Q(x,y)\rightarrow(\forall u)(\exist v)(P)\psi)     Clearly,    Φ  →  ϕ     normal-→  normal-Φ  ϕ    \Phi\rightarrow\phi   is provable.  Now since the string of quantifiers     (   ∀  u   )    (   ∃  v   )    (  P  )        for-all  u     v   P    (\forall u)(\exists v)(P)   does not contain variables from x or y , the following equivalence is easily provable with the help of whatever formalism we're using:       (  Q   (  x  ,  y  )   →   (  ∀  u  )    (  ∃  v  )    (  P  )   ψ  )   ≡   (  ∀  u  )    (  ∃  v  )    (  P  )    (  Q   (  x  ,  y  )   →  ψ  )      fragments   fragments  normal-(  Q   fragments  normal-(  x  normal-,  y  normal-)   normal-→   fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)   ψ  normal-)     fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)    fragments  normal-(  Q   fragments  normal-(  x  normal-,  y  normal-)   normal-→  ψ  normal-)     (Q(x,y)\rightarrow(\forall u)(\exists v)(P)\psi)\equiv(\forall u)(\exists v)(P%
 )(Q(x,y)\rightarrow\psi)     And since these two formulas are equivalent, if we replace the first with the second inside Φ, we obtain the formula Φ' such that Φ≡Φ':       Φ  ′   =   (  ∀   x  ′   )    (   \exist    y  ′   )   Q   (   x  ′   ,   y  ′   )   ∧   (  ∀  x  )    (  ∀  y  )    (  ∀  u  )    (  ∃  v  )    (  P  )    (  Q   (  x  ,  y  )   →  ψ  )      fragments   superscript  normal-Φ  normal-′     fragments  normal-(  for-all   superscript  x  normal-′   normal-)    fragments  normal-(  \exist   superscript  y  normal-′   normal-)   Q   fragments  normal-(   superscript  x  normal-′   normal-,   superscript  y  normal-′   normal-)     fragments  normal-(  for-all  x  normal-)    fragments  normal-(  for-all  y  normal-)    fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)    fragments  normal-(  Q   fragments  normal-(  x  normal-,  y  normal-)   normal-→  ψ  normal-)     \Phi^{\prime}=(\forall x^{\prime})(\exist y^{\prime})Q(x^{\prime},y^{\prime})%
 \wedge(\forall x)(\forall y)(\forall u)(\exists v)(P)(Q(x,y)\rightarrow\psi)     Now Φ' has the form      (  S  )   ρ   ∧    (   S  ′   )    ρ  ′          S  ρ      superscript  S  normal-′    superscript  ρ  normal-′      (S)\rho\wedge(S^{\prime})\rho^{\prime}   , where (S) and (S') are some quantifier strings, ρ and ρ' are quantifier-free, and, furthermore , no variable of (S) occurs in ρ' and no variable of (S') occurs in ρ. Under such conditions every formula of the form     (  T  )    (   ρ  ∧   ρ  ′    )       T    ρ   superscript  ρ  normal-′      (T)(\rho\wedge\rho^{\prime})   , where (T) is a string of quantifiers containing all quantifiers in (S) and (S') interleaved among themselves in any fashion, but maintaining the relative order inside (S) and (S'), will be equivalent to the original formula Φ'(this is yet another basic result in first-order predicate calculus that we rely on). To wit, we form Ψ as follows:      Ψ  =   (  ∀   x  ′   )    (  ∀  x  )    (  ∀  y  )    (  ∀  u  )    (  ∃   y  ′   )    (  ∃  v  )    (  P  )   Q   (   x  ′   ,   y  ′   )   ∧   (  Q   (  x  ,  y  )   →  ψ  )      fragments  Ψ    fragments  normal-(  for-all   superscript  x  normal-′   normal-)    fragments  normal-(  for-all  x  normal-)    fragments  normal-(  for-all  y  normal-)    fragments  normal-(  for-all  u  normal-)    fragments  normal-(    superscript  y  normal-′   normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)   Q   fragments  normal-(   superscript  x  normal-′   normal-,   superscript  y  normal-′   normal-)     fragments  normal-(  Q   fragments  normal-(  x  normal-,  y  normal-)   normal-→  ψ  normal-)     \Psi=(\forall x^{\prime})(\forall x)(\forall y)(\forall u)(\exists y^{\prime})%
 (\exists v)(P)Q(x^{\prime},y^{\prime})\wedge(Q(x,y)\rightarrow\psi)     and we have     Φ  ′   ≡  Ψ       superscript  normal-Φ  normal-′   normal-Ψ    \Phi^{\prime}\equiv\Psi   .  Now   Ψ   normal-Ψ   \Psi   is a formula of degree k and therefore by assumption either refutable or satisfiable. If   Ψ   normal-Ψ   \Psi   is satisfiable in a structure M , then, considering    Ψ  ≡   Φ  ′   ≡   Φ  ∧  Φ   →  ϕ        normal-Ψ   superscript  normal-Φ  normal-′          normal-Φ  normal-Φ     normal-→    ϕ     \Psi\equiv\Phi^{\prime}\equiv\Phi\wedge\Phi\rightarrow\phi   , we see that   ϕ   ϕ   \phi   is satisfiable as well. If   Ψ   normal-Ψ   \Psi   is refutable, then so is   Φ   normal-Φ   \Phi   , which is equivalent to it; thus    ¬  Φ       normal-Φ    \neg\Phi   is provable. Now we can replace all occurrences of Q inside the provable formula    ¬  Φ       normal-Φ    \neg\Phi   by some other formula dependent on the same variables, and we will still get a provable formula. ( This is yet another basic result of first-order predicate calculus. Depending on the particular formalism adopted for the calculus, it may be seen as a simple application of a "functional substitution" rule of inference, as in Gödel's paper, or it may be proved by considering the formal proof of    ¬  Φ       normal-Φ    \neg\Phi   , replacing in it all occurrences of Q by some other formula with the same free variables, and noting that all logical axioms in the formal proof remain logical axioms after the substitution, and all rules of inference still apply in the same way. )  In this particular case, we replace Q(x',y') in    ¬  Φ       normal-Φ    \neg\Phi   with the formula     (  ∀  u  )    (  ∃  v  )    (  P  )   ψ   (  x  ,  y  |   x  ′   ,   y  ′   )      fragments   fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)   ψ   fragments  normal-(  x  normal-,  y  normal-|   superscript  x  normal-′   normal-,   superscript  y  normal-′   normal-)     (\forall u)(\exists v)(P)\psi(x,y|x^{\prime},y^{\prime})   . Here (x,y|x',y') means that instead of ψ we are writing a different formula, in which x and y are replaced with x' and y'. Note that Q(x,y) is simply replaced by     (   ∀  u   )    (   ∃  v   )    (  P  )   ψ       for-all  u     v   P  ψ    (\forall u)(\exists v)(P)\psi   .      ¬  Φ       normal-Φ    \neg\Phi   then becomes      ¬   (   (  ∀   x  ′   )    (  ∃   y  ′   )    (  ∀  u  )    (  ∃  v  )    (  P  )   ψ   (  x  ,  y  |   x  ′   ,   y  ′   )   ∧   (  ∀  x  )    (  ∀  y  )    (   (  ∀  u  )    (  ∃  v  )    (  P  )   ψ  →   (  ∀  u  )    (  ∃  v  )    (  P  )   ψ  )   )      fragments    fragments  normal-(   fragments  normal-(  for-all   superscript  x  normal-′   normal-)    fragments  normal-(    superscript  y  normal-′   normal-)    fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)   ψ   fragments  normal-(  x  normal-,  y  normal-|   superscript  x  normal-′   normal-,   superscript  y  normal-′   normal-)     fragments  normal-(  for-all  x  normal-)    fragments  normal-(  for-all  y  normal-)    fragments  normal-(   fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)   ψ  normal-→   fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)   ψ  normal-)   normal-)     \neg((\forall x^{\prime})(\exists y^{\prime})(\forall u)(\exists v)(P)\psi(x,y%
 |x^{\prime},y^{\prime})\wedge(\forall x)(\forall y)((\forall u)(\exists v)(P)%
 \psi\rightarrow(\forall u)(\exists v)(P)\psi))     and this formula is provable; since the part under negation and after the   ∧     \wedge   sign is obviously provable, and the part under negation and before the   ∧     \wedge   sign is obviously φ, just with x and y replaced by x ' and y ', we see that    ¬  ϕ       ϕ    \neg\phi   is provable, and φ is refutable. We have proved that φ is either satisfiable or refutable, and this concludes the proof of the Lemma .  Notice that we could not have used     (  ∀  u  )    (  ∃  v  )    (  P  )   ψ   (  x  ,  y  |   x  ′   ,   y  ′   )      fragments   fragments  normal-(  for-all  u  normal-)    fragments  normal-(   v  normal-)    fragments  normal-(  P  normal-)   ψ   fragments  normal-(  x  normal-,  y  normal-|   superscript  x  normal-′   normal-,   superscript  y  normal-′   normal-)     (\forall u)(\exists v)(P)\psi(x,y|x^{\prime},y^{\prime})   instead of Q(x',y') from the beginning, because   Ψ   normal-Ψ   \Psi   would not have been a well-formed formula in that case. This is why we cannot naively use the argument appearing at the comment that precedes the proof.  Proving the theorem for formulas of degree 1  As shown by the Lemma above, we only need to prove our theorem for formulas φ in R of degree 1. φ cannot be of degree 0, since formulas in R have no free variables and don't use constant symbols. So the formula φ has the general form:        (   ∀    x  1   …   x  k     )    (   ∃    y  1   …   y  m     )   ϕ   (    x  1   …   x  k    ,    y  1   …   y  m    )    .       for-all     subscript  x  1   normal-…   subscript  x  k          subscript  y  1   normal-…   subscript  y  m     ϕ      subscript  x  1   normal-…   subscript  x  k       subscript  y  1   normal-…   subscript  y  m       (\forall x_{1}...x_{k})(\exists y_{1}...y_{m})\phi(x_{1}...x_{k},y_{1}...y_{m}).     Now we define an ordering of the k- tuples of natural numbers as follows     (    x  1   …   x  k    )   <   (    y  1   …   y  k    )          subscript  x  1   normal-…   subscript  x  k       subscript  y  1   normal-…   subscript  y  k      (x_{1}...x_{k})<(y_{1}...y_{k})   should hold if either      Σ  k    (    x  1   …   x  k    )    <    Σ  k    (    y  1   …   y  k    )           subscript  normal-Σ  k      subscript  x  1   normal-…   subscript  x  k        subscript  normal-Σ  k      subscript  y  1   normal-…   subscript  y  k       \Sigma_{k}(x_{1}...x_{k})<\Sigma_{k}(y_{1}...y_{k})   , or      Σ  k    (    x  1   …   x  k    )    =    Σ  k    (    y  1   …   y  k    )           subscript  normal-Σ  k      subscript  x  1   normal-…   subscript  x  k        subscript  normal-Σ  k      subscript  y  1   normal-…   subscript  y  k       \Sigma_{k}(x_{1}...x_{k})=\Sigma_{k}(y_{1}...y_{k})   , and    (    x  1   …   x  k    )       subscript  x  1   normal-…   subscript  x  k     (x_{1}...x_{k})   precedes    (    y  1   …   y  k    )       subscript  y  1   normal-…   subscript  y  k     (y_{1}...y_{k})   in lexicographic order . [Here     Σ  k    (    x  1   …   x  k    )        subscript  normal-Σ  k      subscript  x  1   normal-…   subscript  x  k      \Sigma_{k}(x_{1}...x_{k})   denotes the sum of the terms of the tuple.] Denote the nth tuple in this order by    (    a  1  n   …   a  k  n    )       subscript   superscript  a  n   1   normal-…   subscript   superscript  a  n   k     (a^{n}_{1}...a^{n}_{k})   .  Set the formula    B  n     subscript  B  n    B_{n}   as    ϕ   (    z   a  1  n    …   z   a  k  n     ,   z     (   n  -  1   )   m   +  2    ,    z     (   n  -  1   )   m   +  3    …   z    n  m   +  1     )       ϕ      subscript  z   subscript   superscript  a  n   1    normal-…   subscript  z   subscript   superscript  a  n   k      subscript  z        n  1   m   2       subscript  z        n  1   m   3    normal-…   subscript  z      n  m   1        \phi(z_{a^{n}_{1}}...z_{a^{n}_{k}},z_{(n-1)m+2},z_{(n-1)m+3}...z_{nm+1})   . Then put    D  n     subscript  D  n    D_{n}   as        (   ∃    z  1   …   z    n  m   +  1      )    (    B  1   ∧    B  2   …   ∧   B  n    )    .           subscript  z  1   normal-…   subscript  z      n  m   1         subscript  B  1      subscript  B  2   normal-…    subscript  B  n      (\exists z_{1}...z_{nm+1})(B_{1}\wedge B_{2}...\wedge B_{n}).     Lemma : For every n , φ     →   D  n      normal-→  absent   subscript  D  n     \rightarrow D_{n}   .  Proof : By induction on n; we have     D  k   ⇐    D   k  -  1    ∧    (   ∀    z  1   …   z     (   n  -  1   )   m   +  1      )    (   ∃    z     (   n  -  1   )   m   +  2    …   z    n  m   +  1      )    B  n     ⇐    D   k  -  1    ∧    (   ∀    z   a  1  n    …   z   a  k  n      )    (   ∃    y  1   …   y  m     )   ϕ   (    z   a  1  n    …   z   a  k  n     ,    y  1   …   y  m    )          normal-⇐   subscript  D  k      subscript  D    k  1       for-all     subscript  z  1   normal-…   subscript  z        n  1   m   1           subscript  z        n  1   m   2    normal-…   subscript  z      n  m   1       subscript  B  n       normal-⇐       subscript  D    k  1       for-all     subscript  z   subscript   superscript  a  n   1    normal-…   subscript  z   subscript   superscript  a  n   k           subscript  y  1   normal-…   subscript  y  m     ϕ      subscript  z   subscript   superscript  a  n   1    normal-…   subscript  z   subscript   superscript  a  n   k        subscript  y  1   normal-…   subscript  y  m          D_{k}\Leftarrow D_{k-1}\wedge(\forall z_{1}...z_{(n-1)m+1})(\exists z_{(n-1)m+%
 2}...z_{nm+1})B_{n}\Leftarrow D_{k-1}\wedge(\forall z_{a^{n}_{1}}...z_{a^{n}_{%
 k}})(\exists y_{1}...y_{m})\phi(z_{a^{n}_{1}}...z_{a^{n}_{k}},y_{1}...y_{m})   , where the latter implication holds by variable substitution, since the ordering of the tuples is such that      (   ∀  k   )    (    a  1  n   …   a  k  n    )    <     (   n  -  1   )   m   +  2          for-all  k      subscript   superscript  a  n   1   normal-…   subscript   superscript  a  n   k           n  1   m   2     (\forall k)({a^{n}_{1}}...{a^{n}_{k}})<(n-1)m+2   . But the last formula is equivalent to     D   k  -  1    ∧     limit-from   subscript  D    k  1       D_{k-1}\wedge   φ.  For the base case,     D  1   ≡    (   ∃    z  1   …   z   m  +  1      )   ϕ   (    z   a  1  1    …   z   a  k  1     ,   z  2   ,    z  3   …   z   m  +  1     )    ≡    (   ∃    z  1   …   z   m  +  1      )   ϕ   (    z  1   …   z  1    ,   z  2   ,    z  3   …   z   m  +  1     )           subscript  D  1          subscript  z  1   normal-…   subscript  z    m  1      ϕ      subscript  z   subscript   superscript  a  1   1    normal-…   subscript  z   subscript   superscript  a  1   k      subscript  z  2      subscript  z  3   normal-…   subscript  z    m  1                   subscript  z  1   normal-…   subscript  z    m  1      ϕ      subscript  z  1   normal-…   subscript  z  1     subscript  z  2      subscript  z  3   normal-…   subscript  z    m  1          D_{1}\equiv(\exists z_{1}...z_{m+1})\phi(z_{a^{1}_{1}}...z_{a^{1}_{k}},z_{2},z%
 _{3}...z_{m+1})\equiv(\exists z_{1}...z_{m+1})\phi(z_{1}...z_{1},z_{2},z_{3}..%
 .z_{m+1})   is obviously a corollary of φ as well. So the Lemma is proven.  Now if    D  n     subscript  D  n    D_{n}   is refutable for some n , it follows that φ is refutable. On the other hand, suppose that    D  n     subscript  D  n    D_{n}   is not refutable for any n . Then for each n there is some way of assigning truth values to the distinct subpropositions    E  h     subscript  E  h    E_{h}   (ordered by their first appearance in    D  n     subscript  D  n    D_{n}   ; "distinct" here means either distinct predicates, or distinct bound variables) in    B  k     subscript  B  k    B_{k}   , such that    D  n     subscript  D  n    D_{n}   will be true when each proposition is evaluated in this fashion. This follows from the completeness of the underlying propositional logic .  We will now show that there is such an assignment of truth values to    E  h     subscript  E  h    E_{h}   , so that all    D  n     subscript  D  n    D_{n}   will be true: The    E  h     subscript  E  h    E_{h}   appear in the same order in every    D  n     subscript  D  n    D_{n}   ; we will inductively define a general assignment to them by a sort of "majority vote": Since there are infinitely many assignments (one for each    D  n     subscript  D  n    D_{n}   ) affecting    E  1     subscript  E  1    E_{1}   , either infinitely many make    E  1     subscript  E  1    E_{1}   true, or infinitely many make it false and only finitely many make it true. In the former case, we choose    E  1     subscript  E  1    E_{1}   to be true in general; in the latter we take it to be false in general. Then from the infinitely many n for which    E  1     subscript  E  1    E_{1}   through    E   h  -  1      subscript  E    h  1     E_{h-1}   are assigned the same truth value as in the general assignment, we pick a general assignment to    E  h     subscript  E  h    E_{h}   in the same fashion.  This general assignment must lead to every one of the    B  k     subscript  B  k    B_{k}   and    D  k     subscript  D  k    D_{k}   being true, since if one of the    B  k     subscript  B  k    B_{k}   were false under the general assignment,    D  n     subscript  D  n    D_{n}   would also be false for every n > k . But this contradicts the fact that for the finite collection of general    E  h     subscript  E  h    E_{h}   assignments appearing in    D  k     subscript  D  k    D_{k}   , there are infinitely many n where the assignment making    D  n     subscript  D  n    D_{n}   true matches the general assignment.  From this general assignment, which makes all of the    D  k     subscript  D  k    D_{k}   true, we construct an interpretation of the language's predicates that makes φ true. The universe of the model will be the natural numbers . Each i-ary predicate   Ψ   normal-Ψ   \Psi   should be true of the naturals    (    u  1   …   u  i    )       subscript  u  1   normal-…   subscript  u  i     (u_{1}...u_{i})   precisely when the proposition    Ψ   (    z   u  1    …   z   u  i     )       normal-Ψ     subscript  z   subscript  u  1    normal-…   subscript  z   subscript  u  i       \Psi(z_{u_{1}}...z_{u_{i}})   is either true in the general assignment, or not assigned by it (because it never appears in any of the    D  k     subscript  D  k    D_{k}   ).  In this model, each of the formulas     (   ∃    y  1   …   y  m     )   ϕ   (    a  1  n   …   a  k  n    ,    y  1   …   y  m    )            subscript  y  1   normal-…   subscript  y  m     ϕ      subscript   superscript  a  n   1   normal-…   subscript   superscript  a  n   k       subscript  y  1   normal-…   subscript  y  m       (\exists y_{1}...y_{m})\phi(a^{n}_{1}...a^{n}_{k},y_{1}...y_{m})   is true by construction. But this implies that φ itself is true in the model, since the    a  n     superscript  a  n    a^{n}   range over all possible k-tuples of natural numbers. So φ is satisfiable, and we are done.  Intuitive explanation  We may write each B i as Φ(x 1 ...x k ,y 1 ...y m ) for some x-s, which we may call "first arguments" and y-s that we may call "last arguments".  Take B 1 for example. Its "last arguments" are z 2 ,z 3 ...z m+1 , and for every possible combination of k of these variables there is some j so that they appear as "first arguments" in B j . Thus for large enough n 1 , D n 1 has the property that the "last arguments" of B 1 appear, in every possible combinations of k of them, as "first arguments" in other B j -s within D n . For every B i there is a D n i with the corresponding property.  Therefore in a model that satisfies all the D n -s, there are objects corresponding to z 1 , z 2 ... and each combination of k of these appear as "first arguments" in some B j , meaning that for every k of these objects z p 1 ...z p k there are z q 1 ...z q m , which makes Φ(z p 1 ...z p k ,z q 1 ...z q m ) satisfied. By taking a submodel with only these z 1 , z 2 ... objects, we have a model satisfying φ.  Extensions  Extension to first-order predicate calculus with equality  Gödel reduced a formula containing instances of the equality predicate to ones without it in an extended language. His method involves replacing a formula φ containing some instances of equality with the formula       (  ∀  x  )   E  q   (  x  ,  x  )   ∧   (  ∀  x  ,  y  ,  z  )    [  E  q   (  x  ,  y  )   →   (  E  q   (  x  ,  z  )   →  E  q   (  y  ,  z  )   )   ]      fragments   fragments  normal-(  for-all  x  normal-)   E  q   fragments  normal-(  x  normal-,  x  normal-)     fragments  normal-(  for-all  x  normal-,  y  normal-,  z  normal-)    fragments  normal-[  E  q   fragments  normal-(  x  normal-,  y  normal-)   normal-→   fragments  normal-(  E  q   fragments  normal-(  x  normal-,  z  normal-)   normal-→  E  q   fragments  normal-(  y  normal-,  z  normal-)   normal-)   normal-]     (\forall x)Eq(x,x)\wedge(\forall x,y,z)[Eq(x,y)\rightarrow(Eq(x,z)\rightarrow
 Eq%
 (y,z))]       ∧   (  ∀  x  ,  y  ,  z  )    [  E  q   (  x  ,  y  )   →   (  E  q   (  z  ,  x  )   →  E  q   (  z  ,  y  )   )   ]      fragments    fragments  normal-(  for-all  x  normal-,  y  normal-,  z  normal-)    fragments  normal-[  E  q   fragments  normal-(  x  normal-,  y  normal-)   normal-→   fragments  normal-(  E  q   fragments  normal-(  z  normal-,  x  normal-)   normal-→  E  q   fragments  normal-(  z  normal-,  y  normal-)   normal-)   normal-]     \wedge(\forall x,y,z)[Eq(x,y)\rightarrow(Eq(z,x)\rightarrow Eq(z,y))]       ∧   (  ∀   x  1   …   x  k   ,   y  1   …   x  k   )    [   (  E  q   (   x  1   ,   y  1   )   ∧  …  ∧  E  q   (   x  k   ,   y  k   )   )   →   (  A   (   x  1   …   x  k   )   ≡  A   (   y  1   …   y  k   )   )   ]      fragments    fragments  normal-(  for-all   subscript  x  1   normal-…   subscript  x  k   normal-,   subscript  y  1   normal-…   subscript  x  k   normal-)    fragments  normal-[   fragments  normal-(  E  q   fragments  normal-(   subscript  x  1   normal-,   subscript  y  1   normal-)    normal-…   E  q   fragments  normal-(   subscript  x  k   normal-,   subscript  y  k   normal-)   normal-)   normal-→   fragments  normal-(  A   fragments  normal-(   subscript  x  1   normal-…   subscript  x  k   normal-)    A   fragments  normal-(   subscript  y  1   normal-…   subscript  y  k   normal-)   normal-)   normal-]     \wedge(\forall x_{1}...x_{k},y_{1}...x_{k})[(Eq(x_{1},y_{1})\wedge...\wedge Eq%
 (x_{k},y_{k}))\rightarrow(A(x_{1}...x_{k})\equiv A(y_{1}...y_{k}))]       ∧  …  ∧   (  ∀   x  1   …   x  m   ,   y  1   …   x  m   )    [   (  E  q   (   x  1   ,   y  1   )   ∧  …  ∧  E  q   (   x  m   ,   y  m   )   )   →   (  Z   (   x  1   …   x  m   )   ≡  Z   (   y  1   …   y  m   )   )   ]      fragments   normal-…    fragments  normal-(  for-all   subscript  x  1   normal-…   subscript  x  m   normal-,   subscript  y  1   normal-…   subscript  x  m   normal-)    fragments  normal-[   fragments  normal-(  E  q   fragments  normal-(   subscript  x  1   normal-,   subscript  y  1   normal-)    normal-…   E  q   fragments  normal-(   subscript  x  m   normal-,   subscript  y  m   normal-)   normal-)   normal-→   fragments  normal-(  Z   fragments  normal-(   subscript  x  1   normal-…   subscript  x  m   normal-)    Z   fragments  normal-(   subscript  y  1   normal-…   subscript  y  m   normal-)   normal-)   normal-]     \wedge...\wedge(\forall x_{1}...x_{m},y_{1}...x_{m})[(Eq(x_{1},y_{1})\wedge...%
 \wedge Eq(x_{m},y_{m}))\rightarrow(Z(x_{1}...x_{m})\equiv Z(y_{1}...y_{m}))]        ∧   φ  ′    .       superscript  φ  normal-′     \wedge\varphi^{\prime}.     Here    A  …  Z      A  normal-…  Z    A...Z   denote the predicates appearing in φ (with    k  …  m      k  normal-…  m    k...m   their respective arities), and φ' is the formula φ with all occurrences of equality replaced with the new predicate Eq . If this new formula is refutable, the original φ was as well; the same is true of satisfiability, since we may take a quotient of satisfying model of the new formula by the equivalence relation representing Eq . This quotient is well-defined with respect to the other predicates, and therefore will satisfy the original formula φ.  Extension to countable sets of formulas  Gödel also considered the case where there are a countably infinite collection of formulas. Using the same reductions as above, he was able to consider only those cases where each formula is of degree 1 and contains no uses of equality. For a countable collection of formulas    ϕ  i     superscript  ϕ  i    \phi^{i}   of degree 1, we may define    B  k  i     subscript   superscript  B  i   k    B^{i}_{k}   as above; then define    D  k     subscript  D  k    D_{k}   to be the closure of      B  1  1   …   B  k  1    ,  …  ,    B  1  k   …   B  k  k          subscript   superscript  B  1   1   normal-…   subscript   superscript  B  1   k    normal-…     subscript   superscript  B  k   1   normal-…   subscript   superscript  B  k   k      B^{1}_{1}...B^{1}_{k},...,B^{k}_{1}...B^{k}_{k}   . The remainder of the proof then went through as before.  Extension to arbitrary sets of formulas  When there is an uncountably infinite collection of formulas, the Axiom of Choice (or at least some weak form of it) is needed. Using the full AC, one can well-order the formulas, and prove the uncountable case with the same argument as the countable one, except with transfinite induction . Other approaches can be used to prove that the completeness theorem in this case is equivalent to the Boolean prime ideal theorem , a weak form of AC.  References    The first proof of the completeness theorem.   The same material as the dissertation, except with briefer proofs, more succinct explanations, and omitting the lengthy introduction.   External links   Stanford Encyclopedia of Philosophy : " Kurt Gödel "—by Juliette Kennedy.  MacTutor biography: Kurt Gödel.   "  Category:Logic  Godel's completeness theorem  Category:Mathematical proofs  Godel's completeness theorem  Godel's completeness theorem  Category:Works by Kurt Gödel   