   Graph rewriting      Graph rewriting   Graph transformation , or graph rewriting , concerns the technique of creating a new graph out of an original graph algorithmically. It has numerous applications, ranging from software engineering ( software construction and also software verification ) to layout algorithms and picture generation.  Graph transformations can be used as a computation abstraction. The basic idea is that the state of a computation can be represented as a graph, further steps in that computation can then be represented as transformation rules on that graph. Such rules consist of an original graph, which is to be matched to a subgraph in the complete state, and a replacing graph, which will replace the matched subgraph.  Formally, a graph  rewriting system usually consists of a set of graph rewrite rules of the form    L  →  R     normal-→  L  R    L\rightarrow R   , with   L   L   L   being called pattern graph (or left-hand side) and   R   R   R   being called replacement graph (or right-hand side of the rule). A graph rewrite rule is applied to the host graph by searching for an occurrence of the pattern graph ( pattern matching , thus solving the subgraph isomorphism problem ) and by replacing the found occurrence by an instance of the replacement graph. Rewrite rules can be further regulated in the case of labeled graphs , such as in string-regulated graph grammars.  Sometimes graph grammar is used as a synonym for graph rewriting system , especially in the context of formal languages ; the different wording is used to emphasize the goal of constructions, like the enumeration of all graphs from some starting graph, i.e. the generation of a graph language – instead of simply transforming a given state (host graph) into a new state.  Graph rewriting approaches  Algebraic approach  The algebraic approach to graph rewriting is based upon category theory . The algebraic approach is further divided into sub-approaches, the most common of which are the double-pushout (DPO) approach and the single-pushout (SPO) approach . Other sub-approaches include the sesqui-pushout and the pullback approach''.  From the perspective of the DPO approach a graph rewriting rule is a pair of morphisms in the category of graphs with total  graph morphisms as arrows    r  =   (  L  ←  K  →  R  )      fragments  r    fragments  normal-(  L  normal-←  K  normal-→  R  normal-)     r=(L\leftarrow K\rightarrow R)   (or    L  ⊇  K  ⊆  R       superset-of-or-equals  L  K       R     L\supseteq K\subseteq R   ) where    K  →  L     normal-→  K  L    K\rightarrow L   is injective . The graph K is called invariant or sometimes the gluing graph . A rewriting step or application of a rule r to a host graph G is defined by two pushout diagrams both originating in the same morphism     k  :   K  →  G      normal-:  k   normal-→  K  G     k\colon K\rightarrow G   (this is where the name double -pushout comes from). Another graph morphism     m  :   L  →  G      normal-:  m   normal-→  L  G     m\colon L\rightarrow G   models an occurrence of L in G and is called a match . Practical understanding of this is that   L   L   L   is a subgraph that is matched from   G   G   G   (see subgraph isomorphism problem ), and after a match is found,   L   L   L   is replaced with   R   R   R   in host graph   G   G   G   where   K   K   K   serves as an interface, containing the nodes and edges which are preserved when applying the rule. The graph   K   K   K   is needed to attach the pattern being matched to its context: if it is empty, the match can only designate a whole connected component of the graph   G   G   G   .  In contrast a graph rewriting rule of the SPO approach is a single morphism in the category labeled multigraphs with partial  graph morphisms as arrows    r  :   L  →  R      normal-:  r   normal-→  L  R     r\colon L\rightarrow R   . Thus a rewriting step is defined by a single pushout diagram. Practical understanding of this is similar to the DPO approach. The difference is, that there is no interface between the host graph G and the graph G' being the result of the rewriting step.  There is also another algebraic-like approach to graph rewriting, based mainly on Boolean algebra and an algebra of matrices, called matrix graph grammars . 1 2  Determinate graph rewriting  Yet another approach to graph rewriting, known as determinate graph rewriting, came out of logic and database theory . In this approach, graphs are treated as database instances, and rewriting operations as a mechanism for defining queries and views; therefore, all rewriting is required to yield unique results ( up to isomorphism ), and this is achieved by applying any rewriting rule concurrently throughout the graph, wherever it applies, in such a way that the result is indeed uniquely defined.  Term graph rewriting  Another approach to graph rewriting is term graph rewriting, which involves the processing or transformation of term graphs (also known as abstract semantic graphs ) by a set of syntactic rewrite rules.  Term graphs are a prominent topic in programming language research since term graph rewriting rules are capable of formally expressing a compiler's operational semantics . Term graphs are also used as abstract machines capable of modelling chemical and biological computations as well as graphical calculi such as concurrency models. Term graphs can perform automated verification and logical programming since they are well-suited to representing quantified statements in first order logic. Symbolic programming software is another application for term graphs, which are capable of representing and performing computation with abstract algebraic structures such as groups, fields and rings.  The TERMGRAPH conference 3 focuses entirely on research into term graph rewriting and its applications.  Implementations and applications  (Figure)  Example for graph rewrite rule (optimization from compiler construction: multiplication with 2 replaced by addition)   Graphs are an expressive, visual and mathematically precise formalism for modelling of objects (entities) linked by relations; objects are represented by nodes and relations between them by edges. Nodes and edges are commonly typed and attributed. Computations are described in this model by changes in the relations between the entities or by attribute changes of the graph elements. They are encoded in graph rewrite/graph transformation rules and executed by graph rewrite systems/graph transformation tools.   Tools that are application domain neutral:  GrGen.NET , the graph rewrite generator, a graph transformation tool emitting C# -code or .NET-assemblies  AGG , the attributed graph grammar system ( Java )  GP (Graph Programs) is a programming language for computing on graphs by the directed application of graph transformation rules.  GMTE , the Graph Matching and Transformation Engine for graph matching and transformation. It is an implementation of an extension of Messmer’s algorithm using C++ .  GROOVE , a Java-based tool set for editing graphs and graph transformation rules, exploring the state spaces of graph grammars, and model checking those state spaces; can also be used as a graph transformation engine.   Tools that solve software engineering tasks (mainly MDA ) with graph rewriting:  eMoflon , an EMF-compliant model-transformation tool with support for Story-Driven Modeling and Triple Graph Grammars  GReAT  VIATRA  Graph databases often support dynamic rewriting of graphs  Gremlin , a graph-based programming language (see Graph Rewriting )  PROGRES , an integrated environment and very high level language for PROgrammed Graph REwriting Systems  Fujaba uses Story driven modelling, a graph rewrite language based on PROGRES  EMorF and Henshin , graph rewriting systems based on EMF , supporting in-place model transformation and model to model transformation   Mechanical engineering tools  GraphSynth is an interpreter and UI environment for creating unrestricted graph grammars as well as testing and searching the resultant language variant. It saves graphs and graph grammar rules as XML files and is written in C# .  Soley Studio , is an integrated development environment for graph transformation systems. Its main application focus is data analytics in the field of engineering.   Biology applications  Functional-structural plant modeling with a graph grammar based language  Multicellular development modeling with string-regulated graph grammars   Artificial Intelligence/Natural Language Processing  OpenCog provides a basic pattern matcher (on hypergraphs ) which is used to implement various AI algorithms.  RelEx is an English-language parser that employs graph re-writing to convert a link parse into a dependency parse .    See also   Category theory  Graph theory  Shape grammar  Formal grammar  Term graph   Notes  References    .   .  Heckel, R. (2006). Graph transformation in a nutshell . Electronic Notes in Theoretical Computer Science 148 (1 SPEC. ISS.), pp. 187–198.  König, Barbara (2004). Analysis and Verification of Systems with Dynamically Evolving Structure . Habilitation thesis, Universität Stuttgart , pp. 65–180.  Lobo, D. et al. (2011). Graph grammars with string-regulated rewriting . Theoretical Computer Science , 412(43), pp. 6101-6111.   "  Category:Graph rewriting     covers this approach in detail. ↩  This topic is expanded at mat2gra.info . ↩  ↩     