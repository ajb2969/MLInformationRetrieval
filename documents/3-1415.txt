


Rayleigh quotient iteration




Rayleigh quotient iteration

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Rayleigh quotient iteration is an eigenvalue algorithm which extends the idea of the inverse iteration by using the Rayleigh quotient to obtain increasingly accurate eigenvalue estimates.
Rayleigh quotient iteration is an iterative method, that is, it must be repeated until it converges to an answer (this is true for all eigenvalue algorithms). Fortunately, very rapid convergence is guaranteed and no more than a few iterations are needed in practice. The Rayleigh quotient iteration algorithm converges cubically for Hermitian or symmetric matrices, given an initial vector that is sufficiently close to an eigenvector of the matrix that is being analyzed.
Algorithm
The algorithm is very similar to inverse iteration, but replaces the estimated eigenvalue at the end of each iteration with the Rayleigh quotient. Begin by choosing some value 
 
 
 
  as an initial eigenvalue guess for the Hermitian matrix 
 
 
 
 . An initial vector 
 
 
 
  must also be supplied as initial eigenvector guess.
Calculate the next approximation of the eigenvector 
 
 
 
  by



 where 
 
 
 
  is the identity matrix, and set the next approximation of the eigenvalue to the Rayleigh quotient of the current iteration equal to


To compute more than one eigenvalue, the algorithm can be combined with a deflation technique.
Example
Consider the matrix



for which the exact eigenvalues are 
 
 
 
 , 
 
 
 
  and 
 
 
 
 , with corresponding eigenvectors


 
 , 
 
 
 
  and 
 
 
 
 .
(where 
 
 
 
  is the golden ratio).
The largest eigenvalue is 
 
 
 
  and corresponds to any eigenvector proportional to 
 
 

We begin with an initial eigenvalue guess of


 
 .
Then, the first iteration yields



the second iteration,



and the third,



from which the cubic convergence is evident.
Octave Implementation
The following is a simple implementation of the algorithm in Octave.
function x = rayleigh(A,epsilon,mu,x)
   x = x / norm(x);
   y = (A-mu*eye(rows(A))) \ x;
   lambda = y'*x;
   mu = mu + 1 / lambda
   err = norm(y-lambda*x) / norm(y)
   while err > epsilon
     x = y / norm(y);
     y = (A-mu*eye(rows(A))) \ x;
     lambda = y'*x;
     mu = mu + 1 / lambda
     err = norm(y-lambda*x) / norm(y)
   end
 end
See also

Power iteration
Inverse iteration

References

Lloyd N. Trefethen and David Bau, III, Numerical Linear Algebra, Society for Industrial and Applied Mathematics, 1997. ISBN 0-89871-361-7.
Rainer Kress, "Numerical Analysis", Springer, 1991. ISBN 0-387-98408-9

"
Category:Numerical linear algebra Category:Articles with example MATLAB/Octave code

