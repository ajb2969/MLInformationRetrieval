   Graver basis      Graver basis  In [[applied mathematics]], '''Graver bases''' enable iterative solutions of linear and various nonlinear [[integer programming]] problems in [[polynomial time]].  They were introduced by [[Jack E. Graver]]. Jack E. Graver: On the foundations of linear and linear integer programming, Mathematical Programming 9:207–226, 1975 Their connection to the theory of Gröbner  bases was discussed by Bernd  Sturmfels . 1 The algorithmic theory of Graver bases and its application to integer programming is described by Shmuel  Onn . 2 3  Formal definition  The Graver basis of an m × n integer matrix   A   A   A   is the finite set    G   (  A  )       G  A    G(A)   of minimal elements in the set      {   x  ∈   ℤ  n    :     A  x   =  0   ,   x  ≠  0    }     conditional-set    x   superscript  ℤ  n     formulae-sequence      A  x   0     x  0      \{x\in\mathbb{Z}^{n}:Ax=0,\ x\neq 0\}\,     under a well partial order on    ℤ  n     superscript  ℤ  n    \mathbb{Z}^{n}   defined by    x  ⊑  y     square-image-of-or-equals  x  y    x\sqsubseteq y   when      x  i    y  i    ≥  0         subscript  x  i    subscript  y  i    0    x_{i}y_{i}\geq 0   and     |   x  i   |   ≤   |   y  i   |          subscript  x  i       subscript  y  i      |x_{i}|\leq|y_{i}|   for all i. For example, the Graver basis of    A  =   (  121  )       A  121    A=(121)   consists of the vectors (2,−1,0), (0,−1,2), (1,0,−1), (1,−1,1) and their negations.  Solving integer programming using Graver bases  Integer programming is the problem of optimizing a linear or nonlinear objective function over the set of integer points satisfying a system of linear inequalities. Formally, it can be written in standard form as follows:       min   {    f   (  x  )    :    x  ∈   ℤ  n    ,     A  x   =  b   ,   l  ≤  x  ≤  u      }    .       normal-:    f  x    formulae-sequence    x   superscript  ℤ  n     formulae-sequence      A  x   b       l  x       u         \min\{f(x)\ :\ x\in\mathbb{Z}^{n},\ Ax=b,\ l\leq x\leq u\}\ .     It is one of the most fundamental discrete optimization problems and has a very broad modeling power and numerous applications in a variety of areas, but is typically very hard computationally as noted below. However, given the Graver basis    G   (  A  )       G  A    G(A)   of   A   A   A   , the problem with linear and various nonlinear objective functions can be solved in polynomial time as explained next.  Linear integer programming  The most studied case, treated thoroughly in, 4 is that of linear integer programming ,       min   {    w   x    :    x  ∈   ℤ  n    ,     A  x   =  b   ,   l  ≤  x  ≤  u      }    .       normal-:    w  x    formulae-sequence    x   superscript  ℤ  n     formulae-sequence      A  x   b       l  x       u         \min\{wx\ :\ x\in\mathbb{Z}^{n},\ Ax=b,\ l\leq x\leq u\}\ .     It may be assumed that all variables are bounded from below and above: such bounds either appear naturally in the application at hand, or can be enforced without losing any optimal solutions. But, even with linear objective functions the problem is NP-hard and hence presumably cannot be solved in polynomial time.  However, given the Graver basis    G   (  A  )       G  A    G(A)   of   A   A   A   it can be solved in polynomial time using the following simple iterative algorithm. 5 6 Assume first that some initial feasible point x is given. While possible, repeat the following iteration: find positive integer q and element g in    G   (  A  )       G  A    G(A)   such that x + qg does not violate the bounds and gives best possible improvement; update x := x + qg and proceed to the next iteration. The last point x is optimal and the number of iterations is polynomial. To find an initial feasible point, a suitable auxiliary program can be set up and solved in a similar fashion.  Nonlinear integer programming  Turning to the case of general objective functions f , if the variables are unbounded then the problem may in fact be uncomputable: it follows from the solution of Hilbert's 10th problem (see 7 ), that there exists no algorithm which, given an integer polynomial f of degree 8 in 58 variables, decides if the minimum value of f over all 58-dimensional integer vectors is 0. However, when the variables are bounded, the problem      min   {    f   (  x  )    :    x  ∈   ℤ  n    ,     A  x   =  b   ,   l  ≤  x  ≤  u      }        normal-:    f  x    formulae-sequence    x   superscript  ℤ  n     formulae-sequence      A  x   b       l  x       u         \min\{f(x)\ :\ x\in\mathbb{Z}^{n},\ Ax=b,\ l\leq x\leq u\}     can be solved using the Graver basis    G   (  A  )       G  A    G(A)   in polynomial time for several nonlinear objective functions including:   Separable-convex functions of the form     f   (  x  )    =    ∑   i  =  1   n     f  i    (   x  i   )           f  x     superscript   subscript     i  1    n      subscript  f  i    subscript  x  i       f(x)=\sum_{i=1}^{n}f_{i}(x_{i})   ;  In particular the p-norm      f   (  x  )    =    ∥  x  ∥   p         f  x    subscript   norm  x   p     f(x)=\|x\|_{p}   for every positive integer p ;  Composite-concave functions f ( x ) = g ( Wx ), where W is a d × n integer matrix with d fixed, and where g is a d -variate concave function;  Certain (in)-definite quadratic and higher degree polynomial functions.   Some applications  Multi-dimensional tables  Consider the following optimization problem over three-dimensional tables with prescribed line sums,       min   {    w   x    :    x  ∈    ℤ  +   l  ×  m  ×  n      ,      ∑  i    x   i  ,  j  ,  k     =    a   j  ,  k      ,      ∑  j    x   i  ,  j  ,  k     =    b   i  ,  k      ,     ∑  k    x   i  ,  j  ,  k     =   c   i  ,  j         }    ,       normal-:    w  x    formulae-sequence    x   superscript   subscript  ℤ      l  m  n      formulae-sequence      subscript   i    subscript  x   i  j  k      subscript  a   j  k      formulae-sequence      subscript   j    subscript  x   i  j  k      subscript  b   i  k         subscript   k    subscript  x   i  j  k      subscript  c   i  j           \min\{wx\ :\ x\in{\mathbb{Z}}_{+}^{l\times m\times n}\,,\ \sum_{i}x_{i,j,k}=a_%
 {j,k}\,,\ \sum_{j}x_{i,j,k}=b_{i,k}\,,\ \sum_{k}x_{i,j,k}=c_{i,j}\}\ ,     with    a   j  ,  k      subscript  a   j  k     a_{j,k}   ,    b   i  ,  k      subscript  b   i  k     b_{i,k}   ,    c   i  ,  j      subscript  c   i  j     c_{i,j}   nonnegative integers (whose maximum value implicitly bounds all variables from above). Denote by   A   A   A   the ( lm + ln + mn ) × ( lmn ) defining matrix of this system. Note that this matrix is generally not  totally unimodular . Nonetheless, it was shown in 8 that for every fixed l and m , its Graver basis    G   (  A  )       G  A    G(A)   can be computed in time which is polynomial in n . The results mentioned above allow then to solve this problem in polynomial time for fixed l and m and variable n . Note that if only one side l of the table is fixed (even with l = 3) while both m and n are variable, then the problem is NP hard, as shown in. 9 More generally, similar positive results hold for higher-dimensional table problems (introduced in 10 ): for every fixed d and     m  1   ,  …  ,   m  d       subscript  m  1   normal-…   subscript  m  d     m_{1},\dots,m_{d}   , (non)-linear optimization over     m  1   ×  ⋯  ×   m  d   ×  n       subscript  m  1   normal-⋯   subscript  m  d   n    m_{1}\times\cdots\times m_{d}\times n   tables with variable n and prescribed margins can be done in polynomial time. This has further applications to entry security problems and privacy in statistical databases.  Multi-commodity flows  Consider the integer  multi-commodity flow problem of routing k types of integer commodities from m suppliers to n consumers subject to supply, consumption, and capacity constraints, so as to minimize the sum of linear or congestion-dependent convex costs on the arcs. Then for every fixed k and m , the Graver basis of the defining system can be computed and the resulting separable-convex objective function minimized in time which is polynomial in the variable number n of consumers and in the rest of the data.  Other applications  The many applications of the algorithmic theory of Graver bases also include stochastic integer programming, 11  N -fold integer programming, N -fold 4-block decomposable integer programming, 12 clustering, and disclosure control in statistical databases. In some of these applications the relevant Graver basis cannot be computed in polynomial time, but can be accessed in an indirect way that allows to use it in polynomial time.  Universality and parametrization  It was shown in 13 that every (bounded) integer programming problem is precisely equivalent to the 3 × m × n table problem discussed above for some m and n and some line sums. Thus, such 3 × m × n table problems are universal for integer programming. Moreover, for each fixed m , the resulting class of integer programs can be solved in polynomial time by the iterative Graver basis method described above. So the table width m provides a parametrization of all integer programming problems.  Hierarchy of approximations for integer programming  Denote by    G   (  m  ,  n  )       G   m  n     G(m,n)   the Graver basis of the matrix   A   A   A   defining the universal 3 × m × n table problem discussed above. The elements of    G   (  m  ,  n  )       G   m  n     G(m,n)   are 3 × m × n tables with all line sums equal to 0. The type of such a table is the number of its nonzero 3 × m  layers . It turns out that there is a finite Graver complexity function  g ( m ) such that for any n , the type of any element of the Graver basis    G   (  m  ,  n  )       G   m  n     G(m,n)   is at most g ( m ). It follows that the Graver basis    G   (  m  ,  n  )       G   m  n     G(m,n)   is the union of the    (      n       g   (  m  )        )     binomial  n    g  m     {n\choose g(m)}   suitably embedded copies of the Graver basis    G   (  m  ,   g   (  m  )    )       G   m    g  m      G(m,g(m))   . To approximately solve in practice an arbitrary integer programming problem, proceed as follows. First embed it in a suitable 3 × m × n table problem as enabled by the universality noted above. Now apply the following hierarchy of approximations of    G   (  m  ,  n  )       G   m  n     G(m,n)   . At level k of this hierarchy, let     G  k    (  m  ,  n  )        subscript  G  k    m  n     G_{k}(m,n)   be the subset of    G   (  m  ,  n  )       G   m  n     G(m,n)   consisting only of those elements of type at most k ; use this approximation     G  k    (  m  ,  n  )        subscript  G  k    m  n     G_{k}(m,n)   in the iterative algorithm as long as possible to obtain as good as possible feasible point for the integer programming problem embedded in the 3 × m × n table problem; if the objective function value of this point is satisfactory (say, as compared to the value of the linear programming relaxation ), then use this point; otherwise increment k and proceed to the next level of the hierarchy. It can be shown 14 that for any fixed level k , the approximation     G  k    (  m  ,  n  )        subscript  G  k    m  n     G_{k}(m,n)   of the Graver basis has polynomial cardinality    O   (    m   g   (  k  )      n  k    )       O     superscript  m    g  k     superscript  n  k      O\left(m^{g(k)}n^{k}\right)   and can be computed in that much time.  Fixed parameter tractability: from polynomial to cubic time complexity  The time complexity of solving some of the applications discussed above, such as multi-dimensional table problems, multicommodity flow problems, and N -fold integer programming problems, is dominated by the cardinality of the relevant Graver basis, which is a polynomial    O   (   n  g   )       O   superscript  n  g     O\left(n^{g}\right)   with typically large degree g which is a suitable Graver complexity of the system. In 15 a much faster algorithm is presented, which finds at each iteration the best improvement x + qg with q positive integer and g element in    G   (  A  )       G  A    G(A)    without explicitly constructing the Graver basis , in cubic time    O   (   n  3   )       O   superscript  n  3     O\left(n^{3}\right)   regardless of the system. In the terminology of parameterized complexity , this implies that all these problems suitably parameterized, and in particular l × m × n table problems parametrized by l and m , are fixed parameter tractable .  References  "  Category:Linear programming     Bernd  Sturmfels ,  Gröbner  Bases  and  Convex  Polytopes ,  American  Mathematical  Society ,  xii+162  pp.,  1996 ↩  Shmuel  onn :  [ http://books.google.co.il/books?id=yXvfDzHo-WsC&printsec; ;=frontcover&dq;=inauthor:%22Shmuel+Onn%22&hl;=en&ei;=ccjLToGAPMXLhAep-ZznDQ&sa;=X&oi;=book_result&ct;=result&redir;_esc=y#v=onepage&q;=inauthor%3A%22Shmuel%20Onn%22&f;=false  Nonlinear  Discrete  Optimization ],  European  Mathematical  Society ,  x+137  pp.,  2010 ↩  Shmuel  Onn:  Linear  and  nonlinear  integer  optimization ,  Online  Video  Lecture  Series,  Mathematical  Sciences  Research  Institute ,  Berkeley,  2010 ↩  Alexander Schrijver : Theory of Linear and Integer Programming , Wiley, xii+471 pp., 1986 ↩   Raymond Hemmecke, Shmuel Onn, Robert Weismantel: A polynomial oracle-time algorithm for convex integer minimization, Mathematical Programming 126:97–117, 2011 ↩  Yuri V. Matiyasevich: Hilbert's Tenth Problem , MIT Press, xxiv+264 pp., 1993 ↩  Jesús A. De Loera , Raymond Hemmecke, Shmuel Onn, Robert Weismantel: N -fold integer programming, Discrete Optimization, 5:231–241, 2008 ↩  Jesús A. De Loera , Shmuel Onn: The complexity of three-way statistical tables, SIAM Journal on Computing, 33:819–836, 2004 ↩  Theodore S. Motzkin: The multi-index transportation problem, Bulletin of the American Mathematical Society 58:494, 1952 ↩   Raymond Hemmecke, Matthias Köppe, Robert Weismantel: A polynomial-time algorithm for optimizing over N -fold 4-block decomposable integer programs, IPCO 14, 2010 ↩  Jesus A. De Loera, Shmuel Onn: All linear and integer programs are slim 3-way transportation programs, SIAM Journal on Optimization, 17:806–821, 2006 ↩   Raymond Hemmecke, Shmuel Onn, Lyubov Romanchuk: N -fold integer programming in cubic time, Mathematical Programming, 137:325–341, 2013 ↩     