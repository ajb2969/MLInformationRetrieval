   Non-negative least squares      Non-negative least squares   In mathematical optimization , the problem of non-negative least squares ( NNLS ) is a constrained version of the least squares problem where the coefficients are not allowed to become negative. That is, given a matrix   𝐀   𝐀   \mathbf{A}   and a (column) vector of response variables    𝐲   𝐲   \mathbf{y}   , the goal is to find 1         arg   min   𝐱     ∥   𝐀𝐱  -  𝐲   ∥   2        subscript    arg  min   𝐱    subscript   norm    𝐀𝐱  𝐲    2     \operatorname*{arg\,min}_{\mathbf{x}}\|\mathbf{Ax}-\mathbf{y}\|_{2}   subject to    𝐱  ≥  0      𝐱  normal-≥  0    \mathbf{x}≥0   .  Here,    𝐱  ≥  0      𝐱  normal-≥  0    \mathbf{x}≥0   means that each component of the vector   𝐱   𝐱   \mathbf{x}   should be non-negative and    ‖  ·  ‖  ₂      normal-‖  normal-·  normal-‖  normal-₂    ‖·‖₂   denotes the Euclidean norm .  Non-negative least squares problems turn up as subproblems in matrix decomposition , e.g. in algorithms for PARAFAC 2 and non-negative matrix/tensor factorization . 3 The latter can be considered a generalization of NNLS. 4  Another generalization of NNLS is bounded-variable least squares (BLVS), with simultaneous upper and lower bounds    α  ᵢ  ≤  𝐱  ᵢ  ≤  β  ᵢ      α  ᵢ  normal-≤  𝐱  ᵢ  normal-≤  β  ᵢ    αᵢ≤\mathbf{x}ᵢ≤βᵢ   . 5  Quadratic programming version  The NNLS problem is equivalent to a quadratic programming problem          arg   min    𝐱  ≥  𝟎      1  2    𝐱  𝖳   𝐐𝐱    +    𝐜  𝖳   𝐱         subscript    arg  min     𝐱  0        1  2    superscript  𝐱  𝖳   𝐐𝐱       superscript  𝐜  𝖳   𝐱     \operatorname*{arg\,min}_{\mathbf{x\geq 0}}\frac{1}{2}\mathbf{x}^{\mathsf{T}}%
 \mathbf{Q}\mathbf{x}+\mathbf{c}^{\mathsf{T}}\mathbf{x}   ,  where   𝐐   𝐐   \mathbf{Q}   =    𝐀  ᵀ  𝐀      𝐀  ᵀ  𝐀    \mathbf{A}ᵀ\mathbf{A}   and   𝐜   𝐜   \mathbf{c}   =    −  𝐀  ᵀ  𝐲      normal-−  𝐀  ᵀ  𝐲    −\mathbf{A}ᵀ\mathbf{y}   . This problem is convex as   𝐐   𝐐   \mathbf{Q}   is positive semidefinite and the non-negativity constraints form a convex feasible set. 6  Algorithms  The first widely used algorithm for solving this problem is an active set method published by Lawson and Hanson in their 1974 book Solving Least Squares Problems . 7 In pseudocode , this algorithm looks as follows: 8  # Inputs  A : matrix of shape (m, n)  y : vector of length m  tol : tolerance for the stopping criterion   # Initialization  P ← ∅  R ← {1, ..., n}  x ← zero-vector of length n  w ← Aᵀ(y − Ax)   while R ≠ ∅ and max(w) > tol  j ← index of max(w) in w  add j to P  remove j from R  # Aᴾ is A restricted to the variables included in P  sᴾ ← ((Aᴾ)ᵀ Aᴾ)⁻¹ (Aᴾ)ᵀy   while min(sᴾ) ≤ 0  α ← min(xᵢ / (xᵢ - sᵢ) for i in P, sᵢ ≤ 0)  x ← x + α(s - x)  Move to R all indexes j in P such that x j = 0  sᴾ ← ((Aᴾ)ᵀ Aᴾ)⁻¹ (Aᴾ)ᵀy  sᴿ ← 0  x ← s  w ← Aᵀ(y − Ax)  This algorithm takes a finite number of steps to reach a solution and smoothly improves its candidate solution as it goes (so it can find good approximate solutions when cut off at a reasonable number of iterations), but is very slow in practice, owing largely to the computation of the pseudoinverse      (    (   𝐀  ᴾ   )   ᵀ  𝐀  ᴾ   )   ⁻  ¹          𝐀  ᴾ   ᵀ  𝐀  ᴾ   normal-⁻  normal-¹    ((\mathbf{A}ᴾ)ᵀ\mathbf{A}ᴾ)⁻¹   . Variants of this algorithm are available in Matlab as the routine 9 and in SciPy as . 10  Many improved algorithms have been suggested since 1974. Fast NNLS (FNNLS) is an optimized version of the Lawson—Hanson algorithm. Other algorithms include variants of Landweber 's gradient descent method 11 and coordinate-wise optimization based on the quadratic programming problem above.  See also   M-matrix  Perron–Frobenius theorem   References  "  Category:Least squares  Category:Mathematical optimization       ↩   ↩  ↩  ↩  ↩  ↩  ↩  ↩     