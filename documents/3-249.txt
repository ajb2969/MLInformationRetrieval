


Eigenface




Eigenface

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



 
Eigenfaces is the name given to a set of eigenvectors when they are used in the computer vision problem of human face recognition.1 The approach of using eigenfaces for recognition was developed by Sirovich and Kirby (1987) and used by Matthew Turk and Alex Pentland in face classification.2 The eigenvectors are derived from the covariance matrix of the probability distribution over the high-dimensional vector space of face images. The eigenfaces themselves form a basis set of all images used to construct the covariance matrix. This produces dimension reduction by allowing the smaller set of basis images to represent the original training images. Classification can be achieved by comparing how faces are represented by the basis set.
History
The Eigenface approach began with a search for a low-dimensional representation of face images. Sirovich and Kirby (1987) showed that Principal Component Analysis could be used on a collection of face images to form a set of basis features. These basis images, known as Eigenpictures, could be linearly combined to reconstruct images in the original training set. If the training set consists of M images, principal component analysis could form a basis set of N images, where ''N Turk, Matthew A and Pentland, Alex P. Face recognition using eigenfaces. Computer Vision and Pattern Recognition, 1991. Proceedings {CVPR'91.}, {IEEE} Computer Society Conference on 1991 In addition to designing a system for automated face recognition using eigenfaces, they showed a way of calculating the eigenvectors of a covariance matrix in such a way as to make it possible for computers at that time to perform eigen-decomposition on a large number of face images. Face images usually occupy a high-dimensional space and conventional principal component analysis was intractable on such data sets. Turk and Pentland's paper demonstrated ways to extract the eigenvectors based on matrices sized by the number of images rather than the number of pixels.
Once established, the eigenface method was expanded to include methods of preprocessing to improve accuracy.3 Multiple manifold approaches were also used to build sets of eigenfaces for different subjects45 and different features, such as the eyes.6
Eigenface generation
A set of eigenfaces can be generated by performing a mathematical process called principal component analysis (PCA) on a large set of images depicting different human faces. Informally, eigenfaces can be considered a set of "standardized face ingredients", derived from statistical analysis of many pictures of faces. Any human face can be considered to be a combination of these standard faces. For example, one's face might be composed of the average face plus 10% from eigenface 1, 55% from eigenface 2, and even -3% from eigenface 3. Remarkably, it does not take many eigenfaces combined together to achieve a fair approximation of most faces. Also, because a person's face is not recorded by a digital photograph, but instead as just a list of values (one value for each eigenface in the database used), much less space is taken for each person's face.
The eigenfaces that are created will appear as light and dark areas that are arranged in a specific pattern. This pattern is how different features of a face are singled out to be evaluated and scored. There will be a pattern to evaluate symmetry, if there is any style of facial hair, where the hairline is, or evaluate the size of the nose or mouth. Other eigenfaces have patterns that are less simple to identify, and the image of the eigenface may look very little like a face.
The technique used in creating eigenfaces and using them for recognition is also used outside of facial recognition. This technique is also used for handwriting analysis, lip reading, voice recognition, sign language/hand gestures interpretation and medical imaging analysis. Therefore, some do not use the term eigenface, but prefer to use 'eigenimage'.
Practical implementation
To create a set of eigenfaces, one must:

Prepare a training set of face images. The pictures constituting the training set should have been taken under the same lighting conditions, and must be normalized to have the eyes and mouths aligned across all images. They must also be all resampled to a common pixel resolution (r × c). Each image is treated as one vector, simply by concatenating the rows of pixels in the original image, resulting in a single row with r × c elements. For this implementation, it is assumed that all images of the training set are stored in a single matrix T, where each column of the matrix is an image.
Subtract the mean. The average image a has to be calculated and then subtracted from each original image in T.
Calculate the eigenvectors and eigenvalues of the covariance matrix S. Each eigenvector has the same dimensionality (number of components) as the original images, and thus can itself be seen as an image. The eigenvectors of this covariance matrix are therefore called eigenfaces. They are the directions in which the images differ from the mean image. Usually this will be a computationally expensive step (if at all possible), but the practical applicability of eigenfaces stems from the possibility to compute the eigenvectors of S efficiently, without ever computing S explicitly, as detailed below.
Choose the principal components. Sort the eigenvalues in descending order and arrange eigenvectors accordingly. The number of principal components k is determined arbitrarily by setting a threshold ε on the total variance. Total variance v = n*(λ1+ λ2+…+ λn), n= number of data images by
k is the smallest number satisfies 
 
 


These eigenfaces can now be used to represent both existing and new faces: we can project a new (mean-subtracted) image on the eigenfaces and thereby record how that new face differs from the mean face. The eigenvalues associated with each eigenface represent how much the images in the training set vary from the mean image in that direction. We lose information by projecting the image on a subset of the eigenvectors, but we minimize this loss by keeping those eigenfaces with the largest eigenvalues. For instance, if we are working with a 100 x 100 image, then we will obtain 10,000 eigenvectors. In practical applications, most faces can typically be identified using a projection on between 100 and 150 eigenfaces, so that most of the 10,000 eigenvectors can be discarded.
Matlab example code
Here is an example of calculating eigenfaces with Extended Yale Face Database B. To evade computational and storage bottleneck, the face images are sampled down by a factor 4x4=16.
clear all ;
 close all; 
 load yalefaces 
 [h,w,n] = size(yalefaces); 
 d = h*w; 
 % vectorize images 
 x = reshape(yalefaces,[d n]); 
 x = double(x); 
 %subtract mean 
 x=bsxfun(@minus, x’, mean(x’))’; 
 % calculate covariance 
 s = cov(x’); 
 % obtain eigenvalue & eigenvector 
 [V,D] = eig(s);
 eigval = diag(D); 
 % sort eigenvalues in descending order 
 eigval = eigval(end:-1:1); 
 V = fliplr(V); 
 % show 0th through 15th principal eigenvectors 
 eig0 = reshape(mean(x,2), [h,w]); 
 figure,subplot(4,4,1) 
 imagesc(eig0) 
 colormap gray 
 for i = 1:15 
 subplot(4,4,i+1) 
 imagesc(reshape(V(:,i),h,w)) 
 end 
Note that although the covariance matrix S generates many eigenfaces, only a fraction of those are needed to represent the majority of the faces. For example, to represent 95% of the total variation of all face images, only the first 43 eigenfaces are needed. To calculate this result, implement the following code:
% evaluate the number of principal components needed to represent 95% Total variance. 
 eigsum = sum(eigval); 
 csum = 0; 
 for i = 1:d 
 csum = csum + eigval(i); 
 tv = csum/eigsum; 
 if tv > 0.95 
 k95 = i; 
 break 
 end ;
 end;
Computing the eigenvectors
Performing PCA directly on the covariance matrix of the images is often computationally infeasible. If small, say 100 × 100, greyscale images are used, each image is a point in a 10,000-dimensional space and the covariance matrix S is a matrix of 10,000 × 10,000 = 108 elements. However the rank of the covariance matrix is limited by the number of training examples: if there are N training examples, there will be at most N − 1 eigenvectors with non-zero eigenvalues. If the number of training examples is smaller than the dimensionality of the images, the principal components can be computed more easily as follows.
Let T be the matrix of preprocessed training examples, where each column contains one mean-subtracted image. The covariance matrix can then be computed as S = TTT and the eigenvector decomposition of S is given by


 
  However TTT is a large matrix, and if instead we take the eigenvalue decomposition of


 
  then we notice that by pre-multiplying both sides of the equation with T, we obtain


 
  Meaning that, if ui is an eigenvector of TTT, then vi = Tui is an eigenvector of S. If we have a training set of 300 images of 100 × 100 pixels, the matrix TTT is a 300 × 300 matrix, which is much more manageable than the 10,000 × 10,000 covariance matrix. Notice however that the resulting vectors vi are not normalised; if normalisation is required it should be applied as an extra step.
Connection with SVD
Let X denote the d x n data matrix with column xi as the image vector with mean subtracted. Then,
  


Let the singular value decomposition (SVD) of X be:
 


Then the eigenvalue decomposition for 
 
 
 
  is:
 

, where Λ=diag (eigenvalues of 

)
Thus we can see easily that:
 The eigenfaces = 

, the left singular vectors of 


 The ith eigenvalue of 

 ith singular value of 


Using SVD on data matrix X, we don’t need to calculate the actual covariance matrix to get eigenfaces.
Use in facial recognition
Facial recognition was the source of motivation behind the creation of eigenfaces. For this use, eigenfaces have advantages over other techniques available, such as the system's speed and efficiency. As eigenface is primarily a dimension reduction method, a system can represent many subjects with a relatively small set of data. As a face recognition system it is also fairly invariant to large reductions in image sizing, however it begins to fail considerably when the variation between the seen images and probe image is large.
To recognise faces, gallery images, those seen by the system, are saved as collections of weights describing the contribution each eigenface has to that image. When a new face is presented to the system for classification, its own weights are found by projecting the image onto the collection of eigenfaces. This provides a set of weights describing the probe face. These weights are then classified against all weights in the gallery set to find the closest match. A nearest neighbour method is a simple approach for finding the Euclidean Distance between two vectors, where the minimum can be classified as the closest subject.
Intuitively, recognition process with eigenface method is to project query images into the face-space spanned by eigenfaces we have calculated and in that face-space find the closest match to a face class.
 Pseudo code:7
 
 *  Given input image vector 

, the mean image vector from the database 

, calculate the weight of the kth eigenface as:
      


      Then form a weight vector 


 *  Compare W with weight vectors 

 of images in the database. Find the Euclidean distance.
      


 *  If 

, then the mth entry in the database is a candidate of recognition.
 *  If 

, then 

 may be an unknown face and can be added to the database.
 *  If 

 is not a face image.

The weights of each gallery image only convey information describing that image, not that subject. An image of one subject under frontal lighting may have very different weights to those of the same subject under strong left lighting. This limits the application of such a system. Experiments in the original Eigenface paper presented the following results: an average of 96% with light variation, 85% with orientation variation, and 64% with size variation. 
Various extensions have been made to the eigenface method such eigenfeatures. This method combines facial metrics (measuring distance between facial features) with the eigenface representation. Another method similar to the eigenface technique is 'fisherfaces' which uses Linear discriminant analysis.8 This method for facial recognition is less sensitive to variation in lighting and pose of the face than using eigenfaces. Fisherface utilises labelled data to retain more of the class specific information during the dimension reduction stage.
A further alternative to eigenfaces and fisherfaces is the active appearance model. This approach uses an Active Shape Model to describe the outline of a face. By collecting many face outlines, Principal Component Analysis can be used to form a basis set of models which, encapsulate the variation of different faces.
Many modern approaches still use Principal component analysis as a means of dimension reduction or to form basis images for different modes of variation.
Review on Eigenface
Eigenface provides an easy and cheap way to realize face recognition in that:

Its training process is completely automatic and easy to code.
Eigenface adequately reduces statistical complexity in face image representation.
Once eigenfaces of a database are calculated, face recognition can be achieved in real time.
Eigenface can handle large databases.

However, the deficiencies of the eigenface method are also obvious:

Very sensitive to lighting, scale and translation; requires a highly controlled environment.
Eigenface has difficulty capturing expression changes.
The most significant eigenfaces are mainly about illumination encoding and don't provide useful information regarding the actual face.

To cope with illumination distraction in practice, the eigenface method usually discards the first three eigenfaces from the dataset. Since illumination is usually the cause behind the largest variations in face images, the first three eigenfaces will mainly capture the information of 3-dimensional lighting changes, which has little contribution to face recognition. By discarding those three eigenfaces, there will be a decent amount of boost in accuracy of face recognition, but other methods such as Fisherface and Linear space still have the advantage.
See also

Craniofacial anthropometry
Human appearance
Pattern recognition

Notes
References





A. Pentland, B. Moghaddam, T. Starner, O. Oliyide, and M. Turk. (1993). "View-based and modular Eigenspaces for face recognition". Technical Report 245, M.I.T Media Lab.



T. Heseltine, N. Pears, J. Austin, Z. Chen (2003). "Face Recognition: A Comparison of Appearance-Based Approaches". Proc. VIIth Digital Image Computing: Techniques and Applications, vol 1. 59-68.


Delac, K., Grgic, M., Liatsis, P. (2005). "Appearance-based Statistical Methods for Face Recognition". Proceedings of the 47th International Symposium ELMAR-2005 focused on Multimedia Systems and Applications, Zadar, Croatia, 08-10 June 2005, pp. 151–158

External links

Face Recognition Homepage
PCA on the FERET Dataset
Developing Intelligence Eigenfaces and the Fusiform Face Area
A Tutorial on Face Recognition Using Eigenfaces and Distance Classifiers
Matlab example code for eigenfaces
[http://www.compvision.ru/forum/index.php?showtopic=74&view;;=getnewpost OpenCV + C++Builder6 implementation of PCA]
Java applet demonstration of eigenfaces
Introduction to eigenfaces
Face Recognition Function in OpenCV
Eigenface-based Facial Expression Recognition in Matlab

"
Category:Face recognition Category:Articles with example MATLAB/Octave code



Ruiz-del-Solar, J and Navarrete, P.Eigenspace-based face recognition: a comparative study of different approaches, 2005
Turk, Matthew A and Pentland, Alex P. '' Face recognition using eigenfaces''. Computer Vision and Pattern Recognition, 1991. Proceedings {CVPR'91.}, {IEEE} Computer Society Conference on 1991
Draper, Bruce A. and Yambor, Wendy S and Beveridge, J Ross. Analyzing pca-based face recognition algorithms: Eigenvector selection and distance measures. 2002.
Belhumeur, {P,N} and Kriegman, D. What is the set of images of an object under all possible lighting conditions?. Proceedings {CVPR} '96, 1996 {IEEE} Computer Society Conference on Computer Vision and Pattern Recognition, 1996
Burnstone J and Yin H. Eigenlights: Recovering Illumination From Face Images. Conf Proceedings on IDEAL 2011.
Moghaddam, B and Wahid, W and Pentland, A. Beyond eigenfaces: probabilistic matching for face recognition. Third {IEEE} International Conference on Automatic Face and Gesture Recognition, 1998. Proceedings

Belhumeur,P N, and Hespanha, {J,P}, and Kriegman, D.Eigenfaces vs. Fisherfaces: recognition using class specific linear projection, 1997.



