   Kernighan–Lin algorithm      Kernighan–Lin algorithm    This article is about the heuristic algorithm for the graph partitioning problem. For a heuristic for the traveling salesperson problem, see Lin–Kernighan heuristic .    Kernighan–Lin is a O(n 2 log(n)) heuristic algorithm for solving the graph partitioning problem . The algorithm has important applications in the layout of digital circuits and components in VLSI . 1 2  Description  Let    G   (  V  ,  E  )       G   V  E     G(V,E)   be a graph, and let   V   V   V   be the set of nodes and   E   E   E   the set of edges. The algorithm attempts to find a partition of   V   V   V   into two disjoint subsets   A   A   A   and   B   B   B   of equal size, such that the sum   T   T   T   of the weights of the edges between nodes in   A   A   A   and   B   B   B   is minimized. Let    I  a     subscript  I  a    I_{a}   be the internal cost of a , that is, the sum of the costs of edges between a and other nodes in A , and let    E  a     subscript  E  a    E_{a}   be the external cost of a , that is, the sum of the costs of edges between a and nodes in B . Furthermore, let       D  a   =    E  a   -   I  a         subscript  D  a      subscript  E  a    subscript  I  a      D_{a}=E_{a}-I_{a}   be the difference between the external and internal costs of a . If a and b are interchanged, then the reduction in cost is        T   o  l  d    -   T   n  e  w     =     D  a   +   D  b    -   2   c   a  ,  b             subscript  T    o  l  d     subscript  T    n  e  w          subscript  D  a    subscript  D  b      2   subscript  c   a  b        T_{old}-T_{new}=D_{a}+D_{b}-2c_{a,b}   where    c   a  ,  b      subscript  c   a  b     c_{a,b}   is the cost of the possible edge between a and b .  The algorithm attempts to find an optimal series of interchange operations between elements of   A   A   A   and   B   B   B   which maximizes     T   o  l  d    -   T   n  e  w         subscript  T    o  l  d     subscript  T    n  e  w      T_{old}-T_{new}   and then executes the operations, producing a partition of the graph to A and B . 3  Pseudocode  See 4  1  '''function''' Kernighan-Lin(''G(V,E)''):
   2      determine a balanced initial partition of the nodes into sets A and B
   3      
   4      '''do'''
   5         compute D values for all a in A and b in B
   6         let gv, av, and bv be empty lists
   7         '''for (n := 1 to |V|/2)'''
   8            find a from A and b from B, such that g = D[a] + D[b] - 2*E(a, b) is maximal
   9            remove a and b from further consideration in this pass
   10           add g to gv, a to av, and b to bv
   11           update D values for the elements of A = A \ a and B = B \ b
   12        '''end for'''
   13        find k which maximizes g_max, the sum of g[1],...,g[k]
   14        '''if (g_max > 0)''' '''then'''
   15           Exchange av[1],av[2],...,av[k] with bv[1],bv[2],...,bv[k]
   16     '''until (g_max <= 0)'''
   17  '''return G(V,E)'''  References  "  Category:Combinatorial optimization  Category:Combinatorial algorithms  Category:Heuristic algorithms       ↩  ↩     