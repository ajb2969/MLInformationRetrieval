


Unifying Theories of Programming




Unifying Theories of Programming

Unifying Theories of Programming (UTP) in computer science deals with program semantics. It shows how denotational semantics, operational semantics and algebraic semantics can be combined in a unified framework for the formal specification, design and implementation of programs and computer systems.
The book of this title by C.A.R. Hoare and He Jifeng was published in the Prentice Hall International Series in Computer Science in 1998 and is now freely available on the web.1
Theories
The semantic foundation of the UTP is the first-order predicate calculus, augmented with fixed point constructs from second-order logic. Following the tradition of Eric Hehner, programs are predicates in the UTP, and there is no distinction between programs and specifications at the semantic level. In the words of Hoare:

A computer program is identified with the strongest predicate describing every relevant observation that can be made of the behaviour of a computer executing that program.2

In UTP parlance, a theory is a model of a particular programming paradigm. A UTP theory is composed of three ingredients:

an alphabet, which is a set of variable names denoting the attributes of the paradigm that can be observed by an external entity;
a signature, which is the set of programming language constructs intrinsic to the paradigm; and
a collection of healthiness conditions, which define the space of programs that fit within the paradigm. These healthiness conditions are typically expressed as monotonic idempotent predicate transformers.

Program refinement is an important concept in the UTP. A program 
 
 
 
  is refined by 
 
 
 
  if and only if every observation that can be made of 
 
 
 
  is also an observation of 
 
 
 
 . The definition of refinement is common across UTP theories:



where 
 
 
 
  denotes3 the universal closure of all variables in the alphabet.
Relations
The most basic UTP theory is the alphabetised predicate calculus, which has no alphabet restrictions or healthiness conditions. The theory of relations is slightly more specialised, since a relation's alphabet may consist of only:

undecorated variables (
 
 
 
 ), modelling an observation of the program at the start of its execution; and
primed variables (
 
 
 
 ), modelling an observation of the program at a later stage of its execution.

Some common language constructs can be defined in the theory of relations as follows:

The skip statement, which does not alter the program state in any way, is modelled as the relational identity:





The assignment of value 
 
 
 
  to a variable 
 
 
 
  is modelled as setting 
 
 
 
  to 
 
 
 
  and keeping all other variables (denoted by 
 
 
 
 ) constant:





The sequential composition of two programs is just relational composition of intermediate state:





Non-deterministic choice between programs is their greatest lower bound:





Conditional choice between programs is written using infix notation:





A semantics for recursion is given by the least fixed point

 
  of a monotonic predicate transformer 
 
 
 
 :




References
Further reading

Jim Woodcock and Ana Cavalcanti. A tutorial introduction to designs in Unifying Theories of Programming. In Integrated Formal Methods, volume 2999 of Lecture Notes in Computer Science, pages 40–66. Springer Berlin / Heidelberg, 2004. ISBN 978-3-540-21377-2. 
Ana Cavalcanti and Jim Woodcock. A tutorial introduction to CSP in Unifying Theories of Programming. In Refinement Techniques in Software Engineering, volume 3167 of Lecture Notes in Computer Science, pages 220–268. Springer Berlin / Heidelberg, 2006. 

External links

UTP book website

"
Category:1998 books Category:Computer science books Category:Formal methods publications



↩
C.A.R. Hoare, Programming: Sorcery or science? IEEE Software, 1(2): 5–16, April 1984. ISSN 0740-7459. doi: 10.1109/MS.1984.234042.↩
Edsger W. Dijkstra and Carel S. Scholten. Predicate calculus and program semantics. Texts and Monographs in Computer Science. Springer-Verlag New York, Inc., New York, NY, USA, 1990. ISBN 0-387-96957-8.↩




