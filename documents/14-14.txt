


M-tree




M-tree

M-trees are tree data structures that are similar to R-trees and B-trees. It is constructed using a metric and relies on the triangle inequality for efficient range and k-NN queries. While M-trees can perform well in many conditions, the tree can also have large overlap and there is no clear strategy on how to best avoid overlap. In addition, it can only be used for distance functions that satisfy the triangle inequality, while many advanced dissimilarity functions used in information retrieval do not satisfy this.1
Overview
(Figure)
2D M-Tree visualized using ELKI. Due to the axis scales, the spheres appear ellipsoidal. Every blue sphere (leaf) is contained in a red sphere (directory nodes). Leaves overlap, but not too much.

As in any Tree-based data structure, the M-Tree is composed of Nodes and Leaves. In each node there is a data object that identifies it uniquely and a pointer to a sub-tree where its children reside. Every leaf has several data objects. For each node there is a radius 
 
 
 
  that defines a Ball in the desired metric space. Thus, every node 
 
 
 
  and leaf 
 
 
 
  residing in a particular node 
 
 
 
  is at most distance 
 
 
 
  from 
 
 
 
 , and every node 
 
 
 
  and leaf 
 
 
 
  with node parent 
 
 
 
  keep the distance from it.
M-Tree construction
Components
An M-Tree has these components and sub-components:

Non-leaf nodes
 
A set of routing objects NRO.
Pointer to Node's parent object Op.

Leaf nodes
 
A set of objects NO.
Pointer to Node's parent object Op.

Routing Object
 
(Feature value of) routing object Or.
Covering radius r(Or).
Pointer to covering tree T(Or).
Distance of Or from its parent object d(Or,P(Or))

Object
 
(Feature value of the) object Oj.
Object identifier oid(Oj).
Distance of Oj from its parent object d(Oj,P(Oj))


Insert
The main idea is first to find a leaf node 
 
 
 
  where the new object 
 
 
 
  belongs. If 
 
 
 
  is not full then just attach it to 
 
 
 
 . If 
 
 
 
  is full then invoke a method to split 
 
 
 
 . The algorithm is as follows:
  Input: Node 

  of M-Tree 

, Entry 


  Output: A new instance of 

 containing all entries in original 

 plus 




 
  ← 
 
 
 
 's routing objects or objects
  if 

 is not a leaf then
  {
       /*Look for entries that the new object fits into*/
       let 

 be routing objects from 

's set of routing objects 

 such that 


       if 

 is not empty then
       {
          /*If there are one or more entry, then look for an entry such that is closer to the new object*/
          


       }
       else
       {
          /*If there are no such entry, then look for an object with minimal distance from */ 
          /*its covering radius's edge to the new object*/
          


          /*Upgrade the new radii of the entry*/
          

 = 


       }
       /*Continue inserting in the next level*/
       return insert(

, 

);
  else
  {
       /*If the node has capacity then just insert the new object*/
       if 

 is not full then
       {  store(

, 

)   }
       /*The node is at full capacity, then it is needed to do a new split in this level*/
       else
       {  split(

, 

) }
  }
Split
If the split method arrives to the root of the tree, then it choose two routing objects from 
 
 
 
 , and creates two new nodes containing all the objects in original 
 
 
 
 , and store them into the new root. If split methods arrives to a node 
 
 
 
  that is not the root of the tree, the method choose two new routing objects from 
 
 
 
 , re-arrange every routing object in 
 
 
 
  in two new nodes 
 
 
 
  and 
 
 
 
 , and store these new nodes in the parent node 
 
 
 
  of original 
 
 
 
 . The split must be repeated if 
 
 
 
  has not enough capacity to store 
 
 
 
 . The algorithm is as follow:
  Input: Node 

  of M-Tree 

, Entry 


  Output: A new instance of 

 containing a new partition.
  /*The new routing objects are now all those in the node plus the new routing object*/
  let be 

 entries of 


  if 

 is not the root then
  {
     /*Get the parent node and the parent routing object*/
     let 

 be the parent routing object of 


     let 

 be the parent node of 


  }
  /*This node will contain part of the objects of the node to be split*/
  Create a new node 


  /*Promote two routing objects from the node to be split, to be new routing objects*/
  Create new objects 

 and 

.
  Promote(

, 

, 

)
  /*Choose which objects from the node being split will act as new routing objects*/
  Partition(

, 

, 

, 

, 

)
  /*Store entries in each new routing object*/
  Store 

's entries in 

 and 

's entries in 


  if 

 is the current root then
  {
      /*Create a new node and set it as new root and store the new routing objects*/
      Create a new root node 


      Store 

 and 

 in 


  }
  else
  {
      /*Now use the parent rouing object to store one of the new objects*/
      Replace entry 

 with entry 

 in 


      if 

 is no full then
      {
          /*The second routing object is stored in the parent only if it has free capacity*/
          Store 

 in 


      }
      else
      {
           /*If there is no free capacity then split the level up*/
           split(

, 

)
      }
  }
M-Tree Queries
Range Query
A range query is where a minimum similarity/maximum distance value is speciﬁed. For a given query object Q ∈ D and a maximum search distance r(Q), the range query range(Q, r(Q)) selects all the indexed objects Oj such that d(Oj, Q) ≤ r(Q).2
Algorithm RangeSearch starts from the root node and recursively traverses all the paths which cannot be excluded from leading to qualifying objects.  Input: Node 
 
 
 
  of M-Tree MT, 
 
 
 
 : query object, 
 
 
 
 : search radius
Output: all the DB objects such that 
 
 

{ 
  let 

 be the parent object of node 

;

  if 

 is not a leaf then { 
    for each entry(

) in N do {
          if 

 then { 
            Compute 

;
            if 

 then
              RangeSearch(*ptr(

)),

,

); 
          }
    }
  }
  else { 
    for each entry(

) in 

 do {
          if 

 then { 
            Compute 

;
            if 

 ≤ 

 then
              add 

 to the result; 
          }
    }
  }
}


 
  is the identiﬁer of the object which resides on a separate data ﬁle.


 
  is a sub-tree – the covering tree of 
 
 

k-NN queries
K Nearest Neighbor (k-NN) query takes the cardinality of the input set as an input parameter. For a given query object Q ∈ D and an integer k ≥ 1, the k-NN query NN(Q, k) selects the k indexed objects which have the shortest distance from Q, according to the distance function d. 3 
See also

Segment tree
Interval tree - A degenerate R-Tree for 1 dimension (usually time).
Bounding volume hierarchy
Spatial index
GiST

References
"
Category:Trees (data structures) Category:Database index techniques Category:Geometric data structures










