   Ford–Fulkerson algorithm      Ford–Fulkerson algorithm  The '''Ford–Fulkerson method''' or '''Ford–Fulkerson algorithm''' ('''FFA''') is an [[algorithm]] that co table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */    mputes the maximum flow in a flow network . It is called a "method" instead of an "algorithm" as the approach to finding augmenting paths in a residual graph is not fully specificied 1 or it is specified in several implementations with different running times. 2 It was published in 1956 by L. R. Ford, Jr. and D. R. Fulkerson . 3 The name "Ford–Fulkerson" is often also used for the Edmonds–Karp algorithm , which is a specialization of Ford–Fulkerson.  The idea behind the algorithm is as follows: as long as there is a path from the source (start node) to the sink (end node), with available capacity on all edges in the path, we send flow along one of the paths. Then we find another path, and so on. A path with available capacity is called an augmenting path .  Algorithm  Let    G   (  V  ,  E  )       G   V  E     G(V,E)   be a graph, and for each edge from   u   u   u   to   v   v   v   , let    c   (  u  ,  v  )       c   u  v     c(u,v)   be the capacity and    f   (  u  ,  v  )       f   u  v     f(u,v)   be the flow. We want to find the maximum flow from the source   s   s   s   to the sink   t   t   t   . After every step in the algorithm the following is maintained:        Capacity constraints :        ∀   (  u  ,  v  )    ∈    E   f   (  u  ,  v  )    ≤   c   (  u  ,  v  )           for-all   u  v      E  f   u  v           c   u  v       \forall(u,v)\in E\ f(u,v)\leq c(u,v)      The flow along an edge can not exceed its capacity.     Skew symmetry :        ∀   (  u  ,  v  )    ∈    E   f   (  u  ,  v  )    =   -   f   (  v  ,  u  )            for-all   u  v      E  f   u  v             f   v  u        \forall(u,v)\in E\ f(u,v)=-f(v,u)      The net flow from   u   u   u   to   v   v   v   must be the opposite of the net flow from   v   v   v   to   u   u   u   (see example).     Flow conservation :         ∀  u   ∈  V   :   u  ≠   s  and  u   ≠  t  ⇒    ∑   w  ∈  V     f   (  u  ,  w  )     =  0      normal-:     for-all  u   V       u    s  and  u        t    normal-⇒      subscript     w  V      f   u  w          0      \forall u\in V:u\neq s\text{ and }u\neq t\Rightarrow\sum_{w\in V}f(u,w)=0      That is, unless   u   u   u   is   s   s   s   or   t   t   t   . The net flow to a node is zero, except for the source, which "produces" flow, and the sink, which "consumes" flow.     Value(f) :         ∑    (  s  ,  u  )   ∈  E     f   (  s  ,  u  )     =    ∑    (  v  ,  t  )   ∈  E     f   (  v  ,  t  )           subscript      s  u   E      f   s  u       subscript      v  t   E      f   v  t       \sum_{(s,u)\in E}f(s,u)=\sum_{(v,t)\in E}f(v,t)      That is, the flow leaving from   s   s   s   must be equal to the flow arriving at   t   t   t   .         This means that the flow through the network is a legal flow after each round in the algorithm. We define the residual network      G  f    (  V  ,   E  f   )        subscript  G  f    V   subscript  E  f      G_{f}(V,E_{f})   to be the network with capacity      c  f    (  u  ,  v  )    =    c   (  u  ,  v  )    -   f   (  u  ,  v  )            subscript  c  f    u  v        c   u  v      f   u  v       c_{f}(u,v)=c(u,v)-f(u,v)   and no flow. Notice that it can happen that a flow from   v   v   v   to   u   u   u   is allowed in the residual network, though disallowed in the original network: if     f   (  u  ,  v  )    >  0        f   u  v    0    f(u,v)>0   and     c   (  v  ,  u  )    =  0        c   v  u    0    c(v,u)=0   then      c  f    (  v  ,  u  )    =    c   (  v  ,  u  )    -   f   (  v  ,  u  )     =   f   (  u  ,  v  )    >  0           subscript  c  f    v  u        c   v  u      f   v  u            f   u  v         0     c_{f}(v,u)=c(v,u)-f(v,u)=f(u,v)>0   .  Algorithm Ford–Fulkerson   Inputs Given a Network    G  =   (  V  ,  E  )       G   V  E     G=(V,E)   with flow capacity   c   c   c   , a source node   s   s   s   , and a sink node   t   t   t     Output Compute a flow   f   f   f   from   s   s   s   to   t   t   t   of maximum value       f   (  u  ,  v  )    ←  0     normal-←    f   u  v    0    f(u,v)\leftarrow 0   for all edges    (  u  ,  v  )     u  v    (u,v)     While there is a path   p   p   p   from   s   s   s   to   t   t   t   in    G  f     subscript  G  f    G_{f}   , such that      c  f    (  u  ,  v  )    >  0         subscript  c  f    u  v    0    c_{f}(u,v)>0   for all edges     (  u  ,  v  )   ∈  p       u  v   p    (u,v)\in p   :  Find      c  f    (  p  )    =   min   {     c  f    (  u  ,  v  )    :    (  u  ,  v  )   ∈  p    }           subscript  c  f   p      normal-:     subscript  c  f    u  v       u  v   p       c_{f}(p)=\min\{c_{f}(u,v):(u,v)\in p\}     For each edge     (  u  ,  v  )   ∈  p       u  v   p    (u,v)\in p          f   (  u  ,  v  )    ←    f   (  u  ,  v  )    +    c  f    (  p  )        normal-←    f   u  v        f   u  v       subscript  c  f   p      f(u,v)\leftarrow f(u,v)+c_{f}(p)   ( Send flow along the path )       f   (  v  ,  u  )    ←    f   (  v  ,  u  )    -    c  f    (  p  )        normal-←    f   v  u        f   v  u       subscript  c  f   p      f(v,u)\leftarrow f(v,u)-c_{f}(p)   ( The flow might be "returned" later )       The path in step 2 can be found with for example a breadth-first search or a depth-first search in     G  f    (  V  ,   E  f   )        subscript  G  f    V   subscript  E  f      G_{f}(V,E_{f})   . If you use the former, the algorithm is called Edmonds–Karp .  When no more paths in step 2 can be found,   s   s   s   will not be able to reach   t   t   t   in the residual network. If   S   S   S   is the set of nodes reachable by   s   s   s   in the residual network, then the total capacity in the original network of edges from   S   S   S   to the remainder of   V   V   V   is on the one hand equal to the total flow we found from   s   s   s   to   t   t   t   , and on the other hand serves as an upper bound for all such flows. This proves that the flow we found is maximal. See also Max-flow Min-cut theorem .  If the graph    G   (  V  ,  E  )       G   V  E     G(V,E)   has multiple sources and sinks, we act as follows: Suppose that    T  =   {  t  |   t  is a sink   }       T   conditional-set  t    t  is a sink      T=\{t|t\text{ is a sink}\}   and    S  =   {  s  |   s  is a source   }       S   conditional-set  s    s  is a source      S=\{s|s\text{ is a source}\}   . Add a new source    s  *     superscript  s     s^{*}   with an edge    (   s  *   ,  s  )      superscript  s    s    (s^{*},s)   from    s  *     superscript  s     s^{*}   to every node    s  ∈  S      s  S    s\in S   , with capacity    c   (   s  *   ,  s  )   =    d  s     (   d  s   =   ∑    (  s  ,  u  )   ∈  E    c   (  s  ,  u  )   )      fragments  c   fragments  normal-(   superscript  s    normal-,  s  normal-)     subscript  d  s    fragments  normal-(   subscript  d  s     subscript      s  u   E    c   fragments  normal-(  s  normal-,  u  normal-)   normal-)     c(s^{*},s)=d_{s}\;(d_{s}=\sum_{(s,u)\in E}c(s,u))   . And add a new sink    t  *     superscript  t     t^{*}   with an edge    (  t  ,   t  *   )     t   superscript  t      (t,t^{*})   from every node    t  ∈  T      t  T    t\in T   to    t  *     superscript  t     t^{*}   , with capacity    c   (  t  ,   t  *   )   =    d  t     (   d  t   =   ∑    (  v  ,  t  )   ∈  E    c   (  v  ,  t  )   )      fragments  c   fragments  normal-(  t  normal-,   superscript  t    normal-)     subscript  d  t    fragments  normal-(   subscript  d  t     subscript      v  t   E    c   fragments  normal-(  v  normal-,  t  normal-)   normal-)     c(t,t^{*})=d_{t}\;(d_{t}=\sum_{(v,t)\in E}c(v,t))   . Then apply the Ford–Fulkerson algorithm.  Also, if a node   u   u   u   has capacity constraint    d  u     subscript  d  u    d_{u}   , we replace this node with two nodes     u   i  n    ,   u   o  u  t        subscript  u    i  n     subscript  u    o  u  t      u_{in},u_{out}   , and an edge    (   u   i  n    ,   u   o  u  t    )      subscript  u    i  n     subscript  u    o  u  t      (u_{in},u_{out})   , with capacity     c   (   u   i  n    ,   u   o  u  t    )    =   d  u         c    subscript  u    i  n     subscript  u    o  u  t       subscript  d  u     c(u_{in},u_{out})=d_{u}   . Then apply the Ford–Fulkerson algorithm.  Complexity  By adding the flow augmenting path to the flow already established in the graph, the maximum flow will be reached when no more flow augmenting paths can be found in the graph. However, there is no certainty that this situation will ever be reached, so the best that can be guaranteed is that the answer will be correct if the algorithm terminates. In the case that the algorithm runs forever, the flow might not even converge towards the maximum flow. However, this situation only occurs with irrational flow values. When the capacities are integers, the runtime of Ford–Fulkerson is bounded by    O   (   E  f   )       O    E  f     O(Ef)   (see big O notation ), where   E   E   E   is the number of edges in the graph and   f   f   f   is the maximum flow in the graph. This is because each augmenting path can be found in    O   (  E  )       O  E    O(E)   time and increases the flow by an integer amount of at least   1   1   1   .  A variation of the Ford–Fulkerson algorithm with guaranteed termination and a runtime independent of the maximum flow value is the Edmonds–Karp algorithm , which runs in    O   (   V   E  2    )       O    V   superscript  E  2      O(VE^{2})   time.  Integral example  The following example shows the first steps of Ford–Fulkerson in a flow network with 4 nodes, source   A   A   A   and sink   D   D   D   . This example shows the worst-case behaviour of the algorithm. In each step, only a flow of   1   1   1   is sent across the network. If breadth-first-search were used instead, only two steps would be needed.      Path   Capacity   Resulting flow network       Initial flow network  (Figure)  Ford-Fulkerson example 0.svg          A  ,  B  ,  C  ,  D     A  B  C  D    A,B,C,D           min   (    c  f    (  A  ,  B  )    ,    c  f    (  B  ,  C  )    ,    c  f    (  C  ,  D  )    )    =            subscript  c  f    A  B       subscript  c  f    B  C       subscript  c  f    C  D     absent    \min(c_{f}(A,B),c_{f}(B,C),c_{f}(C,D))=         min   (    c   (  A  ,  B  )    -   f   (  A  ,  B  )     ,    c   (  B  ,  C  )    -   f   (  B  ,  C  )     ,    c   (  C  ,  D  )    -   f   (  C  ,  D  )     )    =             c   A  B      f   A  B         c   B  C      f   B  C         c   C  D      f   C  D      absent    \min(c(A,B)-f(A,B),c(B,C)-f(B,C),c(C,D)-f(C,D))=         min   (   1000  -  0   ,   1  -  0   ,   1000  -  0   )    =  1          1000  0     1  0     1000  0    1    \min(1000-0,1-0,1000-0)=1     (Figure)  Ford-Fulkerson example 1.svg          A  ,  C  ,  B  ,  D     A  C  B  D    A,C,B,D           min   (    c  f    (  A  ,  C  )    ,    c  f    (  C  ,  B  )    ,    c  f    (  B  ,  D  )    )    =            subscript  c  f    A  C       subscript  c  f    C  B       subscript  c  f    B  D     absent    \min(c_{f}(A,C),c_{f}(C,B),c_{f}(B,D))=         min   (    c   (  A  ,  C  )    -   f   (  A  ,  C  )     ,    c   (  C  ,  B  )    -   f   (  C  ,  B  )     ,    c   (  B  ,  D  )    -   f   (  B  ,  D  )     )    =             c   A  C      f   A  C         c   C  B      f   C  B         c   B  D      f   B  D      absent    \min(c(A,C)-f(A,C),c(C,B)-f(C,B),c(B,D)-f(B,D))=         min   (   1000  -  0   ,   0  -   (   -  1   )    ,   1000  -  0   )    =  1          1000  0     0    1      1000  0    1    \min(1000-0,0-(-1),1000-0)=1     (Figure)  Ford-Fulkerson example 2.svg      After 1998 more steps …     Final flow network  (Figure)  Ford-Fulkerson example final.svg      Notice how flow is "pushed back" from   C   C   C   to   B   B   B   when finding the path    A  ,  C  ,  B  ,  D     A  C  B  D    A,C,B,D   .  Non-terminating example  (Figure)  Ford-Fulkerson forever.svg   Consider the flow network shown on the right, with source   s   s   s   , sink   t   t   t   , capacities of edges    e  1     subscript  e  1    e_{1}   ,    e  2     subscript  e  2    e_{2}   and    e  3     subscript  e  3    e_{3}   respectively   1   1   1   ,    r  =    (    5   -  1   )   /  2       r        5   1   2     r=(\sqrt{5}-1)/2   and   1   1   1   and the capacity of all other edges some integer    M  ≥  2      M  2    M\geq 2   . The constant   r   r   r   was chosen so, that     r  2   =   1  -  r        superscript  r  2     1  r     r^{2}=1-r   . We use augmenting paths according to the following table, where     p  1   =   {  s  ,   v  4   ,   v  3   ,   v  2   ,   v  1   ,  t  }        subscript  p  1    s   subscript  v  4    subscript  v  3    subscript  v  2    subscript  v  1   t     p_{1}=\{s,v_{4},v_{3},v_{2},v_{1},t\}   ,     p  2   =   {  s  ,   v  2   ,   v  3   ,   v  4   ,  t  }        subscript  p  2    s   subscript  v  2    subscript  v  3    subscript  v  4   t     p_{2}=\{s,v_{2},v_{3},v_{4},t\}   and     p  3   =   {  s  ,   v  1   ,   v  2   ,   v  3   ,  t  }        subscript  p  3    s   subscript  v  1    subscript  v  2    subscript  v  3   t     p_{3}=\{s,v_{1},v_{2},v_{3},t\}   .      Step   Augmenting path   Sent flow   Residual capacities           e  1     subscript  e  1    e_{1}          e  2     subscript  e  2    e_{2}          e  3     subscript  e  3    e_{3}        0          r  0   =  1       superscript  r  0   1    r^{0}=1        1       {  s  ,   v  2   ,   v  3   ,  t  }     s   subscript  v  2    subscript  v  3   t    \{s,v_{2},v_{3},t\}         1   1   1          r  0     superscript  r  0    r^{0}        2       p  1     subscript  p  1    p_{1}          r  1     superscript  r  1    r^{1}          r  2     superscript  r  2    r^{2}        3       p  2     subscript  p  2    p_{2}          r  1     superscript  r  1    r^{1}          r  2     superscript  r  2    r^{2}        4       p  1     subscript  p  1    p_{1}          r  2     superscript  r  2    r^{2}         0   0         5       p  3     subscript  p  3    p_{3}          r  2     superscript  r  2    r^{2}          r  2     superscript  r  2    r^{2}        Note that after step 1 as well as after step 5, the residual capacities of edges    e  1     subscript  e  1    e_{1}   ,    e  2     subscript  e  2    e_{2}   and    e  3     subscript  e  3    e_{3}   are in the form    r  n     superscript  r  n    r^{n}   ,    r   n  +  1      superscript  r    n  1     r^{n+1}   and   0   0    , respectively, for some    n  ∈  ℕ      n  ℕ    n\in\mathbb{N}   . This means that we can use augmenting paths    p  1     subscript  p  1    p_{1}   ,    p  2     subscript  p  2    p_{2}   ,    p  1     subscript  p  1    p_{1}   and    p  3     subscript  p  3    p_{3}   infinitely many times and residual capacities of these edges will always be in the same form. Total flow in the network after step 5 is    1  +   2   (    r  1   +   r  2    )        1    2     superscript  r  1    superscript  r  2       1+2(r^{1}+r^{2})   . If we continue to use augmenting paths as above, the total flow converges to     1  +   2    ∑   i  =  1   ∞    r  i      =   3  +   2  r          1    2    superscript   subscript     i  1       superscript  r  i        3    2  r      \textstyle 1+2\sum_{i=1}^{\infty}r^{i}=3+2r   , while the maximum flow is     2  M   +  1        2  M   1    2M+1   . In this case, the algorithm never terminates and the flow doesn't even converge to the maximum flow. 4   Python implementation  class Edge( object ): def  __init__ ( self , u, v, w): self .source = u self .sink = v self .capacity = w def  __repr__ ( self ): return  " %s -> %s : %s "  % ( self .source, self .sink, self .capacity) class FlowNetwork( object ): def  __init__ ( self ): self .adj = {} self .flow = {} def add_vertex( self , vertex): self .adj[vertex] = [] def get_edges( self , v): return  self .adj[v] def add_edge( self , u, v, w = 0 ): if u == v: raise  ValueError ( "u == v" )
         edge = Edge(u,v,w)
         redge = Edge(v,u, 0 )
         edge.redge = redge
         redge.redge = edge self .adj[u].append(edge) self .adj[v].append(redge) self .flow[edge] =  0  self .flow[redge] =  0  def find_path( self , source, sink, path): if source == sink: return path for edge in  self .get_edges(source):
             residual = edge.capacity -  self .flow[edge] if residual >  0  and edge not  in path:
                 result =  self .find_path( edge.sink, sink, path + [edge]) if result !=  None : return result def max_flow( self , source, sink):
         path =  self .find_path(source, sink, []) while path !=  None :
             residuals = [edge.capacity -  self .flow[edge] for edge in path]
             flow =  min (residuals) for edge in path: self .flow[edge] += flow self .flow[edge.redge] -= flow
             path =  self .find_path(source, sink, []) return  sum ( self .flow[edge] for edge in  self .get_edges(source))  Usage example  For the example flow network in maximum flow problem we do the following:  >>> g = FlowNetwork() >>> [g.add_vertex(v) for v in  "sopqrt" ]
 [ None , None , None , None , None , None ] >>>  >>> g.add_edge( 's' , 'o' , 3 ) >>> g.add_edge( 's' , 'p' , 3 ) >>> g.add_edge( 'o' , 'p' , 2 ) >>> g.add_edge( 'o' , 'q' , 3 ) >>> g.add_edge( 'p' , 'r' , 2 ) >>> g.add_edge( 'r' , 't' , 3 ) >>> g.add_edge( 'q' , 'r' , 4 ) >>> g.add_edge( 'q' , 't' , 2 ) >>>  print (g.max_flow( 's' , 't' )) 5  Notes  References       See also   Approximate max-flow min-cut theorem   External links   [ http://community.topcoder.com/tc?module=Static&d1; ;=tutorials&d2;=maxFlow A tutorial explaining the Ford–Flukerson method to solve the max-flow problem]  Another Java animation  Java Web Start application   "  Category:Network flow  Category:Articles with example pseudocode  Category:Graph algorithms     ↩  ↩  ↩  ↩    