


2–3 tree




2–3 tree

In computer science, a 2–3 tree is a tree data structure, where every node with children (internal node) has either two children (2-node) and one data element or three children (3-nodes) and two data elements. Nodes on the outside of the tree (leaf nodes) have no children and one or two data elements.12 2−3 trees were invented by John Hopcroft in 1970.3
Image:2-3-4 tree 2-node.svg|2 node Image:2-3-4-tree 3-node.svg|3 node
2–3 trees are an isometry of AA trees, meaning that they are equivalent data structures. In other words, for every 2–3 tree, there exists at least one AA tree with data elements in the same order. 2–3 trees are balanced, meaning that each right, center, and left subtree contains the same or close to the same amount of data.
Definitions
We say that a node is a 2-node if and only if it has one data element and two children if it is an internal node.
We say that a node is a 3-node if and only if it has two data elements and three children if it is an internal node.
We say that 
 
 
 
  is a 2-3 tree if and only if one of the following statements hold:



 
  is empty. In other words, 
 
 
 
  does not have any nodes.


 
  is a 2-node 
 
 
 
  with data element 
 
 
 
 . If 
 
 
 
  has left child 
 
 
 
  and right child 
 
 
 
 , then 
 
 
 
  and 
 
 
 
  are non-empty 2-3 trees of the same height, 
 
 
 
  is greater than each element in 
 
 
 
 , and 
 
 
 
  is less than each data element in 
 
 
 
 .


 
  is a 3-node 
 
 
 
  with data elements 
 
 
 
  and 
 
 
 
 , where 
 
 
 
 . If 
 
 
 
  has left child 
 
 
 
 , middle child 
 
 
 
 , and right child 
 
 
 
 , then 
 
 
 
 , 
 
 
 
 , and 
 
 
 
  are non-empty 2-3 trees of equal height, 
 
 
 
  is greater than each data element in 
 
 
 
  and less than each data element in 
 
 
 
 , and 
 
 
 
  is greater than each data element in 
 
 
 
  and less than each data element in 
 
 
 
 .

Properties

Every internal node is a 2-node or a 3-node.
All leaves are at the same level.
All data is kept in sorted order.

Operations
Searching
Searching for an item in a 2-3 tree is similar to searching for an item in a binary search tree. Since the data elements in each node is ordered, a search function will be directed to the correct subtree and eventually to the correct node which contains the item.

Let 
 
 
 
  be a 2-3 tree and 
 
 
 
  be the data element we want to find. If 
 
 
 
  is empty, then 
 
 
 
  is not in 
 
 
 
  and we're done.
Let 
 
 
 
  be the root of 
 
 
 
 .
Suppose 
 
 
 
  is a leaf. If 
 
 
 
  is not in 
 
 
 
 , then 
 
 
 
  is not in 
 
 
 
 . Otherwise, 
 
 
 
  is in 
 
 
 
 . In particular, 
 
 
 
  can be found at a leaf node. We need no further steps and we're done.
Suppose 
 
 
 
  is a 2-node with left child 
 
 
 
  and right child 
 
 
 
 . Let 
 
 
 
  be the data element in 
 
 
 
 . There are three cases: If 
 
 
 
  is equal to 
 
 
 
 , then we've found 
 
 
 
  in 
 
 
 
  and we're done. If 
 
 
 
 , then set 
 
 
 
  to 
 
 
 
 , which by definition is a 2-3 tree, and go back to step 2. If 
 
 
 
 , then set 
 
 
 
  to 
 
 
 
  and go back to step 2.
Suppose 
 
 
 
  is a 3-node with left child 
 
 
 
 , middle child 
 
 
 
 , and right child 
 
 
 
 . Let 
 
 
 
  and 
 
 
 
  be the two data elements of 
 
 
 
 , where 
 
 
 
 . There are four cases: If 
 
 
 
  is equal to 
 
 
 
  or 
 
 
 
 , then 
 
 
 
  is in 
 
 
 
  and we're done. If 
 
 
 
 , then set 
 
 
 
  to 
 
 
 
  and go back to step 2. If 
 
 
 
 , then set 
 
 
 
  to 
 
 
 
  and go back to step 2. If 
 
 
 
 , then set 
 
 
 
  to 
 
 
 
  and go back to step 2.

Insertion
Insertion works by searching for the proper location of the key and adds it there. If the node becomes a 4-node then the node is split from two 2-nodes and the middle key is moved up to the parent. The diagram illustrates the process. framed|none|800px|Insertion of a number in a 2-3 tree for the 3 possible cases.
See also

2–3–4 tree


Finger tree


2–3 heap


(a,b)-tree

References
External links

2–3 Tree Java Applet
2–3 Tree In-depth description
2–3 Tree in F#
2–3 Tree in Python

"
Category:B-tree




, p.145-147





