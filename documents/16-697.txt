   Quantum refereed game      Quantum refereed game   Quantum refereed game in quantum information processing is a class of games in the general theory of quantum games . 1 It is played between two players, Alice and Bob, and arbitrated by a referee. The referee outputs the pay-off for the players after interacting with them for a fixed number of rounds, while exchanging quantum information .  Definition  An    n   n   n   -turn quantum referee performs   n   n   n   rounds of interaction with the player Alice and Bob. Each interaction involves receiving some quantum states from Alice and Bob, processing the quantum states together with the "left-over" state from the previous interaction, producing some output state, and sending part of the output state to the players. At the end of the   n   n   n   rounds, the referee processes the final state received from the players and decides the pay-off for Alice and Bob.  300px|framed|Quantum Refereed Games Mathematically, an n-turn referee is a measuring co-strategy     {   R  a   :   a  ∈  Σ   }     conditional-set   subscript  R  a     a  normal-Σ     \{R_{a}:a\in\Sigma\}   whose input spaces     𝒳  1   ,  ⋯  ,   𝒳  n       subscript  𝒳  1   normal-⋯   subscript  𝒳  n     \mathcal{X}_{1},\cdots,\mathcal{X}_{n}   and output spaces     𝒴  1   ,  ⋯  ,   𝒴  n       subscript  𝒴  1   normal-⋯   subscript  𝒴  n     \mathcal{Y}_{1},\cdots,\mathcal{Y}_{n}   are of the form       𝒳  k   =    𝒜  k   ⊗   ℬ  k         subscript  𝒳  k    tensor-product   subscript  𝒜  k    subscript  ℬ  k      \mathcal{X}_{k}=\mathcal{A}_{k}\otimes\mathcal{B}_{k}   and     𝒴  k   =    𝒞  k   ⊗   𝒟  k         subscript  𝒴  k    tensor-product   subscript  𝒞  k    subscript  𝒟  k      \mathcal{Y}_{k}=\mathcal{C}_{k}\otimes\mathcal{D}_{k}     for complex  Euclidean spaces      𝒜  k   ,   ℬ  k   ,   𝒞  k       subscript  𝒜  k    subscript  ℬ  k    subscript  𝒞  k     \mathcal{A}_{k},\mathcal{B}_{k},\mathcal{C}_{k}   and      𝒟  k   ,  1   ≤  k  ≤  n          subscript  𝒟  k   1   k       n     \mathcal{D}_{k},\ 1\leq k\leq n   .       𝒜  k   ,   ℬ  k       subscript  𝒜  k    subscript  ℬ  k     \mathcal{A}_{k},\mathcal{B}_{k}   represent the message sent by the referee to Alice and Bob during turn   k   k   k   , and     𝒞  k   ,   𝒟  k       subscript  𝒞  k    subscript  𝒟  k     \mathcal{C}_{k},\mathcal{D}_{k}   correspond to their responses. At the end of   n   n   n   turns, the referee produces an output    a  ∈  Σ      a  normal-Σ    a\in\Sigma     An    n   n   n   -turn quantum refereed game consists of an n-turn referee along with functions      V  A   ,   V  B    :   Σ  ↦  ℝ      normal-:    subscript  V  A    subscript  V  B     maps-to  normal-Σ  ℝ     V_{A},V_{B}:\Sigma\mapsto\mathbb{R}   that maps each measurement output   a   a   a   to Alice's and Bob's pay-off.  Individual quantum refereed games may place specific restrictions on strategies Alice and Bob can choose from. For example, in nonlocal games 2 and pseudo-telepathy games, 3 Alice and Bob are allowed to share entanglement but are forbidden from communicating. In general, such restrictions may not apply in quantum refereed games.  Zero sum quantum refereed game  Similar to classical zero sum game , a zero sum quantum refereed game 4 refers a quantum refereed game with the additional constraint       V  A    (  a  )    +    V  B    (  a  )     =  0           subscript  V  A   a      subscript  V  B   a    0    V_{A}(a)+V_{B}(a)=0   .  It is natural to assume Alice and Bob play independent strategies in a zero-sum quantum refereed game, since it cannot simultaneously be to both player's advantage to communicate directly with one another or to initially share an entanglement state {reference}. In this case, Alice's and Bob's strategy can be represented by      A  ∈    𝒮  n    (   𝒜   1  ⋯  n    ,   𝒞   1  ⋯  n    )        A     subscript  𝒮  n     subscript  𝒜    1  normal-⋯  n     subscript  𝒞    1  normal-⋯  n        A\in\mathcal{S}_{n}(\mathcal{A}_{1\cdots n},\mathcal{C}_{1\cdots n})   and    B  ∈    𝒮  n    (   ℬ   1  ⋯  n    ,   𝒟   1  ⋯  n    )        B     subscript  𝒮  n     subscript  ℬ    1  normal-⋯  n     subscript  𝒟    1  normal-⋯  n        B\in\mathcal{S}_{n}(\mathcal{B}_{1\cdots n},\mathcal{D}_{1\cdots n})     where     𝒮  n    (   𝒳   1  ⋯  n    ,   𝒴   1  ⋯  n    )        subscript  𝒮  n     subscript  𝒳    1  normal-⋯  n     subscript  𝒴    1  normal-⋯  n       \mathcal{S}_{n}(\mathcal{X}_{1\cdots n},\mathcal{Y}_{1\cdots n})   is the set of all n-turn strategies having input space     𝒳  1   ,  ⋯  ,   𝒳  n       subscript  𝒳  1   normal-⋯   subscript  𝒳  n     \mathcal{X}_{1},\cdots,\mathcal{X}_{n}   and output space     𝒴  1   ,  ⋯  ,   𝒴  n       subscript  𝒴  1   normal-⋯   subscript  𝒴  n     \mathcal{Y}_{1},\cdots,\mathcal{Y}_{n}   .  The combined strategy is then    A  ⊗  B     tensor-product  A  B    A\otimes B   .  Min-Max Theorem  Define     V   (  a  )    =    V  A    (  a  )    =   -    V  B    (  a  )             V  a      subscript  V  A   a             subscript  V  B   a       V(a)=V_{A}(a)=-V_{B}(a)   , and    R  =    ∑   a  ∈  Σ     V   (  a  )    R  a         R    subscript     a  normal-Σ      V  a   subscript  R  a       R=\sum_{a\in\Sigma}V(a)R_{a}   , then Alice's expected pay-off is      ∑   a  ∈  Σ     V   (  a  )    ⟨   A  ⊗  B   ,   R  a   ⟩     =   ⟨   A  ⊗  B   ,  R  ⟩         subscript     a  normal-Σ      V  a    tensor-product  A  B    subscript  R  a        tensor-product  A  B   R     \sum_{a\in\Sigma}V(a)\langle A\otimes B,R_{a}\rangle=\langle A\otimes B,R\rangle     The optimal strategy for Alice then lies in the min-max problem        max  A     min  B    ⟨   A  ⊗  B   ,  R  ⟩     =    min  B     max  A    ⟨   A  ⊗  B   ,  R  ⟩           subscript   A     subscript   B    tensor-product  A  B   R      subscript   B     subscript   A    tensor-product  A  B   R      \max_{A}\min_{B}\langle A\otimes B,R\rangle=\min_{B}\max_{A}\langle A\otimes B%
 ,R\rangle   .  The above equality holds because    A  ,  B     A  B    A,B   are drawn from compact and convex sets     𝒮  n    (   𝒜   1  ⋯  n    ,   𝒞   1  ⋯  n    )        subscript  𝒮  n     subscript  𝒜    1  normal-⋯  n     subscript  𝒞    1  normal-⋯  n       \mathcal{S}_{n}(\mathcal{A}_{1\cdots n},\mathcal{C}_{1\cdots n})   and     𝒮  n    (   ℬ   1  ⋯  n    ,   𝒟   1  ⋯  n    )        subscript  𝒮  n     subscript  ℬ    1  normal-⋯  n     subscript  𝒟    1  normal-⋯  n       \mathcal{S}_{n}(\mathcal{B}_{1\cdots n},\mathcal{D}_{1\cdots n})   . It is called the Min-Max Theorem for zero-sum quantum games.  Quantum Interactive Proof with Competing Provers  A quantum interactive proof with two competing provers is a generalization of the single prover quantum interactive proof system . 5 6 It can be modelled by zero-sum refereed games where Alice and Bob are the competing provers, and the referee is the verifier. The referee is assumed to be computationally bounded (polynomial size quantum circuit), whereas Alice and Bob can be computationally unrestricted. Alice, Bob and the referee receive a common string, and after fixed rounds of interactions (exchanging quantum information between the provers and the referee), the referee decides whether Alice wins or Bob wins.  Classical RG  In the classical setting, RG can be viewed as the following problem. Alice, Bob, and the referee is given some statement. Alice is trying to convince the referee that the statement is true while Bob is trying to convince the referee that the statement is false. The referee, who has limited computing power, will look at the proofs provided by Alice and Bob, ask them questions, and at the end of the day decide which player is correct (wins). The goal is for the referee to find an algorithm such that if the statement is true, there is a way for Alice to win with probability greater than 3/4, and if the statement is false, there is a way for Bob to win with probability greater than 3/4.  In the language of complexity theory, a promise problem     L  =   (   L  yes   ,   L  no   )       L    subscript  L  yes    subscript  L  no      L=(L_{\text{yes}},L_{\text{no}})   has a classical refereed game (classical RG) if there exists a referee described by polynomial time randomized computation , such that   1. for each    x  ∈   L  yes       x   subscript  L  yes     x\in L_{\text{yes}}   , there is a strategy for Alice to win with probability ≥ 3/4, and    2. for each    x  ∈   L  no       x   subscript  L  no     x\in L_{\text{no}}   , there is a strategy for Bob to win with probability ≥ 3/4.   It is known that RG = EXP . 7 8  QRG  Quantum interactive proof systems with competing provers is a generalization of the classical RG where the referee is now restricted to polynomial-time generated quantum circuits and may exchange quantum information with the players. 9 Therefore, QRG can be seen as the following problem. Alice, Bob and the referee is given some statement (it may involve a quantum state). Alice is trying to convince the referee the statement is true while Bob is trying to convince the referee the statement is false. The referee can ask the provers questions via quantum states, receive answers in quantum states, and analyse the received quantum states using a quantum computer. After communicating with Alice and Bob for   n   n   n   rounds, the referee decides whether the statement is true or false. If there is a way for the referee to make a correct decision with probability ≥ 3/4, the game is in QRG.  More formally, QRG denotes the complexity class for all promise problems having quantum refereed games defined as follows. Given a string   x   x   x   , a promise problem    L  =   (   L  yes   ,   L  no   )       L    subscript  L  yes    subscript  L  no      L=(L_{\text{yes}},L_{\text{no}})   is in QRG if there is a referee represented by a polynomial time generated quantum circuit such that   1. if    x  ∈   L  yes       x   subscript  L  yes     x\in L_{\text{yes}}   , there exists a strategy for Alice to win with probability ≥ 3/4, and  2. if    x  ∈   L  no       x   subscript  L  no     x\in L_{\text{no}}   , there exists a strategy for Bob to win with probability ≥ 3/4.   It turns out that QRG = EXP — allowing the referee to use quantum circuit and send or receive quantum information does not give the referee any extra power. EXP ⊆ QRG follows from the fact that EXP = RG ⊆ QRG. proved QRG ⊆ EXP by a formulation of QRG using semidefinite programs (SDP).  Semidefinite Program Formulation  For a quantum refereed game, at the end of all the interactions, the referee outputs one of the two possible outcomes    {  a  ,  b  }     a  b    \{a,b\}   to indicate whether Alice wins    (  a  )    a   (a)   or Bob wins    (  b  )    b   (b)   .  Setting      V   (  a  )    =  1   ,    V   (  b  )    =  0      formulae-sequence      V  a   1       V  b   0     V(a)=1,V(b)=0   results in a quantum refereed game whose value is the maximum winning probability for Alice.  Using the same notation as the zero sum quantum refereed game as above, the referee is represented by operators    {   R  a   ,   R  b   }      subscript  R  a    subscript  R  b     \{R_{a},R_{b}\}   , Alice may pick a strategy from    A  ∈    𝒮  n    (   𝒜   1  ⋯  n    ,   𝒞   1  ⋯  n    )        A     subscript  𝒮  n     subscript  𝒜    1  normal-⋯  n     subscript  𝒞    1  normal-⋯  n        A\in\mathcal{S}_{n}(\mathcal{A}_{1\cdots n},\mathcal{C}_{1\cdots n})   , and Bob from    B  ∈    𝒮  n    (   ℬ   1  ⋯  n    ,   𝒟   1  ⋯  n    )        B     subscript  𝒮  n     subscript  ℬ    1  normal-⋯  n     subscript  𝒟    1  normal-⋯  n        B\in\mathcal{S}_{n}(\mathcal{B}_{1\cdots n},\mathcal{D}_{1\cdots n})   . Define        Ω  a    (  A  )    =    Tr    𝒞   1  ⋯  n    ⊗   𝒜   1  ⋯  n       (    (   A  ⊗   I    𝒟   1  ⋯  n    ⊗   B   1  ⋯  n       )    R  a    )           subscript  normal-Ω  a   A     subscript  Tr   tensor-product   subscript  𝒞    1  normal-⋯  n     subscript  𝒜    1  normal-⋯  n         tensor-product  A   subscript  I   tensor-product   subscript  𝒟    1  normal-⋯  n     subscript  B    1  normal-⋯  n        subscript  R  a       \Omega_{a}(A)=\operatorname{Tr}_{\mathcal{C}_{1\cdots n}\otimes\mathcal{A}_{1%
 \cdots n}}((A\otimes I_{\mathcal{D}_{1\cdots n}\otimes B_{1\cdots n}})R_{a})   , and        Ω  b    (  A  )    =    Tr    𝒞   1  ⋯  n    ⊗   𝒜   1  ⋯  n       (    (   A  ⊗   I    𝒟   1  ⋯  n    ⊗   B   1  ⋯  n       )    R  b    )           subscript  normal-Ω  b   A     subscript  Tr   tensor-product   subscript  𝒞    1  normal-⋯  n     subscript  𝒜    1  normal-⋯  n         tensor-product  A   subscript  I   tensor-product   subscript  𝒟    1  normal-⋯  n     subscript  B    1  normal-⋯  n        subscript  R  b       \Omega_{b}(A)=\operatorname{Tr}_{\mathcal{C}_{1\cdots n}\otimes\mathcal{A}_{1%
 \cdots n}}((A\otimes I_{\mathcal{D}_{1\cdots n}\otimes B_{1\cdots n}})R_{b})   ,  where     Tr  𝒳    (  Z  )       subscript  Tr  𝒳   Z    \operatorname{Tr}_{\mathcal{X}}(Z)   is the partial trace operator.  The referee outputs   a   a   a   with probability     ⟨   A  ⊗  B   ,   R  a   ⟩   =   ⟨  B  ,    Ω  a    (  A  )    ⟩         tensor-product  A  B    subscript  R  a     B     subscript  normal-Ω  a   A      \langle A\otimes B,R_{a}\rangle=\langle B,\Omega_{a}(A)\rangle   , and   b   b   b   with probability     ⟨   A  ⊗  B   ,   R  b   ⟩   =   ⟨  B  ,    Ω  b    (  A  )    ⟩         tensor-product  A  B    subscript  R  b     B     subscript  normal-Ω  b   A      \langle A\otimes B,R_{b}\rangle=\langle B,\Omega_{b}(A)\rangle   .    {    Ω  a    (  A  )    ,    Ω  b    (  A  )    }        subscript  normal-Ω  a   A      subscript  normal-Ω  b   A     \{\Omega_{a}(A),\Omega_{b}(A)\}   can be considered as a co-strategy that merges Alice's strategy with the referee's.  For any given strategy   A   A   A   Alice chooses, the maximum winning probability for Bob is       max  B    ⟨  B  ,    Ω  b    (  A  )    ⟩       subscript   B   B     subscript  normal-Ω  b   A     \max_{B}\langle B,\Omega_{b}(A)\rangle   ,  which, by the property of the strategy representation , is equal to      min   {    p  ≥  0   :      Ω  b    (  A  )    ≤   p  Q    ,   Q  ∈   co-   𝒮  n    (   ℬ   1  ⋯  n    ,   𝒟   1  ⋯  n    )       }        normal-:    p  0    formulae-sequence       subscript  normal-Ω  b   A     p  Q      Q    co-   subscript  𝒮  n     subscript  ℬ    1  normal-⋯  n     subscript  𝒟    1  normal-⋯  n           \min\{p\geq 0:\Omega_{b}(A)\leq pQ,\ Q\in\text{co-}\mathcal{S}_{n}(\mathcal{B}%
 _{1\cdots n},\mathcal{D}_{1\cdots n})\}   .  Therefore, to maximize Alice's winning probability,   p   p   p   , the maximum winning probability for Bob, needs to be minimized over all possible strategies. The goal is then to compute        min    p      subject to        Ω  b    (  A  )    ≤   p  Q    ,          A  ∈    𝒮  n    (   𝒜   1  ⋯  n    ,   𝒞   1  ⋯  n    )     ,         Q  ∈   co-   𝒮  n    (   ℬ   1  ⋯  n    ,   𝒟   1  ⋯  n    )            p    subject to       subscript  normal-Ω  b   A     p  Q       missing-subexpression     A     subscript  𝒮  n     subscript  𝒜    1  normal-⋯  n     subscript  𝒞    1  normal-⋯  n          missing-subexpression     Q    co-   subscript  𝒮  n     subscript  ℬ    1  normal-⋯  n     subscript  𝒟    1  normal-⋯  n          \begin{array}[]{rl}\min&p\\
 \text{subject to}&\Omega_{b}(A)\leq pQ,\\
 &A\in\mathcal{S}_{n}(\mathcal{A}_{1\cdots n},\mathcal{C}_{1\cdots n}),\\
 &Q\in\text{co-}\mathcal{S}_{n}(\mathcal{B}_{1\cdots n},\mathcal{D}_{1\cdots n}%
 )\end{array}   .  This minimization problem can be expressed by the following SDP problem: 10        min     Tr   (   P  1   )         subject to        Ω  b    (   A  n   )    ≤  Q   ,            Tr   𝒞  k     (   A  k   )    =    A   k  -  1    ⊗   I   𝒜  k          (   2  ≤  k  ≤  n   )   ,            Tr   𝒞  1     (   A  1   )    =   I   𝒜  1     ,          Q   ;  k   =   P  k   ⊗   I   𝒟  k         (   1  ≤  k  ≤  n   )   ,           Tr   ℬ  k     (   P  k   )    =   Q   k  -  1         (   2  ≤  k  ≤  n   )   ,         A   ;  k   ∈  Pos   (   𝒞   1  ⋯  k    ⊗   A   1  ⋯  k    )        (   1  ≤  k  ≤  n   )   ,         Q   ;  k   ∈  Pos   (   𝒟   1  ⋯  k    ⊗   B   1  ⋯  k    )        (   1  ≤  k  ≤  n   )   ,         P   ;  k   ∈  Pos   (   𝒟   1  ⋯  k    ⊗   B   1  ⋯  k    )        (   1  ≤  k  ≤  n   )   ,           Tr   subscript  P  1     missing-subexpression     subject to       subscript  normal-Ω  b    subscript  A  n    Q    missing-subexpression      missing-subexpression       subscript  Tr   subscript  𝒞  k     subscript  A  k     tensor-product   subscript  A    k  1     subscript  I   subscript  𝒜  k          2  k       n       missing-subexpression       subscript  Tr   subscript  𝒞  1     subscript  A  1     subscript  I   subscript  𝒜  1      missing-subexpression      missing-subexpression    fragments  Q   subscript  normal-;  k     subscript  P  k   tensor-product   subscript  I   subscript  𝒟  k         1  k       n       missing-subexpression       subscript  Tr   subscript  ℬ  k     subscript  P  k     subscript  Q    k  1         2  k       n       missing-subexpression    fragments  A   subscript  normal-;  k    Pos   fragments  normal-(   subscript  𝒞    1  normal-⋯  k    tensor-product   subscript  A    1  normal-⋯  k    normal-)        1  k       n       missing-subexpression    fragments  Q   subscript  normal-;  k    Pos   fragments  normal-(   subscript  𝒟    1  normal-⋯  k    tensor-product   subscript  B    1  normal-⋯  k    normal-)        1  k       n       missing-subexpression    fragments  P   subscript  normal-;  k    Pos   fragments  normal-(   subscript  𝒟    1  normal-⋯  k    tensor-product   subscript  B    1  normal-⋯  k    normal-)        1  k       n       \begin{array}[]{rll}\min&\operatorname{Tr}(P_{1})\\
 \text{subject to}&\Omega_{b}(A_{n})\leq Q,\\
 &\operatorname{Tr}_{\mathcal{C}_{k}}(A_{k})=A_{k-1}\otimes I_{\mathcal{A}_{k}}%
 &(2\leq k\leq n),\\
 &\operatorname{Tr}_{\mathcal{C}_{1}}(A_{1})=I_{\mathcal{A}_{1}},\\
 &Q_{k}=P_{k}\otimes I_{\mathcal{D}_{k}}&(1\leq k\leq n),\\
 &\operatorname{Tr}_{\mathcal{B}_{k}}(P_{k})=Q_{k-1}&(2\leq k\leq n),\\
 &A_{k}\in\operatorname{Pos}(\mathcal{C}_{1\cdots k}\otimes A_{1\cdots k})&(1%
 \leq k\leq n),\\
 &Q_{k}\in\operatorname{Pos}(\mathcal{D}_{1\cdots k}\otimes B_{1\cdots k})&(1%
 \leq k\leq n),\\
 &P_{k}\in\operatorname{Pos}(\mathcal{D}_{1\cdots k}\otimes B_{1\cdots k})&(1%
 \leq k\leq n),\\
 \end{array}   .  The dimension of the input and output space of this SPD is exponential (from the tensor product states) in   n   n   n   , and the SDP has a size polynomial in the dimension of its input and output space. Since there are efficient algorithms that can solve SDP in polynomial-time, 11 12 13 it follows that QRG ⊆ EXP.  See also   Min-max theorem  Semidefinite programming  QIP (complexity)   References  "  Category:Game theory  Category:Quantum information science     ↩  ↩  ↩   ↩  ↩  ↩  ↩    ↩  ↩  ↩     