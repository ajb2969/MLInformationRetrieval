


Secant method




Secant method

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



(Figure)
The first two iterations of the secant method. The red curve shows the function f and the blue lines are the secants. For this particular case, the secant method will not converge.

In numerical analysis, the secant method is a root-finding algorithm that uses a succession of roots of secant lines to better approximate a root of a function f. The secant method can be thought of as a finite difference approximation of Newton's method. However, the method was developed independently of Newton's method, and predated the latter by over 3,000 years.1
The method
The secant method is defined by the recurrence relation



As can be seen from the recurrence relation, the secant method requires two initial values, x0 and x1, which should ideally be chosen to lie close to the root.
Derivation of the method
Starting with initial values  and , we construct a line through the points  and , as demonstrated in the picture on the right. In point-slope form, this line has the equation



We find the root of this line – the value of 
 
 
 
  such that 
 
 
 
  – by solving the following equation for 
 
 
 
 :



The solution is



We then use this new value of 
 
 
 
  as  and repeat the process using  and  instead of  and . We continue this process, solving for , , etc., until we reach a sufficiently high level of precision (a sufficiently small difference between  and ).







…
 




Convergence
The iterates 
 
 
 
  of the secant method converge to a root of 
 
 
 
 , if the initial values 
 
 
 
  and 
 
 
 
  are sufficiently close to the root. The order of convergence is α, where


 
  is the golden ratio. In particular, the convergence is superlinear, but not quite quadratic.
This result only holds under some technical conditions, namely that 
 
 
 
  be twice continuously differentiable and the root in question be simple (i.e., with multiplicity 1).
If the initial values are not close enough to the root, then there is no guarantee that the secant method converges. There is no general definition of "close enough", but the criterion has to do with how "wiggly" the function is on the interval 
 
 
 
 . For example, if 
 
 
 
  is differentiable on that interval and there is a point where 
 
 
 
  on the interval, then the algorithm may not converge.
Comparison with other root-finding methods
The secant method does not require that the root remain bracketed like the bisection method does, and hence it does not always converge. The false position method (or regula falsi) uses the same formula as the secant method. However, it does not apply the formula on 
 
 
 
  and 
 
 
 
 , like the secant method, but on 
 
 
 
  and on the last iterate 
 
 
 
  such that 
 
 
 
  and 
 
 
 
  have a different sign. This means that the false position method always converges.
The recurrence formula of the secant method can be derived from the formula for Newton's method


 
  by using the finite difference approximation


 
 . The secant method can be interpreted as a method in which the derivative is replaced by an approximation and is thus a Quasi-Newton method. If we compare Newton's method with the secant method, we see that Newton's method converges faster (order 2 against α ≈ 1.6). However, Newton's method requires the evaluation of both 
 
 
 
  and its derivative 
 
 
 
  at every step, while the secant method only requires the evaluation of 
 
 
 
 . Therefore, the secant method may occasionally be faster in practice. For instance, if we assume that evaluating 
 
 
 
  takes as much time as evaluating its derivative and we neglect all other costs, we can do two steps of the secant method (decreasing the logarithm of the error by a factor α² ≈ 2.6) for the same cost as one step of Newton's method (decreasing the logarithm of the error by a factor 2), so the secant method is faster. If however we consider parallel processing for the evaluation of the derivative, Newton's method proves its worth, being faster in time, though still spending more steps.
Generalizations
Broyden's method is a generalization of the secant method to more than one dimension.
The following graph shows the function f in red and the last secant line in bold blue. In the graph, the x-intercept of the secant line seems to be a good approximation of the root of f.
(Figure)
Secant method example code result.svg

A computational example
The Secant method is applied to find a root of the function  x2 − 612}}. Here is an implementation in the Matlab language. (From calculation, we expect that the iteration converges at 
 
 
 
 )
f=@(x) x^2 - 612;
 x(1)=10;
 x(2)=30;
 for i=3:7
     x(i) = x(i-1) - (f(x(i-1)))*((x(i-1) - x(i-2))/(f(x(i-1)) - f(x(i-2))));
 end
 root=x(7)
Notes
See also

False position method

References


.


External links

Animations for the secant method
Secant Method Notes, PPT, Mathcad, Maple, Mathematica, Matlab at Holistic Numerical Methods Institute

Module for Secant Method by John H. Mathews

"
Category:Root-finding algorithms







