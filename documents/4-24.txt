   Secant method      Secant method  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     (Figure)  The first two iterations of the secant method. The red curve shows the function f and the blue lines are the secants. For this particular case, the secant method will not converge.   In numerical analysis , the secant method is a root-finding algorithm that uses a succession of roots of secant lines to better approximate a root of a function  f . The secant method can be thought of as a finite difference approximation of Newton's method . However, the method was developed independently of Newton's method, and predated the latter by over 3,000 years. 1  The method  The secant method is defined by the recurrence relation       x  n   =    x   n  -  1    -   f   (   x   n  -  1    )      x   n  -  1    -   x   n  -  2       f   (   x   n  -  1    )    -   f   (   x   n  -  2    )        =      x   n  -  2    f   (   x   n  -  1    )    -    x   n  -  1    f   (   x   n  -  2    )       f   (   x   n  -  1    )    -   f   (   x   n  -  2    )             subscript  x  n      subscript  x    n  1      f   subscript  x    n  1         subscript  x    n  1     subscript  x    n  2         f   subscript  x    n  1       f   subscript  x    n  2                     subscript  x    n  2    f   subscript  x    n  1        subscript  x    n  1    f   subscript  x    n  2          f   subscript  x    n  1       f   subscript  x    n  2          x_{n}=x_{n-1}-f(x_{n-1})\frac{x_{n-1}-x_{n-2}}{f(x_{n-1})-f(x_{n-2})}=\frac{x_%
 {n-2}f(x_{n-1})-x_{n-1}f(x_{n-2})}{f(x_{n-1})-f(x_{n-2})}     As can be seen from the recurrence relation, the secant method requires two initial values, x 0 and x 1 , which should ideally be chosen to lie close to the root.  Derivation of the method  Starting with initial values and , we construct a line through the points and , as demonstrated in the picture on the right. In point-slope form, this line has the equation      y  =       f   (   x  1   )    -   f   (   x  0   )       x  1   -   x  0      (   x  -   x  1    )    +   f   (   x  1   )         y            f   subscript  x  1      f   subscript  x  0        subscript  x  1    subscript  x  0       x   subscript  x  1       f   subscript  x  1       y=\frac{f(x_{1})-f(x_{0})}{x_{1}-x_{0}}(x-x_{1})+f(x_{1})     We find the root of this line – the value of   x   x   x   such that    y  =  0      y  0    y=0   – by solving the following equation for   x   x   x   :      0  =       f   (   x  1   )    -   f   (   x  0   )       x  1   -   x  0      (   x  -   x  1    )    +   f   (   x  1   )         0            f   subscript  x  1      f   subscript  x  0        subscript  x  1    subscript  x  0       x   subscript  x  1       f   subscript  x  1       0=\frac{f(x_{1})-f(x_{0})}{x_{1}-x_{0}}(x-x_{1})+f(x_{1})     The solution is      x  =    x  1   -   f   (   x  1   )      x  1   -   x  0      f   (   x  1   )    -   f   (   x  0   )            x     subscript  x  1     f   subscript  x  1        subscript  x  1    subscript  x  0        f   subscript  x  1      f   subscript  x  0          x=x_{1}-f(x_{1})\frac{x_{1}-x_{0}}{f(x_{1})-f(x_{0})}     We then use this new value of   x   x   x   as and repeat the process using and instead of and . We continue this process, solving for , , etc., until we reach a sufficiently high level of precision (a sufficiently small difference between and ).       x  2   =    x  1   -   f   (   x  1   )      x  1   -   x  0      f   (   x  1   )    -   f   (   x  0   )             subscript  x  2      subscript  x  1     f   subscript  x  1        subscript  x  1    subscript  x  0        f   subscript  x  1      f   subscript  x  0          x_{2}=x_{1}-f(x_{1})\frac{x_{1}-x_{0}}{f(x_{1})-f(x_{0})}          x  3   =    x  2   -   f   (   x  2   )      x  2   -   x  1      f   (   x  2   )    -   f   (   x  1   )             subscript  x  3      subscript  x  2     f   subscript  x  2        subscript  x  2    subscript  x  1        f   subscript  x  2      f   subscript  x  1          x_{3}=x_{2}-f(x_{2})\frac{x_{2}-x_{1}}{f(x_{2})-f(x_{1})}      …        x  n   =    x   n  -  1    -   f   (   x   n  -  1    )      x   n  -  1    -   x   n  -  2       f   (   x   n  -  1    )    -   f   (   x   n  -  2    )             subscript  x  n      subscript  x    n  1      f   subscript  x    n  1         subscript  x    n  1     subscript  x    n  2         f   subscript  x    n  1       f   subscript  x    n  2           x_{n}=x_{n-1}-f(x_{n-1})\frac{x_{n-1}-x_{n-2}}{f(x_{n-1})-f(x_{n-2})}     Convergence  The iterates    x  n     subscript  x  n    x_{n}   of the secant method converge to a root of   f   f   f   , if the initial values    x  0     subscript  x  0    x_{0}   and    x  1     subscript  x  1    x_{1}   are sufficiently close to the root. The order of convergence is α, where      α  =    1  +   5    2   ≈  1.618        α      1    5    2        1.618     \alpha=\frac{1+\sqrt{5}}{2}\approx 1.618   is the golden ratio . In particular, the convergence is superlinear, but not quite quadratic .  This result only holds under some technical conditions, namely that   f   f   f   be twice continuously differentiable and the root in question be simple (i.e., with multiplicity 1).  If the initial values are not close enough to the root, then there is no guarantee that the secant method converges. There is no general definition of "close enough", but the criterion has to do with how "wiggly" the function is on the interval    [   x  0   ,    x  1    ]      subscript  x  0    subscript  x  1     [~{}x_{0},~{}x_{1}~{}]   . For example, if   f   f   f   is differentiable on that interval and there is a point where     f  ′   =  0       superscript  f  normal-′   0    f^{\prime}=0   on the interval, then the algorithm may not converge.  Comparison with other root-finding methods  The secant method does not require that the root remain bracketed like the bisection method does, and hence it does not always converge. The false position method (or regula falsi ) uses the same formula as the secant method. However, it does not apply the formula on    x   n  -  1      subscript  x    n  1     x_{n-1}   and    x  n     subscript  x  n    x_{n}   , like the secant method, but on    x  n     subscript  x  n    x_{n}   and on the last iterate    x  k     subscript  x  k    x_{k}   such that    f   (   x  k   )       f   subscript  x  k     f(x_{k})   and    f   (   x  n   )       f   subscript  x  n     f(x_{n})   have a different sign. This means that the false position method always converges.  The recurrence formula of the secant method can be derived from the formula for Newton's method       x  n   =    x   n  -  1    -    f   (   x   n  -  1    )      f  ′    (   x   n  -  1    )           subscript  x  n      subscript  x    n  1        f   subscript  x    n  1        superscript  f  normal-′    subscript  x    n  1         x_{n}=x_{n-1}-\frac{f(x_{n-1})}{f^{\prime}(x_{n-1})}   by using the finite difference approximation        f  ′    (   x   n  -  1    )    ≈     f   (   x   n  -  1    )    -   f   (   x   n  -  2    )       x   n  -  1    -   x   n  -  2             superscript  f  normal-′    subscript  x    n  1           f   subscript  x    n  1       f   subscript  x    n  2         subscript  x    n  1     subscript  x    n  2        f^{\prime}(x_{n-1})\approx\frac{f(x_{n-1})-f(x_{n-2})}{x_{n-1}-x_{n-2}}   . The secant method can be interpreted as a method in which the derivative is replaced by an approximation and is thus a Quasi-Newton method . If we compare Newton's method with the secant method, we see that Newton's method converges faster (order 2 against α ≈ 1.6). However, Newton's method requires the evaluation of both   f   f   f   and its derivative    f  ′     superscript  f  normal-′    f^{\prime}   at every step, while the secant method only requires the evaluation of   f   f   f   . Therefore, the secant method may occasionally be faster in practice. For instance, if we assume that evaluating   f   f   f   takes as much time as evaluating its derivative and we neglect all other costs, we can do two steps of the secant method (decreasing the logarithm of the error by a factor α² ≈ 2.6) for the same cost as one step of Newton's method (decreasing the logarithm of the error by a factor 2), so the secant method is faster. If however we consider parallel processing for the evaluation of the derivative, Newton's method proves its worth, being faster in time, though still spending more steps.  Generalizations  Broyden's method is a generalization of the secant method to more than one dimension.  The following graph shows the function f in red and the last secant line in bold blue. In the graph, the x -intercept of the secant line seems to be a good approximation of the root of f .  (Figure)  Secant method example code result.svg   A computational example  The Secant method is applied to find a root of the function  x 2 − 612}} . Here is an implementation in the Matlab language. (From calculation, we expect that the iteration converges at    x  =  24.7386      x  24.7386    x=24.7386   )  f=@(x) x^ 2 - 612 ;
 x( 1 )= 10 ;
 x( 2 )= 30 ;
 for i= 3 : 7 x(i) = x(i- 1 ) - (f(x(i- 1 )))*((x(i- 1 ) - x(i- 2 ))/(f(x(i- 1 )) - f(x(i- 2 ))));
 end
 root=x( 7 )  Notes  See also   False position method   References    .    External links   Animations for the secant method  Secant Method Notes, PPT, Mathcad, Maple, Mathematica, Matlab at Holistic Numerical Methods Institute   Module for Secant Method by John H. Mathews   "  Category:Root-finding algorithms     ↩    