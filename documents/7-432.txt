


Algebra of Communicating Processes




Algebra of Communicating Processes
The '''Algebra of Communicating Processes''' (ACP) is an [[Universal algebra|algebraic]] approach to reasoning about [[concurrent systems]]. It is a member of the family of mathematical theories of concurrency known as process algebras or [[process calculi]]. ACP was initially developed by [[Ja
 
 n Bergstra]] and Jan Willem Klop in 1982,1 as part of an effort to investigate the solutions of unguarded recursive equations. More so than the other seminal process calculi (CCS and CSP), the development of ACP focused on the algebra of processes, and sought to create an abstract, generalized axiomatic system for processes,2 and in fact the term process algebra was coined during the research that led to ACP.
Informal description
ACP is fundamentally an algebra, in the sense of universal algebra. This algebra provides a way to describe systems in terms of algebraic process expressions that define compositions of other processes, or of certain primitive elements.
Primitives
ACP uses instantaneous, atomic actions (
 
 
 
 ) as its primitives. Some actions have special meaning, such as the action 
 
 
 
 , which represents deadlock or stagnation, and the action 
 
 
 
 , which represents a silent action (abstracted actions that have no specific identity).
Algebraic operators
Actions can be combined to form processes using a variety of operators. These operators can be roughly categorized as providing a basic process algebra, concurrency, and communication.

Choice and sequencing — the most fundamental of algebraic operators are the alternative operator (
 
 
 
 ), which provides a choice between actions, and the sequencing operator (
 
 
 
 ), which specifies an ordering on actions. So, for example, the process





first chooses to perform either 
 
 
 
  or 
 
 
 
 , and then performs action 
 
 
 
 . How the choice between 
 
 
 
  and 
 
 
 
  is made does not matter and is left unspecified. Note that alternative composition is commutative but sequential composition is not (because time flows forward).
 


Concurrency — to allow the description of concurrency, ACP provides the merge and left-merge operators. The merge operator, 
 
 
 
 , represents the parallel composition of two processes, the individual actions of which are interleaved. The left-merge operator, 
 
 
 
 , is an auxiliary operator with similar semantics to the merge, but a commitment to always choose its initial step from the left-hand process. As an example, the process





may perform the actions 
 
 
 
  in any of the sequences 
 
 
 
 . On the other hand, the process
 





may only perform the sequences 
 
 
 
  since the left-merge operators ensures that the action 
 
 
 
  occurs first.
 


Communication — interaction (or communication) between processes is represented using the binary communications operator, 
 
 
 
 . For example, the actions 
 
 
 
  and 
 
 
 
  might be interpreted as the reading and writing of a data item 
 
 
 
 , respectively. Then the process





will communicate the value 
 
 
 
  from the right component process to the left component process (i.e. the identifier 
 
 
 
  is bound to the value 
 
 
 
 , and free instances of 
 
 
 
  in the process 
 
 
 
  take on that value), and then behave as the merge of 
 
 
 
  and 
 
 
 
 .
 


Abstraction — the abstraction operator, 
 
 
 
 , provides a way to "hide" certain actions, and treat them as events that are internal to the systems being modelled. Abstracted actions are converted to the silent step action 
 
 
 
 . In some cases, these silent steps can also be removed from the process expression as part of the abstraction process. For example,





which, in this case, can be reduced to
 





since the event 
 
 
 
  is no longer observable and has no observable effects.
 

Formal definition
ACP fundamentally adopts an axiomatic, algebraic approach to the formal definition of its various operators. The axioms presented below comprise the full axiomatic system for ACP

 (ACP with abstraction).
Basic process algebra
Using the alternative and sequential composition operators, ACP defines a basic process algebra which satisfies the axioms3



Deadlock
Beyond the basic algebra, two additional axioms define the relationships between the alternative and sequencing operators, and the deadlock action, 
 
 




Concurrency and interaction
The axioms associated with the merge, left-merge, and communication operators are4



When the communications operator is applied to actions alone, rather than processes, it is interpreted as a binary function from actions to actions, 
 
 
 
 . The definition of this function defines the possible interactions between processes — those pairs of actions that do not constitute interactions are mapped to the deadlock action, 
 
 
 
 , while permitted interaction pairs are mapped to corresponding single actions representing the occurrence of an interaction. For example, the communications function might specify that


 
  which indicates that a successful interaction 
 
 
 
  will be reduced to the action 
 
 
 
 . ACP also includes an encapsulation operator, 
 
 
 
  for some 
 
 
 
 , which is used to convert unsuccessful communication attempts (i.e. elements of 
 
 
 
  that have not been reduced via the communication function) to the deadlock action. The axioms associated with the communications function and encapsulation operator are5



Abstraction
The axioms associated with the abstraction operator are6



Note that the action a in the above list may take the value δ (but of course, δ cannot belong to the abstraction set I).
Related formalisms
ACP has served as the basis or inspiration for several other formalisms that can be used to describe and analyze concurrent systems, including:

PSF


μCRL


mCRL2


HyPA — a process algebra for hybrid systems




J.C.M. Baeten, A brief history of process algebra, Rapport CSR 04-02, Vakgroep Informatica, Technische Universiteit Eindhoven, 2004↩
Bas Luttik, What is algebraic in process theory, Algebraic Process Calculi: The First Twenty Five Years and Beyond, Bertinoro, Italy, August 1, 2005↩
J.A. Bergstra and J.W. Klop, ACPτ: A Universal Axiom System for Process Specification, CWI Quarterly 15, pp. 3-23, 1987↩







