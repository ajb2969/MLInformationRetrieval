   General linear methods      General linear methods   General linear methods ( GLM s) are a large class of numerical methods used to obtain numerical solutions to differential equations . This large class of methods in numerical analysis encompass multistage Runge–Kutta methods that use intermediate collocation points , as well as linear multistep methods that save a finite time history of the solution. John C. Butcher originally coined this term for these methods, and has written a series of review papers 1  2  3 a book chapter 4 and a textbook 5 on the topic. His collaborator, Zdzislaw Jackiewicz also has an extensive textbook 6 on the topic. The original class of methods were originally proposed by Butcher(1965), Gear (1965) and Gragg and Stetter (1964).  Some definitions  Numerical methods for first-order ordinary differential equations approximate solutions to initial value problems of the form         y  ′   =   f   (  t  ,  y  )     ,    y   (   t  0   )    =   y  0     .     formulae-sequence     superscript  y  normal-′     f   t  y         y   subscript  t  0     subscript  y  0      y^{\prime}=f(t,y),\quad y(t_{0})=y_{0}.     The result is approximations for the value of    y   (  t  )       y  t    y(t)   at discrete times    t  i     subscript  t  i    t_{i}   :         y  i   ≈    y   (   t  i   )    where      t  i   =    t  0   +   i  h      ,     formulae-sequence     subscript  y  i      y   subscript  t  i    where       subscript  t  i      subscript  t  0     i  h       y_{i}\approx y(t_{i})\quad\text{where}\quad t_{i}=t_{0}+ih,     where h is the time step (sometimes referred to as    Δ  t      normal-Δ  t    \Delta t   ).  A description of the method  We follow Butcher (2006), pps 189–190 for our description, although we note that this method can be found elsewhere.  General linear methods make use of two integers,   r   r   r   , the number of time points in history and   s   s   s   , the number of collocation points. In the case of    r  =  1      r  1    r=1   , these methods reduce to classical Runge–Kutta methods , and in the case of    s  =  1      s  1    s=1   , these methods reduce to linear multistep methods .  Stage values    Y  i     subscript  Y  i    Y_{i}   and stage derivatives,       F  i   ,  i   =  1   ,   2  ,   …  s       formulae-sequence      subscript  F  i   i   1    2    normal-…  s      F_{i},i=1,2,\dots s   are computed from approximations,       y  i   [   n  -  1   ]    ,  i   =  1   ,   …  ,  r      formulae-sequence      superscript   subscript  y  i    delimited-[]    n  1     i   1    normal-…  r     y_{i}^{[n-1]},i=1,\dots,r   , at time step   n   n   n   :         y   [   n  -  1   ]    =   [      y  1   [   n  -  1   ]         y  2   [   n  -  1   ]        ⋮       y  r   [   n  -  1   ]       ]    ,     y   [  n  ]    =   [      y  1   [  n  ]         y  2   [  n  ]        ⋮       y  r   [  n  ]       ]    ,    Y  =   [      Y  1        Y  2       ⋮       Y  s      ]    ,   F  =   [      F  1        F  2       ⋮       F  s      ]       .     formulae-sequence     superscript  y   delimited-[]    n  1      delimited-[]     superscript   subscript  y  1    delimited-[]    n  1        superscript   subscript  y  2    delimited-[]    n  1       normal-⋮     superscript   subscript  y  r    delimited-[]    n  1          formulae-sequence     superscript  y   delimited-[]  n     delimited-[]     superscript   subscript  y  1    delimited-[]  n       superscript   subscript  y  2    delimited-[]  n      normal-⋮     superscript   subscript  y  r    delimited-[]  n         formulae-sequence    Y   delimited-[]     subscript  Y  1      subscript  Y  2     normal-⋮     subscript  Y  s         F   delimited-[]     subscript  F  1      subscript  F  2     normal-⋮     subscript  F  s           y^{[n-1]}=\left[\begin{matrix}y_{1}^{[n-1]}\\
 y_{2}^{[n-1]}\\
 \vdots\\
 y_{r}^{[n-1]}\\
 \end{matrix}\right],\quad y^{[n]}=\left[\begin{matrix}y_{1}^{[n]}\\
 y_{2}^{[n]}\\
 \vdots\\
 y_{r}^{[n]}\\
 \end{matrix}\right],\quad Y=\left[\begin{matrix}Y_{1}\\
 Y_{2}\\
 \vdots\\
 Y_{s}\end{matrix}\right],\quad F=\left[\begin{matrix}F_{1}\\
 F_{2}\\
 \vdots\\
 F_{s}\end{matrix}\right].     The stage values are defined by two matrices,    A  =   [   a   i  j    ]       A   delimited-[]   subscript  a    i  j       A=[a_{ij}]   and    U  =   [   u   i  j    ]       U   delimited-[]   subscript  u    i  j       U=[u_{ij}]   :         Y  i   =     ∑   j  =  1   s     a   i  j    h   F  j     +    ∑   j  =  1   r     u   i  j     y  j   [   n  -  1   ]        ,   i  =   1  ,  2  ,  …  ,  s     ,     formulae-sequence     subscript  Y  i       superscript   subscript     j  1    s      subscript  a    i  j    h   subscript  F  j       superscript   subscript     j  1    r      subscript  u    i  j     superscript   subscript  y  j    delimited-[]    n  1           i   1  2  normal-…  s      Y_{i}=\sum_{j=1}^{s}a_{ij}hF_{j}+\sum_{j=1}^{r}u_{ij}y_{j}^{[n-1]},\qquad i=1,%
 2,\dots,s,     and the update to time    t  n     superscript  t  n    t^{n}   is defined by two matrices,    B  =   [   b   i  j    ]       B   delimited-[]   subscript  b    i  j       B=[b_{ij}]   and    V  =   [   v   i  j    ]       V   delimited-[]   subscript  v    i  j       V=[v_{ij}]   :         y  i   [  n  ]    =     ∑   j  =  1   s     b   i  j    h   F  j     +    ∑   j  =  1   r     v   i  j     y  j   [   n  -  1   ]        ,   i  =   1  ,  2  ,  …  ,  r     .     formulae-sequence     superscript   subscript  y  i    delimited-[]  n        superscript   subscript     j  1    s      subscript  b    i  j    h   subscript  F  j       superscript   subscript     j  1    r      subscript  v    i  j     superscript   subscript  y  j    delimited-[]    n  1           i   1  2  normal-…  r      y_{i}^{[n]}=\sum_{j=1}^{s}b_{ij}hF_{j}+\sum_{j=1}^{r}v_{ij}y_{j}^{[n-1]},%
 \qquad i=1,2,\dots,r.     Given the four matrices,    A  ,  U  ,   B  and  V      A  U    B  and  V     A,U,B\text{and}V   , one can compactly write the analogue of a Butcher tableau as,        [     Y       y   [  n  ]       ]   =    [      A  ⊗  I      U  ⊗  I        B  ⊗  I      V  ⊗  I      ]    [     F       y   [   n  -  1   ]       ]     ,       delimited-[]    Y     superscript  y   delimited-[]  n          delimited-[]     tensor-product  A  I    tensor-product  U  I      tensor-product  B  I    tensor-product  V  I       delimited-[]    F     superscript  y   delimited-[]    n  1           \left[\begin{matrix}Y\\
 y^{[n]}\end{matrix}\right]=\left[\begin{matrix}A\otimes I&U\otimes I\\
 B\otimes I&V\otimes I\end{matrix}\right]\left[\begin{matrix}F\\
 y^{[n-1]}\end{matrix}\right],   where   ⊗   tensor-product   \otimes   stands for the tensor product , and    F  =   f   (  Y  )        F    f  Y     F=f(Y)   .  Examples  We present an example described in (Butcher, 1996). 7 This method consists of a single 'predicted' step, and 'corrected' step, that uses extra information about the time history, as well as a single intermediate stage value.  An intermediate stage value is defined as something that looks like it came from a linear multistep method :        y   n  -   1  /  2    *   =    y   n  -  2    +   h   (     9  8   f   (   y   n  -  1    )    +    3  8   f   (   y   n  -  2    )     )      .       subscript   superscript  y      n    1  2        subscript  y    n  2      h        9  8   f   subscript  y    n  1         3  8   f   subscript  y    n  2          y^{*}_{n-1/2}=y_{n-2}+h\left(\frac{9}{8}f(y_{n-1})+\frac{3}{8}f(y_{n-2})\right).     An initial 'predictor'    y  n  *     subscript   superscript  y    n    y^{*}_{n}   uses the stage value    y   n  -   1  /  2    *     subscript   superscript  y      n    1  2      y^{*}_{n-1/2}   together with two pieces of time history:        y  n  *   =      28  5    y   n  -  1     -    23  5    y   n  -  2      +   h   (     32  15   f   (   y   n  -   1  /  2    *   )    -   4  f   (   y   n  -  1    )    -    26  15   f   (   y   n  -  2    )     )      ,       subscript   superscript  y    n           28  5    subscript  y    n  1         23  5    subscript  y    n  2        h        32  15   f   subscript   superscript  y      n    1  2        4  f   subscript  y    n  1         26  15   f   subscript  y    n  2          y^{*}_{n}=\frac{28}{5}y_{n-1}-\frac{23}{5}y_{n-2}+h\left(\frac{32}{15}f(y^{*}_%
 {n-1/2})-4f(y_{n-1})-\frac{26}{15}f(y_{n-2})\right),     and the final update is given by:        y  n   =      32  31    y   n  -  1     -    1  31    y   n  -  2      +   h   (      5  31   f   (   y  *   )    +    64  93   f   (   y   n  -   1  /  2    *   )    +    4  31   f   (   y   n  -  1    )     -    1  93   f   (   y   n  -  2    )     )      .       subscript  y  n           32  31    subscript  y    n  1         1  31    subscript  y    n  2        h          5  31   f   superscript  y         64  93   f   subscript   superscript  y      n    1  2          4  31   f   subscript  y    n  1          1  93   f   subscript  y    n  2          y_{n}=\frac{32}{31}y_{n-1}-\frac{1}{31}y_{n-2}+h\left(\frac{5}{31}f(y^{*})+%
 \frac{64}{93}f(y^{*}_{n-1/2})+\frac{4}{31}f(y_{n-1})-\frac{1}{93}f(y_{n-2})%
 \right).     The concise table representation for this method is given by:       [     0    0    0    0    1     9  8      3  8        32  15     0    0     28  5      -   23  5       -  4      -   26  15         64  93      5  31     0     32  31      -   1  31       4  31      -   1  93         64  93      5  31     0     32  31      -   1  31       4  31      -   1  93        0    0    0    1    0    0    0      0    0    1    0    0    0    0      0    0    0    0    0    1    0     ]   .     delimited-[]    0  0  0  0  1    9  8     3  8       32  15   0  0    28  5       23  5      4       26  15        64  93     5  31   0    32  31       1  31      4  31       1  93        64  93     5  31   0    32  31       1  31      4  31       1  93      0  0  0  1  0  0  0    0  0  1  0  0  0  0    0  0  0  0  0  1  0      \left[\begin{array}[]{ccc|cccc}0&0&0&0&1&\frac{9}{8}&\frac{3}{8}\\
 \frac{32}{15}&0&0&\frac{28}{5}&-\frac{23}{5}&-4&-\frac{26}{15}\\
 \frac{64}{93}&\frac{5}{31}&0&\frac{32}{31}&-\frac{1}{31}&\frac{4}{31}&-\frac{1%
 }{93}\\
 \hline\frac{64}{93}&\frac{5}{31}&0&\frac{32}{31}&-\frac{1}{31}&\frac{4}{31}&-%
 \frac{1}{93}\\
 0&0&0&1&0&0&0\\
 0&0&1&0&0&0&0\\
 0&0&0&0&0&1&0\\
 \end{array}\right].     See also   Runge–Kutta methods  Linear multistep methods  Numerical methods for ordinary differential equations   Notes    References       .   External links   General Linear Methods   "  Category:Numerical differential equations     ↩  ↩  ↩  ↩  ↩  ↩  ↩     