   Iacono's working set structure      Iacono's working set structure   {| class="infobox" style="width: 20em" ! Iacono's working set data structure |- ! Invented | 2001 |- ! Invented by | John Iacono |- ! Asymptotic complexity in big O notation |- ! Space | O ( n ) |- ! Search | O (log w(x) ) |- ! Insert | O (log n ) |- ! Delete | O (log n ) |}  In computer science, Iacono's working set structure 1 is a comparison based dictionary . It supports insertion, deletion and access operation to maintain a dynamic set of   n   n   n   elements. The working set of an item   x   x   x   is the set of elements that have been accessed in the structure since the last time that   x   x   x   was accessed (or inserted if it was never accessed). Inserting and deleting in the working set structure takes    O   (   log  n   )       O    n     O(\log n)   time while accessing an element   x   x   x   takes    O   (    log  w    (  x  )    )       O      w   x     O(\log w(x))   . Here,    w   (  x  )       w  x    w(x)   represents the size of the working set of   x   x   x   .  Structure  To store a dynamic set of   n   n   n   elements, this structure consists of a series of Red–black trees , or other Self-balancing binary search trees      T  1   ,   T  2   ,  …  ,   T  k       subscript  T  1    subscript  T  2   normal-…   subscript  T  k     T_{1},T_{2},\ldots,T_{k}   , and a series of deques (Double-ended queues)     Q  1   ,   Q  2   ,   …   Q  k        subscript  Q  1    subscript  Q  2     normal-…   subscript  Q  k      Q_{1},Q_{2},\ldots Q_{k}   , where    k  =   ⌈   log   log  n    ⌉       k        n       k=\lceil\log\log n\rceil   . For every    1  ≤  i  ≤  k        1  i       k     1\leq i\leq k   , tree    T  i     subscript  T  i    T_{i}   and deque    Q  i     subscript  Q  i    Q_{i}   share the same contents and pointers are maintained between their corresponding elements. For every    i  <  k      i  k    i   , the size of    T  i     subscript  T  i    T_{i}   and    Q  i     subscript  Q  i    Q_{i}   is    2   2  i      superscript  2   superscript  2  i     2^{2^{i}}   . Tree    T  k     subscript  T  k    T_{k}   and deque    Q  k     subscript  Q  k    Q_{k}   consist of the remaining elements, i.e., their size is    n  -    ∑   i  =  1    k  -  1     2   2  i         n    superscript   subscript     i  1      k  1     superscript  2   superscript  2  i       n-\sum_{i=1}^{k-1}2^{2^{i}}   . Therefore, the number of items in all trees and the number of elements in all deques both add up to   n   n   n   . Every element that has been inserted in the data structure is stored in exactly one of the trees and its corresponding deque.  Working set Invariant  In the deques of this structure, elements are kept in sorted order according to their working set size. Formally, element   x   x   x   lies after   y   y   y   in deque    Q  i     subscript  Q  i    Q_{i}   if and only if     w   (  x  )    <   w   (  y  )          w  x     w  y     w(x)   . Moreover, for every    1  ≤  i  <  k        1  i       k     1\leq i   , the elements in deque    Q  i     subscript  Q  i    Q_{i}   have a smaller working sets than the elements in deque    Q   i  +  1      subscript  Q    i  1     Q_{i+1}   . This property is referred to as the Working set invariant. Every operation in the data structure maintains the Working set invariant.  Operations  The basic operation in this structure is called shift from   h   h   h   to   j   j   j   , where   h   h   h   and   j   j   j   are indices of some trees in the structure. Two cases are considered in a shift from   h   h   h   to   j   j   j   : If    h  <  j      h  j    h   , then for every    h  ≤  i  <  j        h  i       j     h\leq i   , taken in increasing order, an item is dequeued from    Q  i     subscript  Q  i    Q_{i}   and enqueued into    Q   i  +  1      subscript  Q    i  1     Q_{i+1}   . The corresponding item is deleted from    T  i     subscript  T  i    T_{i}   and inserted into    T   i  +  1      subscript  T    i  1     T_{i+1}   . The running time of this operation is     O   (    ∑   i  =  h   j    log   |   T  i   |     )    =   O   (    ∑   i  =  h   j    log   2   2  i      )    =   O   (   2  j   )            O    superscript   subscript     i  h    j        subscript  T  i         O    superscript   subscript     i  h    j      superscript  2   superscript  2  i              O   superscript  2  j       O(\sum_{i=h}^{j}\log|T_{i}|)=O(\sum_{i=h}^{j}\log 2^{2^{i}})=O(2^{j})   . Analogously, if    j  <  h      j  h    j   , then for every    j  <  i  ≤  h        j  i       h     j   , taken in decreasing order, an item is dequeued from    Q  i     subscript  Q  i    Q_{i}   and enqueued into    Q   i  -  1      subscript  Q    i  1     Q_{i-1}   . The corresponding item is deleted from    T  i     subscript  T  i    T_{i}   and inserted into    T   i  -  1      subscript  T    i  1     T_{i-1}   . The running time of this operation is     O   (    ∑   i  =  j   h    log   |   T  i   |     )    =   O   (    ∑   i  =  j   h    log   2   2  i      )    =   O   (   2  h   )            O    superscript   subscript     i  j    h        subscript  T  i         O    superscript   subscript     i  j    h      superscript  2   superscript  2  i              O   superscript  2  h       O(\sum_{i=j}^{h}\log|T_{i}|)=O(\sum_{i=j}^{h}\log 2^{2^{i}})=O(2^{h})   . Regardless of the case, after a shift operation, the size of    T  h     subscript  T  h    T_{h}   decreases by one whereas the size of    T  j     subscript  T  j    T_{j}   increases by one. Since that elements in the deques are sorted with respect to their working sets sizes, a shift operation maintains the Working set invariant.  Search  To search for an element   x   x   x   , search for   x   x   x   in     T  1   ,   T  2   ,   …   T  k        subscript  T  1    subscript  T  2     normal-…   subscript  T  k      T_{1},T_{2},\ldots T_{k}   , in increasing order, until finding a tree    T  j     subscript  T  j    T_{j}   containing   x   x   x   . If no tree is found, the search is unsuccessful. If   x   x   x   is found, it is deleted from    T  j     subscript  T  j    T_{j}   and then inserted into    T  1     subscript  T  1    T_{1}   , i.e., it is moved to the front of the structure. The search finishes by performing a shift from   1   1   1   to   j   j   j   which restores the size of every tree and every deque to their size prior to the search operation. The running time of this search is     O   (    ∑   i  =  1   j    log   2   2  i      )    =   O   (   2  j   )          O    superscript   subscript     i  1    j      superscript  2   superscript  2  i         O   superscript  2  j      O(\sum_{i=1}^{j}\log 2^{2^{i}})=O(2^{j})   if the search was successful, or     O   (    ∑   i  =  j   k    log   2   2  i      )    =   O   (   2  k   )    =   O   (   log  n   )            O    superscript   subscript     i  j    k      superscript  2   superscript  2  i         O   superscript  2  k           O    n       O(\sum_{i=j}^{k}\log 2^{2^{i}})=O(2^{k})=O(\log n)   otherwise. By the Working set property, every element in trees     T  1   ,   T  2   ,  …  ,   T   j  -  1        subscript  T  1    subscript  T  2   normal-…   subscript  T    j  1      T_{1},T_{2},\ldots,T_{j-1}   belongs to the working set of   x   x   x   . In particular, every element in    T   j  -  1      subscript  T    j  1     T_{j-1}   belongs to the working set of   x   x   x   and hence,     w   (  x  )    >   |   T   j  -  1    |   =   2   2   j  -  1             w  x      subscript  T    j  1           superscript  2   superscript  2    j  1        w(x)>|T_{j-1}|=2^{2^{j-1}}   . Thus, the running time of a successful search is     O   (   2  j   )    =   O   (   log   2   2   j  -  1      )    =   O   (    log  w    (  x  )    )            O   superscript  2  j      O     superscript  2   superscript  2    j  1              O      w   x       O(2^{j})=O(\log 2^{2^{j-1}})=O(\log w(x))   .  Insert  Inserting an element   x   x   x   into the structure is performed by inserting   x   x   x   into    T  1     subscript  T  1    T_{1}   and enqueuing it into    Q  1     subscript  Q  1    Q_{1}   . Insertion is completed by performing a shift from   1   1   1   to   k   k   k   . To avoid overflow, if     |   T  k   |   =   2   2  k           subscript  T  k     superscript  2   superscript  2  k      |T_{k}|=2^{2^{k}}   before the shift, i.e., if the last tree is full, then   k   k   k   is incremented and a new empty    T  k     subscript  T  k    T_{k}   and    Q  k     subscript  Q  k    Q_{k}   is created. The running time of this operation is dominated by the shift from   1   1   1   to   k   k   k   whose running time is     O   (   2  k   )    =   O   (   2   log   log  n     )    =   O   (   log  n   )            O   superscript  2  k      O   superscript  2      n             O    n       O(2^{k})=O(2^{\log\log n})=O(\log n)   . Since element   x   x   x   , whose working set is the smallest, is enqueued in    Q  1     subscript  Q  1    Q_{1}   , the Working set invariant is preserved after the shift.  Delete  Deleting an element   x   x   x   is done by searching for   x   x   x   on each tree in the structure, in increasing order, until finding a tree    T  j     subscript  T  j    T_{j}   that contains it (if non is found the deletion is unsuccessful). Item   x   x   x   is deleted from    T  j     subscript  T  j    T_{j}   and    Q  j     subscript  Q  j    Q_{j}   . Finally, a shift from   k   k   k   to   j   j   j   maintains the size of    T  j     subscript  T  j    T_{j}   equal to    2   2  j      superscript  2   superscript  2  j     2^{2^{j}}   . The running time of this operation is     O   (   2  k   )    =   O   (   log  n   )          O   superscript  2  k      O    n      O(2^{k})=O(\log n)   . The working set invariant is preserved as deleting an element does not change the order of the working set of the elements.  Discussion  Splay tree s are self adjusting search trees introduced by Sleator and Tarjan 2 in 1985. Using restructuring heuristic, splay trees are able to achieve insert and delete operations in    O   (   log  n   )       O    n     O(\log n)    amortized time, without storing any balance information at the nodes. Moreover, the Working Set Theorem for splay trees states that the cost to access an element in a splay tree is    O   (    log  w    (  x  )    )       O      w   x     O(\log w(x))    amortized . Iacono's workings set structure obtains the same running time for search, insert and delete in the worst-case. Therefore, offering an alternative to splay trees.  References  "  Category:Trees (data structures)          