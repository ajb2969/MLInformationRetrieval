   Predicate functor logic      Predicate functor logic   In mathematical logic , predicate functor logic ( PFL ) is one of several ways to express first-order logic (also known as predicate logic ) by purely algebraic means, i.e., without quantified variables . PFL employs a small number of algebraic devices called predicate functors (or predicate modifiers) that operate on terms to yield terms. PFL is mostly the invention of the logician and philosopher  Willard Quine .  Motivation  The source for this section, as well as for much of this entry, is Quine (1976). Quine proposed PFL as a way of algebraizing first-order logic in a manner analogous to how Boolean algebra algebraizes propositional logic . He designed PFL to have exactly the expressive power of first-order logic with identity . Hence the metamathematics of PFL are exactly those of first-order logic with no interpreted predicate letters: both logics are sound , complete , and undecidable . Most work Quine published on logic and mathematics in the last 30 years of his life touched on PFL in some way.  Quine took "functor" from the writings of his friend Rudolf Carnap , the first to employ it in philosophy and mathematical logic , and defined it as follows:   "The word functor , grammatical in import but logical in habitat... is a sign that attaches to one or more expressions of given grammatical kind(s) to produce an expression of a given grammatical kind." (Quine 1982: 129)   Ways other than PFL to algebraize first-order logic include:   Cylindric algebra by Alfred Tarski and his American students. The simplified cylindric algebra proposed in Bernays (1959) led Quine to write the paper containing the first use of the phrase "predicate functor";  The polyadic algebra of Paul Halmos . By virtue of its economical primitives and axioms, this algebra most resembles PFL;  Relation algebra algebraizes the fragment of first-order logic consisting of formulas having no atomic formula lying in the scope of more than three quantifiers . That fragment suffices, however, for Peano arithmetic and the axiomatic set theory  ZFC ; hence relation algebra, unlike PFL, is incompletable . Most work on relation algebra since about 1920 has been by Tarski and his American students. The power of relation algebra did not become manifest until the monograph Tarski and Givant (1987), published after the three important papers bearing on PFL, namely Bacon (1985), Kuhn (1983), and Quine (1976);  Combinatory logic builds on combinators , higher order functions whose domain is another combinator or function, and whose range is yet another combinator. Hence combinatory logic goes beyond first-order logic by having the expressive power of set theory , which makes combinatory logic vulnerable to paradoxes . A predicate functor, on the other hand, simply maps predicates (also called terms ) into predicates.   PFL is arguably the simplest of these formalisms, yet also the one about which the least has been written.  Quine had a lifelong fascination with combinatory logic , attested to by his (1976) and his introduction to the translation in Van Heijenoort (1967) of the paper by the Russian logician Moses Schönfinkel founding combinatory logic. When Quine began working on PFL in earnest, in 1959, combinatory logic was commonly deemed a failure for the following reasons:   Until Dana Scott began writing on the model theory of combinatory logic in the late 1960s, almost only Haskell Curry , his students, and Robert Feys in Belgium worked on that logic;  Satisfactory axiomatic formulations of combinatory logic were slow in coming. In the 1930s, some formulations of combinatory logic were found to be inconsistent . Curry also discovered the Curry paradox , peculiar to combinatory logic;  The lambda calculus , with the same expressive power as combinatory logic , was seen as a superior formalism.   Kuhn's formalization  The PFL syntax , primitives, and axioms described in this section are largely Kuhn's (1983). The semantics of the functors are Quine's (1982). The rest of this entry incorporates some terminology from Bacon (1985).  Syntax  An atomic term is an upper case Latin letter, I and S excepted, followed by a numerical superscript called its degree , or by concatenated lower case variables, collectively known as an argument list . The degree of a term conveys the same information as the number of variables following a predicate letter. An atomic term of degree 0 denotes a Boolean variable or a truth value . The degree of I is invariably 2 and so is not indicated.  The "combinatory" (the word is Quine's) predicate functors, all monadic and peculiar to PFL, are Inv , inv , ∃ , + , and p . A term is either an atomic term, or constructed by the following recursive rule. If τ is a term, then Inv τ, inv τ, ∃ τ, + τ, and p τ are terms. A functor with a superscript n , n a natural number > 1, denotes n consecutive applications (iterations) of that functor.  A formula is either a term or defined by the recursive rule: if α and β are formulas, then αβ and ~(α) are likewise formulas. Hence "~" is another monadic functor, and concatenation is the sole dyadic predicate functor. Quine called these functors "alethic." The natural interpretation of "~" is negation ; that of concatenation is any connective that, when combined with negation, forms a functionally complete set of connectives. Quine's preferred functionally complete set was conjunction and negation . Thus concatenated terms are taken as conjoined. The notation + is Bacon's (1985); all other notation is Quine's (1976; 1982). The alethic part of PFL is identical to the Boolean term schemata of Quine (1982).  As is well known, the two alethic functors could be replaced by a single dyadic functor with the following syntax and semantics : if α and β are formulas, then (αβ) is a formula whose semantics are "not (α and/or β)" (see NAND and NOR ).  Axioms and semantics  Quine set out neither axiomatization nor proof procedure for PFL. The following axiomatization of PFL, one of two proposed in Kuhn (1983), is concise and easy to describe, but makes extensive use of free variables and so does not do full justice to the spirit of PFL. Kuhn gives another axiomatization dispensing with free variables, but that is harder to describe and that makes extensive use of defined functors. Kuhn proved both of his PFL axiomatizations sound and complete .  This section is built around the primitive predicate functors and a few defined ones. The alethic functors can be axiomatized by any set of axioms for sentential logic whose primitives are negation and one of ∧ or ∨. Equivalently, all tautologies of sentential logic can be taken as axioms.  Quine's (1982) semantics for each predicate functor are stated below in terms of abstraction (set builder notation), followed by either the relevant axiom from Kuhn (1983), or a definition from Quine (1976). The notation    {    x  1   …   x  n    :   F   x  1   …   x  n    }     conditional-set     subscript  x  1   normal-…   subscript  x  n      F   subscript  x  1   normal-…   subscript  x  n      \{x_{1}...x_{n}:Fx_{1}...x_{n}\}   denotes the set of n-tuples satisfying the atomic formula     F   x  1   …   x  n    .      F   subscript  x  1   normal-…   subscript  x  n     Fx_{1}...x_{n}.      Identity , I , is defined as:         I  F   x  1    x  2   …   x  n    ↔   F   x  1    x  1   …   x  n    ↔   F   x  2    x  2   …   x  n     .       normal-↔    I  F   subscript  x  1    subscript  x  2   normal-…   subscript  x  n      F   subscript  x  1    subscript  x  1   normal-…   subscript  x  n      normal-↔      F   subscript  x  2    subscript  x  2   normal-…   subscript  x  n       IFx_{1}x_{2}...x_{n}\leftrightarrow Fx_{1}x_{1}...x_{n}\leftrightarrow Fx_{2}x%
 _{2}...x_{n}.   Identity is reflexive ( Ixx ), symmetric ( Ixy → Iyx ), transitive ( ( Ixy ∧ Iyz ) → Ixz ), and obeys the substitution property:        (   F   x  1   …   x  n   and  I   x  1   y   )   →   F  y   x  2   …   x  n     .     normal-→    F   subscript  x  1   normal-…   subscript  x  n   italic- and  I   subscript  x  1   y     F  y   subscript  x  2   normal-…   subscript  x  n      (Fx_{1}...x_{n}\and Ix_{1}y)\rightarrow Fyx_{2}...x_{n}.      Padding , + , adds a variable to the left of any argument list.         +   F  n     =   d  e  f     {    x  0    x  1   …   x  n    :    F  n    x  1   …   x  n    }    .      subscript     d  e  f       superscript  F  n     conditional-set     subscript  x  0    subscript  x  1   normal-…   subscript  x  n       superscript  F  n    subscript  x  1   normal-…   subscript  x  n       \ +F^{n}=_{def}\{x_{0}x_{1}...x_{n}:F^{n}x_{1}...x_{n}\}.           +   F   x  1   …   x  n     ↔   F   x  2   …   x  n     .     normal-↔      F   subscript  x  1   normal-…   subscript  x  n       F   subscript  x  2   normal-…   subscript  x  n      +Fx_{1}...x_{n}\leftrightarrow Fx_{2}...x_{n}.      Cropping , ∃ , erases the leftmost variable in any argument list.          \exist    F  n     =   d  e  f     {    x  2   …   x  n    :    \exist    x  1    F  n    x  1   …   x  n    }    .      subscript     d  e  f      \exist   superscript  F  n     conditional-set     subscript  x  2   normal-…   subscript  x  n      \exist   subscript  x  1    superscript  F  n    subscript  x  1   normal-…   subscript  x  n       \exist F^{n}=_{def}\{x_{2}...x_{n}:\exist x_{1}F^{n}x_{1}...x_{n}\}.           F   x  1   …   x  n    →    \exist   F   x  2   …   x  n     .     normal-→    F   subscript  x  1   normal-…   subscript  x  n      \exist  F   subscript  x  2   normal-…   subscript  x  n      Fx_{1}...x_{n}\rightarrow\exist Fx_{2}...x_{n}.     Cropping enables two useful defined functors:   Reflection , S :          S    F  n     =   d  e  f     {    x  2   …   x  n    :    F  n    x  2    x  2   …   x  n    }    .      subscript     d  e  f      S   superscript  F  n     conditional-set     subscript  x  2   normal-…   subscript  x  n       superscript  F  n    subscript  x  2    subscript  x  2   normal-…   subscript  x  n       \ SF^{n}=_{def}\{x_{2}...x_{n}:F^{n}x_{2}x_{2}...x_{n}\}.           S   F  n    ↔    \exist   I   F  n     .     normal-↔    S   superscript  F  n      \exist  I   superscript  F  n      SF^{n}\leftrightarrow\exist IF^{n}.    S generalizes the notion of reflexivity to all terms of any finite degree greater than 2. N.B: S should not be confused with the primitive combinator  S of combinatory logic.   Cartesian product ,   ×     \times   ;          F  m   ×   G  n    ↔    F  m     \exist   m    G  n     .     normal-↔     superscript  F  m    superscript  G  n       superscript  F  m    superscript  \exist  m    superscript  G  n      F^{m}\times G^{n}\leftrightarrow F^{m}\exist^{m}G^{n}.   Here only, Quine adopted an infix notation, because this infix notation for Cartesian product is very well established in mathematics. Cartesian product allows restating conjunction as follows:         F  m    x  1   …   x  m    G  n    x  1   …   x  n    ↔    (    F  m   ×   G  n    )    x  1   …   x  m    x  1   …   x  n     .     normal-↔     superscript  F  m    subscript  x  1   normal-…   subscript  x  m    superscript  G  n    subscript  x  1   normal-…   subscript  x  n         superscript  F  m    superscript  G  n     subscript  x  1   normal-…   subscript  x  m    subscript  x  1   normal-…   subscript  x  n      F^{m}x_{1}...x_{m}G^{n}x_{1}...x_{n}\leftrightarrow(F^{m}\times G^{n})x_{1}...%
 x_{m}x_{1}...x_{n}.   Reorder the concatenated argument list so as to shift a pair of duplicate variables to the far left, then invoke S to eliminate the duplication. Repeating this as many times as required results in an argument list of length max( m , n ).  The next three functors enable reordering argument lists at will.   Major inversion , Inv , rotates the variables in an argument list to the right, so that the last variable becomes the first.          I   n  v   F  n     =   d  e  f     {    x  1   …   x  n    :    F  n    x  n    x  1   …   x   n  -  1     }    .      subscript     d  e  f      I  n  v   superscript  F  n     conditional-set     subscript  x  1   normal-…   subscript  x  n       superscript  F  n    subscript  x  n    subscript  x  1   normal-…   subscript  x    n  1        \ InvF^{n}=_{def}\{x_{1}...x_{n}:F^{n}x_{n}x_{1}...x_{n-1}\}.           I  n  v  F   x  1   …   x  n    ↔   F   x  n    x  1   …   x   n  -  1      .     normal-↔    I  n  v  F   subscript  x  1   normal-…   subscript  x  n      F   subscript  x  n    subscript  x  1   normal-…   subscript  x    n  1       InvFx_{1}...x_{n}\leftrightarrow Fx_{n}x_{1}...x_{n-1}.      Minor inversion , inv , swaps the first two variables in an argument list.          i   n  v   F  n     =   d  e  f     {    x  1   …   x  n    :    F  n    x  2    x  1   …   x  n    }    .      subscript     d  e  f      i  n  v   superscript  F  n     conditional-set     subscript  x  1   normal-…   subscript  x  n       superscript  F  n    subscript  x  2    subscript  x  1   normal-…   subscript  x  n       \ invF^{n}=_{def}\{x_{1}...x_{n}:F^{n}x_{2}x_{1}...x_{n}\}.           i  n  v  F   x  1   …   x  n    ↔   F   x  2    x  1   …   x  n     .     normal-↔    i  n  v  F   subscript  x  1   normal-…   subscript  x  n      F   subscript  x  2    subscript  x  1   normal-…   subscript  x  n      invFx_{1}...x_{n}\leftrightarrow Fx_{2}x_{1}...x_{n}.      Permutation , p , rotates the second through last variables in an argument list to the left, so that the second variable becomes the last.          p    F  n     =   d  e  f     {    x  1   …   x  n    :    F  n    x  1    x  3   …   x  n    x  2    }    .      subscript     d  e  f      p   superscript  F  n     conditional-set     subscript  x  1   normal-…   subscript  x  n       superscript  F  n    subscript  x  1    subscript  x  3   normal-…   subscript  x  n    subscript  x  2       \ pF^{n}=_{def}\{x_{1}...x_{n}:F^{n}x_{1}x_{3}...x_{n}x_{2}\}.           p  F   x  1   …   x  n    ↔   I  n  v  i  n  v  F   x  1    x  3   …   x  n    x  2     .     normal-↔    p  F   subscript  x  1   normal-…   subscript  x  n      I  n  v  i  n  v  F   subscript  x  1    subscript  x  3   normal-…   subscript  x  n    subscript  x  2      pFx_{1}...x_{n}\leftrightarrow InvinvFx_{1}x_{3}...x_{n}x_{2}.   Given an argument list consisting of n variables, p implicitly treats the last n -1 variables like a bicycle chain, with each variable constituting a link in the chain. One application of p advances the chain by one link. k consecutive applications of p to F n moves the k +1 variable to the second argument position in F .  When n =2, Inv and inv merely interchange x 1 and x 2 . When n =1, they have no effect. Hence p has no effect when n p; Inv; inv; \lnot; I |no change |- |     +   F   n  -  1     ;       superscript  F    n  1      \ +F^{n-1};         \exist    F   n  +  1     ;      \exist   superscript  F    n  1      \exist F^{n+1};        S    F   n  +  1        S   superscript  F    n  1      \ SF^{n+1}   |    n    n   \ n   |- |       α   m    β  n    ;       superscript  α  m    superscript  β  n     \ \alpha^{m}\beta^{n};        F  m   ×   G  n        superscript  F  m    superscript  G  n     F^{m}\times G^{n}   |     m   a  x   (  m  ,  n  )       m  a  x   m  n     \ max(m,n)   |- |}  Rules  All instances of a predicate letter may be replaced by another predicate letter of the same degree, without affecting validity. The rules are:   Modus ponens ;  Let α and β be PFL formulas in which    x  1     subscript  x  1    x_{1}   does not appear. Then if     (   α  and  F   x  1   …   x  n    )   →  β     normal-→    α  italic- and  F   subscript  x  1   normal-…   subscript  x  n    β    (\alpha\and Fx_{1}...x_{n})\rightarrow\beta   is a PFL theorem, then     (   α  and   \exist   F   x  2   …   x  n    )   →  β     normal-→    α  italic- and  \exist  F   subscript  x  2   normal-…   subscript  x  n    β    (\alpha\and\exist Fx_{2}...x_{n})\rightarrow\beta   is likewise a PFL theorem.   Some useful results  Instead of axiomatizing PFL, Quine (1976) proposed the following conjectures as candidate axioms.        \exist   I      \exist  I    \exist I      n -1 consecutive iterations of p restores the status quo ante :        F  n   ↔    p   n  -  1     F  n       normal-↔   superscript  F  n      superscript  p    n  1     superscript  F  n      F^{n}\leftrightarrow p^{n-1}F^{n}      + and ∃ annihilate each other:        F  n   →   +    \exist    F  n        normal-→   superscript  F  n       \exist   superscript  F  n       F^{n}\rightarrow+\exist F^{n}            F  n   ↔    \exist   +   F  n       normal-↔   superscript  F  n     \exist   superscript  F  n      F^{n}\leftrightarrow\exist+F^{n}      Negation distributes over + , ∃ , and p :        +   ¬   F  n     ↔   ¬  +   F  n       normal-↔        superscript  F  n         superscript  F  n      +\lnot F^{n}\leftrightarrow\lnot+F^{n}            ¬   \exist    F  n    →    \exist   ¬   F  n       normal-→     \exist   superscript  F  n      \exist    superscript  F  n      \lnot\exist F^{n}\rightarrow\exist\lnot F^{n}            p  ¬   F  n    ↔   ¬  p   F  n       normal-↔    p    superscript  F  n       p   superscript  F  n      p\lnot F^{n}\leftrightarrow\lnot pF^{n}      + and p distributes over conjunction:        +   (    F  n    G  m    )    ↔   (    +   F  n    +   G  m    )      normal-↔       superscript  F  n    superscript  G  m          superscript  F  n     superscript  G  m      +(F^{n}G^{m})\leftrightarrow(+F^{n}+G^{m})            p   (    F  n    G  m    )    ↔   (   p   F  n   p   G  m    )      normal-↔    p     superscript  F  n    superscript  G  m       p   superscript  F  n   p   superscript  G  m      p(F^{n}G^{m})\leftrightarrow(pF^{n}pG^{m})      Identity has the interesting implication:        I   F  n    →     p   n  -  2     \exist   p   +   F  n       normal-→    I   superscript  F  n         superscript  p    n  2    \exist  p    superscript  F  n      IF^{n}\rightarrow p^{n-2}\exist p+F^{n}      Quine also conjectured the rule: If    α    α   \ \alpha   is a PFL theorem, then so are      p   α   ,      p  α    \ p\alpha,        +  α   ,      α    \ +\alpha,   and    ¬   \exist   ¬  α       \exist   α    \lnot\exist\lnot\alpha   .  Bacon's work  Bacon (1985) takes the conditional , negation , Identity , Padding , and Major and Minor inversion as primitive, and Cropping as defined. Employing terminology and notation differing somewhat from the above, Bacon (1985) sets out two formulations of PFL:   A natural deduction formulation in the style of Frederick Fitch . Bacon proves this formulation sound and complete in full detail.  An axiomatic formulation which Bacon asserts, but does not prove, equivalent to the preceding one. Some of these axioms are simply Quine conjectures restated in Bacon's notation.   Bacon also:   Discusses the relation of PFL to the term logic of Sommers (1982), and argues that recasting PFL using a syntax proposed in Lockwood's appendix to Sommers, should make PFL easier to "read, use, and teach";  Touches on the group theoretic structure of Inv and inv ;  Mentions that sentential logic , monadic predicate logic , the modal logic  S5 , and the Boolean logic of (un)permuted relations , are all fragments of PFL.   From first-order logic to PFL  The following algorithm is adapted from Quine (1976: 300-2). Given a closed formula of first-order logic , first do the following:   Attach a numerical subscript to every predicate letter, stating its degree;  Translate all universal quantifiers into existential quantifiers and negation;  Restate all atomic formulas of the form x = y as Ixy .   Now apply the following algorithm to the preceding result:  1. Translate the matrices of the most deeply nested quantifiers into disjunctive normal form , consisting of disjuncts of conjuncts of terms, negating atomic terms as required. The resulting subformula contains only negation, conjunction, disjunction, and existential quantification.  2. Distribute the existential quantifiers over the disjuncts in the matrix using the rule of passage (Quine 1982: 119):         \exist   x   [   α   (  x  )   γ   (  x  )    ]    ↔   (    \exist   x  α   (  x  )    \exist   x  γ   (  x  )    )    .     normal-↔    \exist  x   delimited-[]    α  x  γ  x       \exist  x  α  x  \exist  x  γ  x     \exist x[\alpha(x)\gamma(x)]\leftrightarrow(\exist x\alpha(x)\exist x\gamma(x)).     3. Replace conjunction by Cartesian product , by invoking the fact:  $$(F^m \and G^n) \leftrightarrow (F^m \times G^n) \leftrightarrow (F^m \exist^m G^n); m '''4.''' Concatenate the argument lists of all atomic terms, and move the concatenated list to the far right of the subformula.
 
 '''5.''' Use '''Inv''' and '''inv''' to move all instances of the quantified variable (call it ''y'') to the left of the argument list.
 
 '''6.''' Invoke '''S''' as many times as required to eliminate all but the last instance of ''y''. Eliminate ''y'' by prefixing the subformula with one instance of '''∃'''.
 
 '''7.''' Repeat (1)-(6) until all quantified variables have been eliminated. Eliminate any disjunctions falling within the scope of a quantifier by invoking the equivalence:
 : (\alpha \or \beta \or ...) \leftrightarrow \lnot(\lnot\alpha \and \lnot\beta \and ...).$$  The reverse translation, from PFL to first-order logic, is discussed in Quine (1976: 302-4).  The canonical foundation of mathematics is axiomatic set theory , with a background logic consisting of first-order logic with identity , with a universe of discourse consisting entirely of sets. There is a single predicate letter of degree 2, interpreted as set membership. The PFL translation of the canonical axiomatic set theory  ZFC is not difficult, as no ZFC axiom requires more than 6 quantified variables. 1  See also   algebraic logic  combinatory logic  cylindric algebra  relation algebra  term logic   Footnotes    References   Bacon, John, 1985, "The completeness of a predicate-functor logic," Journal of Symbolic Logic 50 : 903-26.  Paul Bernays , 1959, "Uber eine naturliche Erweiterung des Relationenkalkuls" in Heyting, A., ed., Constructivity in Mathematics . North Holland: 1-14.  Kuhn, Stephen T., 1983, "[ http://projecteuclid.org/DPubS/Repository/1.0/Disseminate?view=body&id; ;=pdf_1&handle;=euclid.ndjfl/1093870313 An Axiomatization of Predicate Functor Logic,]" Notre Dame Journal of Formal Logic 24 : 233-41.  Willard Quine , 1976, "Algebraic Logic and Predicate Functors" in Ways of Paradox and Other Essays , enlarged ed. Harvard Univ. Press: 283-307.  --------, 1982. Methods of Logic , 4th ed. Harvard Univ. Press. Chpt. 45.  Sommers, Fred, 1982. The Logic of Natural Language . Oxford Univ. Press.  Alfred Tarski and Givant, Steven, 1987. A Formalization of Set Theory Without Variables . AMS .  Jean Van Heijenoort , 1967. From Frege to Gödel: A Source Book on Mathematical Logic . Harvard Univ. Press.   External links   [ http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.55.5673&rep; ;=rep1&type;=ps An introduction to predicate-functor logic ] (one-click download, PS file) by Mats Dahllöf (Department of Linguistics, Uppsala University)   "  Category:Algebraic logic  Category:Mathematical axioms  Category:Predicate logic     Metamath axioms. ↩     