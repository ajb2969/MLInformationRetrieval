   Incomplete Cholesky factorization      Incomplete Cholesky factorization  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In numerical analysis , an incomplete Cholesky factorization of a symmetric positive definite matrix is a sparse approximation of the Cholesky factorization . An incomplete Cholesky factorization is often used as a preconditioner for algorithms like the conjugate gradient method .  The Cholesky factorization of a positive definite matrix A is A = LL * where L is a lower triangular matrix . An incomplete Cholesky factorization is given by a sparse lower triangular matrix K that is in some sense close to L . The corresponding preconditioner is KK *.  One popular way to find such a matrix K is to use the algorithm for finding the exact Cholesky decomposition, except that any entry is set to zero if the corresponding entry in A is also zero. This gives an incomplete Cholesky factorization which is as sparse as the matrix A .  Algorithm  For   i   i   i   from   1   1   1   to   N   N   N   :       L   i  i    =    (    a   i  i    -    âˆ‘   k  =  1    i  -  1     L   i  k   2     )    1  2         subscript  L    i  i     superscript     subscript  a    i  i      superscript   subscript     k  1      i  1     superscript   subscript  L    i  k    2       1  2      L_{ii}=\left({a_{ii}-\sum\limits_{k=1}^{i-1}{L_{ik}^{2}}}\right)^{{1\over 2}}      For   j   j   j   from    i  +  1      i  1    i+1   to   N   N   N   : :    L_{ji} = {1 \over {L_{ii} }}\left( {a_{ij} - \sum\limits_{k = 1}^{i - 1} {L_{ik} L_{jk} } } \right)  Implementation  Implementation of the incomplete Cholesky factorizaton in the Octave scripting language. The factorization is stored as a lower triangular matrix, with the elements in the upper triangle set to zero.  function a = ichol(a)
     n = size (a, 1 );
 
     for k= 1 :n
         a(k,k) = sqrt (a(k,k));
         for i =(k+ 1 ):n
             if (a( i ,k)!= 0 )
                 a( i ,k) = a( i ,k)/a(k,k);            
             endif
         endfor
         for j =(k+ 1 ):n
             for i = j :n
                 if (a( i , j )!= 0 )
                     a( i , j ) = a( i , j )-a( i ,k)*a( j ,k);  
                 endif
             endfor
         endfor
     endfor
 
     for i = 1 :n
         for j = i + 1 :n
             a( i , j ) = 0 ;
         endfor
     endfor            
 endfunction  References   Incomplete Cholesky factorization ] at CFD Online wiki   . See Section 10.3.2.   "  Category:Numerical linear algebra  