


C++ Technical Report 1




C++ Technical Report 1

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



C++ Technical Report 1 (TR1) is the common name for ISO/IEC TR 19768, C++ Library Extensions, which was a document proposing additions to the C++ standard library for the C++03 language standard. The additions include regular expressions, smart pointers, hash tables, and random number generators. TR1 was not a standard itself, but rather a draft document. However, most of its proposals became part of the later official standard, C++11. Before C++11 was standardized, vendors used this document as a guide to create extensions. The report's goal was "to build more widespread existing practice for an expanded C++ standard library."
The report was first circulated in draft form in 2005 as Draft Technical Report on C++ Library Extensions, then published in 2007 as an ISO/IEC standard as [http://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?ics1=35&ics2;;=60&ics3;=&csnumber;=43289 ISO/IEC TR 19768:2007].
Overview
Compilers did not need to include the TR1 components in order to conform to the C++ standard, because TR1 proposals were not part of the standard itself, only a set of possible additions that were still to be ratified. However, most of TR1 was available from Boost, and several compiler/library distributors implemented all or some of the components. TR1 is not the complete list of additions to the library to appear in the next standard, C++11. For example, C++11 includes a thread support library that is not available in TR1.
The new components were defined in the std::tr1 namespace to distinguish them from the then-current standard library.
There is also a second technical report, C++ Technical Report 2, planned to be published after C++11.1
Components
TR1 includes the following components:
General utilities
Reference wrapper – enables passing references, rather than copies, into algorithms or function objects. The feature was based on Boost.Ref.2 A wrapper reference is obtained from an instance of the template class reference_wrapper. Wrapper references are similar to normal references (‘&’) of the C++ language. To obtain a wrapper reference from any object the template class ref is used (for a constant reference cref is used).
Wrapper references are useful above all for template functions, when argument deduction would not deduce a reference (e.g. when forwarding arguments):
#include 
 #include 
 
 void f( int &r; )  { ++r; }
 
 template< class Funct, class Arg >
 void g( Funct f, Arg t )
 {
   f(t);
 }
 
 int main()
 {
   int i = 0;
 
   g( f, i );                   // 'g< void(int &r;), int >' is instantiated
   std::cout << i << "\n";      // Output: 0
 
   g( f, std::tr1::ref(i) );    // 'g< void(int &r;), reference_wrapper >' is instanced
   std::cout << i << "\n";      // Output: 1
 }
 
 <span class="dt"int>
 
 Smart pointers – adds several classes that simplify object lifetime management in complex cases. Three main classes are added:

shared_ptr – a reference-counted smart pointer
weak_ptr – a variant of shared_ptr that doesn't increase the reference count

The proposal is based on Boost Smart Pointer library.3
Function objects
These four modules are added to the  header file:
Polymorphic function wrapper (function) – can store any callable function (function pointers, member function pointers, and function objects) that uses a specified function call signature. The type does not depend on the kind of the callable used. Based on Boost.Function4
Function object binders (bind) – can bind any parameter parameters to function objects. Function composition is also allowed. This is a generalized version of the standard std::bind1st and std::bind2nd bind functions. The feature is based on Boost Bind library.5
Function return types (result_of) – determines the type of a call expression.
mem_fn – enhancement to the standard std::mem_fun and std::mem_fun_ref. Allows pointers to member functions to be treated as function objects. Based on Boost Mem Fn library.6
Metaprogramming and type traits
There is now  header file that contains many useful trait meta-templates, such as is_pod, has_virtual_destructor, remove_extent, etc. It facilitates metaprogramming by enabling queries on and transformation between different types. The proposal is based on Boost Type Traits library.7
Numerical facilities
Random number generation

new  header file – variate_generator, [[Mersenne Twister|mersenne_twister]], [[Poisson Distribution|poisson_distribution]], etc.
utilities for generating random numbers using any of several Pseudorandom number generators, engines, and probability distributions

Mathematical special functions
Some features of TR1, such as the mathematical special functions and certain C99 additions, are not included in the Visual C++ implementation of TR1. The Mathematical special functions library was not standardized in C++11.

additions to the / header files – [[Beta function|beta]], [[Legendre polynomials|legendre]], etc.

These functions will likely be of principal interest to programmers in the engineering and scientific disciplines.
The following table shows all 23 special functions described in TR1.




Function name

Function prototype

Mathematical expression





Associated Laguerre polynomials

double assoc_laguerre( unsigned n, unsigned m, double x ) ;







Associated Legendre polynomials

double assoc_legendre( unsigned l, unsigned m, double x ) ;







Beta function

double beta( double x, double y ) ;







Complete elliptic integral of the first kind

double comp_ellint_1( double k ) ;







Complete elliptic integral of the second kind

double comp_ellint_2( double k ) ;







Complete elliptic integral of the third kind

double comp_ellint_3( double k, double nu ) ;







Confluent hypergeometric functions

double conf_hyperg( double a, double c, double x ) ;







Regular modified cylindrical Bessel functions

double cyl_bessel_i( double nu, double x ) ;







Cylindrical Bessel functions of the first kind

double cyl_bessel_j( double nu, double x ) ;







Irregular modified cylindrical Bessel functions

double cyl_bessel_k( double nu, double x ) ;







Cylindrical Neumann functions

Cylindrical Bessel functions of the second kind

double cyl_neumann( double nu, double x ) ;



Incomplete elliptic integral of the first kind

double ellint_1( double k, double phi ) ;







Incomplete elliptic integral of the second kind

double ellint_2( double k, double phi ) ;







Incomplete elliptic integral of the third kind

double ellint_3( double k, double nu, double phi ) ;







Exponential integral

double expint( double x ) ;







Hermite polynomials

double hermite( unsigned n, double x ) ;







Hypergeometric series

double hyperg( double a, double b, double c, double x ) ;







Laguerre polynomials

double laguerre( unsigned n, double x ) ;







Legendre polynomials

double legendre( unsigned l, double x ) ;







Riemann zeta function

double riemann_zeta( double x ) ;







Spherical Bessel functions of the first kind

double sph_bessel( unsigned n, double x ) ;







Spherical associated Legendre functions

double sph_legendre( unsigned l, unsigned m, double theta ) ;







Spherical Neumann functions

Spherical Bessel functions of the second kind

double sph_neumann( unsigned n, double x ) ;



Each function has two additional variants. Appending the suffix ‘f’ or ‘l’ to a function name gives a function that operates on float or long double values respectively. For example:
float sph_neumannf( unsigned n, float x ) ;
 long double sph_neumannl( unsigned n, long double x ) ;
Containers
Tuple types

new  header file – tuple
based on Boost Tuple library8
vaguely an extension of the standard std::pair
fixed size collection of elements, which may be of different types

Fixed size array

new  header file – array
taken from Boost Array library9
as opposed to dynamic array types such as the standard std::vector

Hash tables

new ,  header files
they implement the unordered_set, unordered_multiset, unordered_map, and unordered_multimap classes, analogous to set, multiset, map, and multimap, respectively
 
unfortunately, unordered_set and unordered_multiset cannot be used with the set_union, set_intersection, set_difference, set_symmetric_difference, and includes standard library functions, which work for set and multiset

new implementation, not derived from an existing library, not fully API compatible with existing libraries
like all hash tables, often provide constant time lookup of elements but the worst case can be linear in the size of the container

Regular expressions

new  header file – regex, regex_match, regex_search, regex_replace, etc.
based on Boost RegEx library10
pattern matching library

C compatibility
C++ is designed to be compatible with the C programming language, but is not a strict superset of C due to diverging standards. TR1 attempts to reconcile some of these differences through additions to various headers in the C++ library, such as , , , etc. These changes help to bring C++ more in line with the C99 version of the C standard (not all parts of C99 are included in TR1).
Technical Report 2
In 2005, a request for proposals for a TR2 was made with a special interest in Unicode, XML/HTML, Networking and usability for novice programmers.3.
Some of the proposals included:

Threads 4
The Asio C++ library (networking 56).
Signals/Slots 78
Filesystem Library 9 – Based on the Boost Filesystem Library, for query/manipulation of paths, files and directories.
Boost Any Library 10
Lexical Conversion Library 11
New String Algorithms 12
Toward a More Complete Taxonomy of Algebraic Properties for Numeric Libraries in TR2 13
Adding heterogeneous comparison lookup to associative containers for TR2 14

After the call was issued for proposals for TR2, ISO procedures were changed, so there will not be a TR2. Instead, enhancements to C++ will be published in a number of Technical Specifications. Some of the proposals listed above are already included in the C++ standard or in draft versions of the Technical Specifications.
See also

C++11, standard for the C++ programming language; the library improvements were based on TR1
C11 (C standard revision), the most recent standard for the C programming language
Boost library, a large collection of portable C++ libraries, several of which were included in TR1
Standard Template Library, part of the current C++ Standard Library

Notes
References





External links

Scott Meyers' Effective C++: TR1 Information – contains links to the TR1 proposal documents which provide background and rationale for the TR1 libraries.

"
Category:C++ Standard Library



1
Chapter 22. Boost.Ref – Boost 1.48.0
Smart Pointers – Boost 1.48.0
Chapter 9. Boost.Function – Boost 1.48.0
Boost: bind.hpp documentation – Boost 1.48.0
Boost: mem_fn.hpp documentation – Boost 1.48.0
2
The Boost Tuple Library – Boost 1.48.0
Chapter 3. Boost.Array – Boost 1.48.0
Boost.Regex – Boost 1.36.0


