   Stochastic gradient descent      Stochastic gradient descent   Stochastic gradient descent is a gradient descent optimization  method for minimizing an objective function that is written as a sum of differentiable functions.  Background  Both statistical  estimation and machine learning consider the problem of minimizing an objective function that has the form of a sum:        Q   (  w  )    =    ∑   i  =  1   n     Q  i    (  w  )      ,        Q  w     superscript   subscript     i  1    n      subscript  Q  i   w      Q(w)=\sum_{i=1}^{n}Q_{i}(w),   where the parameter     w  *     superscript  w     w^{*}   which minimizes    Q   (  w  )       Q  w    Q(w)   is to be estimated . Each summand function    Q  i     subscript  Q  i    Q_{i}   is typically associated with the   i   i   i   -th observation in the data set (used for training).  In classical statistics, sum-minimization problems arise in least squares and in maximum-likelihood estimation (for independent observations). The general class of estimators that arise as minimizers of sums are called M-estimators . However, in statistics, it has been long recognized that requiring even local minimization is too restrictive for some problems of maximum-likelihood estimation, as shown for example by Thomas Ferguson's example. 1 Therefore, contemporary statistical theorists often consider stationary points of the likelihood function (or zeros of its derivative, the score function , and other estimating equations ).  The sum-minimization problem also arises for empirical risk minimization : In this case,     Q  i    (  w  )        subscript  Q  i   w    Q_{i}(w)   is the value of the loss function at   i   i   i   -th example, and    Q   (  w  )       Q  w    Q(w)   is the empirical risk.  When used to minimize the above function, a standard (or "batch") gradient descent method would perform the following iterations :       w  :=   w  -   η   ∇  Q    (  w  )     =   w  -   η    ∑   i  =  1   n     ∇   Q  i     (  w  )        ,       assign  w    w    η   normal-∇  Q   w           w    η    superscript   subscript     i  1    n      normal-∇   subscript  Q  i    w         w:=w-\eta\nabla Q(w)=w-\eta\sum_{i=1}^{n}\nabla Q_{i}(w),   where   η   η   \eta   is a step size (sometimes called the learning rate in machine learning).  In many cases, the summand functions have a simple form that enables inexpensive evaluations of the sum-function and the sum gradient. For example, in statistics, one-parameter exponential families allow economical function-evaluations and gradient-evaluations.  However, in other cases, evaluating the sum-gradient may require expensive evaluations of the gradients from all summand functions. When the training set is enormous and no simple formulas exist, evaluating the sums of gradients becomes very expensive, because evaluating the gradient requires evaluating all the summand functions' gradients. To economize on the computational cost at every iteration, stochastic gradient descent samples a subset of summand functions at every step. This is very effective in the case of large-scale machine learning problems. 2  Iterative method  (Figure)  Fluctuations in the total objective function as gradient steps with respect to mini-batches are taken.   In stochastic (or "on-line") gradient descent, the true gradient of    Q   (  w  )       Q  w    Q(w)   is approximated by a gradient at a single example:       w  :=   w  -   η   ∇   Q  i     (  w  )      .     assign  w    w    η   normal-∇   subscript  Q  i    w      w:=w-\eta\nabla Q_{i}(w).   As the algorithm sweeps through the training set, it performs the above update for each training example. Several passes can be made over the training set until the algorithm converges. If this is done, the data can be shuffled for each pass to prevent cycles. Typical implementations may use an adaptive learning rate so that the algorithm converges.  In pseudocode, stochastic gradient descent can be presented as follows:    Choose an initial vector of parameters   w   w   w   and learning rate   η   η   \eta   .  Repeat until an approximate minimum is obtained:  Randomly shuffle examples in the training set.  For     i   =   1  ,  2  ,  …  ,  n       i   1  2  normal-…  n     \!i=1,2,...,n   , do:        w   :=   w  -   η   ∇   Q  i     (  w  )      .     assign  w    w    η   normal-∇   subscript  Q  i    w      \!w:=w-\eta\nabla Q_{i}(w).         A compromise between the two forms called "mini-batches" computes the gradient against more than one training examples at each step. This can perform significantly better than true stochastic gradient descent because the code can make use of vectorization libraries rather than computing each step separately. It may also result in smoother convergence, as the gradient computed at each step uses more training examples.  The convergence of stochastic gradient descent has been analyzed using the theories of convex minimization and of stochastic approximation . Briefly, when the learning rates   η   η   \eta   decrease with an appropriate rate, and subject to relatively mild assumptions, stochastic gradient descent converges almost surely to a global minimum when the objective function is convex or pseudoconvex , and otherwise converges almost surely to a local minimum. 3  4 This is in fact a consequence of the Robbins-Siegmund theorem. 5  Example  Let's suppose we want to fit a straight line    y  =    w  1   +    w  2   x        y     subscript  w  1      subscript  w  2   x      y=\!w_{1}+w_{2}x   to a training set of two-dimensional points     (   x  1   ,   y  1   )   ,  …  ,   (   x  n   ,   y  n   )        subscript  x  1    subscript  y  1    normal-…    subscript  x  n    subscript  y  n      \!(x_{1},y_{1}),\ldots,(x_{n},y_{n})   using least squares . The objective function to be minimized is:        Q   (  w  )    =    ∑   i  =  1   n     Q  i    (  w  )     =    ∑   i  =  1   n     (     w  1   +    w  2    x  i     -   y  i    )   2     .          Q  w     superscript   subscript     i  1    n      subscript  Q  i   w           superscript   subscript     i  1    n    superscript       subscript  w  1      subscript  w  2    subscript  x  i      subscript  y  i    2       Q(w)=\sum_{i=1}^{n}Q_{i}(w)=\sum_{i=1}^{n}\left(w_{1}+w_{2}x_{i}-y_{i}\right)^%
 {2}.     The last line in the above pseudocode for this specific problem will become:        [      w  1        w  2      ]   :=    [      w  1        w  2      ]   -   η   [      2   (     w  1   +    w  2    x  i     -   y  i    )         2   x  i    (     w  1   +    w  2    x  i     -   y  i    )       ]      .     assign     subscript  w  1      subscript  w  2          subscript  w  1      subscript  w  2       η      2       subscript  w  1      subscript  w  2    subscript  x  i      subscript  y  i         2   subscript  x  i        subscript  w  1      subscript  w  2    subscript  x  i      subscript  y  i           \begin{bmatrix}w_{1}\\
 w_{2}\end{bmatrix}:=\begin{bmatrix}w_{1}\\
 w_{2}\end{bmatrix}-\eta\begin{bmatrix}2(w_{1}+w_{2}x_{i}-y_{i})\\
 2x_{i}(w_{1}+w_{2}x_{i}-y_{i})\end{bmatrix}.     Applications  Stochastic gradient descent is a popular algorithm for training a wide range of models in machine learning , including (linear) support vector machines , logistic regression (see, e.g., Vowpal Wabbit ) and graphical models . 6 When combined with the backpropagation algorithm, it is the de facto standard algorithm for training artificial neural networks .  SGD competes with the L-BFGS algorithm, which is also widely used. SGD has been used since at least 1960 for training linear regression models, originally under the name ADALINE . 7  Another popular stochastic gradient descent algorithm is the least mean squares (LMS) adaptive filter.  Extensions and variants  Many improvements on the basic SGD algorithm have been proposed and used. In particular, in machine learning, the need to set a learning rate (step size) has been recognized as problematic. Setting this parameter too high can cause the algorithm to diverge; setting it too low makes it slow to converge. A conceptually simple extension of SGD makes the learning rate a decreasing function of the iteration number   t   t   t   , giving a learning rate schedule , so that the first iterations cause large changes in the parameters, while the later ones do only fine-tuning. Such schedules have been known since the work of MacQueen on    k   k   k   -means clustering . 8  Momentum  Further proposals include the momentum method , which appeared in Rumelhart , Hinton and Williams ' seminal paper on backpropagation learning. 9 SGD with momentum remembers the update    Δ  w      normal-Δ  w    Δw   at each iteration, and determines the next update as a convex combination of the gradient and the previous update:       Δ  w   :=    η   ∇   Q  i     (  w  )    +   α  Δ  w       assign    normal-Δ  w       η   normal-∇   subscript  Q  i    w     α  normal-Δ  w      \Delta w:=\eta\nabla Q_{i}(w)+\alpha\Delta w         w  :=   w  -   η  Δ  w       assign  w    w    η  normal-Δ  w      w:=w-\eta\Delta w     The name momentum stems from an analogy to momentum in physics: the weight vector, thought of as a particle traveling through parameter space, incurs acceleration from the gradient of the loss (" force "). Unlike in classical SGD, it tends to keep traveling in the same direction, preventing oscillations. Momentum has been used successfully for several decades. 10  Averaging  Averaged SGD , invented independently by Ruppert and Polyak in the late 1980s, is ordinary SGD that records an average of its parameter vector over time. That is, the update is the same as for ordinary SGD, but the algorithm also keeps track of 11       w  ¯   =    1  t     ∑   i  =  0    t  -  1     w  i          normal-¯  w       1  t     superscript   subscript     i  0      t  1     subscript  w  i       \bar{w}=\frac{1}{t}\sum_{i=0}^{t-1}w_{i}   .  When optimization is done, this averaged parameter vector takes the place of   w   w   w   .  AdaGrad  AdaGrad (for adaptive gradient algorithm) is an enhanced SGD that automatically determines a per-parameter learning rate. 12 13 It still has a base learning rate   η   η   η   , but this is multiplied with the elements of a vector  that is thought of as the diagonal of a matrix      G  =    ∑   τ  =  1   t     g  τ    g  τ  𝖳         G    superscript   subscript     τ  1    t      subscript  g  τ    superscript   subscript  g  τ   𝖳       G=\sum_{\tau=1}^{t}g_{\tau}g_{\tau}^{\mathsf{T}}     where     g  τ   =    ∇   Q  i     (  w  )         subscript  g  τ      normal-∇   subscript  Q  i    w     g_{\tau}=\nabla Q_{i}(w)   , the gradient, at iteration   τ   τ   τ   . The diagonal is given by       G   j  ,  j    =    ∑   τ  =  1   t    g   τ  ,  j   2         subscript  G   j  j      superscript   subscript     τ  1    t    superscript   subscript  g   τ  j    2      G_{j,j}=\sum_{\tau=1}^{t}g_{\tau,j}^{2}   .  This vector is updated after every iteration. The formula for an update is now      w  :=   w  -     η   diag    (  G  )    -   1  2      ∘  g       assign  w    w      η  diag   superscript  G      1  2      g      w:=w-\eta\,\mathrm{diag}(G)^{-\frac{1}{2}}\circ g     or, written as per-parameter updates,        w  j   :=    w  j   -    η       G   j  ,  j     g  j      .     assign   subscript  w  j      subscript  w  j       η    absent     subscript  G   j  j     subscript  g  j       w_{j}:=w_{j}-\frac{\eta}{\sqrt{}}{G_{j,j}}g_{j}.     Each  gives rise to a scaling factor for the learning rate that applies to a single parameter . Since the denominator in this factor,      G  i    =     ∑   τ  =  1   t    g  τ  2            subscript  G  i        superscript   subscript     τ  1    t    superscript   subscript  g  τ   2       \sqrt{G_{i}}=\sqrt{\sum_{\tau=1}^{t}g_{\tau}^{2}}   is the ℓ 2 norm of previous derivatives, extreme parameter updates get dampened, while parameters that get few or small updates receive higher learning rates. 14  While designed for convex problems , AdaGrad has been successfully applied to non-convex optimization. 15  Notes  See also   Linear classifier  Online machine learning   References  Further reading    .     .     .     .     .     . (Extensive list of references)     .   Software   sgd : an LGPL C++ library which uses stochastic gradient descent to fit SVM and conditional random field models.  CRF-ADF A C# toolkit of stochastic gradient descent and its feature-frequency-adaptive variation for training conditional random field models.  Vowpal Wabbit : BSD licence, fast scalable learning by John Langford and others. Includes several stochastic gradient descent variants. Source repository on github   External links   Using stochastic gradient descent in C++, Boost, Ublas for linear regression   "  Category:Stochastic optimization  Category:Computational statistics  Category:M-estimators  Category:Machine learning algorithms  Category:Convex optimization     ↩  ↩  ↩  ↩  ↩  Jenny Rose Finkel, Alex Kleeman, Christopher D. Manning (2008). Efficient, Feature-based, Conditional Random Field Parsing. Proc. Annual Meeting of the ACL. ↩  ↩  Cited by ↩  ↩  ↩  ↩  ↩  ↩   ↩     