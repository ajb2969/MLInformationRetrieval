


Trigonometric interpolation




Trigonometric interpolation

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In mathematics, trigonometric interpolation is interpolation with trigonometric polynomials. Interpolation is the process of finding a function which goes through some given data points. For trigonometric interpolation, this function has to be a trigonometric polynomial, that is, a sum of sines and cosines of given periods. This form is especially suited for interpolation of periodic functions.
An important special case is when the given data points are equally spaced, in which case the solution is given by the discrete Fourier transform.
Formulation of the interpolation problem
A trigonometric polynomial of degree K has the form  This expression contains 2K + 1 coefficients, a0, a1, … aK, b1, …, bK, and we wish to compute those coefficients so that the function passes through N points:


 
  Since the trigonometric polynomial is periodic with period 2π, the N points can be distributed and ordered in one period as


 
  (Note that we do not in general require these points to be equally spaced.) The interpolation problem is now to find coefficients such that the trigonometric polynomial p satisfies the interpolation conditions.
Formulation in the complex plane
The problem becomes more natural if we formulate it in the complex plane. We can rewrite the formula for a trigonometric polynomial as 
 
 
 
  where i is the imaginary unit. If we set z = eix, then this becomes


 
  with


 
  This reduces the problem of trigonometric interpolation to that of polynomial interpolation on the unit circle. Existence and uniqueness for trigonometric interpolation now follows immediately from the corresponding results for polynomial interpolation.
For more information on formulation of trigonometric interpolating polynomials in the complex plane see , p135 Interpolation using Fourier Polynomials.
Solution of the problem
Under the above conditions, there exists a solution to the problem for any given set of data points {xk, yk} as long as N, the number of data points, is not larger than the number of coefficients in the polynomial, i.e., N ≤ 2K+1 (a solution may or may not exist if N>2K+1 depending upon the particular set of data points). Moreover, the interpolating polynomial is unique if and only if the number of adjustable coefficients is equal to the number of data points, i.e., N = 2K + 1. In the remainder of this article, we will assume this condition to hold true.
Odd number of points
If the number of points N is odd, say N=2K+1, applying the Lagrange formula for polynomial interpolation to the polynomial formulation in the complex plane yields that the solution can be written in the form  where


 
  The factor 
 
 
 
  in this formula compensates for the fact that the complex plane formulation contains also negative powers of 
 
 
 
  and is therefore not a polynomial expression in 
 
 
 
 . The correctness of this expression can easily be verified by observing that 
 
 
 
  and that 
 
 
 
  is a linear combination of the right powers of 
 
 
 
 . Upon using the identity  the coefficient 
 
 
 
  can be written in the form 
Even number of points
If the number of points N is even, say N=2K, applying the Lagrange formula for polynomial interpolation to the polynomial formulation in the complex plane yields that the solution can be written in the form  where {e^{ix_k}-e^{i\alpha_k}} \prod_{m=0,m\ne k}^{2K-1} \frac{e^{ix}-e^{ix_m}}{e^{ix_k}-e^{ix_m}}.|3}} Here, the constants 
 
 
 
  can be chosen freely. This is caused by the fact that the interpolating function () contains an odd number of unknown constants. A common choice is to require that the highest frequency is of the form a constant times 
 
 
 
 , i.e. the 
 
 
 
  term vanishes. In this case, we obtain by using () that () can we written in the form


 
  This yields


 
  and



Equidistant nodes
Further simplification of the problem is possible if nodes 
 
 
 
  are equidistant, i.e.


 
  see Zygmund for more details.
Odd number of points
Further simplification by using () would be an obvious approach, but is obviously involved. A much simpler approach is to consider the Dirichlet kernel


 
  where 
 
 
 
  is odd. It can easily be seen that 
 
 
 
  is a linear combination of the right powers of 
 
 
 
  and satisfies


 
  Since these two properties uniquely define the coefficients 
 
 
 
  in (), it follows that


 
 
  Here, the sinc-function prevents any singularities and is defined by



Even number of points
For 
 
 
 
  even, we define the Dirichlet kernel as


 
  Again, it can easily be seen that 
 
 
 
  is a linear combination of the right powers of 
 
 
 
 , does not contain the term 
 
 
 
  and satisfies


 
  Using these properties, it follows that the coefficients 
 
 
 
  in () are given by


 
 
  Note that 
 
 
 
  does not contain the 
 
 
 
  as well. Finally, note that the function 
 
 
 
  vanishes at all the points 
 
 
 
 . Multiples of this term can, therefore, always be added, but it is commonly left out.
Implementation
A matlab implementation of the above can be found here and is given by:
function P = triginterp(xi,x,y)
 % TRIGINTERP Trigonometric interpolation.
 % Input:
 %   xi  evaluation points for the interpolant (vector)
 %   x   equispaced interpolation nodes (vector, length N)
 %   y   interpolation values (vector, length N)
 % Output:
 %   P   values of the trigonometric interpolant (vector)
 N = length(x);
 % Adjust the spacing of the given independent variable.
 h = 2/N;
 scale = (x(2)-x(1)) / h;
 x = x/scale;  xi = xi/scale;
 % Evaluate interpolant.
 P = zeros(size(xi));
 for k = 1:N
   P = P + y(k)*trigcardinal(xi-x(k),N);
 end
 
 function tau = trigcardinal(x,N)
 ws = warning('off','MATLAB:divideByZero');
 % Form is different for even and odd N.
 if rem(N,2)==1   % odd
   tau = sin(N*pi*x/2) ./ (N*sin(pi*x/2));
 else             % even
   tau = sin(N*pi*x/2) ./ (N*tan(pi*x/2));
 end
 warning(ws)
 tau(x==0) = 1;     % fix value at x=0
Relation with the discrete Fourier transform
The special case in which the points xn are equally spaced is especially important. In this case, we have



The transformation that maps the data points yn to the coefficients ak, bk is obtained from the discrete Fourier transform (DFT) of order N.






(Because of the way the problem was formulated above, we have restricted ourselves to odd numbers of points. This is not strictly necessary; for even numbers of points, one includes another cosine term corresponding to the Nyquist frequency.)
The case of the cosine-only interpolation for equally spaced points, corresponding to a trigonometric interpolation when the points have even symmetry, was treated by Alexis Clairaut in 1754. In this case the solution is equivalent to a discrete cosine transform. The sine-only expansion for equally spaced points, corresponding to odd symmetry, was solved by Joseph Louis Lagrange in 1762, for which the solution is a discrete sine transform. The full cosine and sine interpolating polynomial, which gives rise to the DFT, was solved by Carl Friedrich Gauss in unpublished work around 1805, at which point he also derived a fast Fourier transform algorithm to evaluate it rapidly. Clairaut, Lagrange, and Gauss were all concerned with studying the problem of inferring the orbit of planets, asteroids, etc., from a finite set of observation points; since the orbits are periodic, a trigonometric interpolation was a natural choice. See also Heideman et al. (1984).
References

Kendall E. Atkinson, An Introduction to Numerical Analysis (2nd edition), Section 3.8. John Wiley & Sons, New York, 1988. ISBN 0-471-50023-2.
M. T. Heideman, D. H. Johnson, and C. S. Burrus, "Gauss and the history of the fast Fourier transform," IEEE ASSP Magazine 1 (4), 14–21 (1984).
A. Zygmund, Trigonometric Series Volume II, Chapter X, Cambridge University Press, 1988.

"
Category:Interpolation Category:Trigonometry

