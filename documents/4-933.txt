   Trigonometric interpolation      Trigonometric interpolation  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In mathematics , trigonometric interpolation is interpolation with trigonometric polynomials . Interpolation is the process of finding a function which goes through some given data points. For trigonometric interpolation, this function has to be a trigonometric polynomial, that is, a sum of sines and cosines of given periods. This form is especially suited for interpolation of periodic functions .  An important special case is when the given data points are equally spaced, in which case the solution is given by the discrete Fourier transform .  Formulation of the interpolation problem  A trigonometric polynomial of degree K has the form  This expression contains 2 K + 1 coefficients, a 0 , a 1 , … a K , b 1 , …, b K , and we wish to compute those coefficients so that the function passes through N points:        p   (   x  n   )    =   y  n    ,   n  =   0  ,  …  ,   N  -   1.         formulae-sequence      p   subscript  x  n     subscript  y  n      n   0  normal-…    N  1.       p(x_{n})=y_{n},\quad n=0,\ldots,N-1.\,   Since the trigonometric polynomial is periodic with period 2π, the N points can be distributed and ordered in one period as       0  ≤   x  0   <   x  1   <   x  2   <  …  <   x   N  -  1    <   2  π    .        0   subscript  x  0         subscript  x  1         subscript  x  2        normal-…        subscript  x    N  1           2  π      0\leq x_{0}   (Note that we do not in general require these points to be equally spaced.) The interpolation problem is now to find coefficients such that the trigonometric polynomial p satisfies the interpolation conditions.  Formulation in the complex plane  The problem becomes more natural if we formulate it in the complex plane . We can rewrite the formula for a trigonometric polynomial as      p   (  x  )    =    ∑   k  =   -  K    K     c  k    e   i  k  x       ,        p  x     superscript   subscript     k    K     K      subscript  c  k    superscript  e    i  k  x        p(x)=\sum_{k=-K}^{K}c_{k}e^{ikx},\,   where i is the imaginary unit . If we set z = e ix , then this becomes        q   (  z  )    =    ∑   k  =   -  K    K     c  k    z  k      ,        q  z     superscript   subscript     k    K     K      subscript  c  k    superscript  z  k       q(z)=\sum_{k=-K}^{K}c_{k}z^{k},\,   with        q   (   e   i  x    )    ≜   p   (  x  )     .     normal-≜    q   superscript  e    i  x       p  x     q(e^{ix})\triangleq p(x).\,   This reduces the problem of trigonometric interpolation to that of polynomial interpolation on the unit circle . Existence and uniqueness for trigonometric interpolation now follows immediately from the corresponding results for polynomial interpolation.  For more information on formulation of trigonometric interpolating polynomials in the complex plane see , p135 Interpolation using Fourier Polynomials .  Solution of the problem  Under the above conditions, there exists a solution to the problem for any given set of data points { x k , y k } as long as N , the number of data points, is not larger than the number of coefficients in the polynomial, i.e., N ≤ 2 K +1 (a solution may or may not exist if N >2 K +1 depending upon the particular set of data points). Moreover, the interpolating polynomial is unique if and only if the number of adjustable coefficients is equal to the number of data points, i.e., N = 2 K + 1. In the remainder of this article, we will assume this condition to hold true.  Odd number of points  If the number of points N is odd, say N=2K+1 , applying the Lagrange formula for polynomial interpolation to the polynomial formulation in the complex plane yields that the solution can be written in the form  where         t  k    (  x  )    =    e    -   i  K  x    +   i  K   x  k        ∏    m  =  0   ,   m  ≠  k     2  K       e   i  x    -   e   i   x  m        e   i   x  k     -   e   i   x  m          .         subscript  t  k   x      superscript  e        i  K  x      i  K   subscript  x  k        superscript   subscript  product   formulae-sequence    m  0     m  k       2  K         superscript  e    i  x     superscript  e    i   subscript  x  m         superscript  e    i   subscript  x  k      superscript  e    i   subscript  x  m           t_{k}(x)=e^{-iKx+iKx_{k}}\prod_{m=0,m\neq k}^{2K}\frac{e^{ix}-e^{ix_{m}}}{e^{%
 ix_{k}}-e^{ix_{m}}}.   The factor    e    -   i  K  x    +   i  K   x  k        superscript  e        i  K  x      i  K   subscript  x  k       e^{-iKx+iKx_{k}}   in this formula compensates for the fact that the complex plane formulation contains also negative powers of    e   i  x      superscript  e    i  x     e^{ix}   and is therefore not a polynomial expression in    e   i  x      superscript  e    i  x     e^{ix}   . The correctness of this expression can easily be verified by observing that      t  k    (   x  k   )    =  1         subscript  t  k    subscript  x  k    1    t_{k}(x_{k})=1   and that     t  k    (  x  )        subscript  t  k   x    t_{k}(x)   is a linear combination of the right powers of    e   i  x      superscript  e    i  x     e^{ix}   . Upon using the identity  the coefficient     t  k    (  x  )        subscript  t  k   x    t_{k}(x)   can be written in the form  Even number of points  If the number of points N is even, say N=2K , applying the Lagrange formula for polynomial interpolation to the polynomial formulation in the complex plane yields that the solution can be written in the form  where {e^{ix_k}-e^{i\alpha_k}} \prod_{m=0,m\ne k}^{2K-1} \frac{e^{ix}-e^{ix_m}}{e^{ix_k}-e^{ix_m}}.| 3 }} Here, the constants    α  k     subscript  α  k    \alpha_{k}   can be chosen freely. This is caused by the fact that the interpolating function () contains an odd number of unknown constants. A common choice is to require that the highest frequency is of the form a constant times    cos   (   K  x   )         K  x     \cos(Kx)   , i.e. the    sin   (   K  x   )         K  x     \sin(Kx)   term vanishes. In this case, we obtain by using () that () can we written in the form         t  k    (  x  )    =     cos   (    K  x   -    1  2    α  k    -    ∑    m  =  0   ,   m  ≠  k      2  K   -  1     x  m     )    +    ∑   m  =   -   (   K  -  1   )      K  -  1      c  k    e   i  m  x         2  N    sin   (     x  k   -   α  k    2   )      ∏    m  =  0   ,   m  ≠  k      2  K   -  1     sin   (     x  k   -   x  m    2   )        .         subscript  t  k   x             K  x       1  2    subscript  α  k      superscript   subscript    formulae-sequence    m  0     m  k         2  K   1     subscript  x  m        superscript   subscript     m      K  1        K  1       subscript  c  k    superscript  e    i  m  x          superscript  2  N          subscript  x  k    subscript  α  k    2      superscript   subscript  product   formulae-sequence    m  0     m  k         2  K   1           subscript  x  k    subscript  x  m    2         t_{k}(x)=\frac{\cos\left(Kx-\frac{1}{2}\alpha_{k}-\sum\limits_{m=0,m\neq k}^{2%
 K-1}x_{m}\right)+\sum\limits_{m=-(K-1)}^{K-1}c_{k}e^{imx}}{2^{N}\sin(\frac{x_{%
 k}-\alpha_{k}}{2})\prod\limits_{m=0,m\neq k}^{2K-1}\sin(\frac{x_{k}-x_{m}}{2})}.   This yields       α  k   =    ∑    m  =  0   ,   m  ≠  k      2  K   -  1     x  m         subscript  α  k     superscript   subscript    formulae-sequence    m  0     m  k         2  K   1     subscript  x  m      \alpha_{k}=\sum_{m=0,m\neq k}^{2K-1}x_{m}   and         t  k    (  x  )    =      sin   1  2     (   x  -   α  k    )      sin   1  2     (    x  k   -   α  k    )       ∏    m  =  0   ,   m  ≠  k      2  K   -  1       sin   1  2     (   x  -   x  m    )      sin   1  2     (    x  k   -   x  m    )        .         subscript  t  k   x             1  2      x   subscript  α  k           1  2       subscript  x  k    subscript  α  k        superscript   subscript  product   formulae-sequence    m  0     m  k         2  K   1            1  2      x   subscript  x  m           1  2       subscript  x  k    subscript  x  m          t_{k}(x)=\frac{\sin\frac{1}{2}(x-\alpha_{k})}{\sin\frac{1}{2}(x_{k}-\alpha_{k}%
 )}\prod_{m=0,m\neq k}^{2K-1}\frac{\sin\frac{1}{2}(x-x_{m})}{\sin\frac{1}{2}(x_%
 {k}-x_{m})}.     Equidistant nodes  Further simplification of the problem is possible if nodes    x  m     subscript  x  m    x_{m}   are equidistant, i.e.        x  m   =    2  π  m   N    ,       subscript  x  m       2  π  m   N     x_{m}=\frac{2\pi m}{N},   see Zygmund for more details.  Odd number of points  Further simplification by using () would be an obvious approach, but is obviously involved. A much simpler approach is to consider the Dirichlet kernel        D   (  x  ,  N  )    =    1  N   +    2  N     ∑   k  =  1     1  2    (   N  -  1   )      cos   (   k  x   )       =    sin    1  2   N  x     N   sin    1  2   x       ,          D   x  N        1  N       2  N     superscript   subscript     k  1        1  2     N  1         k  x                    1  2   N  x      N        1  2   x         D(x,N)=\frac{1}{N}+\frac{2}{N}\sum_{k=1}^{\frac{1}{2}(N-1)}\cos(kx)=\frac{\sin%
 \frac{1}{2}Nx}{N\sin\frac{1}{2}x},   where    N  >  0      N  0    N>0   is odd. It can easily be seen that    D   (  x  ,  N  )       D   x  N     D(x,N)   is a linear combination of the right powers of    e   i  x      superscript  e    i  x     e^{ix}   and satisfies        D   (   x  m   ,  N  )    =   {       0  for  m   ≠  0          1  for  m   =  0         .        D    subscript  x  m   N     cases      0  for  m   0   otherwise      1  for  m   0   otherwise     D(x_{m},N)=\begin{cases}0\text{ for }m\neq 0\\
 1\text{ for }m=0\end{cases}.   Since these two properties uniquely define the coefficients     t  k    (  x  )        subscript  t  k   x    t_{k}(x)   in (), it follows that       t  k    (  x  )        subscript  t  k   x    \displaystyle t_{k}(x)   Here, the sinc -function prevents any singularities and is defined by         sinc   x   =    sin  x   x    .        sinc  x       x   x     \mathrm{sinc}\,x=\frac{\sin x}{x}.     Even number of points  For   N   N   N   even, we define the Dirichlet kernel as        D   (  x  ,  N  )    =    1  N   +    1  N    cos    1  2   N  x     +    2  N     ∑   k  =  1      1  2   N   -  1     cos   (   k  x   )       =    sin    1  2   N  x     N   tan    1  2   x       .          D   x  N        1  N       1  N         1  2   N  x         2  N     superscript   subscript     k  1          1  2   N   1        k  x                    1  2   N  x      N        1  2   x         D(x,N)=\frac{1}{N}+\frac{1}{N}\cos\frac{1}{2}Nx+\frac{2}{N}\sum_{k=1}^{\frac{1%
 }{2}N-1}\cos(kx)=\frac{\sin\frac{1}{2}Nx}{N\tan\frac{1}{2}x}.   Again, it can easily be seen that    D   (  x  ,  N  )       D   x  N     D(x,N)   is a linear combination of the right powers of    e   i  x      superscript  e    i  x     e^{ix}   , does not contain the term    sin    1  2   N  x           1  2   N  x     \sin\frac{1}{2}Nx   and satisfies        D   (   x  m   ,  N  )    =   {       0  for  m   ≠  0          1  for  m   =  0         .        D    subscript  x  m   N     cases      0  for  m   0   otherwise      1  for  m   0   otherwise     D(x_{m},N)=\begin{cases}0\text{ for }m\neq 0\\
 1\text{ for }m=0\end{cases}.   Using these properties, it follows that the coefficients     t  k    (  x  )        subscript  t  k   x    t_{k}(x)   in () are given by       t  k    (  x  )        subscript  t  k   x    \displaystyle t_{k}(x)   Note that     t  k    (  x  )        subscript  t  k   x    t_{k}(x)   does not contain the    sin    1  2   N  x           1  2   N  x     \sin\frac{1}{2}Nx   as well. Finally, note that the function    sin    1  2   N  x           1  2   N  x     \sin\frac{1}{2}Nx   vanishes at all the points    x  m     subscript  x  m    x_{m}   . Multiples of this term can, therefore, always be added, but it is commonly left out.  Implementation  A matlab implementation of the above can be found here and is given by:  function P = triginterp(xi,x,y) % TRIGINTERP Trigonometric interpolation.  % Input:  %   xi  evaluation points for the interpolant (vector)  %   x   equispaced interpolation nodes (vector, length N)  %   y   interpolation values (vector, length N)  % Output:  %   P   values of the trigonometric interpolant (vector) N = length(x); % Adjust the spacing of the given independent variable. h = 2 /N;
 scale = (x( 2 )-x( 1 )) / h;
 x = x/scale;  xi = xi/scale; % Evaluate interpolant. P = zeros(size(xi));
 for k = 1 :N
   P = P + y(k)*trigcardinal(xi-x(k),N);
 end
 
 function tau = trigcardinal(x,N)
 ws = warning( 'off' , 'MATLAB:divideByZero' ); % Form is different for even and odd N. if rem(N, 2 )== 1  % odd tau = sin(N*pi*x/ 2 ) ./ (N*sin(pi*x/ 2 ));
 else % even tau = sin(N*pi*x/ 2 ) ./ (N*tan(pi*x/ 2 ));
 end
 warning(ws)
 tau(x== 0 ) = 1 ; % fix value at x=0  Relation with the discrete Fourier transform  The special case in which the points x n are equally spaced is especially important. In this case, we have         x  n   =   2  π   n  N     ,   0  ≤  n  <  N    .     formulae-sequence     subscript  x  n     2  π    n  N         0  n       N      x_{n}=2\pi\frac{n}{N},\qquad 0\leq n     The transformation that maps the data points y n to the coefficients a k , b k is obtained from the discrete Fourier transform (DFT) of order N.       Y  k   =    ∑   n  =  0    N  -  1       y  n      e   -   i  2  π    n  k   N              subscript  Y  k     superscript   subscript     n  0      N  1       subscript  y  n    superscript  e      i  2  π      n  k   N          Y_{k}=\sum_{n=0}^{N-1}y_{n}\ e^{-i2\pi\frac{nk}{N}}\,          y  n   =   p   (   x  n   )    =    1  N     ∑   k  =  0    N  -  1       Y  k      e   i  2  π    n  k   N                subscript  y  n     p   subscript  x  n             1  N     superscript   subscript     k  0      N  1       subscript  Y  k    superscript  e    i  2  π      n  k   N           y_{n}=p(x_{n})=\frac{1}{N}\sum_{k=0}^{N-1}Y_{k}\ e^{i2\pi\frac{nk}{N}}\,     (Because of the way the problem was formulated above, we have restricted ourselves to odd numbers of points. This is not strictly necessary; for even numbers of points, one includes another cosine term corresponding to the Nyquist frequency .)  The case of the cosine-only interpolation for equally spaced points, corresponding to a trigonometric interpolation when the points have even symmetry , was treated by Alexis Clairaut in 1754. In this case the solution is equivalent to a discrete cosine transform . The sine-only expansion for equally spaced points, corresponding to odd symmetry, was solved by Joseph Louis Lagrange in 1762, for which the solution is a discrete sine transform . The full cosine and sine interpolating polynomial, which gives rise to the DFT, was solved by Carl Friedrich Gauss in unpublished work around 1805, at which point he also derived a fast Fourier transform algorithm to evaluate it rapidly. Clairaut, Lagrange, and Gauss were all concerned with studying the problem of inferring the orbit of planets , asteroids , etc., from a finite set of observation points; since the orbits are periodic, a trigonometric interpolation was a natural choice. See also Heideman et al. (1984).  References   Kendall E. Atkinson, An Introduction to Numerical Analysis (2nd edition), Section 3.8. John Wiley & Sons, New York, 1988. ISBN 0-471-50023-2.  M. T. Heideman, D. H. Johnson, and C. S. Burrus, " Gauss and the history of the fast Fourier transform ," IEEE ASSP Magazine  1 (4), 14–21 (1984).  A. Zygmund, Trigonometric Series Volume II , Chapter X, Cambridge University Press, 1988.   "  Category:Interpolation  Category:Trigonometry  