   Global index grammar      Global index grammar   Global index grammars (GIGs) are a class of grammars introduced in Casta√±o (2004) 1 in order to model a number of phenomena, including natural language grammar and genome grammar. The easiest description of GIGs is by comparison to Indexed grammars . Whereas in indexed grammars, a stack of indices is associated with each nonterminal symbol , and can vary from one to another depending on the course of the derivation, in a GIG, there is a single global index stack that is manipulated in the course of the derivation (which is strictly leftmost for any rewrite operation that pushes a symbol to the stack). Because of the existence of a global stack, a GIG derivation is considered complete when there are no non-terminal symbols left to be rewritten, and the stack is empty.  Rule Description  GIG rules come in essentially four forms: rules that do something unconditionally, rules that do something conditioned on the topmost symbol of the stack, rules that push to the stack, and rules that pop from the stack. We can notate these in turn as:          A  ‚Üí  Œ±     normal-‚Üí  A  Œ±    A\to\alpha      (unconditionally rewrite A as   Œ±   Œ±   \alpha   , doing nothing to the stack)         A   ‚Üí  ùëì    Œ±      f   absent  normal-‚Üí    A  Œ±    A\xrightarrow[f]{}\alpha      (rewrite A as   Œ±   Œ±   \alpha   if f is the topmost stack symbol, doing nothing to the stack)         A   ‚Üí   +  f      x  Œ±         f    absent  normal-‚Üí    A    x  Œ±     A\xrightarrow[+f]{}x\alpha      (unconditionally rewrite A as    x  Œ±      x  Œ±    x\alpha   and push f to the stack)         A   ‚Üí   -  f     Œ±        f    absent  normal-‚Üí    A  Œ±    A\xrightarrow[-f]{}\alpha      (conditionally rewrite A as   Œ±   Œ±   \alpha   if f is the topmost symbol of the stack, then pop f from the stack)     where f is any index symbol,   Œ±   Œ±   \alpha   is any string of terminals and/or non-terminal symbols, and x is a terminal is a terminal symbol. Because occasionally a rewrite rule might need to be conditioned on the stack being in some sense empty , the symbol # is used as the bottom-most stack symbol, meaning an "empty" stack contains exactly one symbol, # .  The third rule form, the push rule, should be pointed out, as it differs from the pop rule in requiring that all push operations introduce at least one new terminal symbol to the derivation string. Without this constraint, the class of grammars would be Type-0 and thus Turing Complete.  Example  For this example, we will denote steps in the derivation by placing the derivation string over a stack, as in     a  b  X  d    [   f  f  g   ]         a  b  X  d    delimited-[]    f  f  g      \frac{abXd}{[ffg]}   .  GIGs (but not trGIGs as below) can generate the non-indexed language    {   w   w  +    :   w  ‚àà    {  a  ,  b  }   *    }     conditional-set    w   superscript  w       w   superscript   a  b        \{ww^{+}:w\in\{a,b\}^{*}\}   using the following grammar:      S  ‚Üí  A   S   |  B   S   |   C   |  œµ     fragments  S  normal-‚Üí  A  S  normal-|  B  S  normal-|  C  normal-|  œµ    S\to AS~{}|~{}BS~{}|~{}C~{}|~{}\epsilon       C  ‚Üí  R   C   |  L     fragments  C  normal-‚Üí  R  C  normal-|  L    C\to RC~{}|~{}L       R   ‚Üí   -  f      R  A         f    absent  normal-‚Üí    R    R  A     R\xrightarrow[-f]{}RA       R   ‚Üí   -  g      R  B         g    absent  normal-‚Üí    R    R  B     R\xrightarrow[-g]{}RB       R   ‚Üí  #    œµ      normal-#   absent  normal-‚Üí    R  œµ    R\xrightarrow[\#]{}\epsilon       A   ‚Üí   +  f     a        f    absent  normal-‚Üí    A  a    A\xrightarrow[+f]{}a       B   ‚Üí   +  g     b        g    absent  normal-‚Üí    B  b    B\xrightarrow[+g]{}b       L   ‚Üí   -  f     L   a   |  a     fragments  L     f    absent  normal-‚Üí    L  a  normal-|  a    L\xrightarrow[-f]{}La~{}|~{}a       L   ‚Üí   -  g     L   b   |  b     fragments  L     g    absent  normal-‚Üí    L  b  normal-|  b    L\xrightarrow[-g]{}Lb~{}|~{}b     A derivation for the string ababab is as follows:       S   [  #  ]    ‚Üí    A  S    [  #  ]    ‚Üí    a  S    [   #  f   ]    ‚Üí    a  B  S    [   #  f   ]    ‚Üí    a  b  S    [   #  f  g   ]    ‚Üí    a  b  C    [   #  f  g   ]    ‚Üí    a  b  R  C    [   #  f  g   ]    ‚Üí    a  b  R  B  C    [   #  f   ]         normal-‚Üí    S   delimited-[]  normal-#        A  S    delimited-[]  normal-#      normal-‚Üí        a  S    delimited-[]    normal-#  f       normal-‚Üí        a  B  S    delimited-[]    normal-#  f       normal-‚Üí        a  b  S    delimited-[]    normal-#  f  g       normal-‚Üí        a  b  C    delimited-[]    normal-#  f  g       normal-‚Üí        a  b  R  C    delimited-[]    normal-#  f  g       normal-‚Üí        a  b  R  B  C    delimited-[]    normal-#  f        \frac{S}{[\#]}\to\frac{AS}{[\#]}\to\frac{aS}{[\#f]}\to\frac{aBS}{[\#f]}\to%
 \frac{abS}{[\#fg]}\to\frac{abC}{[\#fg]}\to\frac{abRC}{[\#fg]}\to\frac{abRBC}{[%
 \#f]}           a  b  R  A  B  C    [  #  ]    ‚Üí    a  b  A  B  C    [  #  ]    ‚Üí    a  b  a  B  C    [   #  f   ]    ‚Üí    a  b  a  b  C    [   #  f  g   ]    ‚Üí    a  b  a  b  L    [   #  f  g   ]    ‚Üí    a  b  a  b  L  b    [   #  f   ]    ‚Üí    a  b  a  b  a  b    [  #  ]         normal-‚Üí      a  b  R  A  B  C    delimited-[]  normal-#        a  b  A  B  C    delimited-[]  normal-#      normal-‚Üí        a  b  a  B  C    delimited-[]    normal-#  f       normal-‚Üí        a  b  a  b  C    delimited-[]    normal-#  f  g       normal-‚Üí        a  b  a  b  L    delimited-[]    normal-#  f  g       normal-‚Üí        a  b  a  b  L  b    delimited-[]    normal-#  f       normal-‚Üí        a  b  a  b  a  b    delimited-[]  normal-#       \frac{abRABC}{[\#]}\to\frac{abABC}{[\#]}\to\frac{abaBC}{[\#f]}\to\frac{ababC}{%
 [\#fg]}\to\frac{ababL}{[\#fg]}\to\frac{ababLb}{[\#f]}\to\frac{ababab}{[\#]}     A similar derivation follows for abbabbabb , aaabaaabaaabaaab , and other such sentences.  Computational Power  The global index languages are a subset of the context sensitive languages, and a superset of the context free languages. While it is known that GIGs can generate the MIX/Bach language    {   p   (    a  n    b  n    c  n    )    :   n  ‚â•  1   }     conditional-set    p     superscript  a  n    superscript  b  n    superscript  c  n       n  1     \{p(a^{n}b^{n}c^{n}):n\geq 1\}   , where p is the string permutation function, and thus are capable of generating non-indexed languages, it is not known whether or not all IGs are also GIGs. It is entirely possible that GIGs and IGs describe merely-overlapping subsets of the CSLs.  trGIGs  A subclass of GIGs is the class of trGIGs, which make the pop and push rules uniform, by requiring that pop rules also introduce at least one terminal symbol into the derivation.  Example  An example of such a grammar, characterizing the language    {    a  m    b  n    c  m    d  n    :    m  ,  n   ‚â•  1   }     conditional-set     superscript  a  m    superscript  b  n    superscript  c  m    superscript  d  n       m  n   1     \{a^{m}b^{n}c^{m}d^{n}:m,n\geq 1\}   , is:        S      ‚Üí   A  D        A     ‚Üí  a  A   c   |  a  B  c       B      ‚Üí   +  f     b   B   |  b       D      ‚Üí   -  f     d   D   |  d         S   normal-‚Üí  absent    A  D      A   fragments  normal-‚Üí  a  A  c  normal-|  a  B  c     B   fragments     f    absent  normal-‚Üí    b  B  normal-|  b     D   fragments     f    absent  normal-‚Üí    d  D  normal-|  d      \begin{aligned}\displaystyle S&\displaystyle\to AD\\
 \displaystyle A&\displaystyle\to aAc~{}|~{}aBc\\
 \displaystyle B&\displaystyle\xrightarrow[+f]{}bB~{}|~{}b\\
 \displaystyle D&\displaystyle\xrightarrow[-f]{}dD~{}|~{}d\\
 \end{aligned}     The derivation for the string aabbbccddd is then:          S   [  #  ]         ‚Üí     A  D    [  #  ]     ‚Üí     a  A  c  D    [  #  ]     ‚Üí     a  a  B  c  c  D    [  #  ]     ‚Üí     a  a  b  B  c  c  D    [   #  f   ]     ‚Üí     a  a  b  b  B  c  c  D    [   #  f  f   ]             ‚Üí     a  a  b  b  b  c  c  D    [   #  f  f  f   ]     ‚Üí     a  a  b  b  b  c  c  d  D    [   #  f  f   ]     ‚Üí     a  a  b  b  b  c  c  d  d  D    [   #  f   ]     ‚Üí     a  a  b  b  b  c  c  d  d  d    [  #  ]              S   delimited-[]  normal-#       normal-‚Üí  absent      A  D    delimited-[]  normal-#      normal-‚Üí        a  A  c  D    delimited-[]  normal-#      normal-‚Üí        a  a  B  c  c  D    delimited-[]  normal-#      normal-‚Üí        a  a  b  B  c  c  D    delimited-[]    normal-#  f       normal-‚Üí        a  a  b  b  B  c  c  D    delimited-[]    normal-#  f  f          missing-subexpression      normal-‚Üí  absent      a  a  b  b  b  c  c  D    delimited-[]    normal-#  f  f  f       normal-‚Üí        a  a  b  b  b  c  c  d  D    delimited-[]    normal-#  f  f       normal-‚Üí        a  a  b  b  b  c  c  d  d  D    delimited-[]    normal-#  f       normal-‚Üí        a  a  b  b  b  c  c  d  d  d    delimited-[]  normal-#         \begin{aligned}\displaystyle\frac{S}{[\#]}&\displaystyle\to\frac{AD}{[\#]}\to%
 \frac{aAcD}{[\#]}\to\frac{aaBccD}{[\#]}\to\frac{aabBccD}{[\#f]}\to\frac{%
 aabbBccD}{[\#ff]}\\
 &\displaystyle\to\frac{aabbbccD}{[\#fff]}\to\frac{aabbbccdD}{[\#ff]}\to\frac{%
 aabbbccddD}{[\#f]}\to\frac{aabbbccddd}{[\#]}\\
 \end{aligned}     References    "  Category:Formal languages  Category:Grammar frameworks     Casta√±o, Jos√© M. 2004. Global Index Languages . Dissertation, Brandeis University. ‚Ü©     