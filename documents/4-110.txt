   Deterministic finite automaton      Deterministic finite automaton   thumb |250px |right|An example of a deterministic finite automaton that accepts only binary numbers that are multiples of 3. The state S 0 is both the start state and an accept state.  In theory of computation , a branch of theoretical computer science , a deterministic finite automaton ( DFA )—also known as deterministic finite state machine —is a finite state machine that accepts/rejects finite strings of symbols and only produces a unique computation (or run) of the automaton for each input string. 1 'Deterministic' refers to the uniqueness of the computation. In search of simplest models to capture the finite state machines, McCulloch and Pitts were among the first researchers to introduce a concept similar to finite automaton in 1943. 2 3  The figure on the right illustrates a deterministic finite automaton using a state diagram . In the automaton, there are three states: S0, S1, and S2 (denoted graphically by circles). The automaton takes a finite sequence of 0s and 1s as input. For each state, there is a transition arrow leading out to a next state for both 0 and 1. Upon reading a symbol, a DFA jumps deterministically from a state to another by following the transition arrow. For example, if the automaton is currently in state S0 and current input symbol is 1 then it deterministically jumps to state S1. A DFA has a start state (denoted graphically by an arrow coming in from nowhere) where computations begin, and a set of accept states (denoted graphically by a double circle) which help define when a computation is successful.  A DFA is defined as an abstract mathematical concept, but due to the deterministic nature of a DFA, it is implementable in hardware and software for solving various specific problems. For example, a DFA can model software that decides whether or not online user-input such as email addresses are valid. 4 (see: finite state machine for more practical examples).  DFAs recognize exactly the set of regular languages 5 which are, among other things, useful for doing lexical analysis and pattern matching. DFAs can be built from nondeterministic finite automata (NFAs) using the powerset construction method.  Formal definition  A deterministic finite automaton  M is a 5- tuple , ( Q , Σ, δ, q 0 , F ), consisting of   a finite set of states ( Q )  a finite set of input symbols called the alphabet (Σ)  a transition function (δ : Q × Σ → Q )  a start state ( q 0 ∈ Q )  a set of accept states ( F ⊆ Q )   Let w = a 1 a 2 ... a n be a string over the alphabet Σ. The automaton M accepts the string w if a sequence of states, r 0 ,r 1 , ..., r n , exists in Q with the following conditions:   r 0 = q 0  r i+1 = δ( r i , a i+1 ), for i = 0, ..., n−1  r n ∈ F .   In words, the first condition says that the machine starts in the start state q 0 . The second condition says that given each character of string w , the machine will transition from state to state according to the transition function δ. The last condition says that the machine accepts w if the last input of w causes the machine to halt in one of the accepting states. Otherwise, it is said that the automaton rejects the string. The set of strings that M accepts is the language  recognized by M and this language is denoted by L(M) .  A deterministic finite automaton without accept states and without a starting state is known as a transition system or semiautomaton .  For more comprehensive introduction of the formal definition see automata theory .  Example  The following example is of a DFA M , with a binary alphabet, which requires that the input contains an even number of 0s.   M = ( Q , Σ, δ, q 0 , F ) where   Q = { S 1 , S 2 },  Σ = {0, 1},  q 0 = S 1 ,  F = { S 1 }, and  δ is defined by the following state transition table :          0    1      S 1   S 2   S 1     S 2   S 1   S 2       The state S 1 represents that there has been an even number of 0s in the input so far, while S 2 signifies an odd number. A 1 in the input does not change the state of the automaton. When the input ends, the state will show whether the input contained an even number of 0s or not. If the input did contain an even number of 0s, M will finish in state S 1 , an accepting state, so the input string will be accepted.  The language recognized by M is the regular language given by the regular expression (1 + 0 (1*) 0)*, where "*" is the Kleene star , e.g., 1* denotes any non-negative number (possibly zero) of symbols "1".  Closure properties  If DFAs recognize the languages that are obtained by applying an operation on the DFA recognizable languages then DFAs are said to be closed under the operation. The DFAs are closed under the following operations.   Union  Intersection  Concatenation  Negation  Kleene closure  Reversal  Init  Quotient  Substitution  Homomorphism   Since DFAs are equivalent to nondeterministic finite automata (NFA), these closures may be proved using closure properties of NFA.  DFA as a transition monoid  Alternatively a run can be seen as a sequence of compositions of transition function with itself. Given an input symbol    a  ∈  Σ      a  normal-Σ    a\in\Sigma   , one may write the transition function as     δ  a   :   Q  →  Q      normal-:   subscript  δ  a    normal-→  Q  Q     \delta_{a}:Q\rightarrow Q   , using the simple trick of currying , that is, writing     δ   (  q  ,  a  )    =    δ  a    (  q  )          δ   q  a       subscript  δ  a   q     \delta(q,a)=\delta_{a}(q)   for all    q  ∈  Q      q  Q    q\in Q   . This way, the transition function can be seen in simpler terms: it's just something that "acts" on a state in Q, yielding another state. One may then consider the result of function composition repeatedly applied to the various functions    δ  a     subscript  δ  a    \delta_{a}   ,    δ  b     subscript  δ  b    \delta_{b}   , and so on. Using this notion we define     δ  ^   :    Q  ×   Σ  ⋆    →  Q      normal-:   normal-^  δ    normal-→    Q   superscript  normal-Σ  normal-⋆    Q     \widehat{\delta}:Q\times\Sigma^{\star}\rightarrow Q   . Given a pair of letters     a  ,  b   ∈  Σ       a  b   normal-Σ    a,b\in\Sigma   , one may define a new function    δ  ^     normal-^  δ    \widehat{\delta}   , by insisting that      δ  ^    a  b    =    δ  a   ∘   δ  b         subscript   normal-^  δ     a  b       subscript  δ  a    subscript  δ  b      \widehat{\delta}_{ab}=\delta_{a}\circ\delta_{b}   , where   ∘     \circ   denotes function composition. Clearly, this process can be recursively continued. So, we have the following recursive definition         δ  ^    (  q  ,  ϵ  )    =  q   .         normal-^  δ    q  ϵ    q    \widehat{\delta}(q,\epsilon)=q.   where   ϵ   ϵ   \epsilon   is empty string and         δ  ^    (  q  ,   w  a   )    =    δ  a    (    δ  ^    (  q  ,  w  )    )     .         normal-^  δ    q    w  a        subscript  δ  a      normal-^  δ    q  w       \widehat{\delta}(q,wa)=\delta_{a}(\widehat{\delta}(q,w)).   where     w  ∈   Σ  *    ,   a  ∈  Σ      formulae-sequence    w   superscript  normal-Σ       a  normal-Σ     w\in\Sigma^{*},a\in\Sigma   and    q  ∈  Q      q  Q    q\in Q   .    δ  ^     normal-^  δ    \widehat{\delta}   is defined for all words    w  ∈   Σ  *       w   superscript  normal-Σ      w\in\Sigma^{*}   . Repeated function composition forms a monoid . For the transition functions, this monoid is known as the transition monoid , or sometimes the transformation semigroup . The construction can also be reversed: given a    δ  ^     normal-^  δ    \widehat{\delta}   , one can reconstruct a   δ   δ   \delta   , and so the two descriptions are equivalent.  Local automata  A local automaton is a DFA for which all edges with the same label lead to a single vertex. Local automata accept the class of local languages , those for which membership of a word in the language is determined by a "sliding window" of length two on the word. 6 7  A Myhill graph over an alphabet A is a directed graph with vertex set  A and subsets of vertices labelled "start" and "finish". The language accepted by a Myhill graph is the set of directed paths from a start vertex to a finish vertex: the graph thus acts as an automaton. 8 The class of languages accepted by Myhill graphs is the class of local languages. 9  Random DFA  When the start state and accept states are ignored, a DFA of   n   n   n   -states and an alphabet of size   k   k   k   can be seen as a digraph of   n   n   n   vertices in which all vertices have   k   k   k   out-arcs labeled    1  ,  …  ,  k     1  normal-…  k    1,\ldots,k   (a   k   k   k   -out digraph). It is known that when    k  ≥  2      k  2    k\geq 2   is a fixed integer, with high probability, the largest strongly connected component (SCC) in such a   k   k   k   -out digraph chosen uniformly at random is of linear size and it can be reached by all vertices. 10 It has also been prove that if   k   k   k   is allowed to increase as   n   n   n   increases, then the whole digraph has a phase transition for strong connectivity similar to Erdős–Rényi model for connectivity. 11  In a random DFA, the maximum number of vertices reachable from one vertex is very close to the number of vertices in the largest SCC with high probably. 12 13 This is also true for the largest induced sub-digraph of minimum in-degree one, which can be seen as a directed version of    1   1   1   -core . 14  Advantages and disadvantages  DFAs were invented to model real world finite state machines in contrast to the concept of a Turing machine , which was too general to study properties of real world machines.  DFAs are one of the most practical models of computation, since there is a trivial linear time, constant-space, online algorithm to simulate a DFA on a stream of input. Also, there are efficient algorithms to find a DFA recognizing:   the complement of the language recognized by a given DFA.  the union/intersection of the languages recognized by two given DFAs.   Because DFAs can be reduced to a canonical form ( minimal DFAs ), there are also efficient algorithms to determine:   whether a DFA accepts any strings  whether a DFA accepts all strings  whether two DFAs recognize the same language  the DFA with a minimum number of states for a particular regular language   DFAs are equivalent in computing power to nondeterministic finite automata (NFAs). This is because, firstly any DFA is also an NFA, so an NFA can do what a DFA can do. Also, given an NFA, using the powerset construction one can build a DFA that recognizes the same language as the NFA, although the DFA could have exponentially larger number of states than the NFA. 15 16  On the other hand, finite state automata are of strictly limited power in the languages they can recognize; many simple languages, including any problem that requires more than constant space to solve, cannot be recognized by a DFA. The classical example of a simply described language that no DFA can recognize is bracket or Dyck language , i.e., the language that consists of properly paired brackets such as word "(()())". Intuitively, no DFA can recognize the bracket language because there is no limit to recursion , i.e., one can always embed another pair of brackets inside, and hence would require an infinite number of states to recognize. Another simpler example is the language consisting of strings of the form ''a n b n for some finite but arbitrary number of a 's, followed by an equal number of b 's. 17  See also   Acyclic deterministic finite automata  DFA minimization  Monadic second-order logic  Quantum finite automata  Read-only right moving Turing Machines  Turing machine  Two-way deterministic finite automaton   Notes    References           . Section 1.1: Finite Automata, pp. 31–47. Subsection "Decidable Problems Concerning Regular Languages" of section 4.1: Decidable Languages, pp. 152–155.4.4 DFA can accept only regular language   External links   DFA Simulator - an open source graphical editor and simulator of DFA   "  Category:Models of computation  Category:Automata theory     Hopcroft 2001 : ↩  McCulloch and Pitts (1943) : ↩  Rabin and Scott (1959) : ↩  ↩   Lawson (2004) p.129 ↩  Sakarovitch (2009) p.228 ↩   Lawson (2004) p.128 ↩  ↩  ↩   ↩   Sakarovitch (2009) p.105 ↩  Lawson (2004) p.63 ↩  Lawson (2004) p.46 ↩     