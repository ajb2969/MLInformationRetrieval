


Socialist millionaire




Socialist millionaire

In cryptography, the socialist millionaire problem1 is one in which two millionaires want to determine if their wealth is equal without disclosing any information about their riches to each other. It is a variant of the Millionaire's Problem23 whereby two millionaires wish to compare their riches to determine who has the most wealth without disclosing any information about their riches to each other.
It is often used as a cryptographic protocol that allows two parties to verify the identity of the remote party through the use of a shared secret, avoiding a man-in-the-middle attack without the inconvenience of manually comparing public key fingerprints through an outside channel. In effect, a relatively weak password/passphrase in natural language can be used.
Motivation
Alice and Bob have secret values $\scriptstyle x$ and $\scriptstyle y$, respectively. Alice and Bob wish to learn if $\scriptstyle x ~=~ y$ without allowing either party to learn anything else about the other's secret value.
A passive attacker simply spying on the messages Alice and Bob exchange learns nothing about $\scriptstyle x$ and $\scriptstyle y$, not even whether $\scriptstyle x ~=~ y$.
Even if one of the parties is dishonest and deviates from the protocol, that person cannot learn anything more than if $\scriptstyle x ~=~ y$.
An active attacker capable of arbitrarily interfering with Alice and Bob's communication (a man-in-the-middle) cannot learn more than a passive attacker and cannot affect the outcome of the protocol other than to make it fail.
Therefore, the protocol can be used to authenticate whether two parties have the same secret information. Popular instant message cryptography package Off-the-Record Messaging uses the Socialist Millionaire protocol for authentication, in which the secrets $\scriptstyle x$ and $\scriptstyle y$ contain information about both parties' long-term authentication public keys as well as information entered by the users themselves.
Off The Record Messaging protocol
(Figure)
State Machine Process for the Socialist Millionaire Protocol (SMP) implemented by GoldBug.sf.net Instant Messenger (http://goldbug.sf.net) and Spot-On Applikation (http://spot-on.sf.net).

A prime, $\scriptstyle p$, and any non-identity element, $\scriptstyle h$, of $\scriptstyle (\mathbb{Z}/p\mathbb{Z})^*$ are agreed on before the protocol, and in practice are generally fixed in a given implementation. For example, in the Off-the-Record Messaging protocol, $\scriptstyle p$ is a specific fixed 1,536-bit prime. $\scriptstyle h$ is then a generator of $\scriptstyle (\mathbb{Z}/p\mathbb{Z})^*$, and all operations are performed modulo $\scriptstyle p$, or in other words, in the multiplicative group, $\scriptstyle (\mathbb{Z}/p\mathbb{Z})^*$.
By $\scriptstyle \langle h|a,\,b\rangle$, denote the secure multiparty computation, Diffie–Hellman–Merkle key exchange, which, for the integers, $\scriptstyle a,\, b$, returns $\scriptstyle h^{ab}$ to each party:

Alice calculates $\scriptstyle h^a$ and sends it to Bob, who then calculates $\scriptstyle \left(h^a\right)^b ~\equiv~ h^{ab}$.
Bob calculates $\scriptstyle h^b$ and sends it to Alice, who then calculates $\scriptstyle \left(h^b\right)^a ~\equiv~ h^{ba}$.

$\scriptstyle h^{ab} ~\equiv~ h^{ba}$ as $\scriptstyle (\mathbb{Z}/p\mathbb{Z})^*$ is Abelian. Note that this procedure is insecure against man-in-the-middle attacks.
The Socialist millionaire protocol only has a few steps that are not part of the above procedure, and the security of each relies on the difficulty of the discrete logarithm problem, just as the above does. All sent values also include zero-knowledge proofs that they were generated according to protocol.
Part of the security also relies on random secrets. However, as written below, the protocol is vulnerable to poisoning if Alice or Bob chooses any of $\scriptstyle a$, $\scriptstyle b$, $\scriptstyle \alpha$, or $\scriptstyle \beta$ to be zero. To solve this problem, each party must check during the Diffie-Hellman exchanges that none of the $\scriptstyle h^a,\, h^b,\, h^\alpha,$ or $\scriptstyle h^\beta$ that they receive is equal to 1. It is also necessary to check that $\scriptstyle P_a ~\neq~ P_b$ and $\scriptstyle Q_a ~\neq~ Q_b$.




Alice
Multiparty
Bob




1
Message $x$
 Random $a, \alpha, r$
Public $p, h$
Message $y$
 Random $b, \beta, s$


2

Secure $g=\langle h|a, b\rangle$



3

Secure $\gamma=\langle h|\alpha, \beta\rangle$



4
Test $h^b \neq 1$, $h^\beta \neq 1$

Test $h^a \neq 1$, $h^\alpha \neq 1$


5
$\begin{align}
   P_a &= \gamma^r \\
   Q_a &= h^r g^x
 \end{align}$

$\begin{align}
   P_b &= \gamma^s \\
   Q_b &= h^s g^y
 \end{align}$


6

Insecure exchange $P_a, Q_a, P_b, Q_b$



7

Secure $c = \left\langle\left. Q_aQ_b^{-1} \right| \alpha, \beta \right\rangle$



8
Test $P_a \neq P_b$, $Q_a \neq Q_b$

Test $P_a \neq P_b$, $Q_a \neq Q_b$


9
Test $c = P_aP_b^{-1}$

Test $c = P_aP_b^{-1}$



Note that:
$$\begin{align}
   P_aP_b^{-1} &= \gamma^r \gamma^{-s} = \gamma^{r - s} \\
               &= h^{\alpha\beta(r - s)}
 \end{align}$$
and therefore
$$\begin{align}
   c &= \left(Q_aQ_b^{-1}\right)^{\alpha\beta} \\
     &= \left(h^r g^x h^{-s} g^{-y}\right)^{\alpha\beta} 
      = \left(h^{r - s} g^{x - y}\right)^{\alpha\beta} \\
     &= \left(h^{r - s} h^{ab(x - y)}\right)^{\alpha\beta}
      = h^{\alpha\beta(r - s)} h^{\alpha\beta ab(x - y)} \\
     &= \left(P_aP_b^{-1}\right) h^{\alpha\beta ab(x - y)}
 \end{align}$$.
Because of the random values stored in secret by the other party, neither party can force $\scriptstyle c$ and $\scriptstyle P_aP_b^{-1}$ to be equal unless $\scriptstyle x$ equals $\scriptstyle y$, in which case $\scriptstyle h^{\alpha\beta ab(x - y)} ~=~ h^0 ~=~ 1$. This proves correctness.
See also

Off-the-Record Messaging
Zero-knowledge proof

References


External links

Description of the OTR-Messaging Protocol version 2
The Socialist Millionaire Problem - Explain it like I'm Five
Goldbug Messenger, which uses an implementation the Socialist Millionaire Protocol

"
Category:Cryptographic protocols



↩
↩
↩




