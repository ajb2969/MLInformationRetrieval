   LU decomposition      LU decomposition   In numerical analysis , LU decomposition (where 'LU' stands for 'lower upper', and also called LU factorization ) factors a matrix as the product of a lower triangular matrix and an upper triangular matrix. The product sometimes includes a permutation matrix as well. The LU decomposition can be viewed as the matrix form of Gaussian elimination . Computers usually solve square systems of linear equations using the LU decomposition, and it is also a key step when inverting a matrix, or computing the determinant of a matrix. The LU decomposition was introduced by mathematician Alan Turing in 1948. 1 2  Definitions  (Figure)  LDU decomposition of a Walsh matrix   Let A be a square matrix. An LU factorization refers to the factorization of A, with proper row and/or column orderings or permutations, into two factors, a lower triangular matrix L and an upper triangular matrix U ,       A  =   L  U    ,      A    L  U     A=LU,\,   In the lower triangular matrix all elements above the diagonal are zero, in the upper triangular matrix, all the elements below the diagonal are zero. For example, for a 3-by-3 matrix A , its LU decomposition looks like this:        [      a  11      a  12      a  13        a  21      a  22      a  23        a  31      a  32      a  33      ]   =    [      l  11     0    0       l  21      l  22     0       l  31      l  32      l  33      ]    [      u  11      u  12      u  13       0     u  22      u  23       0    0     u  33      ]     .         subscript  a  11    subscript  a  12    subscript  a  13      subscript  a  21    subscript  a  22    subscript  a  23      subscript  a  31    subscript  a  32    subscript  a  33          subscript  l  11   0  0     subscript  l  21    subscript  l  22   0     subscript  l  31    subscript  l  32    subscript  l  33        subscript  u  11    subscript  u  12    subscript  u  13     0   subscript  u  22    subscript  u  23     0  0   subscript  u  33        \begin{bmatrix}a_{11}&a_{12}&a_{13}\\
 a_{21}&a_{22}&a_{23}\\
 a_{31}&a_{32}&a_{33}\end{bmatrix}=\begin{bmatrix}l_{11}&0&0\\
 l_{21}&l_{22}&0\\
 l_{31}&l_{32}&l_{33}\end{bmatrix}\begin{bmatrix}u_{11}&u_{12}&u_{13}\\
 0&u_{22}&u_{23}\\
 0&0&u_{33}\end{bmatrix}.     Without a proper ordering or permutations in the matrix, the factorization may fail to materialize. For example, it is easy to verify (by expanding the matrix multiplication) that     a  11   =    l  11    u  11         subscript  a  11      subscript  l  11    subscript  u  11      a_{11}=l_{11}u_{11}   . If     a  11   =  0       subscript  a  11   0    a_{11}=0   , then at least one of    l  11     subscript  l  11    l_{11}   and    u  11     subscript  u  11    u_{11}   has to be zero, which implies either L or U is singular . This is impossible if A is nonsingular. This is a procedural problem. It can be removed by simply reordering the rows of A so that the first element of the permuted matrix is nonzero. The same problem in subsequent factorization steps can be removed the same way, see the basic procedure below.  It turns out that a proper permutation in rows (or columns) is sufficient for the LU factorization. The LU factorization with Partial Pivoting refers often to the LU factorization with row permutations only,        P  A   =   L  U    ,        P  A     L  U     PA=LU,\,   where L and U are again lower and upper triangular matrices, and P is a permutation matrix which, when left-multiplied to A , reorders the rows of A . It turns out that all square matrices can be factorized in this form, 3 and the factorization is numerically stable in practice. 4 This makes LUP decomposition a useful technique in practice.  An LU factorization with full pivoting involves both row and column permutations,        P  A  Q   =   L  U    ,        P  A  Q     L  U     PAQ=LU,\,   where L , U and P are defined as before, and Q is a permutation matrix that reorders the columns of A . 5  An LDU decomposition is a decomposition of the form       A  =   L  D  U    ,      A    L  D  U     A=LDU,\,   where D is a diagonal matrix and L and U are unit triangular matrices, meaning that all the entries on the diagonals of L and U are one.  Above we required that A be a square matrix, but these decompositions can all be generalized to rectangular matrices as well. In that case, L and D are square matrices both of which have the same number of rows as A , and U has exactly the same dimensions as A . Upper triangular should be interpreted as having only zero entries below the main diagonal, which starts at the upper left corner.  Example  We factorize the following 2-by-2 matrix:        [     4    3      6    3     ]   =    [      l  11     0       l  21      l  22      ]    [      u  11      u  12       0     u  22      ]     .        4  3    6  3         subscript  l  11   0     subscript  l  21    subscript  l  22        subscript  u  11    subscript  u  12     0   subscript  u  22        \begin{bmatrix}4&3\\
 6&3\end{bmatrix}=\begin{bmatrix}l_{11}&0\\
 l_{21}&l_{22}\end{bmatrix}\begin{bmatrix}u_{11}&u_{12}\\
 0&u_{22}\end{bmatrix}.   One way to find the LU decomposition of this simple matrix would be to simply solve the linear equations by inspection. Expanding the matrix multiplication gives         l  11   ⋅   u  11    +   0  ⋅  0    =  4         normal-⋅   subscript  l  11    subscript  u  11     normal-⋅  0  0    4    l_{11}\cdot u_{11}+0\cdot 0=4            l  11   ⋅   u  12    +   0  ⋅   u  22     =  3         normal-⋅   subscript  l  11    subscript  u  12     normal-⋅  0   subscript  u  22     3    l_{11}\cdot u_{12}+0\cdot u_{22}=3            l  21   ⋅   u  11    +    l  22   ⋅  0    =  6         normal-⋅   subscript  l  21    subscript  u  11     normal-⋅   subscript  l  22   0    6    l_{21}\cdot u_{11}+l_{22}\cdot 0=6            l  21   ⋅   u  12    +    l  22   ⋅   u  22     =  3.         normal-⋅   subscript  l  21    subscript  u  12     normal-⋅   subscript  l  22    subscript  u  22     3.    l_{21}\cdot u_{12}+l_{22}\cdot u_{22}=3.     This system of equations is underdetermined . In this case any two non-zero elements of L and U matrices are parameters of the solution and can be set arbitrarily to any non-zero value. Therefore to find the unique LU decomposition, it is necessary to put some restriction on L and U matrices. For example, we can conveniently require the lower triangular matrix L to be a unit triangular matrix (i.e. set all the entries of its main diagonal to ones). Then the system of equations has the following solution:       l  21   =  1.5       subscript  l  21   1.5    l_{21}=1.5          u  11   =  4       subscript  u  11   4    u_{11}=4          u  12   =  3       subscript  u  12   3    u_{12}=3          u  22   =   -  1.5.        subscript  u  22     1.5.     u_{22}=-1.5.     Substituting these values into the LU decomposition above yields        [     4    3      6    3     ]   =    [     1    0      1.5    1     ]    [     4    3      0     -  1.5      ]     .        4  3    6  3        1  0    1.5  1      4  3    0    1.5        \begin{bmatrix}4&3\\
 6&3\end{bmatrix}=\begin{bmatrix}1&0\\
 1.5&1\end{bmatrix}\begin{bmatrix}4&3\\
 0&-1.5\end{bmatrix}.     Existence and uniqueness  Square matrices  Any square matrix   A   A   A   admits an LUP factorization. 6 If   A   A   A   is invertible , then it admits an LU (or LDU ) factorization if and only if all its leading principal minors are nonsingular. 7 If   A   A   A   is a singular matrix of rank   k   k   k   , then it admits an LU factorization if the first   k   k   k   leading principal minors are nonsingular, although the converse is not true. 8  If a square, invertible matrix has an LDU factorization with all diagonal entries of L and U equal to 1, then the factorization is unique. 9 In that case, the LU factorization is also unique if we require that the diagonal of   L   L   L   (or   U   U   U   ) consists of ones.  Symmetric positive definite matrices  If A is a symmetric (or Hermitian , if A is complex) positive definite matrix, we can arrange matters so that U is the conjugate transpose of L . That is, we can write A as       A  =   L   L  *     .      A    L   superscript  L       A=LL^{*}.\,     This decomposition is called the Cholesky decomposition . The Cholesky decomposition always exists and is unique. Furthermore, computing the Cholesky decomposition is more efficient and numerically more stable than computing some other LU decompositions.  General matrices  For a (not necessarily invertible) matrix over any field, the exact necessary and sufficient conditions under which it has an LU factorization are known. The conditions are expressed in terms of the ranks of certain submatrices. The Gaussian elimination algorithm for obtaining LU decomposition has also been extended to this most general case. 10  Algorithms  The LU decomposition is basically a modified form of Gaussian elimination . We transform the matrix A into an upper triangular matrix U by eliminating the entries below the main diagonal. The Doolittle algorithm does the elimination column by column starting from the left, by multiplying A to the left with atomic lower triangular matrices. It results in a unit lower triangular matrix and an upper triangular matrix. The Crout algorithm is slightly different and constructs a lower triangular matrix and a unit upper triangular matrix.  Computing the LU decomposition using either of these algorithms requires 2 n 3 / 3 floating point operations, ignoring lower order terms. Partial pivoting adds only a quadratic term; this is not the case for full pivoting. 11  Closed formula  When an LDU factorization exists and is unique there is a closed (explicit) formula for the elements of L, D, and U in terms of ratios of determinants of certain submatrices of the original matrix A. 12 In particular,     D  1   =   A   1  ,  1         subscript  D  1    subscript  A   1  1      D_{1}=A_{1,1}   and for    i  =   2  ,  …  ,  n       i   2  normal-…  n     i=2,\ldots,n   ,    D  i     subscript  D  i    D_{i}   is the ratio of the    i   t  h      superscript  i    t  h     i^{th}   principal submatrix to the     (   i  -  1   )    t  h      superscript    i  1     t  h     (i-1)^{th}   principal submatrix.  Doolittle algorithm  Given an N × N matrix      A  =   (   a   n  ,  n    )       A   subscript  a   n  n      A=(a_{n,n})     we define       A   (  0  )    :=  A     assign   superscript  A  0   A    A^{(0)}:=A     We eliminate the matrix elements below the main diagonal in the n -th column of A ( n − 1) by adding to the i -th row of this matrix the n -th row multiplied by       l   i  ,  n    :=   -    a   i  ,  n    (   n  -  1   )     a   n  ,  n    (   n  -  1   )         assign   subscript  l   i  n         superscript   subscript  a   i  n      n  1     superscript   subscript  a   n  n      n  1        l_{i,n}:=-\frac{a_{i,n}^{(n-1)}}{a_{n,n}^{(n-1)}}     for    i  =    n  +  1   ,  …  ,  N       i     n  1   normal-…  N     i=n+1,\ldots,N   . This can be done by multiplying A ( n − 1) to the left with the lower triangular matrix        L  n   =   (     1                0         ⋱                        1                      l    n  +  1   ,  n      ⋱                  ⋮       ⋱         0        l   N  ,  n            1     )    .       subscript  L  n     1  absent  absent  absent  absent  0    absent  normal-⋱  absent  absent  absent  absent    absent  absent  1  absent  absent  absent    absent  absent   subscript  l     n  1   n    normal-⋱  absent  absent    absent  absent  normal-⋮  absent  normal-⋱  absent    0  absent   subscript  l   N  n    absent  absent  1      L_{n}=\begin{pmatrix}1&&&&&0\\
 &\ddots&&&&\\
 &&1&&&\\
 &&l_{n+1,n}&\ddots&&\\
 &&\vdots&&\ddots&\\
 0&&l_{N,n}&&&1\end{pmatrix}.     We set        A   (  n  )    :=    L  n    A   (   n  -  1   )      .     assign   superscript  A  n      subscript  L  n    superscript  A    n  1       A^{(n)}:=L_{n}A^{(n-1)}.     After N − 1 steps, we eliminated all the matrix elements below the main diagonal, so we obtain an upper triangular matrix A ( N − 1) . We find the decomposition       A  =    L  1   -  1     L  1    A   (  0  )     =    L  1   -  1     A   (  1  )     =    L  1   -  1     L  2   -  1     L  2    A   (  1  )     =    L  1   -  1     L  2   -  1     A   (  2  )     =  ⋯  =    L  1   -  1    …   L   N  -  1    -  1     A   (   N  -  1   )      .        A     superscript   subscript  L  1     1     subscript  L  1    superscript  A  0            superscript   subscript  L  1     1     superscript  A  1            superscript   subscript  L  1     1     superscript   subscript  L  2     1     subscript  L  2    superscript  A  1            superscript   subscript  L  1     1     superscript   subscript  L  2     1     superscript  A  2         normal-⋯          superscript   subscript  L  1     1    normal-…   superscript   subscript  L    N  1      1     superscript  A    N  1        A=L_{1}^{-1}L_{1}A^{(0)}=L_{1}^{-1}A^{(1)}=L_{1}^{-1}L_{2}^{-1}L_{2}A^{(1)}=L_%
 {1}^{-1}L_{2}^{-1}A^{(2)}=\cdots=L_{1}^{-1}\ldots L_{N-1}^{-1}A^{(N-1)}.     Denote the upper triangular matrix A ( N − 1) by U , and    L  =    L  1   -  1    …   L   N  -  1    -  1         L     superscript   subscript  L  1     1    normal-…   superscript   subscript  L    N  1      1       L=L_{1}^{-1}\ldots L_{N-1}^{-1}   . Because the inverse of a lower triangular matrix L n is again a lower triangular matrix, and the multiplication of two lower triangular matrices is again a lower triangular matrix, it follows that L is a lower triangular matrix. Moreover, it can be seen that       L  =   (     1                0       -   l   2  ,  1       ⋱                        1               ⋮        -   l    n  +  1   ,  n       ⋱                  ⋮       1          -   l   N  ,  1           -   l   N  ,  n           -   l   N  ,   N  -  1        1     )    .      L    1  absent  absent  absent  absent  0       subscript  l   2  1     normal-⋱  absent  absent  absent  absent    absent  absent  1  absent  absent  absent    normal-⋮  absent     subscript  l     n  1   n     normal-⋱  absent  absent    absent  absent  normal-⋮  absent  1  absent       subscript  l   N  1     absent     subscript  l   N  n     absent     subscript  l   N    N  1      1      L=\begin{pmatrix}1&&&&&0\\
 -l_{2,1}&\ddots&&&&\\
 &&1&&&\\
 \vdots&&-l_{n+1,n}&\ddots&&\\
 &&\vdots&&1&\\
 -l_{N,1}&&-l_{N,n}&&-l_{N,N-1}&1\end{pmatrix}.     We obtain    A  =   L  U       A    L  U     A=LU   .  It is clear that in order for this algorithm to work, one needs to have     a   n  ,  n    (   n  -  1   )    ≠  0       superscript   subscript  a   n  n      n  1    0    a_{n,n}^{(n-1)}\not=0   at each step (see the definition of    l   i  ,  n      subscript  l   i  n     l_{i,n}   ). If this assumption fails at some point, one needs to interchange n -th row with another row below it before continuing. This is why the LU decomposition in general looks like      P   -  1    A   =   L  U          superscript  P    1    A     L  U     P^{-1}A=LU   .  Crout and LUP algorithms  The LUP decomposition algorithm by Cormen et al. generalizes Crout matrix decomposition . It can be described as follows.   If   A   A   A   has a nonzero entry in its first row, then take a permutation matrix    P  1     subscript  P  1    P_{1}   such that    A   P  1       A   subscript  P  1     AP_{1}   has a nonzero entry in its upper left corner. Otherwise, take for    P  1     subscript  P  1    P_{1}   the identity matrix. Let     A  1   =   A   P  1         subscript  A  1     A   subscript  P  1      A_{1}=AP_{1}   .  Let    A  2     subscript  A  2    A_{2}   be the matrix that one gets from    A  1     subscript  A  1    A_{1}   by deleting both the first row and the first column. Decompose     A  2   =    L  2    U  2    P  2         subscript  A  2      subscript  L  2    subscript  U  2    subscript  P  2      A_{2}=L_{2}U_{2}P_{2}   recursively. Make   L   L   L   from    L  2     subscript  L  2    L_{2}   by first adding a zero row above and then adding the first column of    A  1     subscript  A  1    A_{1}   at the left.  Make    U  3     subscript  U  3    U_{3}   from    U  2     subscript  U  2    U_{2}   by first adding a zero row above and a zero column at the left and then replacing the upper left entry (which is 0 at this point) by 1. Make    P  3     subscript  P  3    P_{3}   from    P  2     subscript  P  2    P_{2}   in a similar manner and define     A  3   =    A  1   /   P  3    =    A   P  1    /   P  3           subscript  A  3      subscript  A  1    subscript  P  3             A   subscript  P  1     subscript  P  3       A_{3}=A_{1}/P_{3}=AP_{1}/P_{3}   . Let   P   P   P   be the inverse of     P  1   /   P  3        subscript  P  1    subscript  P  3     P_{1}/P_{3}   .  At this point,    A  3     subscript  A  3    A_{3}   is the same as    L   U  3       L   subscript  U  3     LU_{3}   , except (possibly) at the first row. If the first row of   A   A   A   is zero, then     A  3   =   L   U  3         subscript  A  3     L   subscript  U  3      A_{3}=LU_{3}   , since both have first row zero, and    A  =   L   U  3   P       A    L   subscript  U  3   P     A=LU_{3}P   follows, as desired. Otherwise,    A  3     subscript  A  3    A_{3}   and    L   U  3       L   subscript  U  3     LU_{3}   have the same nonzero entry in the upper left corner, and     A  3   =   L   U  3    U  1         subscript  A  3     L   subscript  U  3    subscript  U  1      A_{3}=LU_{3}U_{1}   for some upper triangular square matrix    U  1     subscript  U  1    U_{1}   with ones on the diagonal (    U  1     subscript  U  1    U_{1}   clears entries of    L   U  3       L   subscript  U  3     LU_{3}   and adds entries of    A  3     subscript  A  3    A_{3}   by way of the upper left corner). Now    A  =   L   U  3    U  1   P       A    L   subscript  U  3    subscript  U  1   P     A=LU_{3}U_{1}P   is a decomposition of the desired form.   Theoretical complexity  If two matrices of order n can be multiplied in time M ( n ), where M ( n ) ≥ n a for some a >2, then the LU decomposition can be computed in time O( M ( n )). 13 This means, for example, that an O( n 2.376 ) algorithm exists based on the Coppersmith–Winograd algorithm .  Sparse matrix decomposition  Special algorithms have been developed for factorizing large sparse matrices . These algorithms attempt to find sparse factors L and U . Ideally, the cost of computation is determined by the number of nonzero entries, rather than by the size of the matrix.  These algorithms use the freedom to exchange rows and columns to minimize fill-in (entries which change from an initial zero to a non-zero value during the execution of an algorithm).  General treatment of orderings that minimize fill-in can be addressed using graph theory .  Applications  Solving linear equations  Given a system of linear equations in matrix form        A  x   =  b   ,        A  x   b    Ax=b,\,     we want to solve the equation for x given A and b . Suppose we have already obtained the LUP decomposition of A such that     P  A   =   L  U         P  A     L  U     PA=LU     L U x = P b . \,  In this case the solution is done in two logical steps:   First, we solve the equation     L  y   =   P  b         L  y     P  b     Ly=Pb   for y ;  Second, we solve the equation     U  x   =  y        U  x   y    Ux=y   for x .   Note that in both cases we are dealing with triangular matrices ( L and U ) which can be solved directly by forward and backward substitution without using the Gaussian elimination process (however we do need this process or equivalent to compute the LU decomposition itself).  The above procedure can be repeatedly applied to solve the equation multiple times for different b . In this case it is faster (and more convenient) to do an LU decomposition of the matrix A once and then solve the triangular matrices for the different b , rather than using Gaussian elimination each time. The matrices L and U could be thought to have "encoded" the Gaussian elimination process.  The cost of solving a system of linear equations is approximately     2  3    n  3         2  3    superscript  n  3     \frac{2}{3}n^{3}   floating point operations if the matrix   A   A   A   has size   n   n   n   . This makes it twice as fast as algorithms based on the QR decomposition , which costs about     4  3    n  3         4  3    superscript  n  3     \frac{4}{3}n^{3}   floating point operations when Householder reflections is used. For this reason, the LU decomposition is usually preferred. 14  Inverting a matrix  When solving systems of equations, b is usually treated as a vector with a length equal to the height of matrix A . Instead of vector b , we have matrix B , where B is an n -by- p matrix, so that we are trying to find a matrix X (also a n -by- p matrix):        A  X   =   L  U  X   =  B   .          A  X     L  U  X        B     AX=LUX=B.     We can use the same algorithm presented earlier to solve for each column of matrix X . Now suppose that B is the identity matrix of size n . It would follow that the result X must be the inverse of A . 15  Computing the determinant  Given the LUP decomposition    A  =    P   -  1    L  U       A     superscript  P    1    L  U     A=P^{-1}LU   of a square matrix A , the determinant of A can be computed straightforwardly as        det   (  A  )    =   det    (   P   -  1    )    det    (  L  )    det   (  U  )        =     (   -  1   )   S    (    ∏   i  =  1   n    l   i  i     )    (    ∏   i  =  1   n    u   i  i     )     .          A        superscript  P    1        L    U               superscript    1   S     superscript   subscript  product    i  1    n    subscript  l    i  i       superscript   subscript  product    i  1    n    subscript  u    i  i         \det(A)=\det(P^{-1})\det(L)\det(U)=(-1)^{S}\left(\prod_{i=1}^{n}l_{ii}\right)%
 \left(\prod_{i=1}^{n}u_{ii}\right).     The second equation follows from the fact that the determinant of a triangular matrix is simply the product of its diagonal entries, and that the determinant of a permutation matrix is equal to (−1) S where S is the number of row exchanges in the decomposition.  In the case of LU decomposition with full pivoting,    det   (  A  )       A    \det(A)   also equals the right-hand side of the above equation, if we let S be the total number of row and column exchanges.  The same method readily applies to LU decomposition by setting P equal to the identity matrix.  See also   Block LU decomposition  Cholesky decomposition  LU Reduction  Matrix decomposition  QR decomposition   Notes  References    .   .   .   . See Section 3.5. N − 1   .   .   .   .   .   External links  References   LU decomposition on MathWorld .  LU decomposition on Math-Linux .  Module for LU Factorization with Pivoting , Prof. J. H. Mathews, California State University, Fullerton  LU decomposition at Holistic Numerical Methods Institute  LU matrix factorization . MATLAB reference.   Computer code   LAPACK is a collection of FORTRAN subroutines for solving dense linear algebra problems  ALGLIB includes a partial port of the LAPACK to C++, C#, Delphi, etc.  C++ code , Prof. J. Loomis, University of Dayton  C code , Mathematics Source Library  LU in X10   Online resources   WebApp descriptively solving systems of linear equations with LU Decomposition  Matrix Calculator , bluebit.gr  LU Decomposition Tool , uni-bonn.de  LU Decomposition by Ed Pegg, Jr. , The Wolfram Demonstrations Project , 2007.   de:Gaußsches Eliminationsverfahren#LR-Zerlegung "  Category:Matrix decompositions  Category:Numerical linear algebra     ↩  ↩  , Corollary 3 ↩  , p. 166 ↩  , p. 161 ↩   , Corollary 3.5.5 ↩  , Theorem 3.5.2 ↩   ↩  , p. 112, 119 ↩  ↩  ↩  , p. 152 ↩  , p. 121 ↩     