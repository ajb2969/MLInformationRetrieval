


Synthetic division




Synthetic division

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In algebra, synthetic division is a method of performing polynomial long division, with less writing and fewer calculations. It is mostly taught for division by binomials of the form



but the method generalizes to division by any monic polynomial, and to any polynomial.
The advantages of synthetic division are that it allows one to calculate without writing variables, it uses few calculations, and it takes significantly less space on paper than long division. Also, the subtractions in long division are converted to additions by switching the signs at the very beginning, preventing sign errors.
Synthetic division for linear denominators is also called division through Ruffini's rule.
Regular synthetic division
The first example is synthetic division with only a monic linear denominator 
 
 
 
  .



Write the coefficients of the polynomial that is to be divided at the top (the zero is for the unseen 0x).



Negate the coefficients of the divisor.



Write in every coefficient of the divisor but the first one on the left.



Note the change of sign from −3 to 3. "Drop" the first coefficient after the bar to the last row.



Multiply the dropped number by the number before the bar, and place it in the next column.



Perform an addition in the next column.



Repeat the previous two steps and the following is obtained:



Count the terms to the left of the bar. Since there is only one, the remainder has degree zero. Mark the separation with a vertical bar.



The terms are written with increasing degree from right to left beginning with degree zero for both the remainder and the result.



The result of our division is:



Evaluating Polynomials by the Remainder Theorem
The above form of synthetic division is useful in the context of the Polynomial remainder theorem for evaluating univariate polynomials. To summarize, the value of 
 
 
 
  at 
 
 
 
  is equal to the remainder of 
 
 
 
 . The advantage of calculating the value this way is that it requires just over half as many multiplication steps as naive evaluation. An alternative evaluation strategy is Horner's method.
Expanded synthetic division
This method generalizes to division by any monic polynomial with only a slight modification with changes in bold. Using the same steps as before, let's try to perform the following division:



We concern ourselves only with the coefficients. Write the coefficients of the polynomial to be divided at the top.



Negate the coefficients of the divisor.



Write in every coefficient but the first one on the left in an upward right diagonal (see next diagram).



Note the change of sign from '''1 to −1 and from −3 to 3 '''. "Drop" the first coefficient after the bar to the last row.



Multiply the dropped number by the diagonal before the bar, and place the resulting entries diagonally to the right from the dropped entry.



Perform an addition in the next column.



Repeat the previous two steps until you would go past the entries at the top with the next diagonal.



Then simply add up any remaining columns.



Count the terms to the left of the bar. Since there are two, the remainder has degree one. Mark the separation with a vertical bar.



The terms are written with increasing degree from right to left beginning with degree zero for both the remainder and the result.



The result of our division is:



For non-monic divisors
With a little prodding, the expanded technique may be generalised even further to work for any polynomial, not just monics. The usual way of doing this would be to divide the divisor 
 
 
 
  with its leading coefficient (call it a):



then using synthetic division with 
 
 
 
  as the divisor, and then dividing the quotient by a to get the quotient of the original division (the remainder stays the same). But this often produces unsightly fractions which get removed later, and is thus more prone to error. It is possible to do it without first dividing the coefficients of 
 
 
 
  by a.
As can be observed by first performing long division with such a non-monic divisor, the coefficients of 
 
 
 
  are divided by the leading coefficient of 
 
 
 
  after "dropping", and before multiplying.
Let's illustrate by performing the following division:



A slightly modified table is used:



Note the extra row at the bottom. This is used to write values found by dividing the "dropped" values by the leading coefficient of 
 
 
 
  (in this case, indicated by the /3; note that, unlike the rest of the coefficients of 
 
 
 
 , the sign of this number is not changed).
Next, the first coefficient of 
 
 
 
  is dropped as usual:



and then the dropped value is divided by 3 and placed in the row below:



Next, the new (divided) value is used to fill the top rows with multiples of 2 and 1, as in the expanded technique:



The 5 is dropped next, with the obligatory adding of the 4 below it, and the answer is divided again:



Then the 3 is used to fill the top rows:



At this point, if, after getting the third sum, we were to try and use it to fill the top rows, we would "fall off" the right side, thus the third sum is the first coefficient of the remainder, as in regular synthetic division. But the values of the remainder are not divided by the leading coefficient of the divisor:



Now we can read off the coefficients of the answer. As in expanded synthetic division, the last two values (2 is the degree of the divisor) are the coefficients of the remainder, and the remaining values are the coefficients of the quotient:



and the result is



Compact Expanded Synthetic Division
However, the diagonal format above becomes less space-efficient when the degree of the divisor exceeds half of the degree of the dividend. It is easy to see that we have complete freedom to write each product in any row, as long as it is in the correct column. So the algorithm can be compactified by a greedy strategy, as illustrated in the division below.




The following describes how to perform the algorithm; this algorithm includes steps for dividing non-monic divisors:
Python implementation
The following snippet implements the Extended Synthetic Division for non-monic polynomials (which also supports monic polynomials of course since it is a generalization):
def extended_synthetic_division(dividend, divisor):
     '''Fast polynomial division by using Extended Synthetic Division. Also works with non-monic polynomials.'''
     # dividend and divisor are both polynomials, which are here simply lists of coefficients. Eg: x^2 + 3x + 5 will be represented as [1, 3, 5]
 
     out = list(dividend) # Copy the dividend
     normalizer = divisor[0]
     for i in xrange(len(dividend)-(len(divisor)-1)):
         out[i] /= normalizer # for general polynomial division (when polynomials are non-monic),
                                  # we need to normalize by dividing the coefficient with the divisor's first coefficient
         coef = out[i]
         if coef != 0: # useless to multiply if coef is 0
             for j in xrange(1, len(divisor)): # in synthetic division, we always skip the first coefficient of the divisior,
                                               # because it is only used to normalize the dividend coefficients
                 out[i + j] += -divisor[j] * coef
 
     # The resulting out contains both the quotient and the remainder, the remainder being the size of the divisor (the remainder
     # has necessarily the same degree as the divisor since it is what we couldn't divide from the dividend), so we compute the index
     # where this separation is, and return the quotient and remainder.
     separator = -(len(divisor)-1)
     return out[:separator], out[separator:] # return quotient, remainder.
See also

Polynomial remainder theorem
Euclidean domain
Gröbner basis
Greatest common divisor of two polynomials
Horner scheme

References






"
Category:Polynomials Category:Computer algebra Category:Division (mathematics)

