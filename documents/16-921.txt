   Well-separated pair decomposition      Well-separated pair decomposition  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In computational geometry , a well-separated pair decomposition of a set of points    S  ⊂   ℝ  d       S   superscript  ℝ  d     S\subset\mathbb{R}^{d}   , is a sequence of pairs of sets    (   A  i   ,   B  i   )      subscript  A  i    subscript  B  i     (A_{i},B_{i})   , such that each pair is well-separated , and for each two distinct points     p  ,  q   ∈  S       p  q   S    p,q\in S   , there exists precisely one pair which separates the two.  The graph induced by a well-separated pair decomposition can serve as a k-spanner of the complete  Euclidean graph , and is useful in approximating solutions to several problems pertaining to this. 1  Definition  Let    A  ,  B     A  B    A,B   be two disjoint sets of points in    ℝ  d     superscript  ℝ  d    \mathbb{R}^{d}   ,    R   (  X  )       R  X    R(X)   denote the axis-aligned minimum bounding box for the points in   X   X   X   , and    s  >  0      s  0    s>0   denote the separation factor .  We consider   A   A   A   and   B   B   B   to be well-separated , if there for each of    R   (  A  )       R  A    R(A)   and    R   (  B  )       R  B    R(B)   exists a d-ball of radius   ρ   ρ   \rho   containing it, such that the two spheres have a minimum distance of at least    s  ρ      s  ρ    s\rho   . 2  We consider a sequence of well-separated pairs of subsets of   S   S   S   ,     (   A  1   ,   B  1   )   ,   (   A  2   ,   B  2   )   ,  …  ,   (   A  m   ,   B  m   )        subscript  A  1    subscript  B  1      subscript  A  2    subscript  B  2    normal-…    subscript  A  m    subscript  B  m      (A_{1},B_{1}),(A_{2},B_{2}),\ldots,(A_{m},B_{m})   to be a well-separated pair decomposition (WSPD) of   S   S   S   if for any two distinct points     p  ,  q   ∈  S       p  q   S    p,q\in S   , there exists precisely one   i   i   i   ,    1  ≤  i  ≤  m        1  i       m     1\leq i\leq m   , such that either       p  ∈   A  i       p   subscript  A  i     p\in A_{i}   and    q  ∈   B  i       q   subscript  B  i     q\in B_{i}   , or      q  ∈   A  i       q   subscript  A  i     q\in A_{i}   and    p  ∈   B  i       p   subscript  B  i     p\in B_{i}   . 3   Construction  By way of constructing a fair split tree , it is possible to construct a WSPD of size    O   (    s  d   n   )       O     superscript  s  d   n     O(s^{d}n)   in    O   (   n   lg  n    )       O    n   lg  n      O(n\lg n)   time. 4  The split tree of a point set S is defined recursively.  If S contains only one point   Tree( S ) is a single node split tree containing this one point.   If S has more than one point   Consider the bounding hyperrectangle R( S ) of point set S  Split R( S ) over its longest interval and divide the points according to this split into the subsets S 1 and S 2  Tree( S ) is a root node containing the points in S with two subtrees as children which are recursively defined on S 1 and S 2   The WSPD can be extracted from such a split tree by calling the recursive FindPairs(A,B) function on the children of every node in the split tree.  Let LMax(R(X)) denote size of the longest interval of the bounding hyperrectangle of point set X and let Left(X) / Right(X) denote its children. We give pseudocode for the FindPairs(A,B) function below.  FindPairs(A,B) if R(A) and R(B) are s-well-separated
     report pair(A,B) else  if ( LMax(R(A)) ≤ LMax(R(B)) )
       Recursively call FindPairs(A,Left(B)) and FindPairs(A,Right(B)) else Recursively call FindPairs(Left(A),B) and FindPairs(Right(A),B)  Combining the s-well-separated pairs from all the calls of FindPairs(A,B) gives the WSPD for separation s.  Applications  The well-separated pair decomposition has application in solving a number of problems. WSPD can be used to:   Solve the closest pair problem in    O   (   n   lg  n    )       O    n   lg  n      O(n\lg n)   time. 5  Solve the k-closest pairs problem in    O   (    n   lg  n    +  k   )       O      n   lg  n    k     O(n\lg n+k)   time. 6  Solve the all-nearest neighbors problem in    O   (   n   lg  n    )       O    n   lg  n      O(n\lg n)   time. 7  Provide a    (   1  -  ϵ   )      1  ϵ    (1-\epsilon)   - approximation of the diameter of a point set in    O   (   n   lg  n    )       O    n   lg  n      O(n\lg n)   time. 8  Directly induce a t-spanner of a point set. 9  Provide a t-approximation of the Euclidean minimum spanning tree in d dimensions in    O   (   n   lg  n    )       O    n   lg  n      O(n\lg n)   time.   References  "  Category:Computational geometry     ↩  ↩           