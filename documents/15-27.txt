


Range query (data structures)




Range query (data structures)

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In data structures, a range query consists of preprocessing some input data into a data structure to efficiently answer any number of queries on any subset of the input. Particularly, there is a group of problems that have been extensively studied where the input is an array of unsorted numbers and a query consists in computing some function on a specific range of the array. In this article we describe some of these problems together with their solutions.
Problem statement
We may state the problem of range queries in the following way: a range query 
 
 
 
  on an array 
 
 
 
  of n elements of some set 
 
 
 
 , denoted 
 
 
 
 
 , takes two indices 
 
 
 
 , a function 
 
 
 
  defined over arrays of elements of 
 
 
 
  and outputs 
 
 
 
 . This should be done space and time efficient.
consider for instance 
 
 
 
 
  and 
 
 
 
  an array of numbers, the range query 
 
 
 
  computes 
 
 
 
 , for any 
 
 
 
 . These queries may be answered in constant time and using 
 
 
 
 
  extra space by calculating the sums of the first 
 
 
 
  elements of 
 
 
 
  and storing them into an auxiliar array 
 
 
 
 , such that 
 
 
 
  contains the sum of the first 
 
 
 
 
  elements of 
 
 
 
  for every 
 
 
 
 .Therefore any query might be answered by doing 
 
 
 
 .
This strategy may be extended for every group operator 
 
 
 
  where the notion of 
 
 
 
 
  is well defined and easily computable.1 Finally notice this solution might be extended for arrays of dimension two with a similar preprocessing.2
Examples
Semigroup operators
 
When the function of interest in a range query is a semigroup operator the notion of 
 
 
 
  is not always defined, therefore we can not use an analogous strategy to the previous section. Yao showed3 that there exists an efficient solution for range queries that involve semigroup operators. He proved that for any constant 
 
 
 
 , a preprocessing of time and space 
 
 
 
  allows to answer range queries on lists where 
 
 
 
  is a semigroup operator in 
 
 
 
 
  time, where 
 
 
 
  is a certain functional inverse of the Ackermann function.
There are some semigroup operators that admit slightly better solutions. For instance when 
 
 
 
 . Assume 
 
 
 
  then 
 
 
 
  returns the index of the minimum element of 
 
 
 
 
 . Then 
 
 
 
  denotes the corresponding minimum range query. There are several data structures that allow to answer a range minimum query in 
 
 
 
  time using a preprocessing of time and space 
 
 
 
 . Probably the simplest solution to sketch here is based on the equivalence between this problem and the Lowest common ancestor problem. We briefly describe this solution.
The cartesian tree

 
  of an array 
 
 
 
 
  has as root 
 
 
 
  and it has as left and right subtrees the cartesian tree of 
 
 
 
  and the cartesian tree of 
 
 
 
  respectively. It is easy to see that a range minimum query 
 
 
 
  is the lowest common ancestor in 
 
 
 
 
  of 
 
 
 
  and 
 
 
 
 . Since the lowest common ancestor is solvable in constant time using a preprocessing of time and space 
 
 
 
  thus so does the range minimum query problem. The solution when f = max is analogous. Cartesian trees can be constructed in linear time.
Mode
The mode of an array A is the element that appears the most in A. For instance the mode of 
 
 
 
  is 4. In case of ties any of the most frequent elements might be picked as mode. A range mode query consists in preprocessing 
 
 
 
 
  such that we can find the mode in any range of 
 
 
 
 . Several data structures have been devised to solve this problem, we summarize some of the results in the following table.4




Range Mode Queries







Space

Query Time

Restrictions






























Recently Jørgensen et al. proved a lower bound on the cell probe model of 
 
 
 
  for any data structure that uses 
 
 
 
  cells.5
Median
This particular case is of special interest since finding the median has several applications, for further reference see.6 On the other hand, the median problem, a special case of the selection problem, is solvable in O(n), by the median of medians algorithm.7 However its generalization through range median queries is recent.8 A range median query 
 
 
 
  where A,i and j have the usual meanings returns the median element of 
 
 
 
 
 . Equivalently, 
 
 
 
  should return the element of 
 
 
 
  of rank 
 
 
 
 . Note that range median queries can not be solved by following any of the previous methods discussed above including Yao's approach for semigroup operators.9
There have been studied two variants of this problem, the offline version, where all the k queries of interest are given in a batch and we are interested in reduce the total cost and a version where all the preprocessing is done up front and we are interested in optimize the cost of any subsequent single query. Concerning the first variant of the problem recently was proven that can be solved in time 
 
 
 
  and space 
 
 
 
 
 . We describe such a solution.10
The following pseudo code shows how to find the element of rank 
 
 
 
  in 
 
 
 
  an unsorted array of distinct elements, to find the range medians we set 
 
 
 
 .

 rangeMedian(A,i,j,r){
 
   if A.length() == 1 return A[1]
 
   if A.low is undefined then
     m = median(A)
     A.low  = [e in A | e <= m]
     A.high = [e in A | e > m ]
 
  calculate t  the number of elements of A[i,j] that belong to A.low
 
  if r <= t return rangeMedian(A.low, i,j,r)
   else return rangeMedian(A.high, i,j, r-t)
 }
Procedure rangeMedian partitions A, using A's median, into two arrays A.low and A.high, where the former contains the elements of A that are less than or equal to the median m and the latter the rest of the elements of A. If we know that the number of elements of 
 
 
 
  that end up in A.low is t and this number is bigger than r then we should keep looking for the element of rank r in A.low else we should look for the element of rank 
 
 
 
 
  in A.high. To find 
 
 
 
 , it is enough to find the maximum index 
 
 
 
  such that 
 
 
 
  is in A.low and the maximum index 
 
 
 
  such that 
 
 
 
 
  is in A.high. Then 
 
 
 
 . The total cost for any query, without considering the partitioning part, is 
 
 
 
  since at most 
 
 
 
  recursion calls are done and only a constant number of operations are performed in each of them (to get the value of 
 
 
fractional cascading should be used). If a linear algorithm to find the medians is used, the total cost of preprocessing for 
 
 
 
 
  range median queries is 
 
 
 
 . Clearly this algorithm can be easily modified to solve the up front version of the problem.11
Related Problems
All the problems described above have been studied for higher dimensions as well as their dynamic versions. On the other hand, range queries might be extended to other data structures like trees,12 such as the level ancestor problem. A similar family of problems are orthogonal range queries also known as counting queries.
References
External links

Open Data Structure - Chapter 13 - Data Structures for Integers
Data Structures for Range Median Queries - Gerth Stolting Brodal and Allan Gronlund Jorgensen

"
Category:Arrays Category:Articles created via the Article Wizard



↩
↩
↩

↩
↩
↩


↩

↩



