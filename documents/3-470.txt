


Flex lexical analyser




Flex lexical analyser

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Flex (fast lexical analyzer generator) is a free software alternative to lex.1 It is a computer program that generates lexical analyzers ("scanners" or "lexers").23 It is frequently used with the free Bison parser generator. Unlike Bison, flex is not part of the GNU Project.4
History
Flex was written in C by Vern Paxson around 1987.5 He was translating a Ratfor generator, which had been led by Jef Poskanzer.6
Example lexical analyzer
This is an example of a Flex scanner for the instructional programming language PL/0.
The tokens recognized are: '+', '-', '*', '/', '=', '(', ')', ',', ';', '.', ':=', '', '', '', '>', '>='; numbers: 0-9 {0-9}; identifiers: a-zA-Z {a-zA-Z0-9} and keywords: begin, call, const, do, end, if, odd, procedure, then, var, while.
%{
 #include "y.tab.h"
 %}
 
 digit         [0-9]
 letter        [a-zA-Z]
 
 %%
 "+"                  { return PLUS;       }
 "-"                  { return MINUS;      }
 "*"                  { return TIMES;      }
 "/"                  { return SLASH;      }
 "("                  { return LPAREN;     }
 ")"                  { return RPAREN;     }
 ";"                  { return SEMICOLON;  }
 ","                  { return COMMA;      }
 "."                  { return PERIOD;     }
 ":="                 { return BECOMES;    }
 "="                  { return EQL;        }
 "<>"                 { return NEQ;        }
 "<"                  { return LSS;        }
 ">"                  { return GTR;        }
 "<="                 { return LEQ;        }
 ">="                 { return GEQ;        }
 "begin"              { return BEGINSYM;   }
 "call"               { return CALLSYM;    }
 "const"              { return CONSTSYM;   }
 "do"                 { return DOSYM;      }
 "end"                { return ENDSYM;     }
 "if"                 { return IFSYM;      }
 "odd"                { return ODDSYM;     }
 "procedure"          { return PROCSYM;    }
 "then"               { return THENSYM;    }
 "var"                { return VARSYM;     }
 "while"              { return WHILESYM;   }
 {letter}({letter}|{digit})* {
                        yylval.id = strdup(yytext);
                        return IDENT;      }
 {digit}+             { yylval.num = atoi(yytext);
                        return NUMBER;     }
 [ \t\n\r]            /* skip whitespace */
 .                    { printf("Unknown character [%c]\n",yytext[0]);
                        return UNKNOWN;    }
 %%
 
 int yywrap(void){return 1;}
Internals
These programs perform character parsing, and tokenizing via the use of a deterministic finite automaton (DFA). A DFA is a theoretical machine accepting regular languages. These machines are a subset of the collection of Turing machines. DFAs are equivalent to read-only right moving Turing machines. The syntax is based on the use of regular expressions. See also nondeterministic finite automaton.
Issues
Time complexity
A Flex lexical analyzer usually has time complexity $O(n)$ in the length of the input. That is, it performs a constant number of operations for each input symbol. This constant is quite low: GCC generates 12 instructions for the DFA match loop. Note that the constant is independent of the length of the token, the length of the regular expression and the size of the DFA.
However, one optional feature of Flex can cause Flex to generate a scanner with non-linear performance: The use of the REJECT macro in a scanner with the potential to match extremely long tokens. In this case, the programmer has explicitly told flex to "go back and try again" after it has already matched some input. This will cause the DFA to backtrack to find other accept states. The REJECT feature is not enabled by default, and because of its performance implications its use is discouraged in the Flex manual.7
Reentrancy
By default the scanner generated by Flex is not reentrant. This can cause serious problems for programs that use the generated scanner from different threads. To overcome this issue there are options that Flex provides in order to achieve reentrancy. A detailed description of these options can be found in the Flex manual.8
Usage under non-Unix environments
Normally the generated scanner contains references to unistd.h header file which is Unix specific. To avoid generating code that includes unistd.h, %option nounistd should be used. Another issue is the call to isatty (a Unix library function), which can be found in the generated code. The %option never-interactive forces flex to generate code that doesn't use isatty. These options are detailed in the Flex manual.9
Using flex from other languages
Flex can only generate code for C and C++. To use the scanner code generated by flex from other languages a language binding tool such as SWIG can be used.
Flex++
A similar lexical scanner for C++ is flex++, which is included as part of the flex package. At the moment, flex supports generating code only for C and C++. The generated code does not depend on any runtime or external library except for a memory allocator (malloc or a user-supplied alternative) unless the input also depends on it. This can be useful in embedded and similar situations where traditional operating system or C runtime facilities may not be available.
The flex++ classes and code require a C++ compiler to create lexical and pattern-matching programs. The flex++ generated C++ scanner includes the header file FlexLexer.h, which defines the interfaces of the two C++ generated classes.
See also

Lex
Ragel
Quex
yacc
GNU Bison
Berkeley Yacc

References
Further reading


M. E. Lesk and E. Schmidt, LEX - Lexical Analyzer Generator
Alfred Aho, Ravi Sethi and Jeffrey Ullman, Compilers: Principles, Techniques and Tools, Addison-Wesley (1986). Describes the pattern-matching techniques used by flex (deterministic finite automata)

External links


Flex Manual
ANSI-C Lex Specification
JFlex: Fast Scanner Generator for Java
Brief description of Lex, Flex, YACC, and Bison

"
Category:Free compilers and interpreters Category:Compiling tools Category:Parser generators Category:Free software programmed in C



↩
↩
↩
Is flex GNU or not?, flex FAQ↩
|F''ast Lexical Analyzer Generator.|{{'}}|url=http://books.google.com/books?id=3Sr1V5J9_qMC&printsec;=frontcover&dq=flex+and+bison&hl=en&sa=X&ei=4lipUJ76Kuu80QGGi4HwCg&ved=0CD0Q6AEwAA#v=snippet&q=%22In%20about%201987%2C%20Vern%20Paxson%22&f=false}}↩
When was flex born?, flex FAQ↩
↩
↩
↩




