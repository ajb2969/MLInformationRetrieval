   Tulip Overlay      Tulip Overlay   Tulip is a distributed, decentralized, P2P network intended for routing, searching and publish-lookup information sharing. It is a structured P2P network very much like Chord , Pastry , Tapestry and CAN .  Overview  In Tulip protocol, a network with   n   n   n   nodes uses    O   (    n   l  o  g  n   )       O      n   l  o  g  n     O(\sqrt{n}logn)   space per node. Tulip guarantees a 2-hop optimal routing with a stretch of 2 over optimal routing, based on the assumption of the triangle inequality .  Tulip Construction  Tulip defines the vicinity of each node as the set of     n   l  o  g  n        n   l  o  g  n    \sqrt{n}logn   nodes that are closest to the current node in terms of physical proximity. Tulip's construction partitions the nodes into    n      n    \sqrt{n}   color-sets such that:   Every color-set has at most    2   n       2    n     2\sqrt{n}   nodes.  Every node has in its vicinity at least one node from every other color-set.   Colors are assigned to Nodes based on the hash value of the node's id. Hash functions such as SHA-1 are used to ensure that the size of each group is about    n      n    \sqrt{n}   and is under     n   l  o  g  n        n   l  o  g  n    \sqrt{n}logn   with high probability.  Each node   u   u   u   in the network maintains data in the form of two lists to capture routing information:   Vicinity List: It is the list of information about all    l  o  g  n      l  o  g  n    logn   closest neighbors of   u   u   u   from each color.  Color List: It is the list of information about all nodes belonging to the same color group as node   u   u   u   .   In other words, node   u   u   u   knows all the nodes in its color group as well    l  o  g  n      l  o  g  n    logn   additional nodes for every other color.  Key Lookup and Object Lookup  Key lookup in Tulip has a guaranteed stretch of 2 over optimal lookup with up to 2 lookup hops. If a source node   s   s   s   wants to access an object at another node   t   t   t   then, if both belong to the same color group node   s   s   s   directly communicates with node   t   t   t   in one hop or else if the nodes   s   s   s   and   t   t   t   are in different color groups, then, node   s   s   s   communicates with its closest neighbor   w   w   w   which is in the same color group as   t   t   t   and reaches   t   t   t   in 2-hops via the node   w   w   w   .  Objects are also given a color based on the hash value of their id. There is no correlation between the color of a node and the color of the objects it stores. Moreover, a single object may also be stored in multiple nodes. Hence, in order to enable object lookup, i.e. to find the nearest node having a copy of the object, all the nodes in Tulip maintain object pointers. If a node   x   x   x   stores an object   o   o   o   , then a pointer indicating the same is stored by all nodes having the node   x   x   x   in their vicinity list. Also, all the nodes in the same color group as an object   o   o   o   will store a pointer to the closest node having the object   o   o   o   .  Consider a node   s   s   s   which is searching for the nearest node storing an object   o   o   o   . If both   s   s   s   and   o   o   o   belong to the same color group then node   s   s   s   has a pointer to the closest node storing   o   o   o   . Otherwise, it communicates with another node   w   w   w   which has the same color as   o   o   o   and finds a node   t   t   t   nearest to   w   w   w   storing   o   o   o   . The triangular inequality ensures a stretch of up to 4 over optimal object lookup.  Tulip provides separate protocols to maintain locality under churn. This includes protocols for node joining, node deletion, refresh mechanisms and multi-hop query routing. Tulip has been implemented in C++ and has already been deployed over the nodes in PlanetLab . Tulip has been shown to provide locality awareness and fault tolerance.  Developers  Ittai Abraham, Ankur Badola, Danny Bickson, Dahlia Malkhi, Sharad Maloo, Saar Ron  External links   Paper proposing Tulip: "Practical Locality-Awareness for Large Scale Information Sharing   "  Category:Distributed data storage   