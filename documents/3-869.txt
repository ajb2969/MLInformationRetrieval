   Needham‚ÄìSchroeder protocol      Needham‚ÄìSchroeder protocol   The term Needham‚ÄìSchroeder protocol can refer to one of the two key transport protocols intended for use over an insecure network, both proposed by Roger Needham and Michael Schroeder . 1 These are:   The Needham‚ÄìSchroeder Symmetric Key Protocol is based on a symmetric encryption algorithm . It forms the basis for the Kerberos protocol. This protocol aims to establish a session key between two parties on a network, typically to protect further communication.  The Needham‚ÄìSchroeder Public-Key Protocol , based on public-key cryptography . This protocol is intended to provide mutual authentication between two parties communicating on a network, but in its proposed form is insecure.   The symmetric protocol  Here, Alice (A) initiates the communication to Bob (B). S is a server trusted by both parties. In the communication:   A and B are identities of Alice and Bob respectively  K AS is a symmetric key known only to A and S  K BS is a symmetric key known only to B and S  N A and N B are nonces generated by A and B respectively  K AB is a symmetric, generated key, which will be the session key of the session between A and B   The protocol can be specified as follows in security protocol notation :       A  ‚Üí  S   :   A  ,  B  ,   N  A       normal-:   normal-‚Üí  A  S    A  B   subscript  N  A      A\rightarrow S:\left.A,B,N_{A}\right.      Alice sends a message to the server identifying herself and Bob, telling the server she wants to communicate with Bob.        S  ‚Üí  A   :    {   N  A   ,   K   A  B    ,  B  ,    {   K   A  B    ,  A  }    K   B  S     }    K   A  S        normal-:   normal-‚Üí  S  A    subscript    subscript  N  A    subscript  K    A  B    B   subscript    subscript  K    A  B    A    subscript  K    B  S       subscript  K    A  S       S\rightarrow A:\{N_{A},K_{AB},B,\{K_{AB},A\}_{K_{BS}}\}_{K_{AS}}      The server generates    K   A  B      subscript  K    A  B     {K_{AB}}   and sends back to Alice a copy encrypted under    K   B  S      subscript  K    B  S     {K_{BS}}   for Alice to forward to Bob and also a copy for Alice. Since Alice may be requesting keys for several different people, the nonce assures Alice that the message is fresh and that the server is replying to that particular message and the inclusion of Bob's name tells Alice who she is to share this key with.        A  ‚Üí  B   :    {   K   A  B    ,  A  }    K   B  S        normal-:   normal-‚Üí  A  B    subscript    subscript  K    A  B    A    subscript  K    B  S       A\rightarrow B:\{K_{AB},A\}_{K_{BS}}      Alice forwards the key to Bob who can decrypt it with the key he shares with the server, thus authenticating the data.        B  ‚Üí  A   :    {   N  B   }    K   A  B        normal-:   normal-‚Üí  B  A    subscript    subscript  N  B     subscript  K    A  B       B\rightarrow A:\{N_{B}\}_{K_{AB}}      Bob sends Alice a nonce encrypted under    K   A  B      subscript  K    A  B     {K_{AB}}   to show that he has the key.        A  ‚Üí  B   :    {    N  B   -  1   }    K   A  B        normal-:   normal-‚Üí  A  B    subscript      subscript  N  B   1     subscript  K    A  B       A\rightarrow B:\{N_{B}-1\}_{K_{AB}}      Alice performs a simple operation on the nonce, re-encrypts it and sends it back verifying that she is still alive and that she holds the key.   Attacks on the protocol  The protocol is vulnerable to a replay attack (as identified by Denning and Sacco 2 ). If an attacker uses an older, compromised value for K AB , he can then replay the message     {   K   A  B    ,  A  }    K   B  S       subscript    subscript  K    A  B    A    subscript  K    B  S      \{K_{AB},A\}_{K_{BS}}   to Bob, who will accept it, being unable to tell that the key is not fresh.  Fixing the attack  This flaw is fixed in the Kerberos protocol by the inclusion of a timestamp . It can also be fixed with the use of nonces as described below. 3 At the beginning of the protocol:         A  ‚Üí  B   :  A     normal-:   normal-‚Üí  A  B   A    A\rightarrow B:A         Alice sends to Bob a request.          B  ‚Üí  A   :    {  A  ,   ùêç  ùêÅ  ‚Ä≤   }    K   B  S        normal-:   normal-‚Üí  B  A    subscript   A   superscript   subscript  ùêç  ùêÅ   normal-‚Ä≤     subscript  K    B  S       B\rightarrow A:\{A,\mathbf{N_{B}^{\prime}}\}_{K_{BS}}         Bob responds with a nonce encrypted under his key with the Server.          A  ‚Üí  S   :   A  ,  B  ,   N  A   ,    {  A  ,   ùêç  ùêÅ  ‚Ä≤   }    K   B  S         normal-:   normal-‚Üí  A  S    A  B   subscript  N  A    subscript   A   superscript   subscript  ùêç  ùêÅ   normal-‚Ä≤     subscript  K    B  S        A\rightarrow S:\left.A,B,N_{A},\{A,\mathbf{N_{B}^{\prime}}\}_{K_{BS}}\right.         Alice sends a message to the server identifying herself and Bob, telling the server she wants to communicate with Bob.          S  ‚Üí  A   :    {   N  A   ,   K   A  B    ,  B  ,    {   K   A  B    ,  A  ,   ùêç  ùêÅ  ‚Ä≤   }    K   B  S     }    K   A  S        normal-:   normal-‚Üí  S  A    subscript    subscript  N  A    subscript  K    A  B    B   subscript    subscript  K    A  B    A   superscript   subscript  ùêç  ùêÅ   normal-‚Ä≤     subscript  K    B  S       subscript  K    A  S       S\rightarrow A:\{N_{A},K_{AB},B,\{K_{AB},A,\mathbf{N_{B}^{\prime}}\}_{K_{BS}}%
 \}_{K_{AS}}         Note the inclusion of the nonce.   The protocol then continues as described through the final three steps as described in the original protocol above . Note that    N  B  ‚Ä≤     superscript   subscript  N  B   normal-‚Ä≤    N_{B}^{\prime}   is a different nonce from    N  B     subscript  N  B    N_{B}   .The inclusion of this new nonce prevents the replaying of a compromised version of     {   K   A  B    ,  A  }    K   B  S       subscript    subscript  K    A  B    A    subscript  K    B  S      \{K_{AB},A\}_{K_{BS}}   since such a message would need to be of the form     {   K   A  B    ,  A  ,   ùêç  ùêÅ  ‚Ä≤   }    K   B  S       subscript    subscript  K    A  B    A   superscript   subscript  ùêç  ùêÅ   normal-‚Ä≤     subscript  K    B  S      \{K_{AB},A,\mathbf{N_{B}^{\prime}}\}_{K_{BS}}   which the attacker can't forge since she does not have    K   B  S      subscript  K    B  S     K_{BS}   .  The public-key protocol  This assumes the use of a public-key encryption algorithm .  Here, Alice (A) and Bob (B) use a trusted server (S) to distribute public keys on request. These keys are:   K PA and K SA , respectively public and private halves of an encryption key-pair belonging to A (S stands for "secret key" here)  K PB and K SB , similar belonging to B  K PS and K SS , similar belonging to S. (Note this has the property that K SS is used to encrypt and K PS to decrypt ).   The protocol runs as follows:       A  ‚Üí  S   :   A  ,  B      normal-:   normal-‚Üí  A  S    A  B     A\rightarrow S:\left.A,B\right.      A requests B's public keys from S        S  ‚Üí  A   :    {   K   P  B    ,  B  }    K   S  S        normal-:   normal-‚Üí  S  A    subscript    subscript  K    P  B    B    subscript  K    S  S       S\rightarrow A:\{K_{PB},B\}_{K_{SS}}      S responds with public key K PB alongside B's identity, signed by the server for authentication purposes.        B  ‚Üí  S   :   B  ,  A      normal-:   normal-‚Üí  B  S    B  A     B\rightarrow S:\left.B,A\right.      B requests A's public keys.        S  ‚Üí  B   :    {   K   P  A    ,  A  }    K   S  S        normal-:   normal-‚Üí  S  B    subscript    subscript  K    P  A    A    subscript  K    S  S       S\rightarrow B:\{K_{PA},A\}_{K_{SS}}      Server responds.        A  ‚Üí  B   :    {   N  A   ,  A  }    K   P  B        normal-:   normal-‚Üí  A  B    subscript    subscript  N  A   A    subscript  K    P  B       A\rightarrow B:\{N_{A},A\}_{K_{PB}}      A chooses a random N A and sends it to B.        B  ‚Üí  A   :    {   N  A   ,   N  B   }    K   P  A        normal-:   normal-‚Üí  B  A    subscript    subscript  N  A    subscript  N  B     subscript  K    P  A       B\rightarrow A:\{N_{A},N_{B}\}_{K_{PA}}      B chooses a random N B , and sends it to A along with N A to prove ability to decrypt with K SB .        A  ‚Üí  B   :    {   N  B   }    K   P  B        normal-:   normal-‚Üí  A  B    subscript    subscript  N  B     subscript  K    P  B       A\rightarrow B:\{N_{B}\}_{K_{PB}}      A confirms N B to B, to prove ability to decrypt with K SA    At the end of the protocol, A and B know each other's identities, and know both N A and N B . These nonces are not known to eavesdroppers.  An attack on the protocol  Unfortunately, this protocol is vulnerable to a man-in-the-middle attack . If an impostor can persuade A to initiate a session with him, he can relay the messages to B and convince B that he is communicating with A.  Ignoring the traffic to and from S, which is unchanged, the attack runs as follows:       A  ‚Üí  I   :    {   N  A   ,  A  }    K   P  I        normal-:   normal-‚Üí  A  I    subscript    subscript  N  A   A    subscript  K    P  I       A\rightarrow I:\{N_{A},A\}_{K_{PI}}      A sends N A to I, who decrypts the message with K SI         I  ‚Üí  B   :    {   N  A   ,  A  }    K   P  B        normal-:   normal-‚Üí  I  B    subscript    subscript  N  A   A    subscript  K    P  B       I\rightarrow B:\{N_{A},A\}_{K_{PB}}      I relays the message to B, pretending that A is communicating        B  ‚Üí  I   :    {   N  A   ,   N  B   }    K   P  A        normal-:   normal-‚Üí  B  I    subscript    subscript  N  A    subscript  N  B     subscript  K    P  A       B\rightarrow I:\{N_{A},N_{B}\}_{K_{PA}}      B sends N B         I  ‚Üí  A   :    {   N  A   ,   N  B   }    K   P  A        normal-:   normal-‚Üí  I  A    subscript    subscript  N  A    subscript  N  B     subscript  K    P  A       I\rightarrow A:\{N_{A},N_{B}\}_{K_{PA}}      I relays it to A        A  ‚Üí  I   :    {   N  B   }    K   P  I        normal-:   normal-‚Üí  A  I    subscript    subscript  N  B     subscript  K    P  I       A\rightarrow I:\{N_{B}\}_{K_{PI}}      A decrypts N B and confirms it to I, who learns it        I  ‚Üí  B   :    {   N  B   }    K   P  B        normal-:   normal-‚Üí  I  B    subscript    subscript  N  B     subscript  K    P  B       I\rightarrow B:\{N_{B}\}_{K_{PB}}      I re-encrypts N B , and convinces B that he's decrypted it   At the end of the attack, B falsely believes that A is communicating with him, and that N A and N B are known only to A and B.  Fixing the man-in-the-middle attack  The attack was first described in a 1995 paper by Gavin Lowe. 4 The paper also describes a fixed version of the scheme, referred to as the Needham‚ÄìSchroeder‚ÄìLowe protocol . The fix involves the modification of message six, that is we replace:       B  ‚Üí  A   :    {   N  A   ,   N  B   }    K   P  A        normal-:   normal-‚Üí  B  A    subscript    subscript  N  A    subscript  N  B     subscript  K    P  A       B\rightarrow A:\{N_{A},N_{B}\}_{K_{PA}}     with the fixed version:       B  ‚Üí  A   :    {   N  A   ,   N  B   ,  B  }    K   P  A        normal-:   normal-‚Üí  B  A    subscript    subscript  N  A    subscript  N  B   B    subscript  K    P  A       B\rightarrow A:\{N_{A},N_{B},B\}_{K_{PA}}     See also   Kerberos  Otway‚ÄìRees protocol  Yahalom  Wide Mouth Frog protocol  Neuman‚ÄìStubblebine protocol   References  External links   http://www.lsv.ens-cachan.fr/spore/nspk.html - description of the Public-key protocol  http://www.lsv.ens-cachan.fr/spore/nssk.html - the Symmetric-key protocol  http://www.lsv.ens-cachan.fr/spore/nspkLowe.html - the public-key protocol amended by Lowe   "  Category:Authentication protocols  Category:Key transport protocols  Category:Symmetric-key cryptography  Category:Computer access control protocols     ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©     