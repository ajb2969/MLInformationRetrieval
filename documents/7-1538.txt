   Scoreboarding      Scoreboarding   Scoreboarding is a centralized method, used in the CDC 6600  computer , for dynamically scheduling a pipeline so that the instructions can execute out of order when there are no conflicts and the hardware is available. 1 In a scoreboard, the data dependencies of every instruction are logged. Instructions are released only when the scoreboard determines that there are no conflicts with previously issued and incomplete instructions. If an instruction is stalled because it is unsafe to continue, the scoreboard monitors the flow of executing instructions until all dependencies have been resolved before the stalled instruction is issued.  Stages  Instructions are decoded in order and go through the following four stages.   Issue : The system checks which registers will be read and written by this instruction. This information is remembered as it will be needed in the following stages. In order to avoid output dependencies ( WAW - Write after Write) the instruction is stalled until instructions intending to write to the same register are completed. The instruction is also stalled when required functional units are currently busy.  Read operands : After an instruction has been issued and correctly allocated to the required hardware module, the instruction waits until all operands become available. This procedure resolves read dependencies ( RAW - Read after Write) because registers which are intended to be written by another instruction are not considered available until they are actually written.  Execution : When all operands have been fetched, the functional unit starts its execution. After the result is ready, the scoreboard is notified.  Write Result : In this stage the result is about to be written to its destination register. However, this operation is delayed until earlier instructions—which intend to read registers this instruction wants to write to—have completed their read operands stage. This way, so called data dependencies ( WAR - Write after Read) can be addressed.   Data structure  To control the execution of the instructions, the scoreboard maintains three status tables:   Instruction Status : Indicates, for each instruction being executed, which of the four stages it is in.  Functional Unit Status : Indicates the state of each functional unit. Each function unit maintains 9 fields in the table:  Busy: Indicates whether the unit is being used or not  Op: Operation to perform in the unit (e.g. MUL, DIV or MOD)  F i : Destination register  F j ,F k : Source-register numbers  Q j ,Q k : Functional units that will produce the source registers F j , F k  R j ,R k : Flags that indicates when F j , F k are ready   Register Status : Indicates, for each register, which function unit will write results into it.   The algorithm  The detailed algorithm for the scoreboard control is described below:  '''function''' issue(''op'', ''dst'', ''src1'', ''src2'')
      wait until (!Busy[FU] AND !Result[''dst'']); // FU can be any functional unit that can execute operation ''op''
      Busy[FU] ← Yes;
      Op[FU] ← ''op'';
      F i [FU] ← ''dst'';
      F j [FU] ← ''src1'';
      F k [FU] ← ''src2'';
      Q j [FU] ← Result[''src1''];
      Q k [FU] ← Result[''src2''];
      R j [FU] ← Q j [FU] == 0;
      R k [FU] ← Q k [FU] == 0;
      Result[''dst''] ← FU;
 
   '''function''' read_operands(''FU'')
      wait until (R j [''FU''] AND R k [''FU'']);
      R j [''FU''] ← No;
      R k [''FU''] ← No;
 
   '''function''' execute(''FU'')
      // Execute whatever ''FU'' must do
 
   '''function''' write_back(''FU'')
      wait until ( \forall f {(F j [f]≠F i [''FU''] OR R j [f]=No) AND (F k [f]≠F i [''FU''] OR R k [f]=No)})
      foreach f do
          if Q j [f]=''FU'' then R j [f] ← Yes;
          if Q k [f]=''FU'' then R k [f] ← Yes;
      Result[F i [''FU'']] ← 0; // 0 means no FU generates the register's result
      Busy[''FU''] ← No;  Remarks  The scoreboarding method must stall the issue stage when there is no functional unit available. In this case, future instructions that could potentially be executed will wait until the structural hazard is resolved. Some other techniques like Tomasulo algorithm can avoid the structural hazard and also resolve WAR and WAW dependencies with Register renaming .  See also   Instruction level parallelism  Tomasulo algorithm  Out-of-order execution   References   Glenford Myers , "Register scoreboarding on a microprocessor chip", United States Patent 4891753   External links   Dynamic Scheduling - Scoreboard  Computer Architecture: A Quantitative Approach , John L. Hennessy & David A. Patterson  EECS 252 Graduate Computer Architecture Lec XX - TOPIC , Electrical Engineering and Computer Sciences, Berkeley, University of California.   "  Category:Instruction processing     ↩     