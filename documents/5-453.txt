   Scapegoat tree      Scapegoat tree   In computer science , a scapegoat tree is a self-balancing binary search tree , invented by Arne Andersson 1 and again by Igal Galperin and Ronald L. Rivest . 2 It provides worst-case O (log n ) lookup time, and O (log n ) amortized insertion and deletion time.  Unlike most other self-balancing binary search trees that provide worst case O (log n ) lookup time, scapegoat trees have no additional per-node memory overhead compared to a regular binary search tree : a node stores only a key and two pointers to the child nodes. This makes scapegoat trees easier to implement and, due to data structure alignment , can reduce node overhead by up to one-third.  Theory  A binary search tree is said to be weight-balanced if half the nodes are on the left of the root, and half on the right. An α-weight-balanced node is defined as meeting a relaxed weight balance criterion:  size(left) left) + size(node->right) + 1  end  An α of 1 therefore would describe a linked list as balanced, whereas an α of 0.5 would only match almost complete binary trees .  A binary search tree that is α-weight-balanced must also be α-height-balanced , that is  height(tree) 1/α (NodeCount) + 1  Scapegoat trees are not guaranteed to keep α-weight-balance at all times, but are always loosely α-height-balanced in that  height(scapegoat tree) 1/α (NodeCount) + 1  This makes scapegoat trees similar to red-black trees in that they both have restrictions on their height. They differ greatly though in their implementations of determining where the rotations (or in the case of scapegoat trees, rebalances) take place. Whereas red-black trees store additional 'color' information in each node to determine the location, scapegoat trees find a scapegoat which isn't α-weight-balanced to perform the rebalance operation on. This is loosely similar to AVL trees , in that the actual rotations depend on 'balances' of nodes, but the means of determining the balance differs greatly. Since AVL trees check the balance value on every insertion/deletion, it is typically stored in each node; scapegoat trees are able to calculate it only as needed, which is only when a scapegoat needs to be found.  Unlike most other self-balancing search trees, scapegoat trees are entirely flexible as to their balancing. They support any α such that 0.5  This can be done in O( n ) time by traversing the nodes of the subtree to find their values in sorted order and recursively choosing the median as the root of the subtree.  As rebalance operations take O( n ) time (dependent on the number of nodes of the subtree), insertion has a worst-case performance of O( n ) time. However, because these worst-case scenarios are spread out, insertion takes O(log n ) amortized time.  Sketch of proof for cost of insertion  Define the Imbalance of a node v to be the absolute value of the difference in size between its left node and right node minus 1, or 0, whichever is greater. In other words:       I   (  v  )    =   max   (    |    left   (  v  )    -   right   (  v  )     |   -  1   ,  0  )          I  v    max         left  v    right  v     1   0     I(v)=\operatorname{max}(|\operatorname{left}(v)-\operatorname{right}(v)|-1,0)     Immediately after rebuilding a subtree rooted at v , I( v ) = 0.  Lemma: Immediately before rebuilding the subtree rooted at v ,      I   (  v  )    =   Ω   (   |  v  |   )          I  v     normal-Ω    v      I(v)=\Omega(|v|)    (   Ω   normal-Ω   \Omega   is Big O Notation .)  Proof of lemma:  Let    v  0     subscript  v  0    v_{0}   be the root of a subtree immediately after rebuilding.     h   (   v  0   )    =   log   (    |   v  0   |   +  1   )          h   subscript  v  0           subscript  v  0    1      h(v_{0})=\log(|v_{0}|+1)   . If there are    Ω   (   |   v  0   |   )       normal-Ω     subscript  v  0      \Omega(|v_{0}|)   degenerate insertions (that is, where each inserted node increases the height by 1), then      I   (  v  )    =   Ω   (   |   v  0   |   )          I  v     normal-Ω     subscript  v  0       I(v)=\Omega(|v_{0}|)   ,      h   (  v  )    =    h   (   v  0   )    +   Ω   (   |   v  0   |   )           h  v       h   subscript  v  0      normal-Ω     subscript  v  0        h(v)=h(v_{0})+\Omega(|v_{0}|)   and      log   (   |  v  |   )    ≤    log   (    |   v  0   |   +  1   )    +  1           v             subscript  v  0    1    1     \log(|v|)\leq\log(|v_{0}|+1)+1   .  Since     I   (  v  )    =   Ω   (   |  v  |   )          I  v     normal-Ω    v      I(v)=\Omega(|v|)   before rebuilding, there were    Ω   (   |  v  |   )       normal-Ω    v     \Omega(|v|)   insertions into the subtree rooted at   v   v   v   that did not result in rebuilding. Each of these insertions can be performed in    O   (   log  n   )       O    n     O(\log n)   time. The final insertion that causes rebuilding costs    O   (   |  v  |   )       O    v     O(|v|)   . Using aggregate analysis it becomes clear that the amortized cost of an insertion is    O   (   log  n   )       O    n     O(\log n)   :         Ω   (   |  v  |   )   O   (   log  n   )    +   O   (   |  v  |   )      Ω   (   |  v  |   )     =   O   (   log  n   )              normal-Ω    v   O    n      O    v       normal-Ω    v       O    n      {\Omega(|v|)O(\log{n})+O(|v|)\over\Omega(|v|)}=O(\log{n})     Deletion  Scapegoat trees are unusual in that deletion is easier than insertion. To enable deletion, scapegoat trees need to store an additional value with the tree data structure. This property, which we will call MaxNodeCount simply represents the highest achieved NodeCount. It is set to NodeCount whenever the entire tree is rebalanced, and after insertion is set to max(MaxNodeCount, NodeCount).  To perform a deletion, we simply remove the node as you would in a simple binary search tree, but if  NodeCount n elements and has just been rebuilt (in other words, it is a complete binary tree).  At most      n  /  2   -  1        n  2   1    n/2-1    deletions can be performed before the tree must be rebuilt.  Each of these deletions take     O   (   log  n   )       O    n     O(\log{n})    time (the amount of time to search for the element and flag it as deleted).  The     n  /  2      n  2    n/2    deletion causes the tree to be rebuilt and takes      O   (   log  n   )    +   O   (  n  )          O    n      O  n     O(\log{n})+O(n)    (or just     O   (  n  )       O  n    O(n)    ) time.  Using aggregate analysis it becomes clear that the amortized cost of a deletion is     O   (   log  n   )       O    n     O(\log{n})    :          ∑  1   n  2     O   (   log  n   )     +   O   (  n  )      n  2    =      n  2   O   (   log  n   )    +   O   (  n  )      n  2    =   O   (   log  n   )                superscript   subscript   1     n  2      O    n       O  n      n  2            n  2   O    n      O  n      n  2           O    n       {\sum_{1}^{{n\over 2}}O(\log{n})+O(n)\over{n\over 2}}={{n\over 2}O(\log{n})+O(%
 n)\over{n\over 2}}=O(\log{n})     Lookup  Lookup is not modified from a standard binary search tree, and has a worst-case time of O(log n ). This is in contrast to splay trees which have a worst-case time of O( n ). The reduced node memory overhead compared to other self-balancing binary search trees can further improve locality of reference and caching.  See also   Splay tree  Trees  Tree rotation  AVL tree  B-tree  T-tree  List of data structures   References  External links   Scapegoat Tree Applet by Kubo Kovac  Scapegoat Trees: Galperin and Rivest's paper describing scapegoat trees  On Consulting a Set of Experts and Searching (full version paper)  Open Data Structures - Chapter 8 - Scapegoat Trees   "  Category:Binary trees  Category:Search trees     ↩  ↩     