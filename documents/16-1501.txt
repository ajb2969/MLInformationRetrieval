


Draft:Intelligent scissors




Draft:Intelligent scissors

(Figure)
Intelligent scissors segmentation

Intelligent scissors is an effective tool used for image segmentation and composition, which is raised by Eric Mortensen and William Barrett in 1990s. 1 It is based on Livewire Segmentation Technique and made some useful extensions, such like on-the-fly training and boundary cooling. Intelligent Scissors allow objects within digital images to be extracted quickly and accurately using simple gesture motions with a mouse. It applies the shortest path algorithm, by Edsger W. Dijkstra for optimal graph search.
Shortest Path Algorithm
In a 2D digital picture, pixels represent nodes and edges are created between each pixel and its 8 neighbors. 2The cumulative cost of a path is the sum of the local edge (or link) costs on the path. Shortest path algorithm, or optical graph search, is aimed to minimum cumulative cost path from a start pixel to a goal pixel.
Local Cost
A minimum cost path should correspond to an image component boundary. Pixels that exhibit strong edge features have low local costs and vice-versa. The local component costs are created from the various edge features:3




Image feature

Formulation





Laplacian Zero-Crossing







Gradient magnitude







Gradient direction







The local costs are computed as weighted sum of these component functional. Letting l(p,q) represents the local cost on the directed link from pixel p to a neighboring pixel q, the local cost function is


4
Where each 𝜔 is the weight of the corresponding feature function.
Live-Wire 2-D DP Graph Search Algorithm in Pseudocode5
    Input:
          s                       {Start (or seed) pixel.}
          l(q,r)                  {Local cost function for link between pixels q and r.} 
    Data Structures:
          L                       {List of active pixels sorted by total cost (initially empty).}
          N(q)                    {Neighborhood set of q (contains 8 neighbors of pixel).} 
          e(q)                    {Boolean function indicating if q has been expanded/processed.}
          g(q)                    {Total cost function from seed point to q.}
    Output: 
          p                       {Pointers from each pixel indicating the minimum cost path.}
    Algorithm:
          g(s) ← 0; L ← s;       {Initialize active list with zero cost seed pixel.}
          while L≠∅ do begin      {While still points to expand.}
                    q ← min(L);             {Remove minimum cost pixel q from active list.}
                    e(q) ←TRUE;             {Mark q as expanded (i.e., processed).}
                   for each r∈N(q) such that not e(r) do begin
                               gtmp ←g(q)+l(q,r);           {Compute total cost to neighbor.}
                               if r∈L and gtmpr) end="Implementation" if="" 'then="" then="" (image="" (or="" =="segmentation="References" reset)="" return="" r←l;="" r∉l="" scissors="" to)="" total="" {and="" {assign="" {if="" {remove="" {set="" }="">
External links

Open Source Java implementation of Livewire Image Segmentation Tool for ImageJ - Daniel Lelis Baggio
Coronary Segmentation video

:Category:Image segmentation
Intelligent Scissors
"



MORTENSEN, E. N.; BARRETT, W. A. Intelligent scissors for image composition. In: SIGGRAPH ’95: Proceedings of the 22nd annual conference on Computer graphics and interactive techniques. New York, NY, USA: ACM Press, 1995. p. 191–198. ISBN 0-89791-701-4.↩








