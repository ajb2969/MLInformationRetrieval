   Axiom (computer algebra system)      Axiom (computer algebra system)   Axiom is a free , general-purpose computer algebra system . It consists of an interpreter environment, a compiler and a library, which defines a strongly typed, mathematically (mostly) correct type hierarchy.  History  Two computer algebra systems named Scratchpad were developed by IBM . The first one was started in 1965 by James Greismer at the request of Ralph Gomory, and written in Fortran . 1 The development of this software were stopped before any public release. The second Scratchpad, originally named Scratchpad II , was developed from 1977 on, at Thomas J. Watson Research Center , under the direction of Richard Dimick Jenks. 2 Other key early developers were Barry Trager, Stephen Watt, James Davenport, Robert Sutor, and Scott Morrison.  Scratchpad II was renamed Axiom when IBM decided, circa 1990, to make it a commercial product. A few years later, it was sold to NAG . In 2001, it was withdrawn from the market and re-released under the Modified BSD License . Since then, the project's lead developer has been Tim Daly.  In 2007, Axiom was forked twice, originating two different open-source projects: OpenAxiom 3 and FriCAS , 4 following "serious disagreement about project goals". 5 The Axiom project continued to be developed by Tim Daly.  Documentation  Axiom is a literate program . 6 The source code is becoming available in a set of volumes which are available on the axiom-developer.org website. These volumes contain the actual source code of the system.  The currently available documents are:   Combined Table of Contents  Volume 0: Axiom Jenks and Sutor —The main textbook  Volume 1: Axiom Tutorial —A simple introduction  Volume 2: Axiom Users Guide —Detailed examples of domain use (incomplete)  Volume 3: Axiom Programmers Guide —Guided examples of program writing (incomplete)  Volume 4: Axiom Developers Guide —Short essays on developer-specific topics (incomplete)  Volume 5: Axiom Interpreter —Source code for Axiom interpreter (incomplete)  Volume 6: Axiom Command —Source code for system commands and scripts (incomplete)  Volume 7: Axiom Hyperdoc —Source code and explanation of X11 Hyperdoc help browser  Volume 7.1 Axiom Hyperdoc Pages —Source code for Hyperdoc pages   Volume 8: Axiom Graphics —Source code for X11 Graphics subsystem  Volume 8.1 Axiom Gallery —A Gallery of Axiom images   Volume 9: Axiom Compiler —Source code for Spad compiler (incomplete)  Volume 10: Axiom Algebra Implementation —Essays on implementation issues (incomplete)  Volume 10.1: Axiom Algebra Theory —Essays containing background theory  Volume 10.2: Axiom Algebra Categories —Source code for Axiom categories  Volume 10.3: Axiom Algebra Domains —Source code for Axiom domains  Volume 10.4: Axiom Algebra Packages —Source code for Axiom packages  Volume 10.5: Axiom Algebra Numerics —Source code for Axiom numerics   Volume 11: Axiom Browser —Source pages for Axiom Firefox browser front end  Volume 12: Axiom Crystal —Source code for Axiom Crystal front end (incomplete)  Volume 13: Proving Axiom Correct —Prove Axiom Algebra (incomplete)  Bibliography: Axiom Bibliography —Literature references   Videos  The Axiom project has a major focus on providing documentation. Recently the project announced the first in a series of instructional videos, which are also available on the axiom-developer.org 7 website. The first video 8 provides details on the Axiom information sources. 9  Philosophy  The Axiom project focuses on the “30 Year Horizon”. The primary philosophy is that Axiom needs to develop several fundamental features in order to be useful to the next generation of computational mathematicians. Knuth's literate programming technique is used throughout the source code. Axiom plans to use proof technology to prove the correctness of the algorithms (such as Coq and ACL2 ).  Axiom uses Docker Containers as part of a continuous release process. The latest image is available on any platform using boot2docker 1 and the commands:  docker pull daly/axiom  docker run -i -t daly/axiom axiom  Design  In Axiom, all objects have a type. Examples of types are mathematical structures (such as rings , fields , polynomials ) as well as data structures from computer science (e.g., lists , trees , hash tables ).  A function can take a type as argument, and its return value can also be a type. For example, Fraction is a function, that takes an IntegralDomain as argument, and returns the field of fractions of its argument. As another example, the ring of    4  ×  4      4  4    4\times 4   matrices with rational entries would be constructed as SquareMatrix(4, Fraction Integer) . Of course, when working in this domain, 1 is interpreted as the identity matrix and A^-1 would give the inverse of the matrix A , if it exists.  Several operations can have the same name, and the types of both the arguments and the result are used to determine which operation is applied (cf. function overloading ).  Axiom comes with an extension language called SPAD. All the mathematical knowledge of Axiom is written in this language. The interpreter accepts roughly the same language. SPAD was further developed under the name A# and later Aldor . Axiom no longer supports this language extension.  Features  Within the interpreter environment, Axiom uses type inference and a heuristic algorithm to make explicit type annotations mostly unnecessary.  It features 'HyperDoc', an interactive browser-like help system, and can display two and three dimensional graphics, also providing interactive features like rotation and lighting. It also has a specialised interaction mode for Emacs , as well as a plugin for the TeXmacs editor.  Image:AxiomHyperDoc.png|HyperDoc displaying the available operations for a domain Image:AxiomGraphics.png|Axiom displaying a surface Image:Axiomfirefox.jpg|Axiom Firefox Browser Interface Image:Heatequation.jpg|Axiom simplifying a heat equation Image:Matrixinmatrix.jpg|Axiom matrix manipulation Image:RischIntegration.jpg|Axiom computing a Risch integral  Axiom has an implementation of the Risch algorithm for elementary integration, which was done by Manuel Bronstein and Barry Trager.  See also   A# programming language  Aldor programming language  List of computer algebra systems   References  Further reading                               Timothy Daly "Axiom -- Thirty Years of Lisp"  Timothy Daly "Axiom" Invited Talk, Free Software Conference, Lyon, France, May, 2002  Timothy Daly "Axiom" Invited Talk, Libre Software Meeting , Metz, France, July 9–12, 2003   External links   Axiom Homepage  Online sandbox to try Axiom  Source code repositories: Github , SourceForge , GNU Savannah  Jenks, R.D. and Sutor, R. "Axiom, The Scientific Computation System"  Daly, T. "Axiom Volume 1: Tutorial"   Software forks:   OpenAxiom ( SourceForge )  FriCAS ( SourceForge )   "  Category:Free computer algebra systems  Category:Free software programmed in Lisp  Category:Common Lisp software  Category:Computer algebra system software for Linux     Axiom Homepage ↩  Richard Dimick Jenks - Biographical Information ↩  open-axiom.org ↩  fricas.sourceforge.net ↩  History of FriCAS ↩  Why Literate Programming? at axiom-developer.org ↩  Axiom-developer.org ↩  ↩      