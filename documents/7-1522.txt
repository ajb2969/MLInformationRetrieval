


Join-calculus




Join-calculus

The join-calculus is a process calculus developed at INRIA. The join-calculus was developed to provide a formal basis for the design of distributed programming languages, and therefore intentionally avoids communications constructs found in other process calculi, such as rendezvous communications, which are difficult to implement in a distributed setting.1 Despite this limitation, the join-calculus is as expressive as the full $\pi$-calculus. Encodings of the $\pi$-calculus in the join-calculus, and vice versa, have been demonstrated.2
The join-calculus is a member of the $\pi$-calculus family of process calculi, and can be considered, at its core, an asynchronous $\pi$-calculus with several strong restrictions:3

Scope restriction, reception, and replicated reception are syntactically merged into a single construct, the definition;
Communication occurs only on defined names;
For every defined name there is exactly one replicated reception.

However, as a language for programming, the join-calculus offers at least one convenience over the $\pi$-calculus — namely the use of multi-way join patterns, the ability to match against messages from multiple channels simultaneously.
Languages based on the join-calculus
The join-calculus programming language is a new language based on the join-calculus process calculus. It is implemented as an interpreter written in OCaml, and supports statically typed distributed programming, transparent remote communication, agent-based mobility, and failure-detection.4
Many implementations of the join-calculus were made as extensions of existing programming languages:

JoCaml is a version of OCaml extended with join-calculus primitives.


Polyphonic C# and its successor Cω extend C#.


MC# and Parallel C# extend Polyphonic C#.


Join Java extends Java.


A Concurrent Basic proposal that uses Join-calculus


JErlang (the J is for Join, erjang is Erlang for the JVM)

Embeddings in other programming languages
These implementations do not change the underlying programming language but introduce join calculus operations through a custom library:

The Boost.Join library is an implementation in C++ within the Boost framework.


The ScalaJoins library is in Scala.


Joinads - various implementations of join calculus in F#.


CocoaJoin is an experimental implementation in Objective-C for iOS and Mac OS X.

References


External links

INRIA, Join Calculus homepage

"
Category:Process calculi



, pg. 1
, pg. 2
, pg. 19





