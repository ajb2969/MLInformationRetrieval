   Birthday attack      Birthday attack  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     A birthday attack is a type of cryptographic  attack that exploits the mathematics behind the birthday problem in probability theory . This attack can be used to abuse communication between two or more parties. The attack depends on the higher likelihood of collisions found between random attack attempts and a fixed degree of permutations ( pigeonholes ).  Understanding the problem  As an example, consider the scenario in which a teacher with a class of 30 students asks for everybody's birthday, to determine whether any two students have the same birthday (corresponding to a hash collision as described further [for simplicity, ignore February 29]). Intuitively, this chance may seem small. If the teacher picked a specific day (say September 16), then the chance that at least one student was born on that specific day is    1  -    (   364  /  365   )   30       1   superscript    364  365   30     1-(364/365)^{30}   , about 7.9%. However, the probability that at least one student has the same birthday as any other student is around 70% for n = 30, from the formula    1  -    365  !   /   (     (   365  -  n   )   !   ⋅   365  n    )        1      365    normal-⋅      365  n     superscript  365  n       1-365!/((365-n)!\cdot 365^{n})   . 1  Mathematics  Given a function   f   f   f   , the goal of the attack is to find two different inputs     x  1   ,   x  2       subscript  x  1    subscript  x  2     x_{1},x_{2}   such that     f   (   x  1   )    =   f   (   x  2   )          f   subscript  x  1      f   subscript  x  2      f(x_{1})=f(x_{2})   . Such a pair     x  1   ,   x  2       subscript  x  1    subscript  x  2     x_{1},x_{2}   is called a collision . The method used to find a collision is simply to evaluate the function   f   f   f   for different input values that may be chosen randomly or pseudorandomly until the same result is found more than once. Because of the birthday problem, this method can be rather efficient. Specifically, if a function     f   (  x  )       f  x    f(x)   yields any of   H   H   H   different outputs with equal probability and   H   H   H   is sufficiently large, then we expect to obtain a pair of different arguments    x  1     subscript  x  1    x_{1}   and    x  2     subscript  x  2    x_{2}   with     f   (   x  1   )    =   f   (   x  2   )          f   subscript  x  1      f   subscript  x  2      f(x_{1})=f(x_{2})   after evaluating the function for about    1.25   H       1.25    H     1.25\sqrt{H}   different arguments on average.  We consider the following experiment. From a set of H values we choose n values uniformly at random thereby allowing repetitions. Let p ( n ; H ) be the probability that during this experiment at least one value is chosen more than once. This probability can be approximated as        p   (  n  ;  H  )    ≈   1  -   e   -    n   (   n  -  1   )    /   (   2  H   )       ≈   1  -   e   -    n  2   /   (   2  H   )        ,          p   n  H      1   superscript  e        n    n  1      2  H              1   superscript  e       superscript  n  2     2  H          p(n;H)\approx 1-e^{-n(n-1)/(2H)}\approx 1-e^{-n^{2}/(2H)},\,     Let n ( p ; H ) be the smallest number of values we have to choose, such that the probability for finding a collision is at least p . By inverting this expression above, we find the following approximation        n   (  p  ;  H  )    ≈    2  H   ln   1   1  -  p        ,        n   p  H        2  H      1    1  p         n(p;H)\approx\sqrt{2H\ln\frac{1}{1-p}},     and assigning a 0.5 probability of collision we arrive at        n   (  0.5  ;  H  )    ≈   1.1774   H     .        n   0.5  H      1.1774    H      n(0.5;H)\approx 1.1774\sqrt{H}.\,     Let Q ( H ) be the expected number of values we have to choose before finding the first collision. This number can be approximated by        Q   (  H  )    ≈     π  2   H     .        Q  H         π  2   H      Q(H)\approx\sqrt{\frac{\pi}{2}H}.     As an example, if a 64-bit hash is used, there are approximately 1.8 × 10 19 different outputs. If these are all equally probable (the best case), then it would take 'only' approximately 5 billion attempts (5.1 × 10 9 ) to generate a collision using brute force. This value is called birthday bound 2 and for n -bit codes it could be computed as 2 n /2 .  Other examples are as follows:        Bits   Possible outputs (2 s.f. ) (H)   Desired probability of random collision (2 s.f.) (p)       10 −18   10 −15   10 −12     16   65,536    <2     32   4.3 × 10 9   <2     64   1.8 × 10 19   6     128   3.4 × 10 38   2.6 × 10 10     256   1.2 × 10 77   4.8 × 10 29     384   3.9 × 10 115   8.9 × 10 48     512   1.3 × 10 154   1.6 × 10 68      Table shows number of hashes n ( p )'' needed to achieve the given probability of success, assuming all hashes are equally likely. For comparison, 10 −18 to 10 −15 is the uncorrectable bit error rate of a typical hard disk 1 . In theory, MD5 hashes or UUIDs , being 128 bits, should stay within that range until about 820 billion documents, even if its possible outputs are many more.''   It is easy to see that if the outputs of the function are distributed unevenly, then a collision could be found even faster. The notion of 'balance' of a hash function quantifies the resistance of the function to birthday attacks (exploiting uneven key distribution) and allows the vulnerability of popular hashes such as MD and SHA to be estimated ( Bellare and Kohno, 2004 ).  The subexpression    ln   1   1  -  p          1    1  p      \ln\frac{1}{1-p}   in the equation for    n   (  p  ;  H  )       n   p  H     n(p;H)   is not computed accurately for small   p   p   p   when directly translated into common programming languages as log(1/(1-p)) due to loss of significance . When log1p is available (as it is in C99 ) for example, the equivalent expression -log1p(-p) should be used instead. 3 If this is not done, the first column of the above table is computed as zero, and several items in the second column do not have even one correct significant digit.  Source code example  Here is a Python function that can accurately generate most of the above table:  def birthday(probability_exponent, bits): from math import log1p, sqrt
     probability =  10 . ** probability_exponent
     outputs =  2 . ** bits return sqrt( 2 . * outputs *  - log1p( - probability))  If the code is saved in a file named birthday.py , it can be run interactively as in the following example:  $ python -i birthday.py >>>  birthday (-15, 128) 824963474247.1193  >>>  birthday (-6, 32) 92.68192319417072  Simple approximation  A good rule of thumb which can be used for mental calculation is the relation       p   (  n  )    ≈    n  2    2  m          p  n      superscript  n  2     2  m      p(n)\approx{n^{2}\over 2m}     which can also be written as      n  ≈      2  m   ×  p    (  n  )         n          2  m   p   n      n\approx\sqrt{2m\times p(n)}   .  This works well for probabilities less than or equal to 0.5.  This approximation scheme is especially easy to use for when working with exponents. For instance, suppose you are building 32-bit hashes (    m  =   2  32       m   superscript  2  32     m=2^{32}   ) and want the chance of a collision to be at most one in a million (    p  ≈   2   -  20        p   superscript  2    20      p\approx 2^{-20}   ), how many documents could we have at the most?      n  ≈    2  ×   2  32   ×   2   -  20      =    2    1  +  32   -  20     =    2  13    =   2  6.5   ≈  90.5        n      2   superscript  2  32    superscript  2    20              superscript  2      1  32   20             superscript  2  13          superscript  2  6.5        90.5     n\approx\sqrt{2\times 2^{32}\times 2^{-20}}=\sqrt{2^{1+32-20}}=\sqrt{2^{13}}=2%
 ^{6.5}\approx 90.5     which is close to the correct answer of 93.  Digital signature susceptibility  Digital signatures can be susceptible to a birthday attack. A message   m   m   m   is typically signed by first computing    f   (  m  )       f  m    f(m)   , where   f   f   f   is a cryptographic hash function , and then using some secret key to sign    f   (  m  )       f  m    f(m)   . Suppose Mallory wants to trick Bob into signing a fraudulent contract. Mallory prepares a fair contract   m   m   m   and a fraudulent one    m  ′     superscript  m  normal-′    m^{\prime}   . She then finds a number of positions where   m   m   m   can be changed without changing the meaning, such as inserting commas, empty lines, one versus two spaces after a sentence, replacing synonyms, etc. By combining these changes, she can create a huge number of variations on   m   m   m   which are all fair contracts.  In a similar manner, Mallory also creates a huge number of variations on the fraudulent contract    m  ′     superscript  m  normal-′    m^{\prime}   . She then applies the hash function to all these variations until she finds a version of the fair contract and a version of the fraudulent contract which have the same hash value,     f   (  m  )    =   f   (   m  ′   )          f  m     f   superscript  m  normal-′      f(m)=f(m^{\prime})   . She presents the fair version to Bob for signing. After Bob has signed, Mallory takes the signature and attaches it to the fraudulent contract. This signature then "proves" that Bob signed the fraudulent contract.  The probabilities differ slightly from the original birthday problem, as Mallory gains nothing by finding two fair or two fraudulent contracts with the same hash. Mallory's strategy is to generate pairs of one fair and one fraudulent contract. The birthday problem equations apply where   n   n   n   is the number of pairs. The number of hashes Mallory actually generates is    2  n      2  n    2n   .  To avoid this attack, the output length of the hash function used for a signature scheme can be chosen large enough so that the birthday attack becomes computationally infeasible, i.e. about twice as many bits as are needed to prevent an ordinary brute-force attack .  Pollard's rho algorithm for logarithms is an example for an algorithm using a birthday attack for the computation of discrete logarithms .  See also   Collision attack  Meet-in-the-middle attack   Notes  References   Mihir Bellare , Tadayoshi Kohno: Hash Function Balance and Its Impact on Birthday Attacks. EUROCRYPT 2004: pp401–418  Applied Cryptography, 2nd ed. by Bruce Schneier   External links   "What is a digital signature and what is authentication?" from RSA Security 's crypto FAQ .  "Birthday Attack" X5 Networks Crypto FAQs   de:Kollisionsangriff#Geburtstagsangriff "  Category:Cryptographic attacks     ↩  See upper and lower bounds . ↩  ↩    