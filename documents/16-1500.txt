   Hyper basis function network      Hyper basis function network   In machine learning , a Hyper basis function network , or HyperBF network , is a generalization of radial basis function (RBF) networks concept, where the Mahalanobis -like distance is used instead of Euclidean distance measure. Hyper basis function networks were first introduced by Poggio and Girosi in the 1990 paper “Networks for Approximation and Learning”. 1 2  Network Architecture  The typical HyperBF network structure consists of a real input vector    x  ∈   ℝ  n       x   superscript  ℝ  n     x\in\mathbb{R}^{n}   , a hidden layer of activation functions and a linear output layer. The output of the network is a scalar function of the input vector,    ϕ  :    ℝ  n   →  ℝ      normal-:  ϕ   normal-→   superscript  ℝ  n   ℝ     \phi:\mathbb{R}^{n}\to\mathbb{R}   , is given by        ϕ   (  x  )    =    ∑   j  =  1   N     a  j    ρ  j    (   ||   x  -   μ  j    ||   )           ϕ  x     superscript   subscript     j  1    N      subscript  a  j    subscript  ρ  j    norm    x   subscript  μ  j         \phi(x)=\sum_{j=1}^{N}a_{j}\rho_{j}(||x-\mu_{j}||)      where   N   N   N   is a number of neurons in the hidden layer,    μ  j     subscript  μ  j    \mu_{j}   and    a  j     subscript  a  j    a_{j}   are the center and weight of neuron   j   j   j   . The activation function      ρ  j    (   ||   x  -   μ  j    ||   )        subscript  ρ  j    norm    x   subscript  μ  j       \rho_{j}(||x-\mu_{j}||)   at the HyperBF network takes the following form         ρ  j    (   ||   x  -   μ  j    ||   )    =   e     (   x  -   μ  j    )   T    R  j    (   x  -   μ  j    )            subscript  ρ  j    norm    x   subscript  μ  j       superscript  e     superscript    x   subscript  μ  j    T    subscript  R  j     x   subscript  μ  j        \rho_{j}(||x-\mu_{j}||)=e^{(x-\mu_{j})^{T}R_{j}(x-\mu_{j})}      where    R  j     subscript  R  j    R_{j}   is a positive definite    d  ×  d      d  d    d\times d   matrix. Depending on the application, the following types of matrices    R  j     subscript  R  j    R_{j}   are usually considered 3        R  j   =    1   2   σ  2      𝕀   d  ×  d          subscript  R  j       1    2   superscript  σ  2      subscript  𝕀    d  d       R_{j}=\frac{1}{2\sigma^{2}}\mathbb{I}_{d\times d}   , where    σ  >  0      σ  0    \sigma>0   . This case corresponds to the regular RBF network.       R  j   =    1   2   σ  j  2      𝕀   d  ×  d          subscript  R  j       1    2   superscript   subscript  σ  j   2      subscript  𝕀    d  d       R_{j}=\frac{1}{2\sigma_{j}^{2}}\mathbb{I}_{d\times d}   , where     σ  j   >  0       subscript  σ  j   0    \sigma_{j}>0   . In this case, the basis functions are radially symmetric, but are scaled with different width.       R  j   =   d  i  a  g   (   1   2   σ   j  1   2     ,  …  ,   1   2   σ   j  z   2     )    𝕀   d  ×  d          subscript  R  j     d  i  a  g     1    2   superscript   subscript  σ    j  1    2     normal-…    1    2   superscript   subscript  σ    j  z    2       subscript  𝕀    d  d       R_{j}=diag\left(\frac{1}{2\sigma_{j1}^{2}},...,\frac{1}{2\sigma_{jz}^{2}}%
 \right)\mathbb{I}_{d\times d}   , where     σ   j  i    >  0       subscript  σ    j  i    0    \sigma_{ji}>0   . Every neuron has an elliptic shape with a varying size.  Positive definite matrix, but not diagonal.   Training  Training HyperBF networks involves estimation of weights    a  j     subscript  a  j    a_{j}   , shape and centers of neurons    R  j     subscript  R  j    R_{j}   and    μ  j     subscript  μ  j    \mu_{j}   . Poggio and Girosi (1990) describe the training method with moving centers and adaptable neuron shapes. The outline of the method is provided below.  Consider the quadratic loss of the network     H   [   ϕ  *   ]    =    ∑   i  =  1   N     (    y  i   -    ϕ  *    (   x  i   )     )   2          H   delimited-[]   superscript  ϕ        superscript   subscript     i  1    N    superscript     subscript  y  i      superscript  ϕ     subscript  x  i     2      H[\phi^{*}]=\sum_{i=1}^{N}(y_{i}-\phi^{*}(x_{i}))^{2}   . The following conditions must be satisfied at the optimum:          ∂  H    (   ϕ  *   )     ∂   a  j     =  0            H    superscript  ϕ        subscript  a  j     0    \frac{\partial H(\phi^{*})}{\partial a_{j}}=0   ,       ∂  H    (   ϕ  *   )     ∂   μ  j     =  0            H    superscript  ϕ        subscript  μ  j     0    \frac{\partial H(\phi^{*})}{\partial\mu_{j}}=0   ,       ∂  H    (   ϕ  *   )     ∂  W    =  0            H    superscript  ϕ       W    0    \frac{\partial H(\phi^{*})}{\partial W}=0      where     R  j   =    W  T   W        subscript  R  j      superscript  W  T   W     R_{j}=W^{T}W   . Then in the gradient descent method the values of     a  j   ,   μ  j   ,  W      subscript  a  j    subscript  μ  j   W    a_{j},\mu_{j},W   that minimize    H   [   ϕ  *   ]       H   delimited-[]   superscript  ϕ       H[\phi^{*}]   can be found as a stable fixed point of the following dynamic system:         a  j   ˙   =   -   ω     ∂  H    (   ϕ  *   )     ∂   a  j            normal-˙   subscript  a  j        ω        H    superscript  ϕ        subscript  a  j         \dot{a_{j}}=-\omega\frac{\partial H(\phi^{*})}{\partial a_{j}}   ,      μ  j   ˙   =   -   ω     ∂  H    (   ϕ  *   )     ∂   μ  j            normal-˙   subscript  μ  j        ω        H    superscript  ϕ        subscript  μ  j         \dot{\mu_{j}}=-\omega\frac{\partial H(\phi^{*})}{\partial\mu_{j}}   ,     W  ˙   =   -   ω     ∂  H    (   ϕ  *   )     ∂  W           normal-˙  W       ω        H    superscript  ϕ       W        \dot{W}=-\omega\frac{\partial H(\phi^{*})}{\partial W}      where   ω   ω   \omega   determines the rate of convergence.  Overall, training HyperBF networks can be computationally challenging. Moreover, the high degree of freedom of HyperBF leads to overfitting and poor generalization. However, HyperBF networks have an important advantage that a small number of neurons is enough for learning complex functions. 4  References  "  Category:Artificial neural networks  Category:Classification algorithms  Category:Machine learning algorithms     T. Poggio and F. Girosi (1990). "Networks for Approximation and Learning". Proc. of the IEEE  Vol. 78, No. 9 :1481-1497. ↩  R.N. Mahdi, E.C. Rouchka (2011). "Reduced HyperBF Networks: Regularization by Explicit Complexity Reduction and Scaled Rprop-Based Training" . IEEE Transactions of Neural Networks  2 :673–686. ↩  F. Schwenker, H.A. Kestler and G. Palm (2001). "Three Learning Phases for Radial-Basis-Function Network" Neural Netw.  14 :439-458. ↩      