   Context-free language      Context-free language   In formal language theory , a context-free language ( CFL ) is a language generated by some context-free grammar (CFG). Different CF grammars can generate the same CF language. It is important to distinguish properties of the language (intrinsic properties) from properties of a particular grammar (extrinsic properties).  The set of all context-free languages is identical to the set of languages accepted by pushdown automata , which makes these languages amenable to parsing. Indeed, given a CFG, there is a direct way to produce a pushdown automaton for the grammar (and corresponding language), though going the other way (producing a grammar given an automaton) is not as direct.  Context-free languages have many applications in programming languages ; for example, the language of all properly matched parentheses is generated by the grammar    S  →   S   S    |   (  S  )   |   ε      normal-→  S    S  S    S   ε     S\to SS~{}|~{}(S)~{}|~{}\varepsilon   . Also, most arithmetic expressions are generated by context-free grammars.  Examples  An archetypal context-free language is    L  =   {    a  n    b  n    :   n  ≥  1   }       L   conditional-set     superscript  a  n    superscript  b  n      n  1      L=\{a^{n}b^{n}:n\geq 1\}   , the language of all non-empty even-length strings, the entire first halves of which are   a   a   a   's, and the entire second halves of which are   b   b   b   's.   L   L   L   is generated by the grammar    S  →  a  S   b   |  a  b     fragments  S  normal-→  a  S  b  normal-|  a  b    S\to aSb~{}|~{}ab   . This language is not regular . It is accepted by the pushdown automaton     M  =   (   {   q  0   ,   q  1   ,   q  f   }   ,   {  a  ,  b  }   ,   {  a  ,  z  }   ,  δ  ,   q  0   ,  z  ,   {   q  f   }   )       M     subscript  q  0    subscript  q  1    subscript  q  f     a  b    a  z   δ   subscript  q  0   z    subscript  q  f       M=(\{q_{0},q_{1},q_{f}\},\{a,b\},\{a,z\},\delta,q_{0},z,\{q_{f}\})   where   δ   δ   \delta   is defined as follows: 1        δ   (   q  0   ,  a  ,  z  )    =   (   q  0   ,   a  z   )         δ    subscript  q  0   a  z      subscript  q  0     a  z      \delta(q_{0},a,z)=(q_{0},az)         δ   (   q  0   ,  a  ,  a  )    =   (   q  0   ,   a  a   )         δ    subscript  q  0   a  a      subscript  q  0     a  a      \delta(q_{0},a,a)=(q_{0},aa)         δ   (   q  0   ,  b  ,  a  )    =   (   q  1   ,  ε  )         δ    subscript  q  0   b  a      subscript  q  1   ε     \delta(q_{0},b,a)=(q_{1},\varepsilon)         δ   (   q  1   ,  b  ,  a  )    =   (   q  1   ,  ε  )         δ    subscript  q  1   b  a      subscript  q  1   ε     \delta(q_{1},b,a)=(q_{1},\varepsilon)      Unambiguous CFLs are a proper subset of all CFLs: there are inherently ambiguous CFLs. An example of an inherently ambiguous CFL is the union of    {    a  n    b  m    c  m    d  n    |   n  ,  m   >   0   }        superscript  a  n    superscript  b  m    superscript  c  m    superscript  d  n    ket   n  m    0     \{a^{n}b^{m}c^{m}d^{n}|n,m>0\}   with    {    a  n    b  n    c  m    d  m    |   n  ,  m   >   0   }        superscript  a  n    superscript  b  n    superscript  c  m    superscript  d  m    ket   n  m    0     \{a^{n}b^{n}c^{m}d^{m}|n,m>0\}   . This set is context-free, since the union of two context-free languages is always context-free. But there is no way to unambiguously parse strings in the (non-context-free) subset    {    a  n    b  n    c  n    d  n    |  n  >   0   }        superscript  a  n    superscript  b  n    superscript  c  n    superscript  d  n    ket  n   0     \{a^{n}b^{n}c^{n}d^{n}|n>0\}   which is the intersection of these two languages.  Languages that are not context-free  The set    {    a  n    b  n    c  n    d  n    |  n  >   0   }        superscript  a  n    superscript  b  n    superscript  c  n    superscript  d  n    ket  n   0     \{a^{n}b^{n}c^{n}d^{n}|n>0\}   is a context-sensitive language , but there does not exist a context-free grammar generating this language. So there exist context-sensitive languages which are not context-free. To prove that a given language is not context-free, one may employ the pumping lemma for context-free languages 2 or a number of other methods, such as Ogden's lemma or Parikh's theorem . 3  Closure properties  Context-free languages are closed under the following operations. That is, if L and P are context-free languages, the following languages are context-free as well:   the union     L  ∪  P      L  P    L\cup P   of L and P  the reversal of L  the concatenation     L  ⋅  P     normal-⋅  L  P    L\cdot P   of L and P  the Kleene star     L  *     superscript  L     L^{*}   of L  the image    φ   (  L  )       φ  L    \varphi(L)   of L under a homomorphism    φ   φ   \varphi     the image     φ   -  1     (  L  )        superscript  φ    1    L    \varphi^{-1}(L)   of L under an inverse homomorphism     φ   -  1      superscript  φ    1     \varphi^{-1}     the cyclic shift of L (the language    {   v  u   :    u  v   ∈  L   }     conditional-set    v  u       u  v   L     \{vu:uv\in L\}   )   Context-free languages are not closed under complement , intersection , or difference . However, if L is a context-free language and D is a regular language then both their intersection    L  ∩  D      L  D    L\cap D   and their difference    L  ∖  D      L  D    L\setminus D   are context-free languages.  Nonclosure under intersection, complement, and difference  The context-free languages are not closed under intersection. This can be seen by taking the languages    A  =   {    a  n    b  n    c  m    ∣    m  ,  n   ≥  0   }       A   conditional-set     superscript  a  n    superscript  b  n    superscript  c  m       m  n   0      A=\{a^{n}b^{n}c^{m}\mid m,n\geq 0\}   and    B  =   {    a  m    b  n    c  n    ∣    m  ,  n   ≥  0   }       B   conditional-set     superscript  a  m    superscript  b  n    superscript  c  n       m  n   0      B=\{a^{m}b^{n}c^{n}\mid m,n\geq 0\}   , which are both context-free. 4 Their intersection is     A  ∩  B   =   {    a  n    b  n    c  n    ∣   n  ≥  0   }         A  B    conditional-set     superscript  a  n    superscript  b  n    superscript  c  n      n  0      A\cap B=\{a^{n}b^{n}c^{n}\mid n\geq 0\}   , which can be shown to be non-context-free by the pumping lemma for context-free languages .  Context-free languages are also not closed under complementation, as for any languages A and B     A  ∩  B   =     A  ¯   ∪   B  ¯    ¯         A  B    normal-¯     normal-¯  A    normal-¯  B       A\cap B=\overline{\overline{A}\cup\overline{B}}   .  Context-free language are also not closed under difference: L C = Σ * \ L  Decidability properties  The following problems are undecidable for arbitrary context-free grammars A and B:   Equivalence: Given two context-free grammars A and B , is     L   (  A  )    =   L   (  B  )          L  A     L  B     L(A)=L(B)   ?  Intersection Emptiness: Given two context-free grammars A and B , is      L   (  A  )    ∩   L   (  B  )     =  ∅          L  A     L  B       L(A)\cap L(B)=\emptyset   ? However, the intersection of a context-free language and a regular language is context-free, 5 and the variant of the problem where B is a regular grammar is decidable.  Containment: Given a context-free grammar A , is     L   (  A  )    ⊆   L   (  B  )          L  A     L  B     L(A)\subseteq L(B)   ? Again, the variant of the problem where B is a regular grammar is decidable.  Universality: Given a context-free grammar A , is     L   (  A  )    =   Σ  *         L  A    superscript  normal-Σ      L(A)=\Sigma^{*}   ?   The following problems are decidable for arbitrary context-free languages:   Emptiness: Given a context-free grammar A , is     L   (  A  )    =  ∅        L  A      L(A)=\emptyset   ?  Finiteness: Given a context-free grammar A , is    L   (  A  )       L  A    L(A)   finite?  Membership: Given a context-free grammar G , and a word   w   w   w   , does    w  ∈   L   (  G  )        w    L  G     w\in L(G)   ? Efficient polynomial-time algorithms for the membership problem are the CYK algorithm and Earley's Algorithm .   According to Hopcroft, Motwani, Ullman (2003), 6 many of the fundamental closure and (un)decidability properties of context-free languages were shown in the 1961 paper of Bar-Hillel, Perles, and Shamir 7  Parsing  Determining an instance of the membership problem; i.e. given a string   w   w   w   , determine whether    w  ∈   L   (  G  )        w    L  G     w\in L(G)   where   L   L   L   is the language generated by a given grammar   G   G   G   ; is also known as recognition . Context-free recognition for Chomsky normal form grammars was shown by Leslie G. Valiant to be reducible to boolean matrix multiplication , thus inheriting its complexity upper bound of O ( n 2.3728639 ). 8 9 10 Conversely, Lillian Lee has shown O ( n 3-ε ) boolean matrix multiplication to be reducible to O ( n 3-3ε ) CFG parsing, thus establishing some kind of lower bound for the latter. 11  Practical uses of context-free languages require also to produce a derivation tree that exhibits the structure that the grammar associates with the given string. The process of producing this tree is called parsing . Known parsers have a time complexity that is cubic in the size of the string that is parsed.  Formally, the set of all context-free languages is identical to the set of languages accepted by pushdown automata (PDA). Parser algorithms for context-free languages include the CYK algorithm and the Earley's Algorithm .  A special subclass of context-free languages are the deterministic context-free languages which are defined as the set of languages accepted by a deterministic pushdown automaton and can be parsed by a LR(k) parser . 12  See also parsing expression grammar as an alternative approach to grammar and parser.  See also   Deterministic context-free language  Parsing   Notes  References       Chapter 2: Context-Free Languages, pp. 91–122.  Jean-Michel Autebert, Jean Berstel, Luc Boasson, Context-Free Languages and Push-Down Automata , in: G. Rozenberg, A. Salomaa (eds.), Handbook of Formal Languages, Vol. 1, Springer-Verlag, 1997, 111-174.   "  Category:Formal languages  Category:Languages  Category:Linguistics     meaning of   δ   δ   \delta   's arguments and results     δ   (   state  1   ,  read  ,  pop  )    =   (   state  2   ,  push  )         δ    subscript  state  1   read  pop      subscript  state  2   push     \delta(\mathrm{state}_{1},\mathrm{read},\mathrm{pop})=(\mathrm{state}_{2},%
 \mathrm{push})    ↩   How to prove that a language is not context-free? ↩  A context-free grammar for the language A is given by the following production rules, taking S as the start symbol: S → Sc | aTb | ε ; T → aTb | ε . The grammar for B is analogous. ↩  , p. 59, Theorem 6.7 ↩  Here: Sect.7.6, p.304, and Sect.9.7, p.411 ↩  ↩  ↩  ↩  In Valiant's papers, O ( n 2.81 ) given, the then best known upper bound. See Matrix multiplication#Algorithms for efficient matrix multiplication and Coppersmith–Winograd algorithm for bound improvements since then. ↩  ↩  ↩     