   Horner's method      Horner's method  In [[mathematics]], '''Horner's method''' (also known as ' table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */    Horner scheme ' in the UK or Horner's rule in the U.S. 1 2 ) is either of two things: (i) an algorithm for calculating polynomials , which consists of transforming the monomial form into a computationally efficient form; 3 or (ii) a method for approximating the roots of a polynomial. 4 The latter is also known as Ruffini–Horner's method . 5  These methods are named after the British mathematician William George Horner , although they were known before him by Paolo Ruffini 6 and, six hundred years earlier, by the Chinese mathematician Qin Jiushao . 7  Description of the algorithm  Given the polynomial        p   (  x  )    =    ∑   i  =  0   n     a  i    x  i     =    a  0   +    a  1   x   +    a  2    x  2    +    a  3    x  3    +  ⋯  +    a  n    x  n      ,          p  x     superscript   subscript     i  0    n      subscript  a  i    superscript  x  i             subscript  a  0      subscript  a  1   x      subscript  a  2    superscript  x  2       subscript  a  3    superscript  x  3    normal-⋯     subscript  a  n    superscript  x  n        p(x)=\sum_{i=0}^{n}a_{i}x^{i}=a_{0}+a_{1}x+a_{2}x^{2}+a_{3}x^{3}+\cdots+a_{n}x%
 ^{n},     where     a  0   ,  …  ,   a  n       subscript  a  0   normal-…   subscript  a  n     a_{0},\ldots,a_{n}   are real numbers, we wish to evaluate the polynomial at a specific value of   x   x   x   , say    x  0     subscript  x  0    x_{0}   .  To accomplish this, we define a new sequence of constants as follows:      b  n     subscript  b  n    \displaystyle b_{n}     Then    b  0     subscript  b  0    b_{0}   is the value of    p   (   x  0   )       p   subscript  x  0     p(x_{0})   .  To see why this works, note that the polynomial can be written in the form        p   (  x  )    =    a  0   +   x   (    a  1   +   x   (    a  2   +  ⋯  +   x   (    a   n  -  1    +    a  n   x    )   ⋯    )     )      .        p  x      subscript  a  0     x     subscript  a  1     x     subscript  a  2   normal-⋯    x     subscript  a    n  1       subscript  a  n   x    normal-⋯          p(x)=a_{0}+x(a_{1}+x(a_{2}+\cdots+x(a_{n-1}+a_{n}x)\cdots)).\,     Thus, by iteratively substituting the    b  i     subscript  b  i    b_{i}   into the expression,      p   (   x  0   )       p   subscript  x  0     \displaystyle p(x_{0})     Examples  Evaluate       f   (  x  )    =      2   x  3    -   6   x  2     +   2  x    -   1          f  x           2   superscript  x  3      6   superscript  x  2       2  x    1     f(x)=2x^{3}-6x^{2}+2x-1\,   for    x  =   3.       x  3.    x=3.\;     We use synthetic division as follows:  x₀│   x³    x²    x¹    x⁰  3 │   2    −6     2    −1  │         6     0     6  └────────────────────────  2     0     2     5  The entries in the third row are the sum of those in the first two. Each entry in the second row is the product of the x -value (3 in this example) with the third-row entry immediately to the left. The entries in the first row are the coefficients of the polynomial to be evaluated. Then the remainder of    f   (  x  )       f  x    f(x)   on division by    x  -  3      x  3    x-3   is 5.  But by the polynomial remainder theorem, we know that the remainder is    f   (  3  )       f  3    f(3)   . Thus     f   (  3  )    =  5        f  3   5    f(3)=5     In this example, if      a  3   =  2   ,     a  2   =   -  6    ,     a  1   =  2   ,    a  0   =   -  1         formulae-sequence     subscript  a  3   2    formulae-sequence     subscript  a  2     6     formulae-sequence     subscript  a  1   2      subscript  a  0     1        a_{3}=2,a_{2}=-6,a_{1}=2,a_{0}=-1   we can see that      b  3   =  2   ,     b  2   =  0   ,     b  1   =  2   ,    b  0   =  5        formulae-sequence     subscript  b  3   2    formulae-sequence     subscript  b  2   0    formulae-sequence     subscript  b  1   2      subscript  b  0   5       b_{3}=2,b_{2}=0,b_{1}=2,b_{0}=5   , the entries in the third row. So, synthetic division is based on Horner's method.  As a consequence of the polynomial remainder theorem , the entries in the third row are the coefficients of the second-degree polynomial, the quotient of    f   (  x  )       f  x    f(x)   on division by    x  -  3      x  3    x-3   . The remainder is 5. This makes Horner's method useful for polynomial long division .  Divide       x  3   -   6   x  2     +   11  x    -   6            superscript  x  3     6   superscript  x  2       11  x    6    x^{3}-6x^{2}+11x-6\,   by    x  -   2       x  2    x-2\,   :  2 │   1    -6    11    -6  │         2    -8     6  └────────────────────────  1    -4     3     0  The quotient is      x  2   -   4  x    +   3          superscript  x  2     4  x    3    x^{2}-4x+3\,   .  Let      f  1    (  x  )    =      4   x  4    -   6   x  3     +   3  x    -   5           subscript  f  1   x           4   superscript  x  4      6   superscript  x  3       3  x    5     f_{1}(x)=4x^{4}-6x^{3}+3x-5\,   and      f  2    (  x  )    =    2  x   -   1           subscript  f  2   x       2  x   1     f_{2}(x)=2x-1\,   . Divide     f  1    (  x  )        subscript  f  1   x    f_{1}(x)\,   by      f  2     (  x  )        subscript  f  2   x    f_{2}\,(x)   using Horner's method.  2 │  4    -6    0    3   │   -5  ────┼──────────────────────┼───────  1 │        2   -2   -1   │    1  │                      │  └──────────────────────┼───────  2    -2    -1   1   │   -4  The third row is the sum of the first two rows, divided by 2. Each entry in the second row is the product of 1 with the third-row entry to the left. The answer is          f  1    (  x  )      f  2    (  x  )     =      2   x  3    -   2   x  2    -  x   +  1   -   4    2  x   -  1      .           subscript  f  1   x      subscript  f  2   x            2   superscript  x  3      2   superscript  x  2    x   1     4      2  x   1       \frac{f_{1}(x)}{f_{2}(x)}=2x^{3}-2x^{2}-x+1-\frac{4}{2x-1}.     Floating point multiplication and division  Horner's method is a fast, code-efficient method for multiplication and division of binary numbers on a microcontroller with no hardware multiplier . One of the binary numbers to be multiplied is represented as a trivial polynomial, where, (using the above notation): a i = 1, and x = 2. Then, x (or x to some power) is repeatedly factored out. In this binary numeral system (base 2), x = 2, so powers of 2 are repeatedly factored out.  Example  For example, to find the product of two numbers, (0.15625) and m :       (  0.15625  )   m      0.15625  m    \displaystyle(0.15625)m     Method  To find the product of two binary numbers, d and m:   1. A register holding the intermediate result is initialized to d.  2. Begin with the least significant (rightmost) non-zero bit in m.  2b. Count (to the left) the number of bit positions to the next most significant non-zero bit. If there are no more-significant bits, then take the value of the current bit position.  2c. Using that value, perform a right-shift operation by that number of bits on the register holding the intermediate result   3. If all the non-zero bits were counted, then the intermediate result register now holds the final result. Otherwise, add d to the intermediate result, and continue in step #2 with the next most significant bit in m.   Derivation  In general, for a binary number with bit values: (     d  3    d  2    d  1    d  0        subscript  d  3    subscript  d  2    subscript  d  1    subscript  d  0     d_{3}d_{2}d_{1}d_{0}   ) the product is:        (     d  3    2  3    +    d  2    2  2    +    d  1    2  1    +    d  0    2  0     )   m   =     d  3    2  3   m   +    d  2    2  2   m   +    d  1    2  1   m   +    d  0    2  0   m               subscript  d  3    superscript  2  3       subscript  d  2    superscript  2  2       subscript  d  1    superscript  2  1       subscript  d  0    superscript  2  0     m        subscript  d  3    superscript  2  3   m      subscript  d  2    superscript  2  2   m      subscript  d  1    superscript  2  1   m      subscript  d  0    superscript  2  0   m      (d_{3}2^{3}+d_{2}2^{2}+d_{1}2^{1}+d_{0}2^{0})m=d_{3}2^{3}m+d_{2}2^{2}m+d_{1}2^%
 {1}m+d_{0}2^{0}m   At this stage in the algorithm, it is required that terms with zero-valued coefficients are dropped, so that only binary coefficients equal to one are counted, thus the problem of multiplication or division by zero is not an issue, despite this implication in the factored equation:        =    d  0    (   m  +   2    d  1    d  0     (   m  +   2    d  2    d  1     (   m  +   2    d  3    d  2     (  m  )     )     )     )     .      absent     subscript  d  0     m    2     subscript  d  1    subscript  d  0      m    2     subscript  d  2    subscript  d  1      m    2     subscript  d  3    subscript  d  2    m           =d_{0}(m+2\frac{d_{1}}{d_{0}}(m+2\frac{d_{2}}{d_{1}}(m+2\frac{d_{3}}{d_{2}}(m)%
 ))).     The denominators all equal one (or the term is absent), so this reduces to:        =    d  0    (   m  +   2   d  1    (   m  +   2   d  2    (   m  +   2   d  3    (  m  )     )     )     )     ,      absent     subscript  d  0     m    2   subscript  d  1     m    2   subscript  d  2     m    2   subscript  d  3   m           =d_{0}(m+2{d_{1}}(m+2{d_{2}}(m+2{d_{3}}(m)))),   or equivalently (as consistent with the "method" described above):        =    d  3    (   m  +    2   -  1     d  2    (   m  +    2   -  1     d  1    (   m  +    d  0    (  m  )     )     )     )     .      absent     subscript  d  3     m     superscript  2    1     subscript  d  2     m     superscript  2    1     subscript  d  1     m     subscript  d  0   m           =d_{3}(m+2^{-1}{d_{2}}(m+2^{-1}{d_{1}}(m+{d_{0}}(m)))).     In binary (base 2) math, multiplication by a power of 2 is merely a register shift operation. Thus, multiplying by 2 is calculated in base-2 by an arithmetic shift . The factor (2 −1 ) is a right arithmetic shift , a (0) results in no operation (since 2 0 = 1, is the multiplicative identity element ), and a (2 1 ) results in a left arithmetic shift. The multiplication product can now be quickly calculated using only arithmetic shift operations, addition and subtraction.  The method is particularly fast on processors supporting a single-instruction shift-and-addition-accumulate. Compared to a C floating-point library, Horner's method sacrifices some accuracy, however it is nominally 13 times faster (16 times faster when the " canonical signed digit " (CSD) form is used), and uses only 20% of the code space. 8  Polynomial root finding  Using Horner's method in combination with Newton's method , it is possible to approximate the real roots of a polynomial. The algorithm works as follows. Given a polynomial     p  n    (  x  )        subscript  p  n   x    p_{n}(x)   of degree   n   n   n   with zeros     z  n   <   z   n  -  1    <  ⋯  <   z  1          subscript  z  n    subscript  z    n  1         normal-⋯        subscript  z  1      z_{n}   , make some initial guess    x  0     subscript  x  0    x_{0}   such that     x  0   >   z  1        subscript  x  0    subscript  z  1     x_{0}>z_{1}   . Now iterate the following two steps:  1. Using Newton's method , find the largest zero    z  1     subscript  z  1    z_{1}   of     p  n    (  x  )        subscript  p  n   x    p_{n}(x)   using the guess    x  0     subscript  x  0    x_{0}   .  2. Using Horner's method, divide out    (   x  -   z  1    )      x   subscript  z  1     (x-z_{1})   to obtain    p   n  -  1      subscript  p    n  1     p_{n-1}   . Return to step 1 but use the polynomial    p   n  -  1      subscript  p    n  1     p_{n-1}   and the initial guess    z  1     subscript  z  1    z_{1}   .  These two steps are repeated until all real zeros are found for the polynomial. If the approximated zeros are not precise enough, the obtained values can be used as initial guesses for Newton's method but using the full polynomial rather than the reduced polynomials. 9  Example  (Figure)  Polynomial root finding using Horner's method   Consider the polynomial,        p  6    (  x  )    =    (   x  -  3   )    (   x  +  3   )    (   x  +  5   )    (   x  +  8   )    (   x  -  2   )    (   x  -  7   )           subscript  p  6   x       x  3     x  3     x  5     x  8     x  2     x  7      p_{6}(x)=(x-3)(x+3)(x+5)(x+8)(x-2)(x-7)     which can be expanded to        p  6    (  x  )    =       x  6   +   4   x  5     -   72   x  4    -   214   x  3     +   1127   x  2    +   1602  x    -  5040.          subscript  p  6   x            superscript  x  6     4   superscript  x  5       72   superscript  x  4      214   superscript  x  3       1127   superscript  x  2      1602  x    5040.     p_{6}(x)=x^{6}+4x^{5}-72x^{4}-214x^{3}+1127x^{2}+1602x-5040.     From the above we know that the largest root of this polynomial is 7 so we are able to make an initial guess of 8. Using Newton's method the first zero of 7 is found as shown in black in the figure to the right. Next    p   (  x  )       p  x    p(x)   is divided by    (   x  -  7   )      x  7    (x-7)   to obtain        p  5    (  x  )    =      x  5   +   11   x  4    +   5   x  3     -   179   x  2    -   126  x    +   720           subscript  p  5   x          superscript  x  5     11   superscript  x  4      5   superscript  x  3       179   superscript  x  2      126  x    720     p_{5}(x)=x^{5}+11x^{4}+5x^{3}-179x^{2}-126x+720\,     which is drawn in red in the figure to the right. Newton's method is used to find the largest zero of this polynomial with an initial guess of 7. The largest zero of this polynomial which corresponds to the second largest zero of the original polynomial is found at 3 and is circled in red. The degree 5 polynomial is now divided by    (   x  -  3   )      x  3    (x-3)   to obtain        p  4    (  x  )    =     x  4   +   14   x  3    +   47   x  2     -   38  x   -   240           subscript  p  4   x        superscript  x  4     14   superscript  x  3      47   superscript  x  2       38  x   240     p_{4}(x)=x^{4}+14x^{3}+47x^{2}-38x-240\,     which is shown in yellow. The zero for this polynomial is found at 2 again using Newton's method and is circled in yellow. Horner's method is now used to obtain        p  3    (  x  )    =    x  3   +   16   x  2    +   79  x   +   120           subscript  p  3   x      superscript  x  3     16   superscript  x  2      79  x   120     p_{3}(x)=x^{3}+16x^{2}+79x+120\,     which is shown in green and found to have a zero at −3. This polynomial is further reduced to        p  2    (  x  )    =    x  2   +   13  x   +   40           subscript  p  2   x      superscript  x  2     13  x   40     p_{2}(x)=x^{2}+13x+40\,     which is shown in blue and yields a zero of −5. The final root of the original polynomial may be found by either using the final zero as an initial guess for Newton's method, or by reducing     p  2    (  x  )        subscript  p  2   x    p_{2}(x)   and solving the linear equation. As can be seen, the expected roots of −8, −5, −3, 2, 3, and 7 were found.  Octave implementation  The following Octave code was used in the example above to implement Horner's method.  function [y b] = horner(a,x) % Input a is the polynomial coefficient vector, x the value to be evaluated at.  % The output y is the evaluated polynomial and b the divided coefficient vector. b( 1 ) = a( 1 );
   for i = 2 : length (a)
     b( i ) = a( i )+x*b( i - 1 );
   end
   y = b( length (a));
   b = b( 1 : length (b)- 1 );
 end  Python implementation  The following Python code implements Horner's method.  def horner(x, * polynomial): """A function that implements the Horner Scheme for evaluating a  polynomial of coefficients *polynomial in x.""" result =  0  for coefficient in polynomial:
         result = result * x + coefficient return result  C implementation  The following C code implements Horner's method.  double HornerEvaluate ( double x, double * CoefficientsOfPolynomial, unsigned  int DegreeOfPolynomial)
 { /*  We want to evaluate the polynomial in x, of coefficients CoefficientsOfPolynomial, using Horner's method.  The result is stored in dbResult.  */  double dbResult = 0 .; int i; for (i = DegreeOfPolynomial; i >= 0 ; i--)
     {
         dbResult = dbResult * x + CoefficientsOfPolynomial[i];
     } return dbResult;
 }  Application  Horner's method can be used to convert between different positional numeral systems – in which case x is the base of the number system, and the a i coefficients are the digits of the base- x representation of a given number – and can also be used if x is a matrix , in which case the gain in computational efficiency is even greater. In fact, when x is a matrix, further acceleration is possible which exploits the structure of matrix multiplication , and only    n      n    \sqrt{n}   instead of n multiplies are needed (at the expense of requiring more storage) using the 1973 method of Paterson and Stockmeyer. 10  Efficiency  Evaluation using the monomial form of a degree- n polynomial requires at most n additions and ( n 2 + n )/2 multiplications, if powers are calculated by repeated multiplication and each monomial is evaluated individually. (This can be reduced to n additions and 2 n − 1 multiplications by evaluating the powers of x iteratively.) If numerical data are represented in terms of digits (or bits), then the naive algorithm also entails storing approximately 2 n times the number of bits of x (the evaluated polynomial has approximate magnitude x n , and one must also store x n itself). By contrast, Horner's method requires only n additions and n multiplications, and its storage requirements are only n times the number of bits of x . Alternatively, Horner's method can be computed with n  fused multiply–adds . Horner's method can also be extended to evaluate the first k derivatives of the polynomial with kn additions and multiplications. 11  Horner's method is optimal, in the sense that any algorithm to evaluate an arbitrary polynomial must use at least as many operations. Alexander Ostrowski proved in 1954 that the number of additions required is minimal. 12  Victor Pan proved in 1966 that the number of multiplications is minimal. 13 However, when x is a matrix, Horner's method is not optimal.  This assumes that the polynomial is evaluated in monomial form and no preconditioning of the representation is allowed, which makes sense if the polynomial is evaluated only once. However, if preconditioning is allowed and the polynomial is to be evaluated many times, then faster algorithms are possible. They involve a transformation of the representation of the polynomial. In general, a degree- n polynomial can be evaluated using only     ⌊   n  /  2   ⌋   +  2          n  2    2    {\scriptstyle{\left\lfloor n/2\right\rfloor+2}}   multiplications and n additions (see Knuth : The Art of Computer Programming , Vol.2).  History  Horner's paper entitled " A new method of solving numerical equations of all orders, by continuous approximation ", was read before the Royal Society of London, at its meeting on July 1, 1819, with Davies Gilbert , Vice-President and Treasurer, in the chair; this was the final meeting of the session before the Society adjorned for its Summer recess. When a sequel was read before the Society in 1823, it was again at the final meeting of the session. On both occasions, papers by James Ivory , FRS, were also read. In 1819, it was Horner's paper that got through to publication in the "Philosophical Transactions". 14 15 later in the year, Ivory's paper falling by the way, despite Ivory being a Fellow; in 1823, when a total of ten papers were read, fortunes as regards publication, were reversed. But Gilbert, who had strong connections with the West of England and may have had social contact with Horner, resident as Horner was in Bristol and Bath, published his own survey of Horner-type methods earlier in 1823.  Horner's paper in Part II of Philosophical Transactions of the Royal Society of London for 1819 was warmly and expansively welcomed by a reviewer in the issue of The Monthly Review: or, Literary Journal for April, 1820; in comparison, a technical paper by Charles Babbage is dismissed curtly in this review. However, the reviewer noted that another, similar method had also recently been published by the architect and mathematical expositor, Peter Nicholson. This theme is developed in a further review of some of Nicholson's books in the issue of The Monthly Review for December, 1820, which in turn ends with notice of the appearance of a booklet by Theophilus Holdred, from whom Nicholson acknowledges he obtained the gist of his approach in the first place, although claiming to have improved upon it. The sequence of reviews is concluded in the issue of The Monthly Review for September, 1821, with the reviewer concluding that whereas Holdred was the first person to discover a direct and general practical solution of numerical equations, he had not reduced it to its simplest form by the time of Horner's publication, and saying that had Holdred published forty years earlier when he first discovered his method, his contribution could be more easily recognized. The reviewer is exceptionally well-informed, even having sighted Horner's preparatory correspondence with Peter Barlow in 1818, seeking work of Budan . The Bodlean Library, Oxford has the Editor's annotated copy of The Monthly Review from which it is clear that the most active reviewer in mathematics in 1814 and 1815 (the last years for which this information has been published) was none other than Peter Barlow,one of the foremost specialists on approximation theory of the period, suggesting that it was Barlow, who wrote this sequence of reviews. As it also happened, Henry Atkinson, of Newcastle, devised a similar approximation scheme in 1809; he had consulted his fellow Geordie , Charles Hutton , another specialist and a senior colleague of Barlow at the Royal Military Academy, Woolwich, only to be advised that, while his work was publishable, it was unlikely to have much impact. J. R. Young, writing in the mid-1830s, concluded that Holdred's first method replicated Atkinson's while his improved method was only added to Holdred's booklet some months after its first appearance in 1820, when Horner's paper was already in circulation.  The feature of Horner's writing that most distinguishes it from his English contemporaries is the way he draws on the Continental literature, notably the work of Arbogast . The advocacy, as well as the detraction, of Horner's Method has this as an unspoken subtext. Quite how he gained that familiarity has not been determined. Horner is known to have made a close reading of John Bonneycastle's book on algebra. Bonneycastle recognizes that Arbogast has the general, combinatorial expression for the reversion of series, a project going back at least to Newton. But Bonneycastle's main purpose in mentioning Arbogast is not to praise him, but to observe that Arbogast's notation is incompatible with the approach he adopts. The gap in Horner's reading was the work of Paolo Ruffini , except that, as far as awareness of Ruffini goes, citations of Ruffini's work by authors, including medical authors, in Philosophical Transactions speak volumes: there are none - Ruffini's name only appears in 1814, recording a work he donated to the Royal Society. Ruffini might have done better if his work had appeared in French, as had Malfatti's Problem in the reformulation of Joseph Diaz Gergonne , or had he written in French, as had Antonio Cagnoli , a source quoted by Bonneycastle on series reversion (today, Cagnoli is in the Italian Wikipedia, as shown, but has yet to make it into either French or English).  Fuller 16 showed that the method in Horner's 1819 paper differs from what afterwards became known as 'Horner's method' and that in consequence the priority for this method should go to Holdred (1920). This view may be compared with the remarks concerning the works of Horner and Holdred in the previous paragraph. Fuller also takes aim at Augustus De Morgan . Precocious though Augustus de Morgan was, he was not the reviewer for The Monthly Review , while several others - Thomas Stephens Davies , J. R. Young, Stephen Fenwick, T. T. Wilkinson - wrote Horner firmly into their records, not least Horner himself, as he published extensively up until the year of his death in 1837. His paper in 1819 was one that would have been difficult to miss. In contrast, the only other mathematical sighting of Holdred is a single named contribution to The Gentleman's Mathematical Companion , an answer to a problem.  It is questionable to what extent it was De Morgan's advocacy of Horner's priority in discovery 17 18 that led to "Horner's method" being so called in textbooks, but it is true that those suggesting this tend themselves to know of Horner largely through intermediaries, of whom De Morgan made himself a prime example. However, this method qua method was known long before Horner. In reverse chronological order, Horner's method was already known to:   Paolo Ruffini in 1809 (see Ruffini's rule ) 19 20  Isaac Newton in 1669 (but precise reference needed)  the Chinese mathematician  Zhu Shijie in the 14th century 21  the Chinese mathematician  Qin Jiushao in his Mathematical Treatise in Nine Sections in the 13th century  the Persian  mathematician  Sharaf al-Dīn al-Tūsī in the 12th century 22  the Chinese mathematician Jia Xian in the 11th century ( Song dynasty )  The Nine Chapters on the Mathematical Art , a Chinese work of the Han Dynasty (202 BC – 220 AD) edited by Liu Hui (fl. 3rd century). 23   However, this observation on its own masks significant differences in conception and also, as noted with Ruffini's work, issues of accessibility.  Qin Jiushao , in his Shu Shu Jiu Zhang ( Mathematical Treatise in Nine Sections ; 1247), presents a portfolio of methods of Horner-type for solving polynomial equations, which was based on earlier works of the 11th century Song dynasty mathematician Jia Xian ; for example, one method is specifically suited to bi-qintics, of which Qin gives an instance, in keeping with the then Chinese custom of case studies. The first person writing in English to note the connection with Horner's method was Alexander Wylie , writing in The North China Herald in 1852; perhaps conflating and misconstruing different Chinese phrases, Wylie calls the method Harmoniously Alternating Evolution (which does not agree with his Chinese, linglong kaifang , not that at that date he uses pinyin ), working the case of one of Qin's quartics and giving, for comparison, the working with Horner's method. Yoshio Mikami in Development of Mathematics in China and Japan published in Leipzig in 1913, gave a detailed description of Qin's method, using the quartic illustrated to the above right in a worked example; he wrote: "who can deny the fact of Horner's illustrious process being used in China at least nearly six long centuries earlier than in Europe ... We of course don't intend in any way to ascribe Horner's invention to a Chinese origin, but the lapse of time sufficiently makes it not altogether impossible that the Europeans could have known of the Chinese method in a direct or indirect way.". 24 However, as Mikami is also aware, it was not altogether impossible that a related work, Si Yuan Yu Jian ( Jade Mirror of the Four Unknowns; 1303) by Zhu Shijie might make the shorter journey across to Japan, but seemingly it never did, although another work of Zhu, Suan Xue Qi Meng , had a seminal influence on the development of traditional mathematics in the Edo period, starting in the mid-1600s. Ulrich Libbrecht (at the time teaching in school, but subsequently a professor of comparative philosophy) gave a detailed description in his doctoral thesis of Qin's method, he concluded: It is obvious that this procedure is a Chinese invention....the method was not known in India . He said, Fibonacci probably learned of it from Arabs, who perhaps borrowed from the Chinese. 25 Here, the problems is that there is no more evidence for this speculation than there is of the method being known in India. Of course, the extraction of square and cube roots along similar lines is already discussed by Liu Hui in connection with Problems IV.16 and 22 in Jiu Zhang Suan Shu , while Wang Xiaotong in the 7th century supposes his readers can solve cubics by an approximation method he does not specify.  See also   Clenshaw algorithm to evaluate polynomials in Chebyshev form  De Boor's algorithm to evaluate splines in B-spline form  De Casteljau's algorithm to evaluate polynomials in Bézier form  Estrin's scheme to facilitate parallelization on modern computer architectures  Lill's method to approximate roots graphically  Ruffini's rule to divide a polynomial by a binomial of the form x − r   References  Citations  Bibliography    Directly available online via the link, but also reprinted with appraisal in D.E.Smith: A Source Book in Mathematics , McGraw-Hill, 1929; Dover reprint, 2 vols 1959       Whittaker E.T. & Robinson G: The Calculus of Observations , London 1924 (Blackie)       Yes, really! It looks as though the link is taking you to a completely different work, but you end up at Mikami's book, as you find on checking the specified pages.        , Jottings on the Science of Chinese Arithmetic (reprinted from issues of The North China Herald (1852).  T. Holdred (1820), A New Method of Solving Equations with Ease and Expedition; by which the True Value of the Unknown Quantity is Found Without Previous Reduction. With a Supplement, Containing Two Other Methods of Solving Equations, Derived from the Same Principle Richard Watts. Sold by Davis and Dickson, mathematical and philosophical booksellers, 17, St. Martin's-le-Grand; and by the author, 2, Denzel Street, Clare-Market, 56pp. Holdred's method is in the supplement following page numbered 45 (which is the 52nd page of the pdf version).   External links     Module for Horner's Method by John H. Mathews  Qiu Jin-Shao, Shu Shu Jiu Zhang (Cong Shu Ji Cheng ed.)   "  Category:Algebra  Category:Polynomials  Category:Numerical analysis  Category:Articles with example Python code  Category:Articles with example MATLAB/Octave code  Category:Articles with example C code     ↩  ↩   ↩  ↩  Florian Cajori , [ http://projecteuclid.org/DPubS/Repository/1.0/Disseminate?view=body&id; ;=pdf_1&handle;=euclid.bams/1183421253 Horner's method of approximation anticipated by Ruffini], Bulletin of the American Mathematical Society, Vol. 17, No. 9, pp. 409–414, 1911 (read before the Southwestern Section of the American Mathematical Society on November 26, 1910). ↩  It is obvious that this procedure is a Chinese invention , Ulrich Librecht, Chinese Mathematics in the Thirteenth Century, Chapter 13, '' Equations of Higher Degree'', p178 Dover, ISBN 0-486-44619-0 ↩  Kripasagar, March 2008, "Efficient Micro Mathematics", Circuit Cellar, issue 212, p. 62. ↩  Kress, Rainer, "Numerical Analysis", Springer, 1991, p.112. ↩  Higham, Nicholas. (2002). Accuracy and Stability of Numerical Algorithms . Philadelphia: SIAM. ISBN 0-89871-521-0. Section 5.4. ↩  ↩  Ostrowski, A. M. (1954). "On two problems in abstract algebra connected with Horner's rule", Studies in Math. Mech., pp. 40-48. New York: Academic Press. ↩  ↩  ↩  ↩  Fuller A. T. :Horner versus Holdred: An Episode in the History of Root Computation, Historia Mathematica 26 (1999), 29–51 ↩     ↩   ↩  Temple, Robert. (1986). The Genius of China: 3,000 Years of Science, Discovery, and Invention . With a forward by Joseph Needham. New York: Simon and Schuster, Inc. ISBN 0-671-62028-2. Page 142. ↩  Yoshio Mikami, Chinese Mathematics in the Thirteenth Century, Chapter 11, Chin Chiu Shao, p77 Chelsea Publishing Co ↩  Ulrich Libbrecht, Chinese Mathematics in the Thirteenth Century, Chapter 13, Numerial Equations of Higher Degree, p208 Dover, ISBN 0-486-44619-0 ↩    