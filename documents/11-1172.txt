   Monad transformer      Monad transformer   In functional programming , a monad transformer is a type constructor which takes a monad as an argument and returns a monad as a result.  Monad transformers can be used to compose features encapsulated by monads - such as state, exception handling , and I/O - in a modular way. Typically, a monad transformer is created by generalising an existing monad; applying the resulting monad transformer to the identity monad yields a monad which is equivalent to the original monad (ignoring any necessary boxing and unboxing).  Definition  A monad transformer consists of:   A type constructor t of kind  (* -> *) -> * -> *  Monad operations return and bind (or an equivalent formulation) for all t m where m is a monad, satisfying the monad laws  An additional operation, lift :: m a -> t m a , satisfying the following laws:   (the notation `bind` below indicates infix application):    lift . return = return  lift (m `bind` k) = (lift m) `bind` (lift . k)    Examples  The option monad transformer  Given any monad     M   A      normal-M  A    \mathrm{M}\,A   , the option monad transformer    M   (   A  ?   )       normal-M   superscript  A  normal-?     \mathrm{M}\left(A^{?}\right)   (where    A  ?     superscript  A  normal-?    A^{?}   denotes the option type ) is defined by:       return  :   A  →   M   (   A  ?   )    =  a  ↦   return   (    Just   a   )        normal-:  return     normal-→  A    normal-M   superscript  A  normal-?         a    maps-to      return    Just  a        \mathrm{return}:A\rightarrow\mathrm{M}\left(A^{?}\right)=a\mapsto\mathrm{%
 return}(\mathrm{Just}\,a)         bind  :  M   (   A  ?   )   →   (  A  →  M   (   B  ?   )   )   →  M   (   B  ?   )   =  m  ↦  f  ↦   bind    m    (  a  ↦   {     return Nothing      if  a   =  Nothing         f    a  ′        if  a   =    Just    a  ′         )      fragments  bind  normal-:  M   fragments  normal-(   superscript  A  normal-?   normal-)   normal-→   fragments  normal-(  A  normal-→  M   fragments  normal-(   superscript  B  normal-?   normal-)   normal-)   normal-→  M   fragments  normal-(   superscript  B  normal-?   normal-)    m  maps-to  f  maps-to  bind  m   fragments  normal-(  a  maps-to   cases  return Nothing      if  a   Nothing     f   superscript  a  normal-′        if  a     Just   superscript  a  normal-′      normal-)     \mathrm{bind}:\mathrm{M}\left(A^{?}\right)\rightarrow\left(A\rightarrow\mathrm%
 {M}\left(B^{?}\right)\right)\rightarrow\mathrm{M}\left(B^{?}\right)=m\mapsto f%
 \mapsto\mathrm{bind}\,m\,\left(a\mapsto\begin{cases}\mbox{return Nothing}&%
 \mbox{if }a=\mathrm{Nothing}\\
 f\,a^{\prime}&\mbox{if }a=\mathrm{Just}\,a^{\prime}\end{cases}\right)         lift  :  M   (  A  )   →  M   (   A  ?   )   =  m  ↦   bind    m    (  a  ↦  return   (   Just   a  )   )      fragments  lift  normal-:  M   fragments  normal-(  A  normal-)   normal-→  M   fragments  normal-(   superscript  A  normal-?   normal-)    m  maps-to  bind  m   fragments  normal-(  a  maps-to  return   fragments  normal-(  Just  a  normal-)   normal-)     \mathrm{lift}:\mathrm{M}(A)\rightarrow\mathrm{M}\left(A^{?}\right)=m\mapsto%
 \mathrm{bind}\,m\,(a\mapsto\mathrm{return}(\mathrm{Just}\,a))      The exception monad transformer  Given any monad     M   A      normal-M  A    \mathrm{M}\,A   , the exception monad transformer    M   (   A  +  E   )       normal-M    A  E     \mathrm{M}(A+E)   (where   E   E   E   is the type of exceptions) is defined by:       return  :   A  →   M   (   A  +  E   )    =  a  ↦   return   (    value   a   )        normal-:  return     normal-→  A    normal-M    A  E         a    maps-to      return    value  a        \mathrm{return}:A\rightarrow\mathrm{M}(A+E)=a\mapsto\mathrm{return}(\mathrm{%
 value}\,a)         bind  :  M   (  A  +  E  )   →   (  A  →  M   (  B  +  E  )   )   →  M   (  B  +  E  )   =  m  ↦  f  ↦   bind    m    (  a  ↦   {      return err  e       if  a   =    err   e          f    a  ′        if  a   =    value    a  ′         )      fragments  bind  normal-:  M   fragments  normal-(  A   E  normal-)   normal-→   fragments  normal-(  A  normal-→  M   fragments  normal-(  B   E  normal-)   normal-)   normal-→  M   fragments  normal-(  B   E  normal-)    m  maps-to  f  maps-to  bind  m   fragments  normal-(  a  maps-to   cases    return err  e       if  a     err  e      f   superscript  a  normal-′        if  a     value   superscript  a  normal-′      normal-)     \mathrm{bind}:\mathrm{M}(A+E)\rightarrow(A\rightarrow\mathrm{M}(B+E))%
 \rightarrow\mathrm{M}(B+E)=m\mapsto f\mapsto\mathrm{bind}\,m\,\left(a\mapsto%
 \begin{cases}\mbox{return err }e&\mbox{if }a=\mathrm{err}\,e\\
 f\,a^{\prime}&\mbox{if }a=\mathrm{value}\,a^{\prime}\end{cases}\right)         lift  :   M   A  →  M   (  A  +  E  )   =  m  ↦   bind    m    (  a  ↦  return   (   value   a  )   )      fragments  lift  normal-:  M  A  normal-→  M   fragments  normal-(  A   E  normal-)    m  maps-to  bind  m   fragments  normal-(  a  maps-to  return   fragments  normal-(  value  a  normal-)   normal-)     \mathrm{lift}:\mathrm{M}\,A\rightarrow\mathrm{M}(A+E)=m\mapsto\mathrm{bind}\,m%
 \,(a\mapsto\mathrm{return}(\mathrm{value}\,a))      The reader monad transformer  Given any monad     M   A      normal-M  A    \mathrm{M}\,A   , the reader monad transformer    E  →    M   A      normal-→  E    normal-M  A     E\rightarrow\mathrm{M}\,A   (where   E   E   E   is the environment type) is defined by:       return  :   A  →  E  →    M   A   =  a  ↦  e  ↦    return   a       normal-:  return     normal-→  A  E    normal-→      normal-M  A        a    maps-to    e    maps-to      return  a       \mathrm{return}:A\rightarrow E\rightarrow\mathrm{M}\,A=a\mapsto e\mapsto%
 \mathrm{return}\,a         bind  :   (  E  →   M   A  )   →   (  A  →  E  →   M   B  )   →  E  →   M   B  =  m  ↦  k  ↦  e  ↦   bind    (   m   e  )    (  a  ↦   k    a   e  )      fragments  bind  normal-:   fragments  normal-(  E  normal-→  M  A  normal-)   normal-→   fragments  normal-(  A  normal-→  E  normal-→  M  B  normal-)   normal-→  E  normal-→  M  B   m  maps-to  k  maps-to  e  maps-to  bind   fragments  normal-(  m  e  normal-)    fragments  normal-(  a  maps-to  k  a  e  normal-)     \mathrm{bind}:(E\rightarrow\mathrm{M}\,A)\rightarrow(A\rightarrow E\rightarrow%
 \mathrm{M}\,B)\rightarrow E\rightarrow\mathrm{M}\,B=m\mapsto k\mapsto e\mapsto%
 \mathrm{bind}\,(m\,e)\,(a\mapsto k\,a\,e)         lift  :     M   A   →  E  →    M   A   =  a  ↦  e  ↦  a      normal-:  lift     normal-→    normal-M  A   E    normal-→      normal-M  A        a    maps-to    e    maps-to    a      \mathrm{lift}:\mathrm{M}\,A\rightarrow E\rightarrow\mathrm{M}\,A=a\mapsto e\mapsto
 a      The state monad transformer  Given any monad     M   A      normal-M  A    \mathrm{M}\,A   , the state monad transformer    S  →   M   (   A  ×  S   )       normal-→  S    normal-M    A  S      S\rightarrow\mathrm{M}(A\times S)   (where   S   S   S   is the state type) is defined by:       return  :   A  →  S  →   M   (   A  ×  S   )    =  a  ↦  s  ↦    return    (  a  ,  s  )        normal-:  return     normal-→  A  S    normal-→      normal-M    A  S         a    maps-to    s    maps-to      return   a  s        \mathrm{return}:A\rightarrow S\rightarrow\mathrm{M}(A\times S)=a\mapsto s%
 \mapsto\mathrm{return}\,(a,s)         bind  :   (  S  →  M   (  A  ×  S  )   )   →   (  A  →  S  →  M   (  B  ×  S  )   )   →  S  →  M   (  B  ×  S  )   =  m  ↦  k  ↦  s  ↦   bind    (   m   s  )    (   (  a  ,   s  ′   )   ↦   k    a    s  ′   )      fragments  bind  normal-:   fragments  normal-(  S  normal-→  M   fragments  normal-(  A   S  normal-)   normal-)   normal-→   fragments  normal-(  A  normal-→  S  normal-→  M   fragments  normal-(  B   S  normal-)   normal-)   normal-→  S  normal-→  M   fragments  normal-(  B   S  normal-)    m  maps-to  k  maps-to  s  maps-to  bind   fragments  normal-(  m  s  normal-)    fragments  normal-(   fragments  normal-(  a  normal-,   superscript  s  normal-′   normal-)   maps-to  k  a   superscript  s  normal-′   normal-)     \mathrm{bind}:(S\rightarrow\mathrm{M}(A\times S))\rightarrow(A\rightarrow S%
 \rightarrow\mathrm{M}(B\times S))\rightarrow S\rightarrow\mathrm{M}(B\times S)%
 =m\mapsto k\mapsto s\mapsto\mathrm{bind}\,(m\,s)\,((a,s^{\prime})\mapsto k\,a%
 \,s^{\prime})         lift  :   M   A  →  S  →  M   (  A  ×  S  )   =  m  ↦  s  ↦   bind    m    (  a  ↦   return    (  a  ,  s  )   )      fragments  lift  normal-:  M  A  normal-→  S  normal-→  M   fragments  normal-(  A   S  normal-)    m  maps-to  s  maps-to  bind  m   fragments  normal-(  a  maps-to  return   fragments  normal-(  a  normal-,  s  normal-)   normal-)     \mathrm{lift}:\mathrm{M}\,A\rightarrow S\rightarrow\mathrm{M}(A\times S)=m%
 \mapsto s\mapsto\mathrm{bind}\,m\,(a\mapsto\mathrm{return}\,(a,s))      The writer monad transformer  Given any monad     M   A      normal-M  A    \mathrm{M}\,A   , the writer monad transformer    M   (   W  ×  A   )       normal-M    W  A     \mathrm{M}(W\times A)   (where   W   W   W   is endowed with a monoid operation   *     *   with identity element   ε   ε   \varepsilon   ) is defined by:       return  :   A  →   M   (   W  ×  A   )    =  a  ↦    return    (  ε  ,  a  )        normal-:  return     normal-→  A    normal-M    W  A         a    maps-to      return   ε  a        \mathrm{return}:A\rightarrow\mathrm{M}(W\times A)=a\mapsto\mathrm{return}\,(%
 \varepsilon,a)         bind  :  M   (  W  ×  A  )   →   (  A  →  M   (  W  ×  B  )   )   →  M   (  W  ×  B  )   =  m  ↦  f  ↦   bind    m    (   (  w  ,  a  )   ↦   bind    (   f   a  )    (   (   w  ′   ,  b  )   ↦   return    (  w  *   w  ′   ,  b  )   )   )      fragments  bind  normal-:  M   fragments  normal-(  W   A  normal-)   normal-→   fragments  normal-(  A  normal-→  M   fragments  normal-(  W   B  normal-)   normal-)   normal-→  M   fragments  normal-(  W   B  normal-)    m  maps-to  f  maps-to  bind  m   fragments  normal-(   fragments  normal-(  w  normal-,  a  normal-)   maps-to  bind   fragments  normal-(  f  a  normal-)    fragments  normal-(   fragments  normal-(   superscript  w  normal-′   normal-,  b  normal-)   maps-to  return   fragments  normal-(  w    superscript  w  normal-′   normal-,  b  normal-)   normal-)   normal-)     \mathrm{bind}:\mathrm{M}(W\times A)\rightarrow(A\rightarrow\mathrm{M}(W\times B%
 ))\rightarrow\mathrm{M}(W\times B)=m\mapsto f\mapsto\mathrm{bind}\,m\,((w,a)%
 \mapsto\mathrm{bind}\,(f\,a)\,((w^{\prime},b)\mapsto\mathrm{return}\,(w*w^{%
 \prime},b)))         lift  :   M   A  →  M   (  W  ×  A  )   =  m  ↦   bind    m    (  a  ↦   return    (  ε  ,  a  )   )      fragments  lift  normal-:  M  A  normal-→  M   fragments  normal-(  W   A  normal-)    m  maps-to  bind  m   fragments  normal-(  a  maps-to  return   fragments  normal-(  ε  normal-,  a  normal-)   normal-)     \mathrm{lift}:\mathrm{M}\,A\rightarrow\mathrm{M}(W\times A)=m\mapsto\mathrm{%
 bind}\,m\,(a\mapsto\mathrm{return}\,(\varepsilon,a))      The continuation monad transformer  Given any monad     M   A      normal-M  A    \mathrm{M}\,A   , the continuation monad transformer maps an arbitrary type   R   R   R   into functions of type     (  A  →   M   R  )   →   M   R     fragments   fragments  normal-(  A  normal-→  M  R  normal-)   normal-→  M  R    (A\rightarrow\mathrm{M}\,R)\rightarrow\mathrm{M}\,R   , where   R   R   R   is the result type of the continuation. It is defined by:       return  :  A  →   (  A  →   M   R  )   →   M   R  =  a  ↦  k  ↦   k   a     fragments  return  normal-:  A  normal-→   fragments  normal-(  A  normal-→  M  R  normal-)   normal-→  M  R   a  maps-to  k  maps-to  k  a    \mathrm{return}\colon A\rightarrow\left(A\rightarrow\mathrm{M}\,R\right)%
 \rightarrow\mathrm{M}\,R=a\mapsto k\mapsto k\,a         bind  :   (   (  A  →   M   R  )   →   M   R  )   →   (  A  →   (  B  →   M   R  )   →   M   R  )   →   (  B  →   M   R  )   →   M   R     fragments  bind  normal-:   fragments  normal-(   fragments  normal-(  A  normal-→  M  R  normal-)   normal-→  M  R  normal-)   normal-→   fragments  normal-(  A  normal-→   fragments  normal-(  B  normal-→  M  R  normal-)   normal-→  M  R  normal-)   normal-→   fragments  normal-(  B  normal-→  M  R  normal-)   normal-→  M  R    \mathrm{bind}\colon\left(\left(A\rightarrow\mathrm{M}\,R\right)\rightarrow%
 \mathrm{M}\,R\right)\rightarrow\left(A\rightarrow\left(B\rightarrow\mathrm{M}%
 \,R\right)\rightarrow\mathrm{M}\,R\right)\rightarrow\left(B\rightarrow\mathrm{%
 M}\,R\right)\rightarrow\mathrm{M}\,R       =  c  ↦  f  ↦  k  ↦   c    (  a  ↦   f    a   k  )      fragments   c  maps-to  f  maps-to  k  maps-to  c   fragments  normal-(  a  maps-to  f  a  k  normal-)     =c\mapsto f\mapsto k\mapsto c\,\left(a\mapsto f\,a\,k\right)         lift  :   M   A  →   (  A  →   M   R  )   →   M   R  =  bind     fragments  lift  normal-:  M  A  normal-→   fragments  normal-(  A  normal-→  M  R  normal-)   normal-→  M  R   bind    \mathrm{lift}:\mathrm{M}\,A\rightarrow(A\rightarrow\mathrm{M}\,R)\rightarrow%
 \mathrm{M}\,R=\mathrm{bind}      Note that monad transformations are usually not commutative : for instance, applying the state transformer to the option monad yields a type    S  →    (   A  ×  S   )   ?      normal-→  S   superscript    A  S   normal-?     S\rightarrow\left(A\times S\right)^{?}   (a computation which may fail and yield no final state), whereas the converse transformation has type    S  →   (    A  ?   ×  S   )      normal-→  S     superscript  A  normal-?   S     S\rightarrow\left(A^{?}\times S\right)   (a computation which yields a final state and an optional return value).  See also   Monads in functional programming   References  External links   A highly technical blog post briefly reviewing some of the literature on monad transformers and related concepts, with a focus on categorical-theoretic treatment   "  Category:Functional programming   