


Church encoding




Church encoding

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In mathematics, Church encoding is a means of representing data and operators in the lambda calculus. The data and operators form a mathematical structure which is embedded in the lambda calculus. The Church numerals are a representation of the natural numbers using lambda notation. The method is named for Alonzo Church, who first encoded data in the lambda calculus this way.
Terms that are usually considered primitive in other notations (such as integers, booleans, pairs, lists, and tagged unions) are mapped to higher-order functions under Church encoding. The Church-Turing thesis asserts that any computable operator (and its operands) can be represented under Church encoding. In the untyped lambda calculus the only primitive data type is the function.
The Church encoding is not intended as a practical implementation of primitive data types. Its use is to show that other primitives data types are not required to represent any calculation. The completeness is representational. Additional functions are needed to translate the representation into common data types, for display to people. It is not possible in general to decide if two functions are extensionally equal due to the undecidability of equivalence from Church's theorem. The translation may apply the function in some way to retrieve the value it represents, or look up its value as a literal lambda term.
Lambda calculus is usually interpreted as using intensional equality. There are potential problems with the interpretation of results because of the difference between the intensional and extensional definition of equality.
Church numerals
Church numerals are the representations of natural numbers under Church encoding. The higher-order function that represents natural number 
 
 
 
  is a function that maps any function 
 
 
 
  to its n-fold composition. In simpler terms, the "value" of the numeral is equivalent to the number of times the function encapsulates its argument.



All Church numerals are functions that take two parameters. Church numerals 0, 1, 2, ..., are defined as follows in the lambda calculus.
Starting with zero not applying the function at all, proceed with one applying the function once, ...:




Number

Function definition

Lambda expression





0











1











2











3











...



n











The Church numeral 3 represents the action of applying any given function three times to a value. The supplied function is first applied to a supplied parameter and then successively to its own result. The end result is not the numeral 3 (unless the supplied parameter happens to be 0 and the function is a successor function). The function itself, and not its end result, is the Church numeral 3. The Church numeral 3 means simply to do anything three times. It is an ostensive demonstration of what is meant by "three times".
Calculation with Church numerals
Arithmetic operations on numbers may be represented by functions on Church numerals. These functions may be defined in lambda calculus, or implemented in most functional programming languages (see converting lambda expressions to functions).
The addition function 
 
 
 
  uses the identity 
 
 
 
 .



The successor function 
 
 
 
  is β-equivalent to 
 
 
 
 .



The multiplication function 
 
 
 
  uses the identity 
 
 
 
 .



The exponentiation function 
 
 
 
  is given by the definition of Church numerals; 
 
 
 
 . In the definition substitute 
 
 
 
  to get 
 
 
 
  and,


 
  which gives the lambda expression,



The 
 
 
 
  function is more difficult to understand.



A Church numeral applies a function n times. The predecessor function must return a function that applies its parameter n - 1 times. This is achieved by building a container around f and x, which is initialized in a way that omits the application of the function the first time. See predecessor for a more detailed explanation.
The subtraction function can be written based on the predecessor function.



Table of functions on Church numerals




Function

Algebra

Identity

Function definition

Lambda expressions





Successor



















Addition



















Multiplication



















Exponentiation







1











Predecessor*











 
  ...







Subtraction*













...



* Note that in the Church encoding,








Translation with other representations
Most real-world languages have support for machine-native integers; the church and unchurch functions convert between nonnegative integers and their corresponding Church numerals. The functions are given here in Haskell, where the \ corresponds to the λ of Lambda calculus. Implementations in other languages are similar.

 type Church a = (a -> a) -> a -> a
 
 church :: Integer -> Church Integer
 church 0 = \f -> \x -> x
 church n = \f -> \x -> f (church (n-1) f x)
 
 unchurch :: Church Integer -> Integer
 unchurch cn = cn (+ 1) 0
Church Booleans
Church Booleans are the Church encoding of the Boolean values true and false. Some programming languages use these as an implementation model for Boolean arithmetic; examples are Smalltalk and Pico.
Boolean logic may be considered as a choice. The Church encoding of true and false are functions of two parameters;

true chooses the first parameter.
false chooses the second parameter.

The two definitions are known as Church Booleans;






This definition allows predicates (i.e. functions returning logical values) to directly act as if-clauses. A function returning a Boolean, which is then applied to two parameters, returns either the first or the second parameter;


 
  evaluates to then-clause if predicate x evaluates to true, and to else-clause if predicate x evaluates to false.
Because true and false choose the first or second parameter they may be combined to provide logic operators,








 
  - This is only a correct implementation if the evaluation strategy is applicative order.


 
  - This is only a correct implementation if the evaluation strategy is normal order.






Some examples:












Predicates
A predicate is a function that returns a Boolean value. The most fundamental predicate is 
 
 
 
 , which returns 
 
 
 
  if its argument is the Church numeral 
 
 
 
 , and 
 
 
 
  if its argument is any other Church numeral:



The following predicate tests whether the first argument is less-than-or-equal-to the second:


 
 ,
Because of the identity,


 
  The test for equality may be implemented as,



Church pairs
Church pairs are the Church encoding of the pair (two-tuple) type. The pair is represented as a function that takes a function argument. When given its argument it will apply the argument to the two components of the pair. The definition in lambda calculus is,









For example,




















List encodings
An (immutable) list is constructed from list nodes. The basic operations on the list are;




Function

Description





nil

Construct an empty list.



isnil

Test if list is empty.



cons

Prepend a given value to a (possibly empty) list.



head

Get the first element of the list.



tail

Get the rest of the list.



Three different representations of lists are given.

Build each list node from two pairs (to allow for empty lists).
Build each list node from one pair.
Represent the list using the right fold function.

Two pairs as a list node
A nonempty list can implemented by a Church pair;

First contains the head.
Second contains the tail.

However this does not give a representation of the empty list, because there is no "null" pointer. To represent null, the pair may be wrapped in another pair, giving free values,

First - Is the null pointer (empty list).
Second.First contains the head.
Second.Second contains the tail.

Using this idea the basic list operations can be defined like this:2




Expression

Description









The first element of the pair is true meaning the list is null.







Retrieve the null (or empty list) indicator.







Create a list node, which is not null, and give it a head h and a tail t.







second.first is the head.







second.second is the tail.



In a nil node second is never accessed, provided that head and tail are only applied to nonempty lists.
One pair as a list node
Alternatively, define3














 
  where the last definition is a special case of the general



Represent the list using right fold
As an alternative to the encoding using Church pairs, a list can be encoded by identifying it with its right fold function. For example, a list of three elements x, y and z can be encoded by a higher-order function that when applied to a combinator c and a value n returns c x (c y (c z n)).















Derivation of predecessor function
The predecessor function used in the Church encoding is,


 
 .
To build the predecessor we need a way of applying the function 1 fewer time. A numeral n applies the function f n times to x. The predecessor function must use the numeral n to apply the function n-1 times.
Before implementing the predecessor function, here is a scheme that wraps the value in a container function. We will define new functions to use in place of f and x, called inc and init. The container function is called value. The left hand side of the table shows a numeral n applied to inc and init.




Number

Using init

Using const





0








1











2











3











...



n











The general recurrence rule is,



If there is also a function to retrieve the value from the container (called extract),



Then extract may be used to define the samenum function as,



The samenum function is not intrinsically useful. However, as inc delegates calling of f to its container argument, we can arrange that on the first application inc receives a special container that ignores its argument allowing to skip the first application of f. Call this new initial container const. The right hand side of the above table shows the expansions of n inc const. Then by replacing init with const in the expression for the same function we get the predecessor function,



As explained below the functions inc, init, const, value and extract may be defined as,


















































Which gives the lambda expression for pred as,






Value container
The value container applies a function to its value. It is defined by,


 
  so,



Inc
The inc function should take a value containing v, and return a new value containing f v.


 
  Letting g be the value container,


 
  then,


 
  so,






Extract
The value may be extracted by applying the identity function,


 
  Using I,


 
  so,



Const
To implement pred the init function is replaced with the const that does not apply f. We need const to satisfy,





 
  Which is satisfied if,


 
  Or as a lambda expression,






Division
Division of natural numbers may be implemented by,4



Calculating 
 
 
 
  takes many beta reductions. Unless doing the reduction by hand, this doesn't matter that much, but it is preferable to not have to do this calculation twice. The simplest predicate for testing numbers is IsZero so consider the condition.


 
  But this condition is equivalent to 
 
 
 
 , not 
 
 
 
 . If this expression is used then the mathematical definition of division given above is translated into function on Church numerals as,



As desired, this definition has a single call to 
 
 
 
 . However the result is that this formula gives the value of 
 
 
 
 .
This problem may be corrected by adding 1 to n before calling divide.The definition of divide is then,



divide1 is a recursive definition. The Y combinator may be used to implement the recursion. Create a new function called div by;

In the left hand side 
 
 

In the right hand side 
 
 


to get,



Then,


 
  where,


























 
  Gives,



Or as text, using \ for 
 
 
 
 ,
 divide = (\n.((\f.(\x.x x) (\x.f (x x))) (\c.\n.\m.\f.\x.(\d.(\n.n (\x.(\a.\b.b)) (\a.\b.a)) d ((\f.\x.x) f x) (f (c d m f x))) ((\m.\n.n (\n.\f.\x.n (\g.\h.h (g f)) (\u.x) (\u.u)) m) n m))) ((\n.\f.\x. f (n f x)) n))
For example, 9/3 is represented by
 divide (\f.\x.f (f (f (f (f (f (f (f (f x))))))))) (\f.\x.f (f (f x)))
Using a lambda calculus calculator, the above expression reduces to 3, using normal order.
 \f.\x.f (f (f (x)))
Signed numbers
One simple approach for extending Church Numerals to signed numbers is to use a Church pair, containing Church numerals representing a positive and a negative value.5 The integer value is the difference between the two Church numerals.
A natural number is converted to a signed number by,



Negation is performed by swapping the values.



The integer value is more naturally represented if one of the pair is zero. The OneZero function achieves this condition,



The recursion may be implemented using the Y combinator,






Plus and minus
Addition is defined mathematically on the pair by,



The last expression is translated into lambda calculus as,



Similarly subtraction is defined,



giving,



Multiply and divide
Multiplication may be defined by,


 
  The last expression is translated into lambda calculus as,



A similar definition is given here for division, except in this definition, one value in each pair must be zero (see OneZero above). The divZ function allows us to ignore the value that has a zero component.



divZ is then used in the following formula, which is the same as for multiplication, but with mult replaced by divZ.



Rational and real numbers
Rational and real numbers may also be encoded in lambda calculus. Rational numbers may be encoded as a pair of signed numbers. Real numbers may be encoded by a limiting process that guarantees that the difference from the real value differs by a number which may be made as small as we need6 .7 The references given describe software that could, in theory, be translated into lambda calculus. Once real numbers are defined, complex numbers are naturally encoded as a pair of real numbers.
The data types and functions described above demonstrate that any data type or calculation may be encoded in lambda calculus. This is the Church-Turing thesis.
See also

Lambda calculus
System F for Church numerals in a typed calculus
Mogensen–Scott encoding
Von Neumann definition of ordinals — another way to encode natural numbers: as sets

References

Directly Reﬂective Meta-Programming
Church numerals and booleans explained by Robert Cartwright at Rice University
Theoretical Foundations For Practical 'Totally Functional Programming' (Chapters 2 and 5) All about Church and other similar encodings, including how to derive them and operations on them, from first principles
Some interactive examples of Church numerals



"
Category:Lambda calculus



This formula is the definition of a Church numeral n with f -> m, x -> f.

John Tromp, Binary Lambda Calculus and Combinatory Logic, in Randomness And Complexity, from Leibniz To Chaitin, ed. Cristian S. Calude, World Scientific Publishing Company, October 2008. (pdf version)







