   Categorial grammar      Categorial grammar   Categorial grammar is a term used for a family of formalisms in natural language  syntax motivated by the principle of compositionality and organized according to the view that syntactic constituents should generally combine as functions or according to a function-argument relationship. Most versions of categorial grammar analyze sentence structure in terms of constituencies (as opposed to dependencies) and are therefore phrase structure grammars (as opposed to dependency grammars ).  Basics  A categorial grammar consists of two parts: a lexicon, which assigns a set of types (also called categories) to each basic symbol, and some type inference rules, which determine how the type of a string of symbols follows from the types of the constituent symbols. It has the advantage that the type inference rules can be fixed once and for all, so that the specification of a particular language grammar is entirely determined by the lexicon.  A categorial grammar shares some features with the simply typed lambda calculus . Whereas the lambda calculus has only one function type    A  →  B     normal-→  A  B    A\rightarrow B   , a categorial grammar typically has two function types, one type which is applied on the left, and one on the right. For example, a simple categorial grammar might have two function types    B  /  A      B  A    B/A\,\!   and    A  \  B     normal-\  A  B    A\backslash B   . The first,    B  /  A      B  A    B/A\,\!   , is the type of a phrase that results in a phrase of type   B   B   B\,\!   when followed (on the right) by a phrase of type   A   A   A\,\!   . The second,    A  \  B     normal-\  A  B    A\backslash B\,\!   , is the type of a phrase that results in a phrase of type   B   B   B\,\!   when preceded (on the left) by a phrase of type   A   A   A\,\!   .  The notation is based upon algebra. A fraction when multiplied by (i.e. concatenated with) its denominator yields its numerator. As concatenation is not commutative , it makes a difference whether the denominator occurs to the left or right. The concatenation must be on the same side as the denominator for it to cancel out.  The first and simplest kind of categorial grammar is called a basic categorial grammar, or sometimes an AB-grammar (after Ajdukiewicz and Bar-Hillel). Given a set of primitive types   Prim   Prim   \text{Prim}\,\!   , let    Tp   (  Prim  )       Tp  Prim    \text{Tp}(\text{Prim})\,\!   be the set of types constructed from primitive types. In the basic case, this is the least set such that    Prim  ⊆   Tp   (  Prim  )        Prim    Tp  Prim     \text{Prim}\subseteq\text{Tp}(\text{Prim})   and if     X  ,  Y   ∈   Tp   (  Prim  )         X  Y     Tp  Prim     X,Y\in\text{Tp}(\text{Prim})   then      (   X  /  Y   )   ,   (   Y  \  X   )    ∈   Tp   (  Prim  )           X  Y    normal-\  Y  X      Tp  Prim     (X/Y),(Y\backslash X)\in\text{Tp}(\text{Prim})   . Think of these as purely formal expressions freely generated from the primitive types; any semantics will be added later. Some authors assume a fixed infinite set of primitive types used by all grammars, but by making the primitive types part of the grammar, the whole construction is kept finite.  A basic categorial grammar is a tuple    (  Σ  ,  Prim  ,  S  ,  ◁  )     normal-Σ  Prim  S  normal-◁    (\Sigma,\text{Prim},S,\triangleleft)   where   Σ   normal-Σ   \Sigma\,\!   is a finite set of symbols,   Prim   Prim   \text{Prim}\,\!   is a finite set of primitive types, and    S  ∈   Tp   (  Prim  )        S    Tp  Prim     S\in\text{Tp}(\text{Prim})   .  The relation   ◁   normal-◁   \triangleleft   is the lexicon, which relates types to symbols     (  ◁  )   ⊆    Tp   (  Prim  )    ×  Σ       normal-◁      Tp  Prim   normal-Σ     (\triangleleft)\subseteq\text{Tp}(\text{Prim})\times\Sigma   . Since the lexicon is finite, it can be specified by listing a set of pairs like     T  Y  P  E   ◁  symbol     normal-◁    T  Y  P  E   symbol    TYPE\triangleleft\text{symbol}   .  Such a grammar for English might have three basic types    (  N  ,   N  P   ,   and  S   )     N    N  P     and  S     (N,NP,\text{ and }S)\,\!   , assigning count nouns the type   N   N   N\,\!   , complete noun phrases the type    N  P      N  P    NP\,\!   , and sentences the type   S   S   S\,\!   . Then an adjective could have the type    N  /  N      N  N    N/N\,\!   , because if it is followed by a noun then the whole phrase is a noun. Similarly, a determiner has the type     N  P   /  N        N  P   N    NP/N\,\!   , because it forms a complete noun phrase when followed by a noun. Intransitive verbs have the type     N  P   \  S     normal-\    N  P   S    NP\backslash S   , and transitive verbs the type      (    N  P   \  S   )   /  N   P         normal-\    N  P   S   N   P    (NP\backslash S)/NP   . Then a string of words is a sentence if it has overall type   S   S   S\,\!   .  For example, take the string "the bad boy made that mess". Now "the" and "that" are determiners, "boy" and "mess" are nouns, "bad" is an adjective, and "made" is a transitive verb, so the lexicon is {      N  P   /  N   ◁  the     normal-◁      N  P   N   the    NP/N\triangleleft\text{the}   ,      N  P   /  N   ◁  that     normal-◁      N  P   N   that    NP/N\triangleleft\text{that}   ,    N  ◁  boy     normal-◁  N  boy    N\triangleleft\text{boy}   ,    N  ◁  mess     normal-◁  N  mess    N\triangleleft\text{mess}   ,     N  /  N   ◁  bad     normal-◁    N  N   bad    N/N\triangleleft\text{bad}   ,       (    N  P   \  S   )   /  N   P   ◁  made     normal-◁       normal-\    N  P   S   N   P   made    (NP\backslash S)/NP\triangleleft\text{made}   }.  and the sequence of types in the string is          the       N  P  /  N  ,           bad       N  /  N  ,           boy       N  ,           made        (  N  P  \  S  )   /  N  P  ,           that       N  P  /  N  ,           mess      N           STACKED  the   fragments  N  P   N  normal-,     STACKED  bad   fragments  N   N  normal-,     STACKED  boy   fragments  N  normal-,     STACKED  made   fragments   fragments  normal-(  N  P  normal-\  S  normal-)    N  P  normal-,     STACKED  that   fragments  N  P   N  normal-,     STACKED  mess  N     {\text{the}\atop{NP/N,}}{\text{bad}\atop{N/N,}}{\text{boy}\atop{N,}}{\text{%
 made}\atop{(NP\backslash S)/NP,}}{\text{that}\atop{NP/N,}}{\text{mess}\atop{N}}     now find functions and appropriate arguments and reduce them according to the two inference rules     X  ←    X  /  Y   ,  Y      normal-←  X     X  Y   Y     X\leftarrow X/Y,\;Y   and    X  ←   Y  ,   Y  \  X       normal-←  X   Y   normal-\  Y  X      X\leftarrow Y,\;Y\backslash X   :      .  N  P  /  N  ,  N  /  N  ,  N  ,   (  N  P  \  S  )   /  N  P  ,      N  P   /  N   ,  N   ⏟      fragments  normal-.  italic-  N  P   N  normal-,  N   N  normal-,  N  normal-,   fragments  normal-(  N  P  normal-\  S  normal-)    N  P  normal-,   normal-⏟       N  P   N   N      .\qquad NP/N,\;N/N,\;N,\;(NP\backslash S)/NP,\;\underbrace{NP/N,\;N}        .  N  P  /  N  ,  N  /  N  ,  N  ,       (    N  P   \  S   )   /  N   P   ,   N  P    ⏟      fragments  normal-.  italic-  N  P   N  normal-,  N   N  normal-,  N  normal-,   normal-⏟        normal-\    N  P   S   N   P     N  P       .\qquad NP/N,\;N/N,\;N,\;\underbrace{(NP\backslash S)/NP,\quad NP}        .  N  P  /  N  ,     N  /  N   ,  N   ⏟   ,   (  N  P  \  S  )      fragments  normal-.  italic-  N  P   N  normal-,   normal-⏟     N  N   N    normal-,   fragments  normal-(  N  P  normal-\  S  normal-)     .\qquad NP/N,\;\underbrace{N/N,\;N},\qquad(NP\backslash S)        .      N  P   /  N   ,  N   ⏟   ,   (  N  P  \  S  )      fragments  normal-.  italic-   normal-⏟       N  P   N   N    normal-,   fragments  normal-(  N  P  normal-\  S  normal-)     .\qquad\underbrace{NP/N,\;\quad N},\;\qquad(NP\backslash S)        .     N  P   ,   (    N  P   \  S   )    ⏟      fragments  normal-.  italic-   normal-⏟     N  P    normal-\    N  P   S       .\qquad\qquad\underbrace{NP,\;\qquad(NP\backslash S)}        .  S     fragments  normal-.  italic-  S    .\qquad\qquad\qquad\quad\;\;\;S     The fact that the result is   S   S   S\,\!   means that the string is a sentence, while the sequence of reductions shows that it must be parsed as ((the (bad boy)) (made (that mess))).  Categorial grammars of this form (having only function application rules) are equivalent in generative capacity to context-free grammars and are thus often considered inadequate for theories of natural language syntax. Unlike CFGs, categorial grammars are lexicalized , meaning that only a small number of (mostly language-independent) rules are employed, and all other syntactic phenomena derive from the lexical entries of specific words.  Another appealing aspect of categorial grammars is that it is often easy to assign them a compositional semantics, by first assigning interpretation types to all the basic categories, and then associating all the derived categories with appropriate function types. The interpretation of any constituent is then simply the value of a function at an argument. With some modifications to handle intensionality and quantification , this approach can be used to cover a wide variety of semantic phenomena.  Lambek calculus  A Lambek grammar is an elaboration of this idea that has a concatenation operator for types, and several other inference rules. Pentus has shown that these still have the generative capacity of context-free grammars.  For the Lambek calculus, there is a type concatenation operator   ⋆   normal-⋆   \star\,\!   , so that    Prim  ⊆   Tp   (  Prim  )        Prim    Tp  Prim     \text{Prim}\subseteq\text{Tp}(\text{Prim})   and if     X  ,  Y   ∈   Tp   (  Prim  )         X  Y     Tp  Prim     X,Y\in\text{Tp}(\text{Prim})   then      (   X  /  Y   )   ,   (   X  \  Y   )   ,   (   X  ⋆  Y   )    ∈   Tp   (  Prim  )           X  Y    normal-\  X  Y    normal-⋆  X  Y      Tp  Prim     (X/Y),(X\backslash Y),(X\star Y)\in\text{Tp}(\text{Prim})   .  The Lambek calculus consists of several deduction rules, which specify how type inclusion assertions can be derived. In the following rules, upper case roman letters stand for types, upper case Greek letters stand for sequences of types. A sequent of the form    X  ←  Γ     normal-←  X  normal-Γ    X\leftarrow\Gamma   can be read: a string is of type   X   X   X\,\!   if it consists of the concatenation of strings of each of the types in   Γ   normal-Γ   \Gamma\,\!   . If a type is interpreted as a set of strings, then the   ←   normal-←   \leftarrow   may be interpreted as   ⊇   superset-of-or-equals   \supseteq\,\!   , that is, "includes as a subset". A horizontal line means that the inclusion above the line implies the one below the line.  The process is begun by the Axiom rule, which has no antecedents and just says that any type includes itself.       (   A  x  i  o  m   )      X  ←  X         A  x  i  o  m     absent   normal-←  X  X      (Axiom)\quad{{}\over X\leftarrow X}     The Cut rule says that inclusions can be composed.       (   C  u  t   )      Z  ←   Δ  X   Δ  ′      X  ←  Γ     Z  ←   Δ  Γ   Δ  ′           C  u  t      formulae-sequence   normal-←  Z    normal-Δ  X   superscript  normal-Δ  normal-′      normal-←  X  normal-Γ     normal-←  Z    normal-Δ  normal-Γ   superscript  normal-Δ  normal-′        (Cut)\quad{Z\leftarrow\Delta X\Delta^{\prime}\qquad X\leftarrow\Gamma\over Z%
 \leftarrow\Delta\Gamma\Delta^{\prime}}     The other rules come in pairs, one pair for each type construction operator, each pair consisting of one rule for the operator in the target, one in the source, of the arrow. The name of a rule consists of the operator and an arrow, with the operator on the side of the arrow on which it occurs in the conclusion.      Target   Source            (  \  ←  )     Y  ←   X  Γ      X  \  Y   ←  Γ       fragments   fragments  normal-(  normal-\  normal-←  normal-)       normal-←  Y    X  normal-Γ     normal-←   normal-\  X  Y   normal-Γ      (\backslash\leftarrow)\quad{Y\leftarrow X\Gamma\over X\backslash Y\leftarrow\Gamma}           (  ←  \  )      Z  ←   Δ  Y   Δ  ′      X  ←  Γ     Z  ←   Δ  Γ   (   X  \  Y   )    Δ  ′         fragments   fragments  normal-(  normal-←  normal-\  normal-)       formulae-sequence   normal-←  Z    normal-Δ  Y   superscript  normal-Δ  normal-′      normal-←  X  normal-Γ     normal-←  Z    normal-Δ  normal-Γ   normal-\  X  Y    superscript  normal-Δ  normal-′        (\leftarrow\backslash)\quad{Z\leftarrow\Delta Y\Delta^{\prime}\qquad X%
 \leftarrow\Gamma\over Z\leftarrow\Delta\Gamma(X\backslash Y)\Delta^{\prime}}             (  /  ←  )     Y  ←   Γ  X      Y  /  X   ←  Γ       fragments   fragments  normal-(   normal-←  normal-)       normal-←  Y    normal-Γ  X     normal-←    Y  X   normal-Γ      (/\leftarrow)\quad{Y\leftarrow\Gamma X\over Y/X\leftarrow\Gamma}           (  ←  /  )      Z  ←   Δ  Y   Δ  ′      X  ←  Γ     Z  ←   Δ   (   Y  /  X   )   Γ   Δ  ′         fragments   fragments  normal-(  normal-←   normal-)       formulae-sequence   normal-←  Z    normal-Δ  Y   superscript  normal-Δ  normal-′      normal-←  X  normal-Γ     normal-←  Z    normal-Δ    Y  X   normal-Γ   superscript  normal-Δ  normal-′        (\leftarrow/)\quad{Z\leftarrow\Delta Y\Delta^{\prime}\qquad X\leftarrow\Gamma%
 \over Z\leftarrow\Delta(Y/X)\Gamma\Delta^{\prime}}             (  ⋆  ←  )      X  ←  Γ    Y  ←   Γ  ′       X  ⋆  Y   ←   Γ   Γ  ′         fragments   fragments  normal-(  normal-⋆  normal-←  normal-)       formulae-sequence   normal-←  X  normal-Γ    normal-←  Y   superscript  normal-Γ  normal-′      normal-←   normal-⋆  X  Y     normal-Γ   superscript  normal-Γ  normal-′        (\star\leftarrow)\quad{X\leftarrow\Gamma\qquad Y\leftarrow\Gamma^{\prime}\over
 X%
 \star Y\leftarrow\Gamma\Gamma^{\prime}}           (  ←  ⋆  )     Z  ←   Δ  X  Y   Δ  ′      Z  ←   Δ   (   X  ⋆  Y   )    Δ  ′         fragments   fragments  normal-(  normal-←  normal-⋆  normal-)       normal-←  Z    normal-Δ  X  Y   superscript  normal-Δ  normal-′      normal-←  Z    normal-Δ   normal-⋆  X  Y    superscript  normal-Δ  normal-′        (\leftarrow\star)\quad{Z\leftarrow\Delta XY\Delta^{\prime}\over Z\leftarrow%
 \Delta(X\star Y)\Delta^{\prime}}        For an example, here is a derivation of "type raising", which says that      (   B  /  A   )   \  B   ←  A     normal-←   normal-\    B  A   B   A    (B/A)\backslash B\leftarrow A   . The names of rules and the substitutions used are to the right.             B  ←  B         A  ←  A         B  ←    (   B  /  A   )   ,  A       (   B  /  A   )   \  B   ←  A          (Axioms)        (  ←  /  )    [  Z  =  Y  =  B  ,  X  =  A  ,  Γ  =   (  A  )   ,  Δ  =   Δ  ′   =   (  )   ]          (  \  ←  )    [  Y  =  B  ,  X  =   (  B  /  A  )   ,  Γ  =   (  A  )   ]               absent   normal-←  B  B      absent   normal-←  A  A        normal-←  B     B  A   A     normal-←   normal-\    B  A   B   A       (Axioms)     fragments   fragments  normal-(  normal-←   normal-)    fragments  normal-[  Z   Y   B  normal-,  X   A  normal-,  Γ    fragments  normal-(  A  normal-)   normal-,  Δ    superscript  normal-Δ  normal-′     fragments  normal-(  normal-)   normal-]       fragments   fragments  normal-(  normal-\  normal-←  normal-)    fragments  normal-[  Y   B  normal-,  X    fragments  normal-(  B   A  normal-)   normal-,  Γ    fragments  normal-(  A  normal-)   normal-]        \dfrac{\dfrac{}{B\leftarrow B}\qquad\dfrac{}{A\leftarrow A}}{\dfrac{B%
 \leftarrow(B/A),\;\;A}{(B/A)\backslash B\leftarrow A}}\qquad\begin{matrix}%
 \mbox{(Axioms)}\\
 {(\leftarrow/)\,\,[Z=Y=B,X=A,\Gamma=(A),\Delta=\Delta^{\prime}=()]}\\
 {(\backslash\leftarrow)\,\,[Y=B,X=(B/A),\Gamma=(A)]}\\
 \end{matrix}     Relation to context-free grammars  Recall that a context-free grammar is a 4-tuple:      G  =   (  V  ,  Σ  ,  :  :=  ,  S  )      fragments  G    fragments  normal-(  V  normal-,  Σ  normal-,  normal-:  assign  normal-,  S  normal-)     G=(V,\,\Sigma,\,::=,\,S)   where  1.    V    V   V\,   is a finite set of non-terminals or variables .  2.    Σ    normal-Σ   \Sigma\,   is a finite set of terminal symbols .  3.     :  :=     normal-:  absent  assign    ::=\,   is a finite set of production rules, that is, a finite relation     (  :  :=  )   ⊆  V  ×    (  V  ∪  Σ  )   *      fragments   fragments  normal-(  normal-:  assign  normal-)    V    superscript   fragments  normal-(  V   Σ  normal-)       (::=)\subseteq V\times(V\cup\Sigma)^{*}   .  4.    S    S   S\,   is the start variable.  From the point of view of categorial grammars, a context-free grammar can be seen as a calculus with a set of special purpose axioms for each language, but with no type construction operators and no inference rules except Cut.  Specifically, given a context-free grammar as above, define a categorial grammar    (  Prim  ,  Σ  ,  ◁  ,  S  )     Prim  normal-Σ  normal-◁  S    (\text{Prim},\,\Sigma,\,\triangleleft,\,S)   where    Prim  =   V  ∪  Σ       Prim    V  normal-Σ     \text{Prim}=V\cup\Sigma   , and     Tp   (  Prim  )    =  Prim        Tp  Prim   Prim    \text{Tp}(\text{Prim})=\text{Prim}\,\!   . Let there be an axiom    x  ←  x     normal-←  x  x    {x\leftarrow x}   for every symbol    x  ∈   V  ∪  Σ       x    V  normal-Σ     x\in V\cup\Sigma   , an axiom    X  ←  Γ     normal-←  X  normal-Γ    {X\leftarrow\Gamma}   for every production rule    X  :  :=  Γ     fragments  X  normal-:  assign  Γ    X::=\Gamma\,\!   , a lexicon entry    s  ◁  s     normal-◁  s  s    {s\triangleleft s}   for every terminal symbol    s  ∈  Σ      s  normal-Σ    s\in\Sigma   , and Cut for the only rule. This categorial grammar generates the same language as the given CFG.  Of course, this is not a basic categorial grammar, since it has special axioms that depend upon the language; i.e. it is not lexicalized. Also, it makes no use at all of non-primitive types.  To show that any context-free language can be generated by a basic categorial grammar, recall that any context-free language can be generated by a context-free grammar in Greibach normal form .  The grammar is in Greibach normal form if every production rule is of the form    A  :  :=  s   A  0   …   A   N  -  1       fragments  A  normal-:  assign  s   subscript  A  0   normal-…   subscript  A    N  1      A::=sA_{0}\ldots A_{N-1}   , where capital letters are variables,    s  ∈  Σ      s  normal-Σ    s\in\Sigma   , and    N  ≥  0      N  0    N\geq 0   , that is, the right side of the production is a single terminal symbol followed by zero or more (non-terminal) variables.  Now given a CFG in Greibach normal form, define a basic categorial grammar with a primitive type for each non-terminal variable    Prim  =  V      Prim  V    \text{Prim}=V\,\!   , and with an entry in the lexicon     A  /   A   N  -  1    /  …  /   A  0    ◁  s     normal-◁    A   subscript  A    N  1    normal-…   subscript  A  0    s    A/A_{N-1}/\ldots/A_{0}\triangleleft s   , for each production rule    A  :  :=  s   A  0   …   A   N  -  1       fragments  A  normal-:  assign  s   subscript  A  0   normal-…   subscript  A    N  1      A::=sA_{0}\ldots A_{N-1}   . It is fairly easy to see that this basic categorial grammar generates the same language as the original CFG. Note that the lexicon of this grammar will generally assign multiple types to each symbol.  The same construction works for Lambek grammars, since they are an extension of basic categorial grammars. It is necessary to verify that the extra inference rules do not change the generated language. This can be done and shows that every context-free language is generated by some Lambek grammar.  To show the converse, that every language generated by a Lambek grammar is context-free, is much more difficult. It was an open problem for nearly thirty years, from the early 1960s until about 1991 when it was proven by Pentus.  The basic idea is, given a Lambek grammar,    (  Prim  ,  Σ  ,  ◁  ,  S  )     Prim  normal-Σ  normal-◁  S    (\text{Prim},\,\Sigma,\,\triangleleft,\,S)   construct a context-free grammar    (  V  ,  Σ  ,  :  :=  ,  S  )     fragments  normal-(  V  normal-,  Σ  normal-,  normal-:  assign  normal-,  S  normal-)    (V,\,\Sigma,\,::=,\,S)   with the same set of terminal symbols, the same start symbol, with variables some (not all) types    V  ⊂   Tp   (  Prim  )        V    Tp  Prim     V\subset\text{Tp}(\text{Prim})\,\!   , and with a production rule    T  :  :=  s     fragments  T  normal-:  assign  s    T::=\text{s}\,\!   for each entry    T  ◁  s     normal-◁  T  s    T\triangleleft\text{s}   in the lexicon, and production rules    T  :  :=  Γ     fragments  T  normal-:  assign  Γ    T::=\Gamma\,\!   for certain sequents    T  ←  Γ     normal-←  T  normal-Γ    T\leftarrow\Gamma   that are derivable in the Lambek calculus.  Of course, there are infinitely many types and infinitely many derivable sequents, so in order to make a finite grammar it is necessary put a bound on the size of the types and sequents that are needed. The heart of Pentus's proof is to show that there is such a finite bound.  Notation  The notation in this field is not standardized. The notations used in formal language theory, logic, category theory, and linguistics, conflict with each other. In logic, arrows point to the more general from the more particular, that is, to the conclusion from the hypotheses. In this article, this convention is followed, i.e. the target of the arrow is the more general (inclusive) type.  In logic, arrows usually point left to right. In this article this convention is reversed for consistency with the notation of context-free grammars, where the single non-terminal symbol is always on the left. We use the symbol     :  :=     normal-:  absent  assign    ::=   in a production rule as in Backus-Naur form . Some authors use an arrow, which unfortunately may point in either direction, depending on whether the grammar is thought of as generating or recognizing the language.  Some authors on categorial grammars write    B  \  A     normal-\  B  A    B\backslash A   instead of    A  \  B     normal-\  A  B    A\backslash B   . The convention used here follows Lambek and algebra.  Historical notes  The basic ideas of categorial grammar date from work by Kazimierz Ajdukiewicz (in 1935) and Yehoshua Bar-Hillel (in 1953). In 1958, Joachim Lambek introduced a syntactic calculus that formalized the function type constructors along with various rules for the combination of functions. This calculus is a forerunner of linear logic in that it is a substructural logic . Montague grammar uses an ad hoc syntactic system for English that is based on the principles of categorial grammar. Although Montague's work is sometimes regarded as syntactically uninteresting, it helped to bolster interest in categorial grammar by associating it with a highly successful formal treatment of natural language semantics . More recent work in categorial grammar has focused on the improvement of syntactic coverage. One formalism which has received considerable attention in recent years is Steedman and Szabolcsi 's combinatory categorial grammar which builds on combinatory logic invented by Moses Schönfinkel and Haskell Curry .  There are a number of related formalisms of this kind in linguistics, such as type logical grammar and abstract categorial grammar .  Some definitions   Derivation: A derivation is a binary tree that encodes a proof. Parse tree: A parse tree displays a derivation, showing the syntactic structure of a sentence. Functor and Argument: In a right (left) function application, the node of the type A\B (B/A) is called the functor, and the node of the type A is called an argument. Functor-argument structure   Refinements of categorial grammar  A variety of changes to categorial grammar have been proposed to improve syntactic coverage. Some of the most common ones are listed below.  Features and subcategories  Most systems of categorial grammar subdivide categories. The most common way to do this is by tagging them with features , such as person , gender , number , and tense . Sometimes only atomic categories are tagged in this way. In Montague grammar, it is traditional to subdivide function categories using a multiple slash convention, so A/B and A//B would be two distinct categories of left-applying functions, that took the same arguments but could be distinguished between by other functions taking them as arguments.  Function composition  Rules of function composition are included in many categorial grammars. An example of such a rule would be one that allowed the concatenation of a constituent of type A/B with one of type B/C to produce a new constituent of type A/C . The semantics of such a rule would simply involve the composition of the functions involved. Function composition is important in categorial accounts of conjunction and extraction, especially as they relate to phenomena like right node raising . The introduction of function composition into a categorial grammar leads to many kinds of derivational ambiguity that are vacuous in the sense that they do not correspond to semantic ambiguities.  Conjunction  Many categorial grammars include a typical conjunction rule, of the general form X CONJ X → X , where X is a category. Conjunction can generally be applied to nonstandard constituents resulting from type raising or function composition..  Discontinuity  The grammar is extended to handle linguistic phenomena such as discontinuous idioms, gapping and extraction.  See also   Combinatory categorial grammar  Noncommutative logic  Pregroup Grammar   References               Further reading   Michael Moortgat, Categorial Type Logics , Chapter 2 in J. van Benthem and A. ter Meulen (eds.) Handbook of Logic and Language . Elsevier, 1997, ISBN 0-262-22053-9  Wojciech Buszkowski, Mathematical linguistics and proof theory , Chapter 12 in J. van Benthem and A. ter Meulen (eds.) Handbook of Logic and Language . Elsevier, 1997, ISBN 0-262-22053-9      External links   Grammar, categorial at Springer Encyclopaedia of Mathematics  http://plato.stanford.edu/entries/typelogical-grammar/   "  Category:Grammar frameworks  Category:Formal languages  Category:Computational linguistics  Category:Type theory   