


Decimal32 floating-point format




Decimal32 floating-point format

In computing, decimal32 is a decimal floating-point computer numbering format that occupies 4 bytes (32 bits) in computer memory. It is intended for applications where it is necessary to emulate decimal rounding exactly, such as financial and tax computations. Like the binary16 format, it is intended for memory saving storage.
Decimal32 supports 7 decimal digits of significand and an exponent range of −95 to +96, i.e.  to ±. (Equivalently,  to .) Because the significand is not normalized (there is no implicit leading "1"), most values with less than 7 significant digits have multiple possible representations; , etc. Zero has 192 possible representations (384 when both signed zeros are included).
Decimal32 floating point is a relatively new decimal floating-point format, formally introduced in the 2008 version of IEEE 754.
Representation of decimal32 values




Sign

Combination

Exponent continuation

Coefficient continuation





1 bit

5 bits

6 bits

20 bits



s

mmmmm

xxxxxx

cccccccccccccccccccc



IEEE 754 allows two alternative representation methods for decimal32 values. The standard does not specify how to signify which representation is used, for instance in a situation where decimal32 values are communicated between systems.
In one representation method, based on binary integer decimal, the significand is represented as binary coded positive integer.
The other, alternative, representation method is based on densely packed decimal for most of the significand (except the most significant digit).
Both alternatives provide exactly the same range of representable numbers: 7 digits of significand and  possible exponent values.
In both cases, the most significant 4 bits of the significand (which actually only have 10 possible values) are combined with the most significant 2 bits of the exponent (3 possible values) to use 30 of the 32 possible values of a 5-bit field called the combination field. The remaining combinations encode infinities and NaNs.




Combination field

Exponent Begins With

Coefficient Digit

Other





00mmm

00

0mmm

—



01mmm

01

0mmm

—



10mmm

10

0mmm

—



1100m

00

100m

—



1101m

01

100m

—



1110m

10

100m

—



11110

—

—

±Infinity



11111

—

—

NaN. Sign bit ignored. First bit of exponent continuation field determines if NaN is signaling.



Binary integer significand field
This format uses a binary significand from 0 to 107−1 =  = 98967F16 = . The encoding can represent binary significands up to 10×220−1 =  = 9FFFFF16 = , but values larger than 107−1 are illegal (and the standard requires implementations to treat them as 0, if encountered on input).
As described above, the encoding varies depending on whether the most significant 4 bits of the significand are in the range 0 to 7 (00002 to 01112), or higher (10002 or 10012).
If the 2 bits after the sign bit are "00", "01", or "10", then the exponent field consists of the 8 bits following the sign bit, and the significand is the remaining 23 bits, with an implicit leading 0 bit:
s 00eeeeee   (0)ttt tttttttttt tttttttttt
s 01eeeeee   (0)ttt tttttttttt tttttttttt
s 10eeeeee   (0)ttt tttttttttt tttttttttt
This includes subnormal numbers where the leading significand digit is 0.
If the 2 bits after the sign bit are "11", then the 8-bit exponent field is shifted 2 bits to the right (after both the sign bit and the "11" bits thereafter), and the represented significand is in the remaining 21 bits. In this case there is an implicit (that is, not stored) leading 3-bit sequence "100" in the true significand.
s 1100eeeeee (100)t tttttttttt tttttttttt
s 1101eeeeee (100)t tttttttttt tttttttttt
s 1110eeeeee (100)t tttttttttt tttttttttt
The "11" 2-bit sequence after the sign bit indicates that there is an implicit "100" 3-bit prefix to the significand. Compare having an implicit 1 in the significand of normal values for the binary formats. Note also that the "00", "01", or "10" bits are part of the exponent field.
Note that the leading bits of the significand field do not encode the most significant decimal digit; they are simply part of a larger pure-binary number. For example, a significand of  is encoded as binary , with the leading 4 bits encoding 7; the first significand which requires a 24th bit is 223 = 
In the above cases, the value represented is

(−1)sign × 10exponent−101 × significand
 

If the four bits after the sign bit are "1111" then the value is an infinity or a NaN, as described above:
s 11110 xx...x    ±infinity
s 11111 0x...x    a quiet NaN
s 11111 1x...x    a signalling NaN
Densely packed decimal significand field
In this version, the significand is stored as a series of decimal digits. The leading digit is between 0 and 9 (3 or 4 binary bits), and the rest of the significand uses the densely packed decimal encoding.
Unlike the binary integer significand version, where the exponent changed position and came before the significand, this encoding combines the leading 2 bits of the exponent and the leading digit (3 or 4 bits) of the significand into the five bits that follow the sign bit.
This six bits after that are the exponent continuation field, providing the less-significant bits of the exponent.
The last 20 bits are the significand continuation field, consisting of 2 10-bit "declets". Each declet encodes three decimal digits using the DPD encoding.
If the first two bits after the sign bit are "00", "01", or "10", then those are the leading bits of the exponent, and the three bits after that are interpreted as the leading decimal digit (0 to 7):
s 00 TTT (00)eeeeee (0TTT)[tttttttttt][tttttttttt]
s 01 TTT (01)eeeeee (0TTT)[tttttttttt][tttttttttt]
s 10 TTT (10)eeeeee (0TTT)[tttttttttt][tttttttttt]
If the first two bits after the sign bit are "11", then the second two bits are the leading bits of the exponent, and the last bit is prefixed with "100" to form the leading decimal digit (8 or 9):
s 1100 T (00)eeeeee (100T)[tttttttttt][tttttttttt]
s 1101 T (01)eeeeee (100T)[tttttttttt][tttttttttt]
s 1110 T (10)eeeeee (100T)[tttttttttt][tttttttttt]
The remaining two combinations (11110 and 11111) of the 5-bit field are used to represent ±infinity and NaNs, respectively.
The DPD/3BCD transcoding for the declets is given by the following table. b9...b0 are the bits of the DPD, and d2...d0 are the three BCD digits.
The 8 decimal values whose digits are all 8s or 9s have four codings each. The bits marked x in the table above are ignored on input, but will always be 0 in computed results. (The 8×3 = 24 non-standard encodings fill in the gap between 103=1000 and 210=1024.)
In the above cases, with the true significand as the sequence of decimal digits decoded, the value represented is



See also

IEEE Standard for Floating-Point Arithmetic (IEEE 754)
ISO/IEC 10967, Language Independent Arithmetic
Primitive data type

References
"
Category:Computer arithmetic Category:Data types


