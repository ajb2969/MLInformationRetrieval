   Alpha algorithm      Alpha algorithm   The α-algorithm is an algorithm used in process mining , aimed at reconstructing causality from a set of sequences of events . It was first put forward by van der Aalst , Weijters and Măruşter. 1 Several extensions or modifications of it have since been presented, which will be listed below.  It constructs P/T nets with special properties ( workflow nets ) from event logs (as might be collected by an ERP system). Each transition in the net corresponds to an observed task.  Short description  The algorithm takes a workflow log    W  ⊆   T  *       W   superscript  T      W\subseteq T^{*}   as input and results in a workflow net being constructed.  It does so by examining causal relationships observed between tasks. For example, one specific task might always precede another specific task in every execution trace, which would be useful information.  Definitions used   A workflow trace or execution trace is a string over an alphabet    T   T   T   of tasks .  A workflow log is a set of workflow traces.   Description  Declaratively, the algorithm can be presented as follows. Three sets of tasks are determined:       T  W     subscript  T  W    T_{W}   is the set of all tasks which occur in at least one trace      T  I     subscript  T  I    T_{I}   is the set of all tasks which occur trace-initially      T  O     subscript  T  O    T_{O}   is the set of all tasks which occur trace-terminally   Basic ordering relations are determined (    ≻  W     subscript  succeeds  W    \succ_{W}   first, the latter three can be constructed therefrom)       a   ≻  W   b      subscript  succeeds  W   a  b    a\succ_{W}b   iff   a   a   a   directly precedes   b   b   b   in some trace      a   →  W   b      subscript  normal-→  W   a  b    a\rightarrow_{W}b   iff    a   ≻  W    b  ∧  b    ⊁  W   a        subscript  succeeds  W   a    b  b      subscript  not-succeeds  W     a     a\succ_{W}b\wedge b\not\succ_{W}a         a  #   b   W        a  normal-#   subscript  b  W     a\#{}_{W}b   iff    a   ⊁  W    b  ∧  b    ⊁  W   a        subscript  not-succeeds  W   a    b  b      subscript  not-succeeds  W     a     a\not\succ_{W}b\wedge b\not\succ_{W}a           a  |   W   b       evaluated-at  a  W   b    a\|_{W}b   iff    a   ≻  W    b  ∧  b    ≻  W   a        subscript  succeeds  W   a    b  b      subscript  succeeds  W     a     a\succ_{W}b\wedge b\succ_{W}a      Places are discovered. Each place is identified with a pair of sets of tasks, in order to keep the number of places low.       Y  W     subscript  Y  W    Y_{W}   is the set of all pairs    (  A  ,  B  )     A  B    (A,B)   of maximal sets of tasks such that  Neither    A  ×  A      A  A    A\times A   and    B  ×  B      B  B    B\times B   contain any members of    ≻  W     subscript  succeeds  W    \succ_{W}   and      A  ×  B      A  B    A\times B   is a subset of    →  W     subscript  normal-→  W    \rightarrow_{W}          P  W     subscript  P  W    P_{W}   contains one place    p   (  A  ,  B  )      subscript  p   A  B     p_{(A,B)}   for every member of    Y  W     subscript  Y  W    Y_{W}   , plus the input place    i  W     subscript  i  W    i_{W}   and the output place    o  W     subscript  o  W    o_{W}      The flow relation    F  W     subscript  F  W    F_{W}   is the union of the following:       {   (  a  ,   p   (  A  ,  B  )    )   |    (  A  ,  B  )   ∈    Y  W   ∧  a   ∈  A   }     conditional-set   a   subscript  p   A  B          A  B      subscript  Y  W   a        A      \{(a,p_{(A,B)})|(A,B)\in Y_{W}\wedge a\in A\}         {   (   p   (  A  ,  B  )    ,  b  )   |    (  A  ,  B  )   ∈    Y  W   ∧  b   ∈  B   }     conditional-set    subscript  p   A  B    b        A  B      subscript  Y  W   b        B      \{(p_{(A,B)},b)|(A,B)\in Y_{W}\wedge b\in B\}         {   (   i  W   ,  t  )   |   t  ∈   T  I    }     conditional-set    subscript  i  W   t     t   subscript  T  I      \{(i_{W},t)|t\in T_{I}\}         {   (  t  ,   i  O   )   |   t  ∈   T  O    }     conditional-set   t   subscript  i  O      t   subscript  T  O      \{(t,i_{O})|t\in T_{O}\}      The result is   a petri net structure     α   (  W  )    =   (   P  W   ,   T  W   ,   F  W   )         α  W     subscript  P  W    subscript  T  W    subscript  F  W      \alpha(W)=(P_{W},T_{W},F_{W})     with one input place    i  W     subscript  i  W    i_{W}   and one output place    o  W     subscript  o  W    o_{W}     because every transition of    T  W     subscript  T  W    T_{W}   is on a    F  W     subscript  F  W    F_{W}   -path from    i  W     subscript  i  W    i_{W}   to    o  W     subscript  o  W    o_{W}   , it is indeed a workflow net.   Properties  It can be shown 2 that in the case of a complete workflow log generated by a sound SWF net , the net generating it can be reconstructed. Complete means that its    ≻  W     subscript  succeeds  W    \succ_{W}   relation is maximal. It is not required that all possible traces be present (which would be countably infinite for a net with a loop).  Limitations  General workflow nets may contain several types of constructs 3 which the α-algorithm cannot rediscover.  Constructing    Y  W     subscript  Y  W    Y_{W}   takes exponential time in the number of tasks, since    ≻  W     subscript  succeeds  W    \succ_{W}   is not constrained and arbitrary subsets of    T  W     subscript  T  W    T_{W}   must be considered.  Extensions  for example 4  5  References  "  Category:Process mining  Category:Data mining algorithms     van der Aalst, W M P and Weijters, A J M M and Maruster, L (2003). "Workflow Mining: Discovering process models from event logs", IEEE Transactions on Knowledge and Data Engineering , vol 16 ↩  van der Aalst et al. 2003 ↩  A. de Medeiros, A K and van der Aalst, W M P and Weijters, A J M M (2003). "Workflow Mining: Current Status and Future Directions". in: "volume 2888 of Lecture Notes in Computer Science", Springer-Verlag ↩  A. de Medeiros, A K and van Dongen, B F and van der Aalst, W M P and Weijters, A J M M (2004). "Process mining: extending the α-algorithm to mine short loops" ↩  Wen, L and van der Aalst, W M P and Wang, J and Sun, J (2007). "Mining process models with non-free-choice constructs", "Data Mining and Knowledge Discovery" vol 15, p. 145--180, Springer-Verlag ↩     