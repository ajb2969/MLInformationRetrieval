   Minimum polynomial extrapolation      Minimum polynomial extrapolation   In mathematics , minimum polynomial extrapolation is a sequence transformation used for convergence acceleration of vector sequences, due to Sabay and Jackson. 1  While Aitken's method is the most famous, it often fails for vector sequences. An effective method for vector sequences is the minimum polynomial extrapolation. It is usually phrased in terms of the fixed point iteration :        x   k  +  1    =   f   (   x  k   )     .       subscript  x    k  1      f   subscript  x  k      x_{k+1}=f(x_{k}).     Given iterates     x  1   ,   x  2   ,  …  ,   x  k       subscript  x  1    subscript  x  2   normal-…   subscript  x  k     x_{1},x_{2},...,x_{k}   in    ℝ  n     superscript  ℝ  n    \mathbb{R}^{n}   , one constructs the    n  ×   (   k  -  1   )       n    k  1     n\times(k-1)   matrix    U  =   (    x  2   -   x  1    ,    x  3   -   x  2    ,  …  ,    x  k   -   x   k  -  1     )       U      subscript  x  2    subscript  x  1       subscript  x  3    subscript  x  2    normal-…     subscript  x  k    subscript  x    k  1        U=(x_{2}-x_{1},x_{3}-x_{2},...,x_{k}-x_{k-1})   whose columns are the    k  -  1      k  1    k-1   differences. Then, one computes the vector    c  =   -    U  +    (    x   k  +  1    -   x  k    )         c       superscript  U       subscript  x    k  1     subscript  x  k        c=-U^{+}(x_{k+1}-x_{k})   where    U  +     superscript  U     U^{+}   denotes the Moore–Penrose pseudoinverse of   U   U   U   . The number 1 is then appended to the end of   c   c   c   , and the extrapolated limit is       s  =    X  c     ∑   i  =  1   k    c  i      ,      s      X  c     superscript   subscript     i  1    k    subscript  c  i       s={Xc\over\sum_{i=1}^{k}c_{i}},     where    X  =   (   x  2   ,   x  3   ,  …  ,   x   k  +  1    )       X    subscript  x  2    subscript  x  3   normal-…   subscript  x    k  1       X=(x_{2},x_{3},...,x_{k+1})   is the matrix whose columns are the   k   k   k   iterates starting at 2.  The following 4 line MATLAB code segment implements the MPE algorithm:  U=x(:,2:end-1)-x(:,1:end-2);
 c=-pinv(U)*(x(:,end)-x(:,end-1));
 c(end+1,1)=1;
 s=(x(:,2:end)*c)/sum(c);  References    "  Category:Numerical analysis  Category:Articles with example MATLAB/Octave code     ↩     