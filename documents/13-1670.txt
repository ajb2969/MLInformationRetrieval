


Minimalist grammar




Minimalist grammar

Minimalist grammars are a class of formal grammars that aim to provide a more rigorous, usually proof-theoretic, formalization of Chomskyan Minimalist program than is normally provided in the mainstream Minimalist literature. A variety of particular formalizations exist, often developed by Edward Stabler, Alain Lecomte, Christian Retoré, or combinations thereof.
Lecomte and Retoré's extensions of the Lambek Calculus
Lecomte and Retoré (2001) 1 introduces a formalism that modifies that core of the Lambek Calculus to allow for movement-like processes to be described without resort to the combinatorics of Combinatory categorial grammar. The formalism is presented in proof-theoretic terms. Differing only slightly in notation from Lecomte and Retoré (2001), we can define a minimalist grammar as a 3-tuple 
 
 
 
 , where C is a set of "categorial" features, F is a set of "functional" features (which come in two flavors, "weak", denoted simply f, and "strong", denoted f*), and L is a set of lexical atoms, denoted as pairs 
 
 
 
 , where w is some phonological/orthographic content, and t is a syntactic type defined recursively as follows:

all features in C and F are (atomic) types, and
 


if X and Y are types, so are X/Y, X\Y, and 
 
 
 
 .
 

We can now define 6 inferences rules:


 
 , for all 
 
 



 
 , for all 
 
 













The first rule merely makes it possible to use lexical items with no extra assumptions. The second rule is just a means of introducing assumptions into the derivation. The third and fourth rules just perform directional feature checking, combining the assumptions required to build the subparts that are being combined. The entropy rule presumably allows the ordered sequents to be broken up into unordered sequents. And finally, the last rule implements "movement" by means of assumption elimination.
The last rule can be given a number of different interpretations in order to fully mimic movement of the normal sort found in the Minimalist Program. The account given by Lecomte and Retoré (2001) is that if one of the product types is a strong functional feature, then the phonological/orthographic content associated with that type on the right is substituted with the content of the a, and the other is substituted with the empty string; whereas if neither is strong, then the phonological/orthographic content is substituted for the category feature, and the empty string is substituted for the weak functional feature. That is, we can rephrase the rule as two sub-rules as follows:


 
  where 
 
 



 
  where 
 
 

Another alternative would be to construct pairs in the /E and \E steps, and use the 
 
 
 
  rule as given, substituting the phonological/orthographic content a into the highest of the substitution positions, and the empty string in the rest of the positions. This would be more in line with the Minimalist Program, given that multiple movements of an item are possible, where only the highest position is "spelled out".
Example
As a simple example of this system, we can show how to generate the sentence who did John see with the following toy grammar:
Let 
 
 
 
 , where L contains the following words:












The proof for the sentence who did John see is therefore:



References


Further reading

Harkema, H., 2001. "A characterization of minimalist languages", in: de Groote, P., Morrill, G., Retoré, C. (Eds.), Logical Aspects of Computational Linguistics (Lecture Notes in Artificial Intelligence, No. 2099). Springer, New York, pp. 193–211, 


"
Category:Formal languages Category:Grammar frameworks



↩




