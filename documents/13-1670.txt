   Minimalist grammar      Minimalist grammar   Minimalist grammars are a class of formal grammars that aim to provide a more rigorous, usually proof-theoretic, formalization of Chomskyan Minimalist program than is normally provided in the mainstream Minimalist literature. A variety of particular formalizations exist, often developed by Edward Stabler, Alain Lecomte, Christian Retoré, or combinations thereof.  Lecomte and Retoré's extensions of the Lambek Calculus  Lecomte and Retoré (2001) 1 introduces a formalism that modifies that core of the Lambek Calculus to allow for movement-like processes to be described without resort to the combinatorics of Combinatory categorial grammar . The formalism is presented in proof-theoretic terms. Differing only slightly in notation from Lecomte and Retoré (2001), we can define a minimalist grammar as a 3-tuple    G  =   (  C  ,  F  ,  L  )       G   C  F  L     G=(C,F,L)   , where C is a set of "categorial" features, F is a set of "functional" features (which come in two flavors, "weak", denoted simply f , and "strong", denoted f* ), and L is a set of lexical atoms, denoted as pairs    w  :  t     normal-:  w  t    w:t   , where w is some phonological/orthographic content, and t is a syntactic type defined recursively as follows:   all features in C and F are (atomic) types, and    if X and Y are types, so are X/Y , X\Y , and    X  ∘  Y      X  Y    X\circ Y   .   We can now define 6 inferences rules:      ⊢  w  :  X     fragments  proves  w  normal-:  X    \vdash w:X   , for all    w  :   X  ∈  L      normal-:  w    X  L     w:X\in L         w  :  X  ⊢  w  :  X       normal-:  w  X    proves    w    normal-:    X     w:X\vdash w:X   , for all    w  :   X  ∉  L      normal-:  w    X  L     w:X\notin L           Γ  ⊢  a  :    X  /  Y    Γ  ′    ⊢  b  :  Y     Γ  ;   Γ  ′    ⊢   a  b   :  X     [  /  E  ]      fragments       proves  normal-Γ  a    normal-:       X  Y    superscript  normal-Γ  normal-′      proves    b    normal-:    Y       proves   normal-Γ   superscript  normal-Γ  normal-′      a  b     normal-:    X      fragments  normal-[   E  normal-]     \frac{\Gamma\vdash a:X/Y\qquad\Gamma^{\prime}\vdash b:Y}{\Gamma;\Gamma^{\prime%
 }\vdash ab:X}[/E]            Γ  ′   ⊢  b  :   Y  Γ   ⊢  a  :   X  \  Y       Γ  ′   ;  Γ   ⊢   b  a   :  X     [  \  E  ]      fragments       proves   superscript  normal-Γ  normal-′   b    normal-:     Y  normal-Γ     proves    a    normal-:     normal-\  X  Y        proves    superscript  normal-Γ  normal-′   normal-Γ     b  a     normal-:    X      fragments  normal-[  normal-\  E  normal-]     \frac{\Gamma^{\prime}\vdash b:Y\qquad\Gamma\vdash a:X\backslash Y}{\Gamma^{%
 \prime};\Gamma\vdash ba:X}[\backslash E]            Γ  ;   Γ  ′    ⊢  α     Γ  ,   Γ  ′    ⊢  α    e  n  t  r  o  p  y         proves   normal-Γ   superscript  normal-Γ  normal-′    α    proves   normal-Γ   superscript  normal-Γ  normal-′    α    e  n  t  r  o  p  y    \frac{\Gamma;\Gamma^{\prime}\vdash\alpha}{\Gamma,\Gamma^{\prime}\vdash\alpha}entropy           Γ  ⊢  a  :    X  ∘  Y   Δ  ,  b   :   X  ,  c   :   Y  ,   Δ  ′    ⊢  d  :  Z    Δ  ,  Γ  ,   Δ  ′   ⊢  d   [  b  :=  a  ,  c  :=  a  ]   :  Z     [  ∘  E  ]      fragments       proves  normal-Γ  a    normal-:       X  Y   normal-Δ  b     normal-:     X  c     normal-:     Y   superscript  normal-Δ  normal-′      proves    d    normal-:    Z     fragments  Δ  normal-,  Γ  normal-,   superscript  normal-Δ  normal-′   proves  d   fragments  normal-[  b  assign  a  normal-,  c  assign  a  normal-]   normal-:  Z     fragments  normal-[   E  normal-]     \frac{\Gamma\vdash a:X\circ Y\qquad\Delta,b:X,c:Y,\Delta^{\prime}\vdash d:Z}{%
 \Delta,\Gamma,\Delta^{\prime}\vdash d[b:=a,c:=a]:Z}[\circ E]     The first rule merely makes it possible to use lexical items with no extra assumptions. The second rule is just a means of introducing assumptions into the derivation. The third and fourth rules just perform directional feature checking, combining the assumptions required to build the subparts that are being combined. The entropy rule presumably allows the ordered sequents to be broken up into unordered sequents. And finally, the last rule implements "movement" by means of assumption elimination.  The last rule can be given a number of different interpretations in order to fully mimic movement of the normal sort found in the Minimalist Program. The account given by Lecomte and Retoré (2001) is that if one of the product types is a strong functional feature, then the phonological/orthographic content associated with that type on the right is substituted with the content of the a , and the other is substituted with the empty string; whereas if neither is strong, then the phonological/orthographic content is substituted for the category feature, and the empty string is substituted for the weak functional feature. That is, we can rephrase the rule as two sub-rules as follows:        Γ  ⊢  a  :    X  ∘   Y  *    Δ  ,  b   :   X  ,  c   :    Y  *   ,   Δ  ′    ⊢  d  :  Z    Δ  ,  Γ  ,   Δ  ′   ⊢  d   [  b  :=  ϵ  ,  c  :=  a  ]   :  Z     [  ∘   E   s  t  r  o  n  g    ]      fragments       proves  normal-Γ  a    normal-:       X   superscript  Y     normal-Δ  b     normal-:     X  c     normal-:      superscript  Y     superscript  normal-Δ  normal-′      proves    d    normal-:    Z     fragments  Δ  normal-,  Γ  normal-,   superscript  normal-Δ  normal-′   proves  d   fragments  normal-[  b  assign  ϵ  normal-,  c  assign  a  normal-]   normal-:  Z     fragments  normal-[    subscript  E    s  t  r  o  n  g    normal-]     \frac{\Gamma\vdash a:X\circ Y^{*}\qquad\Delta,b:X,c:Y^{*},\Delta^{\prime}%
 \vdash d:Z}{\Delta,\Gamma,\Delta^{\prime}\vdash d[b:=\epsilon,c:=a]:Z}[\circ E%
 _{strong}]   where     X  ∈  C   ,    Y  *   ∈  F      formulae-sequence    X  C      superscript  Y    F     X\in C,Y^{*}\in F           Γ  ⊢  a  :    X  ∘  Y   Δ  ,  b   :   X  ,  c   :   Y  ,   Δ  ′    ⊢  d  :  Z    Δ  ,  Γ  ,   Δ  ′   ⊢  d   [  b  :=  a  ,  c  :=  ϵ  ]   :  Z     [  ∘   E   w  e  a  k    ]      fragments       proves  normal-Γ  a    normal-:       X  Y   normal-Δ  b     normal-:     X  c     normal-:     Y   superscript  normal-Δ  normal-′      proves    d    normal-:    Z     fragments  Δ  normal-,  Γ  normal-,   superscript  normal-Δ  normal-′   proves  d   fragments  normal-[  b  assign  a  normal-,  c  assign  ϵ  normal-]   normal-:  Z     fragments  normal-[    subscript  E    w  e  a  k    normal-]     \frac{\Gamma\vdash a:X\circ Y\qquad\Delta,b:X,c:Y,\Delta^{\prime}\vdash d:Z}{%
 \Delta,\Gamma,\Delta^{\prime}\vdash d[b:=a,c:=\epsilon]:Z}[\circ E_{weak}]   where     X  ∈  C   ,   Y  ∈  F      formulae-sequence    X  C     Y  F     X\in C,Y\in F     Another alternative would be to construct pairs in the /E and \E steps, and use the     ∘  E      absent  E    \circ E   rule as given, substituting the phonological/orthographic content a into the highest of the substitution positions, and the empty string in the rest of the positions. This would be more in line with the Minimalist Program, given that multiple movements of an item are possible, where only the highest position is "spelled out".  Example  As a simple example of this system, we can show how to generate the sentence who did John see with the following toy grammar:  Let    G  =   (   {  N  ,  S  }   ,   {  W  }   ,  L  )       G    N  S    W   L     G=(\{N,S\},\{W\},L)   , where L contains the following words:      John  :  N     normal-:  John  N    \text{John}:N         see  :    (   S  \  N   )   /  N      normal-:  see     normal-\  S  N   N     \text{see}:(S\backslash N)/N         did  :    (   S  \  W   )   /  S      normal-:  did     normal-\  S  W   S     \text{did}:(S\backslash W)/S         who  :   N  ∘  W      normal-:  who    N  W     \text{who}:N\circ W     The proof for the sentence who did John see is therefore:        ⊢  who  :  N  ∘  W     x  :  W  ⊢  x  :  W     ⊢  did  :   (  S  \  W  )   /  S     ⊢  John  :  N     y  :  N  ⊢  y  :  N  ⊢  see  :   (  S  \  N  )   /  N    y  :  N  ⊢  see y  :   S  \  N       [  /  E  ]     y  :  N  ⊢  John see y  :  S      [  \  E  ]     y  :  N  ⊢  did John see y  :   S  \  W       [  /  E  ]     x  :   W  ,  y   :  N  ⊢  x did John see y  :  S      [  \  E  ]     ⊢  who did John see  :  S     [  ∘  E  ]      fragments     fragments  proves  who  normal-:  N   W      fragments  x  normal-:  W  proves  x  normal-:  W      fragments  proves  did  normal-:   fragments  normal-(  S  normal-\  W  normal-)    S      fragments  proves  John  normal-:  N      fragments  y  normal-:  N  proves  y  normal-:  N   proves  see  normal-:   fragments  normal-(  S  normal-\  N  normal-)    N      normal-:  y  N    proves    see y    normal-:     normal-\  S  N       fragments  normal-[   E  normal-]       normal-:  y  N    proves    John see y    normal-:    S      fragments  normal-[  normal-\  E  normal-]       normal-:  y  N    proves    did John see y    normal-:     normal-\  S  W       fragments  normal-[   E  normal-]       normal-:  x   W  y     normal-:    N    proves    x did John see y    normal-:    S      fragments  normal-[  normal-\  E  normal-]     fragments  proves  who did John see  normal-:  S     fragments  normal-[   E  normal-]     \dfrac{\vdash\text{who}:N\circ W\quad\dfrac{\text{x}:W\vdash\text{x}:W\quad%
 \dfrac{\vdash\text{did}:(S\backslash W)/S\quad\dfrac{\vdash\text{John}:N\quad%
 \dfrac{\text{y}:N\vdash\text{y}:N\quad\vdash\text{see}:(S\backslash N)/N}{%
 \text{y}:N\vdash\text{see y}:S\backslash N}[/E]}{\text{y}:N\vdash\text{John %
 see y}:S}[\backslash E]}{\text{y}:N\vdash\text{did John see y}:S\backslash W}[%
 /E]}{\text{x}:W,\text{y}:N\vdash\text{x did John see y}:S}[\backslash E]}{%
 \vdash\text{who did John see}:S}[\circ E]     References    Further reading   Harkema, H., 2001. "A characterization of minimalist languages", in: de Groote, P., Morrill, G., Retoré, C. (Eds.), Logical Aspects of Computational Linguistics (Lecture Notes in Artificial Intelligence, No. 2099). Springer, New York, pp. 193–211,    "  Category:Formal languages  Category:Grammar frameworks     ↩     