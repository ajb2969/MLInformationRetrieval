   Hash-based message authentication code      Hash-based message authentication code  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In cryptography , a keyed-hash message authentication code ( HMAC ) is a specific construction for calculating a message authentication code (MAC) involving a cryptographic hash function in combination with a secret cryptographic key . As with any MAC, it may be used to simultaneously verify both the data integrity and the authentication of a message . Any cryptographic hash function, such as MD5 or SHA-1 , may be used in the calculation of an HMAC; the resulting MAC algorithm is termed HMAC-MD5 or HMAC-SHA1 accordingly. The cryptographic strength of the HMAC depends upon the cryptographic strength of the underlying hash function, the size of its hash output, and on the size and quality of the key.  An iterative hash function breaks up a message into blocks of a fixed size and iterates over them with a compression function . For example, MD5 and SHA-1 operate on 512-bit blocks. The size of the output of HMAC is the same as that of the underlying hash function (128 or 160 bits in the case of MD5 or SHA-1, respectively), although it can be truncated if desired.  The definition and analysis of the HMAC construction was first published in 1996 by Mihir Bellare , Ran Canetti, and Hugo Krawczyk, 1 who also wrote RFC 2104. This paper also defined a variant called NMAC that is rarely, if ever, used. FIPS PUB 198 generalizes and standardizes the use of HMACs. HMAC-SHA1 and HMAC-MD5 are used within the IPsec and TLS protocols.  Definition (from RFC 2104)      𝐻𝑀𝐴𝐶   (  K  ,  m  )   =  H   (   (  K  ⊕  o  p  a  d  )   |  |  H   (   (  K  ⊕  i  p  a  d  )   |  |  m  )   )      fragments  HMAC   fragments  normal-(  K  normal-,  m  normal-)    H   fragments  normal-(   fragments  normal-(  K  direct-sum  o  p  a  d  normal-)   normal-|  normal-|  H   fragments  normal-(   fragments  normal-(  K  direct-sum  i  p  a  d  normal-)   normal-|  normal-|  m  normal-)   normal-)     \textit{HMAC}(K,m)=H\Bigl((K\oplus opad)\;||\;H\bigl((K\oplus ipad)\;||\;m%
 \bigr)\Bigr)     where   H is a cryptographic hash function,  K is a secret key padded to the right with extra zeroes to the input block size of the hash function, or the hash of the original key if it is longer than that block size,  m is the message to be authenticated,  || denotes concatenation ,  ⊕ denotes exclusive or (XOR),  opad is the outer padding (0x5c5c5c…5c5c, one-block-long hexadecimal constant),  and  is the inner padding (0x363636…3636, one-block-long hexadecimal constant).   Implementation  The following pseudocode demonstrates how HMAC may be implemented. Blocksize is 64 (bytes) when using one of the following hash functions: SHA-1, MD5, RIPEMD-128/160. 2  function hmac (key, message)   if (length(key) > blocksize) then  key = hash(key) //  keys  longer  than  blocksize  are  shortened   end  if   if (length(key) ''// keys shorter than blocksize are zero-padded (where ∥ is concatenation)''   end  if    o_key_pad = [0x5c * blocksize] ⊕ key //  Where  blocksize  is  that  of  the  underlying  hash  function  i_key_pad = [0x36 * blocksize] ⊕ key //  Where  ⊕  is  exclusive  or  (XOR)     return hash(o_key_pad ∥ hash(i_key_pad ∥ message)) ''// Where ∥ is concatenation''  end  function  The following is a Python implementation of HMAC-MD5:  #!/usr/bin/env python  from hashlib import md5
 
 trans_5C =  bytearray ((x ^  0x5c ) for x in  range ( 256 ))
 trans_36 =  bytearray ((x ^  0x36 ) for x in  range ( 256 ))
 blocksize = md5().block_size # 64  def hmac_md5(key, msg): if  len (key) > blocksize:
         key = md5(key).digest()
     key = key +  bytearray (blocksize -  len (key))
     o_key_pad = key.translate(trans_5C)
     i_key_pad = key.translate(trans_36) return md5(o_key_pad + md5(i_key_pad + msg).digest()) if  __name__  ==  "__main__" : # This is one example from the appendix of RFC 2104 h = hmac_md5(b "Jefe" , b "what do ya want for nothing?" ) print (h.hexdigest()) # 750c783e6ab0b503eaa86e310a5db738  Python includes an hmac module, 3 so the function above can be replaced by a shorter version.  import hmac from hashlib import md5 def hmac_md5(key, msg): return hmac.HMAC(key, msg, md5)  The following is a PHP implementation of HMAC-SHA1:  function sha1_hmac ( $key , $data , $blockSize = 64 , $opad = 0x5c , $ipad = 0x36 ) { // Keys longer than blocksize are shortened  if  ( strlen ( $key ) > $blockSize ) { $key = sha1 ( $key , true ); } // Keys shorter than blocksize are right, zero-padded (concatenated)  $key = str_pad ( $key , $blockSize , chr ( 0x00 ), STR_PAD_RIGHT );  $o_key_pad = $i_key_pad = '' ;  for ( $i = 0 ; $i < $blockSize ; $i ++ ) { $o_key_pad .= chr ( ord ( substr ( $key , $i , 1 )) ^ $opad );  $i_key_pad .= chr ( ord ( substr ( $key , $i , 1 )) ^ $ipad ); } return  sha1 ( $o_key_pad . sha1 ( $i_key_pad . $data , true ), true ); } $hmac = sha1_hmac ( 'key' , 'The quick brown fox jumps over the lazy dog' );  The following is an implementation using Qt's QCryptographicHash  QByteArray hmacSha256( QByteArray key, const  QByteArray & message) { const  int blocksize = 64 ; if (key.length() > blocksize) QCryptographicHash:: hash(key, QCryptographicHash:: Sha256); while (key.length() < blocksize)
         key.append( ' \0 ' ); QByteArray o_key_pad( ' \x5c ' , blocksize);
     o_key_pad.fill( ' \x5c ' , blocksize); QByteArray i_key_pad;
     i_key_pad.fill( ' \x36 ' , blocksize); for ( int i= 0 ; i "" <= "" ^= "" i++)= "" i_key_pad[i]= "i_key_pad[i]" key[i];= "" message,= "" o_key_pad[i]= "o_key_pad[i]" qcryptographichash::hash(i_key_pad= "" qcryptographichash::hash(o_key_pad= "" qcryptographichash::sha256),= "" qcryptographichash::sha256);= ""  return = "" source= "" {= "" }= "" >
 
 The following is an example using [[ Node . js ]] 's built in crypto module using HMAC-SHA1:  "javascript">
 var crypto = require( 'crypto' ),
     hmac = crypto.createHmac( 'sha1' , 'Shared Secret' );
  
 hmac.update(message);
  
 var hmacHash = hmac.digest( 'hex' ); Design principles  The design of the HMAC specification was motivated by the existence of attacks on more trivial mechanisms for combining a key with a hash function. For example, one might assume the same security that HMAC provides could be achieved with MAC = H ( key ∥ message ). However, this method suffers from a serious flaw: with most hash functions, it is easy to append data to the message without knowing the key and obtain another valid MAC (" length-extension attack "). The alternative, appending the key using MAC = H ( message ∥ key ), suffers from the problem that an attacker who can find a collision in the (unkeyed) hash function has a collision in the MAC (as two messages m1 and m2 yielding the same hash will provide the same start condition to the hash function before the appended key is hashed, hence the final hash will be the same). Using MAC = H ( key ∥ message ∥ key ) is better, but various security papers have suggested vulnerabilities with this approach, even when two different keys are used. 4 5 6  No known extensions attacks have been found against the current HMAC specification which is defined as H ( key ∥ H ( key ∥ message )) because the outer application of the hash function masks the intermediate result of the internal hash. The values of ipad and opad are not critical to the security of the algorithm, but were defined in such a way to have a large Hamming distance from each other and so the inner and outer keys will have fewer bits in common. The security reduction of HMAC does require them to be different in at least one bit.  The Keccak hash function, that was selected by NIST as the SHA-3 competition winner, doesn't need this nested approach and can be used to generate a MAC by simply prepending the key to the message. 7  Security  The cryptographic strength of the HMAC depends upon the size of the secret key that is used. The most common attack against HMACs is brute force to uncover the secret key. HMACs are substantially less affected by collisions than their underlying hashing algorithms alone. 8 9 10 Therefore, HMAC-MD5 does not suffer from the same weaknesses that have been found in MD5.  In 2006, Jongsung Kim , Alex Biryukov , Bart Preneel , and Seokhie Hong showed how to distinguish HMAC with reduced versions of MD5 and SHA-1 or full versions of HAVAL , MD4 , and SHA-0 from a random function or HMAC with a random function. Differential distinguishers allow an attacker to devise a forgery attack on HMAC. Furthermore, differential and rectangle distinguishers can lead to second-preimage attacks . HMAC with the full version of MD4 can be forged with this knowledge. These attacks do not contradict the security proof of HMAC, but provide insight into HMAC based on existing cryptographic hash functions. 11  In 2009, Xiaoyun Wang et al. presented a distinguishing attack on HMAC-MD5 without using related keys. It can distinguish an instantiation of HMAC with MD5 from an instantiation with a random function with 2^97 queries with probability 0.87. 12  In 2011 an informational RFC 6151 13 was approved to update the security considerations in MD5 and HMAC-MD5. For HMAC-MD5 the RFC summarizes that - although the security of the MD5 hash function itself is severely compromised - the currently known " attacks on HMAC-MD5 do not seem to indicate a practical vulnerability when used as a message authentication code."  In improperly-secured systems a timing attack can be performed to find out a HMAC digit by digit. 14  Examples of HMAC (MD5, SHA1, SHA256)  Here are some empty HMAC values:  HMAC_MD5("", "")    = 0x74e6f7298a9c2d168935f58c001bad88  HMAC_SHA1("", "")   = 0xfbdb1d1b18aa6c08324b7d64b71fb76370690e1d  HMAC_SHA256("", "") = 0xb613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad  Here are some non-empty HMAC values, assuming 8-bit ASCII or UTF-8 encoding:  HMAC_MD5("key", "The quick brown fox jumps over the lazy dog")    = 0x80070713463e7749b90c2dc24911e275  HMAC_SHA1("key", "The quick brown fox jumps over the lazy dog")   = 0xde7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9  HMAC_SHA256("key", "The quick brown fox jumps over the lazy dog") = 0xf7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8  --  References   Notes    Mihir Bellare, Ran Canetti and Hugo Krawczyk, Keying Hash Functions for Message Authentication, CRYPTO 1996, pp1–15 (PS or PDF) .  Mihir Bellare, Ran Canetti and Hugo Krawczyk, Message authentication using hash functions: The HMAC construction, CryptoBytes 2(1), Spring 1996 (PS or PDF) .   External links   RFC2104  Online HMAC Calculator for dozens of underlying hashing algorithms  Online HMAC Generator / Tester Tool  FIPS PUB 198-1, The Keyed-Hash Message Authentication Code (HMAC)  PHP HMAC implementation  Python HMAC implementation  [ https://metacpan.org/pod/Digest ::HMAC Perl HMAC implementation]  Ruby HMAC implementation  C HMAC implementation  C++ HMAC implementation (part of Crypto++)  Java implementation  JavaScript MD5 and SHA HMAC implementation  JavaScript SHA-only HMAC implementation  .NET's System.Security.Cryptography.HMAC  Delphi/Free Pascal implementation   "   Category:Message authentication codes  Category:Hashing      RFC 2104 , section 2, "Definition of HMAC", page 3. ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  Briefly mentioned at the end of this session Sebastian Schinzel:Time is on my Side - Exploiting Timing Side Channel Vulnerabilities on the Web 28th Chaos Communication Congress, 2011. ↩   