   Optimal matching      Optimal matching   Optimal matching is a sequence analysis method used in social science , to assess the dissimilarity of ordered arrays of tokens that usually represent a time-ordered sequence of socio-economic states two individuals have experienced. Once such distances have been calculated for a set of observations (e.g. individuals in a cohort ) classical tools (such as cluster analysis ) can be used. The method was tailored to social sciences 1 from a technique originally introduced to study molecular biology (protein or genetic) sequences (see sequence alignment ). Optimal matching uses the Needleman-Wunsch algorithm .  Algorithm  Let    S  =   (   s  1   ,   s  2   ,   s  3   ,   ‚Ä¶   s  T    )       S    subscript  s  1    subscript  s  2    subscript  s  3     normal-‚Ä¶   subscript  s  T       S=(s_{1},s_{2},s_{3},\ldots s_{T})   be a sequence of states    s  i     subscript  s  i    s_{i}   belonging to a finite set of possible states. Let us denote   ùêí   ùêí   {\mathbf{S}}   the sequence space, i.e. the set of all possible sequences of states.  Optimal matching algorithms work by defining simple operator algebras that manipulate sequences, i.e. a set of operators     a  i   :   ùêí  ‚Üí  ùêí      normal-:   subscript  a  i    normal-‚Üí  ùêí  ùêí     a_{i}:{\mathbf{S}}\rightarrow{\mathbf{S}}   . In the most simple approach, a set composed of only three basic operations to transform sequences is used:   one state   s   s   s   is inserted in the sequence      a   s  ‚Ä≤   Ins    (   s  1   ,   s  2   ,   s  3   ,   ‚Ä¶   s  T    )    =   (   s  1   ,   s  2   ,   s  3   ,  ‚Ä¶  ,   s  ‚Ä≤   ,   ‚Ä¶   s  T    )          subscript   superscript  a  Ins    superscript  s  normal-‚Ä≤      subscript  s  1    subscript  s  2    subscript  s  3     normal-‚Ä¶   subscript  s  T        subscript  s  1    subscript  s  2    subscript  s  3   normal-‚Ä¶   superscript  s  normal-‚Ä≤     normal-‚Ä¶   subscript  s  T       a^{\rm Ins}_{s^{\prime}}(s_{1},s_{2},s_{3},\ldots s_{T})=(s_{1},s_{2},s_{3},%
 \ldots,s^{\prime},\ldots s_{T})     one state is deleted from the sequence      a   s  2   Del    (   s  1   ,   s  2   ,   s  3   ,   ‚Ä¶   s  T    )    =   (   s  1   ,   s  3   ,   ‚Ä¶   s  T    )          subscript   superscript  a  Del    subscript  s  2      subscript  s  1    subscript  s  2    subscript  s  3     normal-‚Ä¶   subscript  s  T        subscript  s  1    subscript  s  3     normal-‚Ä¶   subscript  s  T       a^{\rm Del}_{s_{2}}(s_{1},s_{2},s_{3},\ldots s_{T})=(s_{1},s_{3},\ldots s_{T})   and  a state    s  1     subscript  s  1    s_{1}   is replaced (substituted) by state    s  1  ‚Ä≤     subscript   superscript  s  normal-‚Ä≤   1    s^{\prime}_{1}   ,      a    s  1   ,   s  1  ‚Ä≤    Sub    (   s  1   ,   s  2   ,   s  3   ,   ‚Ä¶   s  T    )    =   (   s  1  ‚Ä≤   ,   s  2   ,   s  3   ,   ‚Ä¶   s  T    )          subscript   superscript  a  Sub     subscript  s  1    subscript   superscript  s  normal-‚Ä≤   1       subscript  s  1    subscript  s  2    subscript  s  3     normal-‚Ä¶   subscript  s  T        subscript   superscript  s  normal-‚Ä≤   1    subscript  s  2    subscript  s  3     normal-‚Ä¶   subscript  s  T       a^{\rm Sub}_{s_{1},s^{\prime}_{1}}(s_{1},s_{2},s_{3},\ldots s_{T})=(s^{\prime}%
 _{1},s_{2},s_{3},\ldots s_{T})   .   Imagine now that a cost      c   (   a  i   )    ‚àà   ùêë  0  +         c   subscript  a  i     subscript   superscript  ùêë    0     c(a_{i})\in{\mathbf{R}}^{+}_{0}   is associated to each operator. Given two sequences    S  1     subscript  S  1    S_{1}   and    S  2     subscript  S  2    S_{2}   , the idea is to measure the cost of obtaining    S  2     subscript  S  2    S_{2}   from    S  1     subscript  S  1    S_{1}   using operators from the algebra. Let    A  =    a  1   ,   a  2   ,   ‚Ä¶   a  n         A    subscript  a  1    subscript  a  2     normal-‚Ä¶   subscript  a  n       A={a_{1},a_{2},\ldots a_{n}}   be a sequence of operators such that the application of all the operators of this sequence   A   A   A   to the first sequence    S  1     subscript  S  1    S_{1}   gives the second sequence    S  2     subscript  S  2    S_{2}   :     S  2   =     a  1   ‚àò   a  2   ‚àò  ‚Ä¶  ‚àò   a  n     (   S  1   )         subscript  S  2        subscript  a  1    subscript  a  2   normal-‚Ä¶   subscript  a  n     subscript  S  1      S_{2}=a_{1}\circ a_{2}\circ\ldots\circ a_{n}(S_{1})   where     a  1   ‚àò   a  2        subscript  a  1    subscript  a  2     a_{1}\circ a_{2}   denotes the compound operator. To this set we associate the cost     c   (  A  )    =    ‚àë   i  =  1   n    c   (   a  i   )           c  A     superscript   subscript     i  1    n     c   subscript  a  i       c(A)=\sum_{i=1}^{n}c(a_{i})   , that represents the total cost of the transformation. One should consider at this point that there might exist different such sequences   A   A   A   that transform    S  1     subscript  S  1    S_{1}   into    S  2     subscript  S  2    S_{2}   ; a reasonable choice is to select the cheapest of such sequences. We thus call distance      d   (   S  1   ,   S  2   )    =    min  A    {    c   (  A  )    such    that    S  2    =   A   (   S  1   )     }          d    subscript  S  1    subscript  S  2       subscript   A       c  A  such  that   subscript  S  2      A   subscript  S  1        d(S_{1},S_{2})=\min_{A}\left\{c(A)~{}{\rm such~{}that}~{}S_{2}=A(S_{1})\right\}    that is, the cost of the least expensive set of transformations that turn    S  1     subscript  S  1    S_{1}   into    S  2     subscript  S  2    S_{2}   . Notice that    d   (   S  1   ,   S  2   )       d    subscript  S  1    subscript  S  2      d(S_{1},S_{2})   is by definition nonnegative since it is the sum of positive costs, and trivially     d   (   S  1   ,   S  2   )    =  0        d    subscript  S  1    subscript  S  2     0    d(S_{1},S_{2})=0   if and only if     S  1   =   S  2        subscript  S  1    subscript  S  2     S_{1}=S_{2}   , that is there is no cost. The distance function is symmetric if insertion and deletion costs are equal     c   (   a  Ins   )    =   c   (   a  Del   )          c   superscript  a  Ins      c   superscript  a  Del      c(a^{\rm Ins})=c(a^{\rm Del})   ; the term indel cost usually refers to the common cost of insertion and deletion.  Considering a set composed of only the three basic operations described above, this proximity measure satisfies the triangular inequality. Transitivity however, depends on the definition of the set of elementary operations.  Criticism  Although optimal matching techniques are widely used in sociology and demography, such techniques also have their flaws. As was pointed out by several authors (for example L. L. Wu 2 ), the main problem in the application of optimal matching is to appropriately define the costs    c   (   a  i   )       c   subscript  a  i     c(a_{i})   .  Optimal matching in causal modelling  Optimal matching is also a term used in statistical modelling of causal effects . In this context it refers to matching "cases" with "controls", and is completely separate from the sequence-analytic sense.  Software   TDA is a powerful program, offering access to some of the latest developments in transition data analysis.  STATA has implemented a package to run optimal matching analysis.  TraMineR is an open source R -package for analysing and visualizing states and events sequences, including optimal matching analysis.   References and notes    "  Category:Data mining  Category:Statistical distance measures  Category:Methods in sociology     A. Abbott and A. Tsay, (2000) Sequence Analysis and Optimal Matching Methods in Sociology: Review and Prospect Sociological Methods & Research], Vol. 29, 3-33. ‚Ü©  L. L. Wu. (2000) Some Comments on "Sequence Analysis and Optimal Matching Methods in Sociology: Review and Prospect" Sociological Methods & Research, 29 41-64. ‚Ü©     