   Pairing heap      Pairing heap   A pairing heap is a type of heap  data structure with relatively simple implementation and excellent practical amortized performance. Pairing heaps are heap-ordered multiway tree structures , and can be considered simplified Fibonacci heaps . They are considered a "robust choice" for implementing such algorithms as Prim's MST algorithm , 1 and support the following operations (assuming a min-heap):   find-min : simply return the top element of the heap.  merge : compare the two root elements, the smaller remains the root of the result, the larger element and its subtree is appended as a child of this root.  insert : create a new heap for the inserted element and merge into the original heap.  decrease-key (optional): remove the subtree rooted at the key to be decreased, replace the key with a smaller key, then merge the result back into the heap.  delete-min : remove the root and merge its subtrees. Various strategies are employed.   The analysis of pairing heaps' time complexity was initially inspired by that of splay trees . 2 The amortized time per delete-min is    O   (   l  o  g  n   )       O    l  o  g  n     O(logn)   . 3 The operations find-min , merge , and insert run in constant time,    O   (  1  )       O  1    O(1)   . 4  Determining the precise asymptotic running time of pairing heaps when a decrease-key operation is needed has turned out to be difficult. Initially, the time complexity of this operation was conjectured on empirical grounds to be    O   (  1  )       O  1    O(1)   , 5 but Fredman proved that the amortized time per decrease-key is at least    Ω   (   log   log  n    )       normal-Ω      n      \Omega(\log\log n)   for some sequences of operations. 6 Pettie then derived an upper bound of    O   (   2   2    log   log  n       )       O   superscript  2    2        n         O(2^{2\sqrt{\log\log n}})   amortized time for decrease-key , which is    o   (   log  n   )       o    n     o(\log n)   . 7 No tight    Θ   (   log   log  n    )       normal-Θ      n      \Theta(\log\log n)   bound is known. 8  Although this is worse than other priority queue algorithms such as Fibonacci heaps , which perform decrease-key in    O   (  1  )       O  1    O(1)   amortized time, the performance in practice is excellent. Stasko and Vitter 9 and Moret and Shapiro 10 conducted experiments on pairing heaps and other heap data structures. They concluded that the pairing heap is as fast as, and often faster than, other efficient data structures like the binary heaps .  Structure  A pairing heap is either an empty heap, or a pair consisting of a root element and a possibly empty list of pairing heaps. The heap ordering property requires that all the root elements of the subheaps in the list are not smaller than the root element of the heap. The following description assumes a purely functional heap that does not support the decrease-key operation.  type PairingHeap[Elem] = Empty | Heap(elem: Elem, subheaps: List[PairingHeap[Elem]])  A pointer-based implementation for RAM machines , supporting decrease-key , can be achieved using three pointers per node, by representing the children of a node by a singly-linked list : a pointer to the node's first child, one to its next sibling, and one to the parent. Alternatively, the parent pointer can be omitted by letting the last child point back to the parent, if a single boolean flag is added to indicate "end of list". This achieves a more compact structure at the expense of a constant overhead factor per operation. 11  Operations  find-min  The function find-min simply returns the root element of the heap:  function find-min(heap)   if heap == Empty   error   else   return heap.elem  merge  Merging with an empty heap returns the other heap, otherwise a new heap is returned that has the minimum of the two root elements as its root element and just adds the heap with the larger root to the list of subheaps:  function merge(heap1, heap2)   if heap1 == Empty   return heap2   elsif heap2 == Empty   return heap1   elsif heap1.elem merge(merge(H1, H2), merge-pairs([H3, H4, H5, H6, H7]))  # merge H1 and H2 to H12, then the rest of the list  => merge( H12 , merge(merge(H3, H4), merge-pairs([H5, H6, H7])))  # merge H3 and H4 to H34, then the rest of the list  => merge(H12, merge( H34 , merge(merge(H5, H6), merge-pairs([H7]))))  # merge H5 and H6 to H56, then the rest of the list  => merge(H12, merge(H34, merge( H56 , H7)))  # switch direction, merge the last two resulting heaps, giving H567  => merge(H12, merge(H34, H567 ))  # merge the last two resulting heaps, giving H34567  => merge(H12, H34567 )  # finally, merge the first merged pair with the result of merging the rest  => H1234567  Summary of running times  References  External links   Louis Wasserman discusses pairing heaps and their implementation in Haskell in The Monad Reader, Issue 16 (pp. 37–52).  pairing heaps , Sartaj Sahni    "  Category:Heaps (data structures)     ↩   ↩  ↩   ↩  ↩   ↩  ↩      