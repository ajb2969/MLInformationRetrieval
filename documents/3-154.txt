   Candidate key      Candidate key   In the relational model of databases , a candidate key of a relation is a minimal superkey for that relation; that is, a set of attributes such that:   the relation does not have two distinct tuples (i.e. rows or records in common database language) with the same values for these attributes (which means that the set of attributes is a superkey)  there is no proper subset of these attributes for which (1) holds (which means that the set is minimal).   The constituent attributes are called prime attributes . Conversely, an attribute that does not occur in ANY candidate key is called a non-prime attribute .  Since a relation contains no duplicate tuples, the set of all its attributes is a superkey if NULL values are not used. It follows that every relation will have at least one candidate key.  The candidate keys of a relation tell us all the possible ways we can identify its tuples. As such they are an important concept for the design of database schema .  Example  The definition of candidate keys can be illustrated with the following (abstract) example. Consider a relation variable (relvar) R with attributes ( A , B , C , D ) that has only the following two legal values r1 and r2 :      r1     A     a1     a1     a2         r2     A     a1     a1     a1     Here r2 differs from r1 only in the A and D values of the last tuple.  For r1 the following sets have the uniqueness property, i.e., there are no two distinct tuples in the instance with the same values for the attributes in the set:   {A,B}, {A,C}, {B,C}, {A,B,C}, {A,B,D}, {A,C,D}, {B,C,D}, {A,B,C,D}   For r2 the uniqueness property holds for the following sets;   {B,C}, {B,D}, {C,D}, {A,B,C}, {A,B,D}, {A,C,D}, {B,C,D}, {A,B,C,D}   Since superkeys of a relvar are those sets of attributes that have the uniqueness property for all legal values of that relvar and because we assume that r1 and r2 are all the legal values that R can take, we can determine the set of superkeys of R by taking the intersection of the two lists:   {B,C}, {A,B,C}, {A,B,D}, {A,C,D}, {B,C,D}, {A,B,C,D}   Finally we need to select those sets for which there is no proper subset in the list, which are in this case:   {B,C}, {A,B,D}, {A,C,D}   These are indeed the candidate keys of relvar R .  We have to consider all the relations that might be assigned to a relvar to determine whether a certain set of attributes is a candidate key. For example, if we had considered only r1 then we would have concluded that {A,B} is a candidate key, which is incorrect. However, we might be able to conclude from such a relation that a certain set is not a candidate key, because that set does not have the uniqueness property (example {A,D} for r1 ). Note that the existence of a proper subset of a set that has the uniqueness property cannot in general be used as evidence that the superset is not a candidate key. In particular, note that in the case of an empty relation, every subset of the heading has the uniqueness property, including the empty set.  Determining candidate keys  The set of all candidate keys can be computed e.g. from the set of functional dependencies . To this end we need to define the attribute closure    α  +     superscript  α     \alpha^{+}   for an attribute set   α   α   \alpha   . The set    α  +     superscript  α     \alpha^{+}   contains all attributes that are functionally implied by   α   α   \alpha   .  It is quite simple to find a single candidate key. We start with a set   α   α   \alpha   of attributes and try to remove successively each attribute. If after removing an attribute the attribute closure stays the same, then this attribute is not necessary and we can remove it permanently. We call the result    minimize   (  α  )       minimize  α    \text{minimize}(\alpha)   . If   α   α   \alpha   is the set of all attributes, then    minimize   (  α  )       minimize  α    \text{minimize}(\alpha)   is a candidate key.  Actually we can detect every candidate key with this procedure by simply trying every possible order of removing attributes. However there are much more permutations of attributes (    n  !      n    n!   ) than subsets (    2  n     superscript  2  n    2^{n}   ). That is, many attribute orders will lead to the same candidate key.  There is a fundamental difficulty for efficient algorithms for candidate key computation: Certain sets of functional dependencies lead to exponentially many candidate keys. Consider the    2  ⋅  n     normal-⋅  2  n    2\cdot n   functional dependencies     {    A  i   →   B  i    :   i  ∈   {  1  ,  …  ,  n  }    }   ∪   {    B  i   →   A  i    :   i  ∈   {  1  ,  …  ,  n  }    }        conditional-set   normal-→   subscript  A  i    subscript  B  i      i   1  normal-…  n      conditional-set   normal-→   subscript  B  i    subscript  A  i      i   1  normal-…  n       \{A_{i}\rightarrow B_{i}:i\in\{1,\dots,n\}\}\cup\{B_{i}\rightarrow A_{i}:i\in%
 \{1,\dots,n\}\}   which yields    2  n     superscript  2  n    2^{n}   candidate keys:     {   A  1   ,   B  1   }   ×  …  ×   {   A  n   ,   B  n   }         subscript  A  1    subscript  B  1    normal-…    subscript  A  n    subscript  B  n      \{A_{1},B_{1}\}\times\dots\times\{A_{n},B_{n}\}   . That is, the best we can expect is an algorithm that is efficient with respect to the number of candidate keys.  The following algorithm actually runs in polynomial time in the number of candidate keys and functional dependencies: 1  K[0] := minimize(A);  /* A is the set of all attribute */  n := 1; /* Number of Keys known so far */  i := 0; /* Currently processed key */  while i K_i  and a functional dependency    α  →  β     normal-→  α  β    \alpha\rightarrow\beta   , the reverse application of the functional dependency yields the set    α  ∪   (    K  i   ∖  β   )       α     subscript  K  i   β     \alpha\cup(K_{i}\setminus\beta)   , which is a key, too. It may however be covered by other already known candidate keys. (The algorithm checks this case using the 'found' variable.) If not, then minimizing the new key yields a new candidate key. The key insight is (pun not intended) that all candidate keys can be created this way.  See also   Alternate key  Compound key  Database normalization  Primary key  Relational database  Superkey  Prime implicant is the corresponding notion of a candidate key in boolean logic   References     External links   Relational Database Management Systems - Database Design - Terms of Reference - Keys : An overview of the different types of keys in the RDBMS (Relational Database Management System).   "  Category:Data modeling     ↩     