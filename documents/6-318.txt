   Actor model theory      Actor model theory   In theoretical computer science , Actor model theory concerns theoretical issues for the Actor model .  Actors are the primitives that form the basis of the Actor model of concurrent digital computation. In response to a message that it receives, an Actor can make local decisions, create more Actors, send more messages, and designate how to respond to the next message received. Actor model theory incorporates theories of the events and structures of Actor computations, their proof theory, and denotational models .  Events and their orderings  From the definition of an Actor, it can be seen that numerous events take place: local decisions, creating Actors, sending messages, receiving messages, and designating how to respond to the next message received.  However, this article focuses on just those events that are the arrival of a message sent to an Actor.  This article reports on the results published in Hewitt [2006].   Law of Countability : There are at most countably many events.   Activation ordering  The activation ordering ( -≈→ ) is a fundamental ordering that models one event activating another (there must be energy flow in the message passing from an event to an event which it activates).   Because of the transmission of energy, the activation ordering is relativistically  invariant ; that is, for all events e 1 . e 2 , if e 1 -≈→ e 2 , then the time of e 1 precedes the time of e 2 in the relativistic frames of reference of all observers.    Law of Strict Causality for the Activation Ordering : For no event does e -≈→ e .    Law of Finite Predecession in the Activation Ordering : For all events e 1 the set {e|e -≈→ e 1 } is finite.   Arrival orderings  The arrival ordering of an Actor x ( -x→ ) models the (total) ordering of events in which a message arrives at x . Arrival ordering is determined by arbitration in processing messages (often making use of a digital circuit called an arbiter ). The arrival events of an Actor are on its world line . The arrival ordering means that the Actor model inherently has indeterminacy (see Indeterminacy in concurrent computation ).   Because all of the events of the arrival ordering of an actor x happen on the world line of x , the arrival ordering of an actor is relativistically invariant . I.e. , for all actors x and events e 1 . e 2 , if e 1 -x→ e 2 , then the time of e 1 precedes the time of e 2 in the relativistic frames of reference of all observers.    Law of Finite Predecession in Arrival Orderings : For all events e 1 and Actors x the set {e|e -x→ e 1 } is finite.   Combined ordering  The combined ordering (denoted by → ) is defined to be the transitive closure of the activation ordering and the arrival orderings of all Actors.   The combined ordering is relativistically invariant because it is the transitive closure of relativistically invariant orderings. I.e. , for all events e 1 . e 2 , if e 1 →e 2 . then the time of e 1 precedes the time of e 2 in the relativistic frames of reference of all observers.    Law of Strict Causality for the Combined Ordering : For no event does e→e .   The combined ordering is obviously transitive by definition.  In [Baker and Hewitt 197?], it was conjectured that the above laws might entail the following law:   Law of Finite Chains Between Events in the Combined Ordering : There are no infinite chains ( i.e. , linearly ordered sets) of events between two events in the combined ordering →.   Independence of the Law of Finite Chains Between Events in the Combined Ordering  However, [Clinger 1981] surprisingly proved that the Law of Finite Chains Between Events in the Combined Ordering is independent of the previous laws, i.e. ,  Theorem. The Law of Finite Chains Between Events in the Combined Ordering does not follow from the previously stated laws.  Proof. It is sufficient to show that there is an Actor computation that satisfies the previously stated laws but violates the Law of Finite Chains Between Events in the Combined Ordering.   Consider a computation which begins when an actor Initial is sent a Start message causing it to take the following actions  Create a new actor Greeter 1 which is sent the message SayHelloTo with the address of Greeter 1  Send Initial the message Again with the address of Greeter 1      Thereafter the behavior of Initial is as follows on receipt of an Again message with address Greeter i (which we will call the event '''Again i ''' ):  Create a new actor Greeter i+1 which is sent the message SayHelloTo with address Greeter i  Send Initial the message Again with the address of Greeter i+1    Obviously the computation of Initial sending itself Again messages never terminates.    The behavior of each Actor Greeter i is as follows:  When it receives a message SayHelloTo with address Greeter i-1 (which we will call the event '''SayHelloTo i ''' ), it sends a Hello message to Greeter i-1  When it receives a Hello message (which we will call the event '''Hello i ''' ), it does nothing.    Now it is possible that '''Hello i ''' -''Greeter i ''→ '''SayHelloTo i ''' every time and therefore '''Hello i '''→'''SayHelloTo i ''' .  Also '''Again i ''' -≈→ '''Again i+1 ''' every time and therefore '''Again i ''' → '''Again i+1 ''' .    Furthermore all of the laws stated before the Law of Strict Causality for the Combined Ordering are satisfied.  However, there may be an infinite number of events in the combined ordering between '''Again 1 ''' and '''SayHelloTo 1 ''' as follows:  '''Again 1 '''→...→'''Again i '''→... \infty ...→'''Hello i '''→'''SayHelloTo i '''→...→'''Hello 1 '''→'''SayHelloTo 1 '''    However, we know from physics that infinite energy cannot be expended along a finite trajectory. Therefore, since the Actor model is based on physics, the Law of Finite Chains Between Events in the Combined Ordering was taken as an axiom of the Actor model.  Law of Discreteness  The Law of Finite Chains Between Events in the Combined Ordering is closely related to the following law:   Law of Discreteness : For all events e 1 and e 2 , the set {e|e 1 →e→e 2 } is finite.   In fact the previous two laws have been shown to be equivalent:   Theorem [Clinger 1981]. The Law of Discreteness is equivalent to the Law of Finite Chains Between Events in the Combined Ordering (without using the axiom of choice.)   The law of discreteness rules out Zeno machines and is related to results on Petri nets [Best et al. 1984, 1987].  The Law of Discreteness implies the property of unbounded nondeterminism . The combined ordering is used by [Clinger 1981] in the construction of a denotational model of Actors (see denotational semantics ).  Denotational semantics  Clinger [1981] used the Actor event model described above to construct a denotational model for Actors using power domains . Subsequently Hewitt [2006] augmented the diagrams with arrival times to construct a technically simpler denotational model that is easier to understand.  See also   Actor model early history  Actor model and process calculi  Actor model implementation   References   Carl Hewitt, '' et al.'' Actor Induction and Meta-evaluation Conference Record of ACM Symposium on Principles of Programming Languages, January 1974.  Irene Greif. Semantics of Communicating Parallel Processes MIT EECS Doctoral Dissertation. August 1975.  Edsger Dijkstra. A discipline of programming Prentice Hall. 1976.  Carl Hewitt and Henry Baker  Actors and Continuous Functionals Proceeding of IFIP Working Conference on Formal Description of Programming Concepts. August 1–5, 1977.  Henry Baker and Carl Hewitt The Incremental Garbage Collection of Processes Proceeding of the Symposium on Artificial Intelligence Programming Languages. SIGPLAN Notices 12, August 1977.  Carl Hewitt and Henry Baker  Laws for Communicating Parallel Processes IFIP-77, August 1977.  Aki Yonezawa Specification and Verification Techniques for Parallel Programs Based on Message Passing Semantics MIT EECS Doctoral Dissertation. December 1977.  Peter Bishop Very Large Address Space Modularly Extensible Computer Systems MIT EECS Doctoral Dissertation. June 1977.  Carl Hewitt. Viewing Control Structures as Patterns of Passing Messages Journal of Artificial Intelligence. June 1977.  Henry Baker. Actor Systems for Real-Time Computation MIT EECS Doctoral Dissertation. January 1978.  Carl Hewitt and Russ Atkinson. Specification and Proof Techniques for Serializers IEEE Journal on Software Engineering. January 1979.  Carl Hewitt, Beppe Attardi, and Henry Lieberman. Delegation in Message Passing Proceedings of First International Conference on Distributed Systems Huntsville, AL. October 1979.  Russ Atkinson. Automatic Verification of Serializers MIT Doctoral Dissertation. June, 1980.  Bill Kornfeld and Carl Hewitt. The Scientific Community Metaphor IEEE Transactions on Systems, Man, and Cybernetics. January 1981.  Gerry Barber. Reasoning about Change in Knowledgeable Office Systems MIT EECS Doctoral Dissertation. August 1981.  Bill Kornfeld. Parallelism in Problem Solving MIT EECS Doctoral Dissertation. August 1981.  Will Clinger. Foundations of Actor Semantics MIT Mathematics Doctoral Dissertation. June 1981.  Eike Best. Concurrent Behaviour: Sequences, Processes and Axioms Lecture Notes in Computer Science Vol.197 1984.  Gul Agha. Actors: A Model of Concurrent Computation in Distributed Systems Doctoral Dissertation. 1986.  Eike Best and R.Devillers. Sequential and Concurrent Behaviour in Petri Net Theory Theoretical Computer Science Vol.55/1. 1987.  Gul Agha, Ian Mason, Scott Smith, and Carolyn Talcott. A Foundation for Actor Computation Journal of Functional Programming January 1993.  Satoshi Matsuoka and Akinori Yonezawa . Analysis of inheritance anomaly in object-oriented concurrent programming languages in Research directions in concurrent object-oriented programming. 1993.  Jayadev Misra. A Logic for concurrent programming: Safety Journal of Computer Software Engineering. 1995.  Luca de Alfaro, Zohar Manna, Henry Sipma and Tomás Uribe. Visual Verification of Reactive Systems TACAS 1997.  Thati, Prasanna, Carolyn Talcott, and Gul Agha. Techniques for Executing and Reasoning About Specification Diagrams International Conference on Algebraic Methodology and Software Technology (AMAST), 2004.  Giuseppe Milicia and Vladimiro Sassone. The Inheritance Anomaly: Ten Years After Proceedings of the 2004 ACM Symposium on Applied Computing (SAC), Nicosia, Cyprus, March 14–17, 2004.  Petrus Potgieter. Zeno machines and hypercomputation 2005  Carl Hewitt What is Commitment?Physical, Organizational, and Social COINS@AAMAS. 2006.   "  Category:Actor model  Category:Denotational semantics  Category:Mathematics of computing   