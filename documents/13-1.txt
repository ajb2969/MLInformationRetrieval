


Behavior of coupled DEVS




Behavior of coupled DEVS

DEVS is closed under coupling [Zeigper84] [ZPK00]. In other words, given a coupled DEVS model 
 
 
 
 , its behavior is described as an atomic DEVS model 
 
 
 
 . For a given coupled DEVS 
 
 
 
 , once we have an equivalent atomic DEVS 
 
 
 
 , behavior of 
 
 
 
  can be referred to behavior of atomic DEVS which is based on Timed Event System.
Similar to behavior of atomic DEVS, behavior of the Coupled DEVS class is described depending on definition of the total state set and its handling as follows.
== View1: Total States = States * Elapsed Times == Given a coupled DEVS model 
 
 
 
 , its behavior is described as an atomic DEVS model 
 
 

where



 
  and 
 
 
 
  are the input event set and the output event set, respectively.


 
  is the partial state set where 
 
 
 
  is the total state set of component 
 
 
 
  (Refer to View1 of Behavior of DEVS), where 
 
 
 
  is the set of non-negative real numbers.


 
  is the initial state set where 
 
 
 
  is the total initial state of component 
 
 
 
 .


 
  is the time advance function, where 
 
 
 
  is the set of non-negative real numbers plus infinity.Given 
 
 
 
 ,
 






 
  is the external state function. Given a total state 
 
 
 
  where 
 
 
 
 , and input event 
 
 
 
 , the next state is given by
 





where





Given the partial state 
 
 
 
 , let 
 
 
 
  denote the set of imminent components. The firing component

 
  which triggers the internal state transition and an output event is determined by








 
  is the internal state function. Given a partial state 
 
 
 
 , the next state is given by
 





where








 
  is the output function. Given a partial state 
 
 
 
 ,
 


\begin{cases} \phi &\text{if } \lambda_{i^*}(s_{i^*})=\phi \\ C_{yy}(\lambda_{i^*}(s_{i^*})) &\text{otherwise}. \end{cases} 

== View2: Total States = States * Lifespan * Elapsed Times == Given a coupled DEVS model 
 
 
 
 , its behavior is described as an atomic DEVS model 
 
 

where



 
  and 
 
 
 
  are the input event set and the output event set, respectively.


 
  is the partial state set where 
 
 
 
  is the total state set of component 
 
 
 
  (Refer to View2 of Behavior of DEVS).


 
  is the initial state set where 
 
 
 
  is the total initial state of component 
 
 
 
 .




 
  is the time advance function. Given 
 
 
 
 ,
 







 
  is the external state function. Given a total state 
 
 
 
  where 
 
 
 
 , and input event 
 
 
 
 , the next state is given by
 





where





and





Given the partial state 
 
 
 
 , let 
 
 
 
  denote the set of imminent components. The firing component

 
  which triggers the internal state transition and an output event is determined by








 
  is the internal state function. Given a partial state 
 
 
 
 , the next state is given by
 





where








 
  is the output function. Given a partial state 
 
 
 
 ,
 


\begin{cases} \phi &\text{if } \lambda_{i^*}(s_{i^*})=\phi \\ C_{yy}(\lambda_{i^*}(s_{i^*})) &\text{otherwise}. \end{cases} 

Time Passage
Since in a coupled DEVS model with non-empty sub-components, i.e., 
 
 
 
 , the number of clocks which trace their elapsed times are multiple, so time passage of the model is noticeable.

For View1

Given a total state 
 
 
 
  where 
 
 

If unit event segment

 
  is the null event segment, i.e. 
 
 
 
 , the state trajectory in terms of Timed Event System is






For View2

Given a total state 
 
 
 
  where 
 
 

If unit event segment $\omega$ is the null event segment, i.e. $\omega=\epsilon_{[t, t+dt]}$, the state trajectory in terms of Timed Event System is

$\Delta(q, \omega)=((\ldots,(s_i,t_{si}, t_{ei}+dt),\ldots),  t_{s}, t_e+dt).$

Remarks

The behavior of a couple DEVS network whose all sub-components are deterministic DEVS models can be non-deterministic if $Select(IMM(s))$ is non-deterministic.

See also

DEVS


Behavior of Atomic DEVS


Simulation Algorithms for Coupled DEVS


Simulation Algorithms for Atomic DEVS

References

[Zeigler84] 
[ZKP00] 

"

Category:Automata theory Category:Formal specification languages


