


Padding oracle attack




Padding oracle attack

In cryptography, a padding oracle attack is an attack which is performed using the padding of a cryptographic message. In cryptography, variable-length plaintext messages often have to be padded (expanded) to be compatible with the underlying cryptographic primitive. The attack relies on having a "padding oracle" who freely responds to queries about whether a message is correctly padded or not. Padding oracle attacks are mostly associated with ECB or CBC mode decryption used within block ciphers. Padding modes for asymmetric algorithms such as OAEP may also be vulnerable to padding oracle attacks.1
Symmetric cryptography
In symmetric cryptography, the padding oracle attack can be applied to the CBC mode of operation, where the "oracle" (usually a server) leaks data about whether the padding of an encrypted message is correct or not. Such data can allow attackers to decrypt (and sometimes encrypt) messages through the oracle using the oracle's key, without knowing the encryption key.
Example of the attack on CBC encryption
Suppose the attacker has three ciphertext blocks 
 
 
 
  and he wants to decrypt the second block (get plaintext 
 
 
 
 ). He only knows that the very last block 
 
 
 
  is padded correctly and the padding method is PKCS7, which means that the last block is padded with 
 
 
 
 
  bytes, each equal to n (for example: six bytes, each byte = 0x06).
CBC decryption works as follows: 
 
 
 
  If the attacker changes the last byte of 
 
 
 
  and sends 
 
 
 
  to the server, it will affects the whole block 
 
 
 
  (because of decryption avalanche effect) and the last byte of 
 
 
 
 
  (because of XORing operation). Then the server checks the padding of the last decrypted block (which is 
 
 
 
 ), and returns whether or not the padding is correct (this check is performed before the actual processing of the plaintext message).
Let 
 
 
 
  be the last byte of 
 
 
 
 . The attacker changes it as follows
 
 
 
 , where 
 
 
 
 
  is the guessed value of the last byte of 
 
 
 
 . If 
 
 
 
  were a shrewd guess (the exact value of 
 
 
 
 's last byte) the server will not raise a padding error (because the last byte of 
 
 
 
  becomes equal to 0x01, which is correct padding). In the other case, the server will report a padding error and the attacker will try the next value of 
 
 
 
 
 . In the worst case, he needs to make 255 attempts to find the right value of 
 
 
 
 , (one guess for every possible byte).
After he knows the last byte of 
 
 
 
 , the attacker can obtain the second-to-last byte of 
 
 
 
 . He changes the last two bytes of 
 
 

 
  and 
 
 
 
 . Now he tries to find the value 
 
 
 
 , which results in the correct padding (0x02,0x02). After no more than 255 guesses he will get it and proceed to 
 
 
 
  and so on.
If any block consists of 128 bits (AES, for example), which is 16 bytes, the attacker will obtain plaintext 
 
 
 
  in no more than 255â‹…16 = 4080 attempts. This attack costs practically nothing and can be performed in a few seconds (depending on the server's speed).
Attacks using padding oracles
The original attack was published in 2002 by Serge Vaudenay.2 In 2010 the attack was applied to several web application frameworks, including JavaServer Faces, Ruby on Rails3 and ASP.NET.456 In 2012 it was shown to be effective against some hardened security devices.7
While these earlier attacks were fixed by most TLS implementors following its public announcement, a new variant, the Lucky Thirteen attack, published in 2013, used a timing side-channel to re-open the vulnerability even in implementations that had previously been fixed. As of early 2014, the attack is no longer considered a threat in real-life operation, though it is still workable in theory (see signal-to-noise ratio) against a certain class of machines. , the most active area of development for attacks upon cryptographic protocols used to secure Internet traffic are downgrade attack, such as Logjam8 and Export RSA/FREAK9 attacks, which trick clients in to using less-secure cryptographic operations provided for compatibility with legacy clients when more secure ones are available. An interesting attack called POODLE10 (late 2014) combines both a downgrade attack (to SSL 3.0) with a padding oracle attack on the older, insecure protocol to enable compromise of the transmitted data.
References
"
Category:Cryptographic attacks Category:Transport Layer Security










. For further information see https://www.weakdh.org.
; see https://www.freakattack.com for more information.
; for further information, see https://www.poodle.io




