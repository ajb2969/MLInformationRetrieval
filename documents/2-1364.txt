   Spectral method      Spectral method   Spectral methods are a class of techniques used in applied mathematics and scientific computing to numerically solve certain differential equations , often involving the use of the Fast Fourier Transform . The idea is to write the solution of the differential equation as a sum of certain "basis functions" (for example, as a Fourier series which is a sum of sinusoids ) and then to choose the coefficients in the sum in order to satisfy the differential equation as well as possible.  Spectral methods and finite element methods are closely related and built on the same ideas; the main difference between them is that spectral methods use basis functions that are nonzero over the whole domain, while finite element methods use basis functions that are nonzero only on small subdomains. In other words, spectral methods take on a global approach while finite element methods use a local approach . Partially for this reason, spectral methods have excellent error properties, with the so-called "exponential convergence" being the fastest possible, when the solution is smooth . However, there are no known three-dimensional single domain spectral shock capturing results (shock waves are not smooth). 1 In the finite element community, a method where the degree of the elements is very high or increases as the grid parameter h decreases to zero is sometimes called a spectral element method .  Spectral methods can be used to solve ordinary differential equations (ODEs), partial differential equations (PDEs) and eigenvalue problems involving differential equations. When applying spectral methods to time-dependent PDEs, the solution is typically written as a sum of basis functions with time-dependent coefficients; substituting this in the PDE yields a system of ODEs in the coefficients which can be solved using any numerical method for ODEs . Eigenvalue problems for ODEs are similarly converted to matrix eigenvalue problems .  Spectral methods were developed in a long series of papers by Steven Orszag starting in 1969 including, but not limited to, Fourier series methods for periodic geometry problems, polynomial spectral methods for finite and unbounded geometry problems, pseudospectral methods for highly nonlinear problems, and spectral iteration methods for fast solution of steady state problems. The implementation of the spectral method is normally accomplished either with collocation or a Galerkin or a Tau approach.  Spectral methods are computationally less expensive than finite element methods, but become less accurate for problems with complex geometries and discontinuous coefficients. This increase in error is a consequence of the Gibbs phenomenon .  Examples of spectral methods  A concrete, linear example  Here we presume an understanding of basic multivariate calculus and Fourier series . If g(x,y) is a known, complex-valued function of two real variables, and g is periodic in x and y (that is, g(x,y)=g(x+2π,y)=g(x,y+2π)) then we are interested in finding a function f(x,y) so that        (     ∂  2    ∂   x  2     +    ∂  2    ∂   y  2      )   f   (  x  ,  y  )    =    g   (  x  ,  y  )     for all  x   ,  y              superscript   2      superscript  x  2        superscript   2      superscript  y  2      f   x  y       g   x  y      for all  x   y     \left(\frac{\partial^{2}}{\partial x^{2}}+\frac{\partial^{2}}{\partial y^{2}}%
 \right)f(x,y)=g(x,y)\quad\text{for all }x,y     where the expression on the left denotes the second partial derivatives of f in x and y, respectively. This is the Poisson equation , and can be physically interpreted as some sort of heat conduction problem, or a problem in potential theory, among other possibilities.  If we write f and g in Fourier series:      f  =  :  ∑   a   j  ,  k     e   i   (    j  x   +   k  y    )        fragments  f   normal-:    subscript  a   j  k     superscript  e    i      j  x     k  y        f=:\sum a_{j,k}e^{i(jx+ky)}         g  =  :  ∑   b   j  ,  k     e   i   (    j  x   +   k  y    )        fragments  g   normal-:    subscript  b   j  k     superscript  e    i      j  x     k  y        g=:\sum b_{j,k}e^{i(jx+ky)}     and substitute into the differential equation, we obtain this equation:       ∑  -    a   j  ,  k     (    j  2   +   k  2    )    e   i   (    j  x   +   k  y    )       =   ∑    b   j  ,  k     e   i   (    j  x   +   k  y    )                 subscript  a   j  k       superscript  j  2    superscript  k  2     superscript  e    i      j  x     k  y             subscript  b   j  k     superscript  e    i      j  x     k  y          \sum-a_{j,k}(j^{2}+k^{2})e^{i(jx+ky)}=\sum b_{j,k}e^{i(jx+ky)}     We have exchanged partial differentiation with an infinite sum, which is legitimate if we assume for instance that f has a continuous second derivative. By the uniqueness theorem for Fourier expansions, we must then equate the Fourier coefficients term by term, giving   (*)     a   j  ,  k    =   -    b   j  ,  k      j  2   +   k  2           subscript  a   j  k         subscript  b   j  k       superscript  j  2    superscript  k  2        a_{j,k}=-\frac{b_{j,k}}{j^{2}+k^{2}}      which is an explicit formula for the Fourier coefficients a j , k .  With periodic boundary conditions, the Poisson equation possesses a solution only if b 0 , 0 = 0 . Therefore we can freely choose a 0 , 0 which will be equal to the mean of the resolution. This corresponds to choosing the integration constant.  To turn this into an algorithm, only finitely many frequencies are solved for. This introduces an error which can be shown to be proportional to    h  n     superscript  h  n    h^{n}   , where    h  :=   1  /  n      assign  h    1  n     h:=1/n   and   n   n   n   is the highest frequency treated.  Algorithm   Compute the Fourier transform (''b j,k'' ) of g .  Compute the Fourier transform ( a j,k ) of f via the formula (*).  Compute f by taking an inverse Fourier transform of (''a j,k'' ).   Since we're only interested in a finite window of frequencies (of size n , say) this can be done using a Fast Fourier Transform algorithm. Therefore, globally the algorithm runs in time O ( n log n ).  A concrete, nonlinear example  We wish to solve the forced, transient, nonlinear Burgers' equation using a spectral approach.  Given    u   (  x  ,  0  )       u   x  0     u(x,0)   on the periodic domain    x  ∈   [  0  ,   2  π   )       x   0    2  π      x\in\left[0,2\pi\right)   , find    u  ∈  𝒰      u  𝒰    u\in\mathcal{U}   such that          ∂  t   u   +   u    ∂  x   u     =    ρ    ∂   x  x    u    +  f       ∀  x   ∈   [  0  ,   2  π   )    ,    ∀  t   >  0       formulae-sequence        subscript   t   u     u    subscript   x   u         ρ    subscript     x  x    u    f     formulae-sequence     for-all  x    0    2  π        for-all  t   0      \partial_{t}u+u\partial_{x}u=\rho\partial_{xx}u+f\quad\forall x\in\left[0,2\pi%
 \right),\forall t>0   where ρ is the viscosity coefficient. In weak conservative form this becomes        ⟨    ∂  t   u   ,  v  ⟩   =    ⟨    ∂  x    (    -    1  2    u  2     +   ρ    ∂  x   u     )    ,  v  ⟩   +   ⟨  f  ,  v  ⟩        ∀  v   ∈  𝒱   ,    ∀  t   >  0       formulae-sequence       subscript   t   u   v        subscript   x           1  2    superscript  u  2       ρ    subscript   x   u      v    f  v      formulae-sequence     for-all  v   𝒱      for-all  t   0      \langle\partial_{t}u,v\rangle=\langle\partial_{x}\left(-\frac{1}{2}u^{2}+\rho%
 \partial_{x}u\right),v\rangle+\langle f,v\rangle\quad\forall v\in\mathcal{V},%
 \forall t>0   where     ⟨  f  ,  g  ⟩   :=    ∫  0   2  π     f   (  x  )      g   (  x  )    ¯    d  x       assign   f  g     superscript   subscript   0     2  π      f  x   normal-¯    g  x    d  x      \langle f,g\rangle:=\int_{0}^{2\pi}f(x)\overline{g(x)}\,dx   following inner product notation. Integrating by parts and using periodicity grants        ⟨    ∂  t   u   ,  v  ⟩   =    ⟨     1  2    u  2    -   ρ    ∂  x   u     ,    ∂  x   v   ⟩   +   ⟨  f  ,  v  ⟩        ∀  v   ∈  𝒱   ,    ∀  t   >  0.       formulae-sequence       subscript   t   u   v            1  2    superscript  u  2      ρ    subscript   x   u       subscript   x   v     f  v      formulae-sequence     for-all  v   𝒱      for-all  t   0.      \langle\partial_{t}u,v\rangle=\langle\frac{1}{2}u^{2}-\rho\partial_{x}u,%
 \partial_{x}v\rangle+\langle f,v\rangle\quad\forall v\in\mathcal{V},\forall t>0.     To apply the Fourier- Galerkin method , choose both       𝒰  N   :=   {  u  :    u   (  x  ,  t  )    =    ∑   k  =   -   N  /  2       N  /  2   -  1       u  ^   k    (  t  )    e   i  k  x       }      assign   superscript  𝒰  N    conditional-set  u      u   x  t      superscript   subscript     k      N  2          N  2   1       subscript   normal-^  u   k   t   superscript  e    i  k  x          \mathcal{U}^{N}:=\left\{u:u(x,t)=\sum_{k=-N/2}^{N/2-1}\hat{u}_{k}(t)e^{ikx}\right\}   and       𝒱  N   :=   span   {   e   i  k  x    :   k  ∈    -   N  /  2    ,  …  ,    N  /  2   -  1     }       assign   superscript  𝒱  N     span   conditional-set   superscript  e    i  k  x      k       N  2    normal-…      N  2   1         \mathcal{V}^{N}:=\text{ span}\left\{e^{ikx}:k\in-N/2,\dots,N/2-1\right\}   where       u  ^   k    (  t  )    :=    1   2  π     ⟨   u   (  x  ,  t  )    ,   e   i  k  x    ⟩       assign     subscript   normal-^  u   k   t       1    2  π       u   x  t     superscript  e    i  k  x        \hat{u}_{k}(t):=\frac{1}{2\pi}\langle u(x,t),e^{ikx}\rangle   . This reduces the problem to finding    u  ∈   𝒰  N       u   superscript  𝒰  N     u\in\mathcal{U}^{N}   such that        ⟨    ∂  t   u   ,   e   i  k  x    ⟩   =    ⟨     1  2    u  2    -   ρ    ∂  x   u     ,    ∂  x    e   i  k  x     ⟩   +   ⟨  f  ,   e   i  k  x    ⟩        ∀  k   ∈   {   -   N  /  2    ,  …  ,    N  /  2   -  1   }    ,    ∀  t   >  0.       formulae-sequence       subscript   t   u    superscript  e    i  k  x              1  2    superscript  u  2      ρ    subscript   x   u       subscript   x    superscript  e    i  k  x       f   superscript  e    i  k  x        formulae-sequence     for-all  k        N  2    normal-…      N  2   1        for-all  t   0.      \langle\partial_{t}u,e^{ikx}\rangle=\langle\frac{1}{2}u^{2}-\rho\partial_{x}u,%
 \partial_{x}e^{ikx}\rangle+\langle f,e^{ikx}\rangle\quad\forall k\in\left\{-N/%
 2,\dots,N/2-1\right\},\forall t>0.     Using the orthogonality relation     ⟨   e   i  l  x    ,   e   i  k  x    ⟩   =   2  π   δ   l  k           superscript  e    i  l  x     superscript  e    i  k  x       2  π   subscript  δ    l  k       \langle e^{ilx},e^{ikx}\rangle=2\pi\delta_{lk}   where    δ   l  k      subscript  δ    l  k     \delta_{lk}   is the Kronecker delta , we simplify the above three terms for each   k   k   k   to see      ⟨    ∂  t   u   ,   e   i  k  x    ⟩       subscript   t   u    superscript  e    i  k  x      \displaystyle\langle\partial_{t}u,e^{ikx}\rangle     Assemble the three terms for each   k   k   k   to obtain        2  π    ∂  t     u  ^   k     =     -   i  π  k    ∑    p  +  q   =  k       u  ^   p     u  ^   q       -   2  π  ρ   k  2     u  ^   k     +   2  π    f  ^   k        k  ∈   {   -   N  /  2    ,  …  ,    N  /  2   -  1   }    ,    ∀  t   >  0.       formulae-sequence      2  π    subscript   t    subscript   normal-^  u   k             i  π  k    subscript       p  q   k       subscript   normal-^  u   p    subscript   normal-^  u   q         2  π  ρ   superscript  k  2    subscript   normal-^  u   k       2  π   subscript   normal-^  f   k       formulae-sequence    k       N  2    normal-…      N  2   1        for-all  t   0.      2\pi\partial_{t}\hat{u}_{k}=-i\pi k\sum_{p+q=k}\hat{u}_{p}\hat{u}_{q}-2\pi\rho%
 {}k^{2}\hat{u}_{k}+2\pi\hat{f}_{k}\quad k\in\left\{-N/2,\dots,N/2-1\right\},%
 \forall t>0.   Dividing through by    2  π      2  π    2\pi   , we finally arrive at         ∂  t     u  ^   k    =     -     i  k   2     ∑    p  +  q   =  k       u  ^   p     u  ^   q       -   ρ   k  2     u  ^   k     +    f  ^   k       k  ∈   {   -   N  /  2    ,  …  ,    N  /  2   -  1   }    ,    ∀  t   >  0.       formulae-sequence      subscript   t    subscript   normal-^  u   k                i  k   2     subscript       p  q   k       subscript   normal-^  u   p    subscript   normal-^  u   q         ρ   superscript  k  2    subscript   normal-^  u   k      subscript   normal-^  f   k      formulae-sequence    k       N  2    normal-…      N  2   1        for-all  t   0.      \partial_{t}\hat{u}_{k}=-\frac{ik}{2}\sum_{p+q=k}\hat{u}_{p}\hat{u}_{q}-\rho{}%
 k^{2}\hat{u}_{k}+\hat{f}_{k}\quad k\in\left\{-N/2,\dots,N/2-1\right\},\forall t%
 >0.   With Fourier transformed initial conditions      u  ^   k    (  0  )        subscript   normal-^  u   k   0    \hat{u}_{k}(0)   and forcing      f  ^   k    (  t  )        subscript   normal-^  f   k   t    \hat{f}_{k}(t)   , this coupled system of ordinary differential equations may be integrated in time (using, e.g., a Runge Kutta technique) to find a solution. The nonlinear term is a convolution , and there are several transform-based techniques for evaluating it efficiently. See the references by Boyd and Canuto et al. for more details.  A relationship with the spectral element method  One can show that if   g   g   g   is infinitely differentiable, then the numerical algorithm using Fast Fourier Transforms will converge faster than any polynomial in the grid size h. That is, for any n>0, there is a    C  <  ∞      C     C<\infty   such that the error is less than    C   h  n       C   superscript  h  n     Ch^{n}   for all sufficiently small values of   h   h   h   . We say that the spectral method is of order   n   n   n   , for every n>0.  Because a spectral element method is a finite element method of very high order, there is a similarity in the convergence properties. However, whereas the spectral method is based on the eigendecomposition of the particular boundary value problem, the spectral element method does not use that information and works for arbitrary elliptic boundary value problems .  See also   Discrete element method  Gaussian grid  Pseudo-spectral method  Spectral element method  Galerkin method  Collocation method   References   Bengt Fornberg (1996) A Practical Guide to Pseudospectral Methods. Cambridge University Press, Cambridge, UK  Chebyshev and Fourier Spectral Methods by John P. Boyd.  Canuto C., Hussaini M. Y. , Quarteroni A., and Zang T.A. (2006) Spectral Methods. Fundamentals in Single Domains. Springer-Verlag, Berlin Heidelberg  Javier de Frutos, Julia Novo: A Spectral Element Method for the Navier--Stokes Equations with Improved Accuracy  Polynomial Approximation of Differential Equations , by Daniele Funaro, Lecture Notes in Physics, Volume 8, Springer-Verlag, Heidelberg 1992  D. Gottlieb and S. Orzag (1977) "Numerical Analysis of Spectral Methods : Theory and Applications", SIAM, Philadelphia, PA  J. Hesthaven, S. Gottlieb and D. Gottlieb (2007) "Spectral methods for time-dependent problems", Cambridge UP, Cambridge, UK  Steven A. Orszag (1969) Numerical Methods for the Simulation of Turbulence , Phys. Fluids Supp. II, 12, 250-257   Lloyd N. Trefethen (2000) Spectral Methods in MATLAB. SIAM, Philadelphia, PA   "  Category:Numerical analysis  Category:Numerical differential equations     pp 235, Spectral Methods : evolution to complex geometries and applications to fluid dynamics, By Canuto, Hussaini, Quarteroni and Zang, Springer, 2007. ↩     