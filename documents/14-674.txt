   Naor-Reingold Pseudorandom Function      Naor-Reingold Pseudorandom Function   In 1997, Moni Naor and Omer Reingold described efficient constructions for various cryptographic primitives in private key as well as public-key cryptography . Their result is the construction of an efficient pseudorandom function . Let p and l be prime numbers with l | p -1. Select an element g ∈    𝔽  p    *     superscript   subscript  𝔽  p      {\mathbb{F}_{p}}^{*}   of multiplicative order  l . Then for each n-dimensional vector  a = ( a 1 , ..., a n )∈     (   𝔽  l   )   n     superscript   subscript  𝔽  l   n    (\mathbb{F}_{l})^{n}   they define the function        f  a    (  x  )    =   g    a  1   x  1     a  2   x  2    …   a  n   x  n      ∈   𝔽  p            subscript  f  a   x    superscript  g     superscript   subscript  a  1    subscript  x  1     superscript   subscript  a  2    subscript  x  2    normal-…   superscript   subscript  a  n    subscript  x  n            subscript  𝔽  p      f_{a}(x)=g^{a_{1}^{x_{1}}a_{2}^{x_{2}}...a_{n}^{x_{n}}}\in\mathbb{F}_{p}     where x = x 1 ... x n is the bit representation of integer x, 0 ≤ x ≤ 2 n-1 , with some extra leading zeros if necessary. 1  Example  Let p = 7, p – 1 = 6, and l = 3, l | p -1. Select g = 4 ∈    𝔽  7    *     superscript   subscript  𝔽  7      {\mathbb{F}_{7}}^{*}   of multiplicative order 3 (since 4 3 = 64 ≡ 1 mod 7). For n = 3, a = (1, 2, 1) and x = 5 (the bit representation of 5 is 101), we can compute      f  a     (  5  )        subscript  f  a   5    f_{a}\;(5)   as follows:        f  a    (  x  )    =   g    a  1   x  1     a  2   x  2    …   a  n   x  n             subscript  f  a   x    superscript  g     superscript   subscript  a  1    subscript  x  1     superscript   subscript  a  2    subscript  x  2    normal-…   superscript   subscript  a  n    subscript  x  n        f_{a}(x)=g^{a_{1}^{x_{1}}a_{2}^{x_{2}}...a_{n}^{x_{n}}}           f  a    (  5  )    =   4    1  1    2  0    1  1     =   4  1   =  4  ∈   𝔽  7            subscript  f  a   5    superscript  4     superscript  1  1    superscript  2  0    superscript  1  1           superscript  4  1        4        subscript  𝔽  7      f_{a}(5)=4^{1^{1}2^{0}1^{1}}=4^{1}=4\in\mathbb{F}_{7}     Efficiency  The evaluation of function      f  a     (  x  )        subscript  f  a   x    f_{a}\;(x)   in the Naor-Reingold construction can be done very efficiently. Computing the value of the function      f  a     (  x  )        subscript  f  a   x    f_{a}\;(x)   at any given point is comparable with one modular exponentiation and n-modular multiplications. This function can be computed in parallel by threshold circuits of bounded depth and polynomial size.  The Naor-Reingold function can be used as the basis of many cryptographic schemes including symmetric encryption , authentication and digital signatures .  Security of the Function  Assume that an attacker sees several outputs of the function, e.g.        f  a    (  1  )    =   g   a  1     ,      f  a    (  2  )    =   g   a  2     ,     f  a    (  3  )    =   g    a  1    a  2          formulae-sequence       subscript  f  a   1    superscript  g   subscript  a  1      formulae-sequence       subscript  f  a   2    superscript  g   subscript  a  2          subscript  f  a   3    superscript  g     subscript  a  1    subscript  a  2         f_{a}(1)=g^{a_{1}},f_{a}(2)=g^{a_{2}},f_{a}(3)=g^{a_{1}a_{2}}    , ...       f  a    (  k  )    =   g    a  1   x  1     a  2   x  2    …   a  n   x  n             subscript  f  a   k    superscript  g     superscript   subscript  a  1    subscript  x  1     superscript   subscript  a  2    subscript  x  2    normal-…   superscript   subscript  a  n    subscript  x  n        f_{a}(k)=g^{a_{1}^{x_{1}}a_{2}^{x_{2}}...a_{n}^{x_{n}}}    and wants to compute       f  a     (   k  +  1   )        subscript  f  a     k  1     f_{a}\;(k+1)    . Assume for simplicity that x 1 = 0, then the attacker needs to solve the Computational  Diffie-Hellman  (CDH) between       f  a    (  1  )    =   g   a  1           subscript  f  a   1    superscript  g   subscript  a  1      f_{a}(1)=g^{a_{1}}    and       f  a    (  k  )    =   g    a  2   x  2    …   a  n   x  n             subscript  f  a   k    superscript  g     superscript   subscript  a  2    subscript  x  2    normal-…   superscript   subscript  a  n    subscript  x  n        f_{a}(k)=g^{a_{2}^{x_{2}}...a_{n}^{x_{n}}}    to get       f  a    (   k  +  1   )    =   g    a  1    a  2   x  2    …   a  n   x  n             subscript  f  a     k  1     superscript  g     subscript  a  1    superscript   subscript  a  2    subscript  x  2    normal-…   superscript   subscript  a  n    subscript  x  n        f_{a}(k+1)=g^{a_{1}a_{2}^{x_{2}}\dots a_{n}^{x_{n}}}    . In general, moving from k to k +1 changes the bit pattern and unless k + 1 is a power of 2 one can split the exponent in       f  a     (   k  +  1   )        subscript  f  a     k  1     f_{a}\;(k+1)    so that the computation corresponds to computing the Diffie-Hellman key between two of the earlier results. This attacker wants to predict the next sequence element. Such an attack would be very bad—but it's also possible to fight it off by working in groups with a hard Diffie-Hellman  problem (DHP).  Example: An attacker sees several outputs of the function e.g.      f  a    (  5  )    =   4    1  1    2  0    1  1     =   4  1   =  4           subscript  f  a   5    superscript  4     superscript  1  1    superscript  2  0    superscript  1  1           superscript  4  1        4     f_{a}(5)=4^{1^{1}2^{0}1^{1}}=4^{1}=4   , as in the previous example, and      f  a    (  1  )    =   4    1  0    2  0    1  1     =   4  1   =  4           subscript  f  a   1    superscript  4     superscript  1  0    superscript  2  0    superscript  1  1           superscript  4  1        4     f_{a}(1)=4^{1^{0}2^{0}1^{1}}=4^{1}=4   . Then, the attacker wants to predict the next sequence element of this function,      f  a     (  6  )        subscript  f  a   6    f_{a}\;(6)   . However, the attacker cannot predict the outcome of      f  a     (  6  )        subscript  f  a   6    f_{a}\;(6)   from knowing      f  a     (  1  )        subscript  f  a   1    f_{a}\;(1)   and      f  a     (  5  )        subscript  f  a   5    f_{a}\;(5)   .  There are other attacks that would be very bad for a Pseudorandom Number Generator : the user expects to get random numbers from the output, so of course the stream should not be predictable, but even more, it should be indistinguishable from a random string. Let    𝒜  f     superscript  𝒜  f    \mathcal{A}^{f}   denote the algorithm   𝒜   𝒜   \mathcal{A}   with access to an oracle for evaluating the function      f  a     (  x  )        subscript  f  a   x    f_{a}\;(x)   . Suppose the Decisional Diffie-Hellman assumption holds for    𝔽  p     subscript  𝔽  p    \mathbb{F}_{p}   , Naor and Reingold show that for every probabilistic polynomial time algorithm   𝒜   𝒜   \mathcal{A}   and sufficiently large n      Pr   [   𝒜    f  a    (  x  )      (  p  ,  g  )   →  1  ]   -  Pr   [   𝒜  R    (  p  ,  g  )   →  1  ]      fragments  Pr   fragments  normal-[   superscript  𝒜     subscript  f  a   x     fragments  normal-(  p  normal-,  g  normal-)   normal-→  1  normal-]    Pr   fragments  normal-[   superscript  𝒜  R    fragments  normal-(  p  normal-,  g  normal-)   normal-→  1  normal-]     \text{Pr }[\mathcal{A}^{f_{a}(x)}(p,g)\to 1]-\text{Pr }[\mathcal{A}^{R}(p,g)%
 \to 1]   is negligible .  The first probability is taken over the choice of the seed s = (p, g, a) and the second probability is taken over the random distribution induced on p, g by    ℐ  𝒢   (  n  )       ℐ  𝒢  n    \mathcal{I}\mathcal{G}(n)   , instance generator, and the random choice of the function      R  a     (  x  )        subscript  R  a   x    R_{a}\;(x)   among the set of all      {  0  ,  1  }   n   →   𝔽  p      normal-→   superscript   0  1   n    subscript  𝔽  p     \{0,1\}^{n}\to\mathbb{F}_{p}   functions. 2  Linear Complexity  One natural measure of how useful a sequence may be for cryptographic purposes is the size of its linear complexity . The linear complexity of an n -element sequence W(x), x = 0,1,2,…,n – 1, over a ring   ℛ   ℛ   \mathcal{R}   is the length l of the shortest linear recurrence relation W (x + l ) = A l -1 W (x + l -1) + … + A 0 W(x), x = 0,1,2,…, n – l –1 with A 0 , …, A l -1 ∈   ℛ   ℛ   \mathcal{R}   , which is satisfied by this sequence.  For some   γ   γ   \gamma   > 0,n ≥ (1+   γ   γ   \gamma   )    log  l      l    \log l   , for any    δ  >  0      δ  0    \delta>0   , sufficiently large l , the linear complexity of the sequence      f  a     (  x  )        subscript  f  a   x    f_{a}\;(x)   ,0 ≤ x ≤ 2 n-1 , denoted by    L  a     subscript  L  a    L_{a}   satisfies       L  a   ⩾   {      l   1  -  δ        , if  γ   ⩾  2        l   (     γ    2  -  δ     )        , if  γ   <  2            subscript  L  a    cases   superscript  l    1  δ        , if  γ   2    superscript  l    γ    2  δ         , if  γ   2      L_{a}\geqslant\begin{cases}l^{1-\ \delta\,\!}&\text{, if }\gamma\,\!\geqslant 2%
 \\
 l^{\left(\tfrac{\ \gamma\,\!}{2-\ \delta\,\!}\right)}&\text{, if }\gamma\,\!<2%
 \end{cases}     for all except possibly at most    3    (   l  -  1   )    n  -  δ        3   superscript    l  1     n  δ      3(l-1)^{n-\delta}   vectors a ∈     (   𝔽  l   )   n     superscript   subscript  𝔽  l   n    (\mathbb{F}_{l})^{n}   . 3 The bound of this work has disadvantages, namely it does not apply to the very interesting case      log  p   ≈   log  n   ≈  n   .          p     n        n     \log p\approx\log n\approx{n.}     Uniformity of Distribution  The statistical distribution of      f  a     (  x  )        subscript  f  a   x    f_{a}\;(x)   is exponentially close to uniform distribution for almost all vectors a ∈     (   𝔽  l   )   n     superscript   subscript  𝔽  l   n    (\mathbb{F}_{l})^{n}   .  Let    𝐃  a     subscript  𝐃  a    {\mathbf{D}}_{a}   be the discrepancy of the set    {    f  a    (  x  )    |   0  ≤  x  ≤   2   n  -  1     }     conditional-set     subscript  f  a   x       0  x        superscript  2    n  1        \{f_{a}(x)|0\leq x\leq 2^{n-1}\}   . Thus, if    n  =   log  p       n    p     n=\log p   is the bit length of p then for all vectors a ∈     (   𝔽  l   )   n     superscript   subscript  𝔽  l   n    (\mathbb{F}_{l})^{n}   the bound     𝐃  a   ≤   Δ   (  l  ,  p  )         subscript  𝐃  a     normal-Δ   l  p      {\mathbf{D}}_{a}\leq\Delta(l,p)   holds, where       Δ   (  l  ,  p  )    =   {       p   (     1  -  γ   2    )     l   (     -  1   2    )      log  2   p        , if  l   ⩾   p  γ          p   (    1  2    )     l   -  1      log  2   p        , if   p  γ    >  l  ⩾   p   (    2  3    )           p   (    1  4    )     l   (     -  5   8    )      log  2   p        , if   p   (    2  3    )     >  l  ⩾   p   (    1  2    )           p   (    1  8    )     l   (     -  3   8    )      log  2   p        , if   p   (    1  2    )     >  l  ⩾   p   (    1  3    )               normal-Δ   l  p     cases     superscript  p      1  γ   2     superscript  l      1   2      superscript   2   p        , if  l    superscript  p  γ       superscript  p    1  2     superscript  l    1      superscript   2   p          , if   superscript  p  γ    l        superscript  p    2  3         superscript  p    1  4     superscript  l      5   8      superscript   2   p          , if   superscript  p    2  3     l        superscript  p    1  2         superscript  p    1  8     superscript  l      3   8      superscript   2   p          , if   superscript  p    1  2     l        superscript  p    1  3         \Delta(l,p)=\begin{cases}p^{\left(\tfrac{1-\ \gamma\,\!}{2}\right)}l^{\left(%
 \tfrac{-1}{2}\right)}\log^{2}p&\text{, if }l\geqslant p^{\gamma\,\!}\\
 p^{\left(\tfrac{1}{2}\right)}l^{-1}\log^{2}p&\text{, if }p^{\gamma\,\!}>l%
 \geqslant p^{\left(\tfrac{2}{3}\right)}\\
 p^{\left(\tfrac{1}{4}\right)}l^{\left(\tfrac{-5}{8}\right)}\log^{2}p&\text{, %
 if }p^{\left(\tfrac{2}{3}\right)}>l\geqslant p^{\left(\tfrac{1}{2}\right)}\\
 p^{\left(\tfrac{1}{8}\right)}l^{\left(\tfrac{-3}{8}\right)}\log^{2}p&\text{, %
 if }p^{\left(\tfrac{1}{2}\right)}>l\geqslant p^{\left(\tfrac{1}{3}\right)}\\
 \end{cases}     and   γ   γ   \gamma   = 2.5 -    log  3      3    \log 3   = 0.9150....  Although this property does not seem to have any immediate cryptographic implications, the inverse fact, namely non uniform distribution, if true would have disastrous consequences for applications of this function. 4  Sequences in Elliptic Curve  The elliptic curve version of this function is of interest as well. In particular, it may help to improve the cryptographic security of the corresponding system. Let p > 3 be prime and let E be an elliptic curve over    𝔽  p     subscript  𝔽  p    \mathbb{F}_{p}   , then each vector a defines a finite sequence in the subgroup     ⟨  G  ⟩     delimited-⟨⟩  G    \langle G\rangle   as:        F  a    (  x  )    =    (    a  1   x  1     a  2   x  2    …   a  n   x  n     )   G          subscript  F  a   x        superscript   subscript  a  1    subscript  x  1     superscript   subscript  a  2    subscript  x  2    normal-…   superscript   subscript  a  n    subscript  x  n     G     F_{a}(x)=(a_{1}^{x_{1}}a_{2}^{x_{2}}\dots a_{n}^{x_{n}})G     where    x  =    x  1   …   x  n        x     subscript  x  1   normal-…   subscript  x  n      x=x_{1}\dots x_{n}   is the bit representation of integer     x  ,  0   ≤  x  ≤   2   n  -  1           x  0   x        superscript  2    n  1       x,0\leq x\leq 2^{n-1}   . The Naor-Reingold elliptic curve sequence is defined as        u  k   =   X   (    f  a    (  k  )    )   where  X   (  P  )    is the abscissa of   P   ∈  E   .         subscript  u  k     X     subscript  f  a   k   where  X  P  is the abscissa of  P        E     u_{k}=X(f_{a}(k))\;\mbox{where }X(P)\mbox{ is the abscissa of}\;P\in E.    5  If the Decisional Diffie-Hellman assumption holds, the index k is not enough to compute    u  k     subscript  u  k    u_{k}   in polynomial time, even if an attacker performs polynomially many queries to a random oracle.  See also   Decisional Diffie-Hellman assumption  Finite Field  Inversive congruential generator  Generalized inversive congruential pseudorandom numbers   Notes  References      "  Category:Pseudorandom number generators  Category:Cryptography             