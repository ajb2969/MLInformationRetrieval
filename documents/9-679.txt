   Radial basis function network      Radial basis function network   In the field of mathematical modeling , a radial basis function network is an artificial neural network that uses radial basis functions as activation functions . The output of the network is a linear combination of radial basis functions of the inputs and neuron parameters. Radial basis function networks have many uses, including function approximation , time series prediction , classification , and system control . They were first formulated in a 1988 paper by Broomhead and Lowe, both researchers at the Royal Signals and Radar Establishment . 1 2 3  Network architecture  (Figure)  Figure 1: Architecture of a radial basis function network. An input vector   x   x   x   is used as input to all radial basis functions, each with different parameters. The output of the network is a linear combination of the outputs from radial basis functions.   Radial basis function (RBF) networks typically have three layers: an input layer, a hidden layer with a non-linear RBF activation function and a linear output layer. The input can be modeled as a vector of real numbers    𝐱  ∈   ℝ  n       𝐱   superscript  ℝ  n     \mathbf{x}\in\mathbb{R}^{n}   . The output of the network is then a scalar function of the input vector,    φ  :    ℝ  n   →  ℝ      normal-:  φ   normal-→   superscript  ℝ  n   ℝ     \varphi:\mathbb{R}^{n}\to\mathbb{R}   , and is given by       φ   (  𝐱  )    =    ∑   i  =  1   N     a  i   ρ   (   ||   𝐱  -   𝐜  i    ||   )           φ  𝐱     superscript   subscript     i  1    N      subscript  a  i   ρ   norm    𝐱   subscript  𝐜  i         \varphi(\mathbf{x})=\sum_{i=1}^{N}a_{i}\rho(||\mathbf{x}-\mathbf{c}_{i}||)     where   N   N   N   is the number of neurons in the hidden layer,    𝐜  i     subscript  𝐜  i    \mathbf{c}_{i}   is the center vector for neuron   i   i   i   , and    a  i     subscript  a  i    a_{i}   is the weight of neuron   i   i   i   in the linear output neuron. Functions that depend only on the distance from a center vector are radially symmetric about that vector, hence the name radial basis function. In the basic form all inputs are connected to each hidden neuron. The norm is typically taken to be the Euclidean distance (although the Mahalanobis distance appears to perform better in general) and the radial basis function is commonly taken to be Gaussian       ρ   (   ∥   𝐱  -   𝐜  i    ∥   )    =   exp   [   -   β    ∥   𝐱  -   𝐜  i    ∥   2     ]          ρ   norm    𝐱   subscript  𝐜  i            β   superscript   norm    𝐱   subscript  𝐜  i     2        \rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)=\exp\left[-\beta\left\|%
 \mathbf{x}-\mathbf{c}_{i}\right\|^{2}\right]   .  The Gaussian basis functions are local to the center vector in the sense that        lim    ||  x  ||   →  ∞     ρ   (   ∥   𝐱  -   𝐜  i    ∥   )     =  0        subscript    normal-→   norm  x        ρ   norm    𝐱   subscript  𝐜  i       0    \lim_{||x||\to\infty}\rho(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|)=0     i.e. changing parameters of one neuron has only a small effect for input values that are far away from the center of that neuron.  Given certain mild conditions on the shape of the activation function, RBF networks are universal approximators on a compact subset of    ℝ  n     superscript  ℝ  n    \mathbb{R}^{n}   . 4 This means that an RBF network with enough hidden neurons can approximate any continuous function with arbitrary precision.  The parameters    a  i     subscript  a  i    a_{i}   ,    𝐜  i     subscript  𝐜  i    \mathbf{c}_{i}   , and    β  i     subscript  β  i    \beta_{i}   are determined in a manner that optimizes the fit between   φ   φ   \varphi   and the data.  (Figure)  Figure 2: Two unnormalized radial basis functions in one input dimension. The basis function centers are located at     c  1   =  0.75       subscript  c  1   0.75    c_{1}=0.75   and     c  2   =  3.25       subscript  c  2   3.25    c_{2}=3.25   .   Normalized  Normalized architecture  In addition to the above unnormalized architecture, RBF networks can be normalized . In this case the mapping is       φ   (  𝐱  )      =  def       ∑   i  =  1   N     a  i   ρ   (   ∥   𝐱  -   𝐜  i    ∥   )       ∑   i  =  1   N    ρ   (   ∥   𝐱  -   𝐜  i    ∥   )      =    ∑   i  =  1   N     a  i   u   (   ∥   𝐱  -   𝐜  i    ∥   )           superscript   def     φ  𝐱       superscript   subscript     i  1    N      subscript  a  i   ρ   norm    𝐱   subscript  𝐜  i         superscript   subscript     i  1    N     ρ   norm    𝐱   subscript  𝐜  i               superscript   subscript     i  1    N      subscript  a  i   u   norm    𝐱   subscript  𝐜  i          \varphi(\mathbf{x})\ \stackrel{\mathrm{def}}{=}\ \frac{\sum_{i=1}^{N}a_{i}\rho%
 \big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)}{\sum_{i=1}^{N}\rho\big(%
 \left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)}=\sum_{i=1}^{N}a_{i}u\big(\left%
 \|\mathbf{x}-\mathbf{c}_{i}\right\|\big)   where       u   (   ∥   𝐱  -   𝐜  i    ∥   )      =  def      ρ   (   ∥   𝐱  -   𝐜  i    ∥   )      ∑   j  =  1   N    ρ   (   ∥   𝐱  -   𝐜  j    ∥   )          superscript   def     u   norm    𝐱   subscript  𝐜  i          ρ   norm    𝐱   subscript  𝐜  i        superscript   subscript     j  1    N     ρ   norm    𝐱   subscript  𝐜  j          u\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)\ \stackrel{\mathrm{def}}{=%
 }\ \frac{\rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)}{\sum_{j=1}^{N%
 }\rho\big(\left\|\mathbf{x}-\mathbf{c}_{j}\right\|\big)}     is known as a "normalized radial basis function".  Theoretical motivation for normalization  There is theoretical justification for this architecture in the case of stochastic data flow. Assume a stochastic kernel approximation for the joint probability density       P   (   𝐱  ∧  y   )    =    1  N      ∑   i  =  1   N     ρ   (   ∥   𝐱  -   𝐜  i    ∥   )   σ   (   |   y  -   e  i    |   )            P    𝐱  y        1  N     superscript   subscript     i  1    N     ρ   norm    𝐱   subscript  𝐜  i     σ      y   subscript  e  i          P\left(\mathbf{x}\land y\right)={1\over N}\sum_{i=1}^{N}\,\rho\big(\left\|%
 \mathbf{x}-\mathbf{c}_{i}\right\|\big)\,\sigma\big(\left|y-e_{i}\right|\big)     where the weights    𝐜  i     subscript  𝐜  i    \mathbf{c}_{i}   and    e  i     subscript  e  i    e_{i}   are exemplars from the data and we require the kernels to be normalized       ∫   ρ   (   ∥   𝐱  -   𝐜  i    ∥   )    d  n   𝐱    =  1          ρ   norm    𝐱   subscript  𝐜  i      superscript  d  n   𝐱    1    \int\rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)\,d^{n}\mathbf{x}=1   and       ∫   σ   (   |   y  -   e  i    |   )   d  y    =  1          σ      y   subscript  e  i     d  y    1    \int\sigma\big(\left|y-e_{i}\right|\big)\,dy=1   .  The probability densities in the input and output spaces are       P   (  𝐱  )    =   ∫   P   (   𝐱  ∧  y   )   d  y    =    1  N      ∑   i  =  1   N     ρ   (   ∥   𝐱  -   𝐜  i    ∥   )              P  𝐱       P    𝐱  y   d  y             1  N     superscript   subscript     i  1    N     ρ   norm    𝐱   subscript  𝐜  i           P\left(\mathbf{x}\right)=\int P\left(\mathbf{x}\land y\right)\,dy={1\over N}%
 \sum_{i=1}^{N}\,\rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)     and      The expectation of y given an input   𝐱   𝐱   \mathbf{x}   is      φ   (  𝐱  )     =  def    E   (  y  ∣  𝐱  )   =  ∫   y   P   (  y  ∣  𝐱  )   d  y     fragments  φ   fragments  normal-(  x  normal-)    superscript   def   E   fragments  normal-(  y  normal-∣  x  normal-)     y  P   fragments  normal-(  y  normal-∣  x  normal-)   d  y    \varphi\left(\mathbf{x}\right)\ \stackrel{\mathrm{def}}{=}\ E\left(y\mid%
 \mathbf{x}\right)=\int y\,P\left(y\mid\mathbf{x}\right)dy   where      P   (  y  ∣  𝐱  )      fragments  P   fragments  normal-(  y  normal-∣  x  normal-)     P\left(y\mid\mathbf{x}\right)   is the conditional probability of y given   𝐱   𝐱   \mathbf{x}   . The conditional probability is related to the joint probability through Bayes theorem      P   (  y  ∣  𝐱  )   =    P   (   𝐱  ∧  y   )     P   (  𝐱  )        fragments  P   fragments  normal-(  y  normal-∣  x  normal-)        P    𝐱  y      P  𝐱      P\left(y\mid\mathbf{x}\right)=\frac{P\left(\mathbf{x}\land y\right)}{P\left(%
 \mathbf{x}\right)}     which yields       φ   (  𝐱  )    =   ∫    y      P   (   𝐱  ∧  y   )     P   (  𝐱  )      d  y          φ  𝐱       y      P    𝐱  y      P  𝐱    d  y      \varphi\left(\mathbf{x}\right)=\int y\,\frac{P\left(\mathbf{x}\land y\right)}{%
 P\left(\mathbf{x}\right)}\,dy   .  This becomes       φ   (  𝐱  )    =     ∑   i  =  1   N     e  i   ρ   (   ∥   𝐱  -   𝐜  i    ∥   )       ∑   i  =  1   N    ρ   (   ∥   𝐱  -   𝐜  i    ∥   )      =    ∑   i  =  1   N     e  i   u   (   ∥   𝐱  -   𝐜  i    ∥   )             φ  𝐱       superscript   subscript     i  1    N      subscript  e  i   ρ   norm    𝐱   subscript  𝐜  i         superscript   subscript     i  1    N     ρ   norm    𝐱   subscript  𝐜  i               superscript   subscript     i  1    N      subscript  e  i   u   norm    𝐱   subscript  𝐜  i          \varphi\left(\mathbf{x}\right)=\frac{\sum_{i=1}^{N}e_{i}\rho\big(\left\|%
 \mathbf{x}-\mathbf{c}_{i}\right\|\big)}{\sum_{i=1}^{N}\rho\big(\left\|\mathbf{%
 x}-\mathbf{c}_{i}\right\|\big)}=\sum_{i=1}^{N}e_{i}u\big(\left\|\mathbf{x}-%
 \mathbf{c}_{i}\right\|\big)     when the integrations are performed.  Local linear models  It is sometimes convenient to expand the architecture to include local linear models. In that case the architectures become, to first order,       φ   (  𝐱  )    =    ∑   i  =  1   N     (    a  i   +    𝐛  i   ⋅   (   𝐱  -   𝐜  i    )     )   ρ   (   ∥   𝐱  -   𝐜  i    ∥   )           φ  𝐱     superscript   subscript     i  1    N        subscript  a  i    normal-⋅   subscript  𝐛  i     𝐱   subscript  𝐜  i      ρ   norm    𝐱   subscript  𝐜  i         \varphi\left(\mathbf{x}\right)=\sum_{i=1}^{N}\left(a_{i}+\mathbf{b}_{i}\cdot%
 \left(\mathbf{x}-\mathbf{c}_{i}\right)\right)\rho\big(\left\|\mathbf{x}-%
 \mathbf{c}_{i}\right\|\big)     and       φ   (  𝐱  )    =    ∑   i  =  1   N     (    a  i   +    𝐛  i   ⋅   (   𝐱  -   𝐜  i    )     )   u   (   ∥   𝐱  -   𝐜  i    ∥   )           φ  𝐱     superscript   subscript     i  1    N        subscript  a  i    normal-⋅   subscript  𝐛  i     𝐱   subscript  𝐜  i      u   norm    𝐱   subscript  𝐜  i         \varphi\left(\mathbf{x}\right)=\sum_{i=1}^{N}\left(a_{i}+\mathbf{b}_{i}\cdot%
 \left(\mathbf{x}-\mathbf{c}_{i}\right)\right)u\big(\left\|\mathbf{x}-\mathbf{c%
 }_{i}\right\|\big)     in the unnormalized and normalized cases, respectively. Here    𝐛  i     subscript  𝐛  i    \mathbf{b}_{i}   are weights to be determined. Higher order linear terms are also possible.  This result can be written       φ   (  𝐱  )    =    ∑   i  =  1    2  N      ∑   j  =  1   n     e   i  j     v   i  j     (   𝐱  -   𝐜  i    )            φ  𝐱     superscript   subscript     i  1      2  N      superscript   subscript     j  1    n      subscript  e    i  j     subscript  v    i  j      𝐱   subscript  𝐜  i         \varphi\left(\mathbf{x}\right)=\sum_{i=1}^{2N}\sum_{j=1}^{n}e_{ij}v_{ij}\big(%
 \mathbf{x}-\mathbf{c}_{i}\big)     where       e   i  j    =   {       a  i   ,       if  i   ∈   [  1  ,  N  ]          b   i  j    ,       if  i   ∈   [   N  +  1   ,   2  N   ]             subscript  e    i  j     cases   subscript  a  i       if  i    1  N     subscript  b    i  j        if  i      N  1     2  N        e_{ij}=\begin{cases}a_{i},&\mbox{if }i\in[1,N]\\
 b_{ij},&\mbox{if }i\in[N+1,2N]\end{cases}     and        v   i  j     (   𝐱  -   𝐜  i    )      =  def     {        δ   i  j    ρ   (   ∥   𝐱  -   𝐜  i    ∥   )    ,       if  i   ∈   [  1  ,  N  ]           (    x   i  j    -   c   i  j     )   ρ   (   ∥   𝐱  -   𝐜  i    ∥   )    ,       if  i   ∈   [   N  +  1   ,   2  N   ]            superscript   def      subscript  v    i  j      𝐱   subscript  𝐜  i      cases     subscript  δ    i  j    ρ   norm    𝐱   subscript  𝐜  i          if  i    1  N         subscript  x    i  j     subscript  c    i  j     ρ   norm    𝐱   subscript  𝐜  i          if  i      N  1     2  N        v_{ij}\big(\mathbf{x}-\mathbf{c}_{i}\big)\ \stackrel{\mathrm{def}}{=}\ \begin{%
 cases}\delta_{ij}\rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big),&\mbox%
 {if }i\in[1,N]\\
 \left(x_{ij}-c_{ij}\right)\rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|%
 \big),&\mbox{if }i\in[N+1,2N]\end{cases}     in the unnormalized case and        v   i  j     (   𝐱  -   𝐜  i    )      =  def     {        δ   i  j    u   (   ∥   𝐱  -   𝐜  i    ∥   )    ,       if  i   ∈   [  1  ,  N  ]           (    x   i  j    -   c   i  j     )   u   (   ∥   𝐱  -   𝐜  i    ∥   )    ,       if  i   ∈   [   N  +  1   ,   2  N   ]            superscript   def      subscript  v    i  j      𝐱   subscript  𝐜  i      cases     subscript  δ    i  j    u   norm    𝐱   subscript  𝐜  i          if  i    1  N         subscript  x    i  j     subscript  c    i  j     u   norm    𝐱   subscript  𝐜  i          if  i      N  1     2  N        v_{ij}\big(\mathbf{x}-\mathbf{c}_{i}\big)\ \stackrel{\mathrm{def}}{=}\ \begin{%
 cases}\delta_{ij}u\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big),&\mbox{if%
  }i\in[1,N]\\
 \left(x_{ij}-c_{ij}\right)u\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big),%
 &\mbox{if }i\in[N+1,2N]\end{cases}     in the normalized case.  Here    δ   i  j      subscript  δ    i  j     \delta_{ij}   is a Kronecker delta function defined as       δ   i  j    =   {      1  ,       if  i   =  j        0  ,       if  i   ≠  j            subscript  δ    i  j     cases  1      if  i   j   0      if  i   j      \delta_{ij}=\begin{cases}1,&\mbox{if }i=j\\
 0,&\mbox{if }i\neq j\end{cases}   .  Training  RBF networks are typically trained by a two-step algorithm. In the first step, the center vectors    𝐜  i     subscript  𝐜  i    \mathbf{c}_{i}   of the RBF functions in the hidden layer are chosen. This step can be performed in several ways; centers can be randomly sampled from some set of examples, or they can be determined using k-means clustering . Note that this step is unsupervised . A third backpropagation step can be performed to fine-tune all of the RBF net's parameters. 5  The second step simply fits a linear model with coefficients    w  i     subscript  w  i    w_{i}   to the hidden layer's outputs with respect to some objective function. A common objective function, at least for regression/function estimation, is the least squares function:       K   (  𝐰  )      =  def      ∑   t  =  1   ∞     K  t    (  𝐰  )         superscript   def     K  𝐰     superscript   subscript     t  1         subscript  K  t   𝐰      K(\mathbf{w})\ \stackrel{\mathrm{def}}{=}\ \sum_{t=1}^{\infty}K_{t}(\mathbf{w})   where        K  t    (  𝐰  )      =  def      [    y   (  t  )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]   2       superscript   def      subscript  K  t   𝐰    superscript   delimited-[]      y  t     φ     𝐱  t   𝐰      2     K_{t}(\mathbf{w})\ \stackrel{\mathrm{def}}{=}\ \big[y(t)-\varphi\big(\mathbf{x%
 }(t),\mathbf{w}\big)\big]^{2}   . We have explicitly included the dependence on the weights. Minimization of the least squares objective function by optimal choice of weights optimizes accuracy of fit.  There are occasions in which multiple objectives, such as smoothness as well as accuracy, must be optimized. In that case it is useful to optimize a regularized objective function such as       H   (  𝐰  )      =  def      K   (  𝐰  )    +   λ  S   (  𝐰  )       =  def      ∑   t  =  1   ∞     H  t    (  𝐰  )           superscript   def     H  𝐰       K  𝐰     λ  S  𝐰       superscript   def       superscript   subscript     t  1         subscript  H  t   𝐰       H(\mathbf{w})\ \stackrel{\mathrm{def}}{=}\ K(\mathbf{w})+\lambda S(\mathbf{w})%
 \ \stackrel{\mathrm{def}}{=}\ \sum_{t=1}^{\infty}H_{t}(\mathbf{w})     where       S   (  𝐰  )      =  def      ∑   t  =  1   ∞     S  t    (  𝐰  )         superscript   def     S  𝐰     superscript   subscript     t  1         subscript  S  t   𝐰      S(\mathbf{w})\ \stackrel{\mathrm{def}}{=}\ \sum_{t=1}^{\infty}S_{t}(\mathbf{w})     and        H  t    (  𝐰  )      =  def       K  t    (  𝐰  )    +   λ   S  t    (  𝐰  )         superscript   def      subscript  H  t   𝐰        subscript  K  t   𝐰     λ   subscript  S  t   𝐰      H_{t}(\mathbf{w})\ \stackrel{\mathrm{def}}{=}\ K_{t}(\mathbf{w})+\lambda S_{t}%
 (\mathbf{w})     where optimization of S maximizes smoothness and   λ   λ   \lambda   is known as a regularization parameter.  Interpolation  RBF networks can be used to interpolate a function    y  :    ℝ  n   →  ℝ      normal-:  y   normal-→   superscript  ℝ  n   ℝ     y:\mathbb{R}^{n}\to\mathbb{R}   when the values of that function are known on finite number of points      y   (   𝐱  i   )    =   b  i    ,   i  =   1  ,  …  ,  N       formulae-sequence      y   subscript  𝐱  i     subscript  b  i      i   1  normal-…  N      y(\mathbf{x}_{i})=b_{i},i=1,\ldots,N   . Taking the known points    𝐱  i     subscript  𝐱  i    \mathbf{x}_{i}   to be the centers of the radial basis functions and evaluating the values of the basis functions at the same points     g   i  j    =   ρ   (   ||    𝐱  j   -   𝐱  i    ||   )         subscript  g    i  j      ρ   norm     subscript  𝐱  j    subscript  𝐱  i        g_{ij}=\rho(||\mathbf{x}_{j}-\mathbf{x}_{i}||)   the weights can be solved from the equation        [      g  11      g  12     ⋯     g   1  N         g  21      g  22     ⋯     g   2  N        ⋮       ⋱    ⋮       g   N  1       g   N  2      ⋯     g   N  N       ]    [      w  1        w  2       ⋮       w  N      ]    =   [      b  1        b  2       ⋮       b  N      ]          delimited-[]     subscript  g  11    subscript  g  12   normal-⋯   subscript  g    1  N       subscript  g  21    subscript  g  22   normal-⋯   subscript  g    2  N      normal-⋮  absent  normal-⋱  normal-⋮     subscript  g    N  1     subscript  g    N  2    normal-⋯   subscript  g    N  N        delimited-[]     subscript  w  1      subscript  w  2     normal-⋮     subscript  w  N        delimited-[]     subscript  b  1      subscript  b  2     normal-⋮     subscript  b  N        \left[\begin{matrix}g_{11}&g_{12}&\cdots&g_{1N}\\
 g_{21}&g_{22}&\cdots&g_{2N}\\
 \vdots&&\ddots&\vdots\\
 g_{N1}&g_{N2}&\cdots&g_{NN}\end{matrix}\right]\left[\begin{matrix}w_{1}\\
 w_{2}\\
 \vdots\\
 w_{N}\end{matrix}\right]=\left[\begin{matrix}b_{1}\\
 b_{2}\\
 \vdots\\
 b_{N}\end{matrix}\right]     It can be shown that the interpolation matrix in the above equation is non-singular, if the points    𝐱  i     subscript  𝐱  i    \mathbf{x}_{i}   are distinct, and thus the weights   w   w   w   can be solved by simple linear algebra:      𝐰  =    𝐆   -  1    𝐛       𝐰     superscript  𝐆    1    𝐛     \mathbf{w}=\mathbf{G}^{-1}\mathbf{b}     Function approximation  If the purpose is not to perform strict interpolation but instead more general function approximation or classification the optimization is somewhat more complex because there is no obvious choice for the centers. The training is typically done in two phases first fixing the width and centers and then the weights. This can be justified by considering the different nature of the non-linear hidden neurons versus the linear output neuron.  Training the basis function centers  Basis function centers can be randomly sampled among the input instances or obtained by Orthogonal Least Square Learning Algorithm or found by clustering the samples and choosing the cluster means as the centers.  The RBF widths are usually all fixed to same value which is proportional to the maximum distance between the chosen centers.  Pseudoinverse solution for the linear weights  After the centers    c  i     subscript  c  i    c_{i}   have been fixed, the weights that minimize the error at the output are computed with a linear pseudoinverse solution:      𝐰  =    𝐆  +   𝐛       𝐰     superscript  𝐆    𝐛     \mathbf{w}=\mathbf{G}^{+}\mathbf{b}   , where the entries of G are the values of the radial basis functions evaluated at the points    x  i     subscript  x  i    x_{i}        g   j  i    =   ρ   (   ||    x  j   -   c  i    ||   )         subscript  g    j  i      ρ   norm     subscript  x  j    subscript  c  i        g_{ji}=\rho(||x_{j}-c_{i}||)   .  The existence of this linear solution means that unlike multi-layer perceptron (MLP) networks, RBF networks have a unique local minimum (when the centers are fixed).  Gradient descent training of the linear weights  Another possible training algorithm is gradient descent . In gradient descent training, the weights are adjusted at each time step by moving them in a direction opposite from the gradient of the objective function (thus allowing the minimum of the objective function to be found),       𝐰   (   t  +  1   )    =    𝐰   (  t  )    -   ν   d   d  𝐰     H  t    (  𝐰  )           𝐰    t  1        𝐰  t     ν    d    d  𝐰     subscript  H  t   𝐰      \mathbf{w}(t+1)=\mathbf{w}(t)-\nu\frac{d}{d\mathbf{w}}H_{t}(\mathbf{w})     where   ν   ν   \nu   is a "learning parameter."  For the case of training the linear weights,    a  i     subscript  a  i    a_{i}   , the algorithm becomes        a  i    (   t  +  1   )    =     a  i    (  t  )    +   ν   [    y   (  t  )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]   ρ   (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )            subscript  a  i     t  1         subscript  a  i   t     ν   delimited-[]      y  t     φ     𝐱  t   𝐰      ρ   norm      𝐱  t    subscript  𝐜  i         a_{i}(t+1)=a_{i}(t)+\nu\big[y(t)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)\big%
 ]\rho\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)     in the unnormalized case and        a  i    (   t  +  1   )    =     a  i    (  t  )    +   ν   [    y   (  t  )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]   u   (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )            subscript  a  i     t  1         subscript  a  i   t     ν   delimited-[]      y  t     φ     𝐱  t   𝐰      u   norm      𝐱  t    subscript  𝐜  i         a_{i}(t+1)=a_{i}(t)+\nu\big[y(t)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)\big%
 ]u\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)     in the normalized case.  For local-linear-architectures gradient-descent training is        e   i  j     (   t  +  1   )    =     e   i  j     (  t  )    +   ν   [    y   (  t  )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]    v   i  j     (    𝐱   (  t  )    -   𝐜  i    )            subscript  e    i  j      t  1         subscript  e    i  j    t     ν   delimited-[]      y  t     φ     𝐱  t   𝐰       subscript  v    i  j        𝐱  t    subscript  𝐜  i        e_{ij}(t+1)=e_{ij}(t)+\nu\big[y(t)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)%
 \big]v_{ij}\big(\mathbf{x}(t)-\mathbf{c}_{i}\big)     Projection operator training of the linear weights  For the case of training the linear weights,    a  i     subscript  a  i    a_{i}   and    e   i  j      subscript  e    i  j     e_{ij}   , the algorithm becomes        a  i    (   t  +  1   )    =     a  i    (  t  )    +   ν   [    y   (  t  )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]     ρ   (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )      ∑   i  =  1   N     ρ  2    (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )               subscript  a  i     t  1         subscript  a  i   t     ν   delimited-[]      y  t     φ     𝐱  t   𝐰          ρ   norm      𝐱  t    subscript  𝐜  i        superscript   subscript     i  1    N      superscript  ρ  2    norm      𝐱  t    subscript  𝐜  i            a_{i}(t+1)=a_{i}(t)+\nu\big[y(t)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)\big%
 ]\frac{\rho\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}{\sum_{i=1}^{%
 N}\rho^{2}\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}     in the unnormalized case and        a  i    (   t  +  1   )    =     a  i    (  t  )    +   ν   [    y   (  t  )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]     u   (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )      ∑   i  =  1   N     u  2    (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )               subscript  a  i     t  1         subscript  a  i   t     ν   delimited-[]      y  t     φ     𝐱  t   𝐰          u   norm      𝐱  t    subscript  𝐜  i        superscript   subscript     i  1    N      superscript  u  2    norm      𝐱  t    subscript  𝐜  i            a_{i}(t+1)=a_{i}(t)+\nu\big[y(t)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)\big%
 ]\frac{u\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}{\sum_{i=1}^{N}u%
 ^{2}\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}     in the normalized case and        e   i  j     (   t  +  1   )    =     e   i  j     (  t  )    +   ν   [    y   (  t  )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]      v   i  j     (    𝐱   (  t  )    -   𝐜  i    )      ∑   i  =  1   N     ∑   j  =  1   n     v   i  j   2    (    𝐱   (  t  )    -   𝐜  i    )                subscript  e    i  j      t  1         subscript  e    i  j    t     ν   delimited-[]      y  t     φ     𝐱  t   𝐰           subscript  v    i  j        𝐱  t    subscript  𝐜  i       superscript   subscript     i  1    N     superscript   subscript     j  1    n      superscript   subscript  v    i  j    2       𝐱  t    subscript  𝐜  i            e_{ij}(t+1)=e_{ij}(t)+\nu\big[y(t)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)%
 \big]\frac{v_{ij}\big(\mathbf{x}(t)-\mathbf{c}_{i}\big)}{\sum_{i=1}^{N}\sum_{j%
 =1}^{n}v_{ij}^{2}\big(\mathbf{x}(t)-\mathbf{c}_{i}\big)}     in the local-linear case.  For one basis function, projection operator training reduces to Newton's method .  (Figure)  Figure 6: Logistic map time series. Repeated iteration of the logistic map generates a chaotic time series. The values lie between zero and one. Displayed here are the 100 training points used to train the examples in this section. The weights c are the first five points from this time series.   Examples  Logistic map  The basic properties of radial basis functions can be illustrated with a simple mathematical map, the logistic map , which maps the unit interval onto itself. It can be used to generate a convenient prototype data stream. The logistic map can be used to explore function approximation , time series prediction , and control theory . The map originated from the field of population dynamics and became the prototype for chaotic time series. The map, in the fully chaotic regime, is given by       x   (   t  +  1   )      =  def     f   [   x   (  t  )    ]    =   4  x   (  t  )    [   1  -   x   (  t  )     ]          superscript   def     x    t  1      f   delimited-[]    x  t            4  x  t   delimited-[]    1    x  t         x(t+1)\ \stackrel{\mathrm{def}}{=}\ f\left[x(t)\right]=4x(t)\left[1-x(t)\right]     where t is a time index. The value of x at time t+1 is a parabolic function of x at time t. This equation represents the underlying geometry of the chaotic time series generated by the logistic map.  Generation of the time series from this equation is the forward problem . The examples here illustrate the inverse problem ; identification of the underlying dynamics, or fundamental equation, of the logistic map from exemplars of the time series. The goal is to find an estimate       x   (   t  +  1   )    =   f   [   x   (  t  )    ]    ≈   φ   (  t  )    =   φ   [   x   (  t  )    ]            x    t  1      f   delimited-[]    x  t            φ  t          φ   delimited-[]    x  t        x(t+1)=f\left[x(t)\right]\approx\varphi(t)=\varphi\left[x(t)\right]     for f.  Function approximation  Unnormalized radial basis functions  The architecture is  (Figure)  Figure 7: Unnormalized basis functions. The Logistic map (blue) and the approximation to the logistic map (red) after one pass through the training set.        φ   (  𝐱  )      =  def      ∑   i  =  1   N     a  i   ρ   (   ∥   𝐱  -   𝐜  i    ∥   )         superscript   def     φ  𝐱     superscript   subscript     i  1    N      subscript  a  i   ρ   norm    𝐱   subscript  𝐜  i         \varphi(\mathbf{x})\ \stackrel{\mathrm{def}}{=}\ \sum_{i=1}^{N}a_{i}\rho\big(%
 \left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)     where       ρ   (   ∥   𝐱  -   𝐜  i    ∥   )    =   exp   [   -   β    ∥   𝐱  -   𝐜  i    ∥   2     ]    =   exp   [   -   β    (    x   (  t  )    -   c  i    )   2     ]            ρ   norm    𝐱   subscript  𝐜  i            β   superscript   norm    𝐱   subscript  𝐜  i     2                 β   superscript      x  t    subscript  c  i    2         \rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)=\exp\left[-\beta\left\|%
 \mathbf{x}-\mathbf{c}_{i}\right\|^{2}\right]=\exp\left[-\beta\left(x(t)-c_{i}%
 \right)^{2}\right]   .  Since the input is a scalar rather than a vector , the input dimension is one. We choose the number of basis functions as N=5 and the size of the training set to be 100 exemplars generated by the chaotic time series. The weight   β   β   \beta   is taken to be a constant equal to 5. The weights    c  i     subscript  c  i    c_{i}   are five exemplars from the time series. The weights    a  i     subscript  a  i    a_{i}   are trained with projection operator training:        a  i    (   t  +  1   )    =     a  i    (  t  )    +   ν   [    x   (   t  +  1   )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]     ρ   (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )      ∑   i  =  1   N     ρ  2    (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )               subscript  a  i     t  1         subscript  a  i   t     ν   delimited-[]      x    t  1      φ     𝐱  t   𝐰          ρ   norm      𝐱  t    subscript  𝐜  i        superscript   subscript     i  1    N      superscript  ρ  2    norm      𝐱  t    subscript  𝐜  i            a_{i}(t+1)=a_{i}(t)+\nu\big[x(t+1)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)%
 \big]\frac{\rho\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}{\sum_{i=%
 1}^{N}\rho^{2}\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}     where the learning rate   ν   ν   \nu   is taken to be 0.3. The training is performed with one pass through the 100 training points. The rms error is 0.15.  (Figure)  Figure 8: Normalized basis functions. The Logistic map (blue) and the approximation to the logistic map (red) after one pass through the training set. Note the improvement over the unnormalized case.   Normalized radial basis functions  The normalized RBF architecture is       φ   (  𝐱  )      =  def       ∑   i  =  1   N     a  i   ρ   (   ∥   𝐱  -   𝐜  i    ∥   )       ∑   i  =  1   N    ρ   (   ∥   𝐱  -   𝐜  i    ∥   )      =    ∑   i  =  1   N     a  i   u   (   ∥   𝐱  -   𝐜  i    ∥   )           superscript   def     φ  𝐱       superscript   subscript     i  1    N      subscript  a  i   ρ   norm    𝐱   subscript  𝐜  i         superscript   subscript     i  1    N     ρ   norm    𝐱   subscript  𝐜  i               superscript   subscript     i  1    N      subscript  a  i   u   norm    𝐱   subscript  𝐜  i          \varphi(\mathbf{x})\ \stackrel{\mathrm{def}}{=}\ \frac{\sum_{i=1}^{N}a_{i}\rho%
 \big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)}{\sum_{i=1}^{N}\rho\big(%
 \left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)}=\sum_{i=1}^{N}a_{i}u\big(\left%
 \|\mathbf{x}-\mathbf{c}_{i}\right\|\big)   where       u   (   ∥   𝐱  -   𝐜  i    ∥   )      =  def      ρ   (   ∥   𝐱  -   𝐜  i    ∥   )      ∑   i  =  1   N    ρ   (   ∥   𝐱  -   𝐜  i    ∥   )          superscript   def     u   norm    𝐱   subscript  𝐜  i          ρ   norm    𝐱   subscript  𝐜  i        superscript   subscript     i  1    N     ρ   norm    𝐱   subscript  𝐜  i          u\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)\ \stackrel{\mathrm{def}}{=%
 }\ \frac{\rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)}{\sum_{i=1}^{N%
 }\rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)}   .  Again:       ρ   (   ∥   𝐱  -   𝐜  i    ∥   )    =   exp   [   -   β    ∥   𝐱  -   𝐜  i    ∥   2     ]    =   exp   [   -   β    (    x   (  t  )    -   c  i    )   2     ]            ρ   norm    𝐱   subscript  𝐜  i            β   superscript   norm    𝐱   subscript  𝐜  i     2                 β   superscript      x  t    subscript  c  i    2         \rho\big(\left\|\mathbf{x}-\mathbf{c}_{i}\right\|\big)=\exp\left[-\beta\left\|%
 \mathbf{x}-\mathbf{c}_{i}\right\|^{2}\right]=\exp\left[-\beta\left(x(t)-c_{i}%
 \right)^{2}\right]   .  Again, we choose the number of basis functions as five and the size of the training set to be 100 exemplars generated by the chaotic time series. The weight   β   β   \beta   is taken to be a constant equal to 6. The weights    c  i     subscript  c  i    c_{i}   are five exemplars from the time series. The weights    a  i     subscript  a  i    a_{i}   are trained with projection operator training:        a  i    (   t  +  1   )    =     a  i    (  t  )    +   ν   [    x   (   t  +  1   )    -   φ   (   𝐱   (  t  )    ,  𝐰  )     ]     u   (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )      ∑   i  =  1   N     u  2    (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )               subscript  a  i     t  1         subscript  a  i   t     ν   delimited-[]      x    t  1      φ     𝐱  t   𝐰          u   norm      𝐱  t    subscript  𝐜  i        superscript   subscript     i  1    N      superscript  u  2    norm      𝐱  t    subscript  𝐜  i            a_{i}(t+1)=a_{i}(t)+\nu\big[x(t+1)-\varphi\big(\mathbf{x}(t),\mathbf{w}\big)%
 \big]\frac{u\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}{\sum_{i=1}^%
 {N}u^{2}\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}\right\|\big)}     where the learning rate   ν   ν   \nu   is again taken to be 0.3. The training is performed with one pass through the 100 training points. The rms error on a test set of 100 exemplars is 0.084, smaller than the unnormalized error. Normalization yields accuracy improvement. Typically accuracy with normalized basis functions increases even more over unnormalized functions as input dimensionality increases.  (Figure)  Figure 9: Normalized basis functions. The Logistic map (blue) and the approximation to the logistic map (red) as a function of time. Note that the approximation is good for only a few time steps. This is a general characteristic of chaotic time series.   Time series prediction  Once the underlying geometry of the time series is estimated as in the previous examples, a prediction for the time series can be made by iteration:       φ   (  0  )    =   x   (  1  )          φ  0     x  1     \varphi(0)=x(1)          x   (  t  )    ≈   φ   (   t  -  1   )          x  t     φ    t  1      {x}(t)\approx\varphi(t-1)          x   (   t  +  1   )    ≈   φ   (  t  )    =   φ   [   φ   (   t  -  1   )    ]            x    t  1      φ  t          φ   delimited-[]    φ    t  1         {x}(t+1)\approx\varphi(t)=\varphi[\varphi(t-1)]   .  A comparison of the actual and estimated time series is displayed in the figure. The estimated times series starts out at time zero with an exact knowledge of x(0). It then uses the estimate of the dynamics to update the time series estimate for several time steps.  Note that the estimate is accurate for only a few time steps. This is a general characteristic of chaotic time series. This is a property of the sensitive dependence on initial conditions common to chaotic time series. A small initial error is amplified with time. A measure of the divergence of time series with nearly identical initial conditions is known as the Lyapunov exponent .  Control of a chaotic time series  We assume the output of the logistic map can be manipulated through a control parameter    c   [   x   (  t  )    ,  t  ]       c     x  t   t     c[x(t),t]   such that       x   (   t  +  1   )    =    4  x   (  t  )    [   1  -   x   (  t  )     ]    +   c   [   x   (  t  )    ,  t  ]           x    t  1        4  x  t   delimited-[]    1    x  t        c     x  t   t       {x}(t+1)=4x(t)[1-x(t)]+c[x(t),t]   .  The goal is to choose the control parameter in such a way as to drive the time series to a desired output    d   (  t  )       d  t    d(t)   . This can be done if we choose the control paramer to be       c   [   x   (  t  )    ,  t  ]      =  def      -   φ   [   x   (  t  )    ]     +   d   (   t  +  1   )         superscript   def     c     x  t   t          φ   delimited-[]    x  t        d    t  1       c[x(t),t]\ \stackrel{\mathrm{def}}{=}\ -\varphi[x(t)]+d(t+1)     where       y   [   x   (  t  )    ]    ≈   f   [   x   (  t  )    ]    =    x   (   t  +  1   )    -   c   [   x   (  t  )    ,  t  ]             y   delimited-[]    x  t       f   delimited-[]    x  t              x    t  1      c     x  t   t        y[x(t)]\approx f[x(t)]=x(t+1)-c[x(t),t]     is an approximation to the underlying natural dynamics of the system.  The learning algorithm is given by        a  i    (   t  +  1   )    =     a  i    (  t  )    +   ν  ε    u   (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )      ∑   i  =  1   N     u  2    (   ∥    𝐱   (  t  )    -   𝐜  i    ∥   )               subscript  a  i     t  1         subscript  a  i   t     ν  ε      u   norm      𝐱  t    subscript  𝐜  i        superscript   subscript     i  1    N      superscript  u  2    norm      𝐱  t    subscript  𝐜  i            a_{i}(t+1)=a_{i}(t)+\nu\varepsilon\frac{u\big(\left\|\mathbf{x}(t)-\mathbf{c}_%
 {i}\right\|\big)}{\sum_{i=1}^{N}u^{2}\big(\left\|\mathbf{x}(t)-\mathbf{c}_{i}%
 \right\|\big)}     where       ε     =  def      f   [   x   (  t  )    ]    -   φ   [   x   (  t  )    ]     =    x   (   t  +  1   )    -   c   [   x   (  t  )    ,  t  ]    -   φ   [   x   (  t  )    ]     =    x   (   t  +  1   )    -   d   (   t  +  1   )           superscript   def   ε      f   delimited-[]    x  t       φ   delimited-[]    x  t               x    t  1      c     x  t   t      φ   delimited-[]    x  t               x    t  1      d    t  1        \varepsilon\ \stackrel{\mathrm{def}}{=}\ f[x(t)]-\varphi[x(t)]=x(t+1)-c[x(t),t%
 ]-\varphi[x(t)]=x(t+1)-d(t+1)   .  See also   Radial basis function kernel  In Situ Adaptive Tabulation  Predictive analytics  Chaos theory   References   J. Moody and C. J. Darken, "Fast learning in networks of locally tuned processing units," Neural Computation, 1, 281-294 (1989). Also see Radial basis function networks according to Moody and Darken  T. Poggio and F. Girosi, "Networks for approximation and learning," Proc. IEEE 78(9), 1484-1487 (1990).  Roger D. Jones , Y. C. Lee, C. W. Barnes, G. W. Flake, K. Lee, P. S. Lewis, and S. Qian, ? Function approximation and time series prediction with neural networks ,? Proceedings of the International Joint Conference on Neural Networks, June 17–21, p. I-649 (1990).    John R. Davies, Stephen V. Coggeshall, Roger D. Jones , and Daniel Schutzer, "Intelligent Security Systems," in   S. Chen, C. F. N. Cowan, and P. M. Grant, "Orthogonal Least Squares Learning Algorithm for Radial Basis Function Networks", IEEE Transactions on Neural Networks, Vol 2, No 2 (Mar) 1991.   "  Category:Artificial neural networks  Category:Computational statistics  Category:Classification algorithms  Category:Machine learning algorithms  Category:Regression analysis     ↩  ↩   ↩  ↩     