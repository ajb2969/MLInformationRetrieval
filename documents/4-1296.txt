   Residue numeral system      Residue numeral system   A residue numeral system ( RNS ) represents a large integer using a set of smaller integers, so that computation may be performed more efficiently. It relies on the Chinese remainder theorem of modular arithmetic for its operation, a mathematical idea from Sun Tsu Suan-Ching (Master Sun’s Arithmetic Manual) in the 4th century AD.  Practical applications  RNS have applications in the field of digital  computer arithmetic . By decomposing in this a large integer into a set of smaller integers, a large calculation can be performed as a series of smaller calculations that can be performed independently and in parallel.  Defining a residue numeral system  A residue numeral system is defined by a set of N integer constants,   { m 1 , m 2 , m 3 , ... , m N },   referred to as the moduli . Let M be the least common multiple of all the m i .  Any arbitrary integer X smaller than M can be represented in the defined residue numeral system as a set of N smaller integers   { x 1 , x 2 , x 3 , ... , x N }   with   x i = X  modulo  m i    representing the residue class of X to that modulus.  Note that for maximum representational efficiency it is imperative that all the moduli are pairwise coprime ; that is, no modulus may have a common factor with any other. M is then the product of all the m i .  For example RNS(4|2) has non-coprime moduli, with an LCM of 4, and a product of 8, resulting in the same representation for different values smaller than the produt. 1  (3)decimal = (3|1) RNS(4|2)  (7)decimal = (3|1) RNS(4|2)  Operations on RNS numbers  Once represented in RNS, many arithmetic operations can be efficiently performed on the encoded integer. For the following operations, consider two integers, A and B , represented by a i and b i in an RNS system defined by m i (for i from 0 ≤ i ≤ N ).  Addition and subtraction  Addition (or subtraction) can be accomplished by simply adding (or subtracting) the small integer values, modulo their specific moduli. That is,      C  =    A  ±  B   mod  M       C   modulo   plus-or-minus  A  B   M     C=A\pm B\mod M   can be calculated in RNS as       c  i   =     a  i   ±   b  i    mod   m  i         subscript  c  i    modulo   plus-or-minus   subscript  a  i    subscript  b  i     subscript  m  i      c_{i}=a_{i}\pm b_{i}\mod m_{i}     One does not have to check for overflow in these operations.  Multiplication  Multiplication can be accomplished in a manner similar to addition and subtraction. To calculate       C  =    A  ⋅  B   mod  M    ,      C   modulo   normal-⋅  A  B   M     C=A\cdot B\mod M,   we can calculate:       c  i   =     a  i   ⋅   b  i    mod   m  i         subscript  c  i    modulo   normal-⋅   subscript  a  i    subscript  b  i     subscript  m  i      c_{i}=a_{i}\cdot b_{i}\mod m_{i}   Again overflows are not possible.  Division  Division in residue numeral systems is problematic. A paper describing one possible algorithm is available at 1 . On the other hand, if B is coprime with M (that is     b  i   ≠  0       subscript  b  i   0    b_{i}\not=0   ) then      C  =    A  ⋅   B   -  1     mod  M       C   modulo   normal-⋅  A   superscript  B    1     M     C=A\cdot B^{-1}\mod M   can be easily calculated by       c  i   =     a  i   ⋅   b  i   -  1     mod   m  i         subscript  c  i    modulo   normal-⋅   subscript  a  i    superscript   subscript  b  i     1      subscript  m  i      c_{i}=a_{i}\cdot b_{i}^{-1}\mod m_{i}   where    B   -  1      superscript  B    1     B^{-1}   is multiplicative inverse of B modulo M , and    b  i   -  1      superscript   subscript  b  i     1     b_{i}^{-1}   is multiplicative inverse of    b  i     subscript  b  i    b_{i}   modulo    m  i     subscript  m  i    m_{i}   .  Integer factorization  The RNS can improve efficiency of trial division . Let    X  =   Y  ⋅  Z       X   normal-⋅  Y  Z     X=Y\cdot Z   a semiprime . Let      m  1   =  2   ,     m  2   =  3   ,    m  3   =   5  ,  …        formulae-sequence     subscript  m  1   2    formulae-sequence     subscript  m  2   3      subscript  m  3    5  normal-…       m_{1}=2,m_{2}=3,m_{3}=5,\dots   represent first N primes. Assume that    Y  >   m  N       Y   subscript  m  N     Y>m_{N}   ,    Z  >   m  N       Z   subscript  m  N     Z>m_{N}   . Then     x  i   =    y  i   ⋅   z  i         subscript  x  i    normal-⋅   subscript  y  i    subscript  z  i      x_{i}=y_{i}\cdot z_{i}   , where     x  i   ≠  0       subscript  x  i   0    x_{i}\not=0   . The method of trial division is the method of exhaustion, and the RNS automatically eliminates all Y and Z such that     y  i   =  0       subscript  y  i   0    y_{i}=0   or     z  i   =  0       subscript  z  i   0    z_{i}=0   , that is we only need to check        ∏   i  =  1   N    (    m  i   -  1   )    =   M    ∏   i  =  1   N    (   1  -   1   m  i     )           superscript   subscript  product    i  1    N      subscript  m  i   1      M    superscript   subscript  product    i  1    N     1    1   subscript  m  i         \prod_{i=1}^{N}(m_{i}-1)=M\prod_{i=1}^{N}\left(1-\frac{1}{m_{i}}\right)   numbers below M . For example, N = 3, the RNS can automatically eliminate all numbers but   1,7,11,13,17,19,23,29 mod 30   or 73% of numbers. For N = 25 when    m  i     subscript  m  i    m_{i}   are all prime numbers below 100, the RNS eliminates about 88% of numbers. One can see from the above formula the diminishing returns from the larger sets of moduli.  Associated mixed radix system  A numeral given by    {   x  1   ,   x  2   ,   x  3   ,  …  ,   x  n   }      subscript  x  1    subscript  x  2    subscript  x  3   normal-…   subscript  x  n     \{x_{1},x_{2},x_{3},\ldots,x_{n}\}   in the RNS can be naturally represented in the associated mixed radix system (AMRS)       X  =    ∑   i  =  1   N     x  i    M   i  -  1      =    x  1   +    m  1    (    x  2   +    m  2    (   ⋯  +    m   N  -  1     x  N     )   ⋯    )      ,        X    superscript   subscript     i  1    N      subscript  x  i    subscript  M    i  1              subscript  x  1      subscript  m  1      subscript  x  2      subscript  m  2     normal-⋯     subscript  m    N  1     subscript  x  N     normal-⋯         X=\sum_{i=1}^{N}x_{i}M_{i-1}=x_{1}+m_{1}(x_{2}+m_{2}(\cdots+m_{N-1}x_{N})%
 \cdots),   where        M  0   =  1   ,    M  i   =    ∏   j  =  1   i    m  j        formulae-sequence     subscript  M  0   1      subscript  M  i     superscript   subscript  product    j  1    i    subscript  m  j       M_{0}=1,M_{i}=\prod_{j=1}^{i}m_{j}   for    i  >  0      i  0    i>0   and $0\leq x_i Note that after conversion from the RNS to AMRS, the comparison of numbers becomes straightforward.
 
 ==See also==
 * [[Covering system]]
 * [[Reduced residue system]]
 
 ==References== * [http://hal-lirmm.ccsd.cnrs.fr/docs/00/10/64/70/PDF/D547.PDF Efﬁcient RNS bases for Cryptography]  // IMACS'05: World Congress: Scientific ComputationApplied Mathematics and Simulation. 2005.
 [[Category:Modular arithmetic]]
 [[Category:Computer arithmetic]]" $     Parhami, Computer Arithmetic, Algorithms and Hardware Design ↩     