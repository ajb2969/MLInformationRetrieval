   Complement (set theory)      Complement (set theory)   In set theory , a complement of a set A refers to things not in (that is, things outside of) A . The relative complement of A with respect to a set B is the set of elements in B but not in A . When all sets under consideration are considered to be subsets of a given set U , the absolute complement of A is the set of all elements in U but not in A .  Relative complement  If A and B are sets , then the relative complement of A in B , 1 also termed the set-theoretic difference of B and A , 2 is the set of elements in B , but not in A .  (Figure)  The relative complement of A (left circle) in B (right circle):     B  ∩   A  c    =   B  ∖  A        B   superscript  A  c       B  A     B\cap A^{c}~{}~{}~{}~{}=~{}~{}~{}~{}B\setminus A      The relative complement of A in B is denoted  according to the ISO 31-11 standard (sometimes written , but this notation is ambiguous, as in some contexts it can be interpreted as the set of all , where b is taken from B and a from A ).  Formally        B  ∖  A   =   {   x  ∈   B    |   x  ∉  A   }    .        B  A    conditional-set    x  B     x  A      B\setminus A=\{x\in B\,|\,x\notin A\}.     Examples:  :* {1,2,3} ∖ {2,3,4}   =   {1}  :* {2,3,4} ∖ {1,2,3}   =   {4}  :* If   ℝ   ℝ   \mathbb{R}   is the set of real numbers and   ℚ   ℚ   \mathbb{Q}   is the set of rational numbers , then     ℝ  ∖  ℚ   =  𝕀        ℝ  ℚ   𝕀    \mathbb{R}\setminus\mathbb{Q}=\mathbb{I}   is the set of irrational numbers .  The following lists some notable properties of relative complements in relation to the set-theoretic operations of union and intersection .  If A , B , and C are sets, then the following identities hold:  :* C ∖ ( A ∩ B )  =  ( C ∖ A )∪( C ∖ B )  :* C ∖ ( A ∪ B )  =  ( C ∖ A )∩( C ∖ B )  :* C ∖ ( B ∖ A )  =  ( C ∩ A )∪( C ∖ B )  [ Alternately written: A ∖ ( B ∖ C )  =  ( A ∖ B )∪( A ∩ C ) ]  :* ( B ∖ A ) ∩ C =  ( B ∩ C ) ∖ A = B ∩( C ∖ A )  :* ( B ∖ A ) ∪ C =  ( B ∪ C ) ∖ ( A ∖ C )  :* A ∖ A =  Ø  :* Ø ∖ A =  Ø  :* A ∖ Ø  = A  Absolute complement  (Figure)  The absolute complement of   A   A   A   in   U   U   U   :     A  c   =   U  ∖  A        superscript  A  c     U  A     A^{c}=U\setminus A      If a universe  U is defined, then the relative complement of A in U is called the absolute complement (or simply complement ) of A , and is denoted by A c or sometimes A ′. The same set often 3 is denoted by     ∁  U   A       subscript  complement  U   A    \complement_{U}A   or    ∁  A      complement  A    \complement A   if U is fixed, that is:   A c = U ∖ A .   For example, if the universe is the set of integers , then the complement of the set of odd numbers is the set of even numbers.  The following lists some important properties of absolute complements in relation to the set-theoretic operations of union and intersection .  If A and B are subsets of a universe  U , then the following identities hold:   De Morgan's laws : 4  :*       (   A  ∪  B   )   c   =    A  c   ∩   B  c     .       superscript    A  B   c      superscript  A  c    superscript  B  c      \left(A\cup B\right)^{c}=A^{c}\cap B^{c}.     :*       (   A  ∩  B   )   c   =    A  c   ∪   B  c     .       superscript    A  B   c      superscript  A  c    superscript  B  c      \left(A\cap B\right)^{c}=A^{c}\cup B^{c}.      Complement laws: 5  :*      A  ∪   A  c    =  U   .        A   superscript  A  c    U    A\cup A^{c}=U.     :*      A  ∩   A  c    =    .        A   superscript  A  c    absent    A\cap A^{c}=.     :*     =    c   U  .     fragments   superscript   c   U  normal-.    {}^{c}=U.     :*      U  c   =    .       superscript  U  c   absent    U^{c}=.     :*      If  A   ⊂   B  , then   B  c    ⊂   A  c    .          If  A     B  , then   superscript  B  c          superscript  A  c      \text{If }A\subset B\text{, then }B^{c}\subset A^{c}.     :*: (this follows from the equivalence of a conditional with its contrapositive )   Involution or double complement law: :*       (   A  c   )   c   =  A   .       superscript   superscript  A  c   c   A    \left(A^{c}\right)^{c}=A.      Relationships between relative and absolute complements: :* A ∖ B = A ∩ B c  :* ( A ∖ B ) c = A c ∪ B    The first two complement laws above shows that if A is a non-empty, proper subset of U , then { A , A c } is a partition of U .  Notation  In the LaTeX typesetting language, the command \setminus 6 is usually used for rendering a set difference symbol, which is similar to a backslash symbol. When rendered the \setminus command looks identical to \backslash except that it has a little more space in front and behind the slash, akin to the LaTeX sequence \mathbin{\backslash} . A variant \smallsetminus is available in the amssymb package.  Complements in various programming languages  Some programming languages allow for manipulation of sets as data structures , using these operators or functions to construct the difference of sets a and b :   .NET Framework  a.Except(b);     C++  set_difference(a.begin(), a.end(), b.begin(), b.end(), result.begin());     Clojure  (clojure.set/difference a b) 7     Common Lisp  set-difference, nset-difference 8     F#  Set.difference a b 9    or   a - b 10     Falcon  diff = a - b 11     Haskell  difference a b   a \\ b 12     Java  diff = a.clone();  diff.removeAll(b); 13     Julia  setdiff 14     Mathematica  Complement 15     MATLAB  setdiff 16     OCaml  Set.S.diff 17     Octave  setdiff 18     Pascal  SetDifference := a - b;     Perl 5  #for perl version >= 5.10   @a = grep {not $_ ~~ @b} @a;     Perl 6  $A ∖ $B   $A (-) $B # texas version     PHP  array_diff($a, $b); 19     Prolog  a(X),\+ b(X).     Python  diff = a.difference(b) 20   diff = a - b 21     R  setdiff 22     Racket  (set-subtract a b) 23     Ruby  diff = a - b 24     Scala  a.diff(b) 25    or   a -- b 26     Smalltalk ( Pharo )  a difference: b     SQL  SELECT * FROM A   EXCEPT SELECT * FROM B    Unix shell  comm -23 a b 27   grep -vf b a # less efficient, but works with small unsorted sets   See also   Algebra of sets  Naive set theory  Symmetric difference   References         External links      "  Category:Basic concepts in set theory  Category:Binary operations     Halmos (1960) p.17 ↩  Devlin (1979) p.6 ↩  Bourbaki p. E II.6 ↩    1 The Comprehensive LaTeX Symbol List ↩  2 clojure.set API reference ↩  Common Lisp HyperSpec, Function set-difference, nset-difference . Accessed on September 8, 2009. ↩  [ https://msdn.microsoft.com/en-us/library/ee340332.aspx , Set.difference Function (F#)]. Accessed on July 12, 2015. ↩  [ https://msdn.microsoft.com/en-us/library/ee353414.aspx , Set.( - ) Method (F#)]. Accessed on July 12, 2015. ↩  [ http://falconpl.org/index.ftd?page_id=sitewiki&prj;_id=_falcon_site&sid; ;=wiki&pwid;=Survival%20Guide&wid;=Survival%3ABasic+Structures#Arrays, Array subtraction, data structures]. Accessed on July 28, 2014. ↩  Data.Set (Haskell) ↩  Set (Java 2 Platform SE 5.0) . JavaTM 2 Platform Standard Edition 5.0 API Specification , updated in 2004. Accessed on February 13, 2008. ↩  3 . The Standard Library--Julia Language documentation. Accessed on September 24, 2014 ↩  Complement . Mathematica Documentation Center for version 6.0, updated in 2008. Accessed on March 7, 2008. ↩  Setdiff . MATLAB Function Reference for version 7.6, updated in 2008. Accessed on May 19, 2008. ↩  Set.S (OCaml) . ↩  4 . GNU Octave Reference Manual ↩  PHP: array_diff , PHP Manual ↩  5 . Python v2.7.3 documentation . Accessed on January 17, 2013. ↩   R Reference manual p. 410 . ↩  [ http://docs.racket-lang.org/reference/sets.html?q=set-subtract#%28def._%28%28lib._racket%2Fset ..rkt%29._set-subtract%29%29]. The Racket Reference . Accessed on May 19, 2015. ↩  Class: Array Ruby Documentation ↩  [ http://www.scala-lang.org/api/current/index.html#scala.collection.Set , scala.collection.Set]. Scala Standard Library 2.11.7, Accessed on July 12, 2015. ↩  [ http://www.scala-lang.org/api/current/index.html#scala.collection.Set , scala.collection.Set]. Scala Standard Library 2.11.7, Accessed on July 12, 2015. ↩  comm(1) , Unix Seventh Edition Manual, 1979. ↩     