   Cyrus–Beck algorithm      Cyrus–Beck algorithm   The Cyrus–Beck algorithm is a generalized line clipping algorithm. It was designed to be more efficient than the Sutherland–Cohen algorithm which uses repetitive clipping. 1 Cyrus–Beck is a general algorithm and can be used with a convex polygon clipping window unlike Sutherland-Cohen that can be used only on a rectangular clipping area.  Here the parametric equation of a line in the view plane is:         p   (  t  )      =      t   p  1    +    (   1  -  t   )    p  0          =      p  0   +   t   (    p  1   -   p  0    )             p  t        t   subscript  p  1        1  t    subscript  p  0        missing-subexpression       subscript  p  0     t     subscript  p  1    subscript  p  0         \begin{aligned}\displaystyle p(t)&\displaystyle=&\displaystyle tp_{1}+(1-t)p_{%
 0}\\
 &\displaystyle=&\displaystyle p_{0}+t(p_{1}-p_{0})\end{aligned}     where    0  ≤  t  ≤  1        0  t       1     0\leq t\leq 1   .  Now to find intersection point with the clipping window we calculate value of dot product. Let p E be a point on the clipping plane E .  Calculate    n  ⋅   (    p   (  t  )    -   p  E    )      normal-⋅  n      p  t    subscript  p  E      n\cdot(p(t)-p_{E})   .    if > 0 vector pointed towards interior  if = 0 vector pointed parallel to plane containing p   if < 0 vector pointed away from interior     Here n stands for normal of the current clipping plane (pointed away from interior).  By this we select the point of intersection of line and clipping window where (dot product = 0 ) and hence clip the line.  Notes  1] Sutherland-Cohen can be used only on a rectangular clipping area.  2] Cyrus–Beck is a general algorithm and can be used with a convex polygon clipping window.  p(t) = p0 + t(p1-p0)        /* it's parametric function */  3] if > 0 ; vector says p(t) is OUTSIDE && A  90 degree.  if = 0 ; vector says p(t) is on edge E .. here outer normal edge is perpendicular to the E and p(t)-B  .. we will writing here a function code for it as given below :  /*    if( DtProd (N,P(t)-B) > 0)  {  p(t) OUTER & A 90 degree ;    /* P(t) is INSIDE ..    }  else( DtProd (N,P(t)-B) = 0)  {  p(t) lies on to the edge E ;    /* where outer normal edge N would be perpendicular to both E and p(t)-B..    }  */  See also  Algorithms used for the same purpose:   Cohen-Sutherland  Liang-Barsky  Nicholl–Lee–Nicholl  Fast-clipping   References in other media:   Tron: Uprising   References   Mike Cyrus, Jay Beck. "Generalized two- and three-dimensional clipping". Computers & Graphics, 1978: 23-28.  James D. Foley. Computer graphics: principles and practice . Addison-Wesley Professional, 1996. p. 117.   External links   http://cs1.bradley.edu/public/jcm/cs535CyrusBeck.html  http://softsurfer.com/Archive/algorithm_0111/algorithm_0111.htm   "  Category:Clipping (computer graphics)  Category:Articles created via the Article Wizard     "Clipping" (presentation) ↩     