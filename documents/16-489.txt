   Biogeography-based optimization      Biogeography-based optimization  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     Biogeography-based optimization (BBO) is an evolutionary algorithm (EA) that optimizes a function by stochastically and iteratively improving candidate solutions with regard to a given measure of quality, or fitness function . BBO belongs to the class of metaheuristics since it includes many variations, and since it does not make any assumptions about the problem and can therefore be applied to a wide class of problems.  BBO is typically used to optimize multidimensional real-valued functions, but it does not use the gradient of the function, which means that it does not require the function to be differentiable as required by classic optimization methods such as gradient descent and quasi-newton methods . BBO can therefore be used on dis continuous functions .  BBO optimizes a problem by maintaining a population of candidate solutions, and creating new candidate solutions by combining existing ones according to a simple formula. In this way the objective function is treated as a black box that merely provides a measure of quality given a candidate solution, and the function's gradient is not needed.  Like many EAs, BBO was motivated by a natural process; in particular, BBO was motivated by biogeography , which is the study of the distribution of biological species through time and space. 1 BBO was originally introduced by Dan Simon in 2008. 2  Underlying principles  Mathematical models of biogeography describe speciation (the evolution of new species ), the migration of species (animals, fish, birds, or insects) between islands, and the extinction of species. 3 Islands that are friendly to life are said to have a high habitat suitability index (HSI). 4 Features that correlate with HSI include rainfall, vegetative diversity, topographic diversity, land area, temperature, and others. The features that determine are called suitability index variables (SIVs). In terms of habitability, SIVs are the independent variables and HSI is the dependent variable.  Islands with a high HSI can support many species, and islands with a low HSI can support only a few species. Islands with a high HSI have many species that emigrate to nearby habitats because of the large populations and the large numbers of species that they host. Note that emigration from an island with a high HSI does not occur because species want to leave their home; after all, their home island is an attractive place to live. Emigration occurs because of the accumulation of random effects on a large number of species with large populations. Emigration occurs as animals ride flotsam , swim, fly, or ride the wind to neighboring islands. When a species emigrates from an island, it does not mean that the species completely disappears from its original island; only a few representatives emigrate, so an emigrating species remains present on its original island while at the same time migrating to a neighboring island. However, in BBO it is assumed that emigration from an island results in extinction from that island. This assumption is necessary in BBO because species represent the independent variables of a function, and each island represents a candidate solution to a function optimization problem.  Islands with a high HSI not only have a high emigration rate, but they also have a low immigration rate because they already support many species. Species that migrate to such islands will tend to die in spite of the island's high HSI, because there is too much competition for resources from other species.  Islands with a low HSI have a high immigration rate because of their low populations. Again, this is not because species want to immigrate to such islands; after all, these islands are undesirable places to live. The reason that immigration occurs to these islands is because there is a lot of room for additional species. Whether or not the immigrating species can survive in its new home, and for how long, is another question. However, species diversity is correlated with HSI, so when more species arrive at a low HSI island, the island's HSI will tend to increase. 5  The figure on the right illustrates an island migration model. 6 The immigration rate   λ   λ   \lambda   and the emigration rate   μ   μ   \mu   are functions of the number of species on the island. The maximum possible immigration rate   I   I   I   occurs when there are zero species on the island. As the number of species increases, the island becomes more crowded, fewer species are able to survive immigration, and the immigration rate decreases. The largest possible number of species that the habitat can support is    S  max     subscript  S     S_{\max}   , at which point the immigration rate is zero. If there are no species on the island, then the emigration rate is zero. As the number of species on the island increases, it becomes more crowded, more species representatives are able to leave the island, and the emigration rate increases. When the island contains the largest number of possible species    S  max     subscript  S     S_{\max}   , the emigration rate reaches its maximum possible value   E   E   E   .  (Figure)  Model of immigration   λ   λ   \lambda   and emigration   μ   μ   \mu   probabilities.    S  0     subscript  S  0    S_{0}   is the equilibrium species count, and    S  max     subscript  S     S_{\max}   is the maximum number of species that the island can support.   I   I   I   and   E   E   E   are the maximum immigration and emigration rates, respectively.   In BBO,    λ  k     subscript  λ  k    \lambda_{k}   is the probability that a given independent variable in the   k   k   k   -th candidate solution will be replaced; that is,    λ  k     subscript  λ  k    \lambda_{k}   is the immigration probability of    x  k     subscript  x  k    x_{k}   . If an independent variable is to be replaced, then the emigrating candidate solution is chosen with a probability that is proportional to the emigration probability    μ  k     subscript  μ  k    \mu_{k}   . This is usually performed using roulette wheel selection .         \text{Prob}(x_j)\text{ is selected for emigration} = \frac{\mu_j}{\sum_{i=1}^N \mu_i}  for    j  =   1  ,  ⋯  ,  N       j   1  normal-⋯  N     j=1,\cdots,N   , where   N   N   N   is the number of candidate solutions in the population.  Algorithm  Like most other EAs, BBO includes mutation . A basic BBO algorithm with a population size of   N   N   N   for optimizing an   n   n   n   -dimensional function can be described as follows. Initialize a population of N candidate solutions \{ x_k \} While not(termination criterion)
      For each x_k , set emigration probability \mu_k \propto fitness of x_k ,
         with \mu_k \in [0,1] For each x_k , set immigration probability \lambda_k = 1 - \mu_k  \{ z_k \} \leftarrow \{ x_k \} For each individual z_k (k=1,\cdots,N) For each independent variable index s \in [1,n] Use \lambda_k to probabilistically decide whether to immigrate to z_k If immigrating then
               Use \{ \mu_i \} to probabilistically select the emigrating individual x_j  z_k(s) \leftarrow x_j(s) End if
         Next independent variable index: s \leftarrow s+1 Probabilistically mutate z_k Next individual: k \leftarrow k+1  \{ x_k \} \leftarrow \{ z_k \} Next generation  Discussion of the BBO algorithm   The population size   N   N   N   is a tuning parameter. If   N   N   N   is too small or too large, then the optimization performance of BBO will suffer. Typical implementations of BBO use a value of   N   N   N   somewhere between 20 and 200.  The initial population of candidate solutions     {   x  k   }    k  =  1   N     superscript   subscript    subscript  x  k      k  1    N    \{x_{k}\}_{k=1}^{N}   is usually generated randomly. However, it could be generated in a problem-dependent way based on some reasonable guesses or previously-known good solutions to the optimization problem.  The termination criterion is problem-dependent, like in any other EA. In most applications the termination criterion is a generation count limit or a function evaluation limit (that is, how often the objective function is evaluated).      {   z  k   }      subscript  z  k     \{z_{k}\}   is a temporary population so that all emigrating variables can originate from the population that is in place at the beginning of the generation, which is    {   x  k   }      subscript  x  k     \{x_{k}\}   .   Algorithmic variations  Many variations have been proposed to the basic BBO algorithm, among which are the following.   Elitism is implemented in most EAs to make sure that the best candidate solution is not lost from one generation to the next. This can be implemented in a variety of ways, but one common way is to save the best candidate solutions at the beginning of each generation in a set   𝔼   𝔼   \mathbb{E}   ; then replace the worst candidate solutions with   𝔼   𝔼   \mathbb{E}   at the end of the generation, after migration and mutation have completed. The size of   𝔼   𝔼   \mathbb{E}   is a tuning parameter, but   𝔼   𝔼   \mathbb{E}   typically includes the best two individuals. Elitism was originally proposed for genetic algorithms by DeJong. 7 Elitism can make a significant difference in the performance of BBO, and is highly recommended.  Duplicate replacement is often implemented in BBO. This is a procedure at the end of each generation that replaces duplicate individuals in the population. Scanning for duplicates can be computationally intensive because it is an    O   (   N  2   )       O   superscript  N  2     O(N^{2})   operation, so it is often performed only every few generations, rather than every generation.  Blending can be implemented in BBO. With blending, instead of replacing     z  k    (  s  )        subscript  z  k   s    z_{k}(s)   in an immigrating candidate solution with     x  j    (  s  )        subscript  x  j   s    x_{j}(s)   from the emigrating candidate solution,     z  k    (  s  )        subscript  z  k   s    z_{k}(s)   is set equal to a linear combination of its original value and     x  j    (  s  )        subscript  x  j   s    x_{j}(s)   :           z  k    (  s  )    ←    α   z  k    (  s  )    +    (   1  -  α   )    x  j    (  s  )        normal-←     subscript  z  k   s       α   subscript  z  k   s       1  α    subscript  x  j   s      z_{k}(s)\leftarrow\alpha z_{k}(s)+(1-\alpha)x_{j}(s)       where    α  ∈   [  0  ,  1  ]       α   0  1     \alpha\in[0,1]   , and    α  =  0      α  0    \alpha=0   corresponds to standard migration as shown in the algorithm above. Blended BBO is based on blended crossover in genetic algorithms, 8 and has been shown to outperform standard BBO. 9     The BBO algorithm presented above is called partial immigration-based BBO because the immigrating candidate solution is selected before the emigrating candidate solution is selected, and migration for each independent variable in the immigrating candidate solution is performed independently of all other independent variables. Other approaches for selecting the immigrating and emigrating candidate solutions have also been proposed. 10 11  The migration curves in the above figure are linear, but nonlinear migration curves often give better performance. 12  BBO has been hybridized with several other EAs, including particle swarm optimization , 13  differential evolution , 14  evolution strategy , 15  opposition-based computing , 16  case-based reasoning , 17  artificial bee colony algorithm , 18 bacterial foraging optimization, 19  harmony search , 20 and the simplex algorithm . 21  BBO can be combined with local search to create a memetic algorithm that performs much better than BBO alone. 22   Software  MATLAB   The following MATLAB code gives a BBO implementation for minimizing the 20-dimensional Rosenbrock function . Note that the following code is very basic, although it does include elitism. A serious BBO implementation should include some of the variations discussed above, such as duplicate replacement, blending, nonlinear migration, and local optimization.   function BBO % Biogeography-based optimization (BBO) to minimize a continuous function  % This program was tested with MATLAB R2012b GenerationLimit = 50 ; % generation count limit PopulationSize = 50 ; % population size ProblemDimension = 20 ; % number of variables in each solution (i.e., problem dimension) MutationProbability = 0.04 ; % mutation probability per solution per independent variable NumberOfElites = 2 ; % how many of the best solutions to keep from one generation to the next MinDomain = - 2.048 ; % lower bound of each element of the function domain MaxDomain = + 2.048 ; % upper bound of each element of the function domain  % Initialize the population rng(round(sum( 100 *clock))); % initialize the random number generator x = zeros(PopulationSize, ProblemDimension); % allocate memory for the population for index = 1 : PopulationSize % randomly initialize the population x(index, :) = MinDomain + (MaxDomain - MinDomain) * rand( 1 , ProblemDimension);
 end
 Cost = RosenbrockCost(x); % compute the cost of each individual [x, Cost] = PopulationSort(x, Cost); % sort the population from best to worst MinimumCost = zeros(GenerationLimit, 1 ); % allocate memory MinimumCost( 1 ) = Cost( 1 ); % save the best cost at each generation in the MinimumCost array disp([ 'Generation 0 min cost = ' , num2str(MinimumCost( 1 ))]);
 z = zeros(PopulationSize, ProblemDimension); % allocate memory for the temporary population  % Compute migration rates, assuming the population is sorted from most fit to least fit mu = (PopulationSize + 1 - ( 1 :PopulationSize)) / (PopulationSize + 1 ); % emigration rate lambda = 1 - mu; % immigration rate for Generation = 1 : GenerationLimit % Save the best solutions and costs in the elite arrays EliteSolutions = x( 1 : NumberOfElites, :);
     EliteCosts = Cost( 1 : NumberOfElites); % Use migration rates to decide how much information to share between solutions for k = 1 : PopulationSize % Probabilistic migration to the k-th solution for j = 1 : ProblemDimension
 
             if rand < lambda(k) % Should we immigrate?  % Yes - Pick a solution from which to emigrate (roulette wheel selection) RandomNum = rand * sum(mu);
                 Select = mu( 1 );
                 SelectIndex = 1 ;
                 while (RandomNum > Select) && (SelectIndex < PopulationSize)
                     SelectIndex = SelectIndex + 1 ;
                     Select = Select + mu(SelectIndex);
                 end
                 z(k, j) = x(SelectIndex, j); % this is the migration step else
                 z(k, j) = x(k, j); % no migration for this independent variable end
 
         end
     end % Mutation for k = 1 : PopulationSize
         for ParameterIndex = 1 : ProblemDimension
             if rand < MutationProbability
                 z(k, ParameterIndex) = MinDomain + (MaxDomain - MinDomain) * rand;
             end
         end
     end
 
     x = z; % replace the solutions with their new migrated and mutated versions Cost = RosenbrockCost(x); % calculate cost [x, Cost] = PopulationSort(x, Cost); % sort the population and costs from best to worst for k = 1 : NumberOfElites % replace the worst individuals with the previous generation's elites x(PopulationSize-k+ 1 , :) = EliteSolutions(k, :);
         Cost(PopulationSize-k+ 1 ) = EliteCosts(k);
     end
 
     [x, Cost] = PopulationSort(x, Cost); % sort the population and costs from best to worst MinimumCost(Generation+ 1 ) = Cost( 1 );
     disp([ 'Generation ' , num2str(Generation), ' min cost = ' , num2str(MinimumCost(Generation+ 1 ))])
 end % Wrap it up by displaying the best solution and by plotting the results disp([ 'Best solution found = ' , num2str(x( 1 , :))])
 close all
 plot( 0 :GenerationLimit, MinimumCost);
 xlabel( 'Generation' )
 ylabel( 'Minimum Cost' )
 return %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% function [x, Cost] = PopulationSort(x, Cost) % Sort the population and costs from best to worst [Cost, indices] = sort(Cost, 'ascend' );
 x = x(indices, :);
 return %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% function [Cost] = RosenbrockCost(x) % Compute the Rosenbrock function value of each element in x NumberOfDimensions = size(x, 2 );
 Cost = zeros(size(x, 1 ), 1 ); % allocate memory for the Cost array for PopulationIndex = 1 : length(x)
     Cost(PopulationIndex) = 0 ;
     for i = 1 : NumberOfDimensions- 1 Temp1 = x(PopulationIndex, i);
         Temp2 = x(PopulationIndex, i+ 1 );
         Cost(PopulationIndex) = Cost(PopulationIndex) + 100 * (Temp2 - Temp1^ 2 )^ 2 + (Temp1 - 1 )^ 2 ;
     end
 end
 return  R   "bbo: Biogeography-Based Optimization" is an R package for continuous BBO. 23   Extensions  BBO has been extended to noisy functions (that is, functions whose fitness evaluation is corrupted by noise); 24 constrained functions; 25 combinatorial functions; 26 and multi-objective functions. 27  Mathematical analyses  BBO has been mathematically analyzed using Markov models 28 and dynamic system models. 29  References  External links   BBO Home Page   "  Category:Evolutionary algorithms  Category:Stochastic optimization                                    