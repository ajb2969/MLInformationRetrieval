


Office Open XML file formats




Office Open XML file formats

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



The Office Open XML file formats are a set of file formats that can be used to represent electronic office documents. There are formats for word processing documents, spreadsheets and presentations as well as specific formats for material such as mathematical formulae, graphics, bibliographies etc.
The formats were developed by Microsoft and first appeared in Microsoft Office 2007. They were standardized between December 2006 and November 2008, first by the Ecma International consortium, where they became ECMA-376, and subsequently, after a contentious standardization process, by the ISO/IEC's Joint Technical Committee 1, where they became ISO/IEC 29500:2008.
Container
(Figure)
Container structure of Part 2 of the Ecma Office Open XML standard, ECMA-376

Office Open XML documents are stored in Open Packaging Convention (OPC) packages, which are ZIP files containing XML and other data files, along with a specification of the relationships between them.1 Depending on the type of the document, the packages have different internal directory structures and names. An application will use the relationships files to locate individual sections (files), with each having accompanying metadata, in particular MIME metadata.
A basic package contains an XML file called [Content_Types].xml at the root, along with three directories: _rels, docProps, and a directory specific for the document type (for example, in a .docx word processing package, there would be a word directory). The word directory contains the document.xml file which is the core content of the document.

[Content_Types].xml: This file provided MIME type information for parts of the package, using defaults for certain file extensions and overrides for parts specified by IRI.
 _rels: This directory contains relationships for the files within the package. To find the relationships for a specific file, look for the _rels directory that is a sibling of the file, and then for a file that has the original file name with a .rels appended to it. For example, if the content types file had any relationships, there would be a file called [Content_Types].xml.rels inside the _rels directory.
 _rels/.rels: This file is where the package relationships are located. Applications look here first. Viewing in a text editor, one will see it outlines each relationship for that section. In a minimal document containing only the basic document.xml file, the relationships detailed are metadata and document.xml.
 docProps/core.xml: This file contains the core properties for any Office Open XML document.
 word/document.xml: This file is the main part for any Word document.

Relationships
An example relationship file (word/_rels/document.xml.rels), is:
xml</span? version="1.0" encoding="UTF-8" standalone="yes" ?>
  xmlns="http://schemas.microsoft.com/package/2005/06/relationships">
  id="rId1" target="http://en.wikipedia.org/images/wiki-en.png" targetmode="External" type="http://schemas.microsoft.com/office/2006/relationships/image">
 id="rId2" target="http://www.wikipedia.org" targetmode="External" type="http://schemas.microsoft.com/office/2006/relationships/hyperlink">

As such, images referenced in the document can be found in the relationship file by looking for all relationships that are of type http://schemas.microsoft.com/office/2006/relationships/image. To change the used image, edit the relationship.
The following code shows an example of inline markup for a hyperlink:
 r:id="rId2" w:history="1" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
 
In this example, the Uniform Resource Locator (URL) is represented by "rId2". The actual URL is in the accompanying relationships file, located by the corresponding "rId2" item. Linked images, templates, and other items are referenced in the same way.
Pictures can be embedded or linked using a tag:
 o:title="example" w:rel="rId1">
This is the reference to the image file. All references are managed via relationships. For example, a document.xml has a relationship to the image. There is a _rels directory in the same directory as document.xml, inside _rels is a file called document.xml.rels. In this file there will be a relationship definition that contains type, ID and location. The ID is the referenced ID used in the XML document. The type will be a reference schema definition for the media type and the location will be an internal location within the ZIP package or an external location defined with a URL.
Document properties
Office Open XML uses the Dublin Core Metadata Element Set and DCMI Metadata Terms to store document properties. Dublin Core is a standard for cross-domain information resource description and is defined in ISO 15836:2003.
An example document properties file (docProps/core.xml) that uses Dublin Core metadata, is:
xml</span? version="1.0" encoding="UTF-8" standalone="yes"?>
  xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 Office Open XML
File format and structure
Wikipedia
Office Open XML, Metadata, Dublin Core
Office Open XML uses ISO 15836:2003
Wikipedia
1
 xsi:type="dcterms:W3CDTF">2008-06-19T20:00:00Z
 xsi:type="dcterms:W3CDTF">2008-06-19T20:42:00Z
Document file format
Final

Document markup languages
An Office Open XML file may contain several documents encoded in specialized markup languages corresponding to applications within the Microsoft Office product line. Office Open XML defines multiple vocabularies using 27 namespaces and 89 schema modules.
The primary markup languages are:

WordprocessingML for word-processing
SpreadsheetML for spreadsheets
PresentationML for presentations

Shared markup language materials include:

Office Math Markup Language (OMML)
DrawingML used for vector drawing, charts, and for example, text art (additionally, though deprecated, VML is supported for drawing)
Extended properties
Custom properties
Variant Types
Custom XML data properties
Bibliography

In addition to the above markup languages custom XML schemas can be used to extend Office Open XML.
Design approach
Patrick Durusau, the editor of ODF, has viewed the markup style of OOXML and ODF as representing two sides of a debate: the "element side" and the "attribute side". He notes that OOXML represents "the element side of this approach" and singles out the KeepNext element as an example:

  
   â€¦ 
 
In contrast, he notes ODF would use the single attribute fo:keep-next, rather than an element, for the same semantic.2
The XML Schema of Office Open XML emphasizes reducing load time and improving parsing speed.3 In a test with applications current in April 2007, XML-based office documents were slower to load than binary formats.4 To enhance performance, Office Open XML uses very short element names for common elements and spreadsheets save dates as index numbers (starting from 1899 or from 1904). In order to be systematic and generic, Office Open XML typically uses separate child elements for data and metadata (element names ending in Pr for properties) rather than using multiple attributes, which allows structured properties. Office Open XML does not use mixed content but uses elements to put a series of text runs (element name r) into paragraphs (element name p). The result is terse and highly nested in contrast to HTML, for example, which is fairly flat, designed for humans to write in text editors and is more congenial for humans to read.
The naming of elements and attributes within the text has attracted some criticism. There are three different syntaxes in OOXML (ECMA-376) for specifying the color and alignment of text depending on whether the document is a text, spreadsheet, or presentation. Rob Weir (an IBM employee and co-chair of the OASIS OpenDocument Format TC) asks "What is the engineering justification for this horror?". He contrasts with OpenDocument: "ODF uses the W3C's XSL-FO vocabulary for text styling, and uses this vocabulary consistently".5
Some have argued the design is based too closely on Microsoft applications. In August 2007, the Linux Foundation published a blog post calling upon ISO National Bodies to vote "No, with comments" during the International Standardization of OOXML. It said, "OOXML is a direct port of a single vendor's binary document formats. It avoids the re-use of relevant existing international standards (e.g. several cryptographic algorithms, VML, etc.). There are literally hundreds of technical flaws that should be addressed before standardizing OOXML including continued use of binary code tied to platform specific features, propagating bugs in MS-Office into the standard, proprietary units, references to proprietary/confidential tags, unclear IP and patent rights, and much more".6
The version of the standard submitted to JTC 1 was 6546 pages long. The need and appropriateness of such length has been questioned.78 Google stated that "the ODF standard, which achieves the same goal, is only 867 pages"9
WordprocessingML (WML)
Word processing documents use the XML vocabulary known as WordprocessingML normatively defined by the schema wml.xsd which accompanies the standard. This vocabulary is defined in clause 11 of Part 1.10
SpreadsheetML (SML)
Spreadsheet documents use the XML vocabulary known as SpreadsheetML normatively defined by the schema sml.xsd which accompanies the standard. This vocabulary is described in clause 12 of Part 1.11
Each worksheet in a spreadsheet is represented by an XML document with a root element named  in the  Namespace.
The representation of date and time values in SpreadsheetML has attracted some criticism. ECMA-376 1st edition does not conform to ISO 8601:2004 "Representation of Dates and Times". It requires that implementations replicate a Lotus 1-2-3 12 bug that erroneously treats 1900 as a leap year. Products complying with ECMA-376 would be required to use the WEEKDAY() spreadsheet function, and therefore assign incorrect dates to some days of the week, and also miscalculate the number of days between certain dates.13 ECMA-376 2nd edition (ISO/IEC 29500) allows the use of 8601:2004 "Representation of Dates and Times" in addition to the Lotus 1-2-3 bug-compatible form.1415
Office MathML (OMML)
Office Math Markup Language is a mathematical markup language which can be embedded in WordprocessingML, with intrinsic support for including word processing markup like revision markings,16 footnotes, comments, images and elaborate formatting and styles.17 The OMML format is different from the World Wide Web Consortium (W3C) MathML recommendation that does not support those office features, but is partially compatible18 through XSL Transformations; tools are provided with office suite and are automatically used via clipboard transformations.19
The following Office MathML example defines the fraction



 
 
 Ï€
2



Some have queried the need for Office MathML (OMML) instead advocating the use of MathML, a W3C recommendation for the "inclusion of mathematical expressions in Web pages" and "machine to machine communication".20 Murray Sargent has answered some of these issues in a blog post, which details some of the philosophical differences between the two formats.21
DrawingML
(Figure)
Example of DrawingML charts

DrawingML is the vector graphics markup language used in Office Open XML documents. Its major features are the graphics rendering of text elements, graphical vector-based shape elements, graphical tables and charts.
The DrawingML table is the third table model in Office Open XML (next to the table models in WordprocessingML and SpreadsheetML) and is optimized for graphical effects and its main use is in presentations created with PresentationML markup. DrawingML contains graphics effects (like shadows and reflection) that can be used on the different graphical elements that are used in DrawingML. In DrawingML you can also create 3d effects, for instance to show the different graphical elements through a flexible camera viewpoint. It is possible to create separate DrawingML theme parts in an Office Open XML package. These themes can then be applied to graphical elements throughout the Office Open XML package.22
DrawingML is unrelated to the other vector graphics formats such as SVG. These can be converted to DrawingML to include natively in an Office Open XML document. This is a different approach to that of the OpenDocument format, which uses a subset of SVG, and includes vector graphics as separate files.
A DrawingML graphic's dimensions are specified in English Metric Units (EMUs). It is so called because it allows an exact common representation of dimensions originally in either English or Metric units. This unit is defined as 1/360,000 of a centimeter and thus there are 914,400 EMUs per inch, and 12,700 EMUs per point. This unit was chosen so that integers can be used to accurately represent most dimensions encountered in a document. Floating point cannot accurately represent a fraction that is not a sum of powers of two and the error is magnified when the fractions are added together many times, resulting in misalignment. As an inch is exactly 2.54 centimeters, or 127/50, 1/127Â inch is an integer multiple of a power-of-ten fraction of the meter (2Ã—10âˆ’4Â m). To accurately represent (with an integer) 1Â Î¼m = 10âˆ’6Â m, a divisor of 100 is further needed. To accurately represent the point unit, a divisor of 72 is needed, which also allows divisions by 2, 3, 4, 6, 8, 9, 12, 18, 24, and 36 to be accurate. Multiplying these together gives 127Ã—72Ã—100 = 914,400 units per inch; this also allows exact representations of multiples of 1/100 & 1/32Â inch. According to Rick Jelliffe, programmer and standards activist (ISO, W3C, IETF), EMUs are a rational solution to a particular set of design criteria.23
Some have criticised the use of DrawingML (and the transitional-use-only VML) instead of W3C recommendation SVG.24 VML did not become a W3C recommendation.25
Foreign resources
Non-XML content
OOXML documents are typically composed of other resources in addition to XML content (graphics, video, etc.).
Some have criticised the choice of permitted format for such resources: ECMA-376 1st edition specifies "Embedded Object Alternate Image Requests Types" and "Clipboard Format Types", which refer to Windows Metafiles or Enhanced MetafilesÂ â€“ each of which are proprietary formats that have hard-coded dependencies on Windows itself. The critics state the standard should instead have referenced the platform neutral standard ISO/IEC 8632 "Computer Graphics Metafile".26
Foreign markup
The Standard provides three mechanisms to allow foreign markup to be embedded within content for editing purposes:

Smart tags
Custom XML markup
Structured Document Tags

These are defined in clause 17.5 of Part 1.
Compatibility settings
Versions of Office Open XML contain what are termed "compatibility settings". These are contained in Part 4 ("Markup Language Reference") of ECMA-376 1st Edition, but during standardization were moved to become a new part (also called Part 4) of ISO/IEC 29500:2008 ("Transitional Migration Features").
These settings (including element with names such as autoSpaceLikeWord95, footnoteLayoutLikeWW8, lineWrapLikeWord6, mwSmallCaps, shapeLayoutLikeWW8, suppressTopSpacingWP, truncateFontHeightsLikeWP6, uiCompat97To2003, useWord2002TableStyleRules, useWord97LineBreakRules, wpJustification and wpSpaceWidth) were the focus of some controversy during the standardisation of DIS 29500.27 As a result, new text was added to ISO/IEC 29500 to document them.28
An article in Free Software Magazine has criticized the markup used for these settings. Office Open XML uses distinctly named elements for each compatibility setting, each of which is declared in the schema. The repertoire of settings is thus limited â€” for new compatibility settings to be added, new elements may need to be declared, "potentially creating thousands of them, each having nothing to do with interoperability".29
Extensibility
The standard provides two types of extensibility mechanism, Markup Compatibility and Extensibility (MCE) defined in Part 3 (ISO/IEC 29500-3:2008) and Extension Lists defined in clause 18.2.10 of Part 1.
References
"
* Category:XML Category:Document-centric XML-based standards Category:Markup languages Category:Open formats Category:Computer file formats Category:Microsoft Office




{{ cite web | author=Patrick Durusau | url=http://www.durusau.net/publications/old_wine.pdf | title=Old Wine In New Skins | date=21 October 2008 }}
















http://blogs.msdn.com/b/murrays/archive/2007/06/05/science-and-nature-have-difficulties-with-word-2007-mathematics.aspx

http://blogs.msdn.com/b/murrays/archive/2006/10/07/mathml-and-ecma-math-_2800_omml_2900_-.aspx










