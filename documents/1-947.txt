   String (computer science)      String (computer science)  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In computer programming , a string is traditionally a sequence of characters , either as a literal constant or as some kind of variable. The latter may allow its elements to be mutated and the length changed, or it may be fixed (after creation). A string is generally understood as a data type and is often implemented as an array of bytes (or words ) that stores a sequence of elements, typically characters, using some character encoding . A string may also denote more general arrays or other sequence (or list ) data types and structures.  Depending on programming language and precise data type used, a variable declared to be a string may either cause storage in memory to be statically allocated for a predetermined maximum length or employ dynamic allocation to allow it to hold variable number of elements.  When a string appears literally in source code , it is known as a string literal or an anonymous string. 1  In formal languages , which are used in mathematical logic and theoretical computer science , a string is a finite sequence of symbols that are chosen from a set called an alphabet .  Formal theory  Let Σ be a non-empty  finite set of symbols (alternatively called characters), called the alphabet . No assumption is made about the nature of the symbols. A string (or word ) over Σ is any finite sequence of symbols from Σ. 2 For example, if Σ = {0, 1}, then 01011 is a string over Σ.  The length of a string s is the number of symbols in s (the length of the sequence) and can be any non-negative integer ; it is often denoted as | s |. The empty string is the unique string over Σ of length 0, and is denoted ε or λ . 3 4  The set of all strings over Σ of length n is denoted Σ n . For example, if Σ = {0, 1}, then Σ 2 = {00, 01, 10, 11}. Note that Σ 0 = {ε} for any alphabet Σ.  The set of all strings over Σ of any length is the Kleene closure of Σ and is denoted Σ * . In terms of Σ n ,  $$\Sigma^{*} = \bigcup_{n \in \mathbb{N} \cup \{0\}} \Sigma^{n}$$ For example, if Σ = {0, 1}, then Σ * = {ε, 0, 1, 00, 01, 10, 11, 000, 001, 010, 011, ...}. Although the set Σ * itself is countably infinite , each element of Σ * is a string of finite length.  A set of strings over Σ (i.e. any subset of Σ * ) is called a formal language over Σ. For example, if Σ = {0, 1}, the set of strings with an even number of zeros, {ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111, ...}, is a formal language over Σ.  Concatenation and substrings  Concatenation is an important binary operation on Σ * . For any two strings s and t in Σ * , their concatenation is defined as the sequence of symbols in s followed by the sequence of characters in t , and is denoted st . For example, if Σ = {a, b, ..., z}, s = bear , and t = hug , then st = bearhug and ts = hugbear .  String concatenation is an associative , but non- commutative operation. The empty string ε serves as the identity element ; for any string s , ε s = s ε = s . Therefore, the set Σ * and the concatenation operation form a monoid , the free monoid generated by Σ. In addition, the length function defines a monoid homomorphism from Σ * to the non-negative integers (that is, a function $L: \Sigma^{*} \mapsto \mathbb{N} \cup \{0\}$ , such that $L(st)=L(s)+L(t)\quad \forall s,t\in\Sigma^*$ ).  A string s is said to be a substring or factor of t if there exist (possibly empty) strings u and v such that t = usv . The relation "is a substring of" defines a partial order on Σ * , the least element of which is the empty string.  Prefixes and suffixes  A string s is said to be a prefix of t if there exists a string u such that t = su . If u is nonempty, s is said to be a proper prefix of t . Symmetrically, a string s is said to be a suffix of t if there exists a string u such that t = us . If u is nonempty, s is said to be a proper suffix of t . Suffixes and prefixes are substrings of t . Both the relations "is a prefix of" and "is a suffix of" are prefix orders .  Rotations  A string s = uv is said to be a rotation of t if t = vu . For example, if Σ = {0, 1} the string 0011001 is a rotation of 0100110, where u = 00110 and v = 01.  Reversal  The reverse of a string is a string with the same symbols but in reverse order. For example, if s = abc (where a, b, and c are symbols of the alphabet), then the reverse of s is cba. A string that is the reverse of itself (e.g., s = madam) is called a palindrome , which also includes the empty string and all strings of length 1.  Lexicographical ordering  It is often useful to define an ordering on a set of strings. If the alphabet Σ has a total order (cf. alphabetical order ) one can define a total order on Σ * called lexicographical order . For example, if Σ = {0, 1} and 0 * includes the relationships ε    Hence, this representation is commonly referred to as a C string . This representation of an n -character string takes n + 1 space (1 for the terminator), and is thus an implicit data structure .  In terminated strings, the terminating code is not an allowable character in any string. Strings with length field do not have this limitation and can also store arbitrary binary data . In C two things are needed to handle binary data: a character pointer and the length of the data.  An example of a null-terminated string stored in a 10-byte buffer , along with its ASCII (or more modern UTF-8 ) representation as 8-bit hexadecimal numbers is:     F  R  A  N  K  NUL  k  e  f  w    46 16  52 16  41 16  4E 16  4B 16  00 16  6B 16  65 16  66 16  77 16     The length of the string in the above example, " FRANK ", is 5 characters, but it occupies 6 bytes. Characters after the terminator do not form part of the representation; they may be either part of another string or just garbage. (Strings of this form are sometimes called ASCIZ strings , after the original assembly language directive used to declare them.)  Length-prefixed  The length of a string can also be stored explicitly, for example by prefixing the string with the length as a byte value (a convention used in many Pascal dialects): as a consequence, some people call it a Pascal string or P-string . Storing the string length as byte limits the maximum string length to 255. To avoid such limitations, improved implementations of P-strings use 16- , 32- , or 64-bit  words to store the string length. When the length field covers the address space , strings are limited only by the available memory . Encoding the length n takes log( n ) space (see fixed-length code ), so length-prefixed strings are a succinct data structure , encoding a string of length n in log( n ) + n space. However, if the length is bounded, then the length can be encoded in constant space, typically a machine word, and thus is an implicit data structure , taking n + k space, where k is the number of characters in a word (8 for 8-bit ASCII on a 64-bit machine, 1 for 32-bit UTF-32/UCS-4 on a 32-bit machine, etc.).  Here is the equivalent Pascal string stored in a 10-byte buffer, along with its ASCII / UTF-8 representation:     length  F  R  A  N  K  k  e  f  w    5 16  46 16  52 16  41 16  4E 16  4B 16  6B 16  65 16  66 16  77 16     Strings as records  Many languages, including object-oriented ones, implement strings as records in a structure like:   class string { unsigned  int length; char *text;
 };  Although this implementation is hidden, and accessed through member functions. The "text" will be a dynamically allocated memory area, that might be expanded if needed. See also string (C++) .  Linked-list  Both character termination and length codes limit strings: For example, C character arrays that contain null (NUL) characters cannot be handled directly by C string library functions: Strings using a length code are limited to the maximum value of the length code.  Both of these limitations can be overcome by clever programming, but such workarounds are by definition not standard.  Rough equivalents of the C termination method have historically appeared in both hardware and software. For example, "data processing" machines like the IBM 1401 used a special word mark bit to delimit strings at the left, where the operation would start at the right. This meant that, while the IBM 1401 had a seven-bit word in "reality", almost no-one ever thought to use this as a feature, and override the assignment of the seventh bit to (for example) handle ASCII codes.  It is possible to create data structures and functions that manipulate them that do not have the problems associated with character termination and can in principle overcome length code bounds. It is also possible to optimize the string represented using techniques from run length encoding (replacing repeated characters by the character value and a length) and Hamming encoding .  While these representations are common, others are possible. Using ropes makes certain string operations, such as insertions, deletions, and concatenations more efficient.  Security concerns  The differing memory layout and storage requirements of strings can affect the security of the program accessing the string data. String representations requiring a terminating character are commonly susceptible to buffer overflow problems if the terminating character is not present, caused by a coding error or an attacker deliberately altering the data. String representations adopting a separate length field are also susceptible if the length can be manipulated. In such cases, program code accessing the string data requires bounds checking to ensure that it does not inadvertently access or change data outside of the string memory limits.  String data is frequently obtained from user-input to a program. As such, it is the responsibility of the program to validate the string to ensure that it represents the expected format. Performing limited or no validation of user-input can cause a program to be vulnerable to code injection attacks.  Text file strings  In computer readable text files, for example programming language source files or configuration files, strings can be represented. The NUL byte is normally not used as terminator since that does not correspond to the ASCII text standard, and the length is usually not stored, since the file should be human editable without bugs.  Two common representations are:   Surrounded by quotation marks (ASCII 22 16 ), used by most programming languages. To be able to include quotation marks, newline characters etc., escape sequences are often available, usually using the backslash character (ASCII 5C 16 ).  Terminated by a newline sequence, for example in Windows INI files .   Non-text strings  While character strings are very common uses of strings, a string in computer science may refer generically to any sequence of homogeneously typed data. A string of bits or bytes, for example, may be used to represent non-textual binary data retrieved from a communications medium. This data may or may not be represented by a string-specific datatype, depending on the needs of the application, the desire of the programmer, and the capabilities of the programming language being used. If the programming language's string implementation is not 8-bit clean , data corruption may ensue.  String processing algorithms  There are many algorithms for processing strings, each with various trade-offs. Some categories of algorithms include:   String searching algorithms for finding a given substring or pattern  String manipulation algorithms  Sorting algorithms  Regular expression algorithms  Parsing a string  Sequence mining   Advanced string algorithms often employ complex mechanisms and data structures, among them suffix trees and finite state machines .  The name stringology was coined in 1984 by computer scientist Zvi Galil for the issue of algorithms and data structures used for string processing. 5  Character string-oriented languages and utilities  Character strings are such a useful datatype that several languages have been designed in order to make string processing applications easy to write. Examples include the following languages:   awk  Icon  MUMPS  Perl  Rexx  Ruby  sed  SNOBOL  Tcl  TTM   Many Unix utilities perform simple string manipulations and can be used to easily program some powerful string processing algorithms. Files and finite streams may be viewed as strings.  Some APIs like Multimedia Control Interface , embedded SQL or printf use strings to hold commands that will be interpreted.  Recent scripting programming languages , including Perl, Python , Ruby, and Tcl employ regular expressions to facilitate text operations. Perl is particularly noted for its regular expression use, 6 and many other languages and applications implement Perl compatible regular expressions .  Some languages such as Perl and Ruby support string interpolation , which permits arbitrary expressions to be evaluated and included in string literals.  Character string functions  String functions are used to manipulate a string or change or edit the contents of a string. They also are used to query information about a string. They are usually used within the context of a computer programming language .  The most basic example of a string function is the string length function – the function that returns the length of a string (not counting any terminator characters or any of the string's internal structural information) and does not modify the string. This function is often named [[comparison of programming languages (string functions)#length |length]] or len . For example, length("hello world") would return 11.  String buffers  In some programming languages , a string buffer is an alternative to a string. It has the ability to be altered through adding or appending, whereas a String is normally fixed or immutable .  In Java  Theory  Java 's standard way to handle text is to use its {{Javadoc:SE|java/lang|String}}  class . Any given String in Java is an immutable object , which means its state cannot be changed. A String has an array of characters . Whenever a String must be manipulated, any changes require the creation of a new String (which, in turn, involves the creation of a new array of characters, and copying of the original array). This happens even if the original String 's value or intermediate String s used for the manipulation are not kept.  Java provides an alternate class for string manipulation, called . A StringBuffer , like a String , has an array to hold characters. It, however, is mutable (its state can be altered). Its array of characters is not necessarily completely filled (as opposed to a String, whose array is always the exact required length for its contents). Thus, it has the capability to add, remove, or change its state without creating a new object (and without the creation of a new array, and array copying). The exception to this is when its array is no longer of suitable length to hold its content. In this case, it is required to create a new array, and copy the contents.  For these reasons, Java would handle an expression like  String newString = aString + anInt + aChar + aDouble;  like this:  String newString = ( new StringBuilder(aString)). append (anInt). append (aChar). append (aDouble). toString ();  Implications  Generally, a StringBuffer is more efficient than a String in string handling. However, this is not necessarily the case, since a StringBuffer will be required to recreate its character array when it runs out of space. Theoretically, this is possible to happen the same number of times as a new String would be required, although this is unlikely (and the programmer can provide length hints to prevent this). Either way, the effect is not noticeable in modern desktop computers.  As well, the shortcomings of arrays are inherent in a StringBuffer . In order to insert or remove characters at arbitrary positions, whole sections of arrays must be moved.  The method by which a StringBuffer is attractive in an environment with low processing power takes this ability by using too much memory, which is likely also at a premium in this environment. This point, however, is trivial, considering the space required for creating many instances of Strings in order to process them. As well, the StringBuffer can be optimized to "waste" as little memory as possible.  The class, introduced in J2SE 5.0, differs from StringBuffer in that it is unsynchronized . When only a single thread at a time will access the object, using a StringBuilder processes more efficiently than using a StringBuffer .  StringBuffer and StringBuilder are included in the  package.  In .NET  Microsoft's .NET Framework has a StringBuilder class in its Base Class Library .  In other languages   In C++ and Ruby , the standard string class is already mutable, with the ability to change the contents and append strings, etc., so a separate mutable string class is unnecessary.  In Objective-C ( Cocoa / OpenStep frameworks), the NSMutableString class is the mutable version of the NSString class.   See also   Formal language — a (possibly infinite) set of strings in theoretical computer science  Connection string — passed to a driver to initiate a connection e.g. to a database  Rope — a data structure for efficiently manipulating long strings  Bitstring — a string of binary digits  Binary-safe — a property of string manipulating functions treating their input as raw data stream  Improper input validation — a type of software security vulnerability particularly relevant for user-given strings  Incompressible string — a string that cannot be compressed by any algorithm  Empty string — its properties and representation in programming languages  String metric — notions of similarity between strings  string (C++) — overview of C++ string handling  string.h — overview of C string handling  Analysis of algorithms — determining time and storage needed by a particular (e.g. string manipulation) algorithm   References  "  Category:Character encoding  Category:Data types  Category:Formal languages  Category:Combinatorics on words  Category:Primitive types  Category:Syntactic entities    Category:Algorithms on strings     ↩  ↩   Here: sect.1.1, p.1 ↩  ↩  ↩     