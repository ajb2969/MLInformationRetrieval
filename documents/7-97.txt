


Programming Computable Functions




Programming Computable Functions

In computer science, Programming Computable Functions,1 or PCF, is a typed functional language introduced in an unpublished 1969 manuscript by Dana Scott. It can be considered to be an extended version of the typed lambda calculus or a simplified version of modern typed functional languages such as ML.
A fully abstract model for PCF was first given by Milner (1977). However, since Milner's model was essentially based on the syntax of PCF it was considered less than satisfactory (Ong, 1995). The first two fully abstract models not employing syntax were formulated during the 1990s. These models are based on game semantics (Hyland and Ong, 2000; Abramsky, Jagadeesan, and Malacaria, 2000) and Kripke logical relations (O'Hearn and Riecke, 1995). For a time it was felt that neither of these models was completely satisfactory, since they were not effectively presentable. However, Ralph Loader demonstrated that no effectively presentable fully abstract model could exist, since the question of program equivalence in the finitary fragment of PCF is not decidable.
Syntax
The types of PCF are inductively defined as

nat is a type
For types σ and τ, there is a type σ → τ

A context is a list of pairs x : σ, where x is a variable name and σ is a type, such that no variable name is duplicated. One then defines typing judgments of terms-in-context in the usual way for the following syntactical constructs:

Variables (if x : σ is part of a context Γ, then Γ ⊢ x : σ)
Application (of a term of type σ → τ to a term of type σ)
λ-abstraction
The Y fixed point combinator (making terms of type σ out of terms of type σ → σ)
The successor (succ) and predecessor (pred) operations on nat and the constant 0
The conditional if with the typing rule:





(nats will be interpreted as booleans here with a convention like zero denoting truth, and any other number denoting falsity)
 

Semantics
Denotational semantics
A relatively straightforward semantics for the language is the Scott model. In this model,

Types are interpreted as certain domains.
 


 
  (the natural numbers with a bottom element adjoined, with the flat ordering)


 
  is interpreted as the domain of Scott-continuous functions from 
 
 
 
  to 
 
 




A context 
 
 
 
  is interpreted as the product 
 
 

Terms in context 
 
 
 
  are interpreted as continuous functions 
 
 

Variable terms are interpreted as projections
Lambda abstraction and application are interpreted by making use of the cartesian closed structure of the category of domains and continuous functions
Y is interpreted by taking the least fixed point of the argument


This model is not fully abstract for PCF; but it is fully abstract for the language obtained by adding a parallel or operator to PCF (p. 293 in the Hyland and Ong 2000 reference below).
Notes


References

{{ cite journal

| first = Dana S.
| last = Scott
| authorlink = Dana Scott
| title = A type-theoretic alternative to CUCH, ISWIM, OWHY
| journal = Unpublished manuscript
| url = http://www.cs.cmu.edu/~kw/scans/scott93tcs.pdf
| year = 1969
| ref = harv}} Republished in 

{{ cite journal

| first = Gordon D.
| last = Plotkin
| authorlink = Gordon Plotkin
| title = LCF considered to be a programming language
| journal = Theoretical Computer Science
| year = 1977
| pages = 223–255
| volume = 5
| doi = 10.1016/0304-3975(77)90044-5
| url = http://homepages.inf.ed.ac.uk/gdp/publications/LCF.pdf
| ref = harv}}


{{ cite journal

| author = Abramsky, S., Jagadeesan, R., and Malacaria, P.
| title = Full Abstraction for PCF
| journal = Information and Computation
| year= 2000
| pages = 409–470
| volume = 163
| issue = 2
| doi = 10.1006/inco.2000.2930}}

{{ cite journal

| author = Hyland, J. M. E. and Ong, C.-H. L.
| title = On Full Abstraction for PCF
| journal = Information and Computation
| year= 2000
| pages = 285–408
| volume = 163
| issue = 2
| doi = 10.1006/inco.2000.2917}}

{{ cite journal

| author = O'Hearn, P. W. and Riecke, J. G
| title = Kripke Logical Relations and PCF
| journal = Information and Computation
| year = 1995
| pages = 107–116
| volume = 120
| issue = 1
| doi = 10.1006/inco.1995.1103}}

{{ cite journal

| author = Loader, R.
| title = Finitary PCF is not decidable
| journal = Theoretical Computer Science
| year= 2001
| pages = 341–364
| volume = 266
| issue = 1-2
| doi = 10.1016/S0304-3975(00)00194-8}}



External links

Introduction to RealPCF
Lexer and Parser for PCF written in SML

"
Category:1977 in computer science Category:Academic programming languages Category:Educational programming languages Category:Functional languages Category:Programming language theory



"PCF is a programming language for computable functions, based on LCF, Scott’s logic of computable functions" . Programming Computable Functions is used by . It is also referred to as Programming with Computable Functions or Programming language for Computable Functions.




