   Multiple kernel learning      Multiple kernel learning   Multiple kernel learning refers to a set of machine learning methods that use a predefined set of kernels and learn an optimal linear or non-linear combination of kernels as part of the algorithm. Reasons to use multiple kernel learning include a) the ability to select for an optimal kernel and parameters from a larger set of kernels, reducing bias due to kernel selection while allowing for more automated machine learning methods, and b) combining data from different sources (e.g. sound and images from a video) that have different notions of similarity and thus require different kernels. Instead of creating a new kernel, multiple kernel algorithms can be used to combine kernels already established for each individual data source.  Multiple kernel learning approaches been used in many applications, such as event recognition in video.., 1 object recognition in images, 2 and biomedical data fusion. 3  Algorithms  Multiple kernel learning algorithms have been developed for supervised, semi-supervised, as well as unsupervised learning. Most work has been done on the supervised learning case with linear combinations of kernels, however, many algorithms have been developed. The basic idea behind multiple kernel learning algorithms is to add an extra parameter to the minimization problem of the learning algorithm. As an example, consider the case of supervised learning of a linear combination of a set of   n   n   n   kernels   K   K   K   . We introduce a new kernel     K  ′   =    ∑   i  =  1   n     β  i    K  i          superscript  K  normal-′     superscript   subscript     i  1    n      subscript  β  i    subscript  K  i       K^{\prime}=\sum_{i=1}^{n}\beta_{i}K_{i}   , where    β  i     subscript  β  i    \beta_{i}   is a vector of coefficients for each kernel. Because the kernels are additive (due to properties of reproducing kernel Hilbert spaces ), this new function is still a kernel. For a set of data   X   X   X   with labels   Y   Y   Y   , the minimization problem can then be written as         min   β  ,  c     \Epsilon     (  Y  ,    K  ′   c   )    +   R   (  K  ,  c  )            subscript    β  c    \Epsilon    Y     superscript  K  normal-′   c       R   K  c      \min_{\beta,c}\Epsilon(Y,K^{\prime}c)+R(K,c)     where    \Epsilon    \Epsilon   \Epsilon   is an error function and   R   R   R   is a regularization term.    \Epsilon    \Epsilon   \Epsilon   is typically the square loss function ( Tikhonov regularization ) or the hinge loss function (for SVM algorithms), and   R   R   R   is usually an    ℓ  n     subscript  normal-ℓ  n    \ell_{n}   norm or some combination of the norms (i.e. elastic net regularization ). This optimization problem can then be solved by standard optimization methods. Adaptations of existing techniques such as the Sequential Minimal Optimization have also been developed for multiple kernel SVM-based methods. 4  Supervised learning  For supervised learning, there are many other algorithms that use different methods to learn the form of the kernel. The following categorization has been proposed by Gonen and Alpaydın (2011) 5  Fixed rules approaches  Fixed rules approaches such as the linear combination algorithm described above use rules to set the combination of the kernels. These do not require parameterization and use rules like summation and multiplication to combine the kernels. The weighting is learned in the algorithm. Other examples of fixed rules include pairwise kernels, which are of the form       k   (   (   x   1  i    ,   x   1  j    )   ,   (   x   2  i    ,   x   2  j    )   )    =    k   (   x   1  i    ,   x   2  i    )   k   (   x   1  j    ,   x   2  j    )    +   k   (   x   1  i    ,   x   2  j    )   k   (   x   1  j    ,   x   2  i    )           k     subscript  x    1  i     subscript  x    1  j       subscript  x    2  i     subscript  x    2  j           k    subscript  x    1  i     subscript  x    2  i     k    subscript  x    1  j     subscript  x    2  j        k    subscript  x    1  i     subscript  x    2  j     k    subscript  x    1  j     subscript  x    2  i         k((x_{1i},x_{1j}),(x_{2i},x_{2j}))=k(x_{1i},x_{2i})k(x_{1j},x_{2j})+k(x_{1i},x%
 _{2j})k(x_{1j},x_{2i})   . These pairwise approaches have been used in predicting protein-protein interactions. 6  Heuristic approaches  These algorithms use a combination function that is parameterized. The parameters are generally defined for each individual kernel based on single-kernel performance or some computation from the kernel matrix. Examples of these include the kernel from Tenabe et al. (2008). 7 Letting    π  m     subscript  π  m    \pi_{m}   be the accuracy obtained using only    K  m     subscript  K  m    K_{m}   , and letting   δ   δ   \delta   be a threshold less than the minimum of the single-kernel accuracies, we can define       β  m   =     π  m   -  δ     ∑   h  =  1   n    (    π  h   -  δ   )          subscript  β  m        subscript  π  m   δ     superscript   subscript     h  1    n      subscript  π  h   δ       \beta_{m}=\frac{\pi_{m}-\delta}{\sum_{h=1}^{n}(\pi_{h}-\delta)}     Other approaches use a definition of kernel similarity, such as       β  m   =    A   (   K  m   ,   Y   Y  T    )      ∑   h  =  1   n    A   (   K  h   ,   Y   Y  T    )           subscript  β  m       A    subscript  K  m     Y   superscript  Y  T        superscript   subscript     h  1    n     A    subscript  K  h     Y   superscript  Y  T          \beta_{m}=\frac{A(K_{m},YY^{T})}{\sum_{h=1}^{n}A(K_{h},YY^{T})}     Using this measure, Qui and Lane (2009) 8 used the following heuristic to define         max     β  ,   tr   (   K   t  r  a   ′   )     =  1   ,    K  ′   ≥  0     A    (   K   t  r  a   ′   ,   Y   Y  T    )    .        subscript    formulae-sequence     β   tr   subscript   superscript  K  normal-′     t  r  a      1      superscript  K  normal-′   0     A     subscript   superscript  K  normal-′     t  r  a      Y   superscript  Y  T       \max_{\beta,\operatorname{tr}(K^{\prime}_{tra})=1,K^{\prime}\geq 0}A(K^{\prime%
 }_{tra},YY^{T}).     Optimization approaches  These approaches solve an optimization problem to determine parameters for the kernel combination function. This has been done with similarity measures and structural risk minimization approaches. For similarity measures such as the one defined above, the problem can be formulated as follows: 9      K   t  r  a   ′     subscript   superscript  K  normal-′     t  r  a     K^{\prime}_{tra}   where    ω   (  K  )       ω  K    \omega(K)   is the kernel of the training set.  Structural risk minimization approaches that have been used include linear approaches, such as that used by Lanckriet et al. (2002). 10 We can define the implausibility of a kernel      min    tr   (   K   t  r  a   ′   )    =  c    ω    (   K   t  r  a   ′   )         subscript      tr   subscript   superscript  K  normal-′     t  r  a     c    ω    subscript   superscript  K  normal-′     t  r  a      \min_{\operatorname{tr}(K^{\prime}_{tra})=c}\omega(K^{\prime}_{tra})   to be the value of the objective function after solving a canonical SVM problem. We can then solve the following minimization problem:     c   c   c   where     f   (  x  )    =    ∑   i  =  0   n     α  i     ∑   m  =  1   p     η  m    K  m    (   x  i  m   ,   x  m   )             f  x     subscript   superscript   n     i  0       subscript  α  i     subscript   superscript   p     m  1       subscript  η  m    subscript  K  m     superscript   subscript  x  i   m    superscript  x  m          f(x)=\sum^{n}_{i=0}\alpha_{i}\sum^{p}_{m=1}\eta_{m}K_{m}(x_{i}^{m},x^{m})   is a positive constant. Many other variations exist on the same idea, with different methods of refining and solving the problem, e.g. with nonnegative weights for individual kernels and using non-linear combinations of kernels.  Bayesian approaches  Bayesian approaches put priors on the kernel parameters and learn the parameter values from the priors and the base algorithm. For example, the decision function can be written as     η   η   \eta      α   α   \alpha   can be modeled with a Dirichlet prior and     f   (  x  )    =     ∑   i  =  1   N     ∑   m  =  1   P     α  i  m    K  m    (   x  i  m   ,   x  m   )      +  b         f  x       superscript   subscript     i  1    N     superscript   subscript     m  1    P      superscript   subscript  α  i   m    subscript  K  m     superscript   subscript  x  i   m    superscript  x  m       b     f(x)=\sum_{i=1}^{N}\sum_{m=1}^{P}\alpha_{i}^{m}K_{m}(x_{i}^{m},x^{m})+b   can be modeled with a zero-mean Gaussian and an inverse gamma variance prior. This model is then optimized using a customized multinomial probit approach with a Gibbs sampler .  11 These methods have been used successfully in applications such as protein fold recognition and protein homology problems 12 13  Boosting approaches  Boosting approaches add new kernels iteratively until some stopping criteria that is a function of performance is reached. An example of this is the MARK model developed by Bennett et al. (2002) 14      α  i  m     superscript   subscript  α  i   m    \alpha_{i}^{m}     The parameters   b   b   b   and    α  i     subscript  α  i    \alpha_{i}   are learned by gradient descent on a coordinate basis. In this way, each iteration of the descent algorithm identifies the best kernel column to choose at each particular iteration and adds that to the combined kernel. The model is then rerun to generate the optimal weights   b   b   b   and    L  =   (   x  i   ,   y  i   )       L    subscript  x  i    subscript  y  i      L={(x_{i},y_{i})}   .  Semisupervised learning  Semisupervised learning approaches to multiple kernel learning are similar to other extensions of supervised learning approaches. An inductive procedure has been developed that uses a log-likelihood empirical loss and group LASSO regularization with conditional expectation consensus on unlabeled data for image categorization. We can define the problem as follows. Let    U  =   x  i       U   subscript  x  i     U={x_{i}}   be the labeled data, and let     f   (  x  )    =    α  0   +    ∑   i  =  1    |  L  |      α  i    K  i    (  x  )            f  x      subscript  α  0     superscript   subscript     i  1      L       subscript  α  i    subscript  K  i   x       f(x)=\alpha_{0}+\sum_{i=1}^{|L|}\alpha_{i}K_{i}(x)   be the set of unlabeled data. Then, we can write the decision function as follows.         min  f   L    (  f  )    +   λ  R   (  f  )    +   γ  Θ   (  f  )            subscript   f   L   f     λ  R  f     γ  normal-Θ  f     \min_{f}L(f)+\lambda R(f)+\gamma\Theta(f)     The problem can be written as     L   L   L     where   R   R   R   is the loss function (weighted negative log-likelihood in this case),   Θ   normal-Θ   \Theta   is the regularization parameter ( Group LASSO in this case), and     g  m  π    (  x  )   =  <   ϕ  m  π   ,   ψ  m    (  x  )   >     fragments   subscript   superscript  g  π   m    fragments  normal-(  x  normal-)      subscript   superscript  ϕ  π   m   normal-,   subscript  ψ  m    fragments  normal-(  x  normal-)      g^{\pi}_{m}(x)=<\phi^{\pi}_{m},\psi_{m}(x)>   is the conditional expectation consensus (CEC) penalty on unlabeled data. The CEC penalty is defined as follows. Let the marginal kernel density for all the data be        ψ  m    (  x  )    =    [    K  m    (   x  1   ,  x  )    ,  …  ,    K  m    (   x  L   ,  x  )    ]   T          subscript  ψ  m   x    superscript      subscript  K  m     subscript  x  1   x    normal-…     subscript  K  m     subscript  x  L   x     T     \psi_{m}(x)=[K_{m}(x_{1},x),\ldots,K_{m}(x_{L},x)]^{T}     where    ϕ  m  π     subscript   superscript  ϕ  π   m    \phi^{\pi}_{m}   (the kernel distance between the labeled data and all of the labeled and unlabeled data) and   Π   normal-Π   \Pi   is a non-negative random vector with a 2-norm of 1. The value of     q  m   p  i     (  y  |   g  m  π    (  x  )   )      fragments   subscript   superscript  q    p  i    m    fragments  normal-(  y  normal-|   subscript   superscript  g  π   m    fragments  normal-(  x  normal-)   normal-)     q^{pi}_{m}(y|g^{\pi}_{m}(x))   is the number of times each kernel is projected. Expectation regularization is then performed on the MKD, resulting in a reference expectation     p  m  π    (  f   (  x  )   |   g  m  π    (  x  )   )      fragments   subscript   superscript  p  π   m    fragments  normal-(  f   fragments  normal-(  x  normal-)   normal-|   subscript   superscript  g  π   m    fragments  normal-(  x  normal-)   normal-)     p^{\pi}_{m}(f(x)|g^{\pi}_{m}(x))   and model expectation    Θ  =   1  Π    ∑   π  =  1   Π    ∑   m  =  1   M   D   (   q  m   p  i     (  y  |   g  m  π    (  x  )   )   |  |   p  m  π    (  f   (  x  )   |   g  m  π    (  x  )   )   )      fragments  Θ     1  normal-Π    subscript   superscript   normal-Π     π  1     subscript   superscript   M     m  1    D   fragments  normal-(   subscript   superscript  q    p  i    m    fragments  normal-(  y  normal-|   subscript   superscript  g  π   m    fragments  normal-(  x  normal-)   normal-)   normal-|  normal-|   subscript   superscript  p  π   m    fragments  normal-(  f   fragments  normal-(  x  normal-)   normal-|   subscript   superscript  g  π   m    fragments  normal-(  x  normal-)   normal-)   normal-)     \Theta=\frac{1}{\Pi}\sum^{\Pi}_{\pi=1}\sum^{M}_{m=1}D(q^{pi}_{m}(y|g^{\pi}_{m}%
 (x))||p^{\pi}_{m}(f(x)|g^{\pi}_{m}(x)))   . Then, we define      D   (  Q  |  |  P  )   =   ∑  i   Q   (  i  )   ln    Q   (  i  )     P   (  i  )        fragments  D   fragments  normal-(  Q  normal-|  normal-|  P  normal-)     subscript   i   Q   fragments  normal-(  i  normal-)        Q  i     P  i      D(Q||P)=\sum_{i}Q(i)\ln\frac{Q(i)}{P(i)}     where    U  =   x  i       U   subscript  x  i     U={x_{i}}   is the Kullback-Leibler divergence . The combined minimization problem is optimized using a modified block gradient descent algorithm. For more information, see Wang et al. 15  Unsupervised learning  Unsupervised multiple kernel learning algorithms have also been proposed by Zhuang et al. The problem is defined as follows. Let     K  ′   =    ∑   i  =  1   M     β  i    K  m          superscript  K  normal-′     superscript   subscript     i  1    M      subscript  β  i    subscript  K  m       K^{\prime}=\sum_{i=1}^{M}\beta_{i}K_{m}   be a set of unlabeled data. The kernel definition is the linear combined kernel    B  i     subscript  B  i    B_{i}   . In this problem, the data needs to be "clustered" into groups based on the kernel distances. Let    x  i     subscript  x  i    x_{i}   be a the group or cluster of which     ∑   i  =  1   n     ∥    x  i   -    ∑    x  j   ∈   B  i      K   (   x  i   ,   x  j   )    x  j      ∥   2       subscript   superscript   n     i  1     superscript   norm     subscript  x  i     subscript      subscript  x  j    subscript  B  i       K    subscript  x  i    subscript  x  j     subscript  x  j       2     \sum^{n}_{i=1}\left\|x_{i}-\sum_{x_{j}\in B_{i}}K(x_{i},x_{j})x_{j}\right\|^{2}   is a member. We define the loss function as     ∑   i  =  1   n     ∑    x  j   ∈   B  i      K   (   x  i   ,   x  j   )     ∥    x  i   -   x  j    ∥   2         superscript   subscript     i  1    n     subscript      subscript  x  j    subscript  B  i       K    subscript  x  i    subscript  x  j     superscript   norm     subscript  x  i    subscript  x  j     2       \sum_{i=1}^{n}\sum_{x_{j}\in B_{i}}K(x_{i},x_{j})\left\|x_{i}-x_{j}\right\|^{2}   . Furthermore, we minimize the distortion by minimizing      min   β  ,  B      ∑   i  =  1   n     ∥    x  i   -    ∑    x  j   ∈   B  i      K   (   x  i   ,   x  j   )    x  j      ∥   2     +    γ  1     ∑   i  =  1   n     ∑    x  j   ∈   B  i      K   (   x  i   ,   x  j   )     ∥    x  i   -   x  j    ∥   2       +    γ  2     ∑  i    |   B  i   |            subscript    β  B      subscript   superscript   n     i  1     superscript   norm     subscript  x  i     subscript      subscript  x  j    subscript  B  i       K    subscript  x  i    subscript  x  j     subscript  x  j       2        subscript  γ  1     superscript   subscript     i  1    n     subscript      subscript  x  j    subscript  B  i       K    subscript  x  i    subscript  x  j     superscript   norm     subscript  x  i    subscript  x  j     2          subscript  γ  2     subscript   i      subscript  B  i        \min_{\beta,B}\sum^{n}_{i=1}\left\|x_{i}-\sum_{x_{j}\in B_{i}}K(x_{i},x_{j})x_%
 {j}\right\|^{2}+\gamma_{1}\sum_{i=1}^{n}\sum_{x_{j}\in B_{i}}K(x_{i},x_{j})%
 \left\|x_{i}-x_{j}\right\|^{2}+\gamma_{2}\sum_{i}|B_{i}|   . Finally, we add a regularization term to avoid overfitting. Combining these terms, we can write the minimization problem as follows.      D  ∈   0  ,   1   n  ×  n         D   0   superscript  1    n  n       D\in{0,1}^{n\times n}     where . One formulation of this is defined as follows. Let     D   i  j    =  1       subscript  D    i  j    1    D_{ij}=1   be a matrix such that    x  i     subscript  x  i    x_{i}   means that    x  j     subscript  x  j    x_{j}   and      B  i   =   x  j    :    D   i  j    =  1      normal-:     subscript  B  i    subscript  x  j       subscript  D    i  j    1     B_{i}={x_{j}:D_{ij}=1}   are neighbors. Then,   K   K   K   . Note that these groups must be learned as well. Zhuang et al. solve this problem by an alternating minimization method for    B  i     subscript  B  i    B_{i}   and the groups    ℓ  1     subscript  normal-ℓ  1    \ell_{1}   . For more information, see Zhuang et al. 16  MKL Libraries  Available MKL libraries include   SPG-GMKL : A scalable C++ MKL SVM library that can handle a million kernels. 17  GMKL : Generalized Multiple Kernel Learning code in MATLAB , does    ℓ  2     subscript  normal-ℓ  2    \ell_{2}   and   p   p   p   regularization for supervised learning. 18  (Another) GMKL : A different MATLAB MKL code that can also perform elastic net regularization 19  SMO-MKL : C++ source code for a Sequential Minimal Optimization MKL algorithm. Does $p$ -n orm regularization. 20  SimpleMKL : A MATLAB code based on the SimpleMKL algorithm for MKL SVM. 21   References  "  Category:Machine learning algorithms  Category:Data mining     Lin Chen, Lixin Duan, and Dong Xu, "Event Recognition in Videos by Learning From Heterogeneous Web Sources," in IEEE International Conference on Computer Vision and Pattern Recognition (CVPR), 2013, pp. 2666-2673 ↩  Serhat S. Bucak, Rong Jin, and Anil K. Jain, Multiple Kernel Learning for Visual Object Recognition: A Review. T-PAMI, 2013. ↩  Yu et al. L2-norm multiple kernel learning and its application to biomedical data fusion . BMC Bioinformatics 2010, 11:309 ↩  Francis R. Bach, Gert R. G. Lanckriet, and Michael I. Jordan. 2004. Multiple kernel learning, conic duality, and the SMO algorithm . In Proceedings of the twenty-first international conference on Machine learning (ICML '04). ACM, New York, NY, USA ↩  Mehmet Gönen, Ethem Alpaydın. Multiple Kernel Learning Algorithms Jour. Mach. Learn. Res. 12(Jul):2211−2268, 2011 ↩  Ben-Hur, A. and Noble W.S. Kernel methods for predicting protein-protein interactions. Bioinformatics. 2005 Jun;21 Suppl 1:i38-46. ↩  Hiroaki Tanabe, Tu Bao Ho, Canh Hao Nguyen, and Saori Kawasaki. Simple but effective methods for combining kernels in computational biology. In Proceedings of IEEE International Conference on Research, Innovation and Vision for the Future, 2008. ↩  Shibin Qiu and Terran Lane. A framework for multiple kernel support vector regression and its applications to siRNA efficacy prediction. IEEE/ACM Transactions on Computational Biology and Bioinformatics, 6(2):190–199, 2009 ↩  Gert R. G. Lanckriet, Nello Cristianini, Peter Bartlett, Laurent El Ghaoui, and Michael I. Jordan. Learning the kernel matrix with semidefinite programming. Journal of Machine Learning Research, 5:27–72, 2004a ↩  Gert R. G. Lanckriet, Nello Cristianini, Peter Bartlett, Laurent El Ghaoui, and Michael I. Jordan. Learning the kernel matrix with semidefinite programming. In Proceedings of the 19th International Conference on Machine Learning, 2002 ↩  Mark Girolami and Simon Rogers. Hierarchic Bayesian models for kernel learning. In Proceedings of the 22nd International Conference on Machine Learning, 2005 ↩  Theodoros Damoulas and Mark A. Girolami. Combining feature spaces for classification. Pattern Recognition, 42(11):2671–2683, 2009 ↩  Theodoros Damoulas and Mark A. Girolami. Probabilistic multi-class multi-kernel learning: On protein fold recognition and remote homology detection. Bioinformatics, 24(10):1264–1270, 2008 ↩  Kristin P. Bennett, Michinari Momma, and Mark J. Embrechts. MARK: A boosting algorithm for heterogeneous kernel models. In Proceedings of the 8th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2002 ↩  Wang, Shuhui et al. S3MKL: Scalable Semi-Supervised Multiple Kernel Learning for Real-World Image Applications . IEEE TRANSACTIONS ON MULTIMEDIA, VOL. 14, NO. 4, AUGUST 2012 ↩  J. Zhuang, J. Wang, S.C.H. Hoi & X. Lan. Unsupervised Multiple Kernel Learning . Jour. Mach. Learn. Res. 20:129–144, 2011 ↩  Ashesh Jain, S. V. N. Vishwanathan and Manik Varma. SPG-GMKL: Generalized multiple kernel learning with a million kernels. In Proceedings of the ACM SIGKDD Conference on Knowledge Discovery and Data Mining, Beijing, China, August 2012 ↩  M. Varma and B. R. Babu. More generality in efficient multiple kernel learning. In Proceedings of the International Conference on Machine Learning, Montreal, Canada, June 2009 ↩  Yang, H., Xu, Z., Ye, J., King, I., & Lyu, M. R. (2011). Efficient Sparse Generalized Multiple Kernel Learning. IEEE Transactions on Neural Networks, 22(3), 433-446 ↩  S. V. N. Vishwanathan, Z. Sun, N. Theera-Ampornpunt and M. Varma. Multiple kernel learning and the SMO algorithm. In Advances in Neural Information Processing Systems, Vancouver, B. C., Canada, December 2010. ↩  Alain Rakotomamonjy, Francis Bach, Stephane Canu, Yves Grandvalet. SimpleMKL. Journal of Machine Learning Research, Microtome Publishing, 2008, 9, pp.2491-2521. ↩     