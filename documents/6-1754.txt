   Partially observable Markov decision process      Partially observable Markov decision process   A partially observable Markov decision process (POMDP) is a generalization of a Markov decision process (MDP). A POMDP models an agent decision process in which it is assumed that the system dynamics are determined by an MDP, but the agent cannot directly observe the underlying state. Instead, it must maintain a probability distribution over the set of possible states, based on a set of observations and observation probabilities, and the underlying MDP.  The POMDP framework is general enough to model a variety of real-world sequential decision processes. Applications include robot navigation problems, machine maintenance, and planning under uncertainty in general. The framework originated in the operations research community, and was later taken over by the artificial intelligence and automated planning communities.  An exact solution to a POMDP yields the optimal action for each possible belief over the world states. The optimal action maximizes (or minimizes) the expected reward (or cost) of the agent over a possibly infinite horizon. The sequence of optimal actions is known as the optimal policy of the agent for interacting with its environment.  Definition  Formal definition  A discrete-time POMDP models the relationship between an agent and its environment. Formally, a POMDP is a 7-tuple    (  S  ,  A  ,  T  ,  R  ,  Ω  ,  O  ,  γ  )     S  A  T  R  normal-Ω  O  γ    (S,A,T,R,\Omega,O,\gamma)   , where      S   S   S   is a set of states,     A   A   A   is a set of actions,     T   T   T   is a set of conditional transition probabilities between states,      R  :    S  ×  A   →  ℝ      normal-:  R   normal-→    S  A   ℝ     R:S\times A\to\mathbb{R}   is the reward function.     Ω   normal-Ω   \Omega   is a set of observations,     O   O   O   is a set of conditional observation probabilities, and      γ  ∈   [  0  ,  1  ]       γ   0  1     \gamma\in[0,1]   is the discount factor.   At each time period, the environment is in some state    s  ∈  S      s  S    s\in S   . The agent takes an action    a  ∈  A      a  A    a\in A   , which causes the environment to transition to state    s  ′     superscript  s  normal-′    s^{\prime}   with probability    T   (   s  ′   ∣  s  ,  a  )      fragments  T   fragments  normal-(   superscript  s  normal-′   normal-∣  s  normal-,  a  normal-)     T(s^{\prime}\mid s,a)   . At the same time, the agent receives an observation    o  ∈  Ω      o  normal-Ω    o\in\Omega   which depends on the new state of the environment with probability    O   (  o  ∣   s  ′   ,  a  )      fragments  O   fragments  normal-(  o  normal-∣   superscript  s  normal-′   normal-,  a  normal-)     O(o\mid s^{\prime},a)   . Finally, the agent receives a reward equal to    R   (  s  ,  a  )       R   s  a     R(s,a)   . Then the process repeats. The goal is for the agent to choose actions at each time step that maximize its expected future discounted reward    E   [    ∑   t  =  0   ∞     γ  t    r  t     ]       E   delimited-[]    superscript   subscript     t  0         superscript  γ  t    subscript  r  t        E\left[\sum_{t=0}^{\infty}\gamma^{t}r_{t}\right]   . The discount factor   γ   γ   \gamma   determines how much immediate rewards are favored over more distant rewards. When    γ  =  0      γ  0    \gamma=0   the agent only cares about which action will yield the largest expected immediate reward; when    γ  =  1      γ  1    \gamma=1   the agent cares about maximizing the expected sum of future rewards.  Discussion  Because the agent does not directly observe the environment's state, the agent must make decisions under uncertainty of the true environment state. However, by interacting with the environment and receiving observations, the agent may update its belief in the true state by updating the probability distribution of the current state. A consequence of this property is that the optimal behavior may often include information gathering actions that are taken purely because they improve the agent's estimate of the current state, thereby allowing it to make better decisions in the future.  It is instructive to compare the above definition with the definition of a Markov decision process . An MDP does not include the observation set, because the agent always knows with certainty the environment's current state. Alternatively, an MDP can be reformulated as a POMDP by setting the observation set to be equal to the set of states and defining the observation conditional probabilities to deterministically select the observation that corresponds to the true state.  Belief update  An agent needs to update its belief upon taking the action   a   a   a   and observing   o   o   o   . Since the state is Markovian, maintaining a belief over the states solely requires knowledge of the previous belief state, the action taken, and the current observation. The operation is denoted     b  ′   =   τ   (  b  ,  a  ,  o  )         superscript  b  normal-′     τ   b  a  o      b^{\prime}=\tau(b,a,o)   . Below we describe how this belief update is computed.  After reaching    s  ′     superscript  s  normal-′    s^{\prime}   , the agent observes    o  ∈  Ω      o  normal-Ω    o\in\Omega   with probability    O   (  o  ∣   s  ′   ,  a  )      fragments  O   fragments  normal-(  o  normal-∣   superscript  s  normal-′   normal-,  a  normal-)     O(o\mid s^{\prime},a)   . Let   b   b   b   be a probability distribution over the state space   S   S   S   .    b   (  s  )       b  s    b(s)   denotes the probability that the environment is in state   s   s   s   . Given    b   (  s  )       b  s    b(s)   , then after taking action   a   a   a   and observing   o   o   o   ,       b  ′    (   s  ′   )   =  η  O   (  o  ∣   s  ′   ,  a  )    ∑   s  ∈  S    T   (   s  ′   ∣  s  ,  a  )   b   (  s  )      fragments   superscript  b  normal-′    fragments  normal-(   superscript  s  normal-′   normal-)    η  O   fragments  normal-(  o  normal-∣   superscript  s  normal-′   normal-,  a  normal-)    subscript     s  S    T   fragments  normal-(   superscript  s  normal-′   normal-∣  s  normal-,  a  normal-)   b   fragments  normal-(  s  normal-)     b^{\prime}(s^{\prime})=\eta O(o\mid s^{\prime},a)\sum_{s\in S}T(s^{\prime}\mid
 s%
 ,a)b(s)   where    η  =   1  /   Pr   (  o  ∣  b  ,  a  )         η    1   Pr  o  b  a      \eta=1/\Pr(o\mid b,a)   is a normalizing constant with    Pr   (  o  ∣  b  ,  a  )   =   ∑    s  ′   ∈  S    O   (  o  ∣   s  ′   ,  a  )    ∑   s  ∈  S    T   (   s  ′   ∣  s  ,  a  )   b   (  s  )      fragments  Pr   fragments  normal-(  o  normal-∣  b  normal-,  a  normal-)     subscript      superscript  s  normal-′   S    O   fragments  normal-(  o  normal-∣   superscript  s  normal-′   normal-,  a  normal-)    subscript     s  S    T   fragments  normal-(   superscript  s  normal-′   normal-∣  s  normal-,  a  normal-)   b   fragments  normal-(  s  normal-)     \Pr(o\mid b,a)=\sum_{s^{\prime}\in S}O(o\mid s^{\prime},a)\sum_{s\in S}T(s^{%
 \prime}\mid s,a)b(s)   .  Belief MDP  A Markovian belief state allows a POMDP to be formulated as a Markov decision process where every belief is a state. The resulting belief MDP will thus be defined on a continuous state space, since there are infinite beliefs for any given POMDP. 1 In other words, there are technically infinite belief states (in   B   B   B   ) because there are an infinite number of mixtures of (   S   S   S   ) the originating states.  Formally, the belief MDP is defined as a tuple    (  B  ,  A  ,  τ  ,  r  ,  γ  )     B  A  τ  r  γ    (B,A,\tau,r,\gamma)   where      B   B   B   is the set of belief states over the POMDP states,     A   A   A   is the same finite set of action as for the original POMDP,     τ   τ   \tau   is the belief state transition function,      r  :    B  ×  A   →  ℝ      normal-:  r   normal-→    B  A   ℝ     r:B\times A\to\mathbb{R}   is the reward function on belief states,     γ   γ   \gamma   is the discount factor equal to the   γ   γ   \gamma   in the original POMDP.   Of these,   τ   τ   \tau   and   r   r   r   need to be derived from the original POMDP.   τ   τ   \tau   is      τ   (  b  ,  a  ,   b  ′   )   =   ∑   o  ∈  Ω    P  r   (   b  ′   |  b  ,  a  ,  o  )   Pr   (  o  |  a  ,  b  )   ,     fragments  τ   fragments  normal-(  b  normal-,  a  normal-,   superscript  b  normal-′   normal-)     subscript     o  normal-Ω    P  r   fragments  normal-(   superscript  b  normal-′   normal-|  b  normal-,  a  normal-,  o  normal-)   Pr   fragments  normal-(  o  normal-|  a  normal-,  b  normal-)   normal-,    \tau(b,a,b^{\prime})=\sum_{o\in\Omega}Pr(b^{\prime}|b,a,o)\Pr(o|a,b),     where    Pr   (  o  |  a  ,  b  )      Pr  o  a  b    \Pr(o|a,b)   is the value derived in the previous section and      P  r   (   b  ′   |  b  ,  a  ,  o  )   =   {     1      if the belief update with arguments  b   ,  a  ,   o  returns   b  ′         0    otherwise      .     fragments  P  r   fragments  normal-(   superscript  b  normal-′   normal-|  b  normal-,  a  normal-,  o  normal-)     cases  1     if the belief update with arguments  b   a    o  returns   superscript  b  normal-′     0  otherwise   normal-.    Pr(b^{\prime}|b,a,o)=\begin{cases}1&\text{if the belief update with arguments %
 }b,a,o\text{ returns }b^{\prime}\\
 0&\text{otherwise }\end{cases}.     The belief MDP reward function (   r   r   r   ) is the expected reward from the POMDP reward function over the belief state distribution:       r   (  b  ,  a  )    =    ∑   s  ∈  S     b   (  s  )   R   (  s  ,  a  )           r   b  a      subscript     s  S      b  s  R   s  a       r(b,a)=\sum_{s\in S}b(s)R(s,a)   .  The belief MDP is not partially observable anymore, since at any given time the agent knows its belief, and by extension the state of the belief MDP.  Also, unlike the "originating" MDP, where each action is available from only one state; in the corresponding Belief MDP, all belief states allow all actions, since you (almost) always have some probability of believing you are in any (originating) state.  Policy and Value Function     π   π   \pi   specifies an action    a  =   π   (  b  )        a    π  b     a=\pi(b)   for any belief   b   b   b   . Here it is assumed the objective is to maximize the expected total discounted reward over an infinite horizon. When   R   R   R   defines a cost, the objective becomes the minimization of the expected cost.  The expected reward for policy   π   π   \pi   starting from belief    b  0     subscript  b  0    b_{0}   is defined as       V  π    (   b  0   )   =   ∑   t  =  0   ∞    γ  t   r   (   b  t   ,   a  t   )   =   ∑   t  =  0   ∞    γ  t   E   [  R   (   s  t   ,   a  t   )   ∣   b  0   ,  π  ]      fragments   superscript  V  π    fragments  normal-(   subscript  b  0   normal-)     superscript   subscript     t  0       superscript  γ  t   r   fragments  normal-(   subscript  b  t   normal-,   subscript  a  t   normal-)     superscript   subscript     t  0       superscript  γ  t   E   fragments  normal-[  R   fragments  normal-(   subscript  s  t   normal-,   subscript  a  t   normal-)   normal-∣   subscript  b  0   normal-,  π  normal-]     V^{\pi}(b_{0})=\sum_{t=0}^{\infty}\gamma^{t}r(b_{t},a_{t})=\sum_{t=0}^{\infty}%
 \gamma^{t}E\Bigl[R(s_{t},a_{t})\mid b_{0},\pi\Bigr]   where    γ  <  1      γ  1    \gamma<1   is the discount factor. The optimal policy    π  *     superscript  π     \pi^{*}   is obtained by optimizing the long-term reward.       π  *   =     argmax  𝜋     V  π    (   b  0   )         superscript  π       π  argmax    superscript  V  π    subscript  b  0      \pi^{*}=\underset{\pi}{\mbox{argmax}}\ V^{\pi}(b_{0})   where    b  0     subscript  b  0    b_{0}   is the initial belief.  The optimal policy, denoted by    π  *     superscript  π     \pi^{*}   , yields the highest expected reward value for each belief state, compactly represented by the optimal value function    V  *     superscript  V     V^{*}   . This value function is solution to the Bellman optimality equation :       V  *    (  b  )   =   max   a  ∈  A     [  r   (  b  ,  a  )   +  γ   ∑   o  ∈  Ω    O   (  o  ∣  b  ,  a  )    V  *    (  τ   (  b  ,  a  ,  o  )   )   ]      fragments   superscript  V     fragments  normal-(  b  normal-)     subscript     a  A     fragments  normal-[  r   fragments  normal-(  b  normal-,  a  normal-)    γ   subscript     o  normal-Ω    O   fragments  normal-(  o  normal-∣  b  normal-,  a  normal-)    superscript  V     fragments  normal-(  τ   fragments  normal-(  b  normal-,  a  normal-,  o  normal-)   normal-)   normal-]     V^{*}(b)=\max_{a\in A}\Bigl[r(b,a)+\gamma\sum_{o\in\Omega}O(o\mid b,a)V^{*}(%
 \tau(b,a,o))\Bigr]   For finite-horizon POMDPs, the optimal value function is piecewise-linear and convex. 2 It can be represented as a finite set of vectors. In the infinite-horizon formulation, a finite vector set can approximate    V  *     superscript  V     V^{*}   arbitrarily closely, whose shape remains convex. Value iteration applies dynamic programming update to gradually improve on the value until convergence to an   ϵ   ϵ   \epsilon   -optimal value function, and preserves its piecewise linearity and convexity. 3 By improving the value, the policy is implicitly improved. Another dynamic programming technique called policy iteration explicitly represents and improves the policy instead. 4 5  Approximate POMDP solutions  In practice, POMDPs are often computationally intractable to solve exactly, so computer scientists have developed methods that approximate solutions for POMDPs. 6  Grid-based algorithms 7 comprise one approximate solution technique. In this approach, the value function is computed for a set of points in the belief space, and interpolation is used to determine the optimal action to take for other belief states that are encountered which are not in the set of grid points. More recent work makes use of sampling techniques, generalization techniques and exploitation of problem structure, and has extended POMDP solving into large domains with millions of states 8 9 For example, point-based methods sample random reachable belief points to constrain the planning to relevant areas in the belief space. 10 Dimensionality reduction using PCA has also been explored. 11  POMDP uses  POMDPs model many kinds of real-world problems. Notable works include the use of a POMDP in management of patients with ischemic heart disease, 12 assistive technology for persons with dementia 13 14 and the conservation of the critically endangered and difficult to detect Sumatran tigers. 15  References  External links   Tony Cassandra's POMDP pages with a tutorial, examples of problems modeled as POMDPs, and software for solving them.  zmdp , a POMDP solver by Trey Smith  APPL , a fast point-based POMDP solver  SPUDD , a factored structured (PO)MDP solver that uses algebraic decision diagrams (ADDs).  pyPOMDP , a (PO)MDP toolbox (simulator, solver, learner, file reader) for Python by Oliver Stollmann and Bastian Migge  Finite-state Controllers using Branch-and-Bound An Exact POMDP Solver for Policies of a Bounded Size   "  Category:Dynamic programming  Category:Markov processes  Category:Stochastic control     ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩    ↩     