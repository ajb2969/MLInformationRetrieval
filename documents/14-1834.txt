


Discrete Chebyshev transform




Discrete Chebyshev transform

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In applied mathematics, the discrete Chebyshev transform (DCT), named after Pafnuty Chebyshev, is one of either of two main varieties of DCTs: the discrete Chebyshev transform on the 'roots' grid of the Chebyshev polynomials of the first kind 
 
 
 
 , and the discrete Chebyshev transform on the 'extrema' grid of the Chebyshev polynomials of the first kind.
Discrete Chebyshev transform on the roots grid
The discrete chebyshev transform of u(x) at the points 
 
 
 
  is given by:



where:






where 
 
 
 
  and 
 
 
 
  otherwise.
Using the definition of 
 
 
 
 ,






and its inverse transform:



(This so happens to the standard Chebyshev series evaluated on the roots grid.)






This can readily be obtained by manipulating the input arguments to a discrete cosine transform.
This can be demonstrated using the following MATLAB code:
function a=fct(f,l)
 %x=-cos(pi/N*((0:N-1)'+1/2));
 
 f=f(end:-1:1,:);
 A=size(f); N=A(1); 
 if exist('A(3)','var') && A(3)~=1
     for i=1:A(3)
         
         a(:,:,i)=sqrt(2/N)*dct(f(:,:,i));
         a(1,:,i)=a(1,:,i)/sqrt(2);
       
     end
 else
 
    a=sqrt(2/N)*dct(f(:,:,i));
    a(1,:)=a(1,:)/sqrt(2);
 
 end
The discrete cosine transform (dct) is in fact computed using a fast fourier transform algorithm in MATLAB.
 And the inverse transform is given by the MATLAB code:

function f=ifct(a,l)
 %x=-cos(pi/N*((0:N-1)'+1/2)) 
 k=size(a); N=k(1); 
 
 a=idct(sqrt(N/2)*[a(1,:)*sqrt(2); a(2:end,:)]);
 
 end
Discrete Chebyshev transform on the extrema grid
This transform uses the grid:






This transform is more difficult to implement by use of a Fast Fourier Transform (FFT). However it is more widely used because it is on the extrema grid which tends to be most useful for boundary value problems. Mostly because it is easier to apply boundary conditions on this grid.
There is a discrete (and in fact fast because it performs the dct by using a fast fourier transform) available at the MATLAB file exchange that was created by Greg von Winckel. So it is omitted here.
In this case the transform and its inverse are






where 
 
 
 
  and 
 
 
 
 
  otherwise.
See Also

Chebyshev polynomials
Discrete cosine transform
Discrete Fourier transform
List of Fourier-related transforms

"
Category:Transforms Category:Articles with example MATLAB/Octave code

