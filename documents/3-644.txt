   Maximum flow problem      Maximum flow problem   thumb|upright=1.5|A network with an example of maximum flow. The source is s , and the sink t . The numbers denote flow and capacity. In optimization theory , maximum flow problems involve finding a feasible flow through a single-source, single-sink flow network that is maximum.  The maximum flow problem can be seen as a special case of more complex network flow problems, such as the circulation problem . The maximum value of an s-t flow (i.e., flow from source s to sink t) is equal to the minimum capacity of an s-t cut (i.e., cut severing s from t) in the network, as stated in the max-flow min-cut theorem .  History  The maximum flow problem was first formulated in 1954 by T. E. Harris and F. S. Ross as a simplified model of Soviet railway traffic flow. 1 2 3 In 1955, Lester R. Ford, Jr. and Delbert R. Fulkerson created the first known algorithm, the Ford–Fulkerson algorithm . 4 5  Over the years, various improved solutions to the maximum flow problem were discovered, notably the shortest augmenting path algorithm of Edmonds and Karp and independently Dinitz; the blocking flow algorithm of Dinitz; the push-relabel algorithm of Goldberg and Tarjan ; and the binary blocking flow algorithm of Goldberg and Rao. The electrical flow algorithm of Christiano, Kelner, Madry, and Spielman finds an approximately optimal maximum flow but only works in undirected graphs. 6 7  Definition  thumb|upright=0.8|A flow network, with source s and sink t. The numbers next to the edge are the capacities. Let    N  =   (  V  ,  E  )       N   V  E     \scriptstyle N=(V,E)   be a network with     s  ,  t   ∈  V       s  t   V    \scriptstyle s,t\in V   being the source and the sink of   N   N   \scriptstyle N   respectively.   The capacity of an edge is a mapping    c  :   E  →   ℝ  +       normal-:  c   normal-→  E   superscript  ℝ       \scriptstyle c:E\to\mathbb{R}^{+}   , denoted by    c   u  v      subscript  c    u  v     \scriptstyle c_{uv}   or    c   (  u  ,  v  )       c   u  v     \scriptstyle c(u,v)   . It represents the maximum amount of flow that can pass through an edge.    A flow is a mapping    f  :   E  →   ℝ  +       normal-:  f   normal-→  E   superscript  ℝ       \scriptstyle f:E\to\mathbb{R}^{+}   , denoted by    f   u  v      subscript  f    u  v     \scriptstyle f_{uv}   or    f   (  u  ,  v  )       f   u  v     \scriptstyle f(u,v)   , subject to the following two constraints:  1.     f   u  v    ≤   c   u  v         subscript  f    u  v     subscript  c    u  v      \scriptstyle f_{uv}\leq c_{uv}   , for each     (  u  ,  v  )   ∈  E       u  v   E    \scriptstyle(u,v)\in E   (capacity constraint: the flow of an edge cannot exceed its capacity)  2.      ∑   u  :    (  u  ,  v  )   ∈  E      f   u  v     =    ∑   u  :    (  v  ,  u  )   ∈  E      f   v  u           subscript    normal-:  u     u  v   E      subscript  f    u  v       subscript    normal-:  u     v  u   E      subscript  f    v  u       \scriptstyle\sum_{u:(u,v)\in E}f_{uv}=\sum_{u:(v,u)\in E}f_{vu}   , for each    v  ∈   V  ∖   {  s  ,  t  }        v    V   s  t      \scriptstyle v\in V\setminus\{s,t\}   (conservation of flows: the sum of the flows entering a node must equal the sum of the flows exiting a node, except for the source and the sink nodes)      The value of flow is defined by     |  f  |   =    ∑   v  :    (  s  ,  v  )   ∈  E      f   s  v           f     subscript    normal-:  v     s  v   E      subscript  f    s  v       \scriptstyle|f|=\sum_{v:(s,v)\in E}f_{sv}   , where   s   s   \scriptstyle s   is the source of   N   N   \scriptstyle N   . It represents the amount of flow passing from the source to the sink.   The maximum flow problem is to maximize    |  f  |      f    \scriptstyle|f|   , that is, to route as much flow as possible from   s   s   \scriptstyle s   to   t   t   \scriptstyle t   .  Solutions  We can define the Residual Graph , which provides a systematic way to search for forward-backward operations in order to find the maximum flow.  Given a flow network   G   G   \scriptstyle G   , and a flow   f   f   \scriptstyle f   on   G   G   \scriptstyle G   , we define the residual graph    G  f     subscript  G  f    \scriptstyle G_{f}   of   G   G   \scriptstyle G   with respect to   f   f   \scriptstyle f   as follows.  1. The node set of    G  f     subscript  G  f    \scriptstyle G_{f}   is the same as that of   G   G   \scriptstyle G   .  2. Each edge    e  =   (  u  ,  v  )       e   u  v     \scriptstyle e=(u,v)   of    G  f     subscript  G  f    \scriptstyle G_{f}   is with a capacity of     c  e   -   f   (  e  )         subscript  c  e     f  e     \scriptstyle c_{e}-f(e)   .  3. Each edge     e  ′   =   (  v  ,  u  )        superscript  e  normal-′    v  u     \scriptstyle e^{\prime}=(v,u)   of    G  f     subscript  G  f    \scriptstyle G_{f}   is with a capacity of    f   (  e  )       f  e    \scriptstyle f(e)   .  The following table lists algorithms for solving the maximum flow problem.      Method   Complexity   Description       Linear programming    Constraints given by the definition of a legal flow . See the linear program here.     Ford–Fulkerson algorithm   O ( E max| f |)   As long as there is an open path through the residual graph, send the minimum of the residual capacities on the path. The algorithm is only guaranteed to terminate if all weights are rational . Otherwise it is possible that the algorithm will not converge to the maximum value. However, if the algorithm terminates, it is guaranteed to find the maximum value.     Edmonds–Karp algorithm   O ( VE 2 )   A specialization of Ford–Fulkerson, finding augmenting paths with breadth-first search .     Dinic's blocking flow algorithm   O ( V 2 E )   In each phase the algorithms builds a layered graph with breadth-first search on the residual graph . The maximum flow in a layered graph can be calculated in O ( VE ) time, and the maximum number of the phases is n -1. In networks with unit capacities, Dinic's algorithm terminates in    O   (   E   V    )       O    E    V      \scriptscriptstyle O(E\sqrt{V})   time.     MPM (Malhotra, Pramodh-Kumar and Maheshwari) algorithm 8   O ( V 3 )   Refer to the Original Paper .     Dinic's algorithm   O ( VE log( V ))   The dynamic trees data structure speeds up the maximum flow computation in the layered graph to O ( E log( V )).     General push-relabel maximum flow algorithm   O ( V 2 E )   The push relabel algorithm maintains a preflow, i.e. a flow function with the possibility of excess in the vertices. The algorithm runs while there is a vertex with positive excess, i.e. an active vertex in the graph. The push operation increases the flow on a residual edge, and a height function on the vertices controls which residual edges can be pushed. The height function is changed with a relabel operation. The proper definitions of these operations guarantee that the resulting flow function is a maximum flow.     Push-relabel algorithm with FIFO vertex selection rule   O ( V 3 )   Push-relabel algorithm variant which always selects the most recently active vertex, and performs push operations until the excess is positive or there are admissible residual edges from this vertex.     Push-relabel algorithm with dynamic trees   O ( VE log( V 2 / E ))   The algorithm builds limited size trees on the residual graph regarding to height function. These trees provide multilevel push operations.     KRT (King, Rao, Tarjan)'s algorithm 9       O   (   E  V    log    E  /  V    log  V     V    )       O    E  V    subscript       E  V     V     V      \scriptscriptstyle O(EV\log_{E/V\log V}V)         Binary blocking flow algorithm 10       O   (   E   min   (   V   2  /  3    ,   E   )     log   (    V  2   /  E   )     log  U    )       O    E     superscript  V    2  3      E         superscript  V  2   E      U      \scriptscriptstyle O(E\min(V^{2/3},\sqrt{E})\log(V^{2}/E)\log{U})      The value U corresponds to the maximum capacity of the network.     Jim Orlin's + KRT (King, Rao, Tarjan)'s algorithm 11       O   (   V  E   )       O    V  E     \scriptscriptstyle O(VE)      Orlin's algorithm solves max-flow in O ( VE ) time for    E  ≤   O   (   V    16  15   -  ϵ    )        E    O   superscript  V      16  15   ϵ       E\leq O(V^{{16\over 15}-\epsilon})   while KRT solves it in O ( VE ) for    E  >   V   1  +  ϵ        E   superscript  V    1  ϵ      E>V^{1+\epsilon}   .     For a more extensive list, see 12  Integral flow theorem  The integral flow theorem states that   If each edge in a flow network has integral capacity, then there exists an integral maximal flow.    Application  Multi-source multi-sink maximum flow problem  Given a network N = ( V , E ) with a set of sources S = { s 1 , ..., s n } and a set of sinks T = { t 1 , ..., t m } instead of only one source and one sink, we are to find the maximum flow across N . We can transform the multi-source multi-sink problem into a maximum flow problem by adding a consolidated source connecting to each vertex in S and a ''consolidated sink ''connected by each vertex in T (also known as supersource and supersink ) with infinite capacity on each edge (See Fig. 4.1.1.).  Minimum path cover in directed acyclic graph  Given a directed acyclic graph  G = ( V , E ), we are to find the minimum number of vertex-disjoint paths to cover each vertex in V . We can construct a bipartite graph G ' = ( V out ∪ V in , E ' ) from G , where   V out = { v ∈ V : v has positive out-degree}.  V in = { v ∈ V : v has positive in-degree}.  E ' = {( u , v )∈ V out × V in : ( u , v )∈ E }.   Then it can be shown, via König's theorem , that G ' has a matching of size m if and only if there exists n - m vertex-disjoint paths that cover each vertex in G , where n is the number of vertices in G . Therefore, the problem can be solved by finding the maximum cardinality matching in G ' instead.  Maximum cardinality bipartite matching  Given a bipartite graph  G = ( X ∪ Y , E ), we are to find a maximum cardinality matching in G , that is a matching that contains the largest possible number of edges. This problem can be transformed into a maximum flow problem by constructing a network N = ( X ∪ Y ∪{ s , t ), E ' }, where   E ' contains the edges in G directed from X to Y .  ( s , x )∈ E ' for each x ∈ X and ( y , t )∈ E ' for each y ∈ Y .  c ( e ) = 1 for each e ∈ E ' (See Fig. 4.3.1).   Then the value of the maximum flow in N is equal to the size of the maximum matching in G .  Maximum flow problem with vertex capacities  Given a network    N  =   (  V  ,  E  )       N   V  E     N=(V,E)   , in which there is capacity at each node in addition to edge capacity, that is, a mapping    c  :   V  ↦   ℝ  +       normal-:  c   maps-to  V   superscript  ℝ       c:V\mapsto\mathbb{R}^{+}   , denoted by    c   (  v  )       c  v    c(v)   , such that the flow   f   f   f   has to satisfy not only the capacity constraint and the conservation of flows, but also the vertex capacity constraint          ∑   i  ∈  V     f   i  v     ≤   c   (  v  )       ∀  v   ∈   V  \   {  s  ,  t  }        formulae-sequence      subscript     i  V     subscript  f    i  v       c  v       for-all  v    normal-\  V   s  t       \sum_{i\in V}f_{iv}\leq c(v)\qquad\forall v\in V\backslash\{s,t\}   .   In other words, the amount of flow passing through a vertex cannot exceed its capacity. To find the maximum flow across   N   N   N   , we can transform the problem into the maximum flow problem in the original sense by expanding   N   N   N   . First, each    v  ∈  V      v  V    v\in V   is replaced by    v  in     subscript  v  in    v_{\text{in}}   and    v  out     subscript  v  out    v_{\text{out}}   , where    v  in     subscript  v  in    v_{\text{in}}   is connected by edges going into   v   v   v   and    v  out     subscript  v  out    v_{\text{out}}   is connected to edges coming out from   v   v   v   , then assign capacity    c   (  v  )       c  v    c(v)   to the edge connecting    v  in     subscript  v  in    v_{\text{in}}   and    v  out     subscript  v  out    v_{\text{out}}   (see Fig. 4.4.1, but note that it has incorrectly swapped    v  in     subscript  v  in    v_{\text{in}}   and    v  out     subscript  v  out    v_{\text{out}}   ). In this expanded network, the vertex capacity constraint is removed and therefore the problem can be treated as the original maximum flow problem.  Maximum edge-disjoint path  Given a directed graph G = ( V , E ) and two vertices s and t , we are to find the maximum number of edge-disjoint paths from s to t . This problem can be transformed to a maximum flow problem by constructing a network N = ( V , E ) from G with s and t being the source and the sink of N respectively and assign each edge with unit capacity.  Maximum independent (vertex-disjoint) path  Given a directed graph G = ( V , E ) and two vertices s and t , we are to find the maximum number of independent paths from s to t . Two paths are said to be independent if they do not have a vertex in common apart from s and t . We can construct a network N = ( V , E ) from G with vertex capacities, where   s and t are the source and the sink of N respectively.  c ( v ) = 1 for each v ∈ V .  c ( e ) = 1 for each e ∈ E .   Then the value of the maximum flow is equal to the maximum number of independent paths from s to t .  Real world applications  Baseball Elimination  In the Baseball Elimination Problem there are n teams competing in a league. At a specific stage of the league season, w i is the number of wins and r i is the number of games left to play for team i and r ij is the number of games left against team j . A team is eliminated if it has no chance to finish the season in the first place. The task of Baseball Elimination Problem is to determine which teams are eliminated at each point during the season. Schwartz 13 proposed a method which reduces this problem to maximum network flow. In this method a network is created to determine whether team k is eliminated.  Let G = ( V , E ) be a network with s , t ∈ V being the source and the sink respectively. We add a game node { i , j } with i ij — which represents the number of plays between these two teams. We also add a team node for each team and connect each game node { i , j } with to team nodes i and j to ensure one of them wins. We do not need to restrict the flow value on these edges. Finally, we make edges from team node i to the sink node t and set the capacity of w k + r k – w i to prevent team i from winning more than w k + r k . Let S be the set of all team participating in the league and let     r   (   S  -   {  k  }    )    =    ∑     i  ,  j   ∈   {   S  -   {  k  }    }    ,   i  <  j      r   i  j           r    S   k       subscript    formulae-sequence     i  j      S   k        i  j      subscript  r    i  j       \scriptstyle r(S-\{k\})=\sum_{i,j\in\{S-\{k\}\},i   . In this method it is claimed team k is not eliminated if and only if a flow value of size r ( S - { k }) exists in network G . In the mentioned article it is proved that this flow value is the maximum flow value from s to t .  Airline scheduling  In the airline industry a major problem is the scheduling of the flight crews. Airline scheduling problem could be considered as an application of extended maximum network flow. The input of this problem is a set of flights F which contains the information about where and when each flight departs and arrives. In one version of Airline Scheduling the goal is to produce a feasible schedule with at most k crews.  In order to solve this problem we use a variation of circulation problem called bounded circulation which is the generalization of network flow problems, with the added constraint of a lower bound on edge flows.  Let G = ( V , E ) be a network with s , t ∈ V as the source and the sink nodes. For the source and destination of every flight i we add two nodes to V , node s i as the source and node d i as the destination node of flight i . We also add the following edges to E :   An edge with capacity [0, 1] between s and each s i .  An edge with capacity [0, 1] between each d i and t .  An edge with capacity [1, 1] between each pair of s i and d i .  An edge with capacity [0, 1] between each d i and s j , if source s j is reachable with a reasonable amount of time and cost from the destination of flight i .  An edge with capacity [0, ∞ ] between s and t .   In the mentioned method, it is claimed and proved that finding a flow value of k in G between s and t is equal to finding a feasible schedule for flight set F with at most k crews. 14  Another version of Airline Scheduling is finding the minimum needed crews to perform all the flights. In order to find an answer to this problem we create a bipartite graph G’ = ( A ∪ B , E ) where each flight has a copy in set A and set B . If the same plane can perform flight j after flight i , connect i ∈ A to j ∈ B . A matching in G’ induces a schedule for F and obviously maximum bipartite matching in this graph produces the an airline schedule with minimum number of crews. 15 As it is mentioned in the Application part of this article, the maximum cardinality bipartite matching is an application of maximum flow problem.  Circulation-demand problem  There are some factories that produce goods and some villages where the goods have to be delivered. They are connected by a networks of roads with each road having a capacity   c   c   c   for maximum goods that can flow through it. The problem is to find if there is a circulation that satisfies the demand. This problem can be transformed into a max-flow problem.   Add a source node   s   s   s   and add edges from it to every factory node    f  i     subscript  f  i    f_{i}   with capacity    p  i     subscript  p  i    p_{i}   where    p  i     subscript  p  i    p_{i}   is the production rate of factory    f  i     subscript  f  i    f_{i}   .  Add a sink node   t   t   t   and add edges from all villages    v  i     subscript  v  i    v_{i}   to   t   t   t   with capacity    d  i     subscript  d  i    d_{i}   where    d  i     subscript  d  i    d_{i}   is the demand rate of village    v  i     subscript  v  i    v_{i}   .   Let G = ( V , E ) be this new network. There exists a circulation that satisfies the demand if and only if :       MaximumFlowValue   (  G  )    =    ∑   i  ∈  v     d  i         MaximumFlowValue  G     subscript     i  v     subscript  d  i      \operatorname{MaximumFlowValue}\,(G)=\sum_{i\in v}d_{i}   If there exists a circulation, looking at the max-flow solution would give us the answer as to how much goods have to be send on a particular road for satisfying the demands.  Fairness in car sharing (carpool)  The problem exactly is that   N   N   N   people are pooling a car for   k   k   k   days. Each participant can choose if he participates on each day. We aim to fairly decide who will be driving on a given day. The solution is the following: We can decide this on the basis of the number of people using the car i.e.; if   m   m   m   people use the car on a day, each person has a responsibility of    1  /  m      1  m    1/m   . Thus, for every person   i   i   i   , his driving obligation    D  i     subscript  D  i    D_{i}   as shown. Then person   i   i   i   is required to drive only    [   D  i   ]     delimited-[]   subscript  D  i     [D_{i}]   times in   k   k   k   days. Our aim is to ﬁnd if such a setting is possible. For this we try to model the problem as a network. Now, it can be proved that if a ﬂow   k   k   k   exists then such a fair setting exists and such a ﬂow of value   k   k   k   always exists.  See also   Closure problem  Minimum-cost flow problem   References  Further reading       "  Category:Network flow  Category:Mathematical problems     ↩  ↩  ↩  ↩  Ford, L.R., Jr.; Fulkerson, D.R., Flows in Networks , Princeton University Press (1962). ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩      