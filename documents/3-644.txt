


Maximum flow problem




Maximum flow problem

thumb|upright=1.5|A network with an example of maximum flow. The source is s, and the sink t. The numbers denote flow and capacity. In optimization theory, maximum flow problems involve finding a feasible flow through a single-source, single-sink flow network that is maximum.
The maximum flow problem can be seen as a special case of more complex network flow problems, such as the circulation problem. The maximum value of an s-t flow (i.e., flow from source s to sink t) is equal to the minimum capacity of an s-t cut (i.e., cut severing s from t) in the network, as stated in the max-flow min-cut theorem.
History
The maximum flow problem was first formulated in 1954 by T. E. Harris and F. S. Ross as a simplified model of Soviet railway traffic flow.123 In 1955, Lester R. Ford, Jr. and Delbert R. Fulkerson created the first known algorithm, the Ford–Fulkerson algorithm.45
Over the years, various improved solutions to the maximum flow problem were discovered, notably the shortest augmenting path algorithm of Edmonds and Karp and independently Dinitz; the blocking flow algorithm of Dinitz; the push-relabel algorithm of Goldberg and Tarjan; and the binary blocking flow algorithm of Goldberg and Rao. The electrical flow algorithm of Christiano, Kelner, Madry, and Spielman finds an approximately optimal maximum flow but only works in undirected graphs.67
Definition
thumb|upright=0.8|A flow network, with source s and sink t. The numbers next to the edge are the capacities. Let 
 
 
 
  be a network with 
 
 
 
  being the source and the sink of 
 
 
 
  respectively.

The capacity of an edge is a mapping 
 
 
 
 , denoted by 
 
 
 
  or 
 
 
 
 . It represents the maximum amount of flow that can pass through an edge.
 


A flow is a mapping 
 
 
 
 , denoted by 
 
 
 
  or 
 
 
 
 , subject to the following two constraints:
 
1. 
 
 
 
 , for each 
 
 
 
  (capacity constraint: the flow of an edge cannot exceed its capacity)
 
2. 
 
 
 
 , for each 
 
 
 
  (conservation of flows: the sum of the flows entering a node must equal the sum of the flows exiting a node, except for the source and the sink nodes)
 




The value of flow is defined by 
 
 
 
 , where 
 
 
 
  is the source of 
 
 
 
 . It represents the amount of flow passing from the source to the sink.
 

The maximum flow problem is to maximize 
 
 
 
 , that is, to route as much flow as possible from 
 
 
 
  to 
 
 
 
 .
Solutions
We can define the Residual Graph, which provides a systematic way to search for forward-backward operations in order to find the maximum flow.
Given a flow network 
 
 
 
 , and a flow 
 
 
 
  on 
 
 
 
 , we define the residual graph 
 
 
 
  of 
 
 
 
  with respect to 
 
 
 
  as follows.
1. The node set of 
 
 
 
  is the same as that of 
 
 
 
 .
2. Each edge 
 
 
 
  of 
 
 
 
  is with a capacity of 
 
 
 
 .
3. Each edge 
 
 
 
  of 
 
 
 
  is with a capacity of 
 
 
 
 .
The following table lists algorithms for solving the maximum flow problem.




Method

Complexity

Description





Linear programming


Constraints given by the definition of a legal flow. See the linear program here.



Ford–Fulkerson algorithm

O(E max| f |)

As long as there is an open path through the residual graph, send the minimum of the residual capacities on the path. The algorithm is only guaranteed to terminate if all weights are rational. Otherwise it is possible that the algorithm will not converge to the maximum value. However, if the algorithm terminates, it is guaranteed to find the maximum value.



Edmonds–Karp algorithm

O(VE2)

A specialization of Ford–Fulkerson, finding augmenting paths with breadth-first search.



Dinic's blocking flow algorithm

O(V2E)

In each phase the algorithms builds a layered graph with breadth-first search on the residual graph. The maximum flow in a layered graph can be calculated in O(VE) time, and the maximum number of the phases is n-1. In networks with unit capacities, Dinic's algorithm terminates in 
 
 
 
  time.



MPM (Malhotra, Pramodh-Kumar and Maheshwari) algorithm8

O(V3)

Refer to the Original Paper.



Dinic's algorithm

O(VE log(V))

The dynamic trees data structure speeds up the maximum flow computation in the layered graph to O(Elog(V)).



General push-relabel maximum flow algorithm

O(V2E)

The push relabel algorithm maintains a preflow, i.e. a flow function with the possibility of excess in the vertices. The algorithm runs while there is a vertex with positive excess, i.e. an active vertex in the graph. The push operation increases the flow on a residual edge, and a height function on the vertices controls which residual edges can be pushed. The height function is changed with a relabel operation. The proper definitions of these operations guarantee that the resulting flow function is a maximum flow.



Push-relabel algorithm with FIFO vertex selection rule

O(V3)

Push-relabel algorithm variant which always selects the most recently active vertex, and performs push operations until the excess is positive or there are admissible residual edges from this vertex.



Push-relabel algorithm with dynamic trees

O(VE log(V2/E))

The algorithm builds limited size trees on the residual graph regarding to height function. These trees provide multilevel push operations.



KRT (King, Rao, Tarjan)'s algorithm9








Binary blocking flow algorithm10





The value U corresponds to the maximum capacity of the network.



Jim Orlin's + KRT (King, Rao, Tarjan)'s algorithm11





Orlin's algorithm solves max-flow in O(VE) time for 
 
 
 
  while KRT solves it in O(VE) for 
 
 
 
 .



For a more extensive list, see12
Integral flow theorem
The integral flow theorem states that

If each edge in a flow network has integral capacity, then there exists an integral maximal flow.


Application
Multi-source multi-sink maximum flow problem
 Given a network N = (V,E) with a set of sources S = {s1, ..., sn} and a set of sinks T = {t1, ..., tm} instead of only one source and one sink, we are to find the maximum flow across N. We can transform the multi-source multi-sink problem into a maximum flow problem by adding a consolidated source connecting to each vertex in S and a ''consolidated sink ''connected by each vertex in T (also known as supersource and supersink) with infinite capacity on each edge (See Fig. 4.1.1.).
Minimum path cover in directed acyclic graph
Given a directed acyclic graph G = (V, E), we are to find the minimum number of vertex-disjoint paths to cover each vertex in V. We can construct a bipartite graph G' = (Vout∪Vin, E' ) from G, where

Vout = {v∈V: v has positive out-degree}.
Vin = {v∈V: v has positive in-degree}.
E' = {(u,v)∈Vout×Vin: (u,v)∈E}.

Then it can be shown, via König's theorem, that G' has a matching of size m if and only if there exists n-m vertex-disjoint paths that cover each vertex in G, where n is the number of vertices in G. Therefore, the problem can be solved by finding the maximum cardinality matching in G' instead.
Maximum cardinality bipartite matching
 Given a bipartite graph G = (X∪Y, E), we are to find a maximum cardinality matching in G, that is a matching that contains the largest possible number of edges. This problem can be transformed into a maximum flow problem by constructing a network N = (X∪Y∪{s,t), E' }, where

E' contains the edges in G directed from X to Y.
(s,x)∈E' for each x∈X and (y,t)∈E' for each y∈Y.
c(e) = 1 for each e∈E' (See Fig. 4.3.1).

Then the value of the maximum flow in N is equal to the size of the maximum matching in G.
Maximum flow problem with vertex capacities
 Given a network 
 
 
 
 , in which there is capacity at each node in addition to edge capacity, that is, a mapping 
 
 
 
 , denoted by 
 
 
 
 , such that the flow 
 
 
 
  has to satisfy not only the capacity constraint and the conservation of flows, but also the vertex capacity constraint



 
 .

In other words, the amount of flow passing through a vertex cannot exceed its capacity. To find the maximum flow across 
 
 
 
 , we can transform the problem into the maximum flow problem in the original sense by expanding 
 
 
 
 . First, each 
 
 
 
  is replaced by 
 
 
 
  and 
 
 
 
 , where 
 
 
 
  is connected by edges going into 
 
 
 
  and 
 
 
 
  is connected to edges coming out from 
 
 
 
 , then assign capacity 
 
 
 
  to the edge connecting 
 
 
 
  and 
 
 
 
  (see Fig. 4.4.1, but note that it has incorrectly swapped 
 
 
 
  and 
 
 
 
 ). In this expanded network, the vertex capacity constraint is removed and therefore the problem can be treated as the original maximum flow problem.
Maximum edge-disjoint path
Given a directed graph G = (V, E) and two vertices s and t, we are to find the maximum number of edge-disjoint paths from s to t. This problem can be transformed to a maximum flow problem by constructing a network N = (V, E) from G with s and t being the source and the sink of N respectively and assign each edge with unit capacity.
Maximum independent (vertex-disjoint) path
Given a directed graph G = (V, E) and two vertices s and t, we are to find the maximum number of independent paths from s to t. Two paths are said to be independent if they do not have a vertex in common apart from s and t. We can construct a network N = (V, E) from G with vertex capacities, where

s and t are the source and the sink of N respectively.
c(v) = 1 for each v∈V.
c(e) = 1 for each e∈E.

Then the value of the maximum flow is equal to the maximum number of independent paths from s to t.
Real world applications
Baseball Elimination
In the Baseball Elimination Problem there are n teams competing in a league. At a specific stage of the league season, wi is the number of wins and ri is the number of games left to play for team i and rij is the number of games left against team j. A team is eliminated if it has no chance to finish the season in the first place. The task of Baseball Elimination Problem is to determine which teams are eliminated at each point during the season. Schwartz13 proposed a method which reduces this problem to maximum network flow. In this method a network is created to determine whether team k is eliminated.
Let G = (V, E) be a network with s,t ∈ V being the source and the sink respectively. We add a game node {i,j} with i ij — which represents the number of plays between these two teams. We also add a team node for each team and connect each game node {i,j} with to team nodes i and j to ensure one of them wins. We do not need to restrict the flow value on these edges. Finally, we make edges from team node i to the sink node t and set the capacity of wk+rk–wi to prevent team i from winning more than wk+rk. Let S be the set of all team participating in the league and let 
 
 
 
 . In this method it is claimed team k is not eliminated if and only if a flow value of size r(S - {k}) exists in network G. In the mentioned article it is proved that this flow value is the maximum flow value from s to t.
Airline scheduling
In the airline industry a major problem is the scheduling of the flight crews. Airline scheduling problem could be considered as an application of extended maximum network flow. The input of this problem is a set of flights F which contains the information about where and when each flight departs and arrives. In one version of Airline Scheduling the goal is to produce a feasible schedule with at most k crews.
In order to solve this problem we use a variation of circulation problem called bounded circulation which is the generalization of network flow problems, with the added constraint of a lower bound on edge flows.
Let G = (V, E) be a network with s,t ∈ V as the source and the sink nodes. For the source and destination of every flight i we add two nodes to V, node si as the source and node di as the destination node of flight i. We also add the following edges to E:

An edge with capacity [0, 1] between s and each si.
An edge with capacity [0, 1] between each di and t.
An edge with capacity [1, 1] between each pair of si and di.
An edge with capacity [0, 1] between each di and sj, if source sj is reachable with a reasonable amount of time and cost from the destination of flight i.
An edge with capacity [0, ∞] between s and t.

In the mentioned method, it is claimed and proved that finding a flow value of k in G between s and t is equal to finding a feasible schedule for flight set F with at most k crews.14
Another version of Airline Scheduling is finding the minimum needed crews to perform all the flights. In order to find an answer to this problem we create a bipartite graph G’ = (A ∪ B, E) where each flight has a copy in set A and set B. If the same plane can perform flight j after flight i, connect i∈A to j∈B. A matching in G’ induces a schedule for F and obviously maximum bipartite matching in this graph produces the an airline schedule with minimum number of crews.15 As it is mentioned in the Application part of this article, the maximum cardinality bipartite matching is an application of maximum flow problem.
Circulation-demand problem
There are some factories that produce goods and some villages where the goods have to be delivered. They are connected by a networks of roads with each road having a capacity 
 
 
 
  for maximum goods that can flow through it. The problem is to find if there is a circulation that satisfies the demand. This problem can be transformed into a max-flow problem.

Add a source node 
 
 
 
  and add edges from it to every factory node 
 
 
 
  with capacity 
 
 
 
  where 
 
 
 
  is the production rate of factory 
 
 
 
 .
Add a sink node 
 
 
 
  and add edges from all villages 
 
 
 
  to 
 
 
 
  with capacity 
 
 
 
  where 
 
 
 
  is the demand rate of village 
 
 
 
 .

Let G = (V, E) be this new network. There exists a circulation that satisfies the demand if and only if :


 
  If there exists a circulation, looking at the max-flow solution would give us the answer as to how much goods have to be send on a particular road for satisfying the demands.
Fairness in car sharing (carpool)
The problem exactly is that 
 
 
 
  people are pooling a car for 
 
 
 
  days. Each participant can choose if he participates on each day. We aim to fairly decide who will be driving on a given day.
 The solution is the following:
 We can decide this on the basis of the number of people using the car i.e.; if 
 
 
 
  people use the car on a day, each person has a responsibility of 
 
 
 
 . Thus, for every person 
 
 
 
 , his driving obligation 
 
 
 
  as shown. Then person 
 
 
 
  is required to drive only 
 
 
 
  times in 
 
 
 
  days.
 Our aim is to ﬁnd if such a setting is possible. For this we try to model the problem as a network.
 Now, it can be proved that if a ﬂow 
 
 
 
  exists then such a fair setting exists and such a ﬂow of value 
 
 
 
  always exists.
See also

Closure problem
Minimum-cost flow problem

References
Further reading





"
Category:Network flow Category:Mathematical problems



↩
↩
↩
↩
Ford, L.R., Jr.; Fulkerson, D.R., Flows in Networks, Princeton University Press (1962).↩
↩
↩
↩
↩
↩
↩
↩
↩
↩





