


Conjunctive query




Conjunctive query

In database theory, a conjunctive query is a restricted form of first-order queries. Many first-order queries can be written as conjunctive queries. In particular, a large part of queries issued on relational databases can be expressed in this way. Conjunctive queries also have a number of desirable theoretical properties that larger classes of queries (e.g., the relational algebra queries) do not share.
Definition
The conjunctive queries are simply the fragment of (domain independent) first-order logic given by the set of formulae that can be constructed from atomic formulae using conjunction

 
  and existential quantification

 
 , but not using disjunction

 
 , negation

 
 , or universal quantification

 
 . Each such formula can be rewritten (efficiently) into an equivalent formula in prenex normal form, thus this form is usually simply assumed.
Thus conjunctive queries are of the following general form:


 
 ,
with the free variables

 
  being called distinguished variables, and the bound variables

 
  being called undistinguished variables. 
 
 
 
  are atomic formulae. Conjunctive queries without distinguished variables are called boolean conjunctive queries.
As an example of why the restriction to domain independent first-order logic is important, consider 
 
 
 
 , which is not domain independent; see Codd's theorem. This formula cannot be implemented in the select-project-join fragment of relational algebra, and hence should not be considered a conjunctive query.
Conjunctive queries can express a large part of queries, which are frequently issued on relational databases. To give an example, imagine a relational database for storing information about students, their address, the courses they visit and their gender. Finding all male students and their addresses who attend a course that is also attended by a female student is expressed by the following conjunctive query:

   (student, address) . (student2, course) .
      attends(student, course)  gender(student, 'male')  
      attends(student2, course) 
      gender(student2, 'female')  lives(student, address)
 
Note that since the only entity of interest is the male student and his address, these are the only distinguished variables, while the variables course, student2 are only existentially quantified, i.e. undistinguished.
Relationship to other query languages
Conjunctive queries also correspond to select-project-join queries in relational algebra (i.e., relational algebra queries that do not use the operations union or difference) and to select-from-where queries in SQL in which the where-condition uses exclusively conjunctions of atomic equality conditions, i.e. conditions constructed from column names and constants using no comparison operators other than "=", combined using "and". Notably, this excludes the use of aggregation and subqueries. For example, the above query can be written as an SQL query of the conjunctive query fragment as 
   select l.student, l.address
   from attends a1, gender g1,
        attends a2, gender g2,
        lives l
   where a1.student=g1.student
   and   a2.student=g2.student
   and   l.student=g1.student
   and   a1.course=a2.course
   and   g1.gender='male'
   and   g2.gender='female';
 
Conjunctive queries and datalog
Besides their logical notation, conjunctive queries can also be written as datalog rules. Many authors in fact prefer the following datalog notation for the query above:

   result(student, address) :- attends(student, course),  gender(student, male),
                               attends(student2, course), gender(student2, female),
                               lives(student, address).
 
Although there are no quantifiers in this notation, variables appearing in the head of the rule are still implicitly universally quantified, while variables only appearing in the body of the rule are still implicitly existentially quantified.
While any conjunctive query can be written as a datalog rule, not every datalog program can be written as a conjunctive query. In fact, only single rules over extensional predicate symbols can be easily rewritten as an equivalent conjunctive query. The problem of deciding whether for a given datalog program there is an equivalent nonrecursive program (corresponding to a positive relational algebra query, or, equivalently, a formula of positive existential first-order logic, or, as a special case, a conjunctive query) is known as the datalog boundedness problem and is undecidable.1
Extensions of conjunctive queries
Extensions of conjunctive queries capturing more expressive power include unions of conjunctive queries, which are equivalent to positive (i.e., negation-free) relational algebra, conjunctive queries extended by union and negation, which by Codd's theorem correspond to relational algebra and first-order logic, conjunctive queries with built-in predicates and conjunctive queries with aggregate functions. The formal study of all of these extensions is justified by their application in relational databases and is in the realm of database theory.
Complexity of conjunctive queries
For the study of the computational complexity of evaluating conjunctive queries, two problems have to be distinguished. The first is the problem of evaluating a conjunctive query on a relational database where both the query and the database are considered part of the input. The complexity of this problem is usually referred to as combined complexity, while the complexity of the problem of evaluating a query on a relational database, where the query is assumed fixed, is called data complexity.2
Conjunctive queries are NP-complete with respect to combined complexity,3 while the data complexity of conjunctive queries is very low, in the parallel complexity class AC0, which is contained in LOGSPACE and thus in polynomial time. The NP-hardness of conjunctive queries may appear surprising, since relational algebra and SQL strictly subsume the conjunctive queries and are thus at least as hard (in fact, relational algebra is PSPACE-complete with respect to combined complexity and is therefore even harder under widely held complexity-theoretic assumptions). However, in the usual application scenario, databases are large, while queries are very small, and the data complexity model may be appropriate for studying and describing their difficulty.
Formal properties of conjunctive queries
Conjunctive queries are one of the great success stories of database theory in that many interesting problems that are computationally hard or undecidable for larger classes of queries are feasible for conjunctive queries.4 For example, consider the query containment problem. We write 
 
 
 
  for two database relations

 
  of the same schema if and only if each tuple occurring in 
 
 
 
  also occurs in 
 
 
 
 . Given a query 
 
 
 
  and a relational database instance 
 
 
 
 , we write the result relation of evaluating the query on the instance simply as 
 
 
 
 . Given two queries 
 
 
 
  and 
 
 
 
  and a database schema, the query containment problem is the problem of deciding whether for all possible database instances 
 
 
 
  over the input database schema, 
 
 
 
 . The main application of query containment is in query optimization: Deciding whether two queries are equivalent is possible by simply checking mutual containment.
The query containment problem is undecidable for relational algebra and SQL but is decidable and NP-complete for conjunctive queries. In fact, it turns out that the query containment problem for conjunctive queries is exactly the same problem as the query evaluation problem.5 Since queries tend to be small, NP-completeness here is usually considered acceptable. The query containment problem for conjunctive queries is also equivalent to the constraint satisfaction problem.6
An important class of conjunctive queries that have polynomial-time combined complexity are the acyclic conjunctive queries.7 The query evaluation, and thus query containment, is LOGCFL-complete and thus in polynomial time.8 Acyclicity of conjunctive queries is a structural property of queries that is defined with respect to the query's hypergraph:9 a conjunctive query is acyclic if and only if it has hypertree-width 1. For the special case of conjunctive queries in which all relations used are binary, this notion corresponds to the treewidth of the dependency graph of the variables in the query (i.e., the graph having the variables of the query as nodes and an undirected edge 
 
 
 
  between two variables if and only if there is an atomic formula 
 
 
 
  or 
 
 
 
  in the query) and the conjunctive query is acyclic if and only if its dependency graph is acyclic.
An important generalization of acyclicity is the notion of bounded hypertree-width, which is a measure of how close to acyclic a hypergraph is, analogous to bounded treewidth in graphs. Conjunctive queries of bounded tree-width have LOGCFL combined complexity.10
Unrestricted conjunctive queries over tree data (i.e., a relational database consisting of a binary child relation of a tree as well as unary relations for labeling the tree nodes) have polynomial time combined complexity.11
References
External links

[http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6V1G-43G4RRN-2&_user=5423704&_coverDate=05/28/2000&_rdoc=2&_fmt=summary&_orig=browse&_srch=doc-info(%23toc%235674%232000%23997609997%23255297%23FLP%23display%23Volume)&_cdi=5674&_sort=d&_docanchor=&_ct=8&_acct=C000007438&_version=1&_urlVersion=0&_userid=5423704&md5;=adc35b17aaf28963cc6925a017813785 Ullman, J. D. Information integration using logical views Theoretical Computer Science, 2000, 239, 189-210]


Georg Gottlob, Presentation on structural decomposition methods for the efficient evaluation of conjunctive queries (PDF)

"
Category:Database theory



Gerd G. Hillebrand, Paris C. Kanellakis, Harry G. Mairson, Moshe Y. Vardi: Undecidable Boundedness Problems for Datalog Programs. J. Log. Program. 25(2): 163-190 (1995)

Ashok K. Chandra and Philip M. Merlin, 1977. Optimal Implementation of Conjunctive Queries in Relational Data Bases. STOC '77: Proceedings of the ninth annual ACM symposium on Theory of computing [http://portal.acm.org/citation.cfm?id=803397&coll;;=portal&dl;=ACM]
Serge Abiteboul, Richard B. Hull, Victor Vianu: Foundations of Databases. Addison-Wesley, 1995.


Mihalis Yannakakis: Algorithms for Acyclic Database Schemes . Proc. VLDB 1981: 82-94.
Georg Gottlob, Nicola Leone, and Francesco Scarcello (2001). "The complexity of acyclic conjunctive queries". Journal of the ACM (JACM) 48 (3): 431–498. .

Georg Gottlob, Nicola Leone, and Francesco Scarcello: Hypertree Decompositions and Tractable Queries. J. Comput. Syst. Sci. 64(3): 579-627 (2002)
Georg Gottlob, Christoph Koch, Klaus U. Schulz: Conjunctive queries over trees. J. ACM 53(2): 238-272 (2006)




