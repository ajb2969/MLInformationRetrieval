


Modular multiplicative inverse




Modular multiplicative inverse

In modular arithmetic, the modular multiplicative inverse of an integer a modulo m is an integer x such that



That is, it is the multiplicative inverse in the ring of integers modulo m, denoted 
 
 
 
 .
Once defined, x may be noted 
 
 
 
 , where the fact that the inversion is m-modular is implicit.
The multiplicative inverse of a modulo m exists if and only if a and m are coprime (i.e., if ).1 If the modular multiplicative inverse of a modulo m exists, the operation of division by a modulo m can be defined as multiplying by the inverse, which is in essence the same concept as division in the field of reals.
Example
Suppose we wish to find modular multiplicative inverse x of 3 modulo 11.



This is the same as finding x such that



Working in 
 
 
 
  we find one value of x that satisfies this congruence is 4 because



and there are no other values of x in 
 
 
 
  that satisfy this congruence. Therefore, the modular multiplicative inverse of 3 modulo 11 is 4.
Once we have found the inverse of 3 in 
 
 
 
 
 , we can find other values of x in 
 
 
 
  that also satisfy the congruence. They may be found by adding multiples of  to the found inverse. Generalizing, all possible x for this example can be formed from



yielding {..., −18, −7, 4, 15, 26, ...}.
Computation
Extended Euclidean algorithm
The modular multiplicative inverse of a modulo m can be found with the extended Euclidean algorithm. The algorithm finds solutions to Bézout's identity



where a and b are given and x, y and gcd(a, b) are the integers that the algorithm discovers. So, since the modular multiplicative inverse is the solution to



by the definition of congruence, , which means that m is a divisor of . This, in turn, means that



Rearranging produces



with a and m given, x the inverse, and q an integer multiple that will be discarded. This is the exact form of equation that the extended Euclidean algorithm solves—the only difference being that  is predetermined instead of discovered. Thus, a needs to be coprime to the modulus, or the inverse won't exist.
This algorithm runs in time O(log(m)2), assuming , and is generally more efficient than exponentiation.
Using Euler's theorem
As an alternative to the extended Euclidean algorithm, Euler's theorem may be used to compute modular inverse:2
According to Euler's theorem, if a is coprime to m, that is, , then



where φ(m) is Euler's totient function. This follows from the fact that a belongs to the multiplicative group (Z/mZ)× iff a is coprime to m. Therefore the modular multiplicative inverse can be found directly:



In the special case when m is a prime, the modular inverse is given by the below equation as:



This method is generally slower than the extended Euclidean algorithm, but is sometimes used when an implementation for modular exponentiation is already available. Some disadvantages of this method include:

The value φ(m) must be known, whose most efficient computation requires m's factorization. Factorization is widely believed to be a computationally hard problem. However, calculating φ(m) is straightforward when the prime factorisation of m is known.
The relative cost of exponentiation. Though it can be implemented more efficiently using modular exponentiation, when large values of m are involved this is most efficiently computed with the Montgomery reduction method. This algorithm itself requires a modular inverse mod m, which is what was to be calculated in the first place. Without the Montgomery method, we're left with standard binary exponentiation which requires division mod m at every step, a slow operation when m is large. Furthermore, any kind of modular exponentiation is a taxing operation.

Applications
The modular multiplicative inverse has many applications in algorithms, particularly those related to number theory, since many such algorithms rely heavily on the theory of modular arithmetic. As a simple example, consider the exact division problem where you have a list of odd word-sized numbers each divisible by k and you wish to divide them all by k. One solution is as follows:

Use the extended Euclidean algorithm to compute k−1, the modular multiplicative inverse of k mod 2w, where w is the number of bits in a word. This inverse will exist since the numbers are odd and the modulus has no odd factors.
For each number in the list, multiply it by k−1 and take the least significant word of the result.

On many machines, particularly those without hardware support for division, division is a slower operation than multiplication, so this approach can yield a considerable speedup. The first step is relatively slow but only needs to be done once.
See also

Inversive congruential generator
Modular arithmetic
Number theory
Public-key cryptography
Rational reconstruction (mathematics)

References



"
Category:Modular arithmetic



.↩
Thomas Koshy. [http://books.google.com/books?id=d5Z5I3gnFh0C&pg;;=PA346 Elementary number theory with applications], 2nd edition. ISBN 978-0-12-372487-8. P. 346.↩




