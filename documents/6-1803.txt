   UNITY (programming language)      UNITY (programming language)   UNITY is a programming language that was constructed by K. Mani Chandy and Jayadev Misra for their book Parallel Program Design: A Foundation . It is a rather theoretical language, which tries to focus on what , instead of where , when or how . The peculiar thing about the language is that it has no flow control . The statements in the program run in a random order, until none of the statements causes change if run. This allows for programs that run indefinitely (auto-pilot or power plant safety system) as well as programs that would normally terminate (which here converge to a fixed point ).  Description  All statements are assignments , and are separated by # . A statement can consist of multiple assignments, of the form a,b,c := x,y,z , or a := x || b := y || c := z . You can also have a quantified statement list , , where x and y are chosen randomly among the values that satisfy expression . A quantified assignment is similar. In , statement is executed simultaneously for all pairs of x and y that satisfy expression .  Examples  Bubble sort  Bubble sort the array by comparing adjacent numbers, and swapping them if they are in the wrong order. Using    Θ   (  n  )       normal-Θ  n    \Theta(n)   expected time,    Θ   (  n  )       normal-Θ  n    \Theta(n)   processors and    Θ   (   n  2   )       normal-Θ   superscript  n  2     \Theta(n^{2})   expected work. The reason you only have    Θ   (  n  )       normal-Θ  n    \Theta(n)    expected time, is that k is always chosen randomly from    {  0  ,  1  }     0  1    \{0,1\}   . This can be fixed by flipping k manually.  Program bubblesort  declare  n: integer,  A: array [0..n-1] of integer  initially  n = 20 #    assign   A[i+1] > >  end  Rank-sort  You can sort in    Θ   (   log  n   )       normal-Θ    n     \Theta(\log n)   time with rank-sort. You need    Θ   (   n  2   )       normal-Θ   superscript  n  2     \Theta(n^{2})   processors, and do    Θ   (   n  2   )       normal-Θ   superscript  n  2     \Theta(n^{2})   work.  Program ranksort  declare  n: integer,  A,R: array [0..n-1] of integer  initially  n = 15 #    assign   >  #    end  Floyd–Warshall algorithm  Using the Floyd–Warshall algorithm all pairs shortest path algorithm, we include intermediate nodes iteratively, and get    Θ   (  n  )       normal-Θ  n    \Theta(n)   time, using    Θ   (   n  2   )       normal-Θ   superscript  n  2     \Theta(n^{2})   processors and    Θ   (   n  3   )       normal-Θ   superscript  n  3     \Theta(n^{3})   work.  Program shortestpath  declare  n,k: integer,  D: array [0..n-1, 0..n-1] of integer  initially  n = 10 #  k = 0 #    assign   ||  k := k + 1 if k \Theta(\log^2 n) time, using     Θ   (   n  3   )       normal-Θ   superscript  n  3     \Theta(n^{3})    processors and     Θ   (    n  3    log  n    )       normal-Θ     superscript  n  3     n      \Theta(n^{3}\log n)    work.  Program shortestpath2  declare  n: integer,  D: array [0..n-1, 0..n-1] of integer  initially  n = 10 #    assign   ) >  end  After round   r   r   r   , D[i,j] contains the length of the shortest path from   i   i   i   to   j   j   j   of length    0  …  r      0  normal-…  r    0\dots r   . In the next round, of length    0  …  2  r      0  normal-…  2  r    0\dots 2r   , and so on.  References   K. Mani Chandy and Jayadev Misra (1988) Parallel Program Design: A Foundation .   "  Category:Experimental programming languages   