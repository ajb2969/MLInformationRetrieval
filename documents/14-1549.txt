   Sparse distributed memory      Sparse distributed memory   Sparse distributed memory is a mathematical model of human long-term memory introduced by Pentti Kanerva in 1988 while he was at NASA Ames Research Center . It is a generalized random-access memory (RAM) for long (e.g., 1,000 bit) binary words. These words serve as both addresses to and data for the memory. The main attribute of the memory is sensitivity to similarity, meaning that a word can be read back not only by giving the original write address but also by giving one close to it, as measured by the number of mismatched bits (i.e., the Hamming distance between memory addresses ). 1  The theory of the memory is mathematically complete 2 and has been verified by computer simulation. It arose from the observation that the distances between points of a high-dimensional space resemble the proximity relations between concepts in human memory. The theory is also practical in that memories based on it can be implemented with conventional RAM-memory elements. 3  Definition  Sparse distributed memory is a mathematical representation of human memory, and uses high-dimensional space to help model the large amounts of memory that mimics that of the human neural network. 4 It utilizes the Hamming distance to measure mismatched bits and read back data between the original write address and one near it. 5 Human memory has a tendency to congregate memories based on similarities between them(although they may not be related), such as "firetrucks are red and apples are red". 6  Sparse distributed memory is based on pulling in patterns between different addresses. Imagine each line as a different memory address, an example from Kanerva's book:   "Why are fire engines painted red?  Firemen's suspenders are red, too.  Two and two are four.  Four times three is twelve.  Twelve inches in a foot.  A foot is a ruler.  Queen Mary is a ruler.  Queen Mary sailed the sea.  The sea has sharks.  Sharks have fins.  The Russians conquered the Finns.  The Russians' color is red.  Fire engines are always rushin'.  So that's why they're painted red!" 7    As a result, all of these addresses are returned to the user, although these may not be the only addresses in that list.  Neuron model  An idealized description of neuron is as follows: a neuron has a cell body with two kinds of branches: dendrites and an axon . It receives input signals from other neurons via dendrites, integrates (sums) them and generates its own (electric) output signal which is sent to outside neurons via axon. The points of electric contact between neurons are called synapses .  When a neuron generates signal it is firing and after firing it must recover before it fires again. The relative importance of a synapse to the firing of neuron is called synaptic weight (or input coefficient ). There are two kinds of synapses: excitatory that trigger neuron to fire and inhibitory that hinder firing. The neuron is either excitatory or inhibitory according to the kinds of synapses its axon makes. 8  in addition to input the firing of neuron depends on threshold . The higher the threshold the more important it is that excitatory synapses have input while inhibitory ones do not. 9 Whether a recovered neuron actually fires depends on whether it received sufficient excitatory input (beyond the threshold) and not too much of inhibitory input within a certain period.  The formal model of neuron makes further simplifying assumptions. 10 An n -input neuron is modeled by a linear threshold function     F  :      {  0  ,  1  }   n   -   >   {  0  ,  1  }       normal-:  F     limit-from   superscript   0  1   n      0  1      F:\{0,1\}^{n}->\{0,1\}   as follows :  For    i  =   0  ,  …  ,   n  -  1        i   0  normal-…    n  1      i=0,...,n-1   where n is the number of inputs, let    F  t     subscript  F  t    F_{t}   be the output at time t      F  t   ∈   {  0  ,  1  }        subscript  F  t    0  1     F_{t}\in\{0,1\}   , and let    x   i  ,  t      subscript  x   i  t     x_{i,t}   be the i -th input at time t      x   i  ,  t    ∈   {  0  ,  1  }        subscript  x   i  t     0  1     x_{i,t}\in\{0,1\}   . Let    w  i     subscript  w  i    w_{i}   be the weight of the i -th input and let   c   c   c   be the threshold.  The weighted sum of the inputs at time t is defined by     S  t   =    ∑   i  =  0    n  -  1      w  i    x   i  ,  t           subscript  S  t     superscript   subscript     i  0      n  1       subscript  w  i    subscript  x   i  t        S_{t}=\sum_{i=0}^{n-1}w_{i}x_{i,t}     The neuron output at time t is then defined as a boolean function :     𝐒  t   =   {     1       if   S  t    ≥  c   ,       0     otherwise  .            subscript  𝐒  t    cases  1      if   subscript  S  t    c   0  otherwise     \mathbf{S}_{t}=\begin{cases}1&\text{if }S_{t}>=c,\\
 0&\text{otherwise }.\end{cases}     Where F t =1 means that the neuron fires at time t and F t =0 that it doesn't, i.e. in order for neuron to fire the weighted sum must reach or exceed the threshold . Excitatory inputs increase the sum and inhibitory inputs decrease it.  Neuron as address-decoder  Kanerva's key thesis 11 is that certain neurons could have their input coefficients and thresholds fixed over entire life of an organism and used as address decoders where n -tuple of input coefficients (the pattern to which neurons respond most readily) determines the n -bit memory address, and the threshold controls the size of the region of similar address patterns to which the neuron responds.  The address a of a neuron with input coefficients w where     w  0   ,  .  .  ,   w   n  1       fragments   subscript  w  0   normal-,  normal-.  normal-.  normal-,   subscript  w   subscript  n  1      w_{0},..,w_{n_{1}}   is defined as an n -bit input pattern that maximizes the weighted sum. The maximum occurs when the inhibitory inputs are zeros and the excitatory inputs are ones. The i -th bit of address is:     𝐚  i   =   {     1       if   w  i    >  0   ,       0      if   w  i    <  0.            subscript  𝐚  i    cases  1      if   subscript  w  i    0   0      if   subscript  w  i    0.      \mathbf{a}_{i}=\begin{cases}1&\text{if }w_{i}>0,\\
 0&\text{if }w_{i}<0.\end{cases}   (assuming weights are non-zero)  The maximum weighted sum     S   (  w  )       S  w    S(w)   is then the sum of all positive coefficients:     S   (  w  )    =    ∑    w  i   >  0     w  i          S  w     subscript      subscript  w  i   0     subscript  w  i      S(w)=\sum_{w_{i}>0}w_{i}     And the minimum weighted sum     s   (  w  )       s  w    s(w)   would correspond to a point opposite the neuron address a`     s   (  w  )    =    ∑    w  i   <  0     w  i          s  w     subscript      subscript  w  i   0     subscript  w  i      s(w)=\sum_{w_{i}<0}w_{i}     When the threshold c is in range    d  ∈  N      d  N    d\in N   ). SDM assumes that the address patterns actually describing physical situations of interest are sparsely scattered throughout the input space. It is impossible to reserve a separate physical location corresponding to each possible input; SDM implements only a limited number of physical or hard locations. The physical location is called a memory (or hard ) location. 12  Every hard location has associated with it two items:   a fixed hard address, which is the N-bit address of the location  a contents portion that is M-bits wide and that can accumulate multiple M-bit data patterns written into the location. The contents' portion is not fixed; it is modified by data patterns written into the memory.   In SDM a word could be stored in memory by writing it in a free storage location and at the same time providing the location with the appropriate address decoder. A neuron as an address decoder would select a location based on similarity of the location's address to the retrieval cue. Unlike conventional Turing machines SDM is taking advantage of parallel computing by the address decoders . The mere accessing the memory is regarded as computing, the amount of which increases with memory size. 13  Address Pattern  An N-bit vector used in writing to and reading from the memory. The address pattern is a coded description of an environmental state. (e.g. N = 256.)  Data Pattern  An M-bit vector that is the object of the writing and reading operations. Like the address pattern, it is a coded description of an environmental state. (e.g. M = 256.)  Pointer chains  All of the items are linked in a single list (or array) of pointers to memory locations, and are stored in RAM. Each address in an array points to an individual line in the memory. That line is then returned if it is similar to other lines. Neurons are utilized as address decoders and encoders, similar to the way neurons work in the brain, and return items from the array that match or are similar.  Writing  Writing is the operation of storing a data pattern into the memory using a particular address pattern. During a write, the input to the memory consists of an address pattern and a data pattern. The address pattern is used to select hard memory locations whose hard addresses are within a certain cutoff distance from the address pattern. The data pattern is stored into each of the selected locations.  Reading  Reading is the operation of retrieving a data pattern from the memory using a particular address pattern. During a read, an address pattern is used to select a certain number of hard memory locations (just like during a write). The contents of the selected locations are bitwise summed and thresholded to derive an M-bit data pattern. This serves as the output read from the memory.  Critical Distance  The critical distance of a Sparse Distributed Memory can be approximately evaluated minimizing the following equation with the restriction    d  ⩽  n      d  n    d\leqslant n   and     f  ~    (  d  )   =    {   1  2   ⋅   [  1  -  N   (  z  <     w  ⋅  s   h  a  r  e  d   (  d  )     θ    )   +  N   (  z  <    -    w  ⋅  s   h  a  r  e  d   (  d  )      θ    )   ]   -   d  n   }   2      fragments   normal-~  f    fragments  normal-(  d  normal-)     superscript   fragments  normal-{    1  2   normal-⋅   fragments  normal-[  1   N   fragments  normal-(  z        normal-⋅  w  s   h  a  r  e  d  d     θ    normal-)    N   fragments  normal-(  z          normal-⋅  w  s   h  a  r  e  d  d      θ    normal-)   normal-]      d  n   normal-}   2     \tilde{f}(d)=\left\{\frac{1}{2}\cdot\left[1-N\left(z<\frac{w\cdot shared(d)}{%
 \sqrt{\theta}}\right)+N\left(z<\frac{-w\cdot shared(d)}{\sqrt{\theta}}\right)%
 \right]-\frac{d}{n}\right\}^{2}   . The proof can be found in, 14 15    d   d   d     Where:      h   h   h   : is the distance to the target;     s   s   s   : is the number of hard-locations activated during read and write operations (this value depends on access radius values);     H   H   H   : is the number of total stored bitstrings in memory;     w   w   w   : is the number of hard-locations in memory;     θ   θ   \theta   : is the number of times the target bitstring was written in memory;     h   h   h   : is the total of random bitstrings in all    s  h  a  r  e  d   (  d  )       s  h  a  r  e  d  d    shared(d)   hard-locations activated by a read operation;     d   d   d   : is the mean number of shared hard-locations activated by two bitstrings    N  =   2  n       N   superscript  2  n     N=2^{n}   bits away from each other. One can find some values for a 1000-dimensional SDM in Kanerva's book, Table 7.1, p. 63, or the equations to calculate to any SDM in Appendix B, p. 125 of the same book.   Probabilistic Interpretation  An associative memory system using sparse, distributed representations can be reinterpreted as an importance sampler , a Monte Carlo method of approximating Bayesian inference . 16 The SDM can be considered a Monte Carlo approximation to a multidimensional conditional probability integral. The SDM will produce acceptable responses from a training set when this approximation is valid, that is, when the training set contains sufficient data to provide good estimates of the underlying joint probabilities and there are enough Monte Carlo samples to obtain an accurate estimate of the integral. 17  Biological plausibility  Sparse coding may be a general strategy of neural systems to augment memory capacity. To adapt to their environments, animals must learn which stimuli are associated with rewards or punishments and distinguish these reinforced stimuli from similar but irrelevant ones. Such task requires implementing stimulus-specific associative memories in which only a few neurons out of a population respond to any given stimulus and each neuron responds to only a few stimuli out of all possible stimuli.  Theoretical work on SDM by Kanerva has suggested that sparse coding increases the capacity of associative memory by reducing overlap between representations. Experimentally, sparse representations of sensory information have been observed in many systems, including vision, 18 audition, 19 touch, 20 and olfaction. 21 However, despite the accumulating evidence for widespread sparse coding and theoretical arguments for its importance, a demonstration that sparse coding improves the stimulus-specificity of associative memory has been lacking until recently.  Some progress has been made in 2014 by Gero Miesenböck 's lab at the University of Oxford analyzing Drosophila  Olfactory system . 22 In Drosophila, sparse odor coding by the Kenyon cells of the mushroom body is thought to generate a large number of precisely addressable locations for the storage of odor-specific memories. Lin et al. 23 demonstrated that sparseness is controlled by a negative feedback circuit between Kenyon cells and the GABAergic anterior paired lateral (APL) neuron. Systematic activation and blockade of each leg of this feedback circuit show that Kenyon cells activate APL and APL inhibits Kenyon cells. Disrupting the Kenyon cell-APL feedback loop decreases the sparseness of Kenyon cell odor responses, increases inter-odor correlations, and prevents flies from learning to discriminate similar, but not dissimilar, odors. These results suggest that feedback inhibition suppresses Kenyon cell activity to maintain sparse, decorrelated odor coding and thus the odor-specificity of memories.  Applications  In applications of the memory, the words are patterns of features. Some features are produced by a sensory system, others control a motor system. There is a current pattern (of e.g. 1000 bits), which is the current contents of the system's focus . The sensors feed into the focus, the motors are driven from the focus, and the memory is accessed through the focus.  What goes on in the world-the system's "subjective" experience-is represented internally by a sequence of patterns in the focus. The memory stores this sequence and can recreate it later in the focus if addressed with a pattern similar to one to one encountered in the past. Thus, the memory learns to predict what is about to happen. Wide applications of the memory would be in systems that deal with real-world information in real time.  The applications include vision - detecting and identifying objects in a scene and anticipating subsequent scenes - robotics , signal detection and verification , and adaptive learning and control . On the theoretical side, the working of the memory may help us understand memory and learning in humans and animals. 24 25  The Best Match Search  SDM can be applied to the problem of finding the best match to a test word in a dataset of stored words. 26 27 or, in other words, the Nearest neighbor search problem.  Consider a memory with N locations where    |  x  |      x    |x|   . Let each location have the capacity for one n -bit word (e.g. N= 2 100 100-bit words), and let the address decoding be done by N address decoder neurons. Set the threshold of each neuron x to its maximum weighted sum    x  -   |  d  |       x    d     x-|d|   and use a common parameter d to adjust all thresholds when accessing the memory. The effective threshold of neuron x will be then    d  =  0      d  0    d=0   which means that the location x is accessible every time the address x is within d bits of the address presented to memory (i.e. the address held by the address register). With    d  =  n      d  n    d=n   we have a conventional random-access memory . Assume further that each location has a special location-occupied bit that can be accessed in the same way as the regular datum bits. Writing a word to a location sets this location-occupied bit. Assume that only occupied location can be read.  To file the data in memory , start by setting    d  =  0      d  0    d=0   and issue a command to clear the location-occupied bit. This single operation marks all memory as unoccupied regardless of the values of the address register. Then set    d  =  0      d  0    d=0   and write each word y of the data set with y itself as the address. Notice that each write operation affects only one location: the location y . Filing time is thus proportional to the number of words in the dataset.  Finding the best match for a test word z , involves placing z in the address register and finding the least distance d for which there is an occupied location. We can start the search by setting    n  /  2      n  2    n/2   and incrementing d successively until an occupied location is found. This method gives average search times that are proportional to the number of address bits or slightly less than    n  /  2      n  2    n/2    28 because the nearest occupied location can be expected to be just under      f    (  x  )    =   1  +   e   -   a  x            f  x     1   superscript  e      a  x        \!f(x)=1+e^{-ax}   bits from z (with binary search on d this would be O(log(n)).  With 100-bit words 2 100 locations would be needed, i.e. an enormously large memory. However if we construct the memory as we store the words of the dataset we need only one location (and one address decoder) for each word of the data set. None of the unoccupied locations need be present. This represents the aspect of sparseness in SDM.  Speech recognition  SDM can be applied in transcribing speech , with the training consisting of "listening" to a large corpus of spoken language . Two hard problems with natural speech are how to detect word boundaries and how to adjust to different speakers. The memory should be able to handle both. First, it stores sequences of patterns as pointer chains. In training—in listening to speech—it will build a probabilistic structure with the highest incidence of branching at word boundaries. In transcribing speech, these branching points are detected and tend to break the stream into segments that correspond to words. Second, the memory's sensitivity to similarity is its mechanism for adjusting to different speakers—and to the variations in the voice of the same speaker. 29  "Realizing forgetting"      Decay Functions       (Figure)  The exponential decay function     (Figure)  The negated-translated sigmoid function         At the University of Memphis, Uma Ramamurthy, Sidney K. D’Mello, and Stan Franklin created a modified version of the sparse distributed memory system that represents "realizing forgetting." It uses a decay equation to better show interference in data. The sparse distributed memory system distributes each pattern into approximately one hundredth of the locations, so interference can have detrimental results. 30  Two possible examples of decay from this modified sparse distributed memory are presented  Exponential decay mechanism      f   (  x  )    =   1  -   [   1   1  +   e   -   a   (   x  -  c   )        ]          f  x     1   delimited-[]    1    1   superscript  e      a    x  c            f(x)=1-[\frac{1}{1+e^{-a(x-c)}}]     Negated-translated sigmoid decay mechanism $$f(x)=1-[\frac{1}{1+e^{-a(x-c)}}]$$  In the exponential decay function, it approaches zero more quickly as x increases, and a is a constant(usually between 3-9) and c is a counter. For the negated- translated  sigmoid function , the decay is similar to the exponential decay function when a is greater than 4. 31  As the graph approaches 0, it represents how the memory is being forgotten using decay mechanisms.  Genetic memory  Genetic memory uses genetic algorithm and sparse distributed memory as an artificial neural network. It has been considered for use in creating artificial life. 32  Statistical Prediction  SDM has been applied to statistical prediction , the task of associating extremely large perceptual state vectors with future events. In conditions of near- or over- capacity, where the associative memory behavior of the model breaks down, the processing performed by the model can be interpreted as that of a statistical predictor and each data counter in an SDM can be viewed as an independent estimate of the conditional probability of a binary function f being equal to the activation set defined by the counter's memory location. 33  LIDA  LIDA uses sparse distributed memory to help model cognition in biological systems. The sparse distributed memory places space is recalling or recognizing the object that it has in relation to other objects. It was developed by Stan Franklin, the creator of the "realizing forgetting" modified sparse distributed memory system. 34 Transient episodic and declarative memories have distributed representations in LIDA (based on modified version of SDM 35 ), there is evidence that this is also the case in the nervous system. 36 (Also see Cognitive architecture )  CMatie  CMatie is a ‘conscious’ software agent developed to manage seminar announcements in the Mathematical Sciences Department at the University of Memphis . It's based on SDM augmented with the use of genetic algorithms as an associative memory . 37  HTM  Hierarchical temporal memory utilizes SDM for storing sparse distributed representations of the data.  Extensions  Many extensions and improvements to SDM have been proposed, e.g.:   Ternary memory space. This enables the memory to be used as a Transient Episodic Memory (TEM) in cognitive software agents . TEM is a memory with high specificity and low retention, used for events having features of a particular time and place. 38 39  Integer SDM that uses modular arithmetic integer vectors rather than binary vectors. This extension improves the representation capabilities of the memory and is more robust over normalization. It can also be extended to support forgetting and reliable sequence storage. 40    Using word vectors of larger size than address vectors. This extension preserves many of the desirable properties of the original SDM: auto-associability, content addressability, distributed storage and robustness over noisy inputs. In addition, it adds new functionality, enabling an efficient auto-associative storage of sequences of vectors, as well as of other data structures such as trees. 41   Related models   Approximate nearest neighbor search 42  Associative Neural Memories 43  Autoassociative memory  Binary Spatter Codes 44  Associative-memory models of the cerebellum  Content-addressable memory  Correlation-matrix memories  45  Deep Learning#Memory networks  Dynamic Memory Networks  46  Feedforward neural network  Hierarchical temporal memory  Holographic Reduced Representation 47 48  Low-density parity-check code  Locality-sensitive hashing  Memory networks  49  Memory-prediction framework  Random-access memory (as a special case of SDM) 50  Random indexing 51  Recursive Auto-Associative Memory (RAAM) 52  Self-organizing map  Semantic hashing  53  Semantic memory  Semantic network  Semantic Pointer Architecture 54  Sequence Memory 55  Sparse coding 56  Sparse Distributed Representations  Neural Turing machine 57  Stacked autoencoders 58  Vector Symbolic Architecture 59  Vector space model  Virtual memory   References  "  Category:Memory     ↩   Flynn, Michael J., Pentti Kanerva, and Neil Bhadkamkar. "Sparse distributed memory prototype: principles and operation." (1989). ↩  ↩  ↩  ↩   Kandel, Eric R., James H. Schwartz, and Thomas M. Jessell, eds. Principles of neural science. Vol. 4. New York: McGraw-Hill, 2000. ↩  Eccles, John G. "Under the Spell of the Synapse." The Neurosciences: Paths of Discovery, I. Birkhäuser Boston, 1992. 159-179. ↩  McCulloch, Warren S., and Walter Pitts. "A logical calculus of the ideas immanent in nervous activity." The bulletin of mathematical biophysics 5.4 (1943): 115-133. ↩     ↩  ↩  Abbott, Joshua T., Jessica B. Hamrick, and Thomas L. Griffiths. "Approximating Bayesian inference with a sparse distributed memory system." Proceedings of the 35th annual conference of the cognitive science society. 2013. ↩  Anderson, Charles H. "A conditional probability interpretation of Kanerva's sparse distributed memory." Neural Networks, 1989. IJCNN., International Joint Conference on. IEEE, 1989. ↩  Vinje WE, Gallant JL. Sparse coding and decorrelation in primary visual cortex during natural vision. Science. 2000; 287:1273–1276. [PubMed: 10678835] ↩  Hromádka T, Deweese MR, Zador AM. Sparse representation of sounds in the unanesthetized auditory cortex. PLoS Biol. 2008; 6:e16. [PubMed: 18232737] ↩  Crochet S, Poulet JFA, Kremer Y, Petersen CCH. Synaptic mechanisms underlying sparse coding of active touch. Neuron. 2011; 69:1160–1175. [PubMed: 21435560] ↩  Ito I, Ong RCY, Raman B, Stopfer M. Sparse odor representation and olfactory learning. Nat Neurosci. 2008; 11:1177–1184. [PubMed: 18794840] ↩  A sparse memory is a precise memory. Oxford Science blog. 28 Feb 2014. http://www.ox.ac.uk/news/science-blog/sparse-memory-precise-memory ↩  Lin, Andrew C., et al. "Sparse, decorrelated odor coding in the mushroom body enhances learned odor discrimination." Nature neuroscience 17.4 (2014): 559-568. ↩   Denning, Peter J. Sparse distributed memory. Research Institute for Advanced Computer Science [NASA Ames Research Center], 1989. ↩   Minsky, Marvin, and Papert Seymour. "Perceptrons." (1969). "Time vs. memory for best matching - an open problem" p. 222-225 ↩    ↩   ↩  Rogers, David. "Statistical prediction with Kanerva's sparse distributed memory." Advances in neural information processing systems. 1989. ↩  Rao, R. P. N., & Fuentes, O. (1998). Hierarchical Learning of Navigational Behaviors in an Autonomous Robot using a Predictive Sparse Distributed Memory . Machine Learning, 31, 87-113 ↩  Franklin, Stan, et al. "The role of consciousness in memory." Brains, Minds and Media 1.1 (2005): 38. ↩  Shastri, L. 2002. Episodic memory and cortico-hippocampal interactions. Trends in Cognitive Sciences ↩  Anwar, Ashraf, and Stan Franklin. "Sparse distributed memory for ‘conscious’ software agents." Cognitive Systems Research 4.4 (2003): 339-354. ↩  D'Mello, Sidney K., Ramamurthy, U., & Franklin, S. 2005. Encoding and Retrieval Efficiency of Episodic Data in a Modified Sparse Distributed Memory System. In Proceedings of the 27th Annual Meeting of the Cognitive Science Society. Stresa, Ital ↩  Ramamaurthy, U., Sidney K. D'Mello, and Stan Franklin. "Modified sparse distributed memory as transient episodic memory for cognitive software agents." Systems, Man and Cybernetics, 2004 IEEE International Conference on. Vol. 6. IEEE, 2004. ↩  Snaider, Javier, and Stan Franklin. "Integer sparse distributed memory." Twenty-fifth international flairs conference. 2012. ↩  Snaider, Javier, and Stan Franklin. "Extended sparse distributed memory and sequence storage." Cognitive Computation 4.2 (2012): 172-180. ↩  Muja, Marius. "Scalable nearest neighbour methods for high dimensional data." (2013). ↩  Hassoun, Mohamad H. Associative neural memories. Oxford University Press, Inc., 1993. ↩  Kanerva, Pentti. "Binary spatter-coding of ordered K-tuples." Artificial Neural Networks—ICANN 96. Springer Berlin Heidelberg, 1996. 869-873. ↩  Kohonen, Teuvo. "Correlation matrix memories." Computers, IEEE Transactions on 100.4 (1972): 353-359. ↩  Ankit Kumar, Ozan Irsoy, Jonathan Su, James Bradbury, Robert English, Brian Pierce, Peter Ondruska, Ishaan Gulrajani, Richard Socher. "Ask Me Anything: Dynamic Memory Networks for Natural Language Processing." arXiv preprint arXiv:1506.07285 (2015). ↩  Plate, Tony A. "Holographic Reduced Representation: Distributed representation for cognitive structures." (2003). ↩  Kanerva, Pentti. "Computing with 10,000-bit words." Proc. 52nd Annual Allerton Conference on Communication, Control, and Computing. 2014. ↩  Weston, Jason, Sumit Chopra, and Antoine Bordes. "Memory networks." arXiv preprint arXiv:1410.3916 (2014). ↩   Joshi, Aditya, Johan Halseth, and Pentti Kanerva. "Language Recognition using Random Indexing." arXiv preprint arXiv:1412.7026 (2014). http://arxiv.org/abs/1412.7026 ↩  Pollack, Jordan B. "Recursive distributed representations." Artificial Intelligence 46.1 (1990): 77-105. ↩  Salakhutdinov, Ruslan, and Geoffrey Hinton. "Semantic hashing." RBM 500.3 (2007): 500. ↩  Eliasmith, Chris, et al. "A large-scale model of the functioning brain." science 338.6111 (2012): 1202-1205. ↩  Hawkins, Jeff, Dileep George, and Jamie Niemasik. "Sequence memory for prediction, inference and behaviour." Philosophical Transactions of the Royal Society B: Biological Sciences 364.1521 (2009): 1203-1209. ↩  Lee, Honglak, et al. "Efficient sparse coding algorithms." Advances in neural information processing systems. 2006. ↩  Graves, Alex, Greg Wayne, and Ivo Danihelka. "Neural Turing Machines." arXiv preprint arXiv:1410.5401 (2014). ↩  Vincent, Pascal, et al. "Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion." The Journal of Machine Learning Research 11 (2010): 3371-3408. ↩  Rachkovskij, Dmitri A., and Ernst M. Kussul. "Binding and normalization of binary sparse distributed representations by context-dependent thinning." Neural Computation 13.2 (2001): 411-452. ↩     