


Particle-in-cell




Particle-in-cell

The particle-in-cell (PIC) method refers to a technique used to solve a certain class of partial differential equations. In this method, individual particles (or fluid elements) in a Lagrangian frame are tracked in continuous phase space, whereas moments of the distribution such as densities and currents are computed simultaneously on Eulerian (stationary) mesh points.
PIC methods were already in use as early as 1955,1 even before the first Fortran compilers were available. The method gained popularity for plasma simulation in the late 1950s and early 1960s by Buneman, Dawson, Hockney, Birdsall, Morse and others. In plasma physics applications, the method amounts to following the trajectories of charged particles in self-consistent electromagnetic (or electrostatic) fields computed on a fixed mesh. 2
Technical aspects
For many types of problems, the PIC method is relatively intuitive and straightforward to implement. This probably accounts for much of its success, particularly for plasma simulation, for which the method typically includes the following procedures:

Integration of the equations of motion.
Interpolation of charge and current source terms to the field mesh.
Computation of the fields on mesh points.
Interpolation of the fields from the mesh to the particle locations.

Models which include interactions of particles only through the average fields are called PM (particle-mesh). Those which include direct binary interactions are PP (particle-particle). Models with both types of interactions are called PP-PM or P3M.
Since the early days, it has been recognized that the PIC method is susceptible to error from so-called discrete particle noise. 3 This error is statistical in nature, and today it remains less-well understood than for traditional fixed-grid methods, such as Eulerian or semi-Lagrangian schemes.
Basics of the PIC plasma simulation technique
Inside the plasma research community, systems of different species (electrons, ions, neutrals, molecules, dust particles, etc.) are investigated. The set of equations associated with PIC codes are therefore the Lorentz force as the equation of motion, solved in the so-called pusher or particle mover of the code, and Maxwell's equations determining the electric and magnetic fields, calculated in the (field) solver.
Super-particles
The real systems studied are often extremely large in terms of the number of particles they contain. In order to make simulations efficient or at all possible, so-called super-particles are used. A super-particle (or macroparticle) is a computational particle that represents many real particles; it may be millions of electrons or ions in the case of a plasma simulation, or, for instance, a vortex element in a fluid simulation. It is allowed to rescale the number of particles, because the Lorentz force depends only on the charge to mass ratio, so a super-particle will follow the same trajectory as a real particle would.
The number of real particles corresponding to a super-particle must be chosen such that sufficient statistics can be collected on the particle motion. If there is a significant difference between the density of different species in the system (between ions and neutrals, for instance), separate real to super-particle ratios can be used for them.
The particle mover
Even with super-particles, the number of simulated particles is usually very large (> 105), and often the particle mover is the most time consuming part of PIC, since it has to be done for each particle separately. Thus, the pusher is required to be of high accuracy and speed and much effort is spent on optimizing the different schemes.
The schemes used for the particle mover can be split into two categories, implicit and explicit solvers. While implicit solvers calculate the particle velocity from the already updated fields, explicit solvers use only the old force from the previous time step, and are therefore simpler and faster, but require a smaller time step. Two frequently used schemes are the leapfrog method,4 and the Boris scheme,5 6which are explicit solvers.
For plasma applications, the leapfrog method takes the following form:






where the subscript 
 
 
 
  refers to "old" quantities from the previous time step, 
 
 
 
  to updated quantities from the next time step (i.e. 
 
 
 
 ), and velocities are calculated in-between the usual time steps 
 
 
 
 .
In comparison, the equations of the Boris scheme are:






with











 
  and 
 
 
 
 .
Because of its excellent long term accuracy, the Boris algorithm is the de facto standard for advancing a charged particle. It was recently realized that the excellent long term accuracy of Boris algorithm is due to the fact it conserves phase space volume, even though it is not symplectic. The global bound on energy error typically associated with symplectic algorithms still holds for the Boris algorithm, making it an effective algorithm for the multi-scale dynamics of plasmas.
The field solver
The most commonly used methods for solving Maxwell's equations (or more generally, partial differential equations (PDE)) belong to one of the following three categories:

Finite difference methods (FDM)
Finite element methods (FEM)
Spectral methods

With the FDM, the continuous domain is replaced with a discrete grid of points, on which the electric and magnetic fields are calculated. Derivatives are then approximated with differences between neighboring grid-point values and thus PDEs are turned into algebraic equations.
Using FEM, the continuous domain is divided into a discrete mesh of elements. The PDEs are treated as an eigenvalue problem and initially a trial solution is calculated using basis functions that are localized in each element. The final solution is then obtained by optimization until the required accuracy is reached.
Also spectral methods, such as the fast Fourier transform (FFT), transform the PDEs into an eigenvalue problem, but this time the basis functions are high order and defined globally over the whole domain. The domain itself is not discretized in this case, it remains continuous. Again, a trial solution is found by inserting the basis functions into the eigenvalue equation and then optimized to determine the best values of the initial trial parameters.
Particle and field weighting
The name "particle-in-cell" originates in the way that plasma macro-quantities (number density, current density, etc.) are assigned to simulation particles (i.e., the particle weighting). Particles can be situated anywhere on the continuous domain, but macro-quantities are calculated only on the mesh points, just as the fields are. To obtain the macro-quantities, one assumes that the particles have a given "shape" determined by the shape function



where 
 
 
 
  is the coordinate of the particle and 
 
 
 
  the observation point. Perhaps the easiest and most used choice for the shape function is the so-called cloud-in-cell (CIC) scheme, which is a first order (linear) weighting scheme. Whatever the scheme is, the shape function has to satisfy the following conditions: 7 space isotropy, charge conservation, and increasing accuracy (convergence) for higher-order terms.
The fields obtained from the field solver are determined only on the grid points and can't be used directly in the particle mover to calculate the force acting on particles, but have to be interpolated via the field weighting:



where the subscript 
 
 
 
  labels the grid point. To ensure that the forces acting on particles are self-consistently obtained, the way of calculating macro-quantities from particle positions on the grid points and interpolating fields from grid points to particle positions has to be consistent, too, since they both appear in Maxwell's equations. Above all, the field interpolation scheme should conserve momentum. This can be achieved by choosing the same weighting scheme for particles and fields and by ensuring the appropriate space symmetry (i.e. no self-force and fulfilling the action-reaction law) of the field solver at the same time 8
Collisions
As the field solver is required to be free of self-forces, inside a cell the field generated by a particle must decrease with decreasing distance from the particle, and hence inter-particle forces inside the cells are underestimated. This can be balanced with the aid of Coulomb collisions between charged particles. Simulating the interaction for every pair of a big system would be computationally too expensive, so several Monte Carlo methods have been developed instead. A widely used method is the binary collision model,9 in which particles are grouped according to their cell, then these particles are paired randomly, and finally the pairs are collided.
In a real plasma, many other reactions may play a role, ranging from elastic collisions, such as collisions between charged and neutral particles, over inelastic collisions, such as electron-neutral ionization collision, to chemical reactions; each of them requiring separate treatment. Most of the collision models handling charged-neutral collisions use either the direct Monte-Carlo scheme, in which all particles carry information about their collision probability, or the null-collision scheme,1011 which does not analyze all particles but uses the maximum collision probability for each charged species instead.
Accuracy and stability conditions
As in every simulation method, also in PIC, the time step and the grid size must be well chosen, so that the time and length scale phenomena of interest are properly resolved in the problem. In addition, time step and grid size have an impact on the speed and accuracy of the code.
For an electrostatic plasma simulation using an explicit time integration scheme (e.g. leapfrog, which is most commonly used), two important conditions regarding the grid size 
 
 
 
  and the time step 
 
 
 
  should be fulfilled in order to ensure the stability of the solution:






which can be derived considering the harmonic oscillations of a one-dimensional unmagnetized plasma. The latter conditions is strictly required but practical considerations related to energy conservation suggest to use a much stricter constraint where the factor 2 is replaced by a number one order of magnitude smaller. The use of 
 
 
 
  is typical.1213 Not surprisingly, the natural time scale in the plasma is given by the inverse plasma frequency

 
  and length scale by the Debye length

 
 .
For an explicit electromagnetic plasma simulation, the time step must also satisfy the CFL condition:


 
  where 
 
 
 
 , and 
 
 
 
  is the speed of light.
Applications
Within plasma physics, PIC simulation has been used successfully to study laser-plasma interactions, electron acceleration and ion heating in the auroral ionosphere, magnetohydrodynamics, magnetic reconnection, as well as ion-temperature-gradient and other microinstabilities in tokamaks, furthermore vacuum discharges, and dusty plasmas.
Hybrid models may use the PIC method for the kinetic treatment of some species, while other species (that are Maxwellian) are simulated with a fluid model.
PIC simulations have also been applied outside of plasma physics to problems in solid and fluid mechanics. 14 15
See also

Plasma modeling
Multiphase particle-in-cell method

References








External links

Particle-In-Cell and Kinetic Simulation Software Center (PICKSC), UCLA.
Open source 3D Particle-In-Cell code for spacecraft plasma interactions (mandatory user registration required).
Simple Particle-In-Cell code in MATLAB
Plasma Theory and Simulation Group (Berkeley) Contains links to freely-available software.
Introduction to PIC codes (Univ. of Texas)
OpenPIC3D - 3D Hybrid Particle-In-Cell simulation of plasma dynamics

"
Category:Computational physics Category:Numerical differential equations Category:Computational fluid dynamics Category:Scientific modeling






















