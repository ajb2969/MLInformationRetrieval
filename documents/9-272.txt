


BCJR algorithm




BCJR algorithm

The BCJR algorithm is an algorithm for maximum a posteriori decoding of error correcting codes defined on trellises (principally convolutional codes). The algorithm is named after its inventors: Bahl, Cocke, Jelinek and Raviv.1 This algorithm is critical to modern iteratively-decoded error-correcting codes including turbo codes and low-density parity-check codes.
Steps involved
Based on the trellis:

Compute Forward probabilities 
 
 

Compute Backward probabilities 
 
 

Compute smoothed probabilities based on other information (i.e. noise variance for AWGN, bit crossover probability for Binary symmetric channel)

Variations
SBGT BCJR
Berrou, Glavieux and Thitimajshima Simplification.2
Log-Map BCJR
3
Max-Log-Map BCJR
Implementations

Susa framework implements BCJR algorithm for Forward error correction codes and channel equalization in C++.

See also

Forward-backward algorithm
Maximum a posteriori (MAP) estimation
Hidden Markov model

References


External links

The on-line textbook: Information Theory, Inference, and Learning Algorithms, by David J.C. MacKay, discusses the BCJR algorithm in chapter 25.
The implementation of BCJR algorithm in Susa signal processing framework

"
Category:Error detection and correction



L.Bahl, J.Cocke, F.Jelinek, and J.Raviv, "Optimal Decoding of Linear Codes for minimizing symbol error rate", IEEE Transactions on Information Theory, vol. IT-20(2), pp.284-287, March 1974.
Sichun Wang and Fran√ßois Patenaude, "A Systematic Approach to Modified BCJR MAP Algorithms for Convolutional Codes," EURASIP Journal on Applied Signal Processing, vol. 2006, Article ID 95360, 15 pages, 2006. 
P. Robertson, P. Hoeher and E. Villebrun, "Optimal and Sub-Optimal Maximum A Posteriori Algorithms Suitable for Turbo Decoding", European Transactions on Telecommunications, Vol. 8, 1997.




