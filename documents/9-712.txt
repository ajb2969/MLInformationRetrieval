


Midpoint circle algorithm




Midpoint circle algorithm

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In computer graphics, the midpoint circle algorithm is an algorithm used to determine the points needed for drawing a circle. Bresenham's circle algorithm is derived from the midpoint circle algorithm. The algorithm can be generalized to conic sections.1
 The algorithm is related to work by Pitteway2 and Van Aken.3
Summary
This algorithm draws all eight octants simultaneously, starting from each cardinal direction (0°, 90°, 180°, 270°) and extends both ways to reach the nearest multiple of 45° (45°, 135°, 225°, 315°). You can determine where to stop because when y = x, you have reached 45°. The reason for using these angles is shown in the above picture: As you increase y, you do not skip nor repeat any y value until you get to 45°. So during the while loop, y increments by 1 each iteration, and x decrements by 1 on occasion, never exceeding 1 in one iteration. This changes at 45° because that is the point where the tangent is rise=run. Whereas rise>run before and rise
The objective of the algorithm is to find a path through the pixel grid using pixels which are as close as possible to solutions of 
 
 
 
 . At each step, the path is extended by choosing the adjacent pixel which satisfies 
 
 
 
  but maximizes 
 
 
 
 . Since the candidate pixels are adjacent, the arithmetic to calculate the latter expression is simplified, requiring only bit shifts and additions.
This algorithm starts with the circle equation. For simplicity, assume the center of the circle is at 
 
 
 
 . We consider first only the first octant and draw a curve which starts at point 
 
 
 
  and proceeds counterclockwise, reaching the angle of 45.
The "fast" direction here (the basis vector with the greater increase in value) is the 
 
 
 
  direction. The algorithm always takes a step in the positive 
 
 
 
  direction (upwards), and occasionally takes a step in the "slow" direction (the negative 
 
 
 
  direction).
From the circle equation we obtain the transformed equation 
 
 
 
 , where 
 
 
 
  is computed only a single time during initialization.
Let the points on the circle be a sequence of coordinates of the vector to the point (in the usual basis). Points are numbered according to the order in which they are drawn, with 
 
 
 
  assigned to the first point 
 
 
 
 .
For each point, the following holds:


 
 
  This can be rearranged as follows:


 
 
  And likewise for the next point:



In general, it is true that:





 
 
  So we refashion our next-point-equation into a recursive one by substituting 
 
 
 
 :



Because of the continuity of a circle and because the maxima along both axes is the same, we know we will not be skipping x points as we advance in the sequence. Usually we will stay on the same x coordinate, and sometimes advance by one.
The resulting co-ordinate is then translated by adding midpoint coordinates. These frequent integer additions do not limit the performance much, as we can spare those square (root) computations in the inner loop in turn. Again, the zero in the transformed circle equation is replaced by the error term.
The initialization of the error term is derived from an offset of ½ pixel at the start. Until the intersection with the perpendicular line, this leads to an accumulated value of 
 
 
 
  in the error term, so that this value is used for initialization.
The frequent computations of squares in the circle equation, trigonometric expressions and square roots can again be avoided by dissolving everything into single steps and using recursive computation of the quadratic terms from the preceding iterations.
Variant with Integer-Based Arithmetic
Just as with Bresenham's line algorithm, this algorithm can be optimized for integer-based math. Because of symmetry, if an algorithm can be found that only computes the pixels for one octant, the pixels can be reflected to get the whole circle.
We start by defining the radius error as the difference between the exact representation of the circle and the center point of each pixel (or any other arbitrary mathematical point on the pixel, so long as it's consistent across all pixels). For any pixel with a center at 
 
 
 
 , we define the radius error to be:



For clarity, we derive this formula for a circle at the origin, but the algorithm can be modified for any location. We will want to start with the point 
 
 
 
  on the positive X-axis. Because the radius will be a whole number of pixels, we can see that the radius error will be zero:



Because we are starting in the first CCW positive octant, we will step in the direction with the greatest "travel", the Y direction, so we can say that 
 
 
 
 . Also, because we are concerned with this octant only, we know that the X values only have 2 options: to stay the same as the previous iteration, or decrease by 1. We can create a decision variable that determines if the following is true:



If this inequality holds, we plot 
 
 
 
 ; if not, then we plot 
 
 
 
 . So how do we determine if this inequality holds? We can start with our definition of radius error:



The absolute value function doesn't really help us, so let's square both sides, since the square is always positive:



Since x > 0, the term 
 
 
 
 , so dividing we get:



Thus, we change our decision criterion from using floating-point operations to simple integer addition, subtraction, and bit shifting (for the multiply by 2 operations). If 2(RE+YChange)+XChange > 0, then we decrement our X value. If ''2(RE+YChange)+XChange  void DrawCircle(int x0, int y0, int radius) {
 int x = radius;
 int y = 0;
 int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
 while(x >= y)
 {
   DrawPixel( x + x0,  y + y0);
   DrawPixel( y + x0,  x + y0);
   DrawPixel(-x + x0,  y + y0);
   DrawPixel(-y + x0,  x + y0);
   DrawPixel(-x + x0, -y + y0);
   DrawPixel(-y + x0, -x + y0);
   DrawPixel( x + x0, -y + y0);
   DrawPixel( y + x0, -x + y0);
   y++;
   if (decisionOver2 y+1
   }
   else
   {
     x--;
     decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
   }
 }
}
Javascript
Implementation that draws a circle in html5 canvas. For educational purposes only, there are better ways to draw circles in canvas.
function drawCircle(x0, y0, radius, canvas){
       var x = radius;
       var y = 0;
       var decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
       var imageWidth = canvas.width;
       var imageHeight = canvas.height;
       var context = canvas.getContext('2d');
       var imageData = context.getImageData(0, 0, imageWidth, imageHeight);
       var pixelData = imageData.data;
       var makePixelIndexer = function(width){
             return function(i,j){
                 var index = j*(width*4) + i*4;
                 //index points to the R chanel of pixel 
                 //at column i and row j calculated from top left
                 return index;
             };
       }
       var pixelIndexer = makePixelIndexer(imageWidth);
       var drawPixel = function(x,y){
          var idx = pixelIndexer(x,y);
          pixelData[idx] = 255;  //red
          pixelData[idx+1] = 0;  //green
          pixelData[idx+2] = 255;//blue
          pixelData[idx+3] = 255;//alpha
       };
       while(x >= y){
         drawPixel( x + x0,  y + y0);
         drawPixel( y + x0,  x + y0);
         drawPixel(-x + x0,  y + y0);
         drawPixel(-y + x0,  x + y0);
         drawPixel(-x + x0, -y + y0);
         drawPixel(-y + x0, -x + y0);
         drawPixel( x + x0, -y + y0);
         drawPixel( y + x0, -x + y0);
         y++;
         if (decisionOver2<=0){
           decisionOver2 += 2 * y + 1;   // Change in decision criterion for y -> y+1
         }else{
           x--;
           decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
         }
       }
       context.putImageData(imageData,0,0);
     }
Drawing Incomplete Octants
The implementations above always only draw complete octants or circles. To draw only a certain arc from an angle 
 
 
 
  to an angle 
 
 
 
 , the algorithm needs first to calculate the 
 
 
 
  and 
 
 
 
  coordinates of these end points, where it is necessary to resort to trigonometric or square root computations (see Methods of computing square roots). Then the Bresenham algorithm is run over the complete octant or circle and sets the pixels only if they fall into the wanted interval. After finishing this arc, the algorithm can be ended prematurely.
Note that if the angles are given as slopes, then no trigonometry or square roots are required: one simply checks that 
 
 
 
  is between the desired slopes.
Generalizations
Ellipse
It is possible to generalize the algorithm to handle ellipses (of which circles are a special case). These algorithms involve calculating a full quadrant of the ellipse, as opposed to an octant as explained above, since non-circular ellipses lack the x-y symmetry of a circle.
One such algorithm is presented in the paper "A Fast Bresenham Type Algorithm For Drawing Ellipses" by John Kennedy. 1
Parabola and other curves
It is also possible to use the same concept to rasterize a parabola or any other two-dimensional curve.4
References
External links

The Beauty of Bresenham's Algorithm – A simple implementation to plot lines, circles, ellipses and Bézier curves
Drawing circles - An article on drawing circles, that derives from a simple scheme to an efficient one.
Midpoint Circle Algorithm in several programming languages

de:Rasterung von Kreisen#Midpoint-Algorithmus"
Category:Geometric algorithms Category:Digital geometry Category:Articles with example C code




Pitteway, M.L.V., "Algorithm for Drawing Ellipses or Hyperbolae with a Digital Plotter", Computer J., 10(3) November 1967, pp 282-289
Van Aken, J.R., "An Efficient Ellipse Drawing Algorithm", CG&A;, 4(9), September 1984, pp 24-35
http://members.chello.at/~easyfilter/bresenham.html


