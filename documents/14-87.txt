


Circuits over sets of natural numbers




Circuits over sets of natural numbers

Circuits over natural numbers are a mathematical model used in studying computational complexity theory. They are a special case of circuits. The object is a labeled directed acyclic graph the nodes of which evaluate to sets of natural numbers, the leaves are finite sets, and the gates are set operations or arithmetic operations.
As an algorithmic problem, the problem is to find if a given natural number is an element of the output node or if two circuits compute the same set. Decidability is still an open question.
Formal definition
A natural number circuit is a circuit, i.e. a labelled directed acyclic graph of in-degree at most 2. The nodes of in-degree 0, the leaves, are finite sets of natural numbers, the labels of the nodes of in-degree 1 are −, where 
 
 
 
  and the labels of the nodes of in-degree 2 are +, ×, ∪ and ∩, where 
 
 
 
 , 
 
 
 
  and ∪ and ∩ with the usual set meaning.
The subset of circuits which do not use all of the possible labels are also studied.
Algorithmic problems
One can ask:

Is a given number n a member of the output node.
Is the output node empty, does it contain a specific element, is it equal to 
 
 
 
 ?
Is one node is a subset of another.

For circuits which use all the labels, all these problems are equivalent.
Proof
The first problem is reducible to the second one, by taking the intersection of the output gate and n. Indeed the new output get will be empty if and only if n was not an element of the former output gate.
The first problem is reducible to the third one, by asking if the node n is a subset of the output node.
The second problem is reducible to the first one, it suffices to multiply the output gate by 0, then 0 will be in the output gate if and only if the former output gate were not empty.
The third problem is reducible to the second one, checking if A is a subset of B is equivalent to ask if there is an element in 
 
 
 
 .
Restrictions
Let O be a subset of {∪,∩,−,+,×}, then we call MC(O) the problem of finding if a natural number is inside the output gate of a circuit the gates' labels of which are in O, and MF(O) the same problem with the added constraint that the circuit must be a tree.
Quickly growing set
One difficulty comes from the fact that the complement of a finite set is infinite, and a computer has got only a finite memory. But even without complementation, one can create double exponential numbers. Let 
 
 
 
 , then one can easily prove by induction on 
 
 
 
  that 
 
 
 
 , indeed 
 
 
 
  and by induction 
 
 
 
 .
And even double exponential—sized sets: let 
 
 
 
 , then 
 
 
 
  contains the 
 
 
 
  firsts number. Once again this can be proved by induction on 
 
 
 
 , it is true for 
 
 
 
  by definition and let 
 
 
 
  by 
 
 
 
  we see that it can be written as 
 
 
 
  where 
 
 
 
 , and by induction, 
 
 
 
  and 
 
 
 
  are in $S_i$, so indeed $x\in (S_i \times S_i)+ S_i$.
These examples explains why addition and multiplication are enough to create problems of high complexity.
Complexity results
Membership problem
The membership problem asks if, given an element n and a circuit, n is in the output gate of the circuit.
When the class of authorized gates is restricted, the membership problem lies inside well known complexity classes.




Complexity



O



∪,∩,−,+,×



∪,∩,+,×



∪,+,×



∩,+,×



+,×



∪,∩,−,+



∪,∩,+



∪,+



∩,+



+



∪,∩,−,×



∪,∩,×



∪,×



∩,×



×



∪,∩,−



∪,∩



∪



∩



Equivalence problem
The equivalence problem asks if, given two gates of a circuit, they evaluate to the same set.
When the class of authorized gates is restricted, the equivalence problem lies inside well known complexity classes.1 We call EC(O) and EF(O) the problem of equivalence over circuits and formulae the gates of which are in O.




Complexity



O



∪,∩,−,+,×



∪,∩,+,×



∪,+,×



∩,+,×



+,×



∪,∩,−,+



∪,∩,+



∪,+



∩,+



+



∪,∩,−,×



∪,∩,×



∪,×



∩,×



×



∪,∩,−



∪,∩



∪



∩



References






External links

Pierre McKenzie, The complexity of circuit evaluation over the natural numbers

"
Category:Computational complexity theory Category:Arithmetic



↩




