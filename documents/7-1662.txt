   PLS (complexity)      PLS (complexity)   In computational complexity theory , Polynomial Local Search ( PLS ) is a complexity class that models the difficulty of finding a locally optimal solution to an optimization problem .  A PLS problem   L   L   L   has a set    D  L     subscript  D  L    D_{L}   of instances which are encoded using strings over a finite alphabet    Σ   normal-Σ   \Sigma   . For each instance   x   x   x   there exists a finite solution set     F  L    (  x  )        subscript  F  L   x    F_{L}(x)   . Each solution    s  ∈    F  L    (  x  )        s     subscript  F  L   x     s\in F_{L}(x)   has a non negative integer cost given by a function     c  L    (  s  ,  x  )        subscript  c  L    s  x     c_{L}(s,x)   and a neighborhood     N   (  s  ,  x  )    ⊆    F  L    (  x  )          N   s  x       subscript  F  L   x     N(s,x)\subseteq F_{L}(x)   . Additionally, the existence of the following three polynomial time algorithms is required:   Algorithm    A  L     subscript  A  L    A_{L}   produces some solution      A  L    (  x  )    ∈    F  L    (  x  )           subscript  A  L   x      subscript  F  L   x     A_{L}(x)\in F_{L}(x)   .  Algorithm    B  L     subscript  B  L    B_{L}   determines the value of     c  L    (  s  ,  x  )        subscript  c  L    s  x     c_{L}(s,x)   .  Algorithm    C  L     subscript  C  L    C_{L}   maps a solution    s  ∈    F  L    (  x  )        s     subscript  F  L   x     s\in F_{L}(x)   to an element     s  ′   ∈   N   (  s  ,  x  )         superscript  s  normal-′     N   s  x      s^{\prime}\in N(s,x)   such that      c  L    (   s  ′   ,  x  )    <    c  L    (  s  ,  x  )           subscript  c  L     superscript  s  normal-′   x       subscript  c  L    s  x      c_{L}(s^{\prime},x)   if such an element exists. Otherwise    C  L     subscript  C  L    C_{L}   reports that no such element exists.   An instance    D  L     subscript  D  L    D_{L}   has the structure of an implicit graph , the vertices being the solutions with two solutions     s  ,   s  ′    ∈    F  L    (  x  )         s   superscript  s  normal-′       subscript  F  L   x     s,s^{\prime}\in F_{L}(x)   connected by a directed arc iff     s  ′   ∈   N   (  s  ,  x  )         superscript  s  normal-′     N   s  x      s^{\prime}\in N(s,x)   . The most interesting computational problem is the following:  Given some instance   x   x   x   of a PLS problem   L   L   L   , find a local optimum of     c  L    (  s  ,  x  )        subscript  c  L    s  x     c_{L}(s,x)   , i.e. a solution    s  ∈    F  L    (  x  )        s     subscript  F  L   x     s\in F_{L}(x)   such that      c  L    (   s  ′   ,  x  )    ≥    c  L    (  s  ,  x  )           subscript  c  L     superscript  s  normal-′   x       subscript  c  L    s  x      c_{L}(s^{\prime},x)\geq c_{L}(s,x)   for all     s  ′   ∈   N   (  s  ,  x  )         superscript  s  normal-′     N   s  x      s^{\prime}\in N(s,x)     The problem can be solved using the following algorithm:   Use    A  L     subscript  A  L    A_{L}   to find an initial solution   s   s   s     Use algorithm    C  L     subscript  C  L    C_{L}   to find a better solution     s  ′   ∈   N   (  s  ,  x  )         superscript  s  normal-′     N   s  x      s^{\prime}\in N(s,x)   . If such a solution exists, replace   s   s   s   by    s  ′     superscript  s  normal-′    s^{\prime}   , else return   s   s   s      Unfortunately, it generally takes an exponential number of improvement steps to find a local optimum even if the problem   L   L   L   can be solved exactly in polynomial time.  Examples of PLS-complete problems include local-optimum relatives of the travelling salesman problem , maximum cut and satisfiability , as well as finding a pure Nash equilibrium in a congestion game .  PLS is a subclass of TFNP , a complexity class closely related to NP that describes computational problems in which a solution is guaranteed to exist and can be recognized in polynomial time. For a problem in PLS, a solution is guaranteed to exist because the minimum-cost vertex of the entire graph is a valid solution, and the validity of a solution can be checked by computing its neighbors and comparing the costs of each one.  References    .   "  Category:Complexity classes   