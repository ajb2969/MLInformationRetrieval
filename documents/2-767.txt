   Description logic      Description logic   Description logics (DL) is a family of formal knowledge representation languages. It is more expressive than propositional logic . Additionally, it has more efficient decision problems than first-order predicate logic .  DL is used in artificial intelligence for formal reasoning on the concepts of an application domain (known as terminological knowledge ). It is of particular importance in providing a logical formalism for ontologies and the Semantic Web . The most notable application outside information science is in biomedical informatics where DL assists in the codification of medical knowledge.  Introduction  A Description Logic (DL) models concepts , roles and individuals , and their relationships.  The fundamental modeling concept of a DL is the axiom - a logical statement relating roles and/or concepts. 1 This is a key difference from the frames paradigm where a frame specification declares and completely defines a class. 2  Nomenclature  Differences from First-Order Logic  The description logic community uses different terminology than the first-order predicate logic community for operationally-equivalent notions; some examples are given here:      Synonyms     FOL     class     property or predicate     object     The Web Ontology Language [OWL] mostly uses FOL terminology, in spite of being an implementation of a description logic.  Naming convention  There are many varieties of Description Logics and there is an informal naming convention, roughly describing the operators allowed. The expressivity is encoded in the label for a logic starting with one of the following basic logics are:          𝒜  ℒ      𝒜  ℒ    \mathcal{AL}      Attributive language. This is the base language which allows:      Atomic negation (negation of concept names that do not appear on the left hand side of axioms)  Concept intersection  Universal restrictions  Limited existential quantification              ℱ  ℒ      ℱ  ℒ    \mathcal{FL}      Frame based description language, 3 allows:      Concept intersection  Universal restrictions  Limited existential quantification  Role restriction              ℰ  ℒ      ℰ  ℒ    \mathcal{EL}      Allows:      Concept intersection  Existential restrictions (of full existential quantification)      Followed by any of the following extensions:         ℱ   ℱ   \mathcal{F}      Functional properties, a special case of uniqueness quantification .            ℰ   ℰ   \mathcal{E}      Full existential qualification (Existential restrictions that have fillers other than   ⊤   top   \top   ).            𝒰   𝒰   \mathcal{U}      Concept union.            𝒞   𝒞   \mathcal{C}      Complex concept negation.            ℋ   ℋ   \mathcal{H}      Role hierarchy (subproperties - rdfs:subPropertyOf).            ℛ   ℛ   \mathcal{R}      Limited complex role inclusion axioms; reflexivity and irreflexivity; role disjointness.            𝒪   𝒪   \mathcal{O}      Nominals. (Enumerated classes of object value restrictions - owl:oneOf , owl:hasValue ).            ℐ   ℐ   \mathcal{I}      Inverse properties.            𝒩   𝒩   \mathcal{N}      Cardinality restrictions ( owl:cardinality , owl:maxCardinality ), a special case of counting quantification            𝒬   𝒬   \mathcal{Q}      Qualified cardinality restrictions (available in OWL 2, cardinality restrictions that have fillers other than   ⊤   top   \top   ).               (  𝒟  )      𝒟    {}^{\mathcal{(D)}}      Use of datatype properties, data values or data types.     Exceptions  Some canonical DLs that do not exactly fit this convention are:         𝒮   𝒮   \mathcal{S}      An abbreviation for    𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}   with transitive roles.             ℱ   ℒ  -       ℱ   superscript  ℒ      \mathcal{FL^{-}}      A sub-language of    ℱ  ℒ      ℱ  ℒ    \mathcal{FL}   , which is obtained by disallowing role restriction. This is equivalent to    𝒜  ℒ      𝒜  ℒ    \mathcal{AL}   without atomic negation.             ℱ   ℒ  o       ℱ   subscript  ℒ  o     \mathcal{FL}_{o}      A sub-language of    ℱ   ℒ  -       ℱ   superscript  ℒ      \mathcal{FL^{-}}   , which is obtained by disallowing limited existential quantification.             ℰ   ℒ    +  +        ℰ   superscript  ℒ    absent       \mathcal{EL^{++}}      Alias for    ℰ  ℒ  ℛ  𝒪      ℰ  ℒ  ℛ  𝒪    \mathcal{ELRO}   . 4     Examples  As an example,    𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}   is a centrally important description logic from which comparisons with other varieties can be made.    𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}   is simply    𝒜  ℒ      𝒜  ℒ    \mathcal{AL}   with complement of any concept allowed, not just atomic concepts.  A further example, the description logic    𝒮  ℋ  ℐ  𝒬      𝒮  ℋ  ℐ  𝒬    \mathcal{SHIQ}   is the logic    𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}   plus extended cardinality restrictions, and transitive and inverse roles. The naming conventions aren't purely systematic so that the logic    𝒜  ℒ  𝒞  𝒪  ℐ  𝒩      𝒜  ℒ  𝒞  𝒪  ℐ  𝒩    \mathcal{ALCOIN}   might be referred to as    𝒜  ℒ  𝒞  𝒩  ℐ  𝒪      𝒜  ℒ  𝒞  𝒩  ℐ  𝒪    \mathcal{ALCNIO}   and abbreviations are made where possible,    𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}   is used instead of the equivalent    𝒜  ℒ  𝒰  ℰ      𝒜  ℒ  𝒰  ℰ    \mathcal{ALUE}   .  The Protégé ontology editor supports    𝒮  ℋ  𝒪  ℐ   𝒩   (  𝒟  )        𝒮  ℋ  𝒪  ℐ   superscript  𝒩  𝒟     \mathcal{SHOIN}^{\mathcal{(D)}}   . Three major biomedical informatics terminology bases, SNOMED CT , GALEN, and GO, are expressible in    ℰ  ℒ      ℰ  ℒ    \mathcal{EL}   (with additional role properties).  OWL 2 provides the expressiveness of    𝒮  ℛ  𝒪  ℐ   𝒬   (  𝒟  )        𝒮  ℛ  𝒪  ℐ   superscript  𝒬  𝒟     \mathcal{SROIQ}^{\mathcal{(D)}}   , OWL-DL is based on    𝒮  ℋ  𝒪  ℐ   𝒩   (  𝒟  )        𝒮  ℋ  𝒪  ℐ   superscript  𝒩  𝒟     \mathcal{SHOIN}^{\mathcal{(D)}}   , and for OWL-Lite it is    𝒮  ℋ  ℐ   ℱ   (  𝒟  )        𝒮  ℋ  ℐ   superscript  ℱ  𝒟     \mathcal{SHIF}^{\mathcal{(D)}}   .  History  Description logics (DL) was given its current name in the 1980s. Previous to this it was called (chronologically): terminological systems , and concept languages .  Knowledge representation  Frames and semantic networks lack formal (logic-based) semantics. 5 DL was first introduced into Knowledge Representation (KR) systems to overcome this deficiency. 6  The first DL-based KR system was KL-ONE (by Ronald J. Brachman and Schmolze, 1985). During the '80s other DL-based systems using structural subsumption algorithms 7 were developed including KRYPTON (1983), LOOM (1987), BACK (1988), K-REP (1991) and CLASSIC (1991). This approach featured DL with limited expressiveness but relatively efficient (polynomial time) reasoning. 8  In the early '90s, the introduction of a new tableau based algorithm paradigm allowed efficient reasoning on more expressive DL. 9 DL-based systems using these algorithms - such as KRIS (1991) - show acceptable reasoning performance on typical inference problems even though the worst case complexity is no longer polynomial. 10  From the mid '90s, reasoners were created with good practical performance on very expressive DL with high worst case complexity. 11 Examples from this period include FaCT, 12 RACER (2001), CEL (2005), and KAON 2 (2005).  DL reasoners, such as FaCT, FaCT++, 13 RACER, DLP and Pellet, 14 implement the analytic tableau method . KAON2 is implemented by algorithms which reduce a SHIQ(D) knowledge base to a disjunctive datalog program.  Semantic Web  The DARPA Agent Markup Language (DAML) and Ontology Inference Layer (OIL) ontology languages for the semantic web can be viewed as syntactic variants of DL. 15 In particular, the formal semantics and reasoning in OIL use the    𝒮  ℋ  ℐ  𝒬      𝒮  ℋ  ℐ  𝒬    \mathcal{SHIQ}   DL. 16 The DAML+OIL DL was developed as a submission to 17 - and formed the starting point of - the World Wide Web Consortium (W3C) Web Ontology Working Group. 18 In 2004, the Web Ontology Working Group completed its work by issuing the OWL 19 recommendation. The design of OWL is based on the    𝒮  ℋ      𝒮  ℋ    \mathcal{SH}   family of DL 20 with OWL DL and OWL Lite based on    𝒮  ℋ  𝒪  ℐ   𝒩   (  𝒟  )        𝒮  ℋ  𝒪  ℐ   superscript  𝒩  𝒟     \mathcal{SHOIN}^{\mathcal{(D)}}   and    𝒮  ℋ  ℐ   ℱ   (  𝒟  )        𝒮  ℋ  ℐ   superscript  ℱ  𝒟     \mathcal{SHIF}^{\mathcal{(D)}}   respectively. 21  The W3C OWL Working Group began work in 2007 on a refinement of - and extension to - OWL. 22 In 2009, this was completed by the issuance of the OWL2 recommendation. 23 OWL2 is based on the description logic    𝒮  ℛ  𝒪  ℐ   𝒬   (  𝒟  )        𝒮  ℛ  𝒪  ℐ   superscript  𝒬  𝒟     \mathcal{SROIQ}^{\mathcal{(D)}}   . 24 Practical experience demonstrated that OWL DL lacked several key features necessary to model complex domains. 25  Modeling  In DL, a distinction is drawn between the so-called TBox (terminological box) and the ABox (assertional box). In general, the TBox contains sentences describing concept hierarchies (i.e., relations between concepts ) while the ABox contains ground sentences stating where in the hierarchy individuals belong (i.e., relations between individuals and concepts). For example, the statement:  (1) Every employee is a person  belongs in the TBox, while the statement:  (2) Bob is an employee  belongs in the ABox.  Note that the TBox/ABox distinction is not significant, in the same sense that the two "kinds" of sentences are not treated differently in first-order logic (which subsumes most DL). When translated into first-order logic, a subsumption axiom like (1) is simply a conditional restriction to unary  predicates (concepts) with only variables appearing in it. Clearly, a sentence of this form is not privileged or special over sentences in which only constants ("grounded" values) appear like (2).  So why was the distinction introduced? The primary reason is that the separation can be useful when describing and formulating decision-procedures for various DL. For example, a reasoner might process the TBox and ABox separately, in part because certain key inference problems are tied to one but not the other one ('classification' is related to the TBox, 'instance checking' to the ABox). Another example is that the complexity of the TBox can greatly affect the performance of a given decision-procedure for a certain DL, independently of the ABox. Thus, it is useful to have a way to talk about that specific part of the knowledge base .  The secondary reason is that the distinction can make sense from the knowledge base modeler's perspective. It is plausible to distinguish between our conception of terms/concepts in the world (class axioms in the TBox) and particular manifestations of those terms/concepts (instance assertions in the ABox). In the above example: when the hierarchy within a company is the same in every branch but the assignment to employees is different in every department (because there are other people working there), it makes sense to reuse the TBox for different branches that do not use the same ABox.  There are two features of Description Logic that are not shared by most other data description formalisms: DL does not make the Unique name assumption (UNA) or the Closed-world assumption (CWA). Not having UNA means that two concepts with different names may be allowed by some inference to be shown to be equivalent. Not having CWA, or rather having the Open world assumption (OWA) means that lack of knowledge of a fact does not immediately imply knowledge of the negation of a fact.  Formal description  Like first order logic (FOL), a syntax defines which collections of symbols are legal expressions in a Description Logic (DL), and semantics determine meaning. Unlike FOL, a DL may have several well known syntactic variants. 26  Syntax  The syntax of a member of the description logic family is characterized by its recursive definition, in which the constructors that can be used to form concept terms are stated. Some constructors are related to logical constructors in first-order logic (FOL) such as intersection or conjunction of concepts, union or disjunction of concepts, negation or complement of concepts, universal restriction and existential restriction . Other constructors have no corresponding construction in FOL including restrictions on roles for example, inverse, transitivity and functionality.  Notation  Let C and D be concepts, a and b be individuals, and R be a role.      Conventional Notation     Symbol        ⊤   top   \top           ⊥   bottom   \bot           ⊓   square-intersection   \sqcap           ⊔   square-union   \sqcup           ¬     \neg           ∀   for-all   \forall           ∃     \exists           ⊑   square-image-of-or-equals   \sqsubseteq           ≡     \equiv            =  ˙     normal-˙     \dot{=}           :   normal-:   :           :   normal-:   :        The description logic ALC  The prototypical DL Attributive Concept Language with Complements (    𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}   ) was introduced by Manfred Schmidt-Schauß and Gert Smolka in 1991, and is the basis of many more expressive DL. 27 The following definitions follow the treatment in Baader et al. 28  Let    N  C     subscript  N  C    N_{C}   ,    N  R     subscript  N  R    N_{R}   and    N  O     subscript  N  O    N_{O}   be (respectively) sets of concept names (also known as atomic concepts ), role names and individual names (also known as individuals , nominals or objects ). Then the ordered triple (    N  C     subscript  N  C    N_{C}   ,    N  R     subscript  N  R    N_{R}   ,    N  O     subscript  N  O    N_{O}   ) is the signature .  Concepts  The set of    𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}    concepts is the smallest set such that:   The following are concepts :     ⊤   top   \top   ( top is a concept )     ⊥   bottom   \bot   ( bottom is a concept )  Every    A  ∈   N  C       A   subscript  N  C     A\in N_{C}   (all atomic concepts are concepts )   If   C   C   C   and   D   D   D   are concepts and    R  ∈   N  R       R   subscript  N  R     R\in N_{R}   then the following are concepts :      C  ⊓  D     square-intersection  C  D    C\sqcap D   (the intersection of two concepts is a concept )      C  ⊔  D     square-union  C  D    C\sqcup D   (the union of two concepts is a concept )      ¬  C       C    \neg C   (the complement of a concept is a concept )       ∀  R   .  C     formulae-sequence   for-all  R   C    \forall R.C   (the universal restriction of a concept by a role is a concept )       ∃  R   .  C     formulae-sequence    R   C    \exists R.C   (the existential restriction of a concept by a role is a concept )    Terminological axioms  A general concept inclusion (GCI) has the form    C  ⊑  D     square-image-of-or-equals  C  D    C\sqsubseteq D   where   C   C   C   and   D   D   D   are concepts . Write    C  ≡  D      C  D    C\equiv D   when    C  ⊑  D     square-image-of-or-equals  C  D    C\sqsubseteq D   and    D  ⊑  C     square-image-of-or-equals  D  C    D\sqsubseteq C   . A TBox is any finite set of GCIs.  Assertional axioms   A concept assertion is a statement of the form    a  :  C     normal-:  a  C    a:C   where    a  ∈   N  O       a   subscript  N  O     a\in N_{O}   and C is a concept .  A role assertion is a statement of the form     (  a  ,  b  )   :  R     normal-:   a  b   R    (a,b):R   where     a  ,  b   ∈   N  O        a  b    subscript  N  O     a,b\in N_{O}   and R is a role .   An ABox is a finite set of assertional axioms.  Knowledge base  A knowledge base (KB) is an ordered pair    (  𝒯  ,  𝒜  )     𝒯  𝒜    (\mathcal{T},\mathcal{A})   for TBox    𝒯   𝒯   \mathcal{T}   and ABox    𝒜   𝒜   \mathcal{A}   .  Semantics  The semantics of description logics are defined by interpreting concepts as sets of individuals and roles as sets of ordered pairs of individuals. Those individuals are typically assumed from a given domain. The semantics of non-atomic concepts and roles is then defined in terms of atomic concepts and roles. This is done by using a recursive definition similar to the syntax.  The description logic ALC  The following definitions follow the treatment in Baader et al. 29  A terminological interpretation     ℐ  =   (   Δ  ℐ   ,   ⋅  ℐ   )       ℐ    superscript  normal-Δ  ℐ    superscript  normal-⋅  ℐ      \mathcal{I}=(\Delta^{\mathcal{I}},\cdot^{\mathcal{I}})   over a signature     (   N  C   ,   N  R   ,   N  O   )      subscript  N  C    subscript  N  R    subscript  N  O     (N_{C},N_{R},N_{O})   consists of   a non-empty set    Δ  ℐ     superscript  normal-Δ  ℐ    \Delta^{\mathcal{I}}   called the domain  a interpretation function     ⋅  ℐ     superscript  normal-⋅  ℐ    \cdot^{\mathcal{I}}   that maps:  every individual    a   a   a   to an element     a  ℐ   ∈   Δ  ℐ        superscript  a  ℐ    superscript  normal-Δ  ℐ     a^{\mathcal{I}}\in\Delta^{\mathcal{I}}     every concept to a subset of    Δ  ℐ     superscript  normal-Δ  ℐ    \Delta^{\mathcal{I}}     every role name to a subset of     Δ  ℐ   ×   Δ  ℐ        superscript  normal-Δ  ℐ    superscript  normal-Δ  ℐ     \Delta^{\mathcal{I}}\times\Delta^{\mathcal{I}}       such that        ⊤  ℐ   =   Δ  ℐ      fragments   superscript  top  ℐ     superscript  normal-Δ  ℐ     \top^{\mathcal{I}}=\Delta^{\mathcal{I}}          ⊥  ℐ   =  ∅     fragments   superscript  bottom  ℐ       \bot^{\mathcal{I}}=\emptyset           (   C  ⊔  D   )   ℐ   =    C  ℐ   ∪   D  ℐ         superscript   square-union  C  D   ℐ      superscript  C  ℐ    superscript  D  ℐ      (C\sqcup D)^{\mathcal{I}}=C^{\mathcal{I}}\cup D^{\mathcal{I}}    ( union means disjunction )        (   C  ⊓  D   )   ℐ   =    C  ℐ   ∩   D  ℐ         superscript   square-intersection  C  D   ℐ      superscript  C  ℐ    superscript  D  ℐ      (C\sqcap D)^{\mathcal{I}}=C^{\mathcal{I}}\cap D^{\mathcal{I}}    ( intersection means conjunction )        (   ¬  C   )   ℐ   =    Δ  ℐ   ∖   C  ℐ         superscript     C   ℐ      superscript  normal-Δ  ℐ    superscript  C  ℐ      (\neg C)^{\mathcal{I}}=\Delta^{\mathcal{I}}\setminus C^{\mathcal{I}}    ( complement means negation )        (  ∀  R  .  C  )   ℐ   =   {  x  ∈   Δ  ℐ   |   𝚏𝚘𝚛    𝚎𝚟𝚎𝚛𝚢   y  ,   (  x  ,  y  )   ∈    R  ℐ     𝚒𝚖𝚙𝚕𝚒𝚎𝚜   y  ∈   C  ℐ   }      fragments   superscript   fragments  normal-(  for-all  R  normal-.  C  normal-)   ℐ     fragments  normal-{  x    superscript  normal-Δ  ℐ   normal-|  for  every  y  normal-,   fragments  normal-(  x  normal-,  y  normal-)     superscript  R  ℐ   implies  y    superscript  C  ℐ   normal-}     (\forall R.C)^{\mathcal{I}}=\{x\in\Delta^{\mathcal{I}}|\texttt{for}\;\texttt{%
 every}\;y,(x,y)\in R^{\mathcal{I}}\;\texttt{implies}\;y\in C^{\mathcal{I}}\}           (  ∃  R  .  C  )   ℐ   =   {  x  ∈   Δ  ℐ   |   𝚝𝚑𝚎𝚛𝚎    𝚎𝚡𝚒𝚜𝚝𝚜   y  ,   (  x  ,  y  )   ∈    R  ℐ     𝚊𝚗𝚍   y  ∈   C  ℐ   }      fragments   superscript   fragments  normal-(   R  normal-.  C  normal-)   ℐ     fragments  normal-{  x    superscript  normal-Δ  ℐ   normal-|  there  exists  y  normal-,   fragments  normal-(  x  normal-,  y  normal-)     superscript  R  ℐ   and  y    superscript  C  ℐ   normal-}     (\exists R.C)^{\mathcal{I}}=\{x\in\Delta^{\mathcal{I}}|\texttt{there}\;\texttt%
 {exists}\;y,(x,y)\in R^{\mathcal{I}}\;\texttt{and}\;y\in C^{\mathcal{I}}\}      Define    ℐ  ⊧      models  ℐ  absent    \mathcal{I}\models   (read in I holds ) as follows  TBox       ℐ  ⊧  C  ⊑  D       models  ℐ  C    square-image-of-or-equals    D     \mathcal{I}\models C\sqsubseteq D   if and only if     C  ℐ   ⊆   D  ℐ        superscript  C  ℐ    superscript  D  ℐ     C^{\mathcal{I}}\subseteq D^{\mathcal{I}}         ℐ  ⊧  𝒯     models  ℐ  𝒯    \mathcal{I}\models\mathcal{T}   if and only if    ℐ  ⊧  Φ     models  ℐ  normal-Φ    \mathcal{I}\models\Phi   for every    Φ  ∈  𝒯      normal-Φ  𝒯    \Phi\in\mathcal{T}      ABox        ℐ  ⊧  a   :  C     normal-:   models  ℐ  a   C    \mathcal{I}\models a:C   if and only if     a  ℐ   ∈   C  ℐ        superscript  a  ℐ    superscript  C  ℐ     a^{\mathcal{I}}\in C^{\mathcal{I}}          ℐ  ⊧   (  a  ,  b  )    :  R     normal-:   models  ℐ   a  b    R    \mathcal{I}\models(a,b):R   if and only if     (   a  ℐ   ,   b  ℐ   )   ∈   R  ℐ         superscript  a  ℐ    superscript  b  ℐ     superscript  R  ℐ     (a^{\mathcal{I}},b^{\mathcal{I}})\in R^{\mathcal{I}}         ℐ  ⊧  𝒜     models  ℐ  𝒜    \mathcal{I}\models\mathcal{A}   if and only if    ℐ  ⊧  ϕ     models  ℐ  ϕ    \mathcal{I}\models\phi   for every    ϕ  ∈  𝒜      ϕ  𝒜    \phi\in\mathcal{A}      Knowledge base  Let    𝒦  =   (  𝒯  ,  𝒜  )       𝒦   𝒯  𝒜     \mathcal{K}=(\mathcal{T},\mathcal{A})   be a knowledge base.       ℐ  ⊧  𝒦     models  ℐ  𝒦    \mathcal{I}\models\mathcal{K}   if and only if    ℐ  ⊧  𝒯     models  ℐ  𝒯    \mathcal{I}\models\mathcal{T}   and    ℐ  ⊧  𝒜     models  ℐ  𝒜    \mathcal{I}\models\mathcal{A}      Inference  Decision problems  In addition to the ability to describe concepts formally, one also would like to employ the description of a set of concepts to ask questions about the concepts and instances described. The most common decision problems are basic database-query-like questions like instance checking (is a particular instance (member of an A-box) a member of a given concept) and relation checking (does a relation/role hold between two instances, in other words does a have property b ), and the more global-database-questions like subsumption (is a concept a subset of another concept), and concept consistency (is there no contradiction among the definitions or chain of definitions). The more operators one includes in a logic and the more complicated the T-box (having cycles, allowing non-atomic concepts to include each other), usually the higher the computational complexity is for each of these problems (see Navigator on Description Logic Complexity for examples).  Relationship with other logics  First order logic  Many Description Logics (DLs) are decidable  fragments of first order logic (FOL). 30 and are usually fragments of two-variable logic or guarded logic . In addition, some DLs have features that are not covered in FOL; this includes concrete domains (such as integer or strings which can be used as ranges for roles such as hasAge or hasName ) or an operator on roles for the transitive closure of that role. 31  Fuzzy description logic  Fuzzy description logics combines fuzzy logic with DLs. Since many concepts that are needed for intelligent systems lack well defined boundaries, or precisely defined criteria of membership, fuzzy logic is needed to deal with notions of vagueness and imprecision. This offers a motivation for a generalization of description logic towards dealing with imprecise and vague concepts.  Modal logic  Description Logics is related to — but developed independently of — modal logic (ML). 32 Many — but not all — DL are syntactic variants of ML. 33  In general, an object corresponds to a possible world , a concept corresponds to a modal proposition, and a role-bounded quantifier to a modal operator with that role as its accessibility relation.  Operations on roles (such as composition, inversion, etc.) correspond to the modal operations used in dynamic logic . 34 35  Examples      Syntactic Variants     DL         𝒜  ℒ  𝒞      𝒜  ℒ  𝒞    \mathcal{ALC}            𝒮  ℛ      𝒮  ℛ    \mathcal{SR}            ℱ  𝒮  ℛ      ℱ  𝒮  ℛ    \mathcal{FSR}             𝒯  𝒮  ℒ   ,   o  r  𝒮  ℛ  ℐ        𝒯  𝒮  ℒ     o  r  𝒮  ℛ  ℐ     \mathcal{TSL},or\mathcal{SRI}             ℱ  𝒮  ℒ   ,   o  r  ℱ  𝒮  ℛ  ℐ        ℱ  𝒮  ℒ     o  r  ℱ  𝒮  ℛ  ℐ     \mathcal{FSL},or\mathcal{FSRI}        Temporal description logic  Temporal description logic represents — and allows reasoning about — time dependent concepts and many different approaches to this problem exist. 36 For example, a description logic might be combined with a modal  temporal logic such as Linear temporal logic .  See also   Formal concept analysis  Lattice (order)  Semantic parameterization  Semantic reasoner  SWRL   Notes  References   F. Baader, D. Calvanese, D. L. McGuinness, D. Nardi, P. F. Patel-Schneider: The Description Logic Handbook: Theory, Implementation, Applications . Cambridge University Press, Cambridge, UK, 2003. ISBN 0-521-78176-0  Ian Horrocks, Ulrike Sattler: Ontology Reasoning in the SHOQ(D) Description Logic , in Proceedings of the Seventeenth International Joint Conference on Artificial Intelligence , 2001.  D. Fensel, F. van Harmelen, I. Horrocks, D. McGuinness, and P. F. Patel-Schneider: OIL: An Ontology Infrastructure for the Semantic Web . IEEE Intelligent Systems, 16(2):38-45, 2001.  Ian Horrocks and Peter F. Patel-Schneider: The Generation of DAML+OIL . In Proceedings of the 2001 Description Logic Workshop (DL 2001) , volume 49 of CEUR , pages 30–35, 2001.  Ian Horrocks, Peter F. Patel-Schneider, and Frank van Harmelen: From SHIQ and RDF to OWL: The Making of a Web Ontology Language . Journal of Web Semantics, 1(1):7-26, 2003.  Bernardo Cuenca Grau, Ian Horrocks, Boris Motik, Bijan Parsia, Peter Patel-Schneider, and Ulrike Sattler: OWL 2: The next step for OWL . Journal of Web Semantics, 6(4):309-322, November 2008.  Franz Baader, Ian Horrocks, and Ulrike Sattler: Chapter 3 Description Logics . In Frank van Harmelen, Vladimir Lifschitz, and Bruce Porter, editors, Handbook of Knowledge Representation . Elsevier, 2007.  Alessandro Artale and Enrico Franconi: Temporal Description Logics . In Handbook of Temporal Reasoning in Artificial Intelligence, 2005.  Web Ontology (WebONT) Working Group Charter . W3C, 2003  World Wide Web Consortium Issues RDF and OWL Recommendations . Press Release. W3C, 2004.  OWL Working Group Charter . W3C, 2007.  OWL 2 Connects the Web of Knowledge with the Web of Data . Press Release. W3C, 2009.   Further reading   Markus Krötzsch , František Simančík , Ian Horrocks : A Description Logic Primer . CoRR abs/1201.4089. 2012. ( PDF ) A very first introduction for readers without a formal logic background.  Sebastian Rudolph : Foundations of Description Logics . In Reasoning Web: Semantic Technologies for the Web of Data, 7th International Summer School, volume 6848 of Lecture Notes in Computer Science, pages 76–136. Springer, 2011. ( springerlink ) Introductory text with a focus on modelling and formal semantics. There are also slides .  Franz Baader : Description Logics . In Reasoning Web: Semantic Technologies for Information Systems, 5th International Summer School, volume 5689 of Lecture Notes in Computer Science, pages 1–39. Springer, 2009. ( springerlink ) Introductory text with a focus on reasoning and language design, and an extended historical overview.  Enrico Franconi : Introduction to Description Logics . Course materials. Faculty of Computer Science, Free University of Bolzano, Italy, 2002. Lecture slides and many literature pointers, somewhat dated.  Ian Horrocks : Ontologies and the Semantic Web . Communications of the ACM , 51(12):58-67, December 2008. A general overview of knowledge representation in Semantic Web technologies.   External links   Description Logics , the official web page of the community  Navigator on Description Logic Complexity at the University of Manchester  A list of DL reasoners at the University of Manchester   Tools   Reasoners   There are some reasoners that deal with OWL and Description Logic. These are some of the most popular:   CEL is a free (for non-commercial use) LISP-based reasoner  Cerebra Engine was a commercial C++-based reasoner, acquired in 2006 by webMethods.  FaCT++ is a free open-source C++-based reasoner.  KAON 2 is a free (free for non-commercial usage) Java reasoner.  MSPASS is a free open-source C reasoner for numerous description logic models.  Pellet is a dual-licensed (AGPL and proprietary) commercial, Java-based reasoner.  RacerPro of Racer Systems is a commercial (free trials and research licenses are available) lisp-based reasoner.  Sim-DL is a free open-source Java-based reasoner for the language ALCHQ. It also provides a similarity measurement functionality between concepts. To access this functionality a Protégé plugin can be used.  HermiT is an open source reasoner based on the hypertableaux calculus. It is developed by the University of Oxford .    Editors    Protégé is a free, open source ontology editor and knowledge-base framework, which can use DL reasoners which offer a DIG interface as backends for consistency checks.  SWOOP is an open source ontology editor originally developed at the University of Maryland .    Interfaces    DIG Implementation. DIG is an XML interface to DL systems, recommended by the DL Implementation Group . DIG 2.0 is an ongoing effort for a new DIG interface standard.  OWL API is an open source  Java interface to the W3C Web Ontology Language OWL developed by the University Of Manchester   "  Category:Knowledge representation languages  Category:Non-classical logic  Category:Information science  Category:Artificial intelligence     ↩   ↩  ↩  Franz Baader, Ian Horrocks, and Ulrike Sattler Chapter 3 Description Logics . In Frank van Harmelen, Vladimir Lifschitz, and Bruce Porter, editors, Handbook of Knowledge Representation . Elsevier, 2007. ↩        ↩   ↩  Ian Horrocks and Ulrike Sattler Ontology Reasoning in the SHOQ(D) Description Logic , in Proceedings of the Seventeenth International Joint Conference on Artificial Intelligence , 2001. ↩  ↩  Ian Horrocks and Peter F. Patel-Schneider The Generation of DAML+OIL . In Proceedings of the 2001 Description Logic Workshop (DL 2001) , volume 49 of CEUR , pages 30–35, 2001. ↩  Web Ontology Working Group Charter, 2003 ↩  W3C Press Release, 2004 ↩  ↩   OWL Working Group Charter, 2007 ↩  ↩  ↩           ↩   Alessandro Artale and Enrico Franconi "Temporal Description Logics". In "Handbook of Temporal Reasoning in Artificial Intelligence", 2005. ↩     