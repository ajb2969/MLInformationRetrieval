


Compressed suffix array




Compressed suffix array
In [[computer science]], a '''compressed suffix array'''R. Grossi and J. S. Vitter, Compressed Suffix A
 rrays and Suffix Trees, with Applications to Text Indexing and String Matching, SIAM Journal on Computing, 35(2), 2005, 378-407. An earlier version appeared in ''Proceedings of the 32nd ACM Symposium on Theory of Computing, May 2000, 397-406.12 is a compressed data structure for pattern matching. Compressed suffix arrays are a general class of data structure that improve on the suffix array.34 These data structures enable quick search for an arbitrary string with a comparatively small index.
Given a text T of n characters from an alphabet Σ, a compressed suffix array supports searching for arbitrary patterns in T. For an input pattern P of m characters, the search time is typically O(m) or O(m + log(n)). The space used is typically 
 
 
 
 , where 
 
 
 
  is the k-th order empirical entropy of the text T. The time and space to construct a compressed suffix array are normally O(n).
The original instantiation of the compressed suffix array5 solved a long-standing open problem by showing that fast pattern matching was possible using only a linear-space data structure, namely, one proportional to the size of the text T, which takes 
 
 
 
  bits. The conventional suffix array and suffix tree use 
 
 
 
  bits, which is substantially larger. The basis for the data structure is a recursive decomposition using the "neighbor function," which allows a suffix array to be represented by one of half its length. The construction is repeated multiple times until the resulting suffix array uses a linear number of bits. Following work showed that the actual storage space was related to the zeroth-order entropy and that the index supports self-indexing.6 The space bound was further improved achieving the ultimate goal of higher-order entropy; the compression is obtained by partitioning the neighbor function by high-order contexts, and compressing each partition with a wavelet tree.7 The space usage is extremely competitive in practice with other state-of-the-art compressors,8 and it also supports fast pattern matching.
The memory accesses made by compressed suffix arrays and other compressed data structures for pattern matching are typically not localized, and thus these data structures have been notoriously hard to design efficiently for use in external memory. Recent progress using geometric duality takes advantage of the block access provided by disks to speed up the I/O time significantly9 In addition, potentially practical search performance for a compressed suffix array in external-memory has been demonstrated.10
Open Source Implementations
There are several open source implementations of compressed suffix arrays available (see External Links below). Bowtie and Bowtie2 are open-source compressed suffix array implementations of read alignment for use in bioinformatics. The Succinct Data Structure Library (SDSL) is a library containing a variety of compressed data structures including compressed suffix arrays. FEMTO is an implementation of compressed suffix arrays for external memory. In addition, a variety of implementations, including the original FM-index implementations, are available from the Pizza & Chili Website.
See also

FM-index
Suffix Array

References


External links
Implementations:

Bowtie and Bowtie2
Succinct Data Structure Library (SDSL)
FEMTO
Pizza&Chili; website.

"
Category:String data structures Category:Database index techniques Category:Substring indices



Paolo Ferragina and Giovanni Manzini (2000). "Opportunistic Data Structures with Applications". Proceedings of the 41st Annual Symposium on Foundations of Computer Science. p.390.↩
R. Grossi, A. Gupta, and J. S. Vitter, High-Order Entropy-Compressed Text Indexes, Proceedings of the 14th Annual SIAM/ACM Symposium on Discrete Algorithms, January 2003, 841-850.↩



K. Sadakane, Compressed Text Databases with Efficient Query Algorithms Based on the Compressed Suffix Arrays, Proceedings of the International Symposium on Algorithms and Computation, Lecture Notes in Computer Science, vol. 1969, Springer, December 2000, 410-421.↩

L. Foschini, R. Grossi, A. Gupta, and J. S. Vitter, Indexing Equals Compression: Experiments on Suffix Arrays and Trees, ACM Transactions on Algorithms, 2(4), 2006, 611-639.↩
W.-K. Hon, R. Shah, S. V. Thankachan, and J. S. Vitter, On Entropy-Compressed Text Indexing in External Memory, Proceedings of the Conference on String Processing and Information Retrieval, August 2009.↩
M. P. Ferguson, FEMTO: fast search of large sequence collections, Proceedings of the 23rd Annual Conference on Combinatorial Pattern Matching, July 2012↩




