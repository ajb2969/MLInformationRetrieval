   Stencil code      Stencil code   (Figure)  The shape of a 6-point 3D von Neumann style stencil.   Stencil codes are a class of iterative kernels  Roth, Gerald et al. (1997)  Proceedings of SC'97: High Performance Networking and Computing.   Compiling  Stencils  in  High  Performance  Fortran.  which update array elements according to some fixed pattern, called stencil.  Sloot, Peter M.A. et al. (May 28, 2002)   [ http://books.google.com/books?id=qVcLw1UAFUsC&pg; ;=PA843&dq;=stencil+array&sig;=g3gYXncOThX56TUBfHE7hnlSxJg#PPA843,M1  Computational  Science  –  ICCS  2002:  International  Conference,  Amsterdam,  The  Netherlands,  April  21–24,  2002.  Proceedings,  Part  I.]   Page 843. Publisher: Springer. ISBN 3-540-43591-3.  They are most commonly found in the codes of computer simulations , e.g. for computational fluid dynamics in the context of scientific and engineering applications. Other notable examples include solving partial differential equations , 1 the Jacobi kernel, the Gauss–Seidel method , 2  image processing 3 and cellular automata .  Fey, Dietmar et al. (2010)   [ http://books.google.com/books?id=RJRZJHVyQ4EC&pg; ;=PA51&dq;=fey+grid&hl;=de&ei;=uGk8TtDAAo_zsgbEoZGpBQ&sa;=X&oi;=book_result&ct;=result&resnum;=1&ved;=0CCoQ6AEwAA#v=onepage&q;&f;=true  Grid-Computing:  Eine  Basistechnologie  für  Computational  Science] .  Page 439. Publisher: Springer. ISBN 3-540-79746-7   The regular structure of the arrays sets stencil codes apart from other modeling methods such as the Finite element method . Most finite difference codes which operate on regular grids can be formulated as stencil codes.  Definition  Stencil codes perform a sequence of sweeps (called timesteps) through a given array. 4 Generally this is a 2- or 3-dimensional regular grid. 5 The elements of the arrays are often referred to as cells. In each timestep, the stencil code updates all array elements. 6 Using neighboring array elements in a fixed pattern (called the stencil), each cell's new value is computed. In most cases boundary values are left unchanged, but in some cases (e.g. LBM codes ) those need to be adjusted during the course of the computation as well. Since the stencil is the same for each element, the pattern of data accesses is repeated.  Yang, Laurence T.; Guo, Minyi. (August 12, 2005)   [ http://books.google.com/books?id=qA4DbnFB2XcC&pg; ;=PA221&dq;=Stencil+codes&as;_brr=3&sig;=H8wdKyABXT5P7kUh4lQGZ9C5zDk  High-Performance  Computing  :  Paradigm  and  Infrastructure.]   Page 221. Publisher: Wiley-Interscience. ISBN 0-471-65471-X   More formally, we may define stencil codes as a 5-tuple     (  I  ,  S  ,   S  0   ,  s  ,  T  )     I  S   subscript  S  0   s  T    (I,S,S_{0},s,T)   with the following meaning: 7       I  =    ∏   i  =  1   k    [  0  ,  …  ,   n  i   ]        I    superscript   subscript  product    i  1    k    0  normal-…   subscript  n  i       I=\prod_{i=1}^{k}[0,\ldots,n_{i}]   is the index set. It defines the topology of the array.     S   S   S   is the (not necessarily finite) set of states, one of which each cell may take on on any given timestep.       S  0   :     \Z   k   →  S      normal-:   subscript  S  0    normal-→   superscript  \Z  k   S     S_{0}\colon\Z^{k}\to S   defines the initial state of the system at time 0.      s  ∈    ∏   i  =  1   l     \Z   k        s    superscript   subscript  product    i  1    l    superscript  \Z  k      s\in\prod_{i=1}^{l}\Z^{k}   is the stencil itself and describes the actual shape of the neighborhood. There are   l   l   l   elements in the stencil.      T  :    S  l   →  S      normal-:  T   normal-→   superscript  S  l   S     T\colon S^{l}\to S   is the transition function which is used to determine a cell's new state, depending on its neighbors.   Since I is a k -dimensional integer interval, the array will always have the topology of a finite regular grid. The array is also called simulation space and individual cells are identified by their index    c  ∈  I      c  I    c\in I   . The stencil is an ordered set of   l   l   l   relative coordinates. We can now obtain for each cell   c   c   c   the tuple of its neighbors indices    I  c     subscript  I  c    I_{c}          I  c   =   {  j  ∣     ∃  x   ∈  s   :   j  =   c  +  x     }        subscript  I  c    conditional-set  j   normal-:      x   s     j    c  x        I_{c}=\{j\mid\exists x\in s:j=c+x\}\,     Their states are given by mapping the tuple    I  c     subscript  I  c    I_{c}   to the corresponding tuple of states     N  i    (  c  )        subscript  N  i   c    N_{i}(c)   , where     N  i   :   I  →   S  l       normal-:   subscript  N  i    normal-→  I   superscript  S  l      N_{i}\colon I\to S^{l}   is defined as follows:        N  i    (  c  )    =    (   s  1   ,  …  ,   s  l   )   with   s  j    =    S  i    (    I  c    (  j  )    )             subscript  N  i   c       subscript  s  1   normal-…   subscript  s  l    with   subscript  s  j            subscript  S  i      subscript  I  c   j       N_{i}(c)=(s_{1},\ldots,s_{l})\text{ with }s_{j}=S_{i}(I_{c}(j))\,     This is all we need to define the system's state for the following time steps     S   i  +  1    :     \Z   k   →  S      normal-:   subscript  S    i  1     normal-→   superscript  \Z  k   S     S_{i+1}\colon\Z^{k}\to S   with    i  ∈  𝒩      i  𝒩    i\in\mathcal{N}   :        S   i  +  1     (  c  )    =   {       T   (    N  i    (  c  )    )    ,      c  ∈  I          S  i    (  c  )    ,      c  ∈     \Z   k   ∖  I               subscript  S    i  1    c    cases    T     subscript  N  i   c      c  I      subscript  S  i   c     c     superscript  \Z  k   I       S_{i+1}(c)=\begin{cases}T(N_{i}(c)),&c\in I\\
 S_{i}(c),&c\in\Z^{k}\setminus I\end{cases}     Note that    S  i     subscript  S  i    S_{i}   is defined on     \Z   k     superscript  \Z  k    \Z^{k}   and not just on   I   I   I   since the boundary conditions need to be set, too. Sometimes the elements of    I  c     subscript  I  c    I_{c}   may be defined by a vector addition modulo the simulation space's dimension to realize toroidal topologies:       I  c   =   {  j  ∣     ∃  x   ∈  s   :   j  =   (    (   c  +  x   )   mod   (   n  1   ,  …  ,   n  k   )    )     }        subscript  I  c    conditional-set  j   normal-:      x   s     j   modulo    c  x     subscript  n  1   normal-…   subscript  n  k          I_{c}=\{j\mid\exists x\in s:j=((c+x)\mod(n_{1},\ldots,n_{k}))\}     This may be useful for implementing periodic boundary conditions , which simplifies certain physical models.  Example: 2D Jacobi iteration  (Figure)  Data dependencies of a selected cell in the 2D array.   To illustrate the formal definition, we'll have a look at how a two dimensional Jacobi iteration can be defined. The update function computes the arithmetic mean of a cell's four neighbors. In this case we set off with an initial solution of 0. The left and right boundary are fixed at 1, while the upper and lower boundaries are set to 0. After a sufficient number of iterations, the system converges against a saddle-shape.     I   I   \displaystyle I     Stencils  The shape of the neighborhood used during the updates depends on the application itself. The most common stencils are the 2D or 3D versions of the von Neumann neighborhood and Moore neighborhood . The example above uses a 2D von Neumann stencil while LBM codes generally use its 3D variant. Conway's Game of Life uses the 2D Moore neighborhood. That said, other stencils such as a 25-point stencil for seismic wave propagation  Micikevicius, Paulius et al. (2009)   3D  finite  difference  computation  on  GPUs  using  CUDA   Proceedings of 2nd Workshop on General Purpose Processing on Graphics Processing Units  ISBN 978-1-60558-517-8  can be found, too.  Implementation issues  Many simulation codes may be formulated naturally as stencil codes. Since computing time and memory consumption grow linearly with the number of array elements, parallel implementations of stencil codes are of paramount importance to research.  Datta, Kaushik (2009)   Auto-tuning  Stencil  Codes  for  Cache-Based  Multicore  Platforms ,  Ph.D. Thesis  This is challenging since the computations are tightly coupled (because of the cell updates depending on neighboring cells) and most stencil codes are memory bound (i.e. the ratio of memory accesses to calculations is high).  Wellein, G et al. (2009)   Efficient  temporal  blocking  for  stencil  computations  by  multicore-aware  wavefront  parallelization ,  33rd Annual IEEE International Computer Software and Applications Conference, COMPSAC 2009  Virtually all current parallel architectures have been explored for executing stencil codes efficiently;  Datta, Kaushik et al. (2008)   Stencil  computation  optimization  and  auto-tuning  on  state-of-the-art  multicore  architectures ,   SC '08 Proceedings of the 2008 ACM/IEEE conference on Supercomputing  at the moment GPGPUs have proven to be most efficient.  Schäfer, Andreas and Fey, Dietmar (2011)   High  Performance  Stencil  Code  Algorithms  for  GPGPUs ,  Proceedings of the International Conference on Computational Science, ICCS 2011   Libraries  Due to both, the importance of stencil codes to computer simulations and their high computational requirements, there are a number of efforts which aim at creating reusable libraries to support scientists in implementing new stencil codes. The libraries are mostly concerned with the parallelization, but may also tackle other challenges, such as IO, steering and checkpointing . They may be classified by their API.  Patch-based libraries  This is a traditional design. The library manages a set of n -dimensional scalar arrays, which the user code may access to perform updates. The library handles the synchronization of the boundaries (dubbed ghost zone or halo). The advantage of this interface is that the user code may loop over the arrays, which makes it easy to integrate legacy codes  S. Donath, J. Götz, C. Feichtinger, K. Iglberger and U. Rüde (2010)   waLBerla:  Optimization  for  Itanium-based  Systems  with  Thousands  of  Processors ,  High Performance Computing in Science and Engineering, Garching/Munich 2009  . The disadvantage is that the library can not handle cache blocking (as this has to be done within the loops  Nguyen, Anthony et al. (2010)   3.5-D  Blocking  Optimization  for  Stencil  Computations  on  Modern  CPUs  and  GPUs ,  SC '10 Proceedings of the 2010 ACM/IEEE International Conference for High Performance Computing, Networking, Storage and Analysis  ) or wrapping of the code for accelerators (e.g. via CUDA or OpenCL). Notable implementations include Cactus , a physics problem solving environment, and waLBerla .  Cell-based libraries  These libraries move the interface to updating single simulation cells: only the current cell and its neighbors are exposed to the user code, e.g. via getter/setter methods. The advantage of this approach is that the library can control tightly which cells are updated in which order, which is useful not only to implement cache blocking, 8 but also to run the same code on multi-cores and GPUs.  Naoya Maruyama, Tatsuo Nomura, Kento Sato, and Satoshi Matsuoka (2011)   Physis:  An  Implicitly  Parallel  Programming  Model  for  Stencil  Computations  on  Large-Scale  GPU-Accelerated  Supercomputers ,  SC '11 Proceedings of the 2011 ACM/IEEE International Conference for High Performance Computing, Networking, Storage and Analysis  This approach requires the user to recompile the source code together with the library. Otherwise a function call for every cell update would be required, which would seriously impair performance. This is only feasible with techniques such as class templates or metaprogramming , which is also the reason why this design is only found in newer libraries. Examples are Physis and LibGeoDecomp .  See also   Finite difference method  Computer simulation  Five-point stencil  Stencil jumping   References  External links   Physis  LibGeoDecomp   "  Category:Computational science  Category:Scientific modeling  Category:Simulation software                