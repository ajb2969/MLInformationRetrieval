   Lossless-Join Decomposition      Lossless-Join Decomposition   In computer science the concept of a Lossless-Join Decomposition is central in removing redundancy safely from databases while preserving the original data.  Lossless-join Decomposition  Can also be called Nonadditive. If you decompose a relation   R   R   R   into relations    R  1     subscript  R  1    R_{1}   and    R  2     subscript  R  2    R_{2}   you will guarantee a Lossless-Join if    R  1     subscript  R  1    R_{1}   ⋈    R  2     subscript  R  2    R_{2}   =   R   R   R   .  If R is split into R1 and R2, for the decomposition to be lossless then at least one of the two should hold true.  Projecting on R1 and R2, and joining back, results in the relation you started with. 1 Let   R   R   R   be a relation schema.  Let   F   F   F   be a set of functional dependencies on   R   R   R   .  Let    R  1     subscript  R  1    R_{1}   and    R  2     subscript  R  2    R_{2}   form a decomposition of   R   R   R   .  The decomposition is a lossless-join decomposition of R if at least one of the following functional dependencies are in   F   F   F    + (where   F   F   F    + stands for the closure for every attribute or attribute sets in   F   F   F   ): 2       R  1     subscript  R  1    R_{1}   ∩    R  2     subscript  R  2    R_{2}   →    R  1     subscript  R  1    R_{1}         R  1     subscript  R  1    R_{1}   ∩    R  2     subscript  R  2    R_{2}   →    R  2     subscript  R  2    R_{2}      Example   Let    R  =   (  A  ,  B  ,  C  ,  D  )       R   A  B  C  D     R=(A,B,C,D)   be the relation schema, with   A   A   A   ,   B   B   B   ,   C   C   C   and   D   D   D   attributes.  Let    F  =   {  A  →  B  C  }      fragments  F    fragments  normal-{  A  normal-→  B  C  normal-}     F=\{A\rightarrow BC\}   be the set of functional dependencies.  Decomposition into     R  1   =   (  A  ,  B  ,  C  )        subscript  R  1    A  B  C     R_{1}=(A,B,C)   and     R  2   =   (  A  ,  D  )        subscript  R  2    A  D     R_{2}=(A,D)   is lossless under   F   F   F   because      R  1   ∩   R  2    =   (  A  )          subscript  R  1    subscript  R  2    A    R_{1}\cap R_{2}=(A)   ,   A   A   A   is a superkey in    R  1     subscript  R  1    R_{1}   (    A  →   B  C      normal-→  A    B  C     A\rightarrow BC   ) so      R  1   ∩   R  2    →   R  1      normal-→     subscript  R  1    subscript  R  2     subscript  R  1     R_{1}\cap R_{2}\rightarrow R_{1}   .   3  4  References  "  Category:Databases  Category:Data modeling  Category:Database constraints    Category:Relational algebra     http://stackoverflow.com/questions/5771810/lossless-join-property ↩  ↩  http://www.cs.sfu.ca/CourseCentral/354/zaiane/material/notes/Chapter7/node7.html ↩  http://www.data-e-education.com/E121_Lossless_Join_Decomposition.html ↩     