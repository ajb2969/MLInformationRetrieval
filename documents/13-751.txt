   Join dependency      Join dependency   In the area of computer science known as dependency theory , a join dependency is a constraint on the set of legal relations over a database scheme. A table T is subject to a join dependency if T can always be recreated by joining multiple tables each having a subset of the attributes of T. If one of the tables in the join has all the attributes of the table T, the join dependency is called trivial.  The join dependency plays an important role in the Fifth normal form , also known as project-join normal form , because it can be proven that if you decompose a scheme   R   R   R   in tables    R  1     subscript  R  1    R_{1}   to    R  n     subscript  R  n    R_{n}   , the decomposition will be a lossless-join decomposition if you restrict the legal relations on   R   R   R   to a join dependency on   R   R   R   called     *   (   R  1   ,   R  2   ,  …  ,   R  n   )       absent    subscript  R  1    subscript  R  2   normal-…   subscript  R  n      *(R_{1},R_{2},\ldots,R_{n})   .  Another way to describe a join dependency is to say that the set of relationships in the join dependency is independent of each other.  Unlike in the case of functional dependencies , there is no sound and complete axiomatization for join dependencies, 1 though axiomatization exist for more expressive dependency languages such as full typed dependencies . 2 However, implication of join dependencies is decidable. 3  Formal definition  2-ary join dependencies are called multivalued dependency as a historical artifact of the fact that they were studied before the general case. More specifically if U is a set of attributes and R a relation over it, then R satisfies    X  ↠  Y     normal-↠  X  Y    X\twoheadrightarrow Y    iff  R satisfies     *   (   X  ∪  Y   ,   X  ∪   (   U  -  Y   )    )       absent     X  Y     X    U  Y       *(X\cup Y,X\cup(U-Y))     Example  Given a pizza-chain that models purchases in table Customer = { order-number, customer-name, pizza-name, courier}. It is obvious that you can derive the following relations:   customer-name depends on order-number  pizza-name depends on order-number  courier depends on order-number   Since the relationships are independent you can say there is a join dependency as follows: *((order-number, customer-name), (order-number, pizza-name), (order-number,courier)).  If each customer has his own courier however, you could have a join-dependency like this: *((order-number, customer-name), (order-number, courier), (customer-name, courier), (order-number,pizza-name)), but *((order-number, customer-name, courier), (order-number,pizza-name)) would be valid as well. This makes it obvious that just having a join dependency is not enough to normalize a database scheme.  See also   Chase (algorithm)  Universal relation assumption   References  "  Category:Database normalization     S. V. Petrov. Finite axiomatization of languages for representation of system properties. Information Sciences , 47:339–372, 1989. ↩  Abiteboul, Hull, Vianu. Foundations of databases. Chapter 8, Bibliographic notes ↩  Abiteboul, Hull, Vianu. Foundations of databases. Theorem 8.4.12 ↩     