   Type conversion in C      Type conversion in C   In the C programming language , a type conversion is the conversion two different sorts of data type into a common form, in order for them to be manipulated. The two most commonly used conversion types in the C programming language are:  1.Implict  2.Explict  In the C language there are different basic data types, such as int, char, float, double; there are also some user defined data types such as structures , arrays, etc. If the operator is taking operands of different data types, then they are converted to a common data types by certain rules. Generally, automatic conversions are those which can convert a narrower operand into a wider one without loss of information. For example, converting an integer to floating point in examples like float + integer (on 64-bit machine). A char is simply a small integer, so chars may be freely used in arithmetic expressions.  Conversion of char to integer, every character in c corresponds to a particular ASCII value. Anytime two character are values are operated using arithmetic operator their ASCII values(specific numerical value) are picked and evaluated. But when a char is converted to int can it ever produce negative value? The answer varies from machine to machine, reflecting difference in architecture. On some machines a char whose leftmost bit is 1 will be converted to a negative integer("sign extension"). On others, a char is promoted to int by adding zeroes at the left most end, and thus always positive. The definition of C guarantees that any character in the machine's standard printing character set will never be negative, so these characters will always be positive quantities in expressions.  Relational operators like i>j and logical expressions connected by && and || are defined to have values 1 if true, and 0 if false. Thus the assignment  d= c>= '0' && c will use the double precision. The main reason for using float is to save storage in large arrays, or, less often, to save time on the machines where double- precision arithmetic is particularly expensive.  Conversion rules are more complicated when unsigned operators are involved. The problem is that comparisons between signed and unsigned values are machine-dependent, because they depend on the size of the various integer types. For example, suppose that int is 16 bits and long is 32 bis. Then -1L  1UL, because -1L is promoted to unsigned long and thus appears to be large positive number.  Conversion in assignment operator, the value on right side is converted to value of the left hand side. A character is converted to int. Or Longer integer is converted to char(smaller) by dropping higher-order bits. Thus in  int i;  char c;  i=c;  c=i;  the value of c is unchanged.  Explicitly, forced conversion can be done also be sone (type-name) expression  int i;  (long) i  Conversion to Bool  When converted to Bool anything that is not 0 or NULL is true. (while all known implementations use 0 for NULL this is not required by the standard)  1  References  "  Category:C (programming language)     http://msdn.microsoft.com/en-us/library/3t4w2bkb.aspx ↩     