   Block nested loop      Block nested loop   A block-nested loop ( BNL ) is an algorithm used to join two relations in a relational database . 1  This algorithm 2 is a variation on the simple nested loop join used to join two relations   R   R   R   and   S   S   S   (the "outer" and "inner" join operands, respectively). Suppose     |  R  |   <   |  S  |         R     S     |R|<|S|   . In a traditional nested loop join,   S   S   S   will be scanned once for every tuple of   R   R   R   . If there are many qualifying   R   R   R   tuples, and particularly if there is no applicable index for the join key on   S   S   S   , this operation will be very expensive.  The block nested loop join algorithm improves on the simple nested loop join by only scanning   S   S   S   once for every group of   R   R   R   tuples. For example, one variant of the block nested loop join reads an entire page of   R   R   R   tuples into memory and loads them into a hash table . It then scans   S   S   S   , and probes the hash table to find   S   S   S   tuples that match any of the tuples in the current page of   R   R   R   . This reduces the number of scans of   S   S   S   that are necessary.  A more aggressive variant of this algorithm loads as many pages of   R   R   R   as can be fit in the available memory, loading all such tuples into a hash table, and then repeatedly scans   S   S   S   . This further reduces the number of scans of   S   S   S   that are necessary. In fact, this algorithm is essentially a special-case of the classic hash join algorithm.  The block nested loop runs in    O   (     P  r    P  s    /  M   )       O       subscript  P  r    subscript  P  s    M     O(P_{r}P_{s}/M)   I/Os where   M   M   M   is the number of available pages of internal memory and    P  r     subscript  P  r    P_{r}   and    P  s     subscript  P  s    P_{s}   is size of   R   R   R   and   S   S   S   respectively in pages. Note that block nested loop runs in    O   (    P  r   +   P  s    )       O     subscript  P  r    subscript  P  s      O(P_{r}+P_{s})   I/Os if   R   R   R   fits in the available internal memory.  References  "  Category:Join algorithms     ↩  ↩     