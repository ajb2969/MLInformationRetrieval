   Conjunctive normal form      Conjunctive normal form   In Boolean logic , a formula is in conjunctive normal form (CNF) or clausal normal form if it is a conjunction of clauses , where a clause is a disjunction of literals ; otherwise put, it is an AND of ORs . As a normal form , it is useful in automated theorem proving . It is similar to the product of sums form used in circuit theory .  All conjunctions of literals and all disjunctions of literals are in CNF, as they can be seen as conjunctions of one-literal clauses and conjunctions of a single clause, respectively. As in the disjunctive normal form (DNF), the only propositional connectives a formula in CNF can contain are and , or , and not . The not operator can only be used as part of a literal, which means that it can only precede a propositional variable or a predicate symbol .  In automated theorem proving, the notion " clausal normal form " is often used in a narrower sense, meaning a particular representation of a CNF formula as a set of sets of literals.  Examples and Non-Examples  All of the following formulas in the variables A, B, C, D, and E are in conjunctive normal form:        ¬  A   ∧   (   B  ∨  C   )          A     B  C     \neg A\wedge(B\vee C)          (   A  ∨  B   )   ∧   (    ¬  B   ∨  C  ∨   ¬  D    )   ∧   (   D  ∨   ¬  E    )         A  B        B   C     D      D     E      (A\vee B)\wedge(\neg B\vee C\vee\neg D)\wedge(D\vee\neg E)         A  ∨  B      A  B    A\lor B         A  ∧  B      A  B    A\wedge B      The last formula is in conjunctive normal form because it can be seen as the conjunction of the two single-literal clauses   A   A   A   and   B   B   B   . Incidentally, the last two formulas are also in disjunctive normal form .  The following formulas are not in conjunctive normal form:       ¬   (   B  ∨  C   )         B  C     \neg(B\vee C)          (   A  ∧  B   )   ∨  C        A  B   C    (A\wedge B)\vee C          A  ∧   (   B  ∨   (   D  ∧  E   )    )    .      A    B    D  E      A\wedge(B\vee(D\wedge E)).      Every formula can be equivalently written as a formula in conjunctive normal form. In particular this is the case for the three non-examples just mentioned; they are respectively equivalent to the following three formulas, which are in conjunctive normal form:        ¬  B   ∧   ¬  C          B      C     \neg B\wedge\neg C          (   A  ∨  C   )   ∧   (   B  ∨  C   )         A  C     B  C     (A\vee C)\wedge(B\vee C)          A  ∧   (   B  ∨  D   )   ∧   (   B  ∨  E   )    .      A    B  D     B  E     A\wedge(B\vee D)\wedge(B\vee E).      Conversion into CNF  Every propositional formula can be converted into an equivalent formula that is in CNF. This transformation is based on rules about logical equivalences : the double negative law , De Morgan's laws , and the distributive law .  Since all logical formulae can be converted into an equivalent formula in conjunctive normal form, proofs are often based on the assumption that all formulae are CNF. However, in some cases this conversion to CNF can lead to an exponential explosion of the formula. For example, translating the following non-CNF formula into CNF produces a formula with    2  n     superscript  2  n    2^{n}   clauses:        (    X  1   ∧   Y  1    )   ∨   (    X  2   ∧   Y  2    )   ∨  …  ∨   (    X  n   ∧   Y  n    )    .         subscript  X  1    subscript  Y  1       subscript  X  2    subscript  Y  2    normal-…     subscript  X  n    subscript  Y  n      (X_{1}\wedge Y_{1})\vee(X_{2}\wedge Y_{2})\vee\dots\vee(X_{n}\wedge Y_{n}).     In particular, the generated formula is:        (    X  1   ∨   X  2   ∨  ⋯  ∨   X  n    )   ∧   (    Y  1   ∨   X  2   ∨  ⋯  ∨   X  n    )   ∧   (    X  1   ∨   Y  2   ∨  ⋯  ∨   X  n    )   ∧   (    Y  1   ∨   Y  2   ∨  ⋯  ∨   X  n    )   ∧  ⋯  ∧   (    Y  1   ∨   Y  2   ∨  ⋯  ∨   Y  n    )    .         subscript  X  1    subscript  X  2   normal-⋯   subscript  X  n       subscript  Y  1    subscript  X  2   normal-⋯   subscript  X  n       subscript  X  1    subscript  Y  2   normal-⋯   subscript  X  n       subscript  Y  1    subscript  Y  2   normal-⋯   subscript  X  n    normal-⋯     subscript  Y  1    subscript  Y  2   normal-⋯   subscript  Y  n      (X_{1}\vee X_{2}\vee\cdots\vee X_{n})\wedge(Y_{1}\vee X_{2}\vee\cdots\vee X_{n%
 })\wedge(X_{1}\vee Y_{2}\vee\cdots\vee X_{n})\wedge(Y_{1}\vee Y_{2}\vee\cdots%
 \vee X_{n})\wedge\cdots\wedge(Y_{1}\vee Y_{2}\vee\cdots\vee Y_{n}).     This formula contains    2  n     superscript  2  n    2^{n}   clauses; each clause contains either    X  i     subscript  X  i    X_{i}   or    Y  i     subscript  Y  i    Y_{i}   for each   i   i   i   .  There exist transformations into CNF that avoid an exponential increase in size by preserving satisfiability rather than equivalence . 1 2 These transformations are guaranteed to only linearly increase the size of the formula, but introduce new variables. For example, the above formula can be transformed into CNF by adding variables     Z  1   ,  …  ,   Z  n       subscript  Z  1   normal-…   subscript  Z  n     Z_{1},\ldots,Z_{n}   as follows:        (    Z  1   ∨  ⋯  ∨   Z  n    )   ∧   (    ¬   Z  1    ∨   X  1    )   ∧   (    ¬   Z  1    ∨   Y  1    )   ∧  ⋯  ∧   (    ¬   Z  n    ∨   X  n    )   ∧   (    ¬   Z  n    ∨   Y  n    )    .         subscript  Z  1   normal-⋯   subscript  Z  n          subscript  Z  1     subscript  X  1          subscript  Z  1     subscript  Y  1    normal-⋯        subscript  Z  n     subscript  X  n          subscript  Z  n     subscript  Y  n      (Z_{1}\vee\cdots\vee Z_{n})\wedge(\neg Z_{1}\vee X_{1})\wedge(\neg Z_{1}\vee Y%
 _{1})\wedge\cdots\wedge(\neg Z_{n}\vee X_{n})\wedge(\neg Z_{n}\vee Y_{n}).     An interpretation satisfies this formula only if at least one of the new variables is true. If this variable is    Z  i     subscript  Z  i    Z_{i}   , then both    X  i     subscript  X  i    X_{i}   and    Y  i     subscript  Y  i    Y_{i}   are true as well. This means that every model that satisfies this formula also satisfies the original one. On the other hand, only some of the models of the original formula satisfy this one: since the    Z  i     subscript  Z  i    Z_{i}   are not mentioned in the original formula, their values are irrelevant to satisfaction of it, which is not the case in the last formula. This means that the original formula and the result of the translation are equisatisfiable but not equivalent .  An alternative translation, the Tseitin transformation , includes also the clauses     Z  i   ∨   ¬   X  i    ∨   ¬   Y  i         subscript  Z  i       subscript  X  i        subscript  Y  i      Z_{i}\vee\neg X_{i}\vee\neg Y_{i}   . With these clauses, the formula implies     Z  i   ≡    X  i   ∧   Y  i         subscript  Z  i      subscript  X  i    subscript  Y  i      Z_{i}\equiv X_{i}\wedge Y_{i}   ; this formula is often regarded to "define"    Z  i     subscript  Z  i    Z_{i}   to be a name for     X  i   ∧   Y  i        subscript  X  i    subscript  Y  i     X_{i}\wedge Y_{i}   .  First-order logic  In first order logic, conjunctive normal form can be taken further to yield the clausal normal form of a logical formula, which can be then used to perform first-order resolution . In resolution-based automated theorem-proving, a CNF formula      |   |   (   normal-(   (      |    l  11     subscript  l  11    l_{11}      |   ∨     \lor      |   …   normal-…   \ldots      |   ∨     \lor      |    l   1   n  1       subscript  l    1   subscript  n  1      l_{1n_{1}}      |   )   normal-)   )      |   ∧     \land      |   …   normal-…   \ldots      |   ∧     \land      |   (   normal-(   (      |    l   m  1      subscript  l    m  1     l_{m1}      |   ∨     \lor      |   …   normal-…   \ldots      |   ∨     \lor      |    l   m   n  m       subscript  l    m   subscript  n  m      l_{mn_{m}}      |   )   normal-)   )      |   | , with    l   i  j      subscript  l    i  j     l_{ij}   literals, is commonly represented as a set of sets     |   {   normal-{   \{      |   {   normal-{   \{      |    l  11     subscript  l  11    l_{11}      |     ,    absent   ,      |   …   normal-…   \ldots      |     ,    absent   ,      |    l   1   n  1       subscript  l    1   subscript  n  1      l_{1n_{1}}      |   }   normal-}   \}      |     ,    absent   ,      |   …   normal-…   \ldots      |     ,    absent   ,      |   {   normal-{   \{      |    l   m  1      subscript  l    m  1     l_{m1}      |     ,    absent   ,      |   …   normal-…   \ldots      |     ,    absent   ,      |    l   m   n  m       subscript  l    m   subscript  n  m      l_{mn_{m}}      |   }   normal-}   \}      |   }   normal-}   \}      | .     See below for an example.  Computational complexity  An important set of problems in computational complexity involves finding assignments to the variables of a boolean formula expressed in Conjunctive Normal Form, such that the formula is true. The k -SAT problem is the problem of finding a satisfying assignment to a boolean formula expressed in CNF in which each disjunction contains at most k variables. 3-SAT is NP-complete (like any other k -SAT problem with k >2) while 2-SAT is known to have solutions in polynomial time . As a consequence, 3 the task of converting a formula into a DNF , preserving satisfiability, is NP-hard ; dually , converting into CNF, preserving validity , is also NP-hard; hence equivalence-preserving conversion into DNF or CNF is again NP-hard.  Typical problems in this case involve formulas in "3CNF": conjunctive normal form with no more than three variables per conjunct. Examples of such formulas encountered in practice can be very large, for example with 100,000 variables and 1,000,000 conjuncts.  A formula in CNF can be converted into an equisatisfiable formula in " k CNF" (for k>=3) by replacing each conjunct with more than k variables     X  1   ∨  ⋯  ∨   X  k   ∨  ⋯  ∨   X  n        subscript  X  1   normal-⋯   subscript  X  k   normal-⋯   subscript  X  n     X_{1}\vee\cdots\vee X_{k}\vee\cdots\vee X_{n}   by two conjuncts     X  1   ∨  ⋯  ∨   X   k  -  1    ∨  Z       subscript  X  1   normal-⋯   subscript  X    k  1    Z    X_{1}\vee\cdots\vee X_{k-1}\vee Z   and     ¬  Z   ∨    X  k   ⋯   ∨   X  n          Z      subscript  X  k   normal-⋯    subscript  X  n     \neg Z\vee X_{k}\cdots\vee X_{n}   with   Z   Z   Z   a new variable, and repeating as often as necessary.  Converting from first-order logic  To convert first-order logic to CNF: 4   Convert to negation normal form .  Eliminate implications and equivalences: repeatedly replace    P  →  Q     normal-→  P  Q    P\rightarrow Q   with     ¬  P   ∨  Q         P   Q    \lnot P\lor Q   ; replace    P  ↔  Q     normal-↔  P  Q    P\leftrightarrow Q   with     (   P  ∨   ¬  Q    )   ∧   (    ¬  P   ∨  Q   )         P     Q         P   Q     (P\lor\lnot Q)\land(\lnot P\lor Q)   . Eventually, this will eliminate all occurrences of   →   normal-→   \rightarrow   and   ↔   normal-↔   \leftrightarrow   .  Move NOTs inwards by repeatedly applying De Morgan's Law . Specifically, replace    ¬   (   P  ∨  Q   )         P  Q     \lnot(P\lor Q)   with     (   ¬  P   )   ∧   (   ¬  Q   )          P      Q     (\lnot P)\land(\lnot Q)   ; replace    ¬   (   P  ∧  Q   )         P  Q     \lnot(P\land Q)   with     (   ¬  P   )   ∨   (   ¬  Q   )          P      Q     (\lnot P)\lor(\lnot Q)   ; and replace    ¬  ¬  P        P    \lnot\lnot P   with   P   P   P   ; replace    ¬   (   ∀   x  P   (  x  )     )        for-all    x  P  x      \lnot(\forall xP(x))   with    ∃   x  ¬  P   (  x  )          x   P  x     \exists x\lnot P(x)   ;    ¬   (   ∃   x  P   (  x  )     )           x  P  x      \lnot(\exists xP(x))   with    ∀   x  ¬  P   (  x  )       for-all    x   P  x     \forall x\lnot P(x)   . After that, a   ¬     \lnot   may occur only immediately before a predicate symbol.   Standardize variables  For sentences like     (   ∀   x  P   (  x  )     )   ∨   (   ∃   x  Q   (  x  )     )        for-all    x  P  x        x  Q  x      (\forall xP(x))\lor(\exists xQ(x))   which use the same variable name twice, change the name of one of the variables. This avoids confusion later when dropping quantifiers later. For example,     ∀   x   [    ∃   y  A  n  i  m  a  l   (  y  )     ∧   ¬  L  o  v  e  s   (  x  ,  y  )     ]     ∨   [   ∃   y  L  o  v  e  s   (  y  ,  x  )     ]        for-all    x   delimited-[]        y  A  n  i  m  a  l  y       L  o  v  e  s   x  y         delimited-[]      y  L  o  v  e  s   y  x        \forall x[\exists yAnimal(y)\land\lnot Loves(x,y)]\lor[\exists yLoves(y,x)]   is renamed to     ∀   x   [    ∃   y  A  n  i  m  a  l   (  y  )     ∧   ¬  L  o  v  e  s   (  x  ,  y  )     ]     ∨   [   ∃   z  L  o  v  e  s   (  z  ,  x  )     ]        for-all    x   delimited-[]        y  A  n  i  m  a  l  y       L  o  v  e  s   x  y         delimited-[]      z  L  o  v  e  s   z  x        \forall x[\exists yAnimal(y)\land\lnot Loves(x,y)]\lor[\exists zLoves(z,x)]   .   Skolemize the statement  Move quantifiers outwards: repeatedly replace    P  ∧   (   ∀   x  Q   (  x  )     )       P   for-all    x  Q  x      P\land(\forall xQ(x))   with    ∀   x   (   P  ∧   Q   (  x  )     )       for-all    x    P    Q  x       \forall x(P\land Q(x))   ; replace    P  ∨   (   ∀   x  Q   (  x  )     )       P   for-all    x  Q  x      P\lor(\forall xQ(x))   with    ∀   x   (   P  ∨   Q   (  x  )     )       for-all    x    P    Q  x       \forall x(P\lor Q(x))   ; replace    P  ∧   (   ∃   x  Q   (  x  )     )       P      x  Q  x      P\land(\exists xQ(x))   with    ∃   x   (   P  ∧   Q   (  x  )     )          x    P    Q  x       \exists x(P\land Q(x))   ; replace    P  ∨   (   ∃   x  Q   (  x  )     )       P      x  Q  x      P\lor(\exists xQ(x))   with    ∃   x   (   P  ∨   Q   (  x  )     )          x    P    Q  x       \exists x(P\lor Q(x))   . These replacements preserve equivalence, since the previous variable standardization step ensured that   x   x   x   doesn't occur in   P   P   P   . After these replacements, a quantifier may occur only in the initial prefix of the formula, but never inside a   ¬     \lnot   ,   ∧     \land   , or   ∨     \lor   .  Repeatedly replace    ∀    x  1   …   ∀     x  n     ∃    y   P   (  y  )           for-all     subscript  x  1   normal-…   for-all     subscript  x  n       y  P  y         \forall x_{1}\ldots\forall x_{n}\;\exists y\;P(y)   with    ∀    x  1   …   ∀     x  n    P   (   f   (   x  1   ,  …  ,   x  n   )    )         for-all     subscript  x  1   normal-…   for-all     subscript  x  n   P    f    subscript  x  1   normal-…   subscript  x  n          \forall x_{1}\ldots\forall x_{n}\;P(f(x_{1},\ldots,x_{n}))   , where   f   f   f   is a new   n   n   n   -ary function symbol, a so-called " skolem function ". This is the only step that preserves only satisfiability rather than equivalence. It eliminates all existential quantifiers.   Drop all universal quantifiers.  Distribute ORs inwards over ANDs: repeatedly replace    P  ∨   (   Q  ∧  R   )       P    Q  R     P\lor(Q\land R)   with     (   P  ∨  Q   )   ∧   (   P  ∨  R   )         P  Q     P  R     (P\lor Q)\land(P\lor R)   .   As an example, the formula saying "Who loves all animals, is in turn loved by someone" is converted into CNF (and subsequently into clause form in the last line) as follows (highlighting replacement rule redices in     \color   r  e  d  red      \color  r  e  d  red    {\color{red}{\text{red}}}   ):      |    ∀  x     for-all  x    \forall x      |   |   |   |   (   normal-(   (      |    ∀  y     for-all  y    \forall y      |   |   |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |      \color   r  e  d   →      normal-→    \color  r  e  d   absent    \color{red}\rightarrow      |   |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   |   )   normal-)   )      |   →   normal-→   \rightarrow      |   (   normal-(   (      |   ∃     \exists      |   y   y   y      |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   y   y   y      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   )   normal-)   )      |   |   |   |   |   |   |   |   |     |    ∀  x     for-all  x    \forall x      |   |   |   |   (   normal-(   (      |    ∀  y     for-all  y    \forall y      |   |   |   |   ¬     \lnot      |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∨     \lor      |   |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   |   )   normal-)   )      |      \color   r  e  d   →      normal-→    \color  r  e  d   absent    \color{red}\rightarrow      |   (   normal-(   (      |   ∃     \exists      |   y   y   y      |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   y   y   y      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   )   normal-)   )      |   |   |   |   |   |   |   |   |by 1.1     |    ∀  x     for-all  x    \forall x      |     \color   r  e  d  ¬      \color  r  e  d     \color{red}\lnot      |   |   |   (   normal-(   (      |     \color   r  e  d   ∀  y       \color  r  e  d   for-all  y     {\color{red}{\forall y}}      |   |   |   |   ¬     \lnot      |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∨     \lor      |   |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   |   )   normal-)   )      |   ∨     \lor      |   (   normal-(   (      |   ∃     \exists      |   y   y   y      |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   y   y   y      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   )   normal-)   )      |   |   |   |   |   |   |   |   |by 1.1     |    ∀  x     for-all  x    \forall x      |   |   |   |   (   normal-(   (      |    ∃  y      y    \exists y      |     \color   r  e  d  ¬      \color  r  e  d     \color{red}\lnot      |   (   normal-(   (      |   |   ¬     \lnot      |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |      \color   r  e  d   ∨     limit-from    \color  r  e  d      \color{red}\lor      |   |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   )   normal-)   )      |   )   normal-)   )      |   ∨     \lor      |   (   normal-(   (      |   ∃     \exists      |   y   y   y      |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   y   y   y      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   )   normal-)   )      |   |   |   |   |   |   |   |   |by 1.2     |    ∀  x     for-all  x    \forall x      |   |   |   |   (   normal-(   (      |    ∃  y      y    \exists y      |   |   |     \color   r  e  d  ¬      \color  r  e  d     \color{red}\lnot      |     \color   r  e  d  ¬      \color  r  e  d     \color{red}\lnot      |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∧     \land      |   ¬     \lnot      |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   |   )   normal-)   )      |   ∨     \lor      |   (   normal-(   (      |   ∃     \exists      |   y   y   y      |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   y   y   y      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   )   normal-)   )      |   |   |   |   |   |   |   |   |by 1.2     |    ∀  x     for-all  x    \forall x      |   |   |   |   (   normal-(   (      |     \color   r  e  d   ∃  y       \color  r  e  d    y     {\color{red}{\exists y}}      |   |   |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∧     \land      |   ¬     \lnot      |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   |   )   normal-)   )      |   ∨     \lor      |   (   normal-(   (      |     \color   r  e  d  ∃      \color  r  e  d     \color{red}\exists      |     \color   r  e  d  y      \color  r  e  d  y    \color{red}y      |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   y   y   y      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   )   normal-)   )      |   |   |   |   |   |   |   |   |by 1.2     |    ∀  x     for-all  x    \forall x      |   |   |   |   (   normal-(   (      |    ∃  y      y    \exists y      |   |   |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∧     \land      |   ¬     \lnot      |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   |   )   normal-)   )      |      \color   r  e  d   ∨     limit-from    \color  r  e  d      \color{red}\lor      |   (   normal-(   (      |     \color   r  e  d  ∃      \color  r  e  d     \color{red}\exists      |     \color   r  e  d  z      \color  r  e  d  z    \color{red}z      |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   z   z   z      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   )   normal-)   )      |   |   |   |   |   |   |   |   |by 2     |    ∀  x     for-all  x    \forall x      |    ∃  z      z    \exists z      |   |   |   (   normal-(   (      |     \color   r  e  d   ∃  y       \color  r  e  d    y     {\color{red}{\exists y}}      |   |   |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∧     \land      |   ¬     \lnot      |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   |   )   normal-)   )      |      \color   r  e  d   ∨     limit-from    \color  r  e  d      \color{red}\lor      |   |   |   |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   z   z   z      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   |   |   |   |   |   |   |   |   |by 3.1     |    ∀  x     for-all  x    \forall x      |     \color   r  e  d   ∃  z       \color  r  e  d    z     {\color{red}{\exists z}}      |   |   |   |    ∃  y      y    \exists y      |   |   (   normal-(   (      |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∧     \land      |   ¬     \lnot      |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   )   normal-)   )      |   |   ∨     \lor      |   |   |   |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |   z   z   z      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   |   |   |   |   |   |   |   |   |by 3.1     |    ∀  x     for-all  x    \forall x      |   |   |   |   |     \color   r  e  d   ∃  y       \color  r  e  d    y     {\color{red}{\exists y}}      |   |   (   normal-(   (      |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |   y   y   y      |   )   normal-)   )      |   ∧     \land      |   ¬     \lnot      |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |   y   y   y      |   )   normal-)   )      |   )   normal-)   )      |   |   ∨     \lor      |   |   |   |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |    g   (  x  )       g  x    g(x)      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   |   |   |   |   |   |   |   |   |by 3.2     |   |   |   |   |   |   |   |   (   normal-(   (      |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |    f   (  x  )       f  x    f(x)      |   )   normal-)   )      |      \color   r  e  d   ∧     limit-from    \color  r  e  d      \color{red}\land      |   ¬     \lnot      |    L  o  v  e  s   (  x  ,      fragments  L  o  v  e  s   fragments  normal-(  x  normal-,     Loves(x,      |    f   (  x  )       f  x    f(x)      |   )   normal-)   )      |   )   normal-)   )      |   |      \color   r  e  d   ∨     limit-from    \color  r  e  d      \color{red}\lor      |   |   |   |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |    g   (  x  )       g  x    g(x)      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   |   |   |   |   |   |   |   |   |by 4     |   |   |   |   (   normal-(   (      |   |   |   |   |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |    f   (  x  )       f  x    f(x)      |   )   normal-)   )      |   |   |   |   |   |   |   |      \color   r  e  d   ∨     limit-from    \color  r  e  d      \color{red}\lor      |   |   |   |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |    g   (  x  )       g  x    g(x)      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   |   )   normal-)   )      |      \color   r  e  d   ∧     limit-from    \color  r  e  d      \color{red}\land      |   (   normal-(   (      |    ¬  L  o  v  e  s   (  x  ,   f   (  x  )    )        L  o  v  e  s   x    f  x      \lnot Loves(x,f(x))      |      \color   r  e  d   ∨     limit-from    \color  r  e  d      \color{red}\lor      |    L  o  v  e  s   (   g   (  x  )    ,  x  )       L  o  v  e  s     g  x   x     Loves(g(x),x)      |   )   normal-)   )      |   |by 5     |   |   |   {   normal-{   \{      |   {   normal-{   \{      |   |   |   |   |   |   |    A  n  i  m  a  l  (     fragments  A  n  i  m  a  l  normal-(    Animal(      |    f   (  x  )       f  x    f(x)      |   )   normal-)   )      |   |   |   |   |   |   |   |     ,    absent   ,      |   |   |   |    L  o  v  e  s  (     fragments  L  o  v  e  s  normal-(    Loves(      |    g   (  x  )       g  x    g(x)      |    ,  x  )     fragments  normal-,  x  normal-)    ,x)      |   |   }   normal-}   \}      |     ,    absent   ,      |   {   normal-{   \{      |    ¬  L  o  v  e  s   (  x  ,   f   (  x  )    )        L  o  v  e  s   x    f  x      \lnot Loves(x,f(x))      |     ,    absent   ,      |    L  o  v  e  s   (   g   (  x  )    ,  x  )       L  o  v  e  s     g  x   x     Loves(g(x),x)      |   }   normal-}   \}      |   }   normal-}   \}      |( clause representation)     Informally, the skolem function    g   (  x  )       g  x    g(x)   can be thought of as yielding the person by whom   x   x   x   is loved, while    f   (  x  )       f  x    f(x)   yields the animal (if any) that   x   x   x   doesn't love. The 3rd last line from below then reads as "   x   x   x   doesn't love the animal    f   (  x  )       f  x    f(x)   , or else   x   x   x   is loved by    g   (  x  )       g  x    g(x)   " .  The 2nd last line from above,     (    A  n  i  m  a  l   (   f   (  x  )    )    ∨   L  o  v  e  s   (   g   (  x  )    ,  x  )     )   ∧   (    ¬  L  o  v  e  s   (  x  ,   f   (  x  )    )    ∨   L  o  v  e  s   (   g   (  x  )    ,  x  )     )           A  n  i  m  a  l    f  x      L  o  v  e  s     g  x   x          L  o  v  e  s   x    f  x       L  o  v  e  s     g  x   x       (Animal(f(x))\lor Loves(g(x),x))\land(\lnot Loves(x,f(x))\lor Loves(g(x),x))   , is the CNF.  Notes    See also   Algebraic normal form  Disjunctive normal form  Horn clause  Quine–McCluskey algorithm   References   Paul Jackson, Daniel Sheridan: Clause Form Conversions for Boolean Circuits. In: Holger H. Hoos, David G. Mitchell (Eds.): Theory and Applications of Satisfiability Testing, 7th International Conference, SAT 2004, Vancouver, BC, Canada, May 10–13, 2004, Revised Selected Papers. Lecture Notes in Computer Science 3542, Springer 2005, pp. 183–198  G.S. Tseitin: On the complexity of derivation in propositional calculus. In: Slisenko, A.O. (ed.) Structures in Constructive Mathematics and Mathematical Logic, Part II, Seminars in Mathematics (translated from Russian), pp. 115–125. Steklov Mathematical Institute (1968)   External links    Java applet for converting to CNF and DNF, showing laws used  Mayuresh S. Pardeshi, Dr. Bashirahamed F. Momin "Conversion of cnf to dnf using grid computing" IEEE, ISBN 978-1-4673-2816-6  Mayuresh S. Pardeshi, Dr. Bashirahamed F. Momin "Conversion of cnf to dnf using grid computing in parallel" IEEE, ISBN 978-1-4799-4041-7   "  Category:Normal forms (logic)     Tseitin (1968) ↩  Jackson and Sheridan (2004) ↩  since one way to check a CNF for satisfiability is to convert it into a DNF , the satisfiability of which can be checked in linear time ↩  Artificial Intelligence: A modern Approach [1995...] Russell and Norvig ↩     