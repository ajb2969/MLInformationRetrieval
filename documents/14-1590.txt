


Hyperoperation




Hyperoperation

In mathematics, the hyperoperation sequence is an infinite sequence of arithmetic operations (called hyperoperations)123 that starts with the unary operation of successor (n = 0), then continues with the binary operations of addition (n = 1), multiplication (n = 2), and exponentiation (n = 3), after which the sequence proceeds with further binary operations extending beyond exponentiation, using right-associativity. For the operations beyond exponentiation, the nth member of this sequence is named by Reuben Goodstein after the Greek prefix of n suffixed with -ation (such as tetration (n = 4), pentation (n = 5), hexation (n = 6), etc.)4 and can be written as using n − 2 arrows in Knuth's up-arrow notation (when n ≥ 3). Each hyperoperation may be understood recursively in terms of the previous one by:


 
  (m ≥ 0)
It may also be defined according to the recursion rule part of the definition, as in Knuth's up-arrow version of the Ackermann function:


 
  (m ≥ -1)
This can be used to easily show numbers much larger than those which scientific notation can, such as Skewes' number and googolplexplex, but there are some numbers which even they cannot easily show, such as Graham's number and TREE(3).
This recursion rule is common to many variants of hyperoperations (see below).
Definition
The hyperoperation sequence is the sequence of binary operations

 
 , defined recursively as follows:



(Note that for n = 0, the binary operation essentially reduces to a unary operation (successor function) by ignoring the first argument.)
For n = 0, 1, 2, 3, this definition reproduces the basic arithmetic operations of successor (which is a unary operation), addition, multiplication, and exponentiation, respectively, as











 
  and for n ≥ 4 it extends these basic operations beyond exponentiation to what can be written in Knuth's up-arrow notation as







...
 



...
 

Knuth's notation could be extended to negative indices ≥ -2 in such a way as to agree with the entire hyperoperation sequence, except for the lag in the indexing:



The hyperoperations can thus be seen as an answer to the question "what's next" in the sequence: successor, addition, multiplication, exponentiation, and so on. Noting that














the relationship between basic arithmetic operations is illustrated, allowing the higher operations to be defined naturally as above. The parameters of the hyperoperation hierarchy are sometimes referred to by their analogous exponentiation term;5 so a is the base, b is the exponent (or hyperexponent),6 and n is the rank (or grade).7
In common terms, the hyperoperations are ways of compounding numbers that increase in growth based on the iteration of the previous hyperoperation. The concepts of successor, addition, multiplication and exponentiation are all hyperoperations; the successor operation (producing x+1 from x) is the most primitive, the addition operator specifies the number of times 1 is to be added to itself to produce a final value, multiplication specifies the number of times a number is to be added to itself, and exponentiation refers to the number of times a number is to be multiplied by itself.
Examples
This is a list of the first seven (0th to 6th) hyperoperations. (Notice that in this article, we define 00 as 1)




n

Operation
 (Hn(a, b))

Definition

Names

Domain





0









hyper0, increment, successor, zeration

b arbitrary



1









hyper1, addition

arbitrary



2









hyper2, multiplication

arbitrary



3



 
  or 
 
 






hyper3, exponentiation

a > 0, b real, or a ≥ 0, b nonnegative, or a non-zero, b an integer, with some multivalued extensions to complex numbers



4



 
  or 
 
 






hyper4, tetration

a ≥ 0 or an integer, b an integer ≥ −18 (with some proposed extensions)



5



 
  or 
 
 






hyper5, pentation

a, b integers ≥ −19



6



 
  or 
 
 






hyper6, hexation

a, b integers ≥ −110



Special cases
Hn(0, b) =

0, when n = 2, or n = 3, b ≥ 1, or n ≥ 4, b odd (≥ −1)
 
1, when n = 3, b = 0, or n ≥ 4, b even (≥ 0)
 
b, when n = 1
 
b + 1, when n = 0
 

Hn(a, 0) =

0, when n = 2
 
1, when n = 0, or n ≥ 3
 
a, when n = 1
 

Hn(a, −1) =11

0, when n = 0, or n ≥ 4
 
a − 1, when n = 1
 
−a, when n = 2
 


 
  , when n = 3
 

History
One of the earliest discussions of hyperoperations was that of Albert Bennett12 in 1914, who developed some of the theory of commutative hyperoperations (see below). About 12 years later, Wilhelm Ackermann defined the function 
 
 
13 which somewhat resembles the hyperoperation sequence.
In his 1947 paper,14 R. L. Goodstein introduced the specific sequence of operations that are now called hyperoperations, and also suggested the Greek names tetration, pentation, etc., for the extended operations beyond exponentiation (because they correspond to the indices 4, 5, etc.). As a three-argument function, e.g., 
 
 
 
 , the hyperoperation sequence as a whole is seen to be a version of the original Ackermann function

 
  — recursive but not primitive recursive — as modified by Goodstein to incorporate the primitive successor function together with the other three basic operations of arithmetic (addition, multiplication, exponentiation), and to make a more seamless extension of these beyond exponentiation.
The original three-argument Ackermann function

 
  uses the same recursion rule as does Goodstein's version of it (i.e., the hyperoperation sequence), but differs from it in two ways. First, 
 
 
 
  defines a sequence of operations starting from addition (n = 0) rather than the successor function, then multiplication (n = 1), exponentiation (n = 2), etc. Secondly, the initial conditions for 
 
 
 
  result in 
 
 
 
 , thus differing from the hyperoperations beyond exponentiation.151617 The significance of the b + 1 in the previous expression is that 
 
 
 
  = 
 
 
 
 , where b counts the number of operators (exponentiations), rather than counting the number of operands ("a"s) as does the b in 
 
 
 
 , and so on for the higher-level operations. (See the Ackermann function article for details.)
Notations
This is a list of notations that have been used for hyperoperations.




Name

Notation equivalent to 
 
 


Comment





Knuth's up-arrow notation





Used by Knuth{{cite journal



Goodstein's notation





Used by Reuben Goodstein.18



Original Ackermann function





Used by Wilhelm Ackermann (for n ≥ 1) 19



Ackermann–Péter function





This corresponds to hyperoperations for base 2 (a = 2)



Nambiar's notation





Used by Nambiar (for n ≥ 1) {{cite journal



Box notation





Used by Rubtsov and Romerio.2021



Superscript notation





Used by Robert Munafo.22



Subscript notation (for lower hyperoperations)





Used for lower hyperoperations by Robert Munafo.23



Operator notation (for "extended operations")





Used for lower hyperoperations by John Donner and Alfred Tarski (for n ≥ 1).24



Square bracket notation





Used in many online forums; convenient for ASCII.



Conway chained arrow notation





Used by John Horton Conway (for n ≥ 3)



Bowers' Exploding Array Function





Used by Jonathan Bowers (for n ≥ 3)



Variant starting from a
In 1928, Wilhelm Ackermann defined a 3-argument function 
 
 
 
  which gradually evolved into a 2-argument function known as the Ackermann function. The original Ackermann function 
 
 
 
  was less similar to modern hyperoperations, because his initial conditions start with 
 
 
 
  for all n > 2. Also he assigned addition to n = 0, multiplication to n = 1 and exponentiation to n = 2, so the initial conditions produce very different operations for tetration and beyond.




n

Operation

Comment





0








1








2








3





An offset form of tetration. The iteration of this operation is different than the iteration of tetration.



4





Not to be confused with pentation.



Another initial condition that has been used is 
 
 
 
  (where the base is constant 
 
 
 
 ), due to Rózsa Péter, which does not form a hyperoperation hierarchy.
Variant starting from 0
In 1984, C. W. Clenshaw and F. W. J. Olver began the discussion of using hyperoperations to prevent computer floating-point overflows.25 Since then, many other authors262728 have renewed interest in the application of hyperoperations to floating-point representation. (Since Hn(a, b) are all defined for b = -1) While discussing tetration, Clenshaw et al. assumed the initial condition 
 
 
 
 , which makes yet another hyperoperation hierarchy. Just like in the previous variant, the fourth operation is very similar to tetration, but offset by one.




n

Operation

Comment





0








1








2








3








4





An offset form of tetration. The iteration of this operation is much different than the iteration of tetration.



5





Not to be confused with pentation.



Lower hyperoperations
An alternative for these hyperoperations is obtained by evaluation from left to right. Since











define (with ° or subscript)


 
  with



This was extended to ordinal numbers by Donner and Tarski,29[Definition 1] by :



It follows from Definition 1(i), Corollary 2(ii), and Theorem 9, that, for a ≥ 2 and b ≥ 1, that 



But this suffers a kind of collapse, failing to form the "power tower" traditionally expected of hyperoperators:30[Theorem 3(iii)]31


 
  If α ≥ 2 and γ ≥ 2,32[Corollary 33(i)]33







n

Operation

Comment





0





increment, successor, zeration



1








2








3





This is exponentiation.



4





Not to be confused with tetration.



5





Not to be confused with pentation.
 Similar to tetration.



Commutative hyperoperations
Commutative hyperoperations were considered by Albert Bennett as early as 1914,34 which is possibly the earliest remark about any hyperoperation sequence. Commutative hyperoperations are defined by the recursion rule


 
  which is symmetric in a and b, meaning all hyperoperations are commutative. This sequence does not contain exponentiation, and so does not form a hyperoperation hierarchy.




n

Operation

Comment





0








1








2





This is due to the properties of the logarithm.



3





A commutative form of exponentiation.



4





Not to be confused with tetration.



See also

Large numbers

Notes


References
Addition{{·}} Multiplication{{·}} Exponentiation{{·}} Tetration{{·}} Pentation | group2 = Inverse, group 1 | list2 = Subtraction{{·}} Division{{·}} nth root{{·}} Super-root | group3 = Inverse, group 2 | list3 = Subtraction{{·}} Division{{·}} Logarithm{{·}} Super-logarithm }}
"
Category:Arithmetic Category:Large numbers










a [n] (-1) = 0 for all real number a and all integer n ≥ 4, because if so, than a [n] 0 = a [n - 1] (a [n] (-1)) = a [n - 1] 0 = 1 (because of n ≥ 4), this is keeping with the define: a [n] 0 = 1 for all real number a.






















Ordinal addition is not commutative; see ordinal arithmetic for more information







