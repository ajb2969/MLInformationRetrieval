   Halstead complexity measures      Halstead complexity measures   Halstead complexity measures are software metrics introduced by Maurice Howard Halstead in 1977 1 as part of his treatise on establishing an empirical science of software development. Halstead made the observation that metrics of the software should reflect the implementation or expression of algorithms in different languages, but be independent of their execution on a specific platform. These metrics are therefore computed statically from the code.  Halstead's goal was to identify measurable properties of software, and the relations between them. This is similar to the identification of measurable properties of matter (like the volume, mass, and pressure of a gas) and the relationships between them (analogous to the gas equation ). Thus his metrics are actually not just complexity metrics.  Calculation  For a given problem, Let:        η   1     subscript  η  1    \,\eta_{1}   = the number of distinct operators       η   2     subscript  η  2    \,\eta_{2}   = the number of distinct operands       N   1     subscript  N  1    \,N_{1}   = the total number of operators       N   2     subscript  N  2    \,N_{2}   = the total number of operands   From these numbers, several measures can be calculated:   Program vocabulary    η  =    η  1   +    η  2         η     subscript  η  1    subscript  η  2      \eta=\eta_{1}+\eta_{2}\,     Program length    N  =    N  1   +    N  2         N     subscript  N  1    subscript  N  2      N=N_{1}+N_{2}\,     Calculated program length     N  ^   =     η  1     log  2    η  1     +    η  2     log  2    η  2           normal-^  N        subscript  η  1     subscript   2    subscript  η  1        subscript  η  2     subscript   2    subscript  η  2        \hat{N}=\eta_{1}\log_{2}\eta_{1}+\eta_{2}\log_{2}\eta_{2}     Volume    V  =   N  ×    log  2   η        V    N    subscript   2   η      V=N\times\log_{2}\eta     Difficulty    D  =     η  1   2   ×    N  2    η  2         D       subscript  η  1   2      subscript  N  2    subscript  η  2       D={\eta_{1}\over 2}\times{N_{2}\over\eta_{2}}     Effort    E  =   D  ×  V       E    D  V     E=D\times V      The difficulty measure is related to the difficulty of the program to write or understand, e.g. when doing code review .  The effort measure translates into actual coding time using the following relation,   Time required to program    T  =   E  18       T    E  18     T={E\over 18}   seconds   Halstead's delivered bugs (B) is an estimate for the number of errors in the implementation.   Number of delivered bugs    B  =    E    2  3     3000       B     superscript  E    2  3    3000     B={E^{2\over 3}\over 3000}   or, more recently,    B  =   V  3000       B    V  3000     B={V\over 3000}   is accepted .   Example  Let us consider the following C program:  main()
 {
     int a, b, c, avg;
     scanf("%d %d %d", &a;, &b;, &c;);
     avg = (a + b + c) / 3;
     printf("avg = %d", avg);
 }  The unique operators are: main , () , {} , int , scanf , & , = , + , / , printf  The unique operands are: a , b , c , avg , "%d %d %d" , 3 , "avg = %d"        η  1   =  10       subscript  η  1   10    \eta_{1}=10   ,     η  2   =  7       subscript  η  2   7    \eta_{2}=7   ,    η  =  17      η  17    \eta=17          N  1   =  16       subscript  N  1   16    N_{1}=16   ,     N  2   =  15       subscript  N  2   15    N_{2}=15   ,    N  =  31      N  31    N=31     Calculated Program Length     N  ^   =     10  ×  l   o   g  2   10   +    7  ×  l   o   g  2   7    =  52.9         normal-^  N         10  l   o   subscript  g  2   10       7  l   o   subscript  g  2   7         52.9     \hat{N}=10\times log_{2}10+7\times log_{2}7=52.9     Volume    V  =    31  ×  l   o   g  2   17   =  126.7        V      31  l   o   subscript  g  2   17        126.7     V=31\times log_{2}17=126.7     Difficulty    D  =    10  2   ×   15  7    =  10.7        D      10  2     15  7         10.7     D={10\over 2}\times{15\over 7}=10.7     Effort     E  =   10.7  ×  126.7   =  1   ,  355.7     formulae-sequence      E    10.7  126.7        1    355.7    E=10.7\times 126.7=1,355.7     Time required to program    T  =    1  ,  355.7   18   =  75.3        T     1  355.7   18        75.3     T={1,355.7\over 18}=75.3   seconds  Number of delivered bugs    B  =    1  ,   355.7    2  3      3000   =  0.04        B     1   superscript  355.7    2  3     3000        0.04     B={1,355.7^{2\over 3}\over 3000}=0.04      References    See also   Function point  Cyclomatic complexity   External links   The Halstead metrics - Extensive discussion on the calculation and use of Halstead Metrics in an object-oriented environment (with specific reference to Java).  Calculation of Halstead metrics - Measurement of Halstead Metrics.  Explanation with a Sample Program - Example (on Page 6 of the PDF)  Script computing Halstead Metrics and using them for commented code detection  IBM   "  Category:Software metrics     ↩     