   Approximate string matching      Approximate string matching   In computer science , approximate string matching (often colloquially referred to as fuzzy string searching ) is the technique of finding strings that match a pattern approximately (rather than exactly). The problem of approximate string matching is typically divided into two sub-problems: finding approximate substring matches inside a given string and finding dictionary strings that match the pattern approximately.  Overview  The closeness of a match is measured in terms of the number of primitive operations necessary to convert the string into an exact match. This number is called the edit distance between the string and the pattern. The usual primitive operations are:   insertion: cot → co a t  deletion: co a t → cot  substitution: co a t → co s t   These three operations may be generalized as forms of substitution by adding a NULL character (here symbolized by *) wherever a character has been deleted or inserted:   insertion: co * t → co a t  deletion: co a t → co * t  substitution: co a t → co s t   Some approximate matchers also treat transposition , in which the positions of two letters in the string are swapped, to be a primitive operation. Changing cost to cots is an example of a transposition.  Different approximate matchers impose different constraints. Some matchers use a single global unweighted cost, that is, the total number of primitive operations necessary to convert the match to the pattern. For example, if the pattern is coil , foil differs by one substitution, coils by one insertion, oil by one deletion, and foal by two substitutions. If all operations count as a single unit of cost and the limit is set to one, foil , coils , and oil will count as matches while foal will not.  Other matchers specify the number of operations of each type separately, while still others set a total cost but allow different weights to be assigned to different operations. Some matchers permit separate assignments of limits and weights to individual groups in the pattern.  Problem formulation and algorithms  One possible definition of the approximate string matching problem is the following: Given a pattern string    P  =    p  1    p  2   …   p  m        P     subscript  p  1    subscript  p  2   normal-…   subscript  p  m      P=p_{1}p_{2}...p_{m}   and a text string    T  =    t  1    t  2   …   t  n        T     subscript  t  1    subscript  t  2   normal-…   subscript  t  n      T=t_{1}t_{2}\dots t_{n}   , find a substring     T    j  ′   ,  j    =    t   j  ′    …   t  j         subscript  T    superscript  j  normal-′   j       subscript  t   superscript  j  normal-′    normal-…   subscript  t  j      T_{j^{\prime},j}=t_{j^{\prime}}\dots t_{j}   in T , which, of all substrings of T , has the smallest edit distance to the pattern P .  A brute-force approach would be to compute the edit distance to P for all substrings of T, and then choose the substring with the minimum distance. However, this algorithm would have the running time O ( n 3  m ).  A better solution, which was proposed by Sellers , relies on dynamic programming . It uses an alternative formulation of the problem: for each position j in the text T and each position i in the pattern P , compute the minimum edit distance between the i first characters of the pattern,    P  i     subscript  P  i    P_{i}   , and any substring    T    j  ′   ,  j      subscript  T    superscript  j  normal-′   j     T_{j^{\prime},j}   of T that ends at position j .  For each position j in the text T , and each position i in the pattern P , go through all substrings of T ending at position j , and determine which one of them has the minimal edit distance to the i first characters of the pattern P . Write this minimal distance as E ( i , j ). After computing E ( i , j ) for all i and j , we can easily find a solution to the original problem: it is the substring for which E ( m , j ) is minimal ( m being the length of the pattern P .)  Computing E ( m , j ) is very similar to computing the edit distance between two strings. In fact, we can use the Levenshtein distance computing algorithm for E ( m , j ), the only difference being that we must initialize the first row with zeros, and save the path of computation, that is, whether we used E ( i − 1, j ), E( i , j − 1) or E ( i − 1, j − 1) in computing E ( i , j ).  In the array containing the E ( x , y ) values, we then choose the minimal value in the last row, let it be E ( x 2 , y 2 ), and follow the path of computation backwards, back to the row number 0. If the field we arrived at was E (0, y 1 ), then T [ y 1 + 1] ... T [ y 2 ] is a substring of T with the minimal edit distance to the pattern P .  Computing the E ( x , y ) array takes O ( mn ) time with the dynamic programming algorithm, while the backwards-working phase takes O ( n + m ) time.  On-line versus off-line  Traditionally, approximate string matching algorithms are classified into two categories: on-line and off-line. With on-line algorithms the pattern can be processed before searching but the text cannot. In other words, on-line techniques do searching without an index. Early algorithms for on-line approximate matching were suggested by Wagner and Fisher and by Sellers.  Both algorithms are based on dynamic programming but solve different problems. Sellers' algorithm searches approximately for a substring in a text while the algorithm of Wagner and Fisher calculates Levenshtein distance , being appropriate for dictionary fuzzy search only.  On-line searching techniques have been repeatedly improved. Perhaps the most famous improvement is the bitap algorithm (also known as the shift-or and shift-and algorithm), which is very efficient for relatively short pattern strings. The Bitap algorithm is the heart of the Unix searching utility  agrep . A review of on-line searching algorithms was done by G. Navarro.  Although very fast on-line techniques exist, their performance on large data is unacceptable. Text preprocessing or indexing makes searching dramatically faster. Today, a variety of indexing algorithms have been presented. Among them are suffix trees , metric trees and n-gram methods. A detailed survey of indexing techniques that allows one to find an arbitrary substring in a text is given by Navarro et al. . A computational survey of dictionary methods (i.e., methods that permit finding all dictionary words that approximately match a search pattern) is given by Boytsov .  Applications  The most common application of approximate matchers until recently has been spell checking . With the availability of large amounts of DNA data, matching of nucleotide sequences has become an important application. Approximate matching is also used in spam filtering .String matching cannot be used for most binary data, such as images and music. They require different algorithms, such as acoustic fingerprinting .  See also   String metric  Locality-sensitive hashing  Needleman–Wunsch algorithm  Smith–Waterman algorithm  Jaro–Winkler distance  Levenshtein distance  Concept Search  Approximate matching with addition of regular expressions ability  Regular expressions for non-fuzzy (exact) matching  Metaphone  Soundex  Agrep  Plagiarism detection   External links   Flamingo Project  Efficient Similarity Query Processing Project with recent advances in approximate string matching based on an edit distance threshold.  StringMetric project a Scala library of string metrics and phonetic algorithms  Natural project a JavaScript natural language processing library which includes implementations of popular string metrics   References                              J. Zobel, P. Dart. Finding approximate matches in large lexicons. Software-Practice & Experience 25(3), pp 331–345, 1995.   "    Category:Pattern matching  Category:Dynamic programming   