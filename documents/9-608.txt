   Okapi BM25      Okapi BM25   In information retrieval , Okapi BM25 (BM stands for Best Matching) is a ranking function used by search engines to rank matching documents according to their relevance to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson , Karen Spärck Jones , and others.  The name of the actual ranking function is BM25. To set the right context, however, it usually referred to as "Okapi BM25", since the Okapi information retrieval system, implemented at London 's City University in the 1980s and 1990s, was the first system to implement this function.  BM25, and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent state-of-the-art TF-IDF -like retrieval functions used in document retrieval, such as web search .  The ranking function  BM25 is a bag-of-words retrieval function that ranks a set of documents based on the query terms appearing in each document, regardless of the inter-relationship between the query terms within a document (e.g., their relative proximity). It is not a single function, but actually a whole family of scoring functions, with slightly different components and parameters. One of the most prominent instantiations of the function is as follows.  Given a query   Q   Q   Q   , containing keywords     q  1   ,  …  ,   q  n       subscript  q  1   normal-…   subscript  q  n     q_{1},...,q_{n}   , the BM25 score of a document   D   D   D   is:        score   (  D  ,  Q  )    =    ∑   i  =  1   n     IDF   (   q  i   )    ⋅     f   (   q  i   ,  D  )    ⋅   (    k  1   +  1   )      f   (   q  i   ,  D  )    +    k  1   ⋅   (    1  -  b   +   b  ⋅    |  D  |   avgdl     )         ,        score   D  Q      superscript   subscript     i  1    n    normal-⋅    IDF   subscript  q  i       normal-⋅    f    subscript  q  i   D       subscript  k  1   1        f    subscript  q  i   D     normal-⋅   subscript  k  1       1  b    normal-⋅  b      D   avgdl            \text{score}(D,Q)=\sum_{i=1}^{n}\text{IDF}(q_{i})\cdot\frac{f(q_{i},D)\cdot(k_%
 {1}+1)}{f(q_{i},D)+k_{1}\cdot(1-b+b\cdot\frac{|D|}{\text{avgdl}})},     where    f   (   q  i   ,  D  )       f    subscript  q  i   D     f(q_{i},D)   is    q  i     subscript  q  i    q_{i}   's term frequency in the document   D   D   D   ,    |  D  |      D    |D|   is the length of the document   D   D   D   in words, and    a  v  g  d  l      a  v  g  d  l    avgdl   is the average document length in the text collection from which documents are drawn.    k  1     subscript  k  1    k_{1}   and   b   b   b   are free parameters, usually chosen, in absence of an advanced optimization, as     k  1   ∈   [  1.2  ,  2.0  ]        subscript  k  1    1.2  2.0     k_{1}\in[1.2,2.0]   and    b  =  0.75      b  0.75    b=0.75   . 1     IDF   (   q  i   )       IDF   subscript  q  i     \text{IDF}(q_{i})   is the IDF ( inverse document frequency ) weight of the query term    q  i     subscript  q  i    q_{i}   . It is usually computed as:        IDF   (   q  i   )    =   log     N  -   n   (   q  i   )     +  0.5     n   (   q  i   )    +  0.5      ,        IDF   subscript  q  i            N    n   subscript  q  i     0.5       n   subscript  q  i    0.5       \text{IDF}(q_{i})=\log\frac{N-n(q_{i})+0.5}{n(q_{i})+0.5},     where   N   N   N   is the total number of documents in the collection, and    n   (   q  i   )       n   subscript  q  i     n(q_{i})   is the number of documents containing    q  i     subscript  q  i    q_{i}   .  There are several interpretations for IDF and slight variations on its formula. In the original BM25 derivation, the IDF component is derived from the Binary Independence Model .  Please note that the above formula for IDF shows potentially major drawbacks when using it for terms appearing in more than half of the corpus documents. These terms' IDF is negative, so for any two almost-identical documents, one which contains the term and one which does not contain it, the latter will possibly get a larger score. This means that terms appearing in more than half of the corpus will provide negative contributions to the final document score. This is often an undesirable behavior, so many real-world applications would deal with this IDF formula in a different way:   Each summand can be given a floor of 0, to trim out common terms;  The IDF function can be given a floor of a constant   ϵ   ϵ   \epsilon   , to avoid common terms being ignored at all;  The IDF function can be replaced with a similarly shaped one which is non-negative, or strictly positive to avoid terms being ignored at all.   IDF information theoretic interpretation  Here is an interpretation from information theory. Suppose a query term   q   q   q   appears in    n   (  q  )       n  q    n(q)   documents. Then a randomly picked document   D   D   D   will contain the term with probability     n   (  q  )    N        n  q   N    \frac{n(q)}{N}   (where   N   N   N   is again the cardinality of the set of documents in the collection). Therefore, the information content of the message "   D   D   D   contains   q   q   q   " is:        -   log    n   (  q  )    N     =   log   N   n   (  q  )       .              n  q   N         N    n  q       -\log\frac{n(q)}{N}=\log\frac{N}{n(q)}.     Now suppose we have two query terms    q  1     subscript  q  1    q_{1}   and    q  2     subscript  q  2    q_{2}   . If the two terms occur in documents entirely independently of each other, then the probability of seeing both    q  1     subscript  q  1    q_{1}   and    q  2     subscript  q  2    q_{2}   in a randomly picked document   D   D   D   is:         n   (   q  1   )    N   ⋅    n   (   q  2   )    N    ,     normal-⋅      n   subscript  q  1    N       n   subscript  q  2    N     \frac{n(q_{1})}{N}\cdot\frac{n(q_{2})}{N},     and the information content of such an event is:        ∑   i  =  1   2    log   N   n   (   q  i   )       .      superscript   subscript     i  1    2       N    n   subscript  q  i        \sum_{i=1}^{2}\log\frac{N}{n(q_{i})}.     With a small variation, this is exactly what is expressed by the IDF component of BM25.  Modifications   At the extreme values of the coefficient   b   b   b   BM25 turns into ranking functions known as BM11 (for    b  =  1      b  1    b=1   ) and BM15 (for    b  =  0      b  0    b=0   ). 2  BM25F 3 is a modification of BM25 in which the document is considered to be composed from several fields (such as headlines, main text, anchor text) with possibly different degrees of importance.  BM25+ 4 is an extension of BM25. BM25+ was developed to address one deficiency of the standard BM25 in which the component of term frequency normalization by document length is not properly lower-bounded; as a result of this deficiency, long documents which do match the query term can often be scored unfairly by BM25 as having a similar relevancy to shorter documents that do not contain the query term at all. The scoring formula of BM25+ only has one additional free parameter   δ   δ   \delta   (a default value is   1.0   1.0   1.0   in absence of a training data) as compared with BM25:        score   (  D  ,  Q  )    =    ∑   i  =  1   n     IDF   (   q  i   )    ⋅   [      f   (   q  i   ,  D  )    ⋅   (    k  1   +  1   )      f   (   q  i   ,  D  )    +    k  1   ⋅   (    1  -  b   +   b  ⋅    |  D  |   avgdl     )      +  δ   ]           score   D  Q      superscript   subscript     i  1    n    normal-⋅    IDF   subscript  q  i     delimited-[]       normal-⋅    f    subscript  q  i   D       subscript  k  1   1        f    subscript  q  i   D     normal-⋅   subscript  k  1       1  b    normal-⋅  b      D   avgdl        δ        \text{score}(D,Q)=\sum_{i=1}^{n}\text{IDF}(q_{i})\cdot\left[\frac{f(q_{i},D)%
 \cdot(k_{1}+1)}{f(q_{i},D)+k_{1}\cdot(1-b+b\cdot\frac{|D|}{\text{avgdl}})}+%
 \delta\right]     Footnotes  References              External links     "  Category:Ranking functions  Category:Information retrieval evaluation     Christopher D. Manning, Prabhakar Raghavan, Hinrich Schütze. An Introduction to Information Retrieval , Cambridge University Press, 2009, p. 233. ↩  http://xapian.org/docs/bm25.html ↩  Hugo Zaragoza, Nick Craswell, Michael Taylor, Suchi Saria, and Stephen Robertson. Microsoft Cambridge at TREC-13: Web and HARD tracks. In Proceedings of TREC-2004. ↩  Yuanhua Lv and ChengXiang Zhai. Lower-bounding term frequency normalization. In Proceedings of CIKM'2011, pages 7-16. ↩     