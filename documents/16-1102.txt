   Behavior Trees (artificial intelligence, robotics and control)      Behavior Trees (artificial intelligence, robotics and control)   A Behavior Tree (BT) is a mathematical model of plan execution used in computer science , robotics and control systems . They describe switchings between a finite set of tasks in a modular fashion. Their strength comes from their ability to create very complex tasks composed of simple tasks, without worrying how the simple tasks are implemented. BTs present some similarities to hierarchical state machines with the key difference that the main building block of a behavior is a task rather than a state. Its ease of human understanding make BTs less error prone and very popular in the game developer community.  (Figure)  BT modelling the search and grasp plan of a two-armed robot.   Background  BTs originates from the computer game industry as a powerful tool to provide the artificial intelligence of non-player characters (NPCs). 1 2 3 4 They have been extensively used in high profile video games such as Halo , Bioshock , and Spore . Recent works propose BTs as a multi-mission control framework for UAV , complex robots, robotic manipulation, and multi-robot systems. 5 6 7 8 9 10  Key concepts  BT is graphical represented as a directed tree in which the nodes are classified as root, control flow nodes, or execution nodes (tasks). For each pair of connected nodes the outgoing node is called parent and the incoming node is called child. The root has no parents and exactly one child, the control flow nodes have one parent and at least one child, and the execution nodes have one parent and no children. Graphically, the children of a control flow node are placed below it, ordered from left to right. 11  The execution of a BT starts from the root which sends ticks with a certain frequency to its child. A tick is an enabling signal that allows the execution of a child. When the execution of a node in the BT is allowed, it returns to the parent a status running if its execution has not finished yet, success if it has achieved its goal, or failure otherwise.  Control flow node  A control flow node is used to control the subtasks of which it is composed. A control flow node may be either a selector (fallback) node or a sequence node. They run each of their subtasks in turn. When a subtask is completed and returns its status (success or failure), the control flow node decides whether to execute the next subtask or not.  Selector (fallback) node  (Figure)  Figure I. Graphical representation of a fallback composition of N tasks.   Fallback nodes are used to find and execute the first child that does not fail. A fallback node will return immediately with a status code of success or running when one of its children returns success or running (see Figure I and the pseudocode below). The children are ticked in order of importance, from left to right.  In pseudocode, the algorithm for a fallback composition is:  1 for i¬†from¬†1¬†to¬†n do  2¬†¬†¬†¬†¬†childstatus¬†‚Üê¬†Tick(child(i))  3 if childstatus¬†=¬†running  4 return running  5 else  if childstatus¬†=¬†success  6 return success  7 end  8 return failure  Sequence node  Sequence nodes are used to find and execute the first child that has not yet succeeded. A sequence node will return immediately with a status code of failure or running when one of its children returns failure or running (see Figure II and the pseudocode below). The children are ticked in order, from left to right.  In pseudocode, the algorithm for a sequence composition is:  1 for i¬†from¬†1¬†to¬†n do  2¬†¬†¬†¬†¬†childstatus¬†‚Üê¬†Tick(child(i))  3 if childstatus¬†=¬†running  4 return running  5 else  if childstatus¬†=¬†failure  6 return failure  7 end  8 return success  Mathematical definition  BT are defined as three-tuple. 12       T  i   =   {   f  i   ,   r  i   ,   Œî  t   }    ,       subscript  T  i     subscript  f  i    subscript  r  i     normal-Œî  t      T_{i}=\{f_{i},r_{i},\Delta t\},     where    i  ‚àà  ‚Ñï      i  ‚Ñï    i\in\mathbb{N}   is the index of the tree,     f  i   :    ‚Ñù  n   ‚Üí   ‚Ñù  n       normal-:   subscript  f  i    normal-‚Üí   superscript  ‚Ñù  n    superscript  ‚Ñù  n      f_{i}:\mathbb{R}^{n}\rightarrow\mathbb{R}^{n}   is a vector field representing the right hand side of an ordinary difference equation,    Œî  t      normal-Œî  t    \Delta t   is a time step and     r  i   :    ‚Ñù  n   ‚Üí   {   R  i   ,   S  i   ,   F  i   }       normal-:   subscript  r  i    normal-‚Üí   superscript  ‚Ñù  n     subscript  R  i    subscript  S  i    subscript  F  i       r_{i}:\mathbb{R}^{n}\rightarrow\{R_{i},S_{i},F_{i}\}   is the return status, that can be equal to either Running    R  i     subscript  R  i    R_{i}   , Success    S  i     subscript  S  i    S_{i}   , or Failure    F  i     subscript  F  i    F_{i}   .  Note : A task is degenerate BT with no parent and no child.  Behavior Tree execution  The execution of a BT is described by the following standard ordinary difference equations:        x   k  +  t     (   t   k  +  1    )    =    f  i    (    x  k    (   t  k   )    )           subscript  x    k  t     subscript  t    k  1        subscript  f  i      subscript  x  k    subscript  t  k       x_{k+t}(t_{k+1})=f_{i}(x_{k}(t_{k}))        t   k  +  1    =    t  k   +   Œî  t         subscript  t    k  1       subscript  t  k     normal-Œî  t      t_{k+1}=t_{k}+\Delta t     where    k  ‚àà  ‚Ñï      k  ‚Ñï    k\in\mathbb{N}   represent the discrete time, and    x  ‚àà   ‚Ñù  n       x   superscript  ‚Ñù  n     x\in\mathbb{R}^{n}   is the state space of the system modelled by the Behvavior Tree.  Fallback composition  Two BTs    T  i     subscript  T  i    T_{i}   and    T  j     subscript  T  j    T_{j}   can be composed into a more complex BT    T  0     subscript  T  0    T_{0}   using a Fallback operator.        T  0   =   fallback   (   T  i   ,   T  j   )     .       subscript  T  0     fallback    subscript  T  i    subscript  T  j       T_{0}=\mbox{fallback}(T_{i},T_{j}).     Then return status    r  0     subscript  r  0    r_{0}   and the vector field    f  0     subscript  f  0    f_{0}   associated with    T  0     subscript  T  0    T_{0}   are defined as follows:        r  0    (   x  k   )    =   {       r  j    (   x  k   )        if   x  k    ‚àà   ‚Ñ±  1          r  i    (   x  k   )       otherwise  .              subscript  r  0    subscript  x  k     cases     subscript  r  j    subscript  x  k        if   subscript  x  k     subscript  ‚Ñ±  1       subscript  r  i    subscript  x  k    otherwise     r_{0}(x_{k})=\begin{cases}r_{j}(x_{k})&\text{ if }x_{k}\in\mathcal{F}_{1}\\
 r_{i}(x_{k})&\text{ otherwise }.\end{cases}         f  0    (   x  k   )    =   {       f  j    (   x  k   )        if   x  k    ‚àà   ‚Ñ±  1          f  i    (   x  k   )       otherwise  .              subscript  f  0    subscript  x  k     cases     subscript  f  j    subscript  x  k        if   subscript  x  k     subscript  ‚Ñ±  1       subscript  f  i    subscript  x  k    otherwise     f_{0}(x_{k})=\begin{cases}f_{j}(x_{k})&\text{ if }x_{k}\in\mathcal{F}_{1}\\
 f_{i}(x_{k})&\text{ otherwise }.\end{cases}     Sequence composition  Two BTs    T  i     subscript  T  i    T_{i}   and    T  j     subscript  T  j    T_{j}   can be composed into a more complex BT    T  0     subscript  T  0    T_{0}   using a Sequence operator.        T  0   =   sequence   (   T  i   ,   T  j   )     .       subscript  T  0     sequence    subscript  T  i    subscript  T  j       T_{0}=\mbox{sequence}(T_{i},T_{j}).     Then return status    r  0     subscript  r  0    r_{0}   and the vector field    f  0     subscript  f  0    f_{0}   associated with    T  0     subscript  T  0    T_{0}   are defined as follows:        r  0    (   x  k   )    =   {       r  j    (   x  k   )        if   x  k    ‚àà   ùíÆ  1          r  i    (   x  k   )       otherwise  .              subscript  r  0    subscript  x  k     cases     subscript  r  j    subscript  x  k        if   subscript  x  k     subscript  ùíÆ  1       subscript  r  i    subscript  x  k    otherwise     r_{0}(x_{k})=\begin{cases}r_{j}(x_{k})&\text{ if }x_{k}\in\mathcal{S}_{1}\\
 r_{i}(x_{k})&\text{ otherwise }.\end{cases}         f  0    (   x  k   )    =   {       f  j    (   x  k   )        if   x  k    ‚àà   ùíÆ  1          f  i    (   x  k   )       otherwise  .              subscript  f  0    subscript  x  k     cases     subscript  f  j    subscript  x  k        if   subscript  x  k     subscript  ùíÆ  1       subscript  f  i    subscript  x  k    otherwise     f_{0}(x_{k})=\begin{cases}f_{j}(x_{k})&\text{ if }x_{k}\in\mathcal{S}_{1}\\
 f_{i}(x_{k})&\text{ otherwise }.\end{cases}     See also   Hybrid system   References  "  Category:Automata theory  Category:Models of computation  Category:Digital electronics  Category:Artificial intelligence  Category:Robot control  Category:Automated planning and scheduling     Isla D. 2005. Handling complexity in the Halo 2 AI. In Game Developers Conference (Vol. 12) ‚Ü©  Champandard A. 2007. Understanding BTs. AiGameDev. com, 6 ‚Ü©  Isla D. 2008. Halo 3-building a better battle. In Game Developers Conference. 2008. ‚Ü©  Lim, C. U., Baumgarten, R., & Colton, S. 2010. Evolving behaviour trees for the commercial game DEFCON. In Applications of Evolutionary Computation, pp. 100-110. Springer Berlin Heidelberg, 2010. ‚Ü©  √ñgren, Petter. "Increasing Modularity of UAV Control Systems using Computer Game BTs." In AIAA Guidance, Navigation and Control Conference, Minneapolis, Minnesota, pp. 13-16. 2012. ‚Ü©  Colledanchise, Michele, Marzinotto Alejandro, and √ñgren Petter. "Performance Analysis of Stochastic BTs." In Robotics and Automation (ICRA), 2014 IEEE International Conference on. 2014. ‚Ü©  Marzinotto, Alejandro, Colledanchise Michele, Smith Christian, and √ñgren Petter. "Towards a Unified BTs Framework for Robot Control." In Robotics and Automation (ICRA), 2014 IEEE International Conference on. 2014. ‚Ü©  Kl√∂ckner, Andreas. "Interfacing BTs with the World Using Description Logic." In AIAA Guidance, Navigation and Control Conference, Boston, MA. 2013. ‚Ü©  Kl√∂ckner, Andreas. "Behavior Trees for UAV Mission Management." In GI-Jahrestagung, pp. 57-68. 2013. ‚Ü©  Bagnell, J. Andrew, Felipe Cavalcanti, Lei Cui, Thomas Galluzzo, Martial Hebert, Moslem Kazemi, Matthew Klingensmith et al. "An integrated system for autonomous robotics manipulation." In Intelligent Robots and Systems (IROS), 2012 IEEE/RSJ International Conference on, pp. 2955-2962. IEEE, 2012. ‚Ü©  craft ai 2015. BT 101 ‚Äì Behavior Trees grammar basics ‚Ü©  Colledanchise Michele, and √ñgren Petter. "How Behavior Trees Modularize Robustness and Safety in Hybrid Systems." In Intelligent Robots and Systems (IROS), 2014 IEEE/RSJ International Conference on, IEEE, 2014. ‚Ü©     