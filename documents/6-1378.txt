   Karp–Lipton theorem      Karp–Lipton theorem   In complexity theory , the Karp–Lipton theorem states that if the boolean satisfiability problem (SAT) can be solved by Boolean circuits with a polynomial number of logic gates, then       Π  2   =    Σ  2         subscript  normal-Π  2    subscript  normal-Σ  2     \Pi_{2}=\Sigma_{2}\,   and therefore     PH  =   Σ  2    .      PH   subscript  normal-Σ  2     \mathrm{PH}=\Sigma_{2}.\,     That is, if we assume that NP , the class of nondeterministic polynomial time problems, can be contained in the non-uniform polynomial time complexity class P/poly , then this assumption implies the collapse of the polynomial hierarchy at its second level. Such a collapse is believed unlikely, so the theorem is generally viewed by complexity theorists as evidence for the nonexistence of polynomial size circuits for SAT or for other NP-complete problems. A proof that such circuits do not exist would imply that P ≠ NP . As P/poly contains all problems solvable in randomized polynomial time ( Adleman's theorem ), the Karp–Lipton theorem is also evidence that the use of randomization does not lead to polynomial time algorithms for NP-complete problems.  The Karp–Lipton theorem is named after Richard M. Karp and Richard J. Lipton , who first proved it in 1980. (Their original proof collapsed PH to    Σ  3     subscript  normal-Σ  3    \Sigma_{3}   , but Michael Sipser improved it to    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   .)  Variants of the theorem state that, under the same assumption, MA = AM , and PH collapses to complexity class. There are stronger conclusions possible if PSPACE , or some other complexity classes are assumed to have polynomial-sized circuits; see P/poly . If NP is assumed to be a subset of BPP (which is a subset of P/poly), then the polynomial hierarchy collapses to BPP . 1 If coNP is assumed to be subset of NP/poly, then the polynomial hierarchy collapses to its third level.  Intuition  Suppose that polynomial sized circuits for SAT not only exist, but also that they could be constructed by a polynomial time algorithm. Then this supposition implies that SAT itself could be solved by a polynomial time algorithm that constructs the circuit and then applies it. That is, efficiently constructible circuits for SAT would lead to a stronger collapse, P = NP.  The assumption of the Karp–Lipton theorem, that these circuits exist, is weaker. But it is still possible for an algorithm in the complexity class    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   to guess a correct circuit for SAT. The complexity class    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   describes problems of the form      ∃   x   ∀    y   ψ   (  x  ,  y  )            x   for-all    y  ψ   x  y        \exists x\forall y\;\psi(x,y)   where   ψ   ψ   \psi   is any polynomial-time computable predicate. The existential power of the first quantifier in this predicate can be used to guess a correct circuit for SAT, and the universal power of the second quantifier can be used to verify that the circuit is correct. Once this circuit is guessed and verified, the algorithm in class    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   can use it as a subroutine for solving other problems.  Self-reducibility  To understand the Karp–Lipton proof in more detail, we consider the problem of testing whether a circuit c is a correct circuit for solving SAT instances of a given size, and show that this circuit testing problem belongs to    Π  1     subscript  normal-Π  1    \Pi_{1}   . That is, there exists a polynomial time computable predicate V such that c is a correct circuit if and only if, for all polynomially-bounded z , V ( c , z ) is true.  The circuit c is a correct circuit for SAT if it satisfies two properties:   For every pair ( s , x ) where s is an instance of SAT and x is a solution to the instance, c ( s ) must be true  For every instance s of SAT for which c ( s ) is true, s must be solvable.   The first of these two properties is already in the form of problems in class    Π  1     subscript  normal-Π  1    \Pi_{1}   . To verify the second property, we use the self-reducibility property of SAT.  Self-reducibility describes the phenomenon that, if we can quickly test whether a SAT instance is solvable, we can almost as quickly find an explicit solution to the instance. To find a solution to an instance s , choose one of the Boolean variables x that is input to s , and make two smaller instances s 0 and s 1 where s i denotes the formula formed by replacing x with the constant i . Once these two smaller instances have been constructed, apply the test for solvability to each of them. If one of these two tests returns that the smaller instance is satisfiable, continue solving that instance until a complete solution has been derived.  To use self-reducibility to check the second property of a correct circuit for SAT, we rewrite it as follows:   For every instance s of SAT for which c ( s ) is true, the self-reduction procedure described above finds a valid solution to s .   Thus, we can test in    Π  1     subscript  normal-Π  1    \Pi_{1}   whether c is a valid circuit for solving SAT.  see Random self-reducibility for more information  Proof of Karp–Lipton theorem  The Karp–Lipton theorem can be restated as a result about Boolean formulas with polynomially-bounded quantifiers. Problems in    Π  2     subscript  normal-Π  2    \Pi_{2}   are described by formulas of this type, with the syntax      ϕ  =   ∀   x   ∃    y   ψ   (  x  ,  y  )           ϕ   for-all    x      y  ψ   x  y         \phi=\forall x\exists y\;\psi(x,y)   where   ψ   ψ   \psi   is a polynomial-time computable predicate. The Karp–Lipton theorem states that this type of formula can be transformed in polynomial time into an equivalent formula in which the quantifiers appear in the opposite order; such a formula belongs to    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   . Note that the subformula       s   (  x  )    =   ∃    y   ψ   (  x  ,  y  )           s  x       y  ψ   x  y       s(x)=\exists y\;\psi(x,y)   is an instance of SAT. That is, if c is a valid circuit for SAT, then this subformula is equivalent to the unquantified formula c ( s ( x )). Therefore, the full formula for   ϕ   ϕ   \phi   is equivalent (under the assumption that a valid circuit c exists) to the formula       ∃   c   ∀    (  x  ,  z  )   V   (  c  ,  z  )       ∧   c   (   s   (  x  )    )            c   for-all     x  z   V   c  z         c    s  x      \exists c\forall(x,z)\;V(c,z)\wedge c(s(x))\,   where V is the formula used to verify that c really is a valid circuit using self-reducibility, as described above. This equivalent formula has its quantifiers in the opposite order, as desired. Therefore, the Karp–Lipton assumption allows us to transpose the order of existential and universal quantifiers in formulas of this type, showing that      Σ  2   =   Π  2    .       subscript  normal-Σ  2    subscript  normal-Π  2     \Sigma_{2}=\Pi_{2}.   Repeating the transposition allows formulas with deeper nesting to be simplified to a form in which they have a single existential quantifier followed by a single universal quantifier, showing that      P  H   =   Σ  2    .        P  H    subscript  normal-Σ  2     PH=\Sigma_{2}.     Another proof and S 2 P  Assume    𝖭𝖯  ⊆   𝖯  /  𝗉𝗈𝗅𝗒       𝖭𝖯    𝖯  𝗉𝗈𝗅𝗒     \mathsf{NP}\subseteq\mathsf{P/poly}   . Thefore, there exists a family of circuits    C  n     subscript  C  n    C_{n}   that solves satisfability on input of length n . Using self-reducibility, there exists a family of circuits    D  n     subscript  D  n    D_{n}   which outputs a satisfying assignment on true instances.  Suppose L is a    Π  2     subscript  normal-Π  2    \Pi_{2}   set      L  =   {  z  :    ∀  x   .   ∃  y   .   ϕ   (  x  ,  y  ,  z  )     }       L   conditional-set  z   formulae-sequence   for-all  x     y     ϕ   x  y  z        L=\{z:\forall x.\exists y.\phi(x,y,z)\}\,     Since     ∃  y   .   ϕ   (  x  ,  y  ,  z  )       formulae-sequence    y     ϕ   x  y  z      \exists y.\phi(x,y,z)   can be considered an instance of SAT (by Cook-Levin theorem ), there exists a circuit    D  n     subscript  D  n    D_{n}   , depending on    n  =   |  z  |       n    z     n=|z|   , such that the formula defining L is equivalent to   Furthermore, the circuit can be guessed with existential quantification:   Obviously () implies (). If (1) is false, then     ¬   ∃  y    .   ϕ   (  x  ,  y  ,  z  )       formulae-sequence       y      ϕ   x  y  z      \neg\exists y.\phi(x,y,z)   . In this case, no circuit D can output an assignment making    ϕ   (  x  ,   D   (  x  ,  z  )    ,  z  )       ϕ   x    D   x  z    z     \phi(x,D(x,z),z)\;   true.  The proof has shown that a    Π  2     subscript  normal-Π  2    \Pi_{2}   set   L   L   L   is in    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   .  What more, if the    Π  2     subscript  normal-Π  2    \Pi_{2}   formula is true, then the circuit D will work against any x . If the    Π  2     subscript  normal-Π  2    \Pi_{2}   formula is false, then x making the formula (1) false will work against any circuit. This property means a stronger collapse, namely to S complexity class (i.e.     Π  2   ⊆   𝖲  2  P   ⊆   Σ  2          subscript  normal-Π  2    superscript   subscript  𝖲  2   P         subscript  normal-Σ  2      \Pi_{2}\subseteq\mathsf{S}_{2}^{P}\subseteq\Sigma_{2}   ). It was observed by Sengupta. 2  === AM = MA === A modification 3 of the above proof yields      𝖭𝖯  ⊆   𝖯  /  𝗉𝗈𝗅𝗒   ⟹  𝖠𝖬  =  𝖬𝖠        𝖭𝖯    𝖯  𝗉𝗈𝗅𝗒        𝖠𝖬       𝖬𝖠     \mathsf{NP}\subseteq\mathsf{P/poly}\implies\mathsf{AM}=\mathsf{MA}     (see Arthur–Merlin protocol ).  Suppose that L is in AM , i.e.:      z  ∈  L  ⟹   Pr  x    [  ∃  y  .  ϕ   (  x  ,  y  ,  z  )   ]   ≥    2  3       fragments  z   L    subscript  Pr  x    fragments  normal-[   y  normal-.  ϕ   fragments  normal-(  x  normal-,  y  normal-,  z  normal-)   normal-]      2  3     z\in L\implies\Pr\nolimits_{x}[\exists y.\phi(x,y,z)]\geq\tfrac{2}{3}         z  ∉  L  ⟹   Pr  x    [  ∃  y  .  ϕ   (  x  ,  y  ,  z  )   ]   ≤    1  3       fragments  z   L    subscript  Pr  x    fragments  normal-[   y  normal-.  ϕ   fragments  normal-(  x  normal-,  y  normal-,  z  normal-)   normal-]      1  3     z\notin L\implies\Pr\nolimits_{x}[\exists y.\phi(x,y,z)]\leq\tfrac{1}{3}     and as previously rewrite     ∃  y   .   ϕ   (  x  ,  y  ,  z  )       formulae-sequence    y     ϕ   x  y  z      \exists y.\phi(x,y,z)   using the circuit    D  n     subscript  D  n    D_{n}   that outputs a satisfying assignment if it exists:      z  ∈  L  ⟹    Pr  x    [   ϕ   (  x  ,    D  n    (  x  ,  z  )    ,  z  )    ]    ≥    2  3          z  L         subscript  Pr  x     ϕ   x     subscript  D  n    x  z    z            2  3      z\in L\implies\Pr\nolimits_{x}[\phi(x,D_{n}(x,z),z)]\geq\tfrac{2}{3}         z  ∉  L  ⟹    Pr  x    [   ϕ   (  x  ,    D  n    (  x  ,  z  )    ,  z  )    ]    ≤    1  3          z  L         subscript  Pr  x     ϕ   x     subscript  D  n    x  z    z            1  3      z\notin L\implies\Pr\nolimits_{x}[\phi(x,D_{n}(x,z),z)]\leq\tfrac{1}{3}     Since    D  n     subscript  D  n    D_{n}   can be guessed:       z  ∈  L  ⟹   ∃  D    .     Pr  x    [   ϕ   (  x  ,   D   (  x  ,  z  )    ,  z  )    ]    ≥    2  3        formulae-sequence      z  L         D         subscript  Pr  x     ϕ   x    D   x  z    z       2  3      z\in L\implies\exists D.\Pr\nolimits_{x}[\phi(x,D(x,z),z)]\geq\tfrac{2}{3}          z  ∉  L  ⟹   ∀  D    .     Pr  x    [   ϕ   (  x  ,   D   (  x  ,  z  )    ,  z  )    ]    ≤    1  3        formulae-sequence      z  L        for-all  D         subscript  Pr  x     ϕ   x    D   x  z    z       1  3      z\notin L\implies\forall D.\Pr\nolimits_{x}[\phi(x,D(x,z),z)]\leq\tfrac{1}{3}     which proves   L   L   L   is in the smaller class MA .  Application to circuit lower bounds – Kannan's theorem  Kannan's theorem 4 states that for any fixed k there exists a language   L   L   L   in    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   , which is not in SIZE (n k ) (This is a different statement than     Σ  2   ⊈   𝖯  /  𝗉𝗈𝗅𝗒      not-subset-of-or-equals   subscript  normal-Σ  2     𝖯  𝗉𝗈𝗅𝗒     \Sigma_{2}\not\subseteq\mathsf{P/poly}   , which is currently open and states that there exists a single language that is not in SIZE (n k ) for any k ). It is a simple circuit lower bound .  Proof outline:  There exists a language    L  ∈    Σ  4   -   𝖲𝖨𝖹𝖤   (   n  k   )         L     subscript  normal-Σ  4     𝖲𝖨𝖹𝖤   superscript  n  k       L\in\Sigma_{4}-\mathsf{SIZE}(n^{k})   (the proof uses diagonalization technique). Consider two cases:   If    𝖲𝖠𝖳  ∉   𝖯  /  𝗉𝗈𝗅𝗒       𝖲𝖠𝖳    𝖯  𝗉𝗈𝗅𝗒     \mathsf{SAT}\notin\mathsf{P/poly}   then    𝖲𝖠𝖳  ∉   𝖲𝖨𝖹𝖤   (   n  k   )        𝖲𝖠𝖳    𝖲𝖨𝖹𝖤   superscript  n  k      \mathsf{SAT}\notin\mathsf{SIZE}(n^{k})   and theorem is proved.  If    𝖲𝖠𝖳  ∈   𝖯  /  𝗉𝗈𝗅𝗒       𝖲𝖠𝖳    𝖯  𝗉𝗈𝗅𝗒     \mathsf{SAT}\in\mathsf{P/poly}   , then by Karp–Lipton theorem,     Σ  4   =   Σ  2        subscript  normal-Σ  4    subscript  normal-Σ  2     \Sigma_{4}=\Sigma_{2}   and therefore    L  ∈    Σ  2   -   𝖲𝖨𝖹𝖤   (   n  k   )         L     subscript  normal-Σ  2     𝖲𝖨𝖹𝖤   superscript  n  k       L\in\Sigma_{2}-\mathsf{SIZE}(n^{k})   .   A stronger version of Karp–Lipton theorem strengthens Kannan's theorem to: for any k , there exists a language    L  ∈    𝖲  2  P   -   𝖲𝖨𝖹𝖤   (   n  k   )         L     superscript   subscript  𝖲  2   P     𝖲𝖨𝖹𝖤   superscript  n  k       L\in\mathsf{S}_{2}^{P}-\mathsf{SIZE}(n^{k})   .  It is also known that PP is not contained in    𝖲𝖨𝖹𝖤   (   n  k   )       𝖲𝖨𝖹𝖤   superscript  n  k     \mathsf{SIZE}(n^{k})   , which was proved by Vinodchandran. 5 Proof: 6   If    𝖯𝖯  ⊈   𝖯  /  𝗉𝗈𝗅𝗒      not-subset-of-or-equals  𝖯𝖯    𝖯  𝗉𝗈𝗅𝗒     \mathsf{PP}\not\subseteq\mathsf{P/poly}   then    𝖯𝖯  ⊈   𝖲𝖨𝖹𝖤   (   n  k   )       not-subset-of-or-equals  𝖯𝖯    𝖲𝖨𝖹𝖤   superscript  n  k      \mathsf{PP}\not\subseteq\mathsf{SIZE}(n^{k})   .  Otherwise,     𝖯   ♯  𝖯    ⊆   𝖯  /  𝗉𝗈𝗅𝗒        superscript  𝖯    normal-♯  𝖯      𝖯  𝗉𝗈𝗅𝗒     \mathsf{P^{\sharp P}}\subseteq\mathsf{P/poly}   . Since          𝖯   ♯  𝖯    ⊇  𝖯𝖯  ⊇  𝖬𝖠       superset-of-or-equals   superscript  𝖯    normal-♯  𝖯    𝖯𝖯    superset-of-or-equals    𝖬𝖠     \mathsf{P^{\sharp P}}\supseteq\mathsf{PP}\supseteq\mathsf{MA}   (by property of MA )       𝖯   ♯  𝖯    ⊇  𝖯𝖧  ⊇   Σ  2   ⊇  𝖬𝖠       superset-of-or-equals   superscript  𝖯    normal-♯  𝖯    𝖯𝖧    superset-of-or-equals     subscript  normal-Σ  2     superset-of-or-equals    𝖬𝖠     \mathsf{P^{\sharp P}}\supseteq\mathsf{PH}\supseteq\Sigma_{2}\supseteq\mathsf{MA}   (by Toda's theorem and property of MA)       𝖯   ♯  𝖯    =  𝖬𝖠       superscript  𝖯    normal-♯  𝖯    𝖬𝖠    \mathsf{P^{\sharp P}}=\mathsf{MA}   (follows from assumption using interactive protocol for permanent, see P/poly )      the containments are equalities and we get    𝖯𝖯  =   Σ  2   ⊈   𝖲𝖨𝖹𝖤   (   n  k   )          𝖯𝖯   subscript  normal-Σ  2     not-subset-of-or-equals      𝖲𝖨𝖹𝖤   superscript  n  k       \mathsf{PP}=\Sigma_{2}\not\subseteq\mathsf{SIZE}(n^{k})   by Kannan's theorem.   References      .     .   "  Category:Theorems in computational complexity theory     S. Zachos , Probabilistic quantifiers and games, 1988 ↩  Jin Yi-Cai.     S  2  P   ⊆   𝖹𝖯𝖯  𝖭𝖯        superscript   subscript  S  2   P    superscript  𝖹𝖯𝖯  𝖭𝖯     S_{2}^{P}\subseteq\mathsf{ZPP}^{\mathsf{NP}}    1 , section 6 ↩  V. Arvind, J. Köbler, U. Schöning , R. Schuler, If NP has Polynomial-Size Circuits, then MA = AM ↩  ↩  N. V. Vinodchandran, A note on the circuit complexity of PP ↩  S. Aaronson , Oracles Are Subtle But Not Malicious ↩     