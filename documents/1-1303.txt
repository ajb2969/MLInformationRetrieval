   Handshaking      Handshaking   In information technology , telecommunications , and related fields, handshaking is an automated process of negotiation that dynamically sets parameters of a communications channel established between two entities before normal communication over the channel begins. It follows the physical establishment of the channel and precedes normal information transfer.  It is usually a process that takes place when a computer is about to communicate with a foreign device to establish rules for communication. When a computer communicates with another device like a modem, printer, or network server, it needs to handshake with it to establish a connection.  Handshaking can be used to negotiate parameters that are acceptable to equipment and systems at both ends of the communication channel, including, but not limited to, information transfer rate , coding alphabet , parity , interrupt procedure, and other protocol or hardware features. Handshaking is a technique of communication between two entities. However, within TCP/IP RFCs, the term "handshake" is most commonly used to reference the TCP three-way handshake. For example, the term "handshake" is not present in RFCs covering FTP or SMTP. One exception is Transport Layer Security, TLS, setup, FTP RFC 4217. In place of the term "handshake," FTP RFC 3659 substitutes the term "conversation" for the passing of commands. 1  2  3  A simple handshaking protocol might only involve the receiver sending a message meaning "I received your last message and I am ready for you to send me another one." A more complex handshaking protocol might allow the sender to ask the receiver if he is ready to receive or for the receiver to reply with a negative acknowledgement meaning "I did not receive your last message correctly, please resend it" (e.g. if the data was corrupted en route). 4  Handshaking makes it possible to connect relatively heterogeneous systems or equipment over a communication channel without the need for human intervention to set parameters. One classic example of handshaking is that of modems , which typically negotiate communication parameters for a brief period when a connection is first established, and thereafter use those parameters to provide optimal information transfer over the channel as a function of its quality and capacity. The "squealing" (which is actually a sound that changes in pitch 100 times every second) noises made by some modems with speaker output immediately after a connection is established are in fact the sounds of modems at both ends engaging in a handshaking procedure; once the procedure is completed, the speaker might be silenced, depending on the settings of operating system or the application controlling the modem.  Examples  The TLS Handshake Protocol is used to negotiate the secure attributes of a session. (RFC 5246, p.37) 5  Common types of handshake  (Figure)  Example of three way handshaking    Three way handshake   Establishing a normal TCP connection requires three separate steps:  :# The first host (Alice) sends the second host (Bob) a "synchronize" (SYN) message with its own sequence number   x   x   x   , which Bob receives.  :# Bob replies with a synchronize-acknowledgment ( SYN-ACK ) message with its own sequence number   y   y   y   and acknowledgement number    x  +  1      x  1    x+1   , which Alice receives.  :# Alice replies with an acknowledgment message with acknowledgement number    y  +  1      y  1    y+1   , which Bob receives and to which he doesn't need to reply.   In this setup, the synchronize messages act as service requests from one server to the other, while the acknowledgement messages return to the requesting server to let it know the message was received.   One of the most important factors of three-way handshake is that, in order to exchange the starting sequence number the two sides plan to use, the client first sends a segment with its own initial sequence number   x   x   x   , then the server responds by sending a segment with its own sequence number   y   y   y   and the acknowledgement number    x  +  1      x  1    x+1   , and finally the client responds by sending a segment with acknowledgement number    y  +  1      y  1    y+1   .  The reason for the client and server not using the default sequence number such as 0 for establishing connection is to protect against two incarnations of the same connection reusing the same sequence number too soon, which means a segment from an earlier incarnation of a connection might interfere with a later incarnation of the connection.  See Also   Network allocation vector   References  de:Datenflusssteuerung "  Category:Data transmission  Category:Network architecture  Category:Network protocols     TCP RFC 793, 2581 ↩  SMTP RFC 821,5321, 2821, 1869,6531, 2822 ↩  FTP 959, 3659 (conversation), 2228,4217 (TLS handshake),5797 ↩  ↩  ↩     