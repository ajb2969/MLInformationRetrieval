   Dynamic programming      Dynamic programming  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In mathematics , computer science , economics , and bioinformatics , dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. It is applicable to problems exhibiting the properties of overlapping subproblems 1 and optimal substructure (described below). When applicable, the method takes far less time than other methods that don't take advantage of the subproblem overlap (like depth-first search ).  In order to solve a given problem, using a dynamic programming approach, we need to solve different parts of the problem (subproblems), then combine the solutions of the subproblems to reach an overall solution. Often when using a more naive method, many of the subproblems are generated and solved many times. The dynamic programming approach seeks to solve each subproblem only once, thus reducing the number of computations: once the solution to a given subproblem has been computed, it is stored or " memoized ": the next time the same solution is needed, it is simply looked up. This approach is especially useful when the number of repeating subproblems grows exponentially as a function of the size of the input.  Dynamic programming algorithms are used for optimization (for example, finding the shortest path between two points, or the fastest way to multiply many matrices). A dynamic programming algorithm will examine the previously solved subproblems and will combine their solutions to give the best solution for the given problem. The alternatives are many, such as using a greedy algorithm , which picks the locally optimal choice at each branch in the road. The locally optimal choice may be a poor choice for the overall solution. While a greedy algorithm does not guarantee an optimal solution, it is often faster to calculate. Fortunately, some greedy algorithms (such as minimum spanning trees ) are proven to lead to the optimal solution.  For example, let's say that you have to get from point A to point B as fast as possible, in a given city, during rush hour. A dynamic programming algorithm will look at finding the shortest paths to points close to A, and use those solutions to eventually find the shortest path to B. On the other hand, a greedy algorithm will start you driving immediately and will pick the road that looks the fastest at every intersection. As you can imagine, this strategy might not lead to the fastest arrival time, since you might take some "easy" streets and then find yourself hopelessly stuck in a traffic jam.  Sometimes, applying memoization to a naive basic recursive solution already results in a dynamic programming solution with asymptotically optimal time complexity; however, the optimal solution to some problems requires more sophisticated dynamic programming algorithms. Some of these may be recursive as well but parametrized differently from the naive solution. Others can be more complicated and cannot be implemented as a recursive function with memoization. Examples of these are the two solutions to the Egg Dropping puzzle below.  Overview  Dynamic programming is both a mathematical optimization method and a computer programming method. In both contexts it refers to simplifying a complicated problem by breaking it down into simpler subproblems in a recursive manner. While some decision problems cannot be taken apart this way, decisions that span several points in time do often break apart recursively; Bellman called this the " Principle of Optimality ". Likewise, in computer science, a problem that can be solved optimally by breaking it into subproblems and then recursively finding the optimal solutions to the subproblems is said to have optimal substructure .  If subproblems can be nested recursively inside larger problems, so that dynamic programming methods are applicable, then there is a relation between the value of the larger problem and the values of the subproblems. 2 In the optimization literature this relationship is called the Bellman equation .  Dynamic programming in mathematical optimization  In terms of mathematical optimization , dynamic programming usually refers to simplifying a decision by breaking it down into a sequence of decision steps over time. This is done by defining a sequence of value functions  V 1 , V 2 , ..., V n , with an argument y representing the state of the system at times i from 1 to n . The definition of V n ( y ) is the value obtained in state y at the last time n . The values V i at earlier times i = n −1, n − 2, ..., 2, 1 can be found by working backwards, using a recursive relationship called the Bellman equation . For i = 2, ..., n , V i −1 at any state y is calculated from V i by maximizing a simple function (usually the sum) of the gain from a decision at time i − 1 and the function V i at the new state of the system if this decision is made. Since V i has already been calculated for the needed states, the above operation yields V i −1 for those states. Finally, V 1 at the initial state of the system is the value of the optimal solution. The optimal values of the decision variables can be recovered, one by one, by tracking back the calculations already performed.  Dynamic programming in bioinformatics  Dynamic programming is widely used in bioinformatics for the tasks such as sequence alignment , protein folding, RNA structure prediction and protein-DNA binding. First dynamic programming algorithms for protein-DNA binding were developed in the 1970s independently by Charles DeLisi in USA 3 and Georgii Gurskii and Alexander Zasedatelev in USSR. 4 Recently these algorithms have become very popular in bioinformatics and computational biology, particularly in the studies of nucleosome positioning and transcription factor binding.  Dynamic programming in computer programming  There are two key attributes that a problem must have in order for dynamic programming to be applicable: optimal substructure and overlapping subproblems . If a problem can be solved by combining optimal solutions to non-overlapping subproblems, the strategy is called " divide and conquer " instead. This is why mergesort and quicksort are not classified as dynamic programming problems.  Optimal substructure means that the solution to a given optimization problem can be obtained by the combination of optimal solutions to its subproblems. Consequently, the first step towards devising a dynamic programming solution is to check whether the problem exhibits such optimal substructure. Such optimal substructures are usually described by means of recursion . For example, given a graph G=(V,E) , the shortest path p from a vertex u to a vertex v exhibits optimal substructure: take any intermediate vertex w on this shortest path p . If p is truly the shortest path, then it can be split into subpaths p 1 from u to w and p 2 from w to v such that these, in turn, are indeed the shortest paths between the corresponding vertices (by the simple cut-and-paste argument described in Introduction to Algorithms ). Hence, one can easily formulate the solution for finding shortest paths in a recursive manner, which is what the Bellman–Ford algorithm or the Floyd–Warshall algorithm does.  Overlapping subproblems means that the space of subproblems must be small, that is, any recursive algorithm solving the problem should solve the same subproblems over and over, rather than generating new subproblems. For example, consider the recursive formulation for generating the Fibonacci series: F i = F i −1 + F i −2 , with base case F 1 = F 2 = 1. Then F 43 = F 42 + F 41 , and F 42 = F 41 + F 40 . Now F 41 is being solved in the recursive subtrees of both F 43 as well as F 42 . Even though the total number of subproblems is actually small (only 43 of them), we end up solving the same problems over and over if we adopt a naive recursive solution such as this. Dynamic programming takes account of this fact and solves each subproblem only once.  (Figure)  Figure 2. The subproblem graph for the Fibonacci sequence. The fact that it is not a tree indicates overlapping subproblems.   This can be achieved in either of two ways:   Top-down approach : This is the direct fall-out of the recursive formulation of any problem. If the solution to any problem can be formulated recursively using the solution to its subproblems, and if its subproblems are overlapping, then one can easily memoize or store the solutions to the subproblems in a table. Whenever we attempt to solve a new subproblem, we first check the table to see if it is already solved. If a solution has been recorded, we can use it directly, otherwise we solve the subproblem and add its solution to the table.    Bottom-up approach : Once we formulate the solution to a problem recursively as in terms of its subproblems, we can try reformulating the problem in a bottom-up fashion: try solving the subproblems first and use their solutions to build-on and arrive at solutions to bigger subproblems. This is also usually done in a tabular form by iteratively generating solutions to bigger and bigger subproblems by using the solutions to small subproblems. For example, if we already know the values of F 41 and F 40 , we can directly calculate the value of F 42 .   Some programming languages can automatically memoize the result of a function call with a particular set of arguments, in order to speed up call-by-name evaluation (this mechanism is referred to as call-by-need ). Some languages make it possible portably (e.g. Scheme , Common Lisp or Perl ). Some languages have automatic memoization built in, such as tabled Prolog and J , which supports memoization with the M. adverb. 5 In any case, this is only possible for a referentially transparent function.  Example: Economic optimization  Optimal consumption and saving  A mathematical optimization problem that is often used in teaching dynamic programming to economists (because it can be solved by hand 6 ) concerns a consumer who lives over the periods    t  =   0  ,  1  ,  2  ,  …  ,  T       t   0  1  2  normal-…  T     t=0,1,2,\ldots,T   and must decide how much to consume and how much to save in each period.  Let    c  t     subscript  c  t    c_{t}   be consumption in period   t   t   t   , and assume consumption yields utility      u   (   c  t   )    =   ln   (   c  t   )          u   subscript  c  t       subscript  c  t      u(c_{t})=\ln(c_{t})   as long as the consumer lives. Assume the consumer is impatient, so that he discounts future utility by a factor   b   b   b   each period, where   t   t   t   be capital in period     k  0   >  0       subscript  k  0   0    k_{0}>0   . Assume initial capital is a given amount     k   t  +  1    =    A   k  t  a    -   c  t         subscript  k    t  1        A   subscript   superscript  k  a   t     subscript  c  t      k_{t+1}=Ak^{a}_{t}-c_{t}   , and suppose that this period's capital and consumption determine next period's capital as   A   A   A   , where     k   t  +  1    =    A   k  t  a    -   c  t    ≥  0         subscript  k    t  1        A   subscript   superscript  k  a   t     subscript  c  t         0     k_{t+1}=Ak^{a}_{t}-c_{t}\geq 0   is a positive constant and    t  =   0  ,  1  ,  2  ,  …  ,  T       t   0  1  2  normal-…  T     t=0,1,2,\ldots,T   subject to     c  0   ,   c  1   ,   c  2   ,  …  ,   c  T       subscript  c  0    subscript  c  1    subscript  c  2   normal-…   subscript  c  T     c_{0},c_{1},c_{2},\ldots,c_{T}   for all    k  0     subscript  k  0    k_{0}     Written this way, the problem looks complicated, because it involves solving for all the choice variables     V  t    (  k  )        subscript  V  t   k    V_{t}(k)   . (Note that    t  =   0  ,  1  ,  2  ,  …  ,  T  ,   T  +  1        t   0  1  2  normal-…  T    T  1      t=0,1,2,\ldots,T,T+1   is not a choice variable—the consumer's initial capital is taken as given.)  The dynamic programming approach to solving this problem involves breaking it apart into a sequence of smaller decisions. To do so, we define a sequence of value functions    k   k   k   , for   t   t   t   which represent the value of having any amount of capital      V   T  +  1     (  k  )    =  0         subscript  V    T  1    k   0    V_{T+1}(k)=0   at each time    t  =   0  ,  1  ,  2  ,  …  ,  T       t   0  1  2  normal-…  T     t=0,1,2,\ldots,T   . Note that      V  t    (   k  t   )    =    max   (    ln   (   c  t   )    +   b   V   t  +  1     (   k   t  +  1    )     )    subject to   k   t  +  1     =    A   k  t  a    -   c  t    ≥  0           subscript  V  t    subscript  k  t             subscript  c  t      b   subscript  V    t  1     subscript  k    t  1       subject to   subscript  k    t  1              A   subscript   superscript  k  a   t     subscript  c  t         0     V_{t}(k_{t})\,=\,\max\left(\ln(c_{t})+bV_{t+1}(k_{t+1})\right)\text{ subject %
 to }k_{t+1}=Ak^{a}_{t}-c_{t}\geq 0   , that is, there is (by assumption) no utility from having capital after death.  The value of any quantity of capital at any previous time can be calculated by backward induction using the Bellman equation . In this problem, for each    c  t     subscript  c  t    c_{t}   , the Bellman equation is      k   t  +  1      subscript  k    t  1     k_{t+1}     This problem is much simpler than the one we wrote down before, because it involves only two decision variables,   t   t   t   and    k  t     subscript  k  t    k_{t}   . Intuitively, instead of choosing his whole lifetime plan at birth, the consumer can take things one step at a time. At time    c  t     subscript  c  t    c_{t}   , his current capital    k   t  +  1      subscript  k    t  1     k_{t+1}   is given, and he only needs to choose current consumption   k   k   k   and saving     V   T  +  1     (  k  )        subscript  V    T  1    k    V_{T+1}(k)   .  To actually solve this problem, we work backwards. For simplicity, the current level of capital is denoted as     V  T    (  k  )        subscript  V  T   k    V_{T}(k)   .     V  0    (  k  )        subscript  V  0   k    V_{0}(k)   is already known, so using the Bellman equation once we can calculate     V    T  -  j   +  1     (  k  )        subscript  V      T  j   1    k    V_{T-j+1}(k)   , and so on until we get to     V   T  -  j     (  k  )        subscript  V    T  j    k    V_{T-j}(k)   , which is the value of the initial decision problem for the whole lifetime. In other words, once we know     ln   (   c   T  -  j    )    +   b   V    T  -  j   +  1     (    A   k  a    -   c   T  -  j     )           subscript  c    T  j       b   subscript  V      T  j   1        A   superscript  k  a     subscript  c    T  j        \ln(c_{T-j})+bV_{T-j+1}(Ak^{a}-c_{T-j})   , we can calculate    c   T  -  j      subscript  c    T  j     c_{T-j}   , which is the maximum of      A   k  a    -   c   T  -  j     ≥  0          A   superscript  k  a     subscript  c    T  j     0    Ak^{a}-c_{T-j}\geq 0   , where    t  =   T  -  j       t    T  j     t=T-j   is the choice variable and      V   T  -  j     (  k  )    =    a    ∑   i  =  0   j     a  i    b  i    ln  k      +   v   T  -  j            subscript  V    T  j    k       a    superscript   subscript     i  0    j      superscript  a  i    superscript  b  i     k       subscript  v    T  j       V_{T-j}(k)\,=\,a\sum_{i=0}^{j}a^{i}b^{i}\ln k+v_{T-j}   .  Working backwards, it can be shown that the value function at time    v   T  -  j      subscript  v    T  j     v_{T-j}   is      t  =   T  -  j       t    T  j     t=T-j     where each      c   T  -  j     (  k  )    =    1    ∑   i  =  0   j     a  i    b  i      A   k  a           subscript  c    T  j    k       1    superscript   subscript     i  0    j      superscript  a  i    superscript  b  i      A   superscript  k  a      c_{T-j}(k)\,=\,\frac{1}{\sum_{i=0}^{j}a^{i}b^{i}}Ak^{a}   is a constant, and the optimal amount to consume at time      c  T    (  k  )    =   A   k  a           subscript  c  T   k     A   superscript  k  a      c_{T}(k)\,=\,Ak^{a}   is        c   T  -  1     (  k  )    =    A   k  a     1  +   a  b            subscript  c    T  1    k       A   superscript  k  a      1    a  b       c_{T-1}(k)\,=\,\frac{Ak^{a}}{1+ab}     which can be simplified to        c   T  -  2     (  k  )    =    A   k  a     1  +   a  b   +    a  2    b  2             subscript  c    T  2    k       A   superscript  k  a      1    a  b      superscript  a  2    superscript  b  2        c_{T-2}(k)\,=\,\frac{Ak^{a}}{1+ab+a^{2}b^{2}}           c  2    (  k  )    =    A   k  a     1  +   a  b   +    a  2    b  2    +  …  +    a   T  -  2     b   T  -  2              subscript  c  2   k       A   superscript  k  a      1    a  b      superscript  a  2    superscript  b  2    normal-…     superscript  a    T  2     superscript  b    T  2         c_{2}(k)\,=\,\frac{Ak^{a}}{1+ab+a^{2}b^{2}+\ldots+a^{T-2}b^{T-2}}           c  1    (  k  )    =    A   k  a     1  +   a  b   +    a  2    b  2    +  …  +    a   T  -  2     b   T  -  2     +    a   T  -  1     b   T  -  1              subscript  c  1   k       A   superscript  k  a      1    a  b      superscript  a  2    superscript  b  2    normal-…     superscript  a    T  2     superscript  b    T  2        superscript  a    T  1     superscript  b    T  1         c_{1}(k)\,=\,\frac{Ak^{a}}{1+ab+a^{2}b^{2}+\ldots+a^{T-2}b^{T-2}+a^{T-1}b^{T-1}}   ...        c  0    (  k  )    =    A   k  a     1  +   a  b   +    a  2    b  2    +  …  +    a   T  -  2     b   T  -  2     +    a   T  -  1     b   T  -  1     +    a  T    b  T             subscript  c  0   k       A   superscript  k  a      1    a  b      superscript  a  2    superscript  b  2    normal-…     superscript  a    T  2     superscript  b    T  2        superscript  a    T  1     superscript  b    T  1        superscript  a  T    superscript  b  T        c_{0}(k)\,=\,\frac{Ak^{a}}{1+ab+a^{2}b^{2}+\ldots+a^{T-2}b^{T-2}+a^{T-1}b^{T-1%
 }+a^{T}b^{T}}        T   T   T         Ω   (   n  2   )       normal-Ω   superscript  n  2     \Omega(n^{2})     We see that it is optimal to consume a larger fraction of current wealth as one gets older, finally consuming all remaining wealth in period    Ω   (  n  )       normal-Ω  n    \Omega(n)   , the last period of life.  Examples: Computer algorithms  Dijkstra's algorithm for the shortest path problem  From a dynamic programming point of view, Dijkstra's algorithm for the shortest path problem is a successive approximation scheme that solves the dynamic programming functional equation for the shortest path problem by the Reaching method. 7 8 9  In fact, Dijkstra's explanation of the logic behind the algorithm, 10 namely  is a paraphrasing of Bellman's famous Principle of Optimality in the context of the shortest path problem .  Fibonacci sequence  Here is a naïve implementation of a function finding the n th member of the Fibonacci sequence , based directly on the mathematical definition:   function fib(n)   if n fib(5) , we produce a call tree that calls the function on the same value many different times:   fib(5)  fib(4) + fib(3)  (fib(3) + fib(2)) + (fib(2) + fib(1))  ((fib(2) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))  (((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))   In particular, fib(2) was calculated three times from scratch. In larger examples, many more values of fib , or subproblems , are recalculated, leading to an exponential time algorithm.  Now, suppose we have a simple map object, m , which maps each value of fib that has already been calculated to its result, and we modify our function to use it and update it. The resulting function requires only O ( n ) time instead of exponential time (but requires O ( n ) space):   var m := map (0 → 0, 1 → 1)   function fib(n)   if  key n is  not  in  map m  m[n] := fib(n − 1) + fib(n − 2)   return m[n]  This technique of saving values that have already been calculated is called memoization ; this is the top-down approach, since we first break the problem into subproblems and then calculate and store values.  In the bottom-up approach, we calculate the smaller values of fib first, then build larger values from them. This method also uses O( n ) time since it contains a loop that repeats n − 1 times, but it only takes constant (O(1)) space, in contrast to the top-down approach which requires O( n ) space to store the map.   function fib(n)   if n = 0   return 0   else   var previousFib := 0, currentFib := 1   repeat n − 1 times  //  loop  is  skipped  if  n  =  1   var newFib := previousFib + currentFib  previousFib := currentFib  currentFib  := newFib   return currentFib  In both examples, we only calculate fib(2) one time, and then use it to calculate both fib(4) and fib(3) , instead of computing it every time either of them is evaluated.  Note that the above method actually takes    Ω   (  n  )       normal-Ω  n    \Omega(n)   time for large n because addition of two integers with    Ω   (  n  )       normal-Ω  n    \Omega(n)   bits each takes   n   n   n   time. (The n th fibonacci number has    O   (   n    (   log  n   )   2    )       O    n   superscript    n   2      O(n(\log n)^{2})   bits.) Also, there is a closed form for the Fibonacci sequence, known as Binet's formula , from which the    O   (   n   log  n    )       O    n    n      O(n\log n)   -th term can be computed in approximately   n   n   n   time, which is more efficient than the above dynamic programming technique. However, the simple recurrence directly gives the matrix form that leads to an approximately      [     0    1    0    1      1    0    1    0      0    1    0    1      1    0    1    0     ]   and   [     0    0    1    1      0    0    1    1      1    1    0    0      1    1    0    0     ]   and   [     1    1    0    0      0    0    1    1      1    1    0    0      0    0    1    1     ]   and   [     1    0    0    1      0    1    1    0      0    1    1    0      1    0    0    1     ]    .        0  1  0  1    1  0  1  0    0  1  0  1    1  0  1  0    and    0  0  1  1    0  0  1  1    1  1  0  0    1  1  0  0    and    1  1  0  0    0  0  1  1    1  1  0  0    0  0  1  1    and    1  0  0  1    0  1  1  0    0  1  1  0    1  0  0  1      \begin{bmatrix}0&1&0&1\\
 1&0&1&0\\
 0&1&0&1\\
 1&0&1&0\end{bmatrix}\text{ and }\begin{bmatrix}0&0&1&1\\
 0&0&1&1\\
 1&1&0&0\\
 1&1&0&0\end{bmatrix}\text{ and }\begin{bmatrix}1&1&0&0\\
 0&0&1&1\\
 1&1&0&0\\
 0&0&1&1\end{bmatrix}\text{ and }\begin{bmatrix}1&0&0&1\\
 0&1&1&0\\
 0&1&1&0\\
 1&0&0&1\end{bmatrix}.   algorithm by fast matrix exponentiation.  A type of balanced 0–1 matrix  Consider the problem of assigning values, either zero or one, to the positions of an matrix, with even, so that each row and each column contains exactly zeros and ones. We ask how many different assignments there are for a given     (      n       n  /  2       )   n     superscript   binomial  n    n  2    n    {\textstyle\left({{n}\atop{n/2}}\right)}^{n}   . For example, when 4}} , four possible solutions are      n  =  6      n  6    n=6     There are at least three possible approaches: brute force , backtracking , and dynamic programming.  Brute force consists of checking all assignments of zeros and ones and counting those that have balanced rows and columns ( zeros and ones). As there are   k   k   k   possible assignments, this strategy is not practical except maybe up to    n  /  2      n  2    n/2   .  Backtracking for this problem consists of choosing some order of the matrix elements and recursively placing ones or zeros, while checking that in every row and column the number of elements that have not been assigned plus the number of ones or zeros are both at least . While more sophisticated than brute force, this approach will visit every solution once, making it impractical for larger than six, since the number of solutions is already 116,963,796,250 for = 10, as we shall see.  Dynamic programming makes it possible to count the number of solutions without visiting them all. Imagine backtracking values for the first row – what information would we require about the remaining rows, in order to be able to accurately count the solutions obtained for each first row value? We consider boards, where , whose    n  /  2      n  2    n/2   rows contain    f   (   (   n  /  2   ,   n  /  2   )   ,   (   n  /  2   ,   n  /  2   )   ,   …   (   n  /  2   ,   n  /  2   )    )       f      n  2     n  2       n  2     n  2      normal-…     n  2     n  2        f((n/2,n/2),(n/2,n/2),\ldots(n/2,n/2))   zeros and   n   n   n   ones. The function f to which memoization is applied maps vectors of n pairs of integers to the number of admissible boards (solutions). There is one pair for each column, and its two components indicate respectively the number of zeros and ones that have yet to be placed in that column. We seek the value of   n   n   n   (    (      n       n  /  2       )     binomial  n    n  2     {\textstyle\left({{n}\atop{n/2}}\right)}   arguments or one vector of    (  0  ,  1  )     0  1    (0,1)   elements). The process of subproblem creation involves iterating over every one of    (  1  ,  0  )     1  0    (1,0)   possible assignments for the top row of the board, and going through every column, subtracting one from the appropriate element of the pair for that column, depending on whether the assignment for the top row contained a zero or a one at that position. If any one of the results is negative, then the assignment is invalid and does not contribute to the set of solutions (recursion stops). Otherwise, we have an assignment for the top row of the board and recursively compute the number of solutions to the remaining board, adding the numbers of solutions for every admissible assignment of the top row and returning the sum, which is being memoized. The base case is the trivial subproblem, which occurs for a board. The number of solutions for this board is either zero or one, depending on whether the vector is a permutation of     1  ,  2  ,  90  ,  297200  ,  116963796250  ,  6736218287430460752  ,  …     1  2  90  297200  116963796250  6736218287430460752  normal-…    1,\,2,\,90,\,297200,\,116963796250,\,6736218287430460752,\ldots   and      q   (  A  )    =    min   (   q   (  B  )    ,   q   (  C  )    ,   q   (  D  )    )    +   c   (  A  )           q  A         q  B     q  C     q  D      c  A      q(A)=\min(q(B),q(C),q(D))+c(A)\,   pairs or not.  For example, in the first two boards shown above the sequences of vectors would be  ((2, 2) (2, 2) (2, 2) (2, 2))       ((2, 2) (2, 2) (2, 2) (2, 2))     k = 4
   0      1      0      1              0      0      1      1
 
 ((1, 2) (2, 1) (1, 2) (2, 1))       ((1, 2) (1, 2) (2, 1) (2, 1))     k = 3
   1      0      1      0              0      0      1      1
 
 ((1, 1) (1, 1) (1, 1) (1, 1))       ((0, 2) (0, 2) (2, 0) (2, 0))     k = 2
   0      1      0      1              1      1      0      0
 
 ((0, 1) (1, 0) (0, 1) (1, 0))       ((0, 1) (0, 1) (1, 0) (1, 0))     k = 1
   1      0      1      0              1      1      0      0
 
 ((0, 0) (0, 0) (0, 0) (0, 0))       ((0, 0) (0, 0), (0, 0) (0, 0))  The number of solutions  is       q   (  i  ,  j  )    =   {     ∞     j   <   1  or  j   >   n        c   (  i  ,  j  )       i  =  1         min   (   q   (   i  -  1   ,   j  -  1   )    ,   q   (   i  -  1   ,  j  )    ,   q   (   i  -  1   ,   j  +  1   )    )    +   c   (  i  ,  j  )       otherwise.            q   i  j     cases     j   expectation    1  or  j    n     c   i  j      i  1         q     i  1     j  1       q     i  1   j      q     i  1     j  1        c   i  j     otherwise.     q(i,j)=\begin{cases}\infty&j<1\text{ or }j>n\\
 c(i,j)&i=1\\
 \min(q(i-1,j-1),q(i-1,j),q(i-1,j+1))+c(i,j)&\text{otherwise.}\end{cases}     Links to the MAPLE implementation of the dynamic programming approach may be found among the external links .  Checkerboard  Consider a checkerboard with n × n squares and a cost-function c ( i , j ) which returns a cost associated with square i , j ( i being the row, j being the column). For instance (on a 5 × 5 checkerboard),      5   6   7   4   7   8       4   7   6   1   1   4     3   3   5   7   8   2     2   –   6   7   0   –     1   –   –   *5*   –   –      1   2   3   4   5     Thus c (1, 3) = 5  Let us say you had a checker that could start at any square on the first rank (i.e., row) and you wanted to know the shortest path (sum of the costs of the visited squares are at a minimum) to get to the last rank, assuming the checker could move only diagonally left forward, diagonally right forward, or straight forward. That is, a checker on (1,3) can move to (2,2), (2,3) or (2,4).      5            4          3          2    x   x   x      1     o        1   2   3   4   5     This problem exhibits optimal substructure . That is, the solution to the entire problem relies on solutions to subproblems. Let us define a function q ( i , j ) as   q ( i , j ) = the minimum cost to reach square ( i , j ).   If we can find the values of this function for all the squares at rank n , we pick the minimum and follow that path backwards to get the shortest path.  Note that q ( i , j ) is equal to the minimum cost to get to any of the three squares below it (since those are the only squares that can reach it) plus c ( i , j ). For instance:      5            4     A       3    B   C   D      2          1           1   2   3   4   5         O   (   n   k  2    )       O    n   superscript  k  2      O(nk^{2})     Now, let us define q ( i , j ) in somewhat more general terms:      O   (   n  k   log  k    )       O    n  k    k      O(nk\log k)     The first line of this equation is there to make the recursive property simpler (when dealing with the edges, so we need only one recursion). The second line says what happens in the last rank, to provide a base case. The third line, the recursion, is the important part. It is similar to the A,B,C,D example. From this definition we can make a straightforward recursive code for q ( i , j ). In the following pseudocode, n is the size of the board, c(i, j) is the cost-function, and min() returns the minimum of a number of values:  function minCost(i, j)   if j n   return infinity   else  if i = 1   return c(i, j)   else   return  min ( minCost(i-1, j-1), minCost(i-1, j), minCost(i-1, j+1) ) + c(i, j)  It should be noted that this function only computes the path-cost, not the actual path. We will get to the path soon. This, like the Fibonacci-numbers example, is horribly slow since it wastes time recomputing the same shortest paths over and over. However, we can compute it much faster in a bottom-up fashion if we store path-costs in a two-dimensional array q[i, j] rather than using a function. This avoids recomputation; before computing the cost of a path, we check the array q[i, j] to see if the path cost is already there.  We also need to know what the actual shortest path is. To do this, we use another array p[i, j] , a predecessor array . This array implicitly stores the path to any square s by storing the previous node on the shortest path to s , i.e. the predecessor. To reconstruct the path, we lookup the predecessor of s , then the predecessor of that square, then the predecessor of that square, and so on, until we reach the starting square. Consider the following code:   function computeShortestPathArrays()   for x from 1 to n  q[1, x] := c(1, x)   for y from 1 to n  q[y, 0]     := infinity  q[y, n + 1] := infinity   for y from 2 to n   for x from 1 to n  m := min(q[y-1, x-1], q[y-1, x], q[y-1, x+1])  q[y, x] := m + c(y, x)   if m = q[y-1, x-1]  p[y, x] := -1   else  if m = q[y-1, x]  p[y, x] :=  0   else  p[y, x] :=  1  Now the rest is a simple matter of finding the minimum and printing it.   function computeShortestPath()  computeShortestPathArrays()  minIndex := 1  min := q[n, 1]   for i from 2 to n   if q[n, i] Typically, the problem consists of transforming one sequence into another using edit operations that replace, insert, or remove an element.  Each operation has an associated cost, and the goal is to find the sequence  of  edits  with  the  lowest  total  cost .  The problem can be stated naturally as a recursion, a sequence A is optimally edited into a sequence B by either:   inserting the first character of B, and performing an optimal alignment of A and the tail of B  deleting the first character of A, and performing the optimal alignment of the tail of A and B  replacing the first character of A with the first character of B, and performing optimal alignments of the tails of A and B.   The partial alignments can be tabulated in a matrix, where cell (i,j) contains the cost of the optimal alignment of A[1..i] to B[1..j]. The cost in cell (i,j) can be calculated by adding the cost of the relevant operations to the cost of its neighboring cells, and selecting the optimum.  Different variants exist, see Smith–Waterman algorithm and Needleman–Wunsch algorithm .  Tower of Hanoi puzzle  The Tower of Hanoi or Towers of Hanoi is a mathematical game or puzzle . It consists of three rods, and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks in a neat stack in ascending order of size on one rod, the smallest at the top, thus making a conical shape.  The objective of the puzzle is to move the entire stack to another rod, obeying the following rules:   Only one disk may be moved at a time.  Each move consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of the other disks that may already be present on that rod.  No disk may be placed on top of a smaller disk.   The dynamic programming solution consists of solving the functional equation   S(n,h,t) = S(n-1,h, not(h,t)) ; S(1,h,t) ; S(n-1,not(h,t),t)   where n denotes the number of disks to be moved, h denotes the home rod, t denotes the target rod, not(h,t) denotes the third rod (neither h nor t), ";" denotes concatenation, and   S(n, h, t) := solution to a problem consisting of n disks that are to be moved from rod h to rod t.   Note that for n=1 the problem is trivial, namely S(1,h,t) = "move a disk from rod h to rod t" (there is only one disk left).  The number of moves required by this solution is 2 n − 1. If the objective is to maximize the number of moves (without cycling) then the dynamic programming functional equation is slightly more complicated and 3 n − 1 moves are required. 11  Egg dropping puzzle  The following is a description of the instance of this famous puzzle involving n=2 eggs and a building with H=36 floors: 12   Suppose that we wish to know which stories in a 36-story building are safe to drop eggs from, and which will cause the eggs to break on landing (using U.S. English terminology, in which the first floor is at ground level). We make a few assumptions:  An egg that survives a fall can be used again.  A broken egg must be discarded.  The effect of a fall is the same for all eggs.  If an egg breaks when dropped, then it would break if dropped from a higher window.  If an egg survives a fall, then it would survive a shorter fall.  It is not ruled out that the first-floor windows break eggs, nor is it ruled out that eggs can survive the 36th-floor windows.      If only one egg is available and we wish to be sure of obtaining the right result, the experiment can be carried out in only one way. Drop the egg from the first-floor window; if it survives, drop it from the second-floor window. Continue upward until it breaks. In the worst case, this method may require 36 droppings. Suppose 2 eggs are available. What is the least number of egg-droppings that is guaranteed to work in all cases?   To derive a dynamic programming functional equation for this puzzle, let the state of the dynamic programming model be a pair s = (n,k), where   n = number of test eggs available, n = 0, 1, 2, 3, ..., N − 1.  k = number of (consecutive) floors yet to be tested, k = 0, 1, 2, ..., H − 1.   For instance, s = (2,6) indicates that two test eggs are available and 6 (consecutive) floors are yet to be tested. The initial state of the process is s = ( N , H ) where N denotes the number of test eggs available at the commencement of the experiment. The process terminates either when there are no more test eggs ( n = 0) or when k = 0, whichever occurs first. If termination occurs at state s = (0, k ) and k > 0, then the test failed.  Now, let   W ( n , k ) = minimum number of trials required to identify the value of the critical floor under the worst-case scenario given that the process is in state s = ( n , k ).   Then it can be shown that 13   W ( n , k ) = 1 + min{max( W ( n − 1, x − 1), W ( n , k − x )): x = 1, 2, ..., k }   with W ( n ,1) = 1 for all n > 0 and W (1, k ) = k for all k . It is easy to solve this equation iteratively by systematically increasing the values of n and k .  An interactive online facility is available for experimentation with this model as well as with other versions of this puzzle (e.g. when the objective is to minimize the expected value of the number of trials.) 14  Faster DP solution using a different parametrization  Notice that the above solution takes   x   x   x   time with a DP solution. This can be improved to    W   (   n  -  1   ,   x  -  1   )       W     n  1     x  1      W(n-1,x-1)   time by binary searching on the optimal   x   x   x   in the above recurrence, since    W   (  n  ,   k  -  x   )       W   n    k  x      W(n,k-x)   is increasing in   x   x   x   while    max   (   W   (   n  -  1   ,   x  -  1   )    ,   W   (  n  ,   k  -  x   )    )         W     n  1     x  1       W   n    k  x       \max(W(n-1,x-1),W(n,k-x))   is decreasing in   x   x   x   , thus a local minimum of   x   x   x   is a global minimum. Also, by storing the optimal    O   (   n  k   )       O    n  k     O(nk)   for each cell in the DP table and referring to its value for the previous cell, the optimal   k   k   k   for each cell can be found in constant time, improving it to   k   k   k   time. However, there is an even faster solution that involves a different parametrization of the problem:  Let    k  =  37      k  37    k=37   be the total number of floors such that the eggs break when dropped from the   m   m   m   th floor (The example above is equivalent to taking    f   (  t  ,  n  )       f   t  n     f(t,n)   ).  Let   m   m   m   be the minimum floor from which the egg must be dropped to be broken.  Let   t   t   t   be the maximum number of values of   n   n   n   that are distinguishable using     f   (  t  ,  0  )    =   f   (  0  ,  n  )    =  1          f   t  0      f   0  n         1     f(t,0)=f(0,n)=1   tries and     t  ,  n   ≥  0       t  n   0    t,n\geq 0   eggs.  Then   a   a   a   for all   m   m   m   .  Let   1   1   1   be the floor from which the first egg is dropped in the optimal strategy.  If the first egg broke,   a   a   a   is from    t  -  1      t  1    t-1   to    n  -  1      n  1    n-1   and distinguishable using at most   m   m   m   tries and    a  +  1      a  1    a+1   eggs.  If the first egg did not break,   k   k   k   is from    t  -  1      t  1    t-1   to   n   n   n   and distinguishable using     f   (  t  ,  n  )    =    f   (   t  -  1   ,   n  -  1   )    +   f   (   t  -  1   ,  n  )           f   t  n        f     t  1     n  1       f     t  1   n       f(t,n)=f(t-1,n-1)+f(t-1,n)   tries and   x   x   x   eggs.  Therefore,     f   (  x  ,  n  )    ≥  k        f   x  n    k    f(x,n)\geq k   .  Then the problem is equivalent to finding the minimum    {   f   (  t  ,  i  )    :   0  ≤  i  ≤  n   }     conditional-set    f   t  i        0  i       n      \{f(t,i):0\leq i\leq n\}   such that   t   t   t   .  To do so, we could compute    O   (   n  x   )       O    n  x     O(nx)   in order of increasing    n  =  1      n  1    n=1   , which would take    O   (   n   k    )       O    n    k      O(n\sqrt{k})   time.  Thus, if we separately handle the case of     f   (  t  ,  n  )    =    ∑   i  =  0   n    (      t      i      )          f   t  n      superscript   subscript     i  0    n    binomial  t  i      f(t,n)=\sum_{i=0}^{n}{{\left({{t}\atop{i}}\right)}}   , the algorithm would take    O   (  n  )       O  n    O(n)   time.  But the recurrence relation can in fact be solved, giving     (      t       i  +  1       )   =    (      t      i      )     t  -  i    i  +  1          binomial  t    i  1       binomial  t  i       t  i     i  1       {\left({{t}\atop{i+1}}\right)}={\left({{t}\atop{i}}\right)}\frac{t-i}{i+1}   , which can be computed in    i  ≥  0      i  0    i\geq 0   time using the identity     f   (  t  ,  n  )    ≤   f   (   t  +  1   ,  n  )          f   t  n      f     t  1   n      f(t,n)\leq f(t+1,n)   for all    t  ≥  0      t  0    t\geq 0   .  Since   t   t   t   for all   x   x   x   , we can binary search on    O   (   n   log  k    )       O    n    k      O(n\log k)   to find     s  i  i   ,  j       s  i  i   j    sii,j   , giving an      m  1   ,  33   =  1000         m  1   33   1000    m1,33=1000   algorithm. 15  Matrix chain multiplication  Matrix chain multiplication is a well known example that demonstrates utility of dynamic programming. For example, engineering applications often have to multiply a chain of matrices. It is not surprising to find matrices of large dimensions, for example 100×100. Therefore, our task is to multiply matrices A1, A2, .... An. As we know from basic linear algebra, matrix multiplication is not commutative, but is associative; and we can multiply only two matrices at a time. So, we can multiply this chain of matrices in many different ways, for example:   ((A 1 × A 2 ) × A 3 ) × ... A n     A 1 ×(((A 2 ×A 3 )× ... ) × A n )    (A 1 × A 2 ) × (A 3 × ... A n )   and so on. There are numerous ways to multiply this chain of matrices. They will all produce the same final result, however they will take more or less time to compute, based on which particular matrices are multiplied. If matrix A has dimensions m×n and matrix B has dimensions n×q, then matrix C=A×B will have dimensions m×q, and will require m*n*q scalar multiplications (using a simplistic matrix multiplication algorithm for purposes of illustration).  For example, let us multiply matrices A, B and C. Let us assume that their dimensions are m×n, n×p, and p×s, respectively. Matrix A×B×C will be of size m×s and can be calculated in two ways shown below:   Ax(B×C) This order of matrix multiplication will require nps + mns scalar multiplications.  (A×B)×C This order of matrix multiplication will require mnp + mps scalar calculations.   Let us assume that m = 10, n = 100, p = 10 and s = 1000. So, the first way to multiply the chain will require 1,000,000 + 1,000,000 calculations. The second way will require only 10,000+100,000 calculations. Obviously, the second way is faster, and we should multiply the matrices using that arrangement of parenthesis.  Therefore, our conclusion is that the order of parenthesis matters, and that our task is to find the optimal order of parenthesis.  At this point, we have several choices, one of which is to design a dynamic programming algorithm that will split the problem into overlapping problems and calculate the optimal arrangement of parenthesis. The dynamic programming solution is presented below.  Let's call m[i,j] the minimum number of scalar multiplications needed to multiply a chain of matrices from matrix i to matrix j (i.e. A i × .... × A j , i.e. i$m i i , j$, the minimum number of calculations to multiply a chain from matrix i to matrix j , and we have recorded the corresponding "split point"      s  1   ,  33   =  22         s  1   33   22    s1,33=22   . For example, if we are multiplying chain A 1 ×A 2 ×A 3 ×A 4 , and it turns out that $ m 1, 3 3 = 100 0$ and $ s 1, 3 3 = 2 2$ , that means that the optimal placement of parenthesis for matrices 1 to 3 is (A1×A2)×A3 and to multiply those matrices will require 100 scalar calculation.  This algorithm will produce "tables" m [, ] and s [, ] that will have entries for all possible values of i and j. The final solution for the entire chain is m[1, n], with corresponding split at s[1, n]. Unraveling the solution will be recursive, starting from the top and continuing until we reach the base case, i.e. multiplication of single matrices.  Therefore, the next step is to actually split the chain, i.e. to place the parenthesis where they (optimally) belong. For this purpose we could use the following algorithm:   function PrintOptimalParenthesis(s, i, j)   if i = j  print "A"i   else  print "("  PrintOptimalParenthesis(s, i, s[i, j])  PrintOptimalParenthesis(s, s[i, j] + 1, j) ")"    Of course, this algorithm is not useful for actual multiplication. This algorithm is just a user-friendly way to see what the result looks like.  To actually multiply the matrices using the proper splits, we need the following algorithm:   function  MatrixChainMultiply (chain from  1 to n) // returns the final matrix, i.e. A1×A2×... ×An  OptimalMatrixChainParenthesis (chain from  1 to n) // this will produce s[ . ] and m[ . ] "tables"  OptimalMatrixMultiplication (s , chain from  1 to n) // actually multiply  function  OptimalMatrixMultiplication (s , i , j) // returns the result of multiplying a chain of matrices from Ai to Aj in optimal way  if i < j // keep on splitting the chain and multiplying the matrices in left and right sides LeftSide =  OptimalMatrixMultiplication (s , i , s[i , j])  
          RightSide =  OptimalMatrixMultiplication (s , s[i , j] +  1 , j) return  MatrixMultiply (LeftSide , RightSide) else  if i = j return Ai // matrix at position i  else print "error, i <= j must hold"  function  MatrixMultiply (A , B) // function that multiplies two matrices  if  columns (A) =  rows (B) for i =  1 ,  rows (A) for j =  1 ,  columns (B)
                C[i , j] =  0  for k =  1 ,  columns (A)
                    C[i , j] = C[i , j] + A[i , k] * B[k , j] return C else print "error, incompatible dimensions."  History  The term dynamic programming was originally used in the 1940s by Richard Bellman to describe the process of solving problems where one needs to find the best decisions one after another. By 1953, he refined this to the modern meaning, referring specifically to nesting smaller decision problems inside larger decisions, 16 and the field was thereafter recognized by the IEEE as a systems analysis and engineering topic. Bellman's contribution is remembered in the name of the Bellman equation , a central result of dynamic programming which restates an optimization problem in recursive form.  Bellman explains the reasoning behind the term dynamic programming in his autobiography, Eye of the Hurricane: An Autobiography (1984). He explains:   "I spent the Fall quarter (of 1950) at RAND. My first task was to find a name for multistage decision processes. An interesting question is, Where did the name, dynamic programming, come from? The 1950s were not good years for mathematical research. We had a very interesting gentleman in Washington named Wilson . He was Secretary of Defense, and he actually had a pathological fear and hatred of the word research. I’m not using the term lightly; I’m using it precisely. His face would suffuse, he would turn red, and he would get violent if people used the term research in his presence. You can imagine how he felt, then, about the term mathematical. The RAND Corporation was employed by the Air Force, and the Air Force had Wilson as its boss, essentially. Hence, I felt I had to do something to shield Wilson and the Air Force from the fact that I was really doing mathematics inside the RAND Corporation. What title, what name, could I choose? In the first place I was interested in planning, in decision making, in thinking. But planning, is not a good word for various reasons. I decided therefore to use the word “programming”. I wanted to get across the idea that this was dynamic, this was multistage, this was time-varying. I thought, let's kill two birds with one stone. Let's take a word that has an absolutely precise meaning, namely dynamic, in the classical physical sense. It also has a very interesting property as an adjective, and that it's impossible to use the word dynamic in a pejorative sense. Try thinking of some combination that will possibly give it a pejorative meaning. It's impossible. Thus, I thought dynamic programming was a good name. It was something not even a Congressman could object to. So I used it as an umbrella for my activities."   The word dynamic was chosen by Bellman to capture the time-varying aspect of the problems, and because it sounded impressive. 17 The word programming referred to the use of the method to find an optimal program , in the sense of a military schedule for training or logistics. This usage is the same as that in the phrases linear programming and mathematical programming , a synonym for mathematical optimization . 18  Algorithms that use dynamic programming   Recurrent solutions to lattice models for protein-DNA binding  Backward induction as a solution method for finite-horizon discrete-time dynamic optimization problems  Method of undetermined coefficients can be used to solve the Bellman equation in infinite-horizon, discrete-time, discounted , time-invariant dynamic optimization problems  Many string algorithms including longest common subsequence , longest increasing subsequence , longest common substring , Levenshtein distance (edit distance)  Many algorithmic problems on graphs can be solved efficiently for graphs of bounded treewidth or bounded clique-width by using dynamic programming on a tree decomposition of the graph.  The Cocke–Younger–Kasami (CYK) algorithm which determines whether and how a given string can be generated by a given context-free grammar  Knuth's word wrapping algorithm that minimizes raggedness when word wrapping text  The use of transposition tables and refutation tables in computer chess  The Viterbi algorithm (used for hidden Markov models )  The Earley algorithm (a type of chart parser )  The Needleman–Wunsch and other algorithms used in bioinformatics , including sequence alignment , structural alignment , RNA structure prediction  Floyd's all-pairs shortest path algorithm  Optimizing the order for chain matrix multiplication  Pseudo-polynomial time algorithms for the subset sum and knapsack and partition problems  The dynamic time warping algorithm for computing the global distance between two time series  The Selinger (a.k.a. System R ) algorithm for relational database query optimization  De Boor algorithm for evaluating B-spline curves  Duckworth–Lewis method for resolving the problem when games of cricket are interrupted  The value iteration method for solving Markov decision processes  Some graphic image edge following selection methods such as the "magnet" selection tool in Photoshop  Some methods for solving interval scheduling problems  Some methods for solving the travelling salesman problem , either exactly (in exponential time ) or approximately (e.g. via the bitonic tour )  Recursive least squares method  Beat tracking in music information retrieval  Adaptive-critic training strategy for artificial neural networks  Stereo algorithms for solving the correspondence problem used in stereo vision  Seam carving (content aware image resizing)  The Bellman–Ford algorithm for finding the shortest distance in a graph  Some approximate solution methods for the linear search problem  Kadane's algorithm for the maximum subarray problem   See also   Convexity in economics  Greedy algorithm  Non-convexity (economics)  Stochastic programming   References  Further reading    . An accessible introduction to dynamic programming in economics. The link contains sample programs.   . Includes an extensive bibliography of the literature in the area, up to the year 1954.   . Dover paperback edition (2003), ISBN 0-486-42809-5.   . In two volumes.   . Especially pp. 323–69.   .   .   .  S. S. Sritharan (1991), "Dynamic Programming of the Navier-Stokes Equations", Systems and Control Letters , 16(4), 299–307.   .   External links   An Introduction to Dynamic Programming  Dynamic Optimization Online Course  Dyna , a declarative programming language for dynamic programming algorithms  Wagner, David B., 1995, " Dynamic Programming. " An introductory article on dynamic programming in Mathematica .  Ohio State University: CIS 680: class notes on dynamic programming , by Eitan M. Gurari  A Tutorial on Dynamic programming  MIT course on algorithms – Includes a video lecture on DP along with lecture notes  More DP Notes  King, Ian, 2002 (1987), " A Simple Introduction to Dynamic Programming in Macroeconomic Models. " An introduction to dynamic programming as an important tool in economic theory.  [ http://www.topcoder.com/tc?module=Static&d1; ;=tutorials&d2;=dynProg Dynamic Programming: from novice to advanced] A TopCoder.com article by Dumitru on Dynamic Programming  Algebraic Dynamic Programming – a formalized framework for dynamic programming, including an entry-level course to DP, University of Bielefeld  Dreyfus, Stuart, " Richard Bellman on the birth of Dynamic Programming. "  Dynamic programming tutorial  A Gentle Introduction to Dynamic Programming and the Viterbi Algorithm  Tabled Prolog BProlog and XSB  Online interactive dynamic programming modules including, shortest path, traveling salesman, knapsack, false coin, egg dropping, bridge and torch, replacement, chained matrix products, and critical path problem.   "    Category:Mathematical optimization  Category:Optimization algorithms and methods  Category:Equations  Category:Systems engineering  Category:Optimal control  Category:Operations research     S. Dasgupta, C.H. Papadimitriou, and U.V. Vazirani, 'Algorithms ', p 173, available at http://www.cs.berkeley.edu/~vazirani/algorithms.html ↩  Cormen, T. H.; Leiserson, C. E.; Rivest, R. L.; Stein, C. (2001), Introduction to Algorithms (2nd ed.), MIT Press & McGraw–Hill, ISBN 0-262-03293-7 . pp. 327–8. ↩  DeLisi, Biopolymers, 1974, Volume 13, Issue 7, pages 1511–1512, July 1974 ↩  Gurskiĭ GV, Zasedatelev AS, Biofizika, 1978 Sep-Oct;23(5):932-46 ↩  ↩  Stokey et al., 1989, Chap. 1 ↩   Online version of the paper with interactive computational modules. ↩  ↩  ↩  ↩  ↩  Konhauser J.D.E., Velleman, D., and Wagon, S. (1996). Which way did the Bicycle Go? Dolciani Mathematical Expositions – No 18. The Mathematical Association of America . ↩  Sniedovich, M. (2003). The joy of egg-dropping in Braunschweig and Hong Kong . INFORMS Transactions on Education, 4(1) 48–64. ↩   ↩  http://www.wu-wien.ac.at/usr/h99c/h9951826/bellman_dynprog.pdf ↩  Eddy, S. R., What is dynamic programming?, Nature Biotechnology, 22, 909–910 (2004). ↩  Nocedal, J.; Wright, S. J.: Numerical Optimization, page 9, Springer, 2006.. ↩    