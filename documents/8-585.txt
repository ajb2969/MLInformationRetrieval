   Jacobi rotation      Jacobi rotation   In numerical linear algebra , a Jacobi rotation is a rotation , Q k ℓ , of a 2-dimensional linear subspace of an n- dimensional inner product space , chosen to zero a symmetric pair of off- diagonal entries of an n × n  real  symmetric matrix , A , when applied as a similarity transformation :       A  ↦    Q   k  ℓ   T   A   Q   k  ℓ     =   A  ′    .       maps-to  A     superscript   subscript  Q    k  normal-ℓ    T   A   subscript  Q    k  normal-ℓ           superscript  A  normal-′      A\mapsto Q_{k\ell}^{T}AQ_{k\ell}=A^{\prime}.\,\!           [     *          ⋯          *         ⋱                            a   k  k      ⋯     a   k  ℓ              ⋮       ⋮    ⋱    ⋮       ⋮             a   ℓ  k      ⋯     a   ℓ  ℓ                             ⋱         *          ⋯          *     ]   →   [     *          ⋯          *         ⋱                            a   k  k   ′     ⋯    0            ⋮       ⋮    ⋱    ⋮       ⋮            0    ⋯     a   ℓ  ℓ   ′                            ⋱         *          ⋯          *     ]    .     normal-→     absent  absent  normal-⋯  absent  absent     absent  normal-⋱  absent  absent  absent  absent  absent    absent  absent   subscript  a    k  k    normal-⋯   subscript  a    k  normal-ℓ    absent  absent    normal-⋮  absent  normal-⋮  normal-⋱  normal-⋮  absent  normal-⋮    absent  absent   subscript  a    normal-ℓ  k    normal-⋯   subscript  a    normal-ℓ  normal-ℓ    absent  absent    absent  absent  absent  absent  absent  normal-⋱  absent     absent  absent  normal-⋯  absent  absent        absent  absent  normal-⋯  absent  absent     absent  normal-⋱  absent  absent  absent  absent  absent    absent  absent   subscript   superscript  a  normal-′     k  k    normal-⋯  0  absent  absent    normal-⋮  absent  normal-⋮  normal-⋱  normal-⋮  absent  normal-⋮    absent  absent  0  normal-⋯   subscript   superscript  a  normal-′     normal-ℓ  normal-ℓ    absent  absent    absent  absent  absent  absent  absent  normal-⋱  absent     absent  absent  normal-⋯  absent  absent       \begin{bmatrix}{*}&&&\cdots&&&*\\
 &\ddots&&&&&\\
 &&a_{kk}&\cdots&a_{k\ell}&&\\
 \vdots&&\vdots&\ddots&\vdots&&\vdots\\
 &&a_{\ell k}&\cdots&a_{\ell\ell}&&\\
 &&&&&\ddots&\\
 {*}&&&\cdots&&&*\end{bmatrix}\to\begin{bmatrix}{*}&&&\cdots&&&*\\
 &\ddots&&&&&\\
 &&a^{\prime}_{kk}&\cdots&0&&\\
 \vdots&&\vdots&\ddots&\vdots&&\vdots\\
 &&0&\cdots&a^{\prime}_{\ell\ell}&&\\
 &&&&&\ddots&\\
 {*}&&&\cdots&&&*\end{bmatrix}.     It is the core operation in the Jacobi eigenvalue algorithm , which is numerically stable and well-suited to implementation on parallel processors .  Only rows k and ℓ and columns k and ℓ of A will be affected, and that A ′ will remain symmetric. Also, an explicit matrix for Q k ℓ is rarely computed; instead, auxiliary values are computed and A is updated in an efficient and numerically stable way. However, for reference, we may write the matrix as        Q   k  ℓ    =   [     1                           ⋱             0               c    ⋯    s                  ⋮    ⋱    ⋮                   -  s     ⋯    c               0             ⋱                           1     ]    .       subscript  Q    k  normal-ℓ      1  absent  absent  absent  absent  absent  absent    absent  normal-⋱  absent  absent  absent  0  absent    absent  absent  c  normal-⋯  s  absent  absent    absent  absent  normal-⋮  normal-⋱  normal-⋮  absent  absent    absent  absent    s   normal-⋯  c  absent  absent    absent  0  absent  absent  absent  normal-⋱  absent    absent  absent  absent  absent  absent  absent  1      Q_{k\ell}=\begin{bmatrix}1&&&&&&\\
 &\ddots&&&&0&\\
 &&c&\cdots&s&&\\
 &&\vdots&\ddots&\vdots&&\\
 &&-s&\cdots&c&&\\
 &0&&&&\ddots&\\
 &&&&&&1\end{bmatrix}.     That is, Q k ℓ is an identity matrix except for four entries, two on the diagonal ( q kk and q ℓℓ , both equal to c ) and two symmetrically placed off the diagonal ( q k ℓ and q ℓ k , equal to s and − s , respectively). Here c = cos ϑ and s = sin ϑ for some angle ϑ; but to apply the rotation, the angle itself is not required. Using Kronecker delta notation, the matrix entries can be written        q   i  j    =    δ   i  j    +    (     δ   i  k     δ   j  k     +    δ   i  ℓ     δ   j  ℓ      )    (   c  -  1   )    +    (     δ   i  k     δ   j  ℓ     -    δ   i  ℓ     δ   j  k      )   s     .       subscript  q    i  j       subscript  δ    i  j           subscript  δ    i  k     subscript  δ    j  k        subscript  δ    i  normal-ℓ     subscript  δ    j  normal-ℓ        c  1           subscript  δ    i  k     subscript  δ    j  normal-ℓ        subscript  δ    i  normal-ℓ     subscript  δ    j  k      s      q_{ij}=\delta_{ij}+(\delta_{ik}\delta_{jk}+\delta_{i\ell}\delta_{j\ell})(c-1)+%
 (\delta_{ik}\delta_{j\ell}-\delta_{i\ell}\delta_{jk})s.\,\!     Suppose h is an index other than k or ℓ (which must themselves be distinct). Then the similarity update produces, algebraically,       a   h  k   ′   =   a   k  h   ′   =    c   a   h  k     -   s   a   h  ℓ             subscript   superscript  a  normal-′     h  k     subscript   superscript  a  normal-′     k  h             c   subscript  a    h  k       s   subscript  a    h  normal-ℓ         a^{\prime}_{hk}=a^{\prime}_{kh}=ca_{hk}-sa_{h\ell}\,\!          a   h  ℓ   ′   =   a   ℓ  h   ′   =    c   a   h  ℓ     +   s   a   h  k             subscript   superscript  a  normal-′     h  normal-ℓ     subscript   superscript  a  normal-′     normal-ℓ  h             c   subscript  a    h  normal-ℓ       s   subscript  a    h  k         a^{\prime}_{h\ell}=a^{\prime}_{\ell h}=ca_{h\ell}+sa_{hk}\,\!          a   k  ℓ   ′   =   a   ℓ  k   ′   =     (    c  2   -   s  2    )    a   k  ℓ     +   s  c   (    a   k  k    -   a   ℓ  ℓ     )     =  0         subscript   superscript  a  normal-′     k  normal-ℓ     subscript   superscript  a  normal-′     normal-ℓ  k                superscript  c  2    superscript  s  2     subscript  a    k  normal-ℓ       s  c     subscript  a    k  k     subscript  a    normal-ℓ  normal-ℓ            0     a^{\prime}_{k\ell}=a^{\prime}_{\ell k}=(c^{2}-s^{2})a_{k\ell}+sc(a_{kk}-a_{%
 \ell\ell})=0\,\!          a   k  k   ′   =      c  2    a   k  k     +    s  2    a   ℓ  ℓ      -   2  s  c   a   k  ℓ           subscript   superscript  a  normal-′     k  k           superscript  c  2    subscript  a    k  k        superscript  s  2    subscript  a    normal-ℓ  normal-ℓ        2  s  c   subscript  a    k  normal-ℓ        a^{\prime}_{kk}=c^{2}a_{kk}+s^{2}a_{\ell\ell}-2sca_{k\ell}\,\!           a   ℓ  ℓ   ′   =     s  2    a   k  k     +    c  2    a   ℓ  ℓ     +   2  s  c   a   k  ℓ       .       subscript   superscript  a  normal-′     normal-ℓ  normal-ℓ         superscript  s  2    subscript  a    k  k        superscript  c  2    subscript  a    normal-ℓ  normal-ℓ       2  s  c   subscript  a    k  normal-ℓ        a^{\prime}_{\ell\ell}=s^{2}a_{kk}+c^{2}a_{\ell\ell}+2sca_{k\ell}.\,\!     Numerically stable computation  To determine the quantities needed for the update, we must solve the off-diagonal equation for zero . This implies that          c  2   -   s  2     s  c    =     a   ℓ  ℓ    -   a   k  k      a   k  ℓ      .           superscript  c  2    superscript  s  2      s  c         subscript  a    normal-ℓ  normal-ℓ     subscript  a    k  k      subscript  a    k  normal-ℓ       \frac{c^{2}-s^{2}}{sc}=\frac{a_{\ell\ell}-a_{kk}}{a_{k\ell}}.     Set β to half of this quantity,       β  =     a   ℓ  ℓ    -   a   k  k      2   a   k  ℓ       .      β       subscript  a    normal-ℓ  normal-ℓ     subscript  a    k  k       2   subscript  a    k  normal-ℓ        \beta=\frac{a_{\ell\ell}-a_{kk}}{2a_{k\ell}}.     If a k ℓ is zero we can stop without performing an update, thus we never divide by zero. Let t be tan ϑ. Then with a few trigonometric identities we reduce the equation to         t  2   +   2  β  t    -  1   =  0.           superscript  t  2     2  β  t    1   0.    t^{2}+2\beta t-1=0.\,\!     For stability we choose the solution       t  =    sgn   (  β  )      |  β  |   +     β  2   +  1       .      t     sgn  β       β        superscript  β  2   1        t=\frac{\operatorname{sgn}(\beta)}{|\beta|+\sqrt{\beta^{2}+1}}.     From this we may obtain c and s as      c  =   1     t  2   +  1         c    1       superscript  t  2   1       c=\frac{1}{\sqrt{t^{2}+1}}\,\!         s  =   c  t       s    c  t     s=ct\,\!     Although we now could use the algebraic update equations given previously, it may be preferable to rewrite them. Let       ρ  =   s   1  +  c     ,      ρ    s    1  c      \rho=\frac{s}{1+c},     so that ρ = tan(ϑ/2). Then the revised update equations are       a   h  k   ′   =   a   k  h   ′   =    a   h  k    -   s   (    a   h  ℓ    +   ρ   a   h  k      )            subscript   superscript  a  normal-′     h  k     subscript   superscript  a  normal-′     k  h            subscript  a    h  k      s     subscript  a    h  normal-ℓ      ρ   subscript  a    h  k           a^{\prime}_{hk}=a^{\prime}_{kh}=a_{hk}-s(a_{h\ell}+\rho a_{hk})\,\!          a   h  ℓ   ′   =   a   ℓ  h   ′   =    a   h  ℓ    +   s   (    a   h  k    -   ρ   a   h  ℓ      )            subscript   superscript  a  normal-′     h  normal-ℓ     subscript   superscript  a  normal-′     normal-ℓ  h            subscript  a    h  normal-ℓ      s     subscript  a    h  k      ρ   subscript  a    h  normal-ℓ           a^{\prime}_{h\ell}=a^{\prime}_{\ell h}=a_{h\ell}+s(a_{hk}-\rho a_{h\ell})\,\!          a   k  ℓ   ′   =   a   ℓ  k   ′   =  0         subscript   superscript  a  normal-′     k  normal-ℓ     subscript   superscript  a  normal-′     normal-ℓ  k         0     a^{\prime}_{k\ell}=a^{\prime}_{\ell k}=0\,\!          a   k  k   ′   =    a   k  k    -   t   a   k  ℓ           subscript   superscript  a  normal-′     k  k       subscript  a    k  k      t   subscript  a    k  normal-ℓ        a^{\prime}_{kk}=a_{kk}-ta_{k\ell}\,\!          a   ℓ  ℓ   ′   =    a   ℓ  ℓ    +   t   a   k  ℓ           subscript   superscript  a  normal-′     normal-ℓ  normal-ℓ       subscript  a    normal-ℓ  normal-ℓ      t   subscript  a    k  normal-ℓ        a^{\prime}_{\ell\ell}=a_{\ell\ell}+ta_{k\ell}\,\!     As previously remarked, we need never explicitly compute the rotation angle ϑ. In fact, we can reproduce the symmetric update determined by Q k ℓ by retaining only the three values k , ℓ, and t , with t set to zero for a null rotation.  See also   Givens rotation   References     "  Category:Numerical linear algebra   