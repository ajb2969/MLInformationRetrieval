


RecycleUnits




RecycleUnits

In mathematical logic, proof compression by RecycleUnits1 is a method for compressing propositional logic resolution proofs. Its main idea is to make use of intermediate (e.g. non input) proof results being unit clauses, i.e. clauses containing only one literal. Certain proof nodes can be replaced with the nodes representing these unit clauses. After this operation the obtained graph is transformed into a valid proof. The output proof is shorter than the original while being equivalent or stronger.
Algorithms
The algorithms treat resolution proofs as directed acyclic graphs, where each node is labeled by a clause and each node has either one or two predecessors called parents. If a node has two parents it is also labeled with a propositional variable called the pivot, which was used to compute the nodes clause using resolution.
 The following algorithm describes the replacement of nodes.
 It is assumed that in the resolution proof for all non leaf nodes with two parent nodes, the left parent node contains the positive and the right parent node the negative pivot variable. The algorithm first iterates over all non leaf unit clauses and then over all non ancestor nodes of the proof. If the node's pivot element is the variable of the present unit clause's literal, one of the parent nodes can be replaced by the node corresponding to the unit clause. Because of the above assumption, if the literal is equal to the pivot, the left parent contains the literal and can be replaced by the unit clause node. If the literal is equal to the negation of the pivot the right parent is replaced.
 1  function RecycleUnits(Proof 

):
 2      Let 

 be the set of non leaf nodes representing unit clauses
 3      for each 

 do
 4         Mark the ancestors of u
 5         for each unmarked 

 do
 6             let 

 be the pivot variable of 


 7             let 

 be the literal contained in the clause of 


 8             if 

 then
 9                 replace the left parent of 

 with 


 10            else if 

 then
 11                replace the right parent of 

 with 


In general after execution of this function the proof won't be a legal proof anymore. The following algorithm takes the root node of a proof and constructs a legal proof out of it. The computation begins with recursively calls to the children nodes. In order to minimize the algorithm calls, it is beingt kept track of which nodes were already visited. Note that a resolution proof can be seen as a general directed acyclic graph as opposed to a tree. After the recursive call the clause of the present node is updated. While doing so four different cases can occur. The present pivot variable can occur in both, the left, the right or in none of the parent nodes. If it occurs in both parent nodes the clause is calculated as resolvent of the parent clauses. If it is not present in one of the parent nodes the clause of this parent can be copied. If it misses in both parents one has to choose heuristically.
 1  function ReconstructProof(Node 

):
 3      if 

 is visited return
 4      mark 

 as visited
 5      if 

 has no parents return
 6      else if 

 has only one parent 

 then
 7         ReconstructProof(

)
 8         

.Clause = 

.Clause
 9      else
 10        let 

 be the left and 

 the right parent node
 11        let 

 be the pivot variable used to compute 


 12        ReconstructProof(

)
 13        ReconstructProof(

)
 14        if 

 and 


 15           

.Clause = Resolve(

,

,

)
 16        else if 

 and 


 17           

.Clause = 

.Clause
 18           delete reference to 


 19        else if 

 and 


 20           

.Clause = 

.Clause
 21           delete reference to 


 22        else
 23           let 

 and 

 //choose x heuristically
 24           

.Clause = 

.Clause
 25           delete reference to 


Example
Consider the following resolution proof.
 One intermediate result is 
 
 
 
  which is representing the unit clause (-1).



There is one non-ancestor node using the variable 1 as a pivot element
 
 
 
 .



The literal -1 is contained in the right parent of this node and therefore this parent is replaced by 
 
 
 
 . The string 
 
 
 
  denotes a reference to the clause 
 
 
 
  (the structure is now a directed acyclic graph rather than a tree).



This structure is not a legal proof anymore, because 
 
 
 
  is not the resolvent of 
 
 
 
  and 
 
 
 
 . Therefore it has to be transformed into one again.
 The first step is to update 
 
 
 
 . As the pivot variable 1 appears in both parent nodes, 
 
 
 
  is computed as the resolvent of them.



The left parent node of 
 
 
 
  does not contain the pivot variable and therefore the clause of this parent is copied into the clause of 
 
 
 
 . The link between 
 
 
 
  and 
 
 
 
  is removed and since there are no other links to 
 
 
 
 
  this node can be deleted.



Again the left parent of 
 
 
 
  does not contain the pivot variable and the same operation is performed as before.



Note: the reference 
 
 
 
  was replaced by the actual proof node 
 
 
 
 .
 The result of this proof is the unit clause (3) which is a stronger result than the clause (3,5) of the original proof.
Notes
"
Category:Methods of proof



Bar-Ilan, O.; Fuhrmann, O.; Hoory, S. ; Shacham, O. ; Strichman, O. Linear-time Reductions of Resolution Proofs. Hardware and Software: Verification and Testing, p. 114–128, Springer, 2011.↩




