   Sequential decoding      Sequential decoding   Sequential decoding is a limited memory technique for decoding tree codes . Sequential decoding is mainly used is as an approximate decoding algorithm for long constraint-length convolutional codes . This approach may not be as accurate as the Viterbi algorithm but can save a substantial amount of computer memory.  Sequential decoding explores the tree code in such a way to try to minimise the computational cost and memory requirements to store the tree.  There is a range of sequential decoding approaches based on choice of metric and algorithm. Metrics include:   Fano metric  Zigangirov metric  Gallager metric   Algorithms include:   Stack algorithm  Fano algorithm  Creeper algorithm   Fano metric  Given a partially explored tree (represented by a set of nodes which are limit of exploration), we would like to know the best node from which to explore further. The Fano metric (named after Robert Fano ) allows one to calculate from which is the best node to explore further. This metric is optimal given no other constraints (e.g. memory).  For a binary symmetric channel (with error probability   p   p   p   ) the Fano metric can be derived via Bayes theorem . We are interested in following the most likely path    P  i     subscript  P  i    P_{i}   given an explored state of the tree   X   X   X   and a received sequence   ùê´   ùê´   {\mathbf{r}}   . Using the language of probability and Bayes theorem we want to choose the maximum over   i   i   i   of:       Pr   (   P  i   |  X  ,  ùê´  )    ‚àù    Pr   (  ùê´  |   P  i   ,  X  )     Pr   (   P  i   |  X  )        proportional-to   Pr   subscript  P  i   X  ùê´      Pr  ùê´   subscript  P  i   X    Pr   subscript  P  i   X      \Pr(P_{i}|X,{\mathbf{r}})\propto\Pr({\mathbf{r}}|P_{i},X)\Pr(P_{i}|X)     We now introduce the following notation:      N   N   N   to represent the maximum length of transmission in branches     b   b   b   to represent the number of bits on a branch of the code (the denominator of the code rate ,   R   R   R   ).      d  i     subscript  d  i    d_{i}   to represent the number of bit errors on path    P  i     subscript  P  i    P_{i}   (the Hamming distance between the branch labels and the received sequence)      n  i     subscript  n  i    n_{i}   to be the length of    P  i     subscript  P  i    P_{i}   in branches.   We express the likelihood     Pr   (  ùê´  |   P  i   ,  X  )      Pr  ùê´   subscript  P  i   X    \Pr({\mathbf{r}}|P_{i},X)   as     p   d  i      (   1  -  p   )      n  i   b   -   d  i      2   -    (   N  -   n  i    )   b          superscript  p   subscript  d  i     superscript    1  p        subscript  n  i   b    subscript  d  i      superscript  2        N   subscript  n  i    b       p^{d_{i}}(1-p)^{n_{i}b-d_{i}}2^{-(N-n_{i})b}   (by using the binary symmetric channel likelihood for the first     n  i   b       subscript  n  i   b    n_{i}b   bits followed by a uniform prior over the remaining bits).  We express the prior     Pr   (   P  i   |  X  )      Pr   subscript  P  i   X    \Pr(P_{i}|X)   in terms of the number of branch choices one has made,    n  i     subscript  n  i    n_{i}   , and the number of branches from each node,    2   R  b      superscript  2    R  b     2^{Rb}   .  Therefore:      Pr   (   P  i   |  X  ,  ùê´  )      Pr   subscript  P  i   X  ùê´    \displaystyle\Pr(P_{i}|X,{\mathbf{r}})     We can equivalently maximise the log of this probability, i.e.      d   ;  i    log  2   p  +   (   n  i   b  -   d  i   )    log  2    (  1  -  p  )   +   n  i   b  -   n  i   R  b     fragments  d   subscript  normal-;  i    subscript   2   p    fragments  normal-(   subscript  n  i   b    subscript  d  i   normal-)    subscript   2    fragments  normal-(  1   p  normal-)     subscript  n  i   b    subscript  n  i   R  b    \displaystyle d;_{i}\log_{2}p+(n_{i}b-d_{i})\log_{2}(1-p)+n_{i}b-n_{i}Rb     This last expression is the Fano metric. The important point to see is that we have two terms here: one based on the number of wrong bits and one based on the number of right bits. We can therefore update the Fano metric simply by adding       log  2   p   +  1   -  R          subscript   2   p   1   R    \log_{2}p+1-R   for each non-matching bit and       log  2    (   1  -  p   )    +  1   -  R          subscript   2     1  p    1   R    \log_{2}(1-p)+1-R   for each matching bit.  Computational cutoff rate  For sequential decoding to a good choice of decoding algorithm, the number of states explored wants to remain small (otherwise an algorithm which deliberately explores all states, e.g. the Viterbi algorithm , may be more suitable). For a particular noise level there is a maximum coding rate    R  0     subscript  R  0    R_{0}   called the computational cutoff rate where there is a finite backtracking limit. For the binary symmetric channel:       R  0   =   1  -    log  2    (   1  +   2    p   (   1  -  p   )       )          subscript  R  0     1    subscript   2     1    2      p    1  p           R_{0}=1-\log_{2}(1+2\sqrt{p(1-p)})     Algorithms  Stack algorithm  The simplest algorithm to describe is the "stack algorithm" in which the best   N   N   N   paths found so far are stored. Sequential decoding may introduce an additional error above Viterbi decoding when the correct path has   N   N   N   or more highly scoring paths above it; at this point the best path will drop off the stack and be no longer considered.  Fano algorithm  The famous Fano algorithm (named after Robert Fano ) has a very low memory requirement and hence is suited to hardware implementations. This algorithm explores backwards and forward from a single point on the tree.   The Fano algorithm is a sequential decoding algorithm that does not require a stack.  The Fano algorithm can only operate over a code tree because it cannot examine path merging.  At each decoding stage, the Fano algorithm retains the information regarding three paths: the current path, its immediate predecessor path, and one of its successor paths.  Based on this information, the Fano algorithm can move from the current path to either its immediate predecessor path or the selected successor path; hence, no stack is required for queuing all examined paths.  The movement of the Fano algorithm is guided by a dynamic threshold T that is an integer multiple of a fixed step size ¬¢.  Only the path whose path metric is no less than T can be next visited. According to the algorithm, the process of codeword search continues to move forward along a code path, as long as the Fano metric along the code path remains non-decreasing.  Once all the successor path metrics are smaller than T, the algorithm moves backward to the predecessor path if the predecessor path metric beats T; thereafter, threshold examination will be subsequently performed on another successor path of this revisited predecessor.  In case the predecessor path metric is also less than T, the threshold T is one-step lowered so that the algorithm is not trapped on the current path.  For the Fano algorithm, if a path is revisited, the presently examined dynamic threshold is always lower than the momentary dynamic threshold at the previous visit, guaranteeing that looping in the algorithm does not occur, and that the algorithm can ultimately reach a terminal node of the code tree, and stop.   References   John Wozencraft and B. Reiffen, Sequential decoding , ISBN 0-262-23006-2  Rolf Johannsesson and Kamil Sh. Zigangirov, Fundamentals of convolutional coding (chapter 6), ISBN 0-470-27683-5   External links   " Correction trees " - simulator of correction process using priority queue to choose maximum metric node (called weight)   "  Category:Error detection and correction   