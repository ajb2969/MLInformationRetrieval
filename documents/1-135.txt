   Boolean satisfiability problem      Boolean satisfiability problem   In computer science , the Boolean Satisfiability Problem (sometimes called Propositional Satisfiability Problem and abbreviated as SATISFIABILITY or SAT ) is the problem of determining if there exists an interpretation that satisfies a given Boolean  formula . In other words, it asks whether the variables of a given Boolean formula can be consistently replaced by the values TRUE or FALSE in such a way that the formula evaluates to TRUE . If this is the case, the formula is called satisfiable . On the other hand, if no such assignment exists, the function expressed by the formula is identically FALSE for all possible variable assignments and the formula is unsatisfiable . For example, the formula " a AND NOT b " is satisfiable because one can find the values a = TRUE and b = FALSE, which make ( a AND NOT b ) = TRUE. In contrast, " a AND NOT a " is unsatisfiable.  SAT is one of the first problems that was proven to be NP-complete . This means that all problems in the complexity class NP , which includes a wide range of natural decision and optimization problems, are at most as difficult to solve as SAT. There is no known algorithm that efficiently solves SAT, and it is generally believed that no such algorithm exists; yet this belief has not been proven mathematically, and resolving the question whether SAT has an efficient algorithm is equivalent to the P versus NP problem , which is the most famous open problem in the theory of computing.  Despite the fact that no algorithms are known that solve SAT efficiently, correctly, and for all possible input instances, many instances of SAT that occur in practice, such as in artificial intelligence , circuit design and automatic theorem proving , can actually be solved rather efficiently using heuristical SAT-solvers. Such algorithms are not believed to be efficient on all SAT instances, but experimentally these algorithms tend to work well for many practical applications.  Basic definitions and terminology  A propositional logic formula , also called Boolean expression , is built from variables , operators AND ( conjunction , also denoted by ∧), OR ( disjunction , ∨), NOT ( negation , ¬), and parentheses. A formula is said to be satisfiable if it can be made TRUE by assigning appropriate logical values (i.e. TRUE, FALSE) to its variables. The Boolean satisfiability problem ( SAT ) is, given a formula, to check whether it is satisfiable. This decision problem is of central importance in various areas of computer science , including theoretical computer science , complexity theory , algorithmics , cryptography and artificial intelligence .  There are several special cases of the Boolean satisfiability problem in which the formulas are required to have a particular structure. A literal is either a variable, then called positive literal , or the negation of a variable, then called negative literal . A clause is a disjunction of literals (or a single literal). A clause is called Horn clause if it contains at most one positive literal. A formula is in conjunctive normal form ( CNF ) if it is a conjunction of clauses (or a single clause). For example, " x 1 " is a positive literal, "¬ x 2 " is a negative literal, " x 1 ∨ ¬ x 2 " is a clause, and "( x 1 ∨ ¬ x 2 ) ∧ (¬ x 1 ∨ x 2 ∨ x 3 ) ∧ ¬ x 1 " is a formula in conjunctive normal form, its 1st and 3rd clause are Horn clauses, but its 2nd clause is not. The formula is satisfiable, choosing x 1 =FALSE, x 2 =FALSE, and x 3 arbitrarily, since (FALSE ∨ ¬FALSE) ∧ (¬FALSE ∨ FALSE ∨ x 3 ) ∧ ¬FALSE evaluates to (FALSE ∨ TRUE) ∧ (TRUE ∨ FALSE ∨ x 3 ) ∧ TRUE, and in turn to TRUE ∧ TRUE ∧ TRUE (i.e. to TRUE). In contrast, the CNF formula a ∧ ¬ a , consisting of two clauses of one literal, is unsatisfiable, since for a =TRUE and a =FALSE it evaluates to TRUE ∧ ¬TRUE (i.e. to FALSE) and FALSE ∧ ¬FALSE (i.e. again to FALSE), respectively.  For some versions of the SAT problem,  it is useful to define the notion of a generalized conjunctive normal form formula, viz. as a conjunction of arbitrarily many generalized clauses , the latter being of the form R ( l 1 ,..., l n ) for some boolean operator R and (ordinary) literals l i . Different sets of allowed boolean operators lead to different problem versions.  As an example, R (¬ x , a , b ) is a generalized clause, and R (¬ x , a , b ) ∧ R ( b , y , c ) ∧ R ( c , d ,¬ z ) is a generalized conjunctive normal form. This formula is used below , with R being the ternary operator that is TRUE just if exactly one of its arguments is.  Using the laws of Boolean algebra , every propositional logic formula can be transformed into an equivalent conjunctive normal form, which may, however, be exponentially longer. For example, transforming the formula ( x 1 ∧ y 1 ) ∨ ( x 2 ∧ y 2 ) ∨ ... ∨ ( x n ∧ y n ) into conjunctive normal form yields ( x 1 ∨ x 2 ∨…∨ x n ) ∧ ( y 1 ∨ x 2 ∨…∨ x n ) ∧ ( x 1 ∨ y 2 ∨…∨ x n ) ∧ ( y 1 ∨ y 2 ∨…∨ x n ) ∧ ... ∧ ( x 1 ∨ x 2 ∨…∨ y n ) ∧ ( y 1 ∨ x 2 ∨…∨ y n ) ∧ ( x 1 ∨ y 2 ∨…∨ y n ) ∧ ( y 1 ∨ y 2 ∨…∨ y n ); while the former is a disjunction of n conjunctions of 2 variables, the latter consists of 2 n clauses of n variables.  Complexity and restricted versions  Unrestricted satisfiability (SAT)  SAT was the first known NP-complete problem, as proved by Stephen Cook at the University of Toronto in 1971 1 and independently by Leonid Levin at the National Academy of Sciences in 1973. 2 Until that time, the concept of an NP-complete problem did not even exist. The proof shows how every decision problem in the complexity class  NP can be reduced to the SAT problem for CNF 3 formulas, sometimes called CNFSAT . A useful property of Cook's reduction is that it preserves the number of accepting answers. For example, deciding whether a given graph has a 3-coloring is another problem in NP; if a graph has 17 valid 3-colorings, the SAT formula produced by the Cook–Levin reduction will have 17 satisfying assignments.  NP-completeness only refers to the run-time of the worst case instances. Many of the instances that occur in practical applications can be solved much more quickly. See Algorithms for solving SAT below.  SAT is trivial if the formulas are restricted to those in disjunctive normal form , that is, they are disjunction of conjunctions of literals. Such a formula is indeed satisfiable if and only if at least one of its conjunctions is satisfiable, and a conjunction is satisfiable if and only if it does not contain both x and NOT x for some variable x . This can be checked in linear time. Furthermore, if they are restricted to being in full disjunctive normal form , in which every variable appears exactly once in every conjunction, they can be checked in constant time (each conjunction represents one satisfying assignment). But it can take exponential time and space to convert a general SAT problem to disjunctive normal form; for an example exchange "∧" and "∨" in the above exponential blow-up example for conjunctive normal forms.  3-satisfiability  Like the satisfiability problem for arbitrary formulas, determining the satisfiability of a formula in conjunctive normal form where each clause is limited to at most three literals is NP-complete also; this problem is called 3-SAT , 3CNFSAT , or 3-satisfiability . To reduce the unrestricted SAT problem to 3-SAT, transform each clause " l 1 ∨ ... ∨ l n " to a conjunction of n − 2 clauses "( l 1 ∨ l 2 ∨ x 2 ) ∧ (¬ x 2 ∨ l 3 ∨ x 3 ) ∧ (¬ x 3 ∨ l 4 ∨ x 4 ) ∧ ... ∧ (¬ x n − 3 ∨ l n − 2 ∨ x n − 2 ) ∧ (¬ x n − 2 ∨ l n − 1 ∨ l n )", where x 2 ,..., x n − 2 are fresh variables not occurring elsewhere. Although the two formulas are not logically equivalent , they are equisatisfiable . The formula resulting from transforming all clauses is at most 3 times as long as its original, i.e. the length growth is polynomial. 4  3-SAT is one of Karp's 21 NP-complete problems , and it is used as a starting point for proving that other problems are also NP-hard . 5 This is done by polynomial-time reduction from 3-SAT to the other problem. An example of a problem where this method has been used is the clique problem : given a CNF formula consisting of c clauses, the corresponding graph consists of a vertex for each literal, and an edge between each two non-contradicting 6 literals from different clauses, cf. picture. The graph has a c -clique if and only if the formula is satisfiable.  There is a simple randomized algorithm due to Schöning (1999) that runs in time (4/3) n where n is the number of variables in the 3-SAT proposition, and succeeds with high probability to correctly decide 3-SAT. 7  The exponential time hypothesis asserts that no algorithm can solve 3-SAT (or indeed k -SAT for any k > 2 ) in time that is fundamentally faster than exp( o ( n )).  Selman, Mitchell, and Levesque (1996) give empirical data on the difficulty of randomly generated 3-SAT formulas, depending on their size parameters. Difficulty is measured in number recursive calls made by a DPLL algorithm . 8  3-satisfiability can be generalized to k-satisfiability ( k-SAT , also k-CNF-SAT ), when formulas in CNF are considered with each clause containing up to k literals. However, since for any k ≥3, this problem can neither be easier than 3-SAT nor harder than SAT, and the latter two are NP-complete, so must be k-SAT.  Some authors restrict k-SAT to CNF formulas with exactly k literals . This doesn't lead to a different complexity class either, as each clause " l 1 ∨ ... ∨ l j " with j 1 ∨ ... ∨ l j ∨ d j +1 ∨ ... ∨ d k ". After padding all clauses, 2 k -1 extra clauses 9 have to be appended to ensure that only d 1 =...= d k =FALSE can lead to a satisfying assignment. Since k doesn't depend on the formula length, the extra clauses lead to a constant increase in length. For the same reason, it does not matter whether duplicate literals are allowed in clauses (like e.g. "¬ x ∨ ¬ y ∨ ¬ y "), or not.  Exactly-1 3-satisfiability  A variant of the 3-satisfiability problem is the one-in-three 3-SAT (also known variously as 1-in-3-SAT and exactly-1 3-SAT ). Given a conjunctive normal form, the problem is to determine whether there exists a truth assignment to the variables so that each clause has exactly one TRUE literal (and thus exactly two FALSE literals). In contrast, ordinary 3-SAT requires that every clause has at least one TRUE literal. Formally, a one-in-three 3-SAT problem is given as a generalized conjunctive normal form with all generalized clauses using a ternary operator R that is TRUE just if exactly one of its arguments is. When all literals of a one-in-three 3-SAT formula are positive, the satisfiability problem is called one-in-three positive 3-SAT .  One-in-three 3-SAT, together with its positive case, is listed as NP-complete problem "LO4" in the standard reference, Computers and Intractability: A Guide to the Theory of NP-Completeness by Michael R. Garey and David S. Johnson . One-in-three 3-SAT was proved to be NP-complete by Thomas J. Schaefer as a special case of Schaefer's dichotomy theorem , which asserts that any problem generalizing Boolean satisfiability in a certain way is either in the class P or is NP-complete. 10  Schaefer gives a construction allowing an easy polynomial-time reduction from 3-SAT to one-in-three 3-SAT. Let "( x or y or z )" be a clause in a 3CNF formula. Add six fresh boolean variables a , b , c , d , e , and f , to be used to simulate this clause and no other.  Then the formula R ( x , a , d ) ∧ R ( y , b , d ) ∧ R ( a , b , e ) ∧ R ( c , d , f ) ∧ R ( z , c ,FALSE) is satisfiable by some setting of the fresh variables if and only if at least one of x , y , or z is TRUE, see picture (left). Thus any 3-SAT instance with m clauses and n variables may be converted into an equisatisfiable one-in-three 3-SAT instance with 5 m clauses and n +6 m variables. 11 Another reduction involves only four fresh variables and three clauses: R (¬ x , a , b ) ∧ R ( b , y , c ) ∧ R( c , d ,¬ z ), see picture (right).  2-satisfiability  SAT is easier if the number of literals in a clause is limited to at most 2, in which case the problem is called 2-SAT . This problem can be solved in polynomial time, and in fact is complete for the complexity class NL . If additionally all OR operations in literals are changed to XOR operations, the result is called exclusive-or 2-satisfiability , which is a problem complete for the complexity class SL = L .  Horn-satisfiability  The problem of deciding the satisfiability of a given conjunction of Horn clauses is called Horn-satisfiability , or HORN-SAT . It can be solved in polynomial time by a single step of the Unit propagation algorithm, which produces the single minimal model of the set of Horn clauses (w.r.t. the set of literals assigned to TRUE). Horn-satisfiability is P-complete . It can be seen as P's version of the Boolean satisfiability problem.  Horn clauses are of interest because they are able to express implication of one variable from a set of other variables. Indeed, one such clause ¬ x 1 ∨ ... ∨ ¬ x n ∨ y can be rewritten as x 1 ∧ ... ∧ x n → y , that is, if x 1 ,..., x n are all TRUE, then y needs to be TRUE as well.  A generalization of the class of Horn formulae is that of renamable-Horn formulae, which is the set of formulae that can be placed in Horn form by replacing some variables with their respective negation. For example, ( x 1 ∨ ¬ x 2 ) ∧ (¬ x 1 ∨ x 2 ∨ x 3 ) ∧ ¬ x 1 is not a Horn formula, but can be renamed to the Horn formula ( x 1 ∨ ¬ x 2 ) ∧ (¬ x 1 ∨ x 2 ∨ ¬ y 3 ) ∧ ¬ x 1 by introducing y 3 as negation of x 3 . In contrast, no renaming of ( x 1 ∨ ¬ x 2 ∨ ¬ x 3 ) ∧ (¬ x 1 ∨ x 2 ∨ x 3 ) ∧ ¬ x 1 leads to a Horn formula. Checking the existence of such a replacement can be done in linear time; therefore, the satisfiability of such formulae is in P as it can be solved by first performing this replacement and then checking the satisfiability of the resulting Horn formula.     (Figure)  A formula with 2 clauses may be unsatisfied (red), 3-satisfied (green), xor-3-satisfied (blue), or/and 1-in-3-satisfied (yellow), depending on the TRUE-literal count in the 1st (hor) and 2nd (vert) clause.      XOR-satisfiability      Solving an XOR-SAT example by Gaussian elimination          Given formula       ("⊕" means XOR, the  is optional)     ( a ⊕ c ⊕ d ) ∧ ( b ⊕¬ c ⊕ d ) ∧ ( a ⊕ b ⊕¬ d ) ∧ ( a ⊕¬ b ⊕¬ c )           Equation system       ("1" means TRUE, "0" means FALSE)     Each clause leads to one equation.                          Normalized equation system       using properties of Boolean rings (¬ x =1⊕ x , x ⊕ x =0)     a     b     a     a        (If the  is present,  contradicts     the last black one, so the system is unsolvable.     Therefore, Gauss' algorithm is     used only for the black equations.)           Associated coefficient matrix            a          1     0     1     1           Transforming to echelon form            a          1     1     1     0          1     0     0     0          1     0     0     0           Transforming to diagonal form            a          1     0     0     0          1     0     0     0             Solution:       If the  is present:     Else:              As a consequence:     R ( a , c , d ) ∧ R ( b ,¬ c , d ) ∧ R ( a , b ,¬ d ) ∧ R ( a ,¬ b ,¬ c )     is not 1-in-3-satisfiable,     while ( a ∨ c ∨ d ) ∧ ( b ∨¬ c ∨ d ) ∧ ( a ∨ b ∨¬ d ) ∧ ( a ∨¬ b ∨¬ c )     is 3-satisfiable with a = c =FALSE and b = d =TRUE.        Another special case is the class of problems where each clause contains XOR (i.e. exclusive or ) rather than (plain) OR operators. 12 This is in P , since an XOR-SAT formula can also be viewed as a system of linear equations mod 2, and can be solved in cubic time by Gaussian elimination ; 13 see the box for an example. This recast is based on the kinship between Boolean algebras and Boolean rings , and the fact that arithmetic modulo two forms a finite field . Since a XOR b XOR c evaluates to TRUE if and only if exactly 1 or 3 members of { a , b , c } are TRUE, each solution of the 1-in-3-SAT problem for a given CNF formula is also a solution of the XOR-3-SAT problem, and in turn each solution of XOR-3-SAT is a solution of 3-SAT, cf. picture. As a consequence, for each CNF formula, it is possible to solve the XOR-3-SAT problem defined by the formula, and based on the result infer either that the 3-SAT problem is solvable or that the 1-in-3-SAT problem is unsolvable.  Provided that the complexity classes P and NP are not equal , neither 2-, nor Horn-, nor XOR-satisfiability is NP-complete, unlike SAT. The assumption that P and NP are not equal is currently not proven .  Schaefer's dichotomy theorem  The restrictions above (CNF, 2CNF, 3CNF, Horn, XOR-SAT) bound the considered formulae to be conjunctions of subformulae; each restriction states a specific form for all subformulae: for example, only binary clauses can be subformulae in 2CNF.  Schaefer's dichotomy theorem states that, for any restriction to Boolean operators that can be used to form these subformulae, the corresponding satisfiability problem is in P or NP-complete. The membership in P of the satisfiability of 2CNF, Horn, and XOR-SAT formulae are special cases of this theorem.  Extensions of SAT  An extension that has gained significant popularity since 2003 is Satisfiability modulo theories ( SMT ) that can enrich CNF formulas with linear constraints, arrays, all-different constraints, uninterpreted functions , 14  etc. Such extensions typically remain NP-complete, but very efficient solvers are now available that can handle many such kinds of constraints.  The satisfiability problem becomes more difficult if both "for all" (∀) and "there exists" (∃) quantifiers are allowed to bind the Boolean variables. An example of such an expression would be "∀ x ∀ y ∃ z ( x ∨ y ∨ z ) ∧ (¬ x ∨ ¬ y ∨ ¬ z )"; it is valid, since for all values of x and y , an appropriate value of z can be found, viz. z =TRUE if both x and y are FALSE, and z =FALSE else. SAT itself (tacitly) uses only ∃ quantifiers. If only ∀ quantifiers are allowed instead, the so-called tautology problem is obtained, which is co-NP-complete . If both quantifiers are allowed, the problem is called the quantified Boolean formula problem ( QBF ), which can be shown to be PSPACE-complete . It is widely believed that PSPACE-complete problems are strictly harder than any problem in NP, although this has not yet been proved.  A number of variants deal with the number of variable assignments making the formula TRUE. Ordinary SAT asks if there is at least one such assignment. MAJ-SAT , which asks if the majority of all assignments make the formula TRUE, is complete for PP , a probabilistic class. The problem of how many variable assignments satisfy a formula, not a decision problem, is in #P . UNIQUE-SAT is the problem of determining whether a formula has exactly one assignment; it is complete for US , the complexity class describing problems solvable by a non-deterministic polynomial time Turing machine that accepts when there is exactly one nondeterministic accepting path and rejects otherwise. When the input is restricted to formulas having at most one satisfying assignment (or none), the problem is called UNAMBIGOUS-SAT . A solving algorithm for UNAMBIGOUS-SAT is allowed to exhibit any behavior, including endless looping, on a formula having several satisfying assignments. Although this problem seems easier, Valiant and Vazirani have shown 15 that if there is a practical (i.e. randomized polynomial-time ) algorithm to solve it, then all problems in NP can be solved just as easily.  The maximum satisfiability problem , an FNP generalization of SAT, asks for the maximum number of clauses which can be satisfied by any assignment. It has efficient approximation algorithms , but is NP-hard to solve exactly. Worse still, it is APX -complete, meaning there is no polynomial-time approximation scheme (PTAS) for this problem unless P=NP.  Other generalisations include satisfiability for first - and second-order logic , constraint satisfaction problems , 0-1 integer programming .  Self-reducibility  The SAT problem is self-reducible , that is, each algorithm which correctly answers if an instance of SAT is solvable can be used to find a satisfying assignment. First, the question is asked on the given formula Φ. If the answer is "no", the formula is unsatisfiable. Otherwise, the question is asked on the partly instantiated formula Φ { x 1 =TRUE} , i.e. Φ with the first variable x 1 replaced by TRUE, and simplified accordingly. If the answer is "yes", then x 1 =TRUE, otherwise x 1 =FALSE. Values of other variables can be found subsequently in the same way. In total, n +1 runs of the algorithm are required, where n is the number of distinct variables in Φ.  This property of self-reducibility is used in several theorems in complexity theory:   NP ⊆ P/poly ⇒ PH = Σ 2 ( Karp–Lipton theorem )  NP ⊆ BPP ⇒ NP = RP   P = NP ⇒ FP = FNP    Algorithms for solving SAT  Since the SAT problem is NP-complete, only algorithms with exponential worst-case complexity are known for it. In spite of this state of the art in complexity theory, efficient and scalable algorithms for SAT were developed over the last decade and have contributed to dramatic advances in our ability to automatically solve problem instances involving tens of thousands of variables and millions of constraints (i.e. clauses). 16 Examples of such problems in electronic design automation (EDA) include formal equivalence checking , model checking , formal verification of pipelined microprocessors , 17  automatic test pattern generation , routing of FPGAs , 18  planning , and scheduling problems , and so on. A SAT-solving engine is now considered to be an essential component in the EDA toolbox.  There are two classes of high-performance algorithms for solving instances of SAT in practice: the Conflict-Driven Clause Learning algorithm, which can be viewed as a modern variant of the DPLL algorithm (well known implementations include Chaff 19 and GRASP 20 ) and stochastic  local search algorithms, such as WalkSAT .  A DPLL SAT solver employs a systematic backtracking search procedure to explore the (exponentially sized) space of variable assignments looking for satisfying assignments. The basic search procedure was proposed in two seminal papers in the early 1960s (see references below) and is now commonly referred to as the Davis–Putnam–Logemann–Loveland algorithm ("DPLL" or "DLL"). 21 22 Theoretically, exponential lower bounds have been proved for the DPLL family of algorithms.  In contrast, randomized algorithms like the PPSZ algorithm by Paturi, Pudlak, Saks, and Zane set variables in a random order according to some heuristics, for example bounded-width resolution . If the heuristic can't find the correct setting, the variable is assigned randomly. The PPSZ algorithm has a runtime of    O   (   2   0.386  n    )       O   superscript  2    0.386  n      O(2^{0.386n})   for 3-SAT with a single satisfying assignment. Currently this is the best known runtime for this problem. In the setting with many satisfying assignments the randomized algorithm by Schöning has a better bound. 23 24  Modern SAT solvers (developed in the last ten years) come in two flavors: "conflict-driven" and "look-ahead". Conflict-driven solvers augment the basic DPLL search algorithm with efficient conflict analysis, clause learning, non- chronological backtracking (a.k.a. backjumping ), as well as "two-watched-literals" unit propagation , adaptive branching, and random restarts. These "extras" to the basic systematic search have been empirically shown to be essential for handling the large SAT instances that arise in electronic design automation (EDA). Look-ahead solvers have especially strengthened reductions (going beyond unit-clause propagation) and the heuristics, and they are generally stronger than conflict-driven solvers on hard instances (while conflict-driven solvers can be much better on large instances which actually have an easy instance inside).  Modern SAT solvers are also having significant impact on the fields of software verification, constraint solving in artificial intelligence, and operations research, among others. Powerful solvers are readily available as free and open source software . In particular, the conflict-driven MiniSAT , which was relatively successful at the 2005 SAT competition , only has about 600 lines of code. A modern Parallel SAT solver is ManySAT . It can achieve super linear speed-ups on important classes of problems. An example for look-ahead solvers is march_dl , which won a prize at the 2007 SAT competition .  Certain types of large random satisfiable instances of SAT can be solved by survey propagation (SP). Particularly in hardware design and verification applications, satisfiability and other logical properties of a given propositional formula are sometimes decided based on a representation of the formula as a binary decision diagram (BDD).  Almost all SAT solvers include time-outs, so they will terminate in reasonable time even if they cannot find a solution. Different SAT solvers will find different instances easy or hard, and some excel at proving unsatisfiability, and others at finding solutions. All of these behaviors can be seen in the SAT solving contests. 25  See also   Unsatisfiable core  Satisfiability Modulo Theories  Counting SAT  Karloff–Zwick algorithm  Circuit satisfiability   Notes  References  References are ordered by date of publication:    A9.1: LO1 – LO7, pp. 259 – 260.         External links  SAT problem format  A SAT problem is often described in the DIMACS-CNF format: an input file in which each line represents a single disjunction. For example, a file with the two lines  1 -5 4 0  -1 5 3 4 0  represents the formula "( x 1 ∨ ¬ x 5 ∨ x 4 ) ∧ (¬ x 1 ∨ x 5 ∨ x 3 ∨ x 4 )".  Another common format for this formula is the 7-bit ASCII representation "(x1 | ~x5 | x4) & (~x1 | x5 | x3 | x4)".   BCSAT is a tool that converts input files in human-readable format to the DIMACS-CNF format.   Online SAT solvers   BoolSAT – Solves formulas in the DIMACS-CNF format or in a more human-friendly format: "a and not b or a". Runs on a server.  Logictools - Provides different solvers in javascript for learning, comparison and hacking. Runs in the browser.  minisat-in-your-browser – Solves formulas in the DIMACS-CNF format. Runs in the browser.  SATRennesPA - Solves formulas written in a user-friendly way. Runs on a server.  somerby.net/mack/logic - Solves formulas written in symbolic logic. Runs in the browser.   Offline SAT solvers   MiniSAT – DIMACS-CNF format.  Lingeling – won a gold medal in a 2011 SAT competition.  PicoSAT – an earlier solver from the Lingeling group.   Sat4j – DIMACS-CNF format. Java source code available.  Glucose – DIMACS-CNF format.  RSat – won a gold medal in a 2007 SAT competition.  UBCSAT . Supports unweighted and weighted clauses, both in the DIMACS-CNF format. C source code hosted on GitHub .  CryptoMiniSat – won a gold medal in a 2011 SAT competition. C++ source code hosted on GitHub . Tries to put many useful features of MiniSat 2.0 core, PrecoSat ver 236, and Glucose into one package, adding many new features  Spear – Supports bit-vector arithmetic. Can use the DIMACS-CNF format or the Spear format .  HyperSAT – Written to experiment with B-cubing search space pruning. Won 3rd place in a 2005 SAT competition. An earlier and slower solver from the developers of Spear.   BASolver  ArgoSAT  Fast SAT Solver – based on genetic algorithms .  zChaff – not supported anymore.  BCSAT – human-readable boolean circuit format (also converts this format to the DIMACS-CNF format and automatically links to MiniSAT or zChaff).   SAT applications   WinSAT v2.04 : A Windows-based SAT application made particularly for researchers.   Conferences  International Conference on Theory and Applications of Satisfiability Testing:   SAT 2013  SAT 2012  SAT 2011  SAT 2010  SAT 2009  SAT 2008  SAT 2007   Publications   Journal on Satisfiability, Boolean Modeling and Computation  Survey Propagation   Benchmarks   Forced Satisfiable SAT Benchmarks  SATLIB  Software Verification Benchmarks  Fadi Aloul SAT Benchmarks   SAT solving in general:   http://www.satlive.org  http://www.satisfiability.org   Evaluation of SAT solvers   Yearly evaluation of SAT solvers  SAT solvers evaluation results for 2008  International SAT Competitions  History   More information on SAT:   SAT and MAX-SAT for the Lay-researcher    This article includes material from a column in the ACM SIGDA  e-newsletter by Prof. Karem Sakallah Original text is available here  "  Category:Boolean algebra  Category:Electronic design automation  Category:Formal methods  Category:Logic in computer science  Category:NP-complete problems  Category:Satisfiability problems     ↩  [ http://www.mathnet.ru/php/getFT.phtml?jrnid=ppi&paperid; ;=914&volume;=9&year;=1973&issue;=3&fpage;=115&what;=fullt&option;_lang=eng (pdf)] , translated into English by ↩  The SAT problem for arbitrary formulas is NP-complete, too, since it is easily shown to be in NP, and it cannot be easier than SAT for CNF formulas. ↩  ; here: Thm.10.4 ↩  i.e. at least as hard as every other problem in NP. A problem is NP-complete if and only if it is in NP and is NP-hard. ↩  i.e. such that one literal isn't the negation of the other ↩  ↩  ↩  viz. all maxterms that can be built with d 1 ,..., d k , except " d 1 ∨...∨ d k " ↩  ↩  (Schaefer, 1978), p.222, Lemma 3.5 ↩  Formally, generalized conjunctive normal forms with a ternary boolean operator R are employed, which is TRUE just if 1 or 3 of its arguments is. An input clause with more than 3 literals can be transformed into an equisatisfiable conjunction of clauses á 3 literals similar to above ; i.e. XOR-SAT can be reduced to XOR-3-SAT. ↩  . ↩  R. E. Bryant, S. M. German, and M. N. Velev, Microprocessor Verification Using Efficient Decision Procedures for a Logic of Equality with Uninterpreted Functions , in Analytic Tableaux and Related Methods, pp. 1–13, 1999. ↩  ↩  . ↩   ↩  ↩  ↩  ↩  ↩   "An improved exponential-time algorithm for k-SAT" , Paturi, Pudlak, Saks, Zani ↩  ↩     