


Bicubic interpolation




Bicubic interpolation

 
In mathematics, bicubic interpolation is an extension of cubic interpolation for interpolating data points on a two dimensional regular grid. The interpolated surface is smoother than corresponding surfaces obtained by bilinear interpolation or nearest-neighbor interpolation. Bicubic interpolation can be accomplished using either Lagrange polynomials, cubic splines, or cubic convolution algorithm.
In image processing, bicubic interpolation is often chosen over bilinear interpolation or nearest neighbor in image resampling, when speed is not an issue. In contrast to bilinear interpolation, which only takes 4 pixels (2×2) into account, bicubic interpolation considers 16 pixels (4×4). Images resampled with bicubic interpolation are smoother and have fewer interpolation artifacts.
Suppose the function values 
 
 
 
  and the derivatives 
 
 
 
 , 
 
 
 
  and 
 
 
 
  are known at the four corners 
 
 
 
 , 
 
 
 
 , 
 
 
 
 , and 
 
 
 
  of the unit square. The interpolated surface can then be written



The interpolation problem consists of determining the 16 coefficients 
 
 
 
 . Matching 
 
 
 
  with the function values yields four equations,














Likewise, eight equations for the derivatives in the 
 
 
 
 -direction and the 
 
 
 
 -direction


























And four equations for the cross derivative

 
 .














where the expressions above have used the following identities,








 
 .
This procedure yields a surface 
 
 
 
  on the unit square

 
  which is continuous and with continuous derivatives. Bicubic interpolation on an arbitrarily sized regular grid can then be accomplished by patching together such bicubic surfaces, ensuring that the derivatives match on the boundaries.
Grouping the unknown parameters 
 
 
 
  in a vector,


 
  and letting


 
 , the above system of equations can be reformulated into a matrix for the linear equation 
 
 
 
 .
Inverting the matrix gives the more useful linear equation 
 
 
 
  which allows 
 
 
 
  to be calculated quickly and easily, where:


 
 .
There can be another concise matrix form for 16 coefficients


 
 , or 
 
 
 
 .
Finding derivatives from function values
If the derivatives are unknown, they are typically approximated from the function values at points neighbouring the corners of the unit square, e.g. using finite differences.
To find either of the single derivatives, 
 
 
 
  or 
 
 
 
 , using that method, find the slope between the two surrounding points in the appropriate axis. For example, to calculate 
 
 
 
  for one of the points, find 
 
 
 
  for the points to the left and right of the target point and calculate their slope, and similarly for 
 
 
 
 .
To find the cross derivative, 
 
 
 
 , take the derivative in both axes, one at a time. For example, one can first use the 
 
 
 
  procedure to find the 
 
 
 
  derivatives of the points above and below the target point, then use the 
 
 
 
  procedure on those values (rather than, as usual, the values of 
 
 
 
  for those points) to obtain the value of 
 
 
 
  for the target point. (Or one can do it in the opposite direction, first calculating 
 
 
 
  and then 
 
 
 
  off of those. The two give equivalent results.)
At the edges of the dataset, when one is missing some of the surrounding points, the missing points can be approximated by a number of methods. A simple and common method is to assume that the slope from the existing point to the target point continues without further change, and using this to calculate a hypothetical value for the missing point.
Bicubic convolution algorithm
Bicubic spline interpolation requires the solution of the linear system described above for each grid cell. An interpolator with similar properties can be obtained by applying a convolution with the following kernel in both dimensions:


 
  where 
 
 
 
  is usually set to -0.5 or -0.75. Note that 
 
 
 
  and 
 
 
 
  for all nonzero integers 
 
 
 
 .
This approach was proposed by Keys who showed that 
 
 
 
  (which corresponds to cubic Hermite spline) produces third-order convergence with respect to the original function.1
If we use the matrix notation for the common case 
 
 
 
 , we can express the equation in a more friendly manner:


 
  for 
 
 
 
  between 0 and 1 for one dimension. for two dimensions first applied once in 
 
 
 
  and again in 
 
 
 
 :















Use in computer graphics
(Figure)
Bicubic interpolation causes overshoot, which increases acutance.

The bicubic algorithm is frequently used for scaling images and video for display (see bitmap resampling). It preserves fine detail better than the common bilinear algorithm.
However, due to the negative lobes on the kernel, it causes overshoot (haloing). This can cause clipping, and is an artifact (see also ringing artifacts), but it increases acutance (apparent sharpness), and can be desirable.
See also

Spatial anti-aliasing
Bézier surface
Bilinear interpolation
Cubic Hermite spline, the one-dimensional analogue of bicubic spline
Lanczos resampling
Natural neighbor interpolation
Sinc filter
Spline interpolation
Tricubic interpolation

References
External links

Application of interpolation to elevation samples
Interpolation theory
Explanation and Java/C++ implementation of (bi)cubic interpolation
Excel Worksheet Function for Bicubic Lagrange Interpolation

"
Category:Image processing Category:Multivariate interpolation








