   Cell-probe model      Cell-probe model   In computer science , the cell-probe model is a model of computation similar to the Random-access machine , except that all operations are free except memory access. This model is useful for proving lower bounds of algorithms for data structure problems.  Overview  The cell-probe model is a minor modification of the Random-access machine model, itself a minor modification of the Counter machine  model , in which computational cost is only assigned to accessing units of memory called cells.  In this model, computation is framed as a problem of querying a set of memory cells. The problem has two phases: the preprocessing phase and the query phase. The input to the first phase, the preprocessing phase, is a set of data from which to build some structure from memory cells. The input to the second phase, the query phase, is a query datum. The problem is to determine if the query datum was included in the original input data set. Operations are free except to access memory cells.  This model is useful in the analysis of data structures. In particular, the model clearly shows a minimum number of memory accesses to solve a problem in which there is stored data on which we would like to run some query. An example of such a problem is the dynamic partial sum problem. 1 2  History  In Andrew Yao 's 1981 paper "Should Tables Be Sorted?", 3 Andrew described the cell-probe model and used it to give a minimum number of memory cell "probes" or accesses necessary to determine whether a given query datum exists within a table stored in memory.  Formal definition  Given a set of data   S   S   S   construct a structure consisting of   c   c   c   memory cells, each able to store   w   w   w   bits. Then when given a query element   s   s   s   determine whether    s  ∈  S      s  S    s\in S   with correctness    1  -  ε      1  ε    1-\varepsilon   by accessing   t   t   t   memory cells. Such an algorithm is called an   ε   ε   \varepsilon   -error   t   t   t   -probe algorithm using   c   c   c   cells with word size   w   w   w   . 4  Notable results  Dynamic Partial Sums  The dynamic partial sum problem defines two operations    (  k  ,  v  )     k  v    (k,v)   which conceptually operation sets the value in an array   A   A   A   at index   k   k   k   to be   v   v   v   , and    (  k  )    k   (k)   which returns the sum of the values in   A   A   A   at indices   0   0    through   k   k   k   . Such an implementation would take    O   (  1  )       O  1    O(1)   time for  and    O   (  n  )       O  n    O(n)   time for . 5  Instead, if the values are stored as leaves in a tree whose inner nodes store the values of the subtree rooted at that node. In this structure  requires    O   (   log  n   )       O    n     O(\log n)   time to update each node in the leaf to root path, and  similarly requires    O   (   log  n   )       O    n     O(\log n)   time to traverse the tree from leaf to root summing the values of all subtrees left of the query index.  Mihai Pătraşcu used the cell-probe model and an information transfer argument to show that the partial sums problem requires    Ω   (   log  n   )       normal-Ω    n     \Omega\left(\log n\right)   time per operation. 6 7  Approximate Nearest Neighbor Searching  The exact Nearest neighbor search problem is to determine the closest in a set of input points to a given query point. An approximate version of this problem is often considered since many applications of this problem are in very high dimension spaces and solving the problem in high dimensions requires exponential time or space with respect to the dimension. 8  Chakrabarti and Regev proved that the approximate nearest neighbor search problem on the Hamming cube using polynomial storage and    d   O   (  1  )       superscript  d    O  1     d^{O(1)}   word size requires a worst-case query time of    Ω   (    log   log  d     log   log   log  d      )       normal-Ω        d          d        \Omega\left(\frac{\log\log d}{\log\log\log d}\right)   . This proof used the cell-probe model and information theoretic techniques for communication complexity.  External links   NIST's Dictionary of Algorithms and Data Structures entry on the cell-probe model   References  "  Category:Register machines     ↩  ↩  ↩  ↩  ↩        