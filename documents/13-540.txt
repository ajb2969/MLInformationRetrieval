   Elementary cellular automaton      Elementary cellular automaton   In mathematics and computability theory , an elementary cellular automaton is a one-dimensional cellular automaton where there are two possible states (labeled 0 and 1) and the rule to determine the state of a cell in the next generation depends only on the current state of the cell and its two immediate neighbors. As such it is one of the simplest possible models of computation. Nevertheless, there is an elementary cellular automaton ( rule 110 , defined below) which is capable of universal computation .  The numbering system  There are 8 = 2 3 possible configurations for a cell and its two immediate neighbors. The rule defining the cellular automaton must specify the resulting state for each of these possibilities so there are 256 = 2 2 3 possible elementary cellular automata. Stephen Wolfram proposed a scheme, known as the Wolfram code , to assign each rule a number from 0 to 255 which has become standard. Each possible current configuration is written in order, 111, 110, ..., 001, 000, and the resulting state for each of these configurations is written in the same order and interpreted as the binary representation of an integer. This number is taken to be the rule number of the automaton. For example, 110 d =96 d +14 d written in binary is 01101110 2 . So rule 110 is defined by the transition rule:      111   110   101   100   011   010   001   000   current pattern   P=(L,C,R)     0   1   1   0   1   1   1   0   new state for center cell   N 110 d =(C+R+C*R+L*C*R)%2     Reflections and complements  Although there are 256 possible rules, many of these are trivially equivalent to each other up to a simple transformation of the underlying geometry. The first such transformation is reflection through a vertical axis and the result of applying this transformation to a given rule is called the mirrored rule . These rules will exhibit the same behavior up to reflection through a vertical axis, and so are equivalent in a computational sense.  For example, if the definition of rule 110 is reflected through a vertical line, the following rule (rule 124) is obtained:      111   110   101   100   011   010   001   000   current pattern   P=(L,C,R)     0   1   1   1   1   1   0   0   new state for center cell   N 112 d +12 d =124 d =(L+C+L*C+L*C*R)%2     Rules which are the same as their mirrored rule are called amphichiral . Of the 256 elementary cellular automata, 64 are amphichiral.  The second such transformation is to exchange the roles of 0 and 1 in the definition. The result of applying this transformation to a given rule is called the complementary rule . For example, if this transformation is applied to rule 110, we get the following rule      current pattern   000   001   010   011   100   101   110   111       new state for center cell   1   0   0   1   0   0   0   1     and, after reordering, we discover that this is rule 137:      current pattern   111   110   101   100   011   010   001   000       new state for center cell   1   0   0   0   1   0   0   1     There are 16 rules which are the same as their complementary rules.  Finally, the previous two transformations can be applied successively to a rule to obtain the mirrored complementary rule. For example, the mirrored complementary rule of rule 110 is rule 193. There are 16 rules which are the same as their mirrored complementary rules.  Of the 256 elementary cellular automata, there are 88 which are inequivalent under these transformations.  Single 1 histories  One method used to study these automata is to follow its history with an initial state of all 0s except for a single cell with a 1. When the rule number is even (so that an input of 000 does not compute to a 1) it makes sense to interpret state at each time, t , as an integer expressed in binary, producing a sequence a ( t ) of integers. In many cases these sequences have simple, closed form expressions or have a generating function with a simple form. The following rules are notable:  Rule 28  The sequence generated is 1, 3, 5, 11, 21, 43, 85, 171, ... . This is the sequence of Jacobsthal numbers and has generating function       1  +   2  x      (   1  +  x   )    (   1  -   2  x    )          1    2  x        1  x     1    2  x       \frac{1+2x}{(1+x)(1-2x)}   .  It has the closed form expression       a   (  t  )    =    (    4  ⋅   2  t    -    (   -  1   )   t    )   /  3         a  t        normal-⋅  4   superscript  2  t     superscript    1   t    3     a(t)=(4\cdot 2^{t}-(-1)^{t})/3     Note that rule 156 generates the same sequence.  Rule 50  The sequence generated is 1, 5, 21, 85, 341, 1365, 5461, 21845, ... . This has generating function      1    (   1  -  x   )    (   1  -   4  x    )        1      1  x     1    4  x       \frac{1}{(1-x)(1-4x)}   .  It has the closed form expression       a   (  t  )    =    (    4  ⋅   4  t    -  1   )   /  3         a  t        normal-⋅  4   superscript  4  t    1   3     a(t)=(4\cdot 4^{t}-1)/3   .  Note that rules 58, 114, 122, 178, 186, 242 and 250 generate the same sequence.  Rule 54  The sequence generated is 1, 7, 17, 119, 273, 1911, 4369, 30583, ... . This has generating function       1  +   7  x      (   1  -   x  2    )    (   1  -   16   x  2     )          1    7  x        1   superscript  x  2      1    16   superscript  x  2        \frac{1+7x}{(1-x^{2})(1-16x^{2})}   .  It has the closed form expression       a   (  t  )    =    (     22  ⋅   4  t    -   6    (   -  4   )   t    -  4   +   3    (   -  1   )   t     )   /  15         a  t          normal-⋅  22   superscript  4  t      6   superscript    4   t    4     3   superscript    1   t     15     a(t)=(22\cdot 4^{t}-6(-4)^{t}-4+3(-1)^{t})/15   .  Rule 60  The sequence generated is 1, 3, 5, 15, 17, 51, 85, 255, ... . This can be obtained by taking successive rows of Pascal's triangle modulo 2 and interpreting them as integers in binary, which can be graphically represented by a Sierpinski triangle .  Rule 90  The sequence generated is 1, 5, 17, 85, 257, 1285, 4369, 21845, ... . This can be obtained by taking successive rows of Pascal's triangle modulo 2 and interpreting them as integers in base 4. Note that rules 18, 26, 82, 146, 154, 210 and 218 generate the same sequence.  Rule 94  The sequence generated is 1, 7, 27, 119, 427, 1879, 6827, 30039, ... . This can be expressed as       a   (  t  )    =   {      1  ,       if  t   =  0        7  ,       if  t   =  1          (   1  +   5  ⋅   4  n     )   /  3   ,       if  t  is even   >  0          (   10  +   11  ⋅   4  n     )   /  6   ,       if  t  is odd   >  1             a  t    cases  1      if  t   0   7      if  t   1       1   normal-⋅  5   superscript  4  n     3       if  t  is even   0       10   normal-⋅  11   superscript  4  n     6       if  t  is odd   1      a(t)=\begin{cases}1,&\mbox{if }t=0\\
 7,&\mbox{if }t=1\\
 (1+5\cdot 4^{n})/3,&\mbox{if }t\mbox{ is even }>0\\
 (10+11\cdot 4^{n})/6,&\mbox{if }t\mbox{ is odd }>1\end{cases}   .  This has generating function        (   1  +   2  x    )    (    1  +   5  x    -   16   x  4     )      (   1  -   x  2    )    (   1  -   16   x  2     )            1    2  x        1    5  x      16   superscript  x  4          1   superscript  x  2      1    16   superscript  x  2        \frac{(1+2x)(1+5x-16x^{4})}{(1-x^{2})(1-16x^{2})}   .  Rule 102  The sequence generated is 1, 6, 20, 120, 272, 1632, 5440, 32640, ... . This is simply the sequence generated by rule 60 (which is its mirror rule) multiplied by successive powers of 2.  Rule 110  Rule 150  The sequence generated is 1, 7, 21, 107, 273, 1911, 5189, 28123, ... . This can be obtained by taking the coefficients of the successive powers of (1+ x + x 2 ) modulo 2 and interpreting them as integers in binary.  Rule 158  The sequence generated is 1, 7, 29, 115, 477, 1843, 7645, 29491, ... . This has generating function        1  +   7  x   +   12   x  2     -   4   x  3       (   1  -   x  2    )    (   1  -   16   x  2     )            1    7  x     12   superscript  x  2       4   superscript  x  3         1   superscript  x  2      1    16   superscript  x  2        \frac{1+7x+12x^{2}-4x^{3}}{(1-x^{2})(1-16x^{2})}   .  Rule 188  The sequence generated is 1, 3, 5, 15, 29, 55, 93, 247, ... . This has generating function        1  +   3  x   +   4   x  2    +   12   x  3    +   8   x  4     -   8   x  5       (   1  -   x  2    )    (   1  -   16   x  4     )            1    3  x     4   superscript  x  2      12   superscript  x  3      8   superscript  x  4       8   superscript  x  5         1   superscript  x  2      1    16   superscript  x  4        \frac{1+3x+4x^{2}+12x^{3}+8x^{4}-8x^{5}}{(1-x^{2})(1-16x^{4})}   .  Rule 190  The sequence generated is 1, 7, 29, 119, 477, 1911, 7645, 30583, ... . This has generating function       1  +   3  x      (   1  -   x  2    )    (   1  -   4  x    )          1    3  x        1   superscript  x  2      1    4  x       \frac{1+3x}{(1-x^{2})(1-4x)}   .  Rule 220  The sequence generated is 1, 3, 7, 15, 31, 63, 127, 255, ... . This is the sequence of Mersenne numbers and has generating function      1    (   1  -  x   )    (   1  -   2  x    )        1      1  x     1    2  x       \frac{1}{(1-x)(1-2x)}   .  It has the closed form expression       a   (  t  )    =    2  ⋅   2  t    -  1         a  t      normal-⋅  2   superscript  2  t    1     a(t)=2\cdot 2^{t}-1   . Note that rule 252 generates the same sequence.  Rule 222  The sequence generated is 1, 7, 31, 127, 511, 2047, 8191, 32767, ... . This is every other entry in the sequence of Mersenne numbers and has generating function       1  +   2  x      (   1  -  x   )    (   1  -   4  x    )          1    2  x        1  x     1    4  x       \frac{1+2x}{(1-x)(1-4x)}   .  It has the closed form expression       a   (  t  )    =    2  ⋅   4  t    -  1         a  t      normal-⋅  2   superscript  4  t    1     a(t)=2\cdot 4^{t}-1   .  Note that rule 254 generates the same sequence.  Random initial state  A second way to investigate the behavior of these automata is to examine its history starting with a random state. This behavior can be better understood in terms of Wolfram classes. Wolfram gives the following examples as typical rules of each class. 1   Class 1: Cellular automata which rapidly converge to a uniform state. Examples are rules 0, 32, 160 and 232.  Class 2: Cellular automata which rapidly converge to a repetitive or stable state. Examples are rules 4, 108, 218 and 250.  Class 3: Cellular automata which appear to remain in a random state. Examples are rules 22, 30, 126, 150, 182.  Class 4: Cellular automata which form areas of repetitive or stable states, but also form structures that interact with each other in complicated ways. An example is rule 110 . Rule 110 has been shown to be capable of universal computation. 2   Each computed result is placed under that results' source creating a two-dimensional representation of the system's evolution. The 88 inequivalent rules are as follows, evolved from random initial conditions:  Image:Rule0rand.png|Rule 0 Image:Rule1rand.png|Rule 1 Image:Rule2rand.png|Rule 2 Image:Rule3rand.png|Rule 3 Image:Rule4rand.png|Rule 4 Image:Rule5rand.png|Rule 5 Image:Rule6rand.png|Rule 6 Image:Rule7rand.png|Rule 7 Image:Rule8rand.png|Rule 8 Image:Rule9rand.png|Rule 9 Image:Rule10rand.png|Rule 10 Image:Rule11rand.png|Rule 11 Image:Rule12rand.png|Rule 12 Image:Rule13rand.png|Rule 13 Image:Rule14rand.png|Rule 14 Image:Rule15rand.png|Rule 15 Image:Rule18rand.png|Rule 18 Image:Rule19rand.png|Rule 19 Image:Rule22rand.png|Rule 22 Image:Rule23rand.png|Rule 23 Image:Rule24rand.png|Rule 24 Image:Rule25rand.png|Rule 25 Image:Rule26rand.png|Rule 26 Image:Rule27rand.png|Rule 27 Image:Rule28rand.png|Rule 28 Image:Rule29rand.png|Rule 29 Image:Rule30rand.png| Rule 30 Image:Rule32rand.png|Rule 32 Image:Rule33rand.png|Rule 33 Image:Rule34rand.png|Rule 34 Image:Rule35rand.png|Rule 35 Image:Rule36rand.png|Rule 36 Image:Rule37rand.png|Rule 37 Image:Rule38rand.png|Rule 38 Image:Rule40rand.png|Rule 40 Image:Rule41rand.png|Rule 41 Image:Rule42rand.png|Rule 42 Image:Rule43rand.png|Rule 43 Image:Rule44rand.png|Rule 44 Image:Rule45rand.png|Rule 45 Image:Rule46rand.png|Rule 46 Image:Rule50rand.png|Rule 50 Image:Rule51rand.png|Rule 51 Image:Rule54rand.png|Rule 54 Image:Rule56rand.png|Rule 56 Image:Rule57rand.png|Rule 57 Image:Rule58rand.png|Rule 58 Image:Rule60rand.png|Rule 60 Image:Rule62rand.png|Rule 62 Image:Rule72rand.png|Rule 72 Image:Rule73rand.png|Rule 73 Image:Rule74rand.png|Rule 74 Image:Rule76rand.png|Rule 76 Image:Rule77rand.png|Rule 77 Image:Rule78rand.png|Rule 78 Image:Rule90rand.png| Rule 90 Image:Rule94rand.png|Rule 94 Image:Rule104rand.png|Rule 104 Image:Rule105rand.png|Rule 105 Image:Rule106rand.png|Rule 106 Image:Rule108rand.png|Rule 108 Image:Rule110rand.png| Rule 110 Image:Rule122rand.png|Rule 122 Image:Rule126rand.png|Rule 126 Image:Rule128rand.png|Rule 128 Image:Rule130rand.png|Rule 130 Image:Rule132rand.png|Rule 132 Image:Rule134rand.png|Rule 134 Image:Rule136rand.png|Rule 136 Image:Rule138rand.png|Rule 138 Image:Rule140rand.png|Rule 140 Image:Rule142rand.png|Rule 142 Image:Rule146rand.png|Rule 146 Image:Rule150rand.png|Rule 150 Image:Rule152rand.png|Rule 152 Image:Rule154rand.png|Rule 154 Image:Rule156rand.png|Rule 156 Image:Rule160rand.png|Rule 160 Image:Rule162rand.png|Rule 162 Image:Rule164rand.png|Rule 164 Image:Rule168rand.png|Rule 168 Image:Rule170rand.png|Rule 170 Image:Rule172rand.png|Rule 172 Image:Rule178rand.png|Rule 178 Image:Rule184rand.png| Rule 184 Image:Rule200rand.png|Rule 200 Image:Rule204rand.png|Rule 204 Image:Rule232rand.png|Rule 232  Unusual cases  In some cases the behavior of a cellular automaton is not immediately obvious. For example, for Rule 62, interacting structures develop as in a Class 4. But in these interactions at least one of the structures is annihilated so the automaton eventually enters a repetitive state and the cellular automaton is Class 2. 3  Rule 73 is Class 2 4 because any time there are two consecutive 1s surrounded by 0s, this feature is preserved in succeeding generations. This effectively creates walls which block the flow of information between different parts of the array. There are a finite number of possible configurations in the section between two walls so the automaton must eventually start repeating inside each section, though the period may be very long if the section is wide enough. These walls will form with probability 1 for completely random initial conditions. However, if the condition is added that the lengths of runs of consecutive 0s or 1s must always be odd, then the automaton displays Class 3 behavior since the walls can never form.  Rule 54 is Class 4, 5 but it remains unknown whether it is capable of universal computation. Interacting structures form, but structures that are useful for computation have yet to be found. 6  References                      External links   "Elementary Cellular Automata" at the Wolfram Atlas of Simple Programs  Elementary cellular automaton demonstration (requires JavaScript and a modern browser) (Link broken)  Alternative elementary cellular automaton demonstration in JavaScript    32 bytes long MS-DOS executable drawing by cellular automaton ( Rule 110 by default)    A showcase of all the rules picked at random   "  Category:Cellular automata     Stephan Wolfram, A New Kind of Science p223 ff. ↩  Rule 110 - Wolfram|Alpha ↩  Rule 62 - Wolfram|Alpha ↩  Rule 73 - Wolfram|Alpha ↩  Rule 54 - Wolfram|Alpha ↩  A New Kind of Science p697 ↩     