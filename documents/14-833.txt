   Dependence logic      Dependence logic   Dependence logic is a logical formalism, created by Jouko Väänänen, 1 which adds dependence atoms to the language of first-order logic . A dependence atom is an expression of the form     =   (    t  1   …   t  n    )       absent     subscript  t  1   normal-…   subscript  t  n      =\!\!(t_{1}\ldots t_{n})   , where     t  1   …   t  n        subscript  t  1   normal-…   subscript  t  n     t_{1}\ldots t_{n}   are terms, and corresponds to the statement that the value of     t   n     subscript  t  n    \!t_{n}   is functionally dependent on the values of     t  1   …   t   n  -  1         subscript  t  1   normal-…   subscript  t    n  1      t_{1}\ldots t_{n-1}   .  Dependence logic is a logic of imperfect information , like branching quantifier logic or independence-friendly logic : in other words, its game theoretic semantics can be obtained from that of first-order logic by restricting the availability of information to the players, thus allowing for non-linearly ordered patterns of dependence and independence between variables. However, dependence logic differs from these logics in that it separates the notions of dependence and independence from the notion of quantification.  Syntax  The syntax of dependence logic is an extension of that of first-order logic. For a fixed signature σ = ( S func , S rel , ar), the set of all well-formed dependence logic formulas is defined according to the following rules:  Terms  Terms in dependence logic are defined precisely as in first-order logic .  Atomic formulas  There are three types of atomic formulas in dependence logic:   A relational atom is an expression of the form    R   t  1   …   t  n       R   subscript  t  1   normal-…   subscript  t  n     Rt_{1}\ldots t_{n}   for any n-ary relation    R    R   \!R   in our signature and for any n-uple of terms     t  1   …   t  n        subscript  t  1   normal-…   subscript  t  n     t_{1}\ldots t_{n}   ;  An equality atom is an expression of the form      t   1   =   t  2        subscript  t  1    subscript  t  2     \!t_{1}=t_{2}   , for any two terms     t   1     subscript  t  1    \!t_{1}   and     t   2     subscript  t  2    \!t_{2}   ;  A dependence atom is an expression of the form     =   (    t  1   …   t  n    )       absent     subscript  t  1   normal-…   subscript  t  n      =\!\!(t_{1}\ldots t_{n})   , for any    n  ∈  ℕ      n  ℕ    n\in\mathbb{N}   and for any n-uple of terms     t  1   …   t  n        subscript  t  1   normal-…   subscript  t  n     t_{1}\ldots t_{n}   .   Nothing else is an atomic formula of dependence logic.  Relational and equality atoms are also called first order atoms .  Complex formulas and sentences  For a fixed signature σ, the set of all formulas    ϕ    ϕ   \!\phi   of dependence logic and their respective sets of free variables    Free   (  ϕ  )       Free  ϕ    \mbox{Free}(\phi)   are defined as follows:   Any atomic formula    ϕ    ϕ   \!\phi   is a formula, and    Free   (  ϕ  )       Free  ϕ    \mbox{Free}(\phi)   is the set of all variables occurring in it;  If    ϕ    ϕ   \!\phi   is a formula, so is    ¬  ϕ       ϕ    \lnot\phi   and     Free   (   ¬  ϕ   )    =   Free   (  ϕ  )          Free     ϕ      Free  ϕ     \mbox{Free}(\lnot\phi)=\mbox{Free}(\phi)   ;  If    ϕ    ϕ   \!\phi   and    ψ    ψ   \!\psi   are formulas, so is     ϕ   ∨  ψ      ϕ  ψ    \!\phi\vee\psi   and     Free   (   ϕ  ∨  ψ   )    =    Free   (  ϕ  )    ∪   Free   (  ψ  )           Free    ϕ  ψ        Free  ϕ     Free  ψ      \mbox{Free}(\phi\vee\psi)=\mbox{Free}(\phi)\cup\mbox{Free}(\psi)   ;  If    ϕ    ϕ   \!\phi   is a formula and    x    x   \!x   is a variable,    ∃   x  ϕ         x  ϕ     \!\exists x\phi   is also a formula and     Free   (   ∃   v  ϕ    )    =    Free   (  ϕ  )    \   {  v  }          Free      v  ϕ      normal-\    Free  ϕ    v      \mbox{Free}(\exists v\phi)=\mbox{Free}(\phi)\backslash\{v\}   .   Nothing is a dependence logic formula unless it can be obtained through a finite number of applications of these four rules.  A formula    ϕ    ϕ   \!\phi   such that     Free   (  ϕ  )    =  ∅        Free  ϕ      \mbox{Free}(\phi)=\emptyset   is a sentence of dependence logic.  Conjunction and universal quantification  In the above presentation of the syntax of dependence logic, conjunction and universal quantification are not treated as primitive operators; rather, they are defined in terms of disjunction and negation and existential quantification respectively, by means of De Morgan's Laws .  Therefore,     ϕ   ∧  ψ      ϕ  ψ    \!\phi\wedge\psi   is taken as a shorthand for     ¬    (    ¬  ϕ   ∨   ¬  ψ    )            ϕ      ψ      \!\lnot(\lnot\phi\vee\lnot\psi)   , and    ∀   x  ϕ      for-all    x  ϕ     \!\forall x\phi   is taken as a shorthand for     ¬    (   ∃   x   (   ¬  ϕ   )     )           x     ϕ       \!\lnot(\exists x(\lnot\phi))   .  Semantics  The team semantics for dependence logic is a variant of Wilfrid Hodges ' compositional semantics for IF logic . 2 3 There exist equivalent game-theoretic semantics for dependence logic, both in terms of imperfect information games and in terms of perfect information games.  Teams  Let     𝒜   =   (  A  ,  σ  ,  I  )       𝒜   A  σ  I     \!\mathcal{A}=(A,\sigma,I)   be a first-order structure and let    V  =   {    v  1   …   v  n    }       V      subscript  v  1   normal-…   subscript  v  n       V=\{v_{1}\ldots v_{n}\}   be a finite set of variables. Then a team over    𝒜    𝒜   \!\mathcal{A}   with domain    V    V   \!V   is a set of assignments over    𝒜    𝒜   \!\mathcal{A}   with domain    V    V   \!V   , that is, a set of functions    μ    μ   \!\mu   from    V    V   \!V   to    A    A   \!A   .  It may be helpful to visualize such a team as a database relation with attributes     v  1   …   v  n        subscript  v  1   normal-…   subscript  v  n     v_{1}\ldots v_{n}   and with only one data type, corresponding to the domain    A    A   \!A   of the structure: for example, if the team    X    X   \!X   consists of four assignments      μ   1   …   μ  4        subscript  μ  1   normal-…   subscript  μ  4     \!\mu_{1}\ldots\mu_{4}   with domain    {   v  1   ,   v  2   ,   v  3   }      subscript  v  1    subscript  v  2    subscript  v  3     \!\{v_{1},v_{2},v_{3}\}   then one may represent it as the relation              v   1     subscript  v  1    \!v_{1}           v   2     subscript  v  2    \!v_{2}           v   3     subscript  v  3    \!v_{3}               μ   1     subscript  μ  1    \!\mu_{1}            μ   1    (   v  1   )        subscript  μ  1    subscript  v  1     \!\mu_{1}(v_{1})            μ   1    (   v  2   )        subscript  μ  1    subscript  v  2     \!\mu_{1}(v_{2})            μ   1    (   v  3   )        subscript  μ  1    subscript  v  3     \!\mu_{1}(v_{3})             μ   2     subscript  μ  2    \!\mu_{2}            μ   2    (   v  1   )        subscript  μ  2    subscript  v  1     \!\mu_{2}(v_{1})            μ   2    (   v  2   )        subscript  μ  2    subscript  v  2     \!\mu_{2}(v_{2})            μ   2    (   v  3   )        subscript  μ  2    subscript  v  3     \!\mu_{2}(v_{3})             μ   3     subscript  μ  3    \!\mu_{3}            μ   3    (   v  1   )        subscript  μ  3    subscript  v  1     \!\mu_{3}(v_{1})            μ   3    (   v  2   )        subscript  μ  3    subscript  v  2     \!\mu_{3}(v_{2})            μ   3    (   v  3   )        subscript  μ  3    subscript  v  3     \!\mu_{3}(v_{3})             μ   4     subscript  μ  4    \!\mu_{4}            μ   4    (   v  1   )        subscript  μ  4    subscript  v  1     \!\mu_{4}(v_{1})            μ   4    (   v  2   )        subscript  μ  4    subscript  v  2     \!\mu_{4}(v_{2})            μ   4    (   v  3   )        subscript  μ  4    subscript  v  3     \!\mu_{4}(v_{3})          Positive and negative satisfaction  Team semantics can be defined in terms of two relations    𝒯    𝒯   \!\mathcal{T}   and   𝒞   𝒞   \mathcal{C}   between structures, teams and formulas.  Given a structure   𝒜   𝒜   \mathcal{A}   , a team   X   X   X   over it and a dependence logic formula    ϕ    ϕ   \!\phi   whose free variables are contained in the domain of    X    X   \!\!X   , if     (  𝒜  ,  X  ,  ϕ  )   ∈  𝒯       𝒜  X  ϕ   𝒯    \!(\mathcal{A},X,\phi)\in\mathcal{T}   we say that    X    X   \!X   is a trump for    ϕ    ϕ   \!\phi   in    𝒜    𝒜   \!\mathcal{A}   , and we write that     𝒜    ⊧  X  +   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{+}\phi   ; and analogously, if     (  𝒜  ,  X  ,  ϕ  )   ∈  𝒞       𝒜  X  ϕ   𝒞    \!(\mathcal{A},X,\phi)\in\mathcal{C}   we say that    X    X   \!X   is a cotrump for    ϕ    ϕ   \!\phi   in    𝒜    𝒜   \!\mathcal{A}   , and we write that     𝒜    ⊧  X  -   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{-}\phi   .  If     𝒜    ⊧  X  +   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{+}\phi   one can also say that    ϕ    ϕ   \!\phi   is positively satisfied by    X    X   \!X   in   𝒜   𝒜   \mathcal{A}   , and if instead     𝒜    ⊧  X  -   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{-}\phi   one can say that    ϕ    ϕ   \!\phi   is negatively satisfied by    X    X   \!X   in   𝒜   𝒜   \mathcal{A}   .  The necessity of considering positive and negative satisfaction separately is a consequence of the fact that in dependence logic, as in the logic of branching quantifiers or in IF logic , the law of the excluded middle does not hold; alternatively, one may assume that all formulas are in negation normal form, using De Morgan's relations in order to define universal quantification and conjunction from existential quantification and disjunction respectively, and consider positive satisfaction alone.  Given a sentence    ϕ    ϕ   \!\phi   , we say that    ϕ    ϕ   \!\phi   is true in    𝒜    𝒜   \!\mathcal{A}   if and only if     𝒜    ⊧   {  ∅  }   +   ϕ      superscript   subscript  models        𝒜  ϕ    \!\mathcal{A}\models_{\{\emptyset\}}^{+}\phi   , and we say that    ϕ    ϕ   \!\phi   is false in    𝒜    𝒜   \!\mathcal{A}   if and only if     𝒜    ⊧   {  ∅  }   -   ϕ      superscript   subscript  models        𝒜  ϕ    \!\mathcal{A}\models_{\{\emptyset\}}^{-}\phi   .  Semantic rules  As for the case of Alfred Tarski 's satisfiability relation for first-order formulas, the positive and negative satisfiability relations of the team semantics for dependence logic are defined by structural induction over the formulas of the language. Since the negation operator interchanges positive and negative satisfiability, the two inductions corresponding to    ⊧  +     superscript  models     \!\models^{+}   and    ⊧  -     superscript  models     \!\models^{-}   need to be performed simultaneously:  Positive satisfiability        𝒜    ⊧  X  +    R   t  1   …   t  n        superscript   subscript  models  X     𝒜    R   subscript  t  1   normal-…   subscript  t  n      \!\mathcal{A}\models_{X}^{+}Rt_{1}\ldots t_{n}   if and only if      R    R   \!R   is a n-ary symbol in the signature of    𝒜    𝒜   \!\mathcal{A}   ;  All variables occurring in the terms      t   1   …   t  n        subscript  t  1   normal-…   subscript  t  n     \!t_{1}\ldots t_{n}   are in the domain of    X    X   \!X   ;  For every assignment     μ   ∈  X      μ  X    \!\mu\in X   , the evaluation of the tuple    (    t  1   …   t  n    )       subscript  t  1   normal-…   subscript  t  n     \!(t_{1}\ldots t_{n})   according to    μ    μ   \!\mu   is in the interpretation of    R    R   \!R   in    𝒜    𝒜   \!\mathcal{A}   ;        𝒜    ⊧  X  +    t  1   =   t  2         superscript   subscript  models  X     𝒜   subscript  t  1         subscript  t  2      \!\mathcal{A}\models_{X}^{+}t_{1}=t_{2}   if and only if  All variables occurring in the terms     t   1     subscript  t  1    \!t_{1}   and     t   2     subscript  t  2    \!t_{2}   are in the domain of    X    X   \!X   ;  For every assignment     μ   ∈  X      μ  X    \!\mu\in X   , the evaluations of     t   1     subscript  t  1    \!t_{1}   and     t   2     subscript  t  2    \!t_{2}   according to    𝒜    𝒜   \!\mathcal{A}   are the same;        𝒜    ⊧  X  +   =   (   t  1   …   t  n   )      fragments  A   superscript   subscript  models  X       fragments  normal-(   subscript  t  1   normal-…   subscript  t  n   normal-)     \!\mathcal{A}\models_{X}^{+}=\!\!(t_{1}\ldots t_{n})   if and only if any two assignments      s   ,   s  ′    ∈  X       s   superscript  s  normal-′    X    \!s,s^{\prime}\in X   whose evaluations of the tuple    (    t  1   …   t   n  -  1     )       subscript  t  1   normal-…   subscript  t    n  1      \!(t_{1}\ldots t_{n-1})   coincide assign the same value to     t   n     subscript  t  n    \!t_{n}   ;       𝒜    ⊧  X  +    ¬  ϕ       superscript   subscript  models  X     𝒜     ϕ     \!\mathcal{A}\models_{X}^{+}\lnot\phi   if and only if     𝒜    ⊧  X  -   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{-}\phi   ;       𝒜    ⊧  X  +    ϕ  ∨  ψ       superscript   subscript  models  X     𝒜    ϕ  ψ     \!\mathcal{A}\models_{X}^{+}\phi\vee\psi   if and only if there exist teams    Y    Y   \!Y   and    Z    Z   \!Z   such that      X  =   Y  ∪  Z       X    Y  Z     X=Y\cup Z   '       𝒜    ⊧  Y  +   ϕ      superscript   subscript  models  Y     𝒜  ϕ    \!\mathcal{A}\models_{Y}^{+}\phi   ;       𝒜    ⊧  Z  +   ψ      superscript   subscript  models  Z     𝒜  ψ    \!\mathcal{A}\models_{Z}^{+}\psi   ;        𝒜    ⊧  X  +    ∃   x  ϕ        superscript   subscript  models  X     𝒜      x  ϕ      \!\mathcal{A}\models_{X}^{+}\exists x\phi   if and only if there exists a function    F    F   \!F   from    X    X   \!X   to the domain of    𝒜    𝒜   \!\mathcal{A}   such that     𝒜    ⊧   X   [   F  /  x   ]    +   ϕ      superscript   subscript  models    X   delimited-[]    F  x        𝒜  ϕ    \!\mathcal{A}\models_{X[F/x]}^{+}\phi   , where      X    [   F  /  x   ]    =   {   s   [    F   (  s  )    /  x   ]    :   s  ∈  X   }         X   delimited-[]    F  x      conditional-set    s   delimited-[]      F  s   x       s  X      \!X[F/x]=\{s[F(s)/x]:s\in X\}   .   Negative satisfiability        𝒜    ⊧  X  -    R   t  1   …   t  n        superscript   subscript  models  X     𝒜    R   subscript  t  1   normal-…   subscript  t  n      \!\mathcal{A}\models_{X}^{-}Rt_{1}\ldots t_{n}   if and only if      R    R   \!R   is a n-ary symbol in the signature of    𝒜    𝒜   \!\mathcal{A}   ;  All variables occurring in the terms      t   1   …   t  n        subscript  t  1   normal-…   subscript  t  n     \!t_{1}\ldots t_{n}   are in the domain of    X    X   \!X   ;  For every assignment     μ   ∈  X      μ  X    \!\mu\in X   , the evaluation of the tuple    (    t  1   …   t  n    )       subscript  t  1   normal-…   subscript  t  n     \!(t_{1}\ldots t_{n})   according to    μ    μ   \!\mu   is not in the interpretation of    R    R   \!R   in    𝒜    𝒜   \!\mathcal{A}   ;        𝒜    ⊧  X  -    t  1   =   t  2         superscript   subscript  models  X     𝒜   subscript  t  1         subscript  t  2      \!\mathcal{A}\models_{X}^{-}t_{1}=t_{2}   if and only if  All variables occurring in the terms     t   1     subscript  t  1    \!t_{1}   and     t   2     subscript  t  2    \!t_{2}   are in the domain of    X    X   \!X   ;  For every assignment     μ   ∈  X      μ  X    \!\mu\in X   , the evaluations of     t   1     subscript  t  1    \!t_{1}   and     t   2     subscript  t  2    \!t_{2}   according to    𝒜    𝒜   \!\mathcal{A}   are different;        𝒜    ⊧  X  -   =   (   t  1   …   t  n   )      fragments  A   superscript   subscript  models  X       fragments  normal-(   subscript  t  1   normal-…   subscript  t  n   normal-)     \!\mathcal{A}\models_{X}^{-}=\!\!(t_{1}\ldots t_{n})   if and only if    X    X   \!X   is the empty team;       𝒜    ⊧  X  -    ¬  ϕ       superscript   subscript  models  X     𝒜     ϕ     \!\mathcal{A}\models_{X}^{-}\lnot\phi   if and only if     𝒜    ⊧  X  +   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{+}\phi   ;       𝒜    ⊧  X  -    ϕ  ∨  ψ       superscript   subscript  models  X     𝒜    ϕ  ψ     \!\mathcal{A}\models_{X}^{-}\phi\vee\psi   if and only if     𝒜    ⊧  X  -   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{-}\phi   and     𝒜    ⊧  X  -   ψ      superscript   subscript  models  X     𝒜  ψ    \!\mathcal{A}\models_{X}^{-}\psi   ;       𝒜    ⊧  X  -    ∃   x  ϕ        superscript   subscript  models  X     𝒜      x  ϕ      \!\mathcal{A}\models_{X}^{-}\exists x\phi   if and only if     𝒜    ⊧   X   [   A  /  x   ]    -   ϕ      superscript   subscript  models    X   delimited-[]    A  x        𝒜  ϕ    \!\mathcal{A}\models_{X[A/x]}^{-}\phi   , where      X    [   A  /  x   ]    =   {   s   [   m  /  x   ]    :   s  ∈  A   }         X   delimited-[]    A  x      conditional-set    s   delimited-[]    m  x       s  A      \!X[A/x]=\{s[m/x]:s\in A\}   and    A    A   \!A   is the domain of    𝒜    𝒜   \!\mathcal{A}   .   Dependence logic and other logics  Dependence logic and first-order logic  Dependence logic is a conservative extension of first-order logic: 4 in other words, for every first order sentence    ϕ    ϕ   \!\phi   and structure    𝒜    𝒜   \!\mathcal{A}   we have that     𝒜    ⊧   {  ∅  }   +   ϕ      superscript   subscript  models        𝒜  ϕ    \!\mathcal{A}\models_{\{\emptyset\}}^{+}\phi   if and only if    ϕ    ϕ   \!\phi   is true in    𝒜    𝒜   \!\mathcal{A}   according to the usual first order semantics. Furthermore, for any first order formula     ϕ    ϕ   \!\phi   ,     𝒜    ⊧  X  +   ϕ      superscript   subscript  models  X     𝒜  ϕ    \!\mathcal{A}\models_{X}^{+}\phi   if and only if all assignments     μ   ∈  X      μ  X    \!\mu\in X   satisfy    ϕ    ϕ   \!\phi   in    𝒜    𝒜   \!\mathcal{A}   according to the usual first order semantics.  However, dependence logic is strictly more expressive than first order logic: 5 for example, the sentence      ∃  z  ∀   x  1   ∀   x  2   ∃   y  1   ∃   y  2    (  =   (   x  1   ,   y  1   )   ∧  =   (   x  2   ,   y  2   )   ∧   (   x  1   =   x  2   ↔   y  1   =   y  2   )   ∧   y  1   ≠  z  )      fragments   z  for-all   subscript  x  1   for-all   subscript  x  2     subscript  y  1     subscript  y  2    fragments  normal-(    fragments  normal-(   subscript  x  1   normal-,   subscript  y  1   normal-)      fragments  normal-(   subscript  x  2   normal-,   subscript  y  2   normal-)     fragments  normal-(   subscript  x  1     subscript  x  2   normal-↔   subscript  y  1     subscript  y  2   normal-)     subscript  y  1    z  normal-)     \!\exists z\forall x_{1}\forall x_{2}\exists y_{1}\exists y_{2}(=\!\!(x_{1},y_%
 {1})\wedge=\!\!(x_{2},y_{2})\wedge(x_{1}=x_{2}\leftrightarrow y_{1}=y_{2})%
 \wedge y_{1}\not=z)   is true in a model   𝒜   𝒜   \mathcal{A}   if and only if the domain of this model is infinite, even though no first order formula    ϕ    ϕ   \!\phi   has this property.  Dependence logic and second-order logic  Every dependence logic sentence is equivalent to some sentence in the existential fragment of second-order logic, 6 that is, to some second-order sentence of the form      ∃    R  1   …   ∃    R  n   ψ   (    R  1   …   R  n    )             subscript  R  1   normal-…       subscript  R  n   ψ     subscript  R  1   normal-…   subscript  R  n         \!\exists R_{1}\ldots\exists R_{n}\psi(R_{1}\ldots R_{n})     where     ψ    (    R  1   …   R  n    )       ψ     subscript  R  1   normal-…   subscript  R  n      \!\psi(R_{1}\ldots R_{n})   does not contain second-order quantifiers. Conversely, every second-order sentence in the above form is equivalent to some dependence logic sentence. 7  As for open formulas, dependence logic corresponds to the downwards monotone fragment of existential second-order logic, in the sense that a nonempty class of teams is definable by a dependence logic formula if and only if the corresponding class of relations is downwards monotone and definable by an existential second-order formula. 8  Dependence logic and branching quantifiers  Branching quantifiers are expressible in terms of dependence atoms: for example, the expression        (    Q  H    x  1    ,   x  2   ,   y  1   ,   y  2   )   ϕ   (   x  1   ,   x  2   ,   y  1   ,   y  2   )    ≡    (      ∀    x  1    ∃   y  1           ∀    x  2    ∃   y  2         )   ϕ   (   x  1   ,   x  2   ,   y  1   ,   y  2   )              subscript  Q  H    subscript  x  1     subscript  x  2    subscript  y  1    subscript  y  2    ϕ    subscript  x  1    subscript  x  2    subscript  y  1    subscript  y  2          for-all     subscript  x  1      subscript  y  1         for-all     subscript  x  2      subscript  y  2        ϕ    subscript  x  1    subscript  x  2    subscript  y  1    subscript  y  2       (Q_{H}x_{1},x_{2},y_{1},y_{2})\phi(x_{1},x_{2},y_{1},y_{2})\equiv\begin{%
 pmatrix}\forall x_{1}\exists y_{1}\\
 \forall x_{2}\exists y_{2}\end{pmatrix}\phi(x_{1},x_{2},y_{1},y_{2})   is equivalent to the dependence logic sentence    ∀   x  1   ∃   y  1   ∀   x  2   ∃   y  2    (  =   (   x  1   ,   y  1   )   ∧  =   (   x  2   ,   y  2   )   ∧  ϕ  )      fragments  for-all   subscript  x  1     subscript  y  1   for-all   subscript  x  2     subscript  y  2    fragments  normal-(    fragments  normal-(   subscript  x  1   normal-,   subscript  y  1   normal-)      fragments  normal-(   subscript  x  2   normal-,   subscript  y  2   normal-)    ϕ  normal-)     \forall x_{1}\exists y_{1}\forall x_{2}\exists y_{2}(=\!\!(x_{1},y_{1})\wedge=%
 \!\!(x_{2},y_{2})\wedge\phi)   , in the sense that the former expression is true in a model if and only if the latter expression is true.  Conversely, any dependence logic sentence is equivalent to some sentence in the logic of branching quantifiers, since all existential second-order sentences are expressible in branching quantifier logic. 9 10  Dependence logic and IF logic  Any dependence logic sentence is logically equivalent to some IF logic sentence, and vice versa. 11  However, the issue is subtler when it comes to open formulas. Translations between IF logic and dependence logic formulas, and vice versa, exist as long as the domain of the team is fixed: in other words, for all sets of variables     V   =   {    v  1   …   v  n    }       V      subscript  v  1   normal-…   subscript  v  n       \!V=\{v_{1}\ldots v_{n}\}   and all IF logic formulas    ϕ    ϕ   \!\phi   with free variables in    V    V   \!V   there exists a dependence logic formula     ϕ   D     superscript  ϕ  D    \!\phi^{D}   such that       𝒜   ⊧  X  +   ϕ   ⇔   𝒜   ⊧  X  +    ϕ  D       normal-⇔    superscript   subscript  models  X     𝒜  ϕ     superscript   subscript  models  X     𝒜   superscript  ϕ  D      \mathcal{A}\models_{X}^{+}\phi\Leftrightarrow\mathcal{A}\models_{X}^{+}\phi^{D}   for all structures   𝒜   𝒜   \mathcal{A}   and for all teams    X    X   \!X   with domain    V    V   \!V   , and conversely, for every dependence logic formula    ψ    ψ   \!\psi   with free variables in    V    V   \!V   there exists an IF logic formula     ψ   I     superscript  ψ  I    \!\psi^{I}   such that       𝒜   ⊧  X  +   ψ   ⇔   𝒜   ⊧  X  +    ψ  I       normal-⇔    superscript   subscript  models  X     𝒜  ψ     superscript   subscript  models  X     𝒜   superscript  ψ  I      \mathcal{A}\models_{X}^{+}\psi\Leftrightarrow\mathcal{A}\models_{X}^{+}\psi^{I}   for all structures   𝒜   𝒜   \mathcal{A}   and for all teams    X    X   \!X   with domain    V    V   \!V   . These translations cannot be compositional. 12  Properties  Dependence logic formulas are downwards closed : if     𝒜    ⊧  X   ϕ      subscript  models  X   𝒜  ϕ    \!\mathcal{A}\models_{X}\phi   and     Y   ⊆  X      Y  X    \!Y\subseteq X   then     𝒜    ⊧  Y   ψ      subscript  models  Y   𝒜  ψ    \!\mathcal{A}\models_{Y}\psi   . Furthermore, the empty team (but not the team containing the empty assignment) satisfies all formulas of Dependence Logic, both positively and negatively.  The law of the excluded middle fails in dependence logic: for example, the formula    ∃  y   (  =   (  y  )   ∧  y  =  x  )      fragments   y   fragments  normal-(    fragments  normal-(  y  normal-)    y   x  normal-)     \!\exists y(=\!\!(y)\wedge y=x)   is neither positively nor negatively satisfied by the team     X   =   {   (  x  :  0  )   ,   (  x  :  1  )   }      fragments  X    fragments  normal-{   fragments  normal-(  x  normal-:  0  normal-)   normal-,   fragments  normal-(  x  normal-:  1  normal-)   normal-}     \!X=\{(x:0),(x:1)\}   . Furthermore, disjunction is not idempotent and does not distribute over conjunction. 13  Both the compactness theorem and the Löwenheim-Skolem theorem are true for dependence logic. Craig's interpolation theorem also holds, but, due to the nature of negation in dependence logic, in a slightly modified formulation: if two dependence logic formulas   ϕ   ϕ   \phi   and   ψ   ψ   \psi   are contradictory , that is, it is never the case that both    ϕ    ϕ   \!\phi   and    ψ    ψ   \!\psi   hold in the same model, then there exists a first order sentence    θ    θ   \!\theta   in the common language of the two sentences such that    ϕ    ϕ   \!\phi   implies    θ    θ   \!\theta   and    θ    θ   \!\theta   is contradictory with    ψ    ψ   \!\psi   . 14  As IF logic, 15 Dependence logic can define its own truth operator: 16 more precisely, there exists a formula     τ    (  x  )       τ  x    \!\tau(x)   such that for every sentence    ϕ    ϕ   \!\phi   of dependence logic and all models    ℳ  ω     subscript  ℳ  ω    \mathcal{M}_{\omega}   which satisfy Peano's axioms , if     ϕ   ′    ′      superscript   superscript  ϕ  normal-′   normal-′    \!{}^{\prime}\phi^{\prime}   is the Gödel number of    ϕ    ϕ   \!\phi   then       ℳ  ω     ⊧   {  ∅  }   +    ϕ      subscript   superscript  models         subscript  ℳ  ω   ϕ    \mathcal{M}_{\omega}\models^{+}_{\{\emptyset\}}\!\phi   if and only if     ℳ  ω    ⊧   {  ∅  }   +   τ    (  ′    ϕ  ′   )   .     fragments   subscript  ℳ  ω    subscript   superscript  models        τ   fragments   superscript  normal-(  normal-′    superscript  ϕ  normal-′   normal-)   normal-.    \mathcal{M}_{\omega}\models^{+}_{\{\emptyset\}}\tau(^{\prime}\phi^{\prime}).     This does not contradict Tarski's undefinability theorem , since the negation of dependence logic is not the usual contradictory one.  Complexity  As a consequence of Fagin's theorem , the properties of finite structures definable in dependence logic correspond exactly to NP properties. Furthermore, Durand and Kontinen showed that restricting the number of universal quantifiers or the arity of dependence atoms in sentences gives rise to hierarchy theorems with respect to expressive power. 17  The inconsistency problem of dependence logic is semidecidable , and in fact equivalent to the inconsistency problem for first-order logic. However, the decision problem for dependence logic is non- arithmetical , and is in fact complete with respect to the    Π  2     subscript  normal-Π  2    \Pi_{2}   class of the Levy hierarchy . 18  Variants and extensions  Team logic  Team logic 19 extends dependence logic with a contradictory negation      ∼  ϕ     similar-to  absent  ϕ    \sim\!\!\phi   . Its expressive power is equivalent to that of full second-order logic. 20  Modal dependence logic  The dependence atom, or a suitable variant thereof, can be added to the language of modal logic , thus obtaining modal dependence logic . 21 22 23  Intuitionistic dependence logic  As it is, dependence logic lacks an implication. The intuitionistic implication     ϕ  →  ψ     normal-→  ϕ  ψ    \phi\rightarrow\psi   , whose name derives from the similarity between its definition and that of the implication of intuitionistic logic , can be defined as follows: 24       𝒜    ⊧  X   ϕ  →  ψ        subscript  models  X   𝒜  ϕ    normal-→    ψ     \!\mathcal{A}\models_{X}\phi\rightarrow\psi   if and only if for all     Y   ⊆  X      Y  X    \!Y\subseteq X   such that     𝒜    ⊧  Y   ϕ      subscript  models  Y   𝒜  ϕ    \!\mathcal{A}\models_{Y}\phi   it holds that     𝒜    ⊧  Y   ψ      subscript  models  Y   𝒜  ψ    \!\mathcal{A}\models_{Y}\psi   .  Intuitionistic dependence logic, that is, dependence logic supplemented with the intuitionistic implication, is equivalent to second-order logic. 25  Independence logic  Instead of dependence atoms, independence logic adds to the language of first-order logic independence atoms      t  1   →    ⊥    t  3   →      t  2   →       subscript  bottom   normal-→   subscript  t  3      normal-→   subscript  t  1     normal-→   subscript  t  2      \vec{t_{1}}\bot_{\vec{t_{3}}}\vec{t_{2}}   where     t  1   →     normal-→   subscript  t  1     \vec{t_{1}}   ,     t  2   →     normal-→   subscript  t  2     \vec{t_{2}}   and     t  3   →     normal-→   subscript  t  3     \vec{t_{3}}   are tuples of terms. The semantics of these atoms is defined as follows:      𝒜   ⊧  X      t  1   →    ⊥    t  3   →      t  2   →        subscript  models  X   𝒜    subscript  bottom   normal-→   subscript  t  3      normal-→   subscript  t  1     normal-→   subscript  t  2       \mathcal{A}\models_{X}\vec{t_{1}}\bot_{\vec{t_{3}}}\vec{t_{2}}   if and only if for all     s  ,   s  ′    ∈  X       s   superscript  s  normal-′    X    s,s^{\prime}\in X   with       t  3   →    ⟨  s  ⟩    =     t  3   →    ⟨   s  ′   ⟩           normal-→   subscript  t  3     delimited-⟨⟩  s       normal-→   subscript  t  3     delimited-⟨⟩   superscript  s  normal-′       \vec{t_{3}}\langle s\rangle=\vec{t_{3}}\langle s^{\prime}\rangle   there exists     s  ′′   ∈  X       superscript  s  ′′   X    s^{\prime\prime}\in X   such that       t  3   →    ⟨   s  ′′   ⟩    =     t  3   →    ⟨  s  ⟩           normal-→   subscript  t  3     delimited-⟨⟩   superscript  s  ′′        normal-→   subscript  t  3     delimited-⟨⟩  s      \vec{t_{3}}\langle s^{\prime\prime}\rangle=\vec{t_{3}}\langle s\rangle   ,       t  1   →    ⟨   s  ′′   ⟩    =     t  1   →    ⟨  s  ⟩           normal-→   subscript  t  1     delimited-⟨⟩   superscript  s  ′′        normal-→   subscript  t  1     delimited-⟨⟩  s      \vec{t_{1}}\langle s^{\prime\prime}\rangle=\vec{t_{1}}\langle s\rangle   and       t  2   →    ⟨   s  ′′   ⟩    =     t  2   →    ⟨   s  ′   ⟩           normal-→   subscript  t  2     delimited-⟨⟩   superscript  s  ′′        normal-→   subscript  t  2     delimited-⟨⟩   superscript  s  normal-′       \vec{t_{2}}\langle s^{\prime\prime}\rangle=\vec{t_{2}}\langle s^{\prime}\rangle   . Independence logic corresponds to existential second-order logic, in the sense that a non-empty class of teams is definable by an independence logic formula if and only if the corresponding class of relations is definable by an existential second-order formula. 26 Therefore, on the level of open formulas, independence logic is strictly stronger in expressive power than dependence logic. However, on the level of sentences these logics are equivalent. 27  Inclusion/exclusion logic  Inclusion/exclusion logic extends first-order logic with inclusion atoms      t  1   →   ⊆    t  2   →        normal-→   subscript  t  1     normal-→   subscript  t  2      \vec{t_{1}}\subseteq\vec{t_{2}}   and exclusion atoms      t  1   →   ∣    t  2   →      fragments   normal-→   subscript  t  1    normal-∣   normal-→   subscript  t  2      \vec{t_{1}}\mid\vec{t_{2}}   where in both formulas     t  1   →     normal-→   subscript  t  1     \vec{t_{1}}   and     t  2   →     normal-→   subscript  t  2     \vec{t_{2}}   are term tuples of the same length. The semantics of these atoms is defined as follows:       𝒜   ⊧  X     t  1   →   ⊆    t  2   →         subscript  models  X   𝒜   normal-→   subscript  t  1          normal-→   subscript  t  2       \mathcal{A}\models_{X}\vec{t_{1}}\subseteq\vec{t_{2}}   if and only if for all    s  ∈  X      s  X    s\in X   there exists     s  ′   ∈  X       superscript  s  normal-′   X    s^{\prime}\in X   such that       t  1   →    ⟨  s  ⟩    =     t  2   →    ⟨   s  ′   ⟩           normal-→   subscript  t  1     delimited-⟨⟩  s       normal-→   subscript  t  2     delimited-⟨⟩   superscript  s  normal-′       \vec{t_{1}}\langle s\rangle=\vec{t_{2}}\langle s^{\prime}\rangle   ;      𝒜   ⊧  X     t  1   →   ∣    t  2   →      fragments  A   subscript  models  X    normal-→   subscript  t  1    normal-∣   normal-→   subscript  t  2      \mathcal{A}\models_{X}\vec{t_{1}}\mid\vec{t_{2}}   if and only if for all     s  ,   s  ′    ∈  X       s   superscript  s  normal-′    X    s,s^{\prime}\in X   it holds that       t  1   →    ⟨  s  ⟩    ≠     t  2   →    ⟨   s  ′   ⟩           normal-→   subscript  t  1     delimited-⟨⟩  s       normal-→   subscript  t  2     delimited-⟨⟩   superscript  s  normal-′       \vec{t_{1}}\langle s\rangle\neq\vec{t_{2}}\langle s^{\prime}\rangle   .   Inclusion/exclusion logic has the same expressive power as independence logic, already on the level of open formulas. 28 Inclusion logic and exclusion logic are obtained by adding only inclusion atoms or exclusion atoms to first-order logic, respectively. Inclusion logic sentences correspond in expressive power to greatest fixed-point logic sentences; hence inclusion logic captures (least) fixed-point logic on finite models, and PTIME over finite ordered models. 29 Exclusion logic in turn corresponds to dependence logic in expressive power. 30  Generalized quantifiers  Another way of extending dependence logic is to add some generalized quantifiers to the language of dependence logic. Very recently there has been some study of dependence logic with monotone generalized quantifiers 31 and dependence logic with a certain majority quantifier, the latter leading to a new descriptive complexity characterization of the counting hierarchy. 32  See also   Game semantics  Branching quantifier  Independence-friendly logic   External links   Special issue of Studia Logica on "Dependence and Independence in Logic", containing a number of articles on Dependence Logic  Presentations in Academy Colloquium Dependence Logic, Amsterdam, 2014   Notes  References                       "  Category:Systems of formal logic     Väänänen 2007 ↩  Hodges 1997 ↩  Väänänen 2007, §3.2 ↩  Väänänen 2007, §3.2 ↩  Väänänen 2007, §4 ↩  Väänänen 2007, §6.1 ↩  Väänänen 2007, §6.3 ↩  Kontinen and Väänänen 2009 ↩  Enderton 1970 ↩  Walkoe 1970 ↩  Väänänen 2007, §3.6 ↩  Kontinen and Väänänen 2009 bis ↩  Väänänen 2007, §3 ↩  Väänänen 2007, §6.2 ↩  Hintikka 2002 ↩  Väänänen 2007, §6.4 ↩  Durand and Kontinen ↩  Väänänen 2007, §7 ↩  Väänänen 2007, §8 ↩  Kontinen and Nurmi 2009 ↩  Sevenster 2009 ↩  Väänänen 2008 ↩  Lohmann and Vollmer 2010 ↩  Abramsky and Väänänen 2009 ↩  Yang 2010 ↩  Galliani 2012 ↩  Grädel and Väänänen ↩  Galliani 2012 ↩  Galliani and Hella 2013 ↩  Galliani 2012 ↩  Engström ↩  Durand, Ebbing, Kontinen, Vollmer 2011 ↩     