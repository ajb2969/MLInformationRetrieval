


Lanczos approximation




Lanczos approximation

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In mathematics, the Lanczos approximation is a method for computing the Gamma function numerically, published by Cornelius Lanczos in 1964. It is a practical alternative to the more popular Stirling's approximation for calculating the Gamma function with fixed precision.
Introduction
The Lanczos approximation consists of the formula



for the Gamma function, with



Here g is a constant that may be chosen arbitrarily subject to the restriction that Re(z) > 1/2.1 The coefficients p, which depend on g, are slightly more difficult to calculate (see below). Although the formula as stated here is only valid for arguments in the right complex half-plane, it can be extended to the entire complex plane by the reflection formula,



The series A is convergent, and may be truncated to obtain an approximation with the desired precision. By choosing an appropriate g (typically a small integer), only some 5-10 terms of the series are needed to compute the Gamma function with typical single or double floating-point precision. If a fixed g is chosen, the coefficients can be calculated in advance and the sum is recast into the following form:



Thus computing the Gamma function becomes a matter of evaluating only a small number of elementary functions and multiplying by stored constants. The Lanczos approximation was popularized by Numerical Recipes, according to which computing the Gamma function becomes "not much more difficult than other built-in functions that we take for granted, such as sin x or ex". The method is also implemented in the GNU Scientific Library.
Coefficients
The coefficients are given by



with 
 
 
 
  denoting the (i, j)th element of the Chebyshev polynomial coefficient matrix which can be calculated recursively from the identities




















































Paul Godfrey describes how to obtain the coefficients and also the value of the truncated series A as a matrix product.
Derivation
Lanczos derived the formula from Leonhard Euler's integral



performing a sequence of basic manipulations to obtain



and deriving a series for the integral.
Simple implementation
The following implementation in the Python programming language works for complex arguments and typically gives 15 correct decimal places:
def gamma(z):             # great function from Wiki, but maybe could use memorization?
     epsilon = 0.0000001
     def withinepsilon(x):
         return abs(x - abs(x)) <= epsilon
 
     from cmath import sin,sqrt,pi,exp
 
     p = [ 676.5203681218851,   -1259.1392167224028,  771.32342877765313,
          -176.61502916214059,     12.507343278686905, -0.13857109526572012,
             9.9843695780195716e-6, 1.5056327351493116e-7]
     z = complex(z)
 
     # Reflection formula
     if z.real < 0.5:
         result = pi / (sin(pi*z) * gamma(1-z))
     else:
         z -= 1
         x = 0.99999999999980993
 
         for (i, pval) in enumerate(p):
             x += pval/(z+i+1)
 
         t = z + len(p) - 0.5
         result = sqrt(2*pi) * t**(z+0.5) * exp(-t) * x
 
     if withinepsilon(result.imag):
         return result.real
     return result
See also

Stirling's approximation
Spouge's approximation

References










"
Category:Gamma and related functions Category:Numerical analysis Category:Articles with example Python code



Pugh thesisâ†©



