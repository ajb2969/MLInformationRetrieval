   QR decomposition      QR decomposition   In linear algebra , a QR decomposition (also called a QR factorization ) of a matrix is a decomposition of a matrix A into a product A = QR of an orthogonal matrix  Q and an upper triangular matrix  R . QR decomposition is often used to solve the linear least squares problem, and is the basis for a particular eigenvalue algorithm , the QR algorithm .  If A has n  linearly independent columns, then the first n columns of Q form an orthonormal basis for the column space of A . More specifically, the first k columns of Q form an orthonormal basis for the span of the first k columns of A for any 1 ≤ k ≤ n . 1 The fact that any column k of A only depends on the first k columns of Q is responsible for the triangular form of R . 2  History  The QR algorithm for the computation of eigenvalues, which is based on the QR-decomposition, is considered to be one of the 10 most important algorithms of the 20th century. 3 It was independently discovered by British computer scientist John G. F. Francis in 1959, and Soviet mathematician Vera Kublanovskaya in 1961.  Definitions  Square matrix  Any real square matrix A may be decomposed as  $$A = QR, \,$$ where Q is an orthogonal matrix (its columns are orthogonal  unit vectors meaning Q T Q = I ) and R is an upper triangular matrix (also called right triangular matrix). If A is invertible , then the factorization is unique if we require that the diagonal elements of R be positive.  If instead A is a complex square matrix, then there is a decomposition A = QR where Q is a unitary matrix (so Q * Q = I ).  Rectangular matrix  More generally, we can factor a complex m × n matrix A , with m ≥ n , as the product of an m × m  unitary matrix  Q and an m × n upper triangular matrix R . As the bottom ( m − n ) rows of an m × n upper triangular matrix consist entirely of zeroes, it is often useful to partition R , or both R and Q :  $$A = QR = Q \begin{bmatrix} R_1 \\ 0 \end{bmatrix}
   =  \begin{bmatrix} Q_1, Q_2 \end{bmatrix} \begin{bmatrix} R_1 \\ 0 \end{bmatrix}
   = Q_1 R_1,$$ where R 1 is an n × n upper triangular matrix, 0 is an ( m − n )× n zero matrix, Q 1 is m × n , Q 2 is m ×( m − n ), and Q 1 and Q 2 both have orthogonal columns.  call Q 1 R 1 the thin QR factorization of A ; Trefethen and Bau call this the reduced QR factorization . 4 If A is of full rank  n and we require that the diagonal elements of R 1 are positive then R 1 and Q 1 are unique, but in general Q 2 is not. R 1 is then equal to the upper triangular factor of the Cholesky decomposition of A  A (= A T A if A is real).  QL, RQ and LQ decompositions  Analogously, we can define QL, RQ, and LQ decompositions, with L being a lower triangular matrix.  Computing the QR decomposition  There are several methods for actually computing the QR decomposition, such as by means of the Gram–Schmidt process , Householder transformations , or Givens rotations . Each has a number of advantages and disadvantages.  Using the Gram–Schmidt process  Consider the Gram–Schmidt process applied to the columns of the full column rank matrix $A=[\mathbf{a}_1, \cdots, \mathbf{a}_n]$ , with inner product  $\langle\mathbf{v},\mathbf{w}\rangle = \mathbf{v}^\top \mathbf{w}$ (or $\langle\mathbf{v},\mathbf{w}\rangle = \mathbf{v}^* \mathbf{w}$ for the complex case).  Define the projection :  $$\mathrm{proj}_{\mathbf{e}}\mathbf{a}
 = \frac{\left\langle\mathbf{e},\mathbf{a}\right\rangle}{\left\langle\mathbf{e},\mathbf{e}\right\rangle}\mathbf{e}$$ then:  $$\begin{align}
  \mathbf{u}_1 &= \mathbf{a}_1,
   & \mathbf{e}_1 &= {\mathbf{u}_1 \over \|\mathbf{u}_1\|} \\
  \mathbf{u}_2 &= \mathbf{a}_2-\mathrm{proj}_{\mathbf{u}_1}\,\mathbf{a}_2,
   & \mathbf{e}_2 &= {\mathbf{u}_2 \over \|\mathbf{u}_2\|} \\
  \mathbf{u}_3 &= \mathbf{a}_3-\mathrm{proj}_{\mathbf{u}_1}\,\mathbf{a}_3-\mathrm{proj}_{\mathbf{u}_2}\,\mathbf{a}_3,
   & \mathbf{e}_3 &= {\mathbf{u}_3 \over \|\mathbf{u}_3\|} \\
  & \vdots &&\vdots \\
  \mathbf{u}_k &= \mathbf{a}_k-\sum_{j=1}^{k-1}\mathrm{proj}_{\mathbf{u}_j}\,\mathbf{a}_k,
   &\mathbf{e}_k &= {\mathbf{u}_k\over\|\mathbf{u}_k\|}
 \end{align}$$  We then rearrange the equations above so that the $\mathbf{a}_i$ s are on the left, using the fact that the $\mathbf{e}_i$ are unit vectors:  $$\begin{align}
  \mathbf{a}_1 &= \langle\mathbf{e}_1,\mathbf{a}_1 \rangle \mathbf{e}_1  \\
  \mathbf{a}_2 &= \langle\mathbf{e}_1,\mathbf{a}_2 \rangle \mathbf{e}_1
   + \langle\mathbf{e}_2,\mathbf{a}_2 \rangle \mathbf{e}_2 \\
  \mathbf{a}_3 &= \langle\mathbf{e}_1,\mathbf{a}_3 \rangle \mathbf{e}_1
   + \langle\mathbf{e}_2,\mathbf{a}_3 \rangle \mathbf{e}_2
   + \langle\mathbf{e}_3,\mathbf{a}_3 \rangle \mathbf{e}_3 \\
  &\vdots \\
  \mathbf{a}_k &= \sum_{j=1}^{k} \langle \mathbf{e}_j, \mathbf{a}_k \rangle \mathbf{e}_j
 \end{align}$$ where $\langle\mathbf{e}_i,\mathbf{a}_i \rangle = \|\mathbf{u}_i\|$ . This can be written in matrix form:  $$A = Q R$$ where:  $$Q = \left[ \mathbf{e}_1, \cdots, \mathbf{e}_n\right] \qquad \text{and} \qquad
 R = \begin{pmatrix}
 \langle\mathbf{e}_1,\mathbf{a}_1\rangle & \langle\mathbf{e}_1,\mathbf{a}_2\rangle &  \langle\mathbf{e}_1,\mathbf{a}_3\rangle  & \ldots \\
 0                & \langle\mathbf{e}_2,\mathbf{a}_2\rangle                        &  \langle\mathbf{e}_2,\mathbf{a}_3\rangle  & \ldots \\
 0                & 0                                       & \langle\mathbf{e}_3,\mathbf{a}_3\rangle                          & \ldots \\
 \vdots           & \vdots                                  & \vdots                                    & \ddots \end{pmatrix}.$$  Example  Consider the decomposition of  $$A = 
 \begin{pmatrix}
 12 & -51 & 4 \\
 6 & 167 & -68 \\
 -4 & 24 & -41
 \end{pmatrix}
 .$$  Recall that an orthonormal matrix $Q$ has the property  $$\begin{matrix}
  Q^T \,Q = I.
 \end{matrix}$$  Then, we can calculate $Q$ by means of Gram–Schmidt as follows:  $$U = 
 \begin{pmatrix}
 \mathbf u_1 & \mathbf u_2 & \mathbf u_3
 \end{pmatrix}
 =
 \begin{pmatrix}
 12 & -69 & -58/5 \\
 6  & 158 & 6/5 \\
 -4 &  30 & -33
 \end{pmatrix};$$  $$Q = 
 \begin{pmatrix}
 \frac{\mathbf u_1}{\|\mathbf u_1\|} &
 \frac{\mathbf u_2}{\|\mathbf u_2\|} &
 \frac{\mathbf u_3}{\|\mathbf u_3\|}
 \end{pmatrix}
 =
 \begin{pmatrix}
      6/7    &    -69/175   &   -58/175   \\
      3/7    &    158/175   &     6/175   \\
     -2/7    &      6/35    &   -33/35
 \end{pmatrix}.$$  Thus, we have  $$\begin{matrix}
  Q^{T} A = Q^{T}Q\,R = R;
 \end{matrix}$$  $$\begin{matrix}
  R = Q^{T}A =
 \end{matrix}
 \begin{pmatrix}
     14  &  21          &            -14 \\
      0  & 175          &           -70 \\
      0  &   0          &          35
 \end{pmatrix}.$$  Relation to RQ decomposition  The RQ decomposition transforms a matrix A into the product of an upper triangular matrix R (also known as right-triangular) and an orthogonal matrix Q . The only difference from QR decomposition is the order of these matrices.  QR decomposition is Gram–Schmidt orthogonalization of columns of A , started from the first column.  RQ decomposition is Gram–Schmidt orthogonalization of rows of A , started from the last row.  Using Householder reflections  (Figure)  Householder reflection for QR-decomposition: The goal is to find a linear transformation that changes the vector $x$ into a vector of same length which is collinear to $e_1$ . We could use an orthogonal projection (Gram-Schmidt) but this will be numerically unstable if the vectors $x$ and $e_1$ are close to orthogonal. Instead, the Householder reflection reflects through the dotted line (chosen to bisect the angle between $x$ and $e_1$ ). The maximum angle with this transform is at most 45 degrees.   A Householder reflection (or Householder transformation ) is a transformation that takes a vector and reflects it about some plane or hyperplane . We can use this operation to calculate the QR factorization of an m -by- n matrix $A$ with m ≥ n .  Q can be used to reflect a vector in such a way that all coordinates but one disappear.  Let $\mathbf{x}$ be an arbitrary real m -dimensional column vector of $A$ such that $\|\mathbf{x}\| = |\alpha|$ for a scalar α . If the algorithm is implemented using floating-point arithmetic , then α should get the opposite sign as the k -th coordinate of $\mathbf{x}$ , where $x_k$ is to be the pivot coordinate after which all entries are 0 in matrix A 's final upper triangular form, to avoid loss of significance . In the complex case, set  $$\alpha = - \mathrm{e}^{\mathrm{i} \arg x_k} \|\mathbf{x}\|$$ and substitute transposition by conjugate transposition in the construction of Q below.  Then, where $\mathbf{e}_1$ is the vector (1,0,...,0) T , ||·|| is the Euclidean norm and $I$ is an m -by- m identity matrix, set  $$\mathbf{u} = \mathbf{x} - \alpha\mathbf{e}_1,$$  $$\mathbf{v} = {\mathbf{u}\over\|\mathbf{u}\|},$$  $$Q = I - 2 \mathbf{v}\mathbf{v}^T.$$  Or, if $A$ is complex  $$Q = I - (1+w)\mathbf{v}\mathbf{v}^H$$ , where $w = \mathbf{x}^H\mathbf{v}\mathbf{/}\mathbf{v}^H\mathbf{x}$   where $\mathbf{x}^H$ is the conjugate transpose (transjugate) of $\mathbf{x}$    $Q$ is an m -by- m Householder matrix and  $$Q\mathbf{x} = (\alpha, 0, \cdots, 0)^T.\,$$  This can be used to gradually transform an m -by- n matrix A to upper triangular form. First, we multiply A with the Householder matrix Q 1 we obtain when we choose the first matrix column for x . This results in a matrix Q 1 A with zeros in the left column (except for the first row).  $$Q_1A = \begin{bmatrix}
                    \alpha_1&\star&\dots&\star\\
                       0    &     &    &    \\
                    \vdots  &     &  A' &    \\
                       0    &     &     & \end{bmatrix}$$  This can be repeated for A ′ (obtained from Q 1 A by deleting the first row and first column), resulting in a Householder matrix Q ′ 2 . Note that Q ′ 2 is smaller than Q 1 . Since we want it really to operate on Q 1 A instead of A ′ we need to expand it to the upper left, filling in a 1, or in general:  $$Q_k = \begin{pmatrix}
                   I_{k-1} & 0\\
                    0  & Q_k'\end{pmatrix}.$$  After $t$ iterations of this process, $t = \min(m-1, n)$ ,  $$R = Q_t \cdots Q_2Q_1A$$ is an upper triangular matrix. So, with  $$Q = Q_1^T Q_2^T \cdots Q_t^T,$$  $A = QR$ is a QR decomposition of $A$ .  This method has greater numerical stability than the Gram–Schmidt method above.  The following table gives the number of operations in the k -th step of the QR-decomposition by the Householder transformation, assuming a square matrix with size n .     Operation  Number of operations in the k -th step      multiplications  $2(n-k+1)^2$    additions  $(n-k+1)^2+(n-k+1)(n-k)+2$    division  $1$    square root  $1$     Summing these numbers over the n − 1 steps (for a square matrix of size n ), the complexity of the algorithm (in terms of floating point multiplications) is given by  $$\frac{2}{3}n^3+n^2+\frac{1}{3}n-2=O(n^3).$$  Example  Let us calculate the decomposition of  $$A = \begin{pmatrix}
 12 & -51 & 4 \\
 6 & 167 & -68 \\
 -4 & 24 & -41 \end{pmatrix}.$$  First, we need to find a reflection that transforms the first column of matrix A , vector $\mathbf{a}_1 = (12, 6, -4)^T$ , to $\|\mathbf{a}_1\| \;\mathrm{e}_1 = (14, 0, 0)^T.$  Now,  $$\mathbf{u} = \mathbf{x} + \alpha\mathbf{e}_1,$$ and  $$\mathbf{v} = {\mathbf{u}\over\|\mathbf{u}\|}.$$ Here,  $$\alpha = -14$$ and $\mathbf{x} = \mathbf{a}_1 = (12, 6, -4)^T$  Therefore  $$\mathbf{u} = (-2, 6, -4)^T=({2})(-1, 3, -2)^T$$ and $\mathbf{v} = {1 \over \sqrt{14}}(-1, 3, -2)^T$ , and then  $$Q_1 = I - {2 \over \sqrt{14} \sqrt{14}} \begin{pmatrix} -1 \\ 3 \\ -2 \end{pmatrix}\begin{pmatrix} -1 & 3 & -2 \end{pmatrix}$$  $$= I - {1 \over 7}\begin{pmatrix}
 1 & -3  & 2 \\
 -3 & 9 & -6 \\
 2  & -6  & 4
 \end{pmatrix}$$  $$= \begin{pmatrix}
 6/7 & 3/7   &  -2/7 \\
 3/7  &-2/7  &  6/7 \\
 -2/7 & 6/7  &   3/7 \\
 \end{pmatrix}.$$  Now observe:  $$Q_1A = \begin{pmatrix}
 14 & 21 & -14 \\
 0 & -49 & -14 \\
 0 & 168 & -77 \end{pmatrix},$$ so we already have almost a triangular matrix. We only need to zero the (3, 2) entry.  Take the (1, 1) minor , and then apply the process again to  $$A' = M_{11} = \begin{pmatrix}
 -49 & -14 \\
 168 & -77 \end{pmatrix}.$$ By the same method as above, we obtain the matrix of the Householder transformation  $$Q_2 = \begin{pmatrix}
 1 & 0 & 0 \\
 0 & -7/25 & 24/25 \\
 0 & 24/25 & 7/25 \end{pmatrix}$$ after performing a direct sum with 1 to make sure the next step in the process works properly.  Now, we find  $$Q=Q_1^T Q_2^T=\begin{pmatrix}
 6/7 & -69/175 & 58/175 \\
 3/7 & 158/175 & -6/175 \\
 -2/7 & 6/35 & 33/35 \end{pmatrix}$$ Then  $$Q=Q_1^T Q_2^T=\begin{pmatrix}
 0.8571 & -0.3943 & 0.3314 \\
 0.4286 &  0.9029 & -0.0343 \\
 -0.2857 & 0.1714 & 0.9429 \end{pmatrix}$$  $$R=Q_2Q_1A=Q^T A=\begin{pmatrix}
 14 & 21 & -14 \\
 0 & 175 & -70 \\
 0 & 0 & -35 \end{pmatrix}.$$ The matrix Q is orthogonal and R is upper triangular, so A = QR is the required QR-decomposition.  Using Givens rotations  QR decompositions can also be computed with a series of Givens rotations . Each rotation zeros an element in the subdiagonal of the matrix, forming the R matrix. The concatenation of all the Givens rotations forms the orthogonal Q matrix.  In practice, Givens rotations are not actually performed by building a whole matrix and doing a matrix multiplication. A Givens rotation procedure is used instead which does the equivalent of the sparse Givens matrix multiplication, without the extra work of handling the sparse elements. The Givens rotation procedure is useful in situations where only a relatively few off diagonal elements need to be zeroed, and is more easily parallelized than Householder transformations .  Example  Let us calculate the decomposition of  $$A = \begin{pmatrix}
 12 & -51 & 4 \\
 6 & 167 & -68 \\
 -4 & 24 & -41 \end{pmatrix}.$$  First, we need to form a rotation matrix that will zero the lowermost left element, $\mathbf{a}_{31} = -4$ . We form this matrix using the Givens rotation method, and call the matrix $G_1$ . We will first rotate the vector $(6,-4)$ , to point along the X axis. This vector has an angle $\theta = \arctan\left({-(-4) \over 6}\right)$ . We create the orthogonal Givens rotation matrix, $G_1$ :  $$G_1 = \begin{pmatrix}
 1 & 0 & 0 \\
 0 & \cos(\theta) & -\sin(\theta) \\
 0 & \sin(\theta) & \cos(\theta)
 \end{pmatrix}$$  $$\approx \begin{pmatrix}
 1 & 0 & 0 \\
 0 & 0.83205 & -0.55470 \\
 0 & 0.55470 & 0.83205
 \end{pmatrix}$$  And the result of $G_1A$ now has a zero in the $\mathbf{a}_{31}$ element.  $$G_1A \approx \begin{pmatrix}
 12 & -51 & 4 \\
 7.21110 & 125.6396 & -33.83671 \\
 0 & 112.6041 & -71.83368
 \end{pmatrix}$$  We can similarly form Givens matrices $G_2$ and $G_3$ , which will zero the sub-diagonal elements $a_{21}$ and $a_{32}$ , forming a triangular matrix $R$ . The orthogonal matrix $Q^T$ is formed from the concatenation of all the Givens matrices $Q^T = G_3G_2G_1$ . Thus, we have $G_3G_2G_1A= Q^TA = R$ , and the QR decomposition is $A = QR$ .  Connection to a determinant or a product of eigenvalues  We can use QR decomposition to find the absolute value of the determinant of a square matrix. Suppose a matrix is decomposed as $A=QR$ . Then we have  $$\det(A)=\det(Q)\cdot\det(R).$$ Since Q is unitary, $|\det(Q)|=1$ . Thus,  $$|\det(A)|=|\det(R)|=\Big|\prod_{i} r_{ii}\Big|,$$ where $r_{ii}$ are the entries on the diagonal of R .  Furthermore, because the determinant equals the product of the eigenvalues, we have  $$\Big|\prod_{i} r_{ii}\Big|=\Big|\prod_{i} \lambda_{i}\Big|,$$ where $\lambda_{i}$ are eigenvalues of $A$ .  We can extend the above properties to non-square complex matrix $A$ by introducing the definition of QR-decomposition for non-square complex matrix and replacing eigenvalues with singular values.  Suppose a QR decomposition for a non-square matrix A :  $$A = Q \begin{pmatrix}R\\O\end{pmatrix}, \qquad Q^*Q = I,$$ where $O$ is a zero matrix and $Q$ is a unitary matrix.  From the properties of SVD and determinant of matrix, we have  $$\Big|\prod_{i} r_{ii}\Big| = \prod_{i} \sigma_{i},$$ where $\sigma_{i}$ are singular values of $A$ .  Note that the singular values of $A$ and $R$ are identical, although their complex eigenvalues may be different. However, if A is square, the following is true:  $${\prod_{i} \sigma_{i}} = \Big|{\prod_{i} \lambda_{i}}\Big|.$$  In conclusion, QR decomposition can be used efficiently to calculate the product of the eigenvalues or singular values of a matrix.  Column pivoting  QR decomposition with column pivoting introduces a permutation matrix  P :  $$A P = Q R \quad \iff A = Q R P^T$$ Column pivoting is useful when A is (nearly) rank deficient , or is suspected of being so. It can also improve numerical accuracy. P is usually chosen so that the diagonal elements of R are non-increasing: $|r_{11}| \ge |r_{22}| \ge \ldots \ge |r_{nn}|$ . This can be used to find the (numerical) rank of A at lower computational cost than a singular value decomposition , forming the basis of so-called rank-revealing QR algorithms .  Using for solution to linear inverse problems  Compared to the direct matrix inverse, inverse solutions using QR decomposition are more numerically stable as evidenced by their reduced condition numbers [Parker, Geophysical Inverse Theory, Ch1.13].  To solve the underdetermined ( $m < n$ ) linear problem $Ax=b$ where the matrix A has dimensions $m \times n$ and rank $m$ , first find the QR factorization of the transpose of A $$A^T=QR$$ , where Q is an orthogonal matrix (i.e. $Q^T=Q^{-1}$ ), and R has a special form $$R=\begin{bmatrix} R_1 \\ 0\end{bmatrix}$$ . Here $R_1$ is a square $m \times m$ right triangular matrix, and the zero matrix has dimension $(n-m) \times m$ . After some algebra, it can be shown that a solution to the inverse problem can be expressed as $$x = Q
 \begin{bmatrix}
    (R_1^T)^{-1}b \\
    0
   \end{bmatrix}$$ where one may either find $R_1^{-1}$ by Gaussian elimination or compute $(R_1^T)^{-1} b$ directly by forward substitution . The latter technique enjoys greater numerical accuracy and lower computations.  To find a solution, $\hat x$ , to the overdetermined ( $m \geq n$ ) problem $Ax=b$ which minimizes the norm $\|A \hat x-b\|$ , first find the QR factorization of A $$A=QR$$ . The solution can then be expressed as $\hat x = R_1^{-1} (Q_1^T b)$ , where $Q_1$ is an $m \times n$ matrix containing the first $n$ columns of the full orthonormal basis $Q$ and where $R_1$ is as before. Equivalent to the underdetermined case, back substitution can be used to quickly and accurately find this $\hat x$ without explicitly inverting $R_1$ . ( $Q_1$ and $R_1$ are often provided by numerical libraries as an "economic" QR decomposition.)  See also   Polar decomposition  Eigenvalue decomposition  Spectral decomposition  Matrix decomposition  Zappa–Szép product  Iwasawa decomposition   References      .   . Section 2.8.    .   External links   Online Matrix Calculator Performs QR decomposition of matrices.  LAPACK users manual gives details of subroutines to calculate the QR decomposition  Mathematica users manual gives details and examples of routines to calculate QR decomposition  ALGLIB includes a partial port of the LAPACK to C++, C#, Delphi, etc.  Eigen::QR Includes C++ implementation of QR decomposition.  Into contains an open source implementation of QR decomposition in C++.   "  Category:Matrix decompositions  Category:Numerical linear algebra     L. N. Trefethen and D. Bau, Numerical Linear Algebra (SIAM, 1997). ↩   ↩      