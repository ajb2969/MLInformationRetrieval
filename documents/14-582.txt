


FKT algorithm




FKT algorithm

The FKT algorithm, named after Fisher, Kasteleyn, and Temperley, counts the number of perfect matchings in a planar graph in polynomial time. This same task is #P-complete for general graphs. Counting the number of matchings, even for planar graphs, is also #P-complete. The key idea is to convert the problem into a Pfaffian computation of a skew-symmetric matrix derived from a planar embedding of the graph. The Pfaffian of this matrix is then computed efficiently using standard determinant algorithms.
History
The problem of counting planar perfect matchings has its roots in statistical mechanics and chemistry, where the original question was: If diatomic molecules are adsorbed on a surface, forming a single layer, how many ways can they be arranged?1 The partition function is an important quantity that encodes the statistical properties of a system at equilibrium and can be used to answer the previous question. However, trying to compute the partition function from its definition is not practical. Thus to exactly solve a physical system is to find an alternate form of the partition function for that particular physical system that is sufficiently simple to calculate exactly.2 In the early 1960s, the definition of exactly solvable was not rigorous.3 Computer science provided a rigorous definition with the introduction of polynomial time, which dates to 1965. Similarly, the notation of not exactly solvable should correspond to #P-hardness, which was defined in 1979.
Another type of physical system to consider is composed of dimers, which is a polymer with two atoms. The dimer model counts the number of dimer coverings of a graph.4 Another physical system to consider is the bonding of H2O molecules in the form of ice. This can be modelled as a directed, 3-regular graph where the orientation of the edges at each vertex cannot all be the same. How many edge orientations does this model have?
Motivated by physical systems involving dimers, in 1961, Kasteleyn5 and Temperley and Fisher6 independently found the number of domino tilings for the m-by-n rectangle. This is equivalent to counting the number of perfect matchings for the m-by-n lattice graph. By 1967, Kasteleyn had generalized this result to all planar graphs.78
Algorithm
Explanation
The main insight is that every non-zero term in the Pfaffian of the adjacency matrix of a graph G corresponds to a perfect matching. Thus, if one can find an orientation of G to align all signs of the terms in Pfaffian (no matter + or - ), then the absolute value of the Pfaffian is just the number of perfect matchings in G. The FKT algorithm does such a task for a planar graph G.
Let G = (V, E) be an undirected graph with adjacency matrix A. Define PM(n) to be the set of partitions of n elements into pairs, then the number of perfecting matchings in G is


 
  Closely related to this is the Pfaffian for an n by n matrix A


 
  where sgn(M) is the sign of the permutation M. A Pfaffian orientation of G is a directed graph H with (1, −1, 0)-adjacency matrix B such that pf(B) = PerfMatch(G).9 In 1967, Kasteleyn proved that planar graphs have an efficiently computable Pfaffian orientation. Specifically, for a planar graph G, let H be a directed version of G where an odd number of edges are oriented clockwise for every face in a planar embedding of G. Then H is a Pfaffian orientation of G.
Finally, for any skew-symmetric matrix A,


 
  where det(A) is the determinant of A. This result is due to Cayley.10 Since determinants are efficiently computable, so is PerfMatch(G).
High-level description
(Figure)
An example showing how the FKT algorithm finds a Pfaffian orientation.


Compute a planar embedding of G.
Compute a spanning tree T1 of the input graph G.
Give an arbitrary orientation to each edge in G that is also in T1.
Use the planar embedding to create an (undirected) graph T2 with the same vertex set as the dual graph of G.
Create an edge in T2 between two vertices if their corresponding faces in G share an edge in G that is not in T1. (Note that T2 is a tree.)
For each leaf v in T2 (that is not also the root):
 
Let e be the lone edge of G in the face corresponding to v that does not yet have an orientation.
Give e an orientation such that the number of edges oriented clock-wise is odd.
Remove v from T2.

Return the absolute value of the Pfaffian of the (1, −1, 0)-adjacency matrix of G, which is the absolute value of the square root of the determinant.

Generalizations
The sum of weighted perfect matchings can also be computed by using the Tutte matrix for the adjacency matrix in the last step.
Kuratowski's theorem states that

a finite graph is planar if and only if it contains no subgraph homeomorphic to K5 (complete graph on five vertices) or K3,3 (complete bipartite graph on two partitions of size three).
 

Vijay Vazirani generalized the FKT algorithm to graphs that do not contain a subgraph homeomorphic to K3,3.11 Since counting the number of perfect matchings in a general graph is #P-complete, some restriction on the input graph is required unless FP, the function version of P, is equal to #P. Counting matchings, which is known as the Hosoya index, is also #P-complete even for planar graphs.12
Applications
The FKT algorithm has seen extensive use in holographic algorithms on planar graphs via matchgates.13 For example, consider the planar version of the ice model mentioned above, which has the technical name #PL-3-NAE-SAT (where NAE stands for "not all equal"). Valiant found a polynomial time algorithm for this problem which uses matchgates.14
References
External links

Presentation by Ashley Montanaro about the FKT algorithm
More history, information, and examples can be found in chapter 2 and section 5.3.2 of Dmitry Kamenetsky's PhD thesis

"
Category:Graph algorithms Category:Planar graphs



↩
↩
↩
↩
↩
↩
↩
↩
↩
↩
↩
.↩

↩




