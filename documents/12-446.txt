   Price of anarchy      Price of anarchy   The Price of Anarchy ( PoA ) 1 is a concept in economics and game theory that measures how the efficiency of a system degrades due to selfish behavior of its agents. It is a general notion that can be extended to diverse systems and notions of efficiency. For example, consider the system of transportation of a city and many agents trying to go from some initial location to a destination. Let efficiency in this case mean the average time for an agent to reach the destination. In the 'centralized' solution, a central authority can tell each agent which path to take in order to minimize the average travel time. In the 'decentralized' version, each agent chooses its own path. The Price of Anarchy measures the ratio between average travel time in the two cases.  Usually the system is modeled as a game and the efficiency is some function of the outcomes (e.g. maximum delay in a network, congestion in a transportation system, social welfare in an auction, ...). Different concepts of equilibrium can be used to model the selfish behavior of the agents, among which the most common is the Nash equilibrium . Different flavors of Nash equilibrium lead to variations of the notion of Price of Anarchy as Pure Price of Anarchy (for deterministic equilibria), Mixed Price of Anarchy (for randomized equilibria), and Bayes-Nash Price of Anarchy (for games with incomplete information). Solution concepts other than Nash equilibrium lead to variations such as the Price of Sinking . 2  The term Price of Anarchy was first used by Koutsoupias and Papadimitriou, 3 but the idea of measuring inefficiency of equilibrium is older. 4 The concept in its current form was designed to be the analogue of the 'approximation ratio' in an approximation algorithm or the 'competitive ratio' in an online algorithm . This is in the context of the current trend of analyzing games using algorithmic lenses ( algorithmic game theory ).  Mathematical definition  Consider a game     G  =   (  N  ,  S  ,  u  )       G   N  S  u     G=(N,S,u)   , defined by a set of players   N   N   N   , strategy sets    S  i     subscript  S  i    S_{i}   for each player and utilities     u  i   :   S  →  ℝ      normal-:   subscript  u  i    normal-→  S  ℝ     u_{i}:S\rightarrow\mathbb{R}   (where    S  =    S  1   ×  …  ×   S  n        S     subscript  S  1   normal-…   subscript  S  n      S=S_{1}\times...\times S_{n}   also called set of outcomes). We can define a measure of efficiency of each outcome which we call welfare function    W  :   S  →  ℝ      normal-:  W   normal-→  S  ℝ     W:S\rightarrow\mathbb{R}   . Natural candidates include the sum of players utilities (utilitarian objective)      W   (  s  )    =    ∑   i  ∈  N      u  i    (  s  )      ,        W  s     subscript     i  N       subscript  u  i   s      W(s)=\sum_{i\in N}u_{i}(s),   minimum utility (fairness or egalitarian objective)      W   (  s  )    =     min   i  ∈  N     u  i     (  s  )     ,        W  s       subscript     i  N     subscript  u  i    s     W(s)=\min_{i\in N}u_{i}(s),   ..., or any function that is meaningful for the particular game being analyzed and is desirable to be maximized.  We can define a subset    E  ⊆  S      E  S    E\subseteq S   to be the set of strategies in equilibrium (for example, the set of Nash equilibria ). The Price of Anarchy is then defined as the ratio between the 'worst equilibrium' and the optimal 'centralized' solution:       P  o  A   =      max   s  ∈  S    W    (  s  )       min   s  ∈  E    W    (  s  )           P  o  A         subscript     s  S    W   s       subscript     s  E    W   s      PoA=\frac{\max_{s\in S}W(s)}{\min_{s\in E}W(s)}     Following the convention in approximation algorithms, if the function measure efficiency is, instead of a 'welfare' we want to 'maximize', a 'cost function'    C  :   S  →  ℝ      normal-:  C   normal-→  S  ℝ     C:S\rightarrow\mathbb{R}   we want to 'minimize' (delay in a network, for example) we use:       P  o  A   =      max   s  ∈  E    C    (  s  )       min   s  ∈  S    C    (  s  )           P  o  A         subscript     s  E    C   s       subscript     s  S    C   s      PoA=\frac{\max_{s\in E}C(s)}{\min_{s\in S}C(s)}     A related notion is that of the Price of Stability ( PoS ) which measures the ratio between the 'best equilibrium' and the optimal 'centralized' solution:       P  o  S   =      max   s  ∈  S    W    (  s  )       max   s  ∈  E    W    (  s  )           P  o  S         subscript     s  S    W   s       subscript     s  E    W   s      PoS=\frac{\max_{s\in S}W(s)}{\max_{s\in E}W(s)}     or in the case of cost functions:       P  o  S   =      min   s  ∈  E    C    (  s  )       min   s  ∈  S    C    (  s  )           P  o  S         subscript     s  E    C   s       subscript     s  S    C   s      PoS=\frac{\min_{s\in E}C(s)}{\min_{s\in S}C(s)}     We know that    1  ≤   P  o  S   ≤   P  o  A         1    P  o  S          P  o  A      1\leq PoS\leq PoA   by the definition. It is expected that the loss in efficiency due to game-theoretical constraints is somewhere between 'PoS' and 'PoA'.  Examples  Prisoner's dilemma  Consider the 2x2 game called prisoner's dilemma , given by the following cost matrix:       Cooperate   Defect     Cooperate   1 , 1   7 , 0     Defect   0 , 7   5 , 5     and let the cost function be      C   (   s  1   ,   s  2   )    =     u  1    (   s  1   ,   s  2   )    +    u  2    (   s  1   ,   s  2   )      .        C    subscript  s  1    subscript  s  2          subscript  u  1     subscript  s  1    subscript  s  2        subscript  u  2     subscript  s  1    subscript  s  2        C(s_{1},s_{2})=u_{1}(s_{1},s_{2})+u_{2}(s_{1},s_{2}).   Now, the minimum cost function would be when both players cooperate and the resulting cost is     1  +  1   =  2        1  1   2    1+1=2   , however the only Nash equilibrium occurs when both defect the cost in such a situation is      5  +  5   =  10   ,        5  5   10    5+5=10,   so the Price of Anarchy of this game will be     10  /  2   =  5        10  2   5    10/2=5   .  Job scheduling  A more natural example is the one of job scheduling . There are   N   N   N   players and each of them has a job to run. They can choose one of   M   M   M   machines to run the job. The Price of Anarchy compares the situation where the selection of machines is guided/directed centrally to the situation where each player chooses the machine that will make its job run fastest.  Each machine has a speed      s  1   ,  …  ,   s  M    >  0.        subscript  s  1   normal-…   subscript  s  M    0.    s_{1},\ldots,s_{M}>0.   Each job has a weight      w  1   ,  …  ,   w  N    >  0.        subscript  w  1   normal-…   subscript  w  N    0.    w_{1},\ldots,w_{N}>0.   A player picks a machine to run his or her job on. So, the strategies of each player are      A  i   =   {  1  ,  2  ,  …  ,  M  }    .       subscript  A  i    1  2  normal-…  M     A_{i}=\{1,2,\ldots,M\}.   Define the load on machine   j   j   j   to be:         L  j    (  a  )    =     ∑   i  :    a  i   =  j      w  i     s  j     .         subscript  L  j   a       subscript    normal-:  i     subscript  a  i   j      subscript  w  i     subscript  s  j      L_{j}(a)=\frac{\sum_{i:a_{i}=j}w_{i}}{s_{j}}.     The cost for player   i   i   i   is       c  i    (  a  )    =    L   a  i     (  a  )     ,         subscript  c  i   a      subscript  L   subscript  a  i    a     c_{i}(a)=L_{a_{i}}(a),   i.e., the load of the machine they chose. We consider the egalitarian cost function     MS   (  a  )    =     max  j    L  j     (  a  )          MS  a       subscript   j    subscript  L  j    a     \mbox{MS}(a)=\max_{j}L_{j}(a)   , here called the makespan .  We consider two concepts of equilibrium: pure Nash and mixed Nash . It should be clear that mixed PoA ≥ pure PoA, because any pure Nash equilibrium is also a mixed Nash equilibrium (this inequality can be strict: e.g. when    N  =  2      N  2    N=2   ,     w  1   =   w  2   =  1         subscript  w  1    subscript  w  2        1     w_{1}=w_{2}=1   ,    M  =  2      M  2    M=2   , and     s  1   =   s  2   =  1         subscript  s  1    subscript  s  2        1     s_{1}=s_{2}=1   , the mixed strategies     σ  1   =   σ  2   =   (   1  /  2   ,   1  /  2   )          subscript  σ  1    subscript  σ  2           1  2     1  2       \sigma_{1}=\sigma_{2}=(1/2,1/2)   achieve an average makespan of 1.5, while any pure-strategy PoA in this setting is     ≤   4  /  3       absent    4  3     \leq 4/3   ). First we need to argue that there exist pure Nash equilibria.  Claim . For each job scheduling game, there exists at least one pure-strategy Nash equilibrium.  Proof . We would like to take a socially optimal action profile    a  *     superscript  a     a^{*}   . This would mean simply an action profile whose makespan is minimum. However, this will not be enough. There may be several such action profiles leading to a variety of different loads distributions (all having the same maximum load). Among these, we further restrict ourselves to one that has a minimum second-largest load. Again, this results in a set of possible load distributions, and we repeat until the   M   M   M   th-largest (i.e., smallest) load, where there can only be one distribution of loads (unique up to permutation). This would also be called the lexicographic smallest sorted load vector.  We claim that this is a pure-strategy Nash equilibrium. Reasoning by contradiction, suppose that some player   i   i   i   could strictly improve by moving from machine   j   j   j   to machine   k   k   k   . This means that the increased load of machine   k   k   k   after the move is still smaller than the load of machine   j   j   j   before the move. As the load of machine   j   j   j   must decrease as a result of the move and no other machine is affected, this means that the new configuration is guaranteed to have reduced the   j   j   j   th-largest (or higher ranked) load in the distribution. This, however, violates the assumed lexicographic minimality of   a   a   a   . ''' Q.E.D. '''  Claim . For each job scheduling game, the pure PoA is at most   M   M   M   .  Proof . It is easy to upper-bound the welfare obtained at any mixed-strategy Nash equilibrium   σ   σ   \sigma   by        w   (  σ  )    ≤     ∑  i    w  i      max  j    s  j      .        w  σ       subscript   i    subscript  w  i      subscript   j    subscript  s  j       w(\sigma)\leq\frac{\sum_{i}{w_{i}}}{\max_{j}{s_{j}}}.     Consider, for clarity of exposition, any pure-strategy action profile   a   a   a   : clearly        w   (  a  )    ≥     ∑  i    w  i      ∑  j    s  j     ≥     ∑  i    w  i     M  ⋅    max  j    s  j       .          w  a       subscript   i    subscript  w  i      subscript   j    subscript  s  j              subscript   i    subscript  w  i     normal-⋅  M    subscript   j    subscript  s  j         w(a)\geq\frac{\sum_{i}{w_{i}}}{\sum_{j}{s_{j}}}\geq\frac{\sum_{i}{w_{i}}}{M%
 \cdot\max_{j}{s_{j}}}.     Since the above holds for the social optimum as well, comparing the ratios    w   (  σ  )       w  σ    w(\sigma)   and    w   (  a  )       w  a    w(a)   proves the claim. ''' Q.E.D '''  Selfish Routing  Braess' paradox  Consider a road network in which a fixed number of drivers need to move from a common source to a common destination; assume that each driver chooses its route selfishly, and that the time to traverse a road depends linearly on the number of drivers choosing that road.  We can formalize this setting as a routing problem in a directed, connected graph    G  =   (  V  ,  E  )       G   V  E     G=(V,E)   , in which we want to send one unit of flow from a source node    s  ∈  V      s  V    s\in V   to a destination node    t  ∈  V      t  V    t\in V   (imagine the flow to be composed of the travel decisions of the different drivers). In particular, let the flow be a function    f  :   E  ↦  ℜ      normal-:  f   maps-to  E      f:E\mapsto\Re   assigning to each edge a non-negative real number, and consider the set of linear functions    L  =   {     l  e    (   f  e   )    =    a  ⋅   f  e    +   b     |    e  ∈  E   ,    a  ≥  0   ,   b  ≥  0     }       L   conditional-set       subscript  l  e    subscript  f  e       normal-⋅  a   subscript  f  e    b     formulae-sequence    e  E    formulae-sequence    a  0     b  0        L=\{l_{e}(f_{e})=a\cdot f_{e}+b\;|\;e\in E,\;a\geq 0,\;b\geq 0\}   that map the flow traversing each edge to the latency to traverse the edge. Let's also define the social welfare of a flow   f   f   f   as     w   (  f  )    =    ∑  e      f  e   ⋅   l  e     (   f  e   )           w  f     subscript   e      normal-⋅   subscript  f  e    subscript  l  e     subscript  f  e       w(f)=\sum_{e}{f_{e}\cdot l_{e}(f_{e})}     Consider the example in the figure: if the dashed road is not available, the mixed-strategy Nash equilibrium happens when each player chooses the top route and the bottom route with the same probability: this equilibrium has social cost 1.5, and it takes 1.5 units of time to each driver to go from   s   s   s   to   t   t   t   . Hoping to improve the performance of the network, a legislator could decide to make the dashed, low-latency edge available to the drivers: in this case, the only Nash equilibrium would happen when every driver uses the new road, therefore the social cost would increase to 2 and now it would take 2 units of time to each player to go from   s   s   s   to   t   t   t   .  Hence, the uncommon result of denying access to the fastest road by central control to be beneficial to the public in some cases.  Generalized routing problem  The routing problem introduced in the Braess' paradox can be generalized to many different flows traversing the same graph at the same time.  Definition (Generalized flow) . Let    G  =   (  V  ,  E  )       G   V  E     G=(V,E)   ,   L   L   L   and   w   w   w   be as defined above, and suppose that we want to route the quantities    R  =   {   r  1   ,   r  2   ,  …  ,   r  k   ,    |   r  i   >   0   }       R    subscript  r  1    subscript  r  2   normal-…   subscript  r  k      ket   subscript  r  i    0      R=\{r_{1},r_{2},\dots,r_{k},\;|\;r_{i}>0\}   through each distinct pair of nodes in    Γ  =   {   (   s  1   ,   t  1   )   ,   (   s  2   ,   t  2   )   ,  …  ,   (   s  k   ,   t  k   )   }   ⊆   (   V  ×  V   )         normal-Γ     subscript  s  1    subscript  t  1      subscript  s  2    subscript  t  2    normal-…    subscript  s  k    subscript  t  k            V  V      \Gamma=\{(s_{1},t_{1}),(s_{2},t_{2}),\dots,(s_{k},t_{k})\}\subseteq(V\times V)   . A flow     f   Γ  ,  R      subscript  f   normal-Γ  R     f_{\Gamma,R}   is defined as an assignment    p  ↦  ℜ     maps-to  p     p\mapsto\Re   of a real, nonnegative number to each path    p   p   p   going from    s  i     subscript  s  i    s_{i}   to    t  i     subscript  t  i    t_{i}        ∈  Γ      absent  normal-Γ    \in\Gamma   , with the constraint that         ∑   p  :    s  i   →   t  i       f  p    =     r  i     ∀   (   s  i   ,   t  i   )     ∈  Γ   .          subscript    normal-:  p   normal-→   subscript  s  i    subscript  t  i       subscript  f  p       subscript  r  i    for-all    subscript  s  i    subscript  t  i           normal-Γ     \sum_{p:\,s_{i}\rightarrow t_{i}}{f_{p}}=r_{i}\;\;\forall(s_{i},t_{i})\in\Gamma.     The flow traversing a specific edge of   G   G   G   is defined as        f   e  ,  Γ  ,  R    =    ∑   p  :   e  ∈  p      f  p     .       subscript  f   e  normal-Γ  R      subscript    normal-:  p    e  p      subscript  f  p      f_{e,\Gamma,R}=\sum_{p:\,e\in p}{f_{p}}.     For succinctness, we write    f  e     subscript  f  e    f_{e}   when    Γ  ,  R     normal-Γ  R    \Gamma,R   are clear from context.  Definition (Nash-equilibrium flow) . A flow    f   Γ  ,  R      subscript  f   normal-Γ  R     f_{\Gamma,R}   is a Nash-equilibrium flow iff     ∀   (   s  i   ,   t  i   )    ∈  Γ       for-all    subscript  s  i    subscript  t  i     normal-Γ    \forall(s_{i},t_{i})\in\Gamma   and     ∀  p   ,  q      for-all  p   q    \forall p,q   from    s  i     subscript  s  i    s_{i}   to    t  i     subscript  t  i    t_{i}           f  p   >  0  ⇒    ∑   e  ∈  p      l  e    (   f  e   )     ≤    ∑   e  ∈  q      l  e    (   f  e   )      .         subscript  f  p   0    normal-⇒      subscript     e  p       subscript  l  e    subscript  f  e            subscript     e  q       subscript  l  e    subscript  f  e        f_{p}>0\Rightarrow\sum_{e\in p}{l_{e}(f_{e})}\leq\sum_{e\in q}{l_{e}(f_{e})}.     This definition is closely related to what we said about the support of mixed-strategy Nash equilibria in normal-form games.  Definition (Conditional welfare of a flow) . Let    f   Γ  ,  R      subscript  f   normal-Γ  R     f_{\Gamma,R}   and    f   Γ  ,  R   *     superscript   subscript  f   normal-Γ  R       f_{\Gamma,R}^{*}   be two flows in   G   G   G   associated with the same sets   Γ   normal-Γ   \Gamma   and   R   R   R   . In what follows, we will drop the subscript to make the notation clearer. Assume to fix the latencies induced by   f   f   f   on the graph: the conditional welfare of    f  *     superscript  f     f^{*}   with respect to   f   f   f   is defined as        w  f    (   f  *   )    =    ∑   e  ∈  E       f  e  *   ⋅   l  e     (   f  e   )            superscript  w  f    superscript  f       subscript     e  E       normal-⋅   subscript   superscript  f    e    subscript  l  e     subscript  f  e       w^{f}(f^{*})=\sum_{e\in E}{f^{*}_{e}\cdot l_{e}(f_{e})}     Fact 1 . Given a Nash-equilibrium flow   f   f   f   and any other flow    f  *     superscript  f     f^{*}   ,     w   (  f  )    =    w  f    (  f  )    ≤    w  f    (   f  *   )            w  f      superscript  w  f   f           superscript  w  f    superscript  f        w(f)=w^{f}(f)\leq w^{f}(f^{*})   .  Proof (By contradiction) . Assume that      w  f    (   f  *   )    <    w  f    (  f  )           superscript  w  f    superscript  f        superscript  w  f   f     w^{f}(f^{*})   . By definition,        ∑   i  =  1   k     ∑   p  :    s  i   →   t  i        f  p  *   ⋅    ∑   e  ∈  p      l  e    (   f  e   )        <    ∑   i  =  1   k     ∑   p  :    s  i   →   t  i        f  p   ⋅    ∑   e  ∈  p      l  e    (   f  e   )              superscript   subscript     i  1    k     subscript    normal-:  p   normal-→   subscript  s  i    subscript  t  i       normal-⋅   superscript   subscript  f  p       subscript     e  p       subscript  l  e    subscript  f  e          superscript   subscript     i  1    k     subscript    normal-:  p   normal-→   subscript  s  i    subscript  t  i       normal-⋅   subscript  f  p     subscript     e  p       subscript  l  e    subscript  f  e          \sum_{i=1}^{k}\sum_{p:s_{i}\rightarrow t_{i}}f_{p}^{*}\cdot\sum_{e\in p}l_{e}(%
 f_{e})<\sum_{i=1}^{k}\sum_{p:s_{i}\rightarrow t_{i}}f_{p}\cdot\sum_{e\in p}l_{%
 e}(f_{e})   . Since   f   f   f   and    f  *     superscript  f     f^{*}   are associated with the same sets    Γ  ,  R     normal-Γ  R    \Gamma,R   , we know that         ∑   p  :    s  i   →   t  i       f  p    =    ∑   p  :    s  i   →   t  i       f  p  *    =     r  i     ∀  i     .          subscript    normal-:  p   normal-→   subscript  s  i    subscript  t  i       subscript  f  p      subscript    normal-:  p   normal-→   subscript  s  i    subscript  t  i       superscript   subscript  f  p              subscript  r  i    for-all  i       \sum_{p:s_{i}\rightarrow t_{i}}f_{p}=\sum_{p:s_{i}\rightarrow t_{i}}f_{p}^{*}=%
 r_{i}\;\;\forall i.     Therefore, there must be a pair    (   s  i   ,   t  i   )      subscript  s  i    subscript  t  i     (s_{i},t_{i})   and two paths    p  ,  q     p  q    p,q   from    s  i     subscript  s  i    s_{i}   to    t  i     subscript  t  i    t_{i}   such that     f  p  *   >   f  p        superscript   subscript  f  p      subscript  f  p     f_{p}^{*}>f_{p}   ,     f  q  *   <   f  q        superscript   subscript  f  q      subscript  f  q     f_{q}^{*}   , and         ∑   e  ∈  p      l  e    (   f  e   )     <    ∑   e  ∈  q      l  e    (   f  e   )      .        subscript     e  p       subscript  l  e    subscript  f  e       subscript     e  q       subscript  l  e    subscript  f  e       \sum_{e\in p}l_{e}(f_{e})<\sum_{e\in q}l_{e}(f_{e}).     In other words, the flow    f  *     superscript  f     f^{*}   can achieve a lower welfare than   f   f   f   only if there are two paths from    s  i     subscript  s  i    s_{i}   to    t  i     subscript  t  i    t_{i}   having different costs, and if    f  *     superscript  f     f^{*}   reroutes some flow of   f   f   f   from the higher-cost path to the lower-cost path. This situation is clearly incompatible with the assumption that   f   f   f   is a Nash-equilibrium flow. ''' Q.E.D. '''  Note that Fact 1 does not assume any particular structure on the set   L   L   L   .  Fact 2 . Given any two real numbers   x   x   x   and   y   y   y   ,     x  ⋅  y   ≤    x  2   +    y  2   /  4         normal-⋅  x  y      superscript  x  2      superscript  y  2   4      x\cdot y\leq x^{2}+y^{2}/4   .  Proof . This is another way to express the true inequality      (   x  -   y  /  2    )   2   ≥  0       superscript    x    y  2    2   0    (x-y/2)^{2}\geq 0   . ''' Q.E.D. '''  Theorem . The pure PoA of any generalized routing problem    (  G  ,  L  )     G  L    (G,L)   with linear latencies is     ≤   4  /  3       absent    4  3     \leq 4/3   .  Proof . Note that this theorem is equivalent to saying that for each Nash-equilibrium flow   f   f   f   ,     w   (  f  )    ≤    (   4  /  3   )   ⋅    min   f  *     {   w   (   f  *   )    }           w  f    normal-⋅    4  3     subscript    superscript  f       w   superscript  f         w(f)\leq(4/3)\cdot\min_{f^{*}}\{w(f^{*})\}   , where    f  *     superscript  f     f^{*}   is any other flow. By definition,        w  f    (   f  *   )    =    ∑   e  ∈  E      f  e  *    (     a  e   ⋅   f  e    +   b  e    )            superscript  w  f    superscript  f       subscript     e  E       superscript   subscript  f  e        normal-⋅   subscript  a  e    subscript  f  e     subscript  b  e        w^{f}(f^{*})=\sum_{e\in E}f_{e}^{*}(a_{e}\cdot f_{e}+b_{e})           =     ∑  e    (    a  e    f  e    f  e  *    )    +    ∑   e  ∈  E      f  e  *    b  e       .      absent      subscript   e      subscript  a  e    subscript  f  e    superscript   subscript  f  e         subscript     e  E       superscript   subscript  f  e      subscript  b  e        =\sum_{e}(a_{e}f_{e}f_{e}^{*})+\sum_{e\in E}f_{e}^{*}b_{e}.     By using Fact 2, we have that        w  f    (   f  *   )    ≤     ∑   e  ∈  E     (    a  e   ⋅   (     (   f  e  *   )   2   +     (   f  e   )   2   /  4    )    )    +    ∑   e  ∈  E      f  e  *   ⋅   b  e             superscript  w  f    superscript  f         subscript     e  E     normal-⋅   subscript  a  e      superscript   superscript   subscript  f  e     2      superscript   subscript  f  e   2   4        subscript     e  E     normal-⋅   superscript   subscript  f  e      subscript  b  e        w^{f}(f^{*})\leq\sum_{e\in E}\left(a_{e}\cdot\left((f_{e}^{*})^{2}+(f_{e})^{2}%
 /4\right)\right)+\sum_{e\in E}f_{e}^{*}\cdot b_{e}          =    (     ∑   e  ∈  E      a  e     (   f  e  *   )   2     +    f  e  *    b  e     )   +    ∑   e  ∈  E       a  e     (   f  e   )   2    /  4         absent        subscript     e  E       subscript  a  e    superscript   superscript   subscript  f  e     2        superscript   subscript  f  e      subscript  b  e       subscript     e  E         subscript  a  e    superscript   subscript  f  e   2    4       =\left(\sum_{e\in E}a_{e}(f_{e}^{*})^{2}+f_{e}^{*}b_{e}\right)+\sum_{e\in E}a_%
 {e}(f_{e})^{2}/4           ≤    w   (   f  *   )    +    w   (  f  )    4     ,      absent      w   superscript  f         w  f   4      \leq w(f^{*})+\frac{w(f)}{4},     since         (   1  /  4   )   ⋅  w    (  f  )    =    (   1  /  4   )   ⋅    ∑   e  ∈  E      f  e    (     a  e    f  e    +   b  e    )             normal-⋅    1  4   w   f    normal-⋅    1  4     subscript     e  E       subscript  f  e        subscript  a  e    subscript  f  e     subscript  b  e         (1/4)\cdot w(f)=(1/4)\cdot\sum_{e\in E}f_{e}(a_{e}f_{e}+b_{e})           =     (   1  /  4   )   ⋅    ∑   e  ∈  E      (   f  e   )   2     +      (   1  /  4   )   ⋅    ∑   e  ∈  E      f  e    b  e      ⏟     ≥  0      .      absent     normal-⋅    1  4     subscript     e  E     superscript   subscript  f  e   2      subscript   normal-⏟   normal-⋅    1  4     subscript     e  E       subscript  f  e    subscript  b  e         absent  0       =(1/4)\cdot\sum_{e\in E}(f_{e})^{2}+\underbrace{(1/4)\cdot\sum_{e\in E}f_{e}b_%
 {e}}_{\geq 0}.     We can conclude that      w  f    (   f  *   )    ≤    w   (   f  *   )    +    w   (  f  )    /  4           superscript  w  f    superscript  f         w   superscript  f         w  f   4      w^{f}(f^{*})\leq w(f^{*})+w(f)/4   , and prove the thesis using Fact 1. ''' Q.E.D. '''  Note that in the proof we have made extensive use of the assumption that the functions in   L   L   L   are linear. Actually, a more general fact holds.  Theorem . Given a generalized routing problem with graph   G   G   G   and polynomial latency functions of degree   d   d   d   with nonnegative coefficients, the pure PoA is     ≤   d  +  1       absent    d  1     \leq d+1   .  Note that the PoA can grow with   d   d   d   . Consider the example shown in the following figure, where we assume unit flow: the Nash-equilibrium flows have social welfare 1; however, the best welfare is achieved when    x  =   1  -   1  /    d  +  1          x    1    1      d  1        x=1-1/{\sqrt{d+1}}   , in which case      w  =      (   1  -   1    d  +  1      )   d   ⋅   (   1  -   1    d  +  1      )    +   1  ⋅   1    d  +  1           w     normal-⋅   superscript    1    1      d  1      d     1    1      d  1        normal-⋅  1    1      d  1         w=\left(1-\frac{1}{\sqrt{d+1}}\right)^{d}\cdot\left(1-\frac{1}{\sqrt{d+1}}%
 \right)+1\cdot\frac{1}{\sqrt{d+1}}          =     (    (   1  -   1    d  +  1      )     d  +  1     )     d  +  1     +   1    d  +  1          absent     superscript   superscript    1    1      d  1          d  1         d  1       1      d  1        =\left(\left(1-\frac{1}{\sqrt{d+1}}\right)^{\sqrt{d+1}}\right)^{\sqrt{d+1}}+%
 \frac{1}{\sqrt{d+1}}           ≤    e   -    d  +  1      +   1    d  +  1       .      absent     superscript  e        d  1        1      d  1        \leq e^{-\sqrt{d+1}}+\frac{1}{\sqrt{d+1}}.     This quantity tends to zero when   d   d   d   tends to infinity.  See also   Tragedy of the commons   References        Further reading   Fabio Cunial, Price of anarchy. 1   "  Category:Game theory     E. Koutsoupias, C. H. Papadimitriou Worst-case equilibria , STACS 99 ↩  M. Goemans, V. Mirrokni, A. Vetta, Sink equilibria and convergence , FOCS 05 ↩   P. Dubey. Inefficiency of Nash equilibria. Math. Operat. Res., 11(1):1–8, 1986 ↩     