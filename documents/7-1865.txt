   Unrestricted grammar      Unrestricted grammar   In formal language theory, an unrestricted grammar is a formal grammar on which no restrictions are made on the left and right sides of the grammar's productions. This is the most general class of grammars in the Chomsky–Schützenberger hierarchy , and can generate arbitrary recursively enumerable languages .  Formal definition  An unrestricted grammar is a formal grammar     G  =   (  N  ,  Σ  ,  P  ,  S  )       G   N  normal-Σ  P  S     G=(N,\Sigma,P,S)   , where   N   N   N   is a set of nonterminal symbols,   Σ   normal-Σ   \Sigma   is a set of terminal symbols ,   N   N   N   and   Σ   normal-Σ   \Sigma   are disjoint (actually, this is not strictly necessary, because unrestricted grammars make no real distinction between nonterminal and terminal symbols, the designation exists purely so that one knows when to stop when trying to generate sentential forms of the grammar),   P   P   P   is a set of production rules of the form    α  →  β     normal-→  α  β    \alpha\to\beta   where   α   α   \alpha   and   β   β   \beta   are strings of symbols in    N  ∪  Σ      N  normal-Σ    N\cup\Sigma   and   α   α   \alpha   is not the empty string, and    S  ∈  N      S  N    S\in N   is a specially designated start symbol. 1 As the name implies, there are no real restrictions on the types of production rules that unrestricted grammars can have.  Unrestricted grammars and Turing machines  It may be shown that unrestricted grammars characterize the recursively enumerable languages. This is the same as saying that for every unrestricted grammar   G   G   G   there exists some Turing machine capable of recognizing    L   (  G  )       L  G    L(G)   and vice versa. Given an unrestricted grammar, such a Turing machine is simple enough to construct, as a two-tape nondeterministic Turing machine . The first tape contains the input word   w   w   w   to be tested, and the second tape is used by the machine to generate sentential forms from   G   G   G   . The Turing machine then does the following:   Start at the left of the second tape and repeatedly choose to move right or select the current position on the tape.  Nondeterministically choose a production    β  →  γ     normal-→  β  γ    \beta\to\gamma   from the productions in   G   G   G   .  If   β   β   \beta   appears at some position on the second tape, replace   β   β   \beta   by   γ   γ   \gamma   at that point, possibly shifting the symbols on the tape left or right depending on the relative lengths of   β   β   \beta   and   γ   γ   \gamma   (e.g. if   β   β   \beta   is longer than   γ   γ   \gamma   , shift the tape symbols left).  Compare the resulting sentential form on tape 2 to the word on tape 1. If they match, then the Turing machine accepts the word. If they don't, the Turing machine will go back to step 1.   It is easy to see that this Turing machine will generate all and only the sentential forms of   G   G   G   on its second tape after the last step is executed an arbitrary number of times, thus the language    L   (  G  )       L  G    L(G)   must be recursively enumerable.  The reverse construction is also possible. Given some Turing machine, it is possible to create an unrestricted grammar.  Computational properties  The decision problem of whether a given string   s   s   s   can be generated by a given unrestricted grammar is equivalent to the problem of whether it can be accepted by the Turing machine equivalent to the grammar. The latter problem is called the Halting problem and is undecidable.  Recursively enumerable languages are closed under Kleene star , concatenation , union , and intersection , but not under set difference ; see Recursively enumerable language#Closure properties .  The equivalence of unrestricted grammars to Turing machines implies the existence of a universal unrestricted grammar, a grammar capable of accepting any other unrestricted grammar's language given a description of the language. For this reason, it is theoretically possible to build a programming language based on unrestricted grammars (e.g. Thue ).  See also   Turing machine  Lambda calculus  String rewriting   References  "  Category:Formal languages     ↩     