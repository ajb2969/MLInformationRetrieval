


Unrestricted grammar




Unrestricted grammar

In formal language theory, an unrestricted grammar is a formal grammar on which no restrictions are made on the left and right sides of the grammar's productions. This is the most general class of grammars in the Chomsky–Schützenberger hierarchy, and can generate arbitrary recursively enumerable languages.
Formal definition
An unrestricted grammar is a formal grammar

 
 , where 
 
 
 
  is a set of nonterminal symbols, 
 
 
 
  is a set of terminal symbols, 
 
 
 
 
  and 
 
 
 
  are disjoint (actually, this is not strictly necessary, because unrestricted grammars make no real distinction between nonterminal and terminal symbols, the designation exists purely so that one knows when to stop when trying to generate sentential forms of the grammar), 
 
 
 
  is a set of production rules of the form 
 
 
 
  where 
 
 
 
  and 
 
 
 
 
  are strings of symbols in 
 
 
 
  and 
 
 
 
  is not the empty string, and 
 
 
 
  is a specially designated start symbol.1 As the name implies, there are no real restrictions on the types of production rules that unrestricted grammars can have.
Unrestricted grammars and Turing machines
It may be shown that unrestricted grammars characterize the recursively enumerable languages. This is the same as saying that for every unrestricted grammar 
 
 
 
  there exists some Turing machine capable of recognizing 
 
 
 
 
  and vice versa. Given an unrestricted grammar, such a Turing machine is simple enough to construct, as a two-tape nondeterministic Turing machine. The first tape contains the input word 
 
 
 
  to be tested, and the second tape is used by the machine to generate sentential forms from 
 
 
 
 . The Turing machine then does the following:

Start at the left of the second tape and repeatedly choose to move right or select the current position on the tape.
Nondeterministically choose a production 
 
 
 
  from the productions in 
 
 
 
 .
If 
 
 
 
 
  appears at some position on the second tape, replace 
 
 
 
  by 
 
 
 
  at that point, possibly shifting the symbols on the tape left or right depending on the relative lengths of 
 
 
 
  and 
 
 
 
  (e.g. if 
 
 
 
 
  is longer than 
 
 
 
 , shift the tape symbols left).
Compare the resulting sentential form on tape 2 to the word on tape 1. If they match, then the Turing machine accepts the word. If they don't, the Turing machine will go back to step 1.

It is easy to see that this Turing machine will generate all and only the sentential forms of 
 
 
 
  on its second tape after the last step is executed an arbitrary number of times, thus the language 
 
 
 
  must be recursively enumerable.
The reverse construction is also possible. Given some Turing machine, it is possible to create an unrestricted grammar.
Computational properties
The decision problem of whether a given string 
 
 
 
  can be generated by a given unrestricted grammar is equivalent to the problem of whether it can be accepted by the Turing machine equivalent to the grammar. The latter problem is called the Halting problem and is undecidable.
Recursively enumerable languages are closed under Kleene star, concatenation, union, and intersection, but not under set difference; see Recursively enumerable language#Closure properties.
The equivalence of unrestricted grammars to Turing machines implies the existence of a universal unrestricted grammar, a grammar capable of accepting any other unrestricted grammar's language given a description of the language. For this reason, it is theoretically possible to build a programming language based on unrestricted grammars (e.g. Thue).
See also

Turing machine
Lambda calculus
String rewriting

References
"
Category:Formal languages



↩




