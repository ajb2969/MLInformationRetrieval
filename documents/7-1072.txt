


Rolling hash




Rolling hash

A rolling hash is a hash function where the input is hashed in a window that moves through the input.
A few hash functions allow a rolling hash to be computed very quickly—the new hash value is rapidly calculated given only the old hash value, the old value removed from the window, and the new value added to the window—similar to the way a moving average function can be computed much more quickly than other low-pass filters.
One of the main applications is the Rabin-Karp string search algorithm, which uses the rolling hash described below.
Another popular application is rsync program which uses a checksum based on Mark Adler's adler-32 as its rolling hash.
Another application is the Low Bandwidth Network Filesystem (LBFS), which uses a Rabin fingerprint as its rolling hash.
At best, rolling hash values are pairwise independent1 or strongly universal. They cannot be 3-wise independent, for example.
Rabin-Karp rolling hash
The Rabin-Karp string search algorithm is normally used with a very simple rolling hash function that only uses multiplications and additions:


 
  where 
 
 
 
  is a constant and 
 
 
 
  are the input characters.
In order to avoid manipulating huge 
 
 
 
  values, all math is done modulo

 
 . The choice of 
 
 
 
  and 
 
 
 
  is critical to get good hashing; see linear congruential generator for more discussion.
Removing and adding characters simply involves adding or subtracting the first or last term. Shifting all characters by one position to the left requires multiplying the entire sum 
 
 
 
  by 
 
 
 
 . Shifting all characters by one position to the right requires dividing the entire sum 
 
 
 
  by 
 
 
 
 . Note that in modulo arithmetic, 
 
 
 
  can be chosen to have a multiplicative inverse

 
  by which 
 
 
 
  can be multiplied to get the result of the division without actually performing a division.
Content based slicing using Rabin-Karp hash
One of the interesting use cases of the rolling hash function is that it can create dynamic, content-based chunks of a stream or file. This is especially useful when it is required to send only the changed chunks of a large file over a network and a simple byte addition at the front of the file would cause all the fixed size windows to become updated, while in reality, only the first ‘chunk’ has been modified.
The simplest approach to calculate the dynamic chunks is to calculate the rolling hash and if it matches a pattern (like the lower N bits are all zeroes) then it’s a chunk boundary. This approach will ensure that any change in the file will only affect its current and possibly the next chunk, but nothing else.
When the boundaries are known, the chunks need to be compared by their hash values to detect which one was modified and needs transfer across the network.2
Cyclic polynomial
Hashing by cyclic polynomial3—sometimes called Buzhash—is also simple, but it has the benefit of avoiding multiplications, using barrel shifts instead. It is a form of tabulation hashing: it presumes that there is some hash function 
 
 
 
  from characters to integers in the interval 
 
 
 
 . This hash function might be simply an array or a hash table mapping characters to random integers. Let the function 
 
 
 
  be a cyclic binary rotation (or barrel shift): it rotates the bits by 1 to the left, pushing the latest bit in the first position. E.g., 
 
 
 
 . Let 
 
 
 
  be the bit-wise exclusive or. The hash values are defined as



where the multiplications by powers of two can be implemented by binary shifts. The result is a number in 
 
 
 
 .
Computing the hash values in a rolling fashion is done as follows. Let 
 
 
 
  be the previous hash value. Rotate 
 
 
 
  once
 
 
 
 . If 
 
 
 
  is the character to be removed, rotate it 
 
 
 
  times
 
 
 
 . Then simply set



where 
 
 
 
  is the new character.
Hashing by cyclic polynomials is strongly universal or pairwise independent: simply keep the first 
 
 
 
  bits. That is, take the result 
 
 
 
  and dismiss any 
 
 
 
  consecutive bits.4 In practice, this can be achieved by an integer division 
 
 
 
 .
Content based slicing using moving average
Several programs including gzip (with the --rsyncable option) and rsyncrypto do content-based slicing based on an this specific (unweighted) moving average:5




where



 
  is the sum of 8196 consecutive bytes ending with byte 
 
 



 
  is byte 
 
 
 
  of the file


 
  is the (causal, unweighted) moving average at byte 
 
 
 
  of the file


 
  is a "hash value" consisting of the bottom 12 bits of 
 
 


Shifting the window by one byte simply involves adding the new character to the sum and subtracting the oldest character (no longer in the window) from the sum.
For every 
 
 
 
  where 
 
 
 
 , these programs cut the file between 
 
 
 
  and 
 
 
 
 . This approach will ensure that any change in the file will only affect its current and possibly the next chunk, but no other chunk.
Computational complexity
All rolling hash functions are linear in the number of characters, but their complexity with respect to the length of the window (
 
 
 
 ) varies. Rabin-Karp rolling hash requires the multiplications of two 
 
 
 
 -bit numbers, integer multiplication is in 
 
 
 
 .6 Hashing ngrams by cyclic polynomials can be done in linear time.7
Software

rollinghashcpp is a Free software C++ implementation of several rolling hash functions
rollinghashjava is an Apache licensed Java implementation of rolling hash functions

See also

MinHash
w-shingling

External links

MIT 6.006: Introduction to Algorithms 2011- Lecture Notes - Rolling Hash

Footnotes


"
Category:Hash functions



Daniel Lemire, Owen Kaser: Recursive n-gram hashing is pairwise independent, at best, Computer Speech & Language 24 (4), pages 698-710, 2010. arXiv:0705.4676

Jonathan D. Cohen, Recursive Hashing Functions for n-Grams, ACM Trans. Inf. Syst. 15 (3), 1997

"Rsyncrypto Algorithm".
M. Fürer, Faster integer multiplication, in: STOC ’07, 2007, pp. 57–66.





