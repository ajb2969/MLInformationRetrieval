   Ext functor      Ext functor   In mathematics , the Ext functors of homological algebra are derived functors of Hom functors . They were first used in algebraic topology , but are common in many areas of mathematics. The name "Ext" comes from group theory, as the Ext functor is used in group cohomology to classify abelian  group extensions . 1  Definition and computation  Let R be a ring and let Mod R be the category of modules over R . Let B be in Mod R and set T ( B ) = Hom R ( A,B ), for fixed A in Mod R . This is a left exact functor and thus has right derived functors  R n T . The Ext functor is defined by         Ext  R  n    (  A  ,  B  )    =    (    R  n   T   )    (  B  )     .        superscript   subscript  Ext  R   n   A  B        superscript  R  n   T   B     \operatorname{Ext}_{R}^{n}(A,B)=(R^{n}T)(B).     This can be calculated by taking any injective resolution       0  →  B  →   I  0   →   I  1   →  …   ,       normal-→  0  B    normal-→     superscript  I  0     normal-→     superscript  I  1     normal-→    normal-…     0\rightarrow B\rightarrow I^{0}\rightarrow I^{1}\rightarrow\dots,     and computing       0  →    Hom  R    (  A  ,   I  0   )    →    Hom  R    (  A  ,   I  1   )    →  …   .       normal-→  0    subscript  Hom  R   A   superscript  I  0      normal-→      subscript  Hom  R   A   superscript  I  1      normal-→    normal-…     0\rightarrow\operatorname{Hom}_{R}(A,I^{0})\rightarrow\operatorname{Hom}_{R}(A%
 ,I^{1})\rightarrow\dots.     Then ( R n T )( B ) is the homology of this complex. Note that Hom R ( A,B ) is excluded from the complex.  An alternative definition is given using the functor G ( A )=Hom R ( A,B ). For a fixed module B , this is a contravariant  left exact functor , and thus we also have right derived functors  R n G , and can define         Ext  R  n    (  A  ,  B  )    =    (    R  n   G   )    (  A  )     .        superscript   subscript  Ext  R   n   A  B        superscript  R  n   G   A     \operatorname{Ext}_{R}^{n}(A,B)=(R^{n}G)(A).     This can be calculated by choosing any projective resolution       …  →   P  1   →   P  0   →  A  →  0   ,       normal-→  normal-…   superscript  P  1     normal-→     superscript  P  0     normal-→    A    normal-→    0     \dots\rightarrow P^{1}\rightarrow P^{0}\rightarrow A\rightarrow 0,     and proceeding dually by computing       0  →    Hom  R    (   P  0   ,  B  )    →    Hom  R    (   P  1   ,  B  )    →  …   .       normal-→  0    subscript  Hom  R    superscript  P  0   B     normal-→      subscript  Hom  R    superscript  P  1   B     normal-→    normal-…     0\rightarrow\operatorname{Hom}_{R}(P^{0},B)\rightarrow\operatorname{Hom}_{R}(P%
 ^{1},B)\rightarrow\dots.     Then ( R n G )( A ) is the homology of this complex. Again note that Hom R ( A,B ) is excluded.  These two constructions turn out to yield isomorphic results, and so both may be used to calculate the Ext functor.  Ext and extensions  Equivalence of extensions  Ext functors derive their name from the relationship to extensions of modules. Given R -modules A and B , an extension of A by B is a short exact sequence of R -modules      0  →  B  →  E  →  A  →  0.       normal-→  0  B    normal-→    E    normal-→    A    normal-→    0.     0\rightarrow B\rightarrow E\rightarrow A\rightarrow 0.     Two extensions      0  →  B  →  E  →  A  →  0       normal-→  0  B    normal-→    E    normal-→    A    normal-→    0     0\rightarrow B\rightarrow E\rightarrow A\rightarrow 0         0  →  B  →   E  ′   →  A  →  0       normal-→  0  B    normal-→     superscript  E  normal-′     normal-→    A    normal-→    0     0\rightarrow B\rightarrow E^{\prime}\rightarrow A\rightarrow 0     are said to be equivalent (as extensions of A by B ) if there is a commutative diagram  .  Note that the Five Lemma implies that the middle arrow is an isomorphism. An extension of A by B is called split if it is equivalent to the trivial extension      0  →  B  →   A  ⊕  B   →  A  →  0.       normal-→  0  B    normal-→     direct-sum  A  B     normal-→    A    normal-→    0.     0\rightarrow B\rightarrow A\oplus B\rightarrow A\rightarrow 0.     There is a bijective correspondence between equivalence classes of extensions      0  →  B  →  E  →  A  →  0       normal-→  0  B    normal-→    E    normal-→    A    normal-→    0     0\rightarrow B\rightarrow E\rightarrow A\rightarrow 0     of A by B and elements of        Ext  R  1    (  A  ,  B  )    .      superscript   subscript  Ext  R   1   A  B    \operatorname{Ext}_{R}^{1}(A,B).     The Baer sum of extensions  Given two extensions      0  →  B  →  E  →  A  →  0       normal-→  0  B    normal-→    E    normal-→    A    normal-→    0     0\rightarrow B\rightarrow E\rightarrow A\rightarrow 0         0  →  B  →   E  ′   →  A  →  0       normal-→  0  B    normal-→     superscript  E  normal-′     normal-→    A    normal-→    0     0\rightarrow B\rightarrow E^{\prime}\rightarrow A\rightarrow 0     we can construct the Baer sum , by forming the pullback over   A   A   A   ,       Γ  =   {    (  e  ,   e  ′   )   ∈   E  ⊕    E  ′      |    g   (  e  )    =    g  ′    (   e  ′   )     }    .      normal-Γ   conditional-set     e   superscript  e  normal-′     direct-sum  E   superscript  E  normal-′         g  e      superscript  g  normal-′    superscript  e  normal-′        \Gamma=\left\{(e,e^{\prime})\in E\oplus E^{\prime}\;|\;g(e)=g^{\prime}(e^{%
 \prime})\right\}.     We form the quotient      Y  =   Γ  /   {    (   f   (  b  )    ,  0  )   -   (  0  ,    f  ′    (  b  )    )    |   b  ∈  B   }        Y    normal-Γ   conditional-set       f  b   0    0     superscript  f  normal-′   b       b  B       Y=\Gamma/\{(f(b),0)-(0,f^{\prime}(b))\;|\;b\in B\}   ,  that is, we mod out by the relation     (    f   (  b  )    +  e   ,   e  ′   )   ∼   (  e  ,     f  ′    (  b  )    +   e  ′    )      similar-to       f  b   e    superscript  e  normal-′     e       superscript  f  normal-′   b    superscript  e  normal-′       (f(b)+e,e^{\prime})\sim(e,f^{\prime}(b)+e^{\prime})   . The extension      0  →  B  →  Y  →  A  →  0       normal-→  0  B    normal-→    Y    normal-→    A    normal-→    0     0\rightarrow B\rightarrow Y\rightarrow A\rightarrow 0     where the first arrow is    b  ↦   [   (   f   (  b  )    ,  0  )   ]   =   [   (  0  ,    f  ′    (  b  )    )   ]        maps-to  b   delimited-[]     f  b   0          delimited-[]   0     superscript  f  normal-′   b        b\mapsto[(f(b),0)]=[(0,f^{\prime}(b))]   and the second     (  e  ,   e  ′   )   ↦   g   (  e  )    =    g  ′    (   e  ′   )         maps-to   e   superscript  e  normal-′      g  e           superscript  g  normal-′    superscript  e  normal-′       (e,e^{\prime})\mapsto g(e)=g^{\prime}(e^{\prime})   thus formed is called the Baer sum of the extensions E and E '.  Up to equivalence of extensions, the Baer sum is commutative and has the trivial extension as identity element. The extension 0 → B → E → A → 0 has for opposite the same extension with exactly one of the central arrows turned to their opposite eg the morphism g is replaced by -g .  The set of extensions up to equivalence is an abelian group that is a realization of the functor Ext( A , B )  Construction of Ext in abelian categories  The above identification enables us to define Ext( A , B ) even for abelian categories  Ab without reference to projectives and injectives (even if the category has no projectives or injectives). We simply take Ext( A , B ) to be the set of equivalence classes of extensions of A by B , forming an abelian group under the Baer sum. Similarly, we can define higher Ext groups Ext( A , B ) as equivalence classes of n-extensions , which are exact sequences      0  →  B  →   X  n   →  ⋯  →   X  1   →  A  →  0       normal-→  0  B    normal-→     subscript  X  n     normal-→    normal-⋯    normal-→     subscript  X  1     normal-→    A    normal-→    0     0\rightarrow B\rightarrow X_{n}\rightarrow\cdots\rightarrow X_{1}\rightarrow A\rightarrow
 0     under the equivalence relation generated by the relation that identifies two extensions      ξ  :   0  →  B  →   X  n   →  ⋯  →   X  1   →  A  →  0      normal-:  ξ     normal-→  0  B    normal-→     subscript  X  n     normal-→    normal-⋯    normal-→     subscript  X  1     normal-→    A    normal-→    0      \xi:0\rightarrow B\rightarrow X_{n}\rightarrow\cdots\rightarrow X_{1}%
 \rightarrow A\rightarrow 0          ξ  ′   :   0  →  B  →   X  n  ′   →  ⋯  →   X  1  ′   →  A  →  0      normal-:   superscript  ξ  normal-′      normal-→  0  B    normal-→     subscript   superscript  X  normal-′   n     normal-→    normal-⋯    normal-→     subscript   superscript  X  normal-′   1     normal-→    A    normal-→    0      \xi^{\prime}:0\rightarrow B\rightarrow X^{\prime}_{n}\rightarrow\cdots%
 \rightarrow X^{\prime}_{1}\rightarrow A\rightarrow 0     if there are maps X m → X′ m for all m in {1, 2, ..., n } so that every resulting square commutes , i.e. if there is a chain map  X   ξ   ξ   \xi   →   ξ   ξ   \xi    '.  The Baer sum of the two n -extensions above is formed by letting X be the pullback of X 1 and X over A , and X be the pushout of X n and X under B quotiented by the skew diagonal copy of B; see Weibel, §3.4. Then we define the Baer sum of the extensions to be      0  →  B  →   X  n  ′′   →    X   n  -  1    ⊕   X   n  -  1   ′    →  ⋯  →    X  2   ⊕   X  2  ′    →   X  1  ′′   →  A  →  0.       normal-→  0  B    normal-→     subscript   superscript  X  ′′   n     normal-→     direct-sum   subscript  X    n  1     subscript   superscript  X  normal-′     n  1       normal-→    normal-⋯    normal-→     direct-sum   subscript  X  2    subscript   superscript  X  normal-′   2      normal-→     subscript   superscript  X  ′′   1     normal-→    A    normal-→    0.     0\rightarrow B\rightarrow X^{\prime\prime}_{n}\rightarrow X_{n-1}\oplus X^{%
 \prime}_{n-1}\rightarrow\cdots\rightarrow X_{2}\oplus X^{\prime}_{2}%
 \rightarrow X^{\prime\prime}_{1}\rightarrow A\rightarrow 0.     Further properties of Ext  The Ext functor exhibits some convenient properties, useful in computations.   Ext( A , B ) = 0 for i > 0 if either B is injective or A  projective .    A converse also holds: if Ext( A , B ) = 0 for all A , then Ext( A , B ) = 0 for all A , and B is injective; if Ext( A , B ) = 0 for all B , then Ext( A , B ) = 0 for all B , and A is projective.          Ext  R  n    (    ⊕  α    A  α    ,  B  )    ≅    ∏  α     Ext  R  n    (   A  α   ,  B  )           subscript   superscript  Ext  n   R     subscript  direct-sum  α    subscript  A  α    B     subscript  product  α     subscript   superscript  Ext  n   R    subscript  A  α   B      \operatorname{Ext}^{n}_{R}\left(\bigoplus_{\alpha}A_{\alpha},B\right)\cong%
 \prod_{\alpha}\operatorname{Ext}^{n}_{R}(A_{\alpha},B)             Ext  R  n    (  A  ,    ∏  β    B  β    )    ≅    ∏  β     Ext  R  n    (  A  ,   B  β   )           subscript   superscript  Ext  n   R   A    subscript  product  β    subscript  B  β       subscript  product  β     subscript   superscript  Ext  n   R   A   subscript  B  β       \operatorname{Ext}^{n}_{R}\left(A,\prod_{\beta}B_{\beta}\right)\cong\prod_{%
 \beta}\operatorname{Ext}^{n}_{R}(A,B_{\beta})      Ring structure and module structure on specific Exts  One more very useful way to view the Ext functor is this: when an element of Ext( A , B ) = 0 is considered as an equivalence class of maps f : P n → B for a projective resolution  P * of A ; so, then we can pick a long exact sequence Q * ending with B and lift the map f using the projectivity of the modules P m to a chain map  f * : P * → Q * of degree -n. It turns out that homotopy classes of such chain maps correspond precisely to the equivalence classes in the definition of Ext above.  Under sufficiently nice circumstances, such as when the ring  R is a group ring over a field k , or an augmented k - algebra , we can impose a ring structure on Ext( k , k ). The multiplication has quite a few equivalent interpretations, corresponding to different interpretations of the elements of Ext( k , k ).  One interpretation is in terms of these homotopy classes of chain maps. Then the product of two elements is represented by the composition of the corresponding representatives. We can choose a single resolution of k , and do all the calculations inside Hom R ( P * , P * ), which is a differential graded algebra, with cohomology precisely Ext R ( k,k ).  The Ext groups can also be interpreted in terms of exact sequences; this has the advantage that it does not rely on the existence of projective or injective modules. Then we take the viewpoint above that an element of Ext( A , B ) is a class, under a certain equivalence relation, of exact sequences of length n + 2 starting with B and ending with A . This can then be spliced with an element in Ext( C , A ), by replacing ... → X 1 → A → 0 and 0 → A → Y n → ... with:      ⋯  →   X  1   →   Y  n   →  ⋯       normal-→  normal-⋯   subscript  X  1     normal-→     subscript  Y  n     normal-→    normal-⋯     \cdots\rightarrow X_{1}\rightarrow Y_{n}\rightarrow\cdots     where the middle arrow is the composition of the functions X 1 → A and A → Y n . This product is called the Yoneda splice .  These viewpoints turn out to be equivalent whenever both make sense.  Using similar interpretations, we find that Ext( k , M ) is a module over Ext( k , k ), again for sufficiently nice situations.  Interesting examples  If Z [ G ] is the integral group ring for a group  G , then Ext( Z , M ) is the group cohomology H*( G,M ) with coefficients in M .  For F p the finite field on p elements, we also have that H*( G,M ) = Ext ( F p , M ), and it turns out that the group cohomology doesn't depend on the base ring chosen.  If A is a k - algebra , then Ext ( A , M ) is the Hochschild cohomology HH*( A,M ) with coefficients in the A -bimodule M .  If R is chosen to be the universal enveloping algebra for a Lie algebra    𝔤   𝔤   \mathfrak{g}   over a commutative ring k , then Ext( k , M ) is the Lie algebra cohomology      H  *    (  𝔤  ,  M  )       superscript  normal-H    𝔤  M    \operatorname{H}^{*}(\mathfrak{g},M)   with coefficients in the module M .  See also   Tor functor  The Grothendieck group is a construction centered on extensions  The universal coefficient theorem for cohomology is one notable use of the Ext functor  Grothendieck duality  Yoneda product   References      "  Category:Homological algebra  Category:Binary operations     ↩     