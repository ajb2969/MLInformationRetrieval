   Ordered weighted averaging aggregation operator      Ordered weighted averaging aggregation operator   In applied mathematics ‚Äì specifically in fuzzy logic ‚Äì the ordered weighted averaging (OWA) operators provide a parameterized class of mean type aggregation operators. They were introduced by Ronald R. Yager . Many notable mean operators such as the max, arithmetic average , median and min, are members of this class. They have been widely used in computational intelligence because of their ability to model linguistically expressed aggregation instructions.  Definition  Formally an OWA operator of dimension    n    n   \ n   is a mapping    F  :    R  n   ‚Üí  R      normal-:  F   normal-‚Üí   subscript  R  n   R     F:R_{n}\rightarrow R   that has an associated collection of weights     W   =   [   w  1   ,  ‚Ä¶  ,   w  n   ]       W    subscript  w  1   normal-‚Ä¶   subscript  w  n      \ W=[w_{1},\ldots,w_{n}]   lying in the unit interval and summing to one and with       F   (   a  1   ,  ‚Ä¶  ,   a  n   )    =    ‚àë   j  =  1   n     w  j    b  j           F    subscript  a  1   normal-‚Ä¶   subscript  a  n       superscript   subscript     j  1    n      subscript  w  j    subscript  b  j       F(a_{1},\ldots,a_{n})=\sum_{j=1}^{n}w_{j}b_{j}     where    b  j     subscript  b  j    b_{j}   is the j th largest of the    a  i     subscript  a  i    a_{i}   .  By choosing different W one can implement different aggregation operators. The OWA operator is a non-linear operator as a result of the process of determining the b j .  Properties  The OWA operator is a mean operator. It is bounded , monotonic , symmetric , and idempotent , as defined below.      Bounded        min   (   a  1   ,  ‚Ä¶  ,   a  n   )    ‚â§   F   (   a  1   ,  ‚Ä¶  ,   a  n   )    ‚â§   max   (   a  1   ,  ‚Ä¶  ,   a  n   )             subscript  a  1   normal-‚Ä¶   subscript  a  n      F    subscript  a  1   normal-‚Ä¶   subscript  a  n             subscript  a  1   normal-‚Ä¶   subscript  a  n       \min(a_{1},\ldots,a_{n})\leq F(a_{1},\ldots,a_{n})\leq\max(a_{1},\ldots,a_{n})        Monotonic        F   (   a  1   ,  ‚Ä¶  ,   a  n   )    ‚â•   F   (   g  1   ,  ‚Ä¶  ,   g  n   )          F    subscript  a  1   normal-‚Ä¶   subscript  a  n       F    subscript  g  1   normal-‚Ä¶   subscript  g  n       F(a_{1},\ldots,a_{n})\geq F(g_{1},\ldots,g_{n})   if     a  i   ‚â•   g  i        subscript  a  i    subscript  g  i     a_{i}\geq g_{i}   for     i   =   1  ,  2  ,  ‚Ä¶  ,  n       i   1  2  normal-‚Ä¶  n     \ i=1,2,\ldots,n        Symmetric        F   (   a  1   ,  ‚Ä¶  ,   a  n   )    =   F   (   a   ùùÖ   (  ùüè  )     ,  ‚Ä¶  ,   a   ùùÖ   (  ùíè  )     )          F    subscript  a  1   normal-‚Ä¶   subscript  a  n       F    subscript  a    ùùÖ  1    normal-‚Ä¶   subscript  a    ùùÖ  ùíè        F(a_{1},\ldots,a_{n})=F(a_{\boldsymbol{\pi(1)}},\ldots,a_{\boldsymbol{\pi(n)}})   if   ùùÖ   ùùÖ   \boldsymbol{\pi}   is a permutation map     Idempotent         F    (   a  1   ,  ‚Ä¶  ,   a  n   )    =  a        F    subscript  a  1   normal-‚Ä¶   subscript  a  n     a    \ F(a_{1},\ldots,a_{n})=a   if all      a   i   =  a       subscript  a  i   a    \ a_{i}=a        Notable OWA operators        F    (   a  1   ,  ‚Ä¶  ,   a  n   )    =   max   (   a  1   ,  ‚Ä¶  ,   a  n   )          F    subscript  a  1   normal-‚Ä¶   subscript  a  n        subscript  a  1   normal-‚Ä¶   subscript  a  n      \ F(a_{1},\ldots,a_{n})=\max(a_{1},\ldots,a_{n})   if      w   1   =  1       subscript  w  1   1    \ w_{1}=1   and      w   j   =  0       subscript  w  j   0    \ w_{j}=0   for    j  ‚â†  1      j  1    j\neq 1           F    (   a  1   ,  ‚Ä¶  ,   a  n   )    =   min   (   a  1   ,  ‚Ä¶  ,   a  n   )          F    subscript  a  1   normal-‚Ä¶   subscript  a  n        subscript  a  1   normal-‚Ä¶   subscript  a  n      \ F(a_{1},\ldots,a_{n})=\min(a_{1},\ldots,a_{n})   if      w   n   =  1       subscript  w  n   1    \ w_{n}=1   and      w   j   =  0       subscript  w  j   0    \ w_{j}=0   for    j  ‚â†  n      j  n    j\neq n     Characterizing features  Two features have been used to characterize the OWA operators. The first is the attitudinal character(orness).  This is defined as        A  -   C   (  W  )     =    1   n  -  1      ‚àë   j  =  1   n     (   n  -  j   )    w  j       .        A    C  W        1    n  1      superscript   subscript     j  1    n       n  j    subscript  w  j        A-C(W)=\frac{1}{n-1}\sum_{j=1}^{n}(n-j)w_{j}.     It is known that     A  -   C   (  W  )     ‚àà   [  0  ,  1  ]         A    C  W     0  1     A-C(W)\in[0,1]   .  In addition A ‚àí C (max) = 1, A¬†‚àí¬†C(ave) = A¬†‚àí¬†C(med) = 0.5 and A¬†‚àí¬†C(min) = 0. Thus the A¬†‚àí¬†C goes from 1 to 0 as we go from Max to Min aggregation. The attitudinal character characterizes the similarity of aggregation to OR operation(OR is defined as the Max).  The second feature is the dispersion. This defined as        H   (  W  )    =   -    ‚àë   j  =  1   n     w  j    ln   (   w  j   )        .        H  W       superscript   subscript     j  1    n      subscript  w  j      subscript  w  j         H(W)=-\sum_{j=1}^{n}w_{j}\ln(w_{j}).     An alternative definition is      E   (  W  )    =    ‚àë   j  =  1   n    w  j  2     .        E  W     superscript   subscript     j  1    n    superscript   subscript  w  j   2      E(W)=\sum_{j=1}^{n}w_{j}^{2}.   The dispersion characterizes how uniformly the arguments are being used  A literature survey: OWA (1988-2014)  The historical reconstruction of scientific development of the OWA field, the identification of the dominant direction of knowledge accumulation that emerged since the publication of the first OWA paper, and to discover the most active lines of research has recently been published, (see: http://onlinelibrary.wiley.com/doi/10.1002/int.21673/full ). The results suggest, as expected, that Yager's paper[1] (IEEE Trans. Systems Man Cybernet, 18(1), 183‚Äì190, 1988) is the most influential paper and the starting point of all other research using OWA. Starting from his contribution, other lines of research developed and we describe them. Full list of papers published in OWA is also available at http://onlinelibrary.wiley.com/doi/10.1002/int.21673/full )  Type-1 OWA aggregation operators  The above Yager's OWA operators are used to aggregate the crisp values. Can we aggregate fuzzy sets in the OWA mechanism ? The Type-1 OWA operators have been proposed for this purpose. So the type-1 OWA operators provides us with a new technique for directly aggregating uncertain information with uncertain weights via OWA mechanism in soft decision making and data mining, where these uncertain objects are modelled by fuzzy sets.  The type-1 OWA operator is defined according to the alpha-cuts of fuzzy sets as follows:  Given the n linguistic weights     {   W  i   }    i  =  1   n     superscript   subscript    superscript  W  i      i  1    n    \left\{{W^{i}}\right\}_{i=1}^{n}   in the form of fuzzy sets defined on the domain of discourse    U  =   [  0  ,  1  ]       U   0  1     U=[0,\;\;1]   , then for each    Œ±  ‚àà   [  0  ,  1  ]       Œ±   0  1     \alpha\in[0,\;1]   , an   Œ±   Œ±   \alpha   -level type-1 OWA operator with   Œ±   Œ±   \alpha   -level sets     {   W  Œ±  i   }    i  =  1   n     superscript   subscript    superscript   subscript  W  Œ±   i      i  1    n    \left\{{W_{\alpha}^{i}}\right\}_{i=1}^{n}   to aggregate the   Œ±   Œ±   \alpha   -cuts of fuzzy sets     {   A  i   }    i  =  1   n     superscript   subscript    superscript  A  i      i  1    n    \left\{{A^{i}}\right\}_{i=1}^{n}   is given as        Œ¶  Œ±    (   A  Œ±  1   ,  ‚Ä¶  ,   A  Œ±  n   )    =   {     ‚àë   i  =  1   n     w  i    a   œÉ   (  i  )         ‚àë   i  =  1   n    w  i     |     w  i   ‚àà   W  Œ±  i    ,     a  i   ‚àà   A  Œ±  i    ,   i  =   1  ,  ‚Ä¶  ,  n      }          subscript  normal-Œ¶  Œ±     superscript   subscript  A  Œ±   1   normal-‚Ä¶   superscript   subscript  A  Œ±   n      conditional-set      superscript   subscript     i  1    n      subscript  w  i    subscript  a    œÉ  i        superscript   subscript     i  1    n    subscript  w  i      formulae-sequence     subscript  w  i    superscript   subscript  W  Œ±   i     formulae-sequence     subscript  a  i    superscript   subscript  A  Œ±   i      i   1  normal-‚Ä¶  n         \Phi_{\alpha}\left({A_{\alpha}^{1},\ldots,A_{\alpha}^{n}}\right)=\left\{{\frac%
 {\sum\limits_{i=1}^{n}{w_{i}a_{\sigma(i)}}}{\sum\limits_{i=1}^{n}{w_{i}}}\left%
 |{w_{i}\in W_{\alpha}^{i},\;a_{i}}\right.\in A_{\alpha}^{i},\;i=1,\ldots,n}\right\}     where      W  Œ±  i   =   {  w  |     Œº   W  i     (  w  )    ‚â•  Œ±   }    ,    A  Œ±  i   =   {  x  |     Œº   A  i     (  x  )    ‚â•  Œ±   }       formulae-sequence     superscript   subscript  W  Œ±   i    conditional-set  w       subscript  Œº   subscript  W  i    w   Œ±        superscript   subscript  A  Œ±   i    conditional-set  x       subscript  Œº   subscript  A  i    x   Œ±       W_{\alpha}^{i}=\{w|\mu_{W_{i}}(w)\geq\alpha\},A_{\alpha}^{i}=\{x|\mu_{A_{i}}(x%
 )\geq\alpha\}   , and    œÉ  :    {  1  ,  ‚Ä¶  ,   n   }   ‚Üí   {  1  ,  ‚Ä¶  ,   n   }       normal-:  œÉ   normal-‚Üí   1  normal-‚Ä¶  n    1  normal-‚Ä¶  n      \sigma:\{\;1,\ldots,n\;\}\to\{\;1,\ldots,n\;\}   is a permutation function such that      a   œÉ   (  i  )     ‚â•   a   œÉ   (   i  +  1   )      ,    ‚àÄ  i   =   1  ,  ‚Ä¶  ,   n  -  1        formulae-sequence     subscript  a    œÉ  i     subscript  a    œÉ    i  1         for-all  i    1  normal-‚Ä¶    n  1       a_{\sigma(i)}\geq a_{\sigma(i+1)},\;\forall\;i=1,\ldots,n-1   , i.e.,    a   œÉ   (  i  )       subscript  a    œÉ  i     a_{\sigma(i)}   is the   i   i   i   th largest element in the set    {   a  1   ,  ‚Ä¶  ,   a  n   }      subscript  a  1   normal-‚Ä¶   subscript  a  n     \left\{{a_{1},\ldots,a_{n}}\right\}   .  The computation of the type-1 OWA output is implemented by computing the left end-points and right end-points of the intervals     Œ¶  Œ±    (   A  Œ±  1   ,  ‚Ä¶  ,   A  Œ±  n   )        subscript  normal-Œ¶  Œ±     superscript   subscript  A  Œ±   1   normal-‚Ä¶   superscript   subscript  A  Œ±   n      \Phi_{\alpha}\left({A_{\alpha}^{1},\ldots,A_{\alpha}^{n}}\right)   :     Œ¶  Œ±     (   A  Œ±  1   ,  ‚Ä¶  ,   A  Œ±  n   )   -        subscript  normal-Œ¶  Œ±    subscript    superscript   subscript  A  Œ±   1   normal-‚Ä¶   superscript   subscript  A  Œ±   n        \Phi_{\alpha}\left({A_{\alpha}^{1},\ldots,A_{\alpha}^{n}}\right)_{-}   and      Œ¶  Œ±     (   A  Œ±  1   ,  ‚Ä¶  ,   A  Œ±  n   )   +    ,       subscript  normal-Œ¶  Œ±    subscript    superscript   subscript  A  Œ±   1   normal-‚Ä¶   superscript   subscript  A  Œ±   n        \Phi_{\alpha}\left({A_{\alpha}^{1},\ldots,A_{\alpha}^{n}}\right)_{+},   where      A  Œ±  i   =   [   A   Œ±  -   i   ,   A   Œ±  +   i   ]    ,    W  Œ±  i   =   [   W   Œ±  -   i   ,   W   Œ±  +   i   ]       formulae-sequence     superscript   subscript  A  Œ±   i     superscript   subscript  A   limit-from  Œ±     i    superscript   subscript  A   limit-from  Œ±     i        superscript   subscript  W  Œ±   i     superscript   subscript  W   limit-from  Œ±     i    superscript   subscript  W   limit-from  Œ±     i       A_{\alpha}^{i}=[A_{\alpha-}^{i},A_{\alpha+}^{i}],W_{\alpha}^{i}=[W_{\alpha-}^{%
 i},W_{\alpha+}^{i}]   . Then membership function of resulting aggregation fuzzy set is:        Œº  G    (  x  )    =    ‚à®   Œ±  :   x  ‚àà    Œ¶  Œ±     (   A  Œ±  1   ,  ‚ãØ  ,   A  Œ±  n   )   Œ±       Œ±          subscript  Œº  G   x     subscript    normal-:  Œ±    x     subscript  normal-Œ¶  Œ±    subscript    superscript   subscript  A  Œ±   1   normal-‚ãØ   superscript   subscript  A  Œ±   n    Œ±       Œ±     \mu_{G}(x)=\mathop{\vee}\limits_{\alpha:x\in\Phi_{\alpha}\left({A_{\alpha}^{1}%
 ,\cdots,A_{\alpha}^{n}}\right)_{\alpha}}\alpha     For the left end-points, we need to solve the following programming problem:        Œ¶  Œ±     (   A  Œ±  1   ,  ‚ãØ  ,   A  Œ±  n   )   -    =    min       W   Œ±  -   i   ‚â§   w  i   ‚â§    W   Œ±  +   i    A   Œ±  -   i    ‚â§   a  i   ‚â§   A   Œ±  +   i          ‚àë   i  =  1   n      w  i    a   œÉ   (  i  )      /    ‚àë   i  =  1   n    w  i              subscript  normal-Œ¶  Œ±    subscript    superscript   subscript  A  Œ±   1   normal-‚ãØ   superscript   subscript  A  Œ±   n         subscript          superscript   subscript  W   limit-from  Œ±     i    subscript  w  i           superscript   subscript  W   limit-from  Œ±     i    superscript   subscript  A   limit-from  Œ±     i          subscript  a  i         superscript   subscript  A   limit-from  Œ±     i          superscript   subscript     i  1    n        subscript  w  i    subscript  a    œÉ  i       superscript   subscript     i  1    n    subscript  w  i         \Phi_{\alpha}\left({A_{\alpha}^{1},\cdots,A_{\alpha}^{n}}\right)_{-}=\mathop{%
 \min}\limits_{\begin{array}[]{l}W_{\alpha-}^{i}\leq w_{i}\leq W_{\alpha+}^{i}A%
 _{\alpha-}^{i}\leq a_{i}\leq A_{\alpha+}^{i}\end{array}}\sum\limits_{i=1}^{n}{%
 w_{i}a_{\sigma(i)}/\sum\limits_{i=1}^{n}{w_{i}}}     while for the right end-points, we need to solve the following programming problem:        Œ¶  Œ±     (   A  Œ±  1   ,  ‚ãØ  ,   A  Œ±  n   )   +    =    max       W   Œ±  -   i   ‚â§   w  i   ‚â§    W   Œ±  +   i    A   Œ±  -   i    ‚â§   a  i   ‚â§   A   Œ±  +   i          ‚àë   i  =  1   n      w  i    a   œÉ   (  i  )      /    ‚àë   i  =  1   n    w  i              subscript  normal-Œ¶  Œ±    subscript    superscript   subscript  A  Œ±   1   normal-‚ãØ   superscript   subscript  A  Œ±   n         subscript          superscript   subscript  W   limit-from  Œ±     i    subscript  w  i           superscript   subscript  W   limit-from  Œ±     i    superscript   subscript  A   limit-from  Œ±     i          subscript  a  i         superscript   subscript  A   limit-from  Œ±     i          superscript   subscript     i  1    n        subscript  w  i    subscript  a    œÉ  i       superscript   subscript     i  1    n    subscript  w  i         \Phi_{\alpha}\left({A_{\alpha}^{1},\cdots,A_{\alpha}^{n}}\right)_{+}=\mathop{%
 \max}\limits_{\begin{array}[]{l}W_{\alpha-}^{i}\leq w_{i}\leq W_{\alpha+}^{i}A%
 _{\alpha-}^{i}\leq a_{i}\leq A_{\alpha+}^{i}\end{array}}\sum\limits_{i=1}^{n}{%
 w_{i}a_{\sigma(i)}/\sum\limits_{i=1}^{n}{w_{i}}}     This paper has presented a fast method to solve two programming problem so that the type-1 OWA aggregation operation can be performed efficiently.  References   Yager, R. R., "On ordered weighted averaging aggregation operators in multi-criteria decision making," IEEE Transactions on Systems, Man and Cybernetics 18, 183‚Äì190, 1988.    Yager, R. R. and Kacprzyk, J., The Ordered Weighted Averaging Operators: Theory and Applications , Kluwer: Norwell, MA, 1997.    Liu, X., "The solution equivalence of minimax disparity and minimum variance problems for OWA operators," International Journal of Approximate Reasoning 45, 68‚Äì81, 2007.    Emrouznejad (2009) SAS/OWA: ordered weighted averaging in SAS optimization, Soft Computing 1    Emrouznejad, A. and M. Marra (2014), Ordered Weighted Averaging Operators 1988‚Äì2014: A citation-based literature survey, International Journal of Intelligent Systems, 29:994-1014 & http://onlinelibrary.wiley.com/store/10.1002/int.21673/asset/supinfo/int21673-sup-0001-SupMat.docx?v=1&s; ;=c0d8bdd220a31c876eb5885521cfa16d191f334d.    Torra, V. and Narukawa, Y., Modeling Decisions: Information Fusion and Aggregation Operators, Springer: Berlin, 2007.    Majlender, P., "OWA operators with maximal R√©nyi entropy," Fuzzy Sets and Systems 155, 340‚Äì360, 2005.    Szekely, G. J. and Buczolich, Z., " When is a weighted average of ordered sample elements a maximum likelihood estimator of the location parameter?" Advances in Applied Mathematics 10, 1989, 439‚Äì456.    S.-M. Zhou, F. Chiclana, R. I. John and J. M. Garibaldi, "Type-1 OWA operators for aggregating uncertain information with uncertain weights induced by type-2 linguistic quantifiers," Fuzzy Sets and Systems, Vol.159, No.24, pp.¬†3281‚Äì3296, 2008 2    S.-M. Zhou, F. Chiclana, R. I. John and J. M. Garibaldi, "Alpha-level aggregation: a practical approach to type-1 OWA operation for aggregating uncertain information with applications to breast cancer treatments," IEEE Transactions on Knowledge and Data Engineering, vol. 23, no.10, 2011, pp.¬†1455‚Äì1468. 3    S.-M. Zhou, R. I. John, F. Chiclana and J. M. Garibaldi, "On aggregating uncertain information by type-2 OWA operators for soft decision making," International Journal of Intelligent Systems, vol. 25, no.6, pp.¬†540‚Äì558, 2010. 4   "  Category:Artificial intelligence  Category:Logic in computer science  Category:Fuzzy logic  Category:Information retrieval techniques   