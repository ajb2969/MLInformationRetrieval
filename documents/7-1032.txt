


Ternary search




Ternary search

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



A ternary search algorithm is a technique in computer science for finding the minimum or maximum of an increasing or decreasing function. A ternary search determines either that the minimum or maximum cannot be in the first third of the domain or that it cannot be in the last third of the domain, then repeats on the remaining two-thirds. A ternary search is an example of a divide and conquer algorithm (see search algorithm).
The function
Assume we are looking for a maximum of f(x) and that we know the maximum lies somewhere between A and B. For the algorithm to be applicable, there must be some value x such that

for all a,b with A ≤ a < b ≤ x, we have f(a) < f(b), and
for all a,b with x ≤ a f(b).

Algorithm
Let a unimodal function f(x) on some interval [l; r]. Take any two points m1 and m2 in this segment: l  f(m2), that the situation is similar to the previous, up to symmetry. Now, the required maximum can not be in the right side - [m2''; r], so go to the segment [l; m2]

if f(m1) = f(m2), then the search should be conducted in [m1; m2], but this case can be attributed to any of the previous two (in order to simplify the code). Sooner or later the length of the segment will be a little less than a predetermined constant, and the process can be stopped.

choice points m1 and m2:

m1 = l + (r-l)/3
m2 = r - (r-l)/3

def ternarySearch(f, left, right, absolutePrecision):
     """
     Find maximum of unimodal function f() within [left, right]
     To find the minimum, revert the if/else statement or revert the comparison.
     """
     while True:
         #left and right are the current bounds; the maximum is between them
         if abs(right - left) < absolutePrecision:
             return (left + right)/2
 
         leftThird = left + (right - left)/3
         rightThird = right - (right - left)/3
 
         if f(leftThird) < f(rightThird):
             left = leftThird
         else:
             right = rightThird
Run time order



Recursive algorithm
def ternarySearch(f, left, right, absolutePrecision):
     #left and right are the current bounds; the maximum is between them
     if abs(right - left) < absolutePrecision:
         return (left + right)/2
 
     leftThird = (2*left + right)/3
     rightThird = (left + 2*right)/3
 
     if f(leftThird) < f(rightThird):
         return ternarySearch(f, leftThird, right, absolutePrecision)
     else:
         return ternarySearch(f, left, rightThird, absolutePrecision)
See also

Newton's method in optimization (can be used to search for where the derivative is zero)
Golden section search (similar to ternary search, useful if evaluating f takes most of the time per iteration)
Binary search algorithm (can be used to search for where the derivative changes in sign)
Interpolation search
Exponential search
Linear search

References
"
Category:Search algorithms Category:Mathematical optimization

