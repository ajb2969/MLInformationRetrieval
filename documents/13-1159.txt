   Term (logic)      Term (logic)  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In analogy to natural language, where a noun phrase refers to an object and a whole sentence refers to a fact, in mathematical logic , a term denotes a mathematical object and a formula denotes a mathematical fact. In particular, terms appear as components of a formula.  A first-order term is recursively constructed from constant symbols, variables and function symbols . An expression formed by applying a predicate symbol to an appropriate number of terms is called an atomic formula , which evaluates to true or false in bivalent logics , given an interpretation . For example, ( x +1)*( x +1) is a term built from the constant 1, the variable x , and the binary function symbols + and *; it is part of the atomic formula ( x +1)*( x +1) ≥ 0 which evaluates to true for each real-numbered value of x .  Besides in logic , terms play important roles in universal algebra , and rewriting systems .  Elementary mathematics  In the context of polynomials , sometimes term is used for a monomial with a coefficient : to 'collect like terms ' in a polynomial is the operation of making it a linear combination of distinct monomials. Terms, in this sense, are things that are added or subtracted. A series is often represented as the sum of a sequence of terms. Individual factors in an expression representing a product are multiplicative terms . For example, in 6 + 3 x − 2, 6, 3 x , and −2 are all terms.  In elementary mathematics, 1   each argument term of the addition operator + is called an addend ,  the first and second argument term of the subtraction operator - is called a minuend and subtrahend , respectively,  each argument term of the multiplication operator ⋅ is called a factor , the first and second argument term is also called multiplicand and multiplier , respectively,  the first and second argument term of the division operator / is called dividend and divisor , respectively,  if the division operator is written as fraction bar , the top and bottom terms are called numerator and denominator , respectively.   Formal definition  (Figure)  Tree structure of terms ( n ⋅( n +1))/2 and n ⋅(( n +1)/2)   Given a set V of variable symbols, a set C of constant symbols and sets F n of n -ary function symbols, also called operator symbols, for each natural number n ≥ 1, the set of (unsorted first-order) terms T is recursively defined to be the smallest set with the following properties: 2   every variable symbol is a term: V ⊆ T ,  every constant symbol is a term: C ⊆ T ,  from every n terms t 1 ,..., t n , and every n -ary function symbol f ∈ F n , a larger term f ( t 1 , ..., t n ) can be built.   Using an intuitive, pseudo- grammatical notation, this is sometimes written as: t ::= x | c | f ( t 1 , ..., t n ). Usually, only the first few function symbol sets F n are inhabited. Well-known examples are the unary function symbols sin , cos ∈ F 1 , and the binary function symbols +, −, ⋅, / ∈ F 2 , while ternary operations are less known, let alone higher-arity functions. Many authors consider constant symbols as 0-ary function symbols F 0 , thus needing no special syntactic class for them.  A term denotes a mathematical object from the domain of discourse . A constant c denotes a named object from that domain, a variable x ranges over the objects in that domain, and an n -ary function f maps n - tuples of objects to objects. For example, if n ∈ V is a variable symbol, 1 ∈ C is a constant symbol, and add ∈ F 2 is a binary function symbol, then n ∈ T , 1 ∈ T , and (hence) add ( n , 1) ∈ T by the first, second, and third term building rule, respectively. The latter term is usually written as n +1, using infix notation and the more common operator symbol + for convenience.  Term structure vs. representation  Originally, logicians defined a term to be a character string adhering to certain building rules. 3 However, since the concept of tree became popular in computer science, it turned out to be more convenient to think of a term as a tree. For example, several distinct character strings, like "( n ⋅( n +1))/2", "(( n ⋅( n +1)))/2", and "     n   (   n  +  1   )    2        n    n  1    2    \frac{n(n+1)}{2}   ", denote the same term and correspond to the same tree, viz. the left tree in the above picture. Separating the tree structure of a term from its graphical representation on paper, it is also easy to account for parentheses (being only representation, not structure) and invisible multiplication operators (existing only in structure, not in representation).  Structural equality  Two terms are said to be structurally , literally , or syntactically equal if they correspond to the same tree. For example, the left and the right tree in the above picture are structurally un equal terms, although they might be considered " semantically equal " as they always evaluate to the same value in rational arithmetic . While structural equality can be checked without any knowledge about the meaning of the symbols, semantic equality cannot. If the function / is e.g. interpreted not as rational but as truncating integer division, then at n =2 the left and right term evaluates to 3 and 2, respectively. Structural equal terms need to agree in their variable names.  In contrast, a term t is called a renaming , or a variant , of a term u if the latter resulted from consistently renaming all variables of the former, i.e. if u = tσ for some renaming substitution σ. In that case, u is a renaming of t , too, since a renaming substitution σ has an inverse σ −1 , and t = uσ −1 . Both terms are then also said to be equal modulo renaming . In many contexts, the particular variable names in a term don't matter, e.g. the commutativity axiom for addition can be stated as x + y = y + x or as a + b = b + a ; in such cases the whole term may be replaced by a renamed term, while an arbitrary subterm usually may not, e.g. x + y = b + a is not a valid version of the commutativity axiom. 4  5  Ground and linear terms  The set of variables of a term t is denoted by vars ( t ). A term that doesn't contain any variables is called a ground term ; a term that doesn't contain multiple occurrences of a variable is called a linear term . For example, 2+2 is a ground term and hence also a linear term, x ⋅( n +1) is a linear term, n ⋅( n +1) is a non-linear term. These properties are important e.g. in term rewriting .  Given a signature for the function symbols, the set of all terms forms the free  term algebra . The set of all ground terms forms the initial term algebra .  Abbreviating the number of constants as f 0 , and the number of i -ary function symbols as f i , the number θ h of distinct ground terms of a height up to h can be computed by the following recursion formula:   θ 0 = f 0 , since a ground term of height 0 can only be a constant,       θ   h  +  1    =    ∑   i  =  0   ∞     f  i   ⋅   θ  h  i          subscript  θ    h  1      superscript   subscript     i  0       normal-⋅   subscript  f  i    superscript   subscript  θ  h   i       \theta_{h+1}=\sum_{i=0}^{\infty}f_{i}\cdot\theta_{h}^{i}   , since a ground term of height up to h +1 can be obtained by composing any i ground terms of height up to h , using an i -ary root function symbol. The sum has a finite value if f i = 0 for all i beyond a maximal arity, which is usually the case.   Building formulas from terms  Given a set R n of n -ary relation symbols for each natural number n ≥ 1, an (unsorted first-order) atomic formula is obtained by applying an n -ary relation symbol to n terms. As for function symbols, a relation symbol set R n is usually non-empty only for small n . In mathematical logic, more complex formulas are built from atomic formulas using logical connectives and quantifiers . For example, letting ℝ denote the set of real numbers , ∀ x : x ∈ ℝ ⇒ ( x +1)⋅( x +1) ≥ 0 is a mathematical formula evaluating to true in the algebra of complex numbers . An atomic formula is called ground if it is build entirely from ground terms; all ground atomic formulas composable from a given set of function and predicate symbols make up the Herbrand universe for these symbol sets.  Operations with terms  (Figure)  Tree structure of black example term     a  *   (    (   a  +  1   )   *   (   a  +  2   )    )     1  *   (   2  *  3   )          a      a  1     a  2       1    2  3      \frac{a*((a+1)*(a+2))}{1*(2*3)}   , with blue redex x *( y * z )    Since a term has the structure of a tree hierarchy, to each of its nodes a position , or path , can be assigned, that is, a string of decimal numbers indicating the node's place in the hierarchy. The empty string, commonly denoted by ε, is assigned to the root node. Position strings within the black term are indicated in red in the picture.  At each position p of a term t , a unique subterm starts, which is commonly denoted by t | p . For example, at position 122 of the black term in the picture, the subterm a +2 has its root. The relation "is a subterm of" is a partial order on the set of terms; it is reflexive since each term is trivially a subterm of itself.  The term obtained by replacing in a term t the subterm at a position p by a new term u is commonly denoted by t [ u ] p . That term t [ u ] p can also be viewed as resulting from a generalized concatenation of the term u with a term-like object t [.]; the latter is called a context , or a term with a hole (indicated by "."; its position being p ), in which u is said to be embedded . For example, if t is the black term in the picture, then t [ b +1] 12 results in the term     a  *   (   b  +  1   )     1  *   (   2  *  3   )          a    b  1      1    2  3      \frac{a*(b+1)}{1*(2*3)}   . The latter term also results from embedding the term b +1 into the context     a  *   (  .  )     1  *   (   2  *  3   )         fragments  a    fragments  normal-(  normal-.  normal-)      1    2  3      \frac{a*(\;.\;)}{1*(2*3)}   . In an informal sense, the operations of instantiating and embedding are converse to each other: while the former appends function symbols at the bottom of the term, the latter appends them at the top. The encompassment ordering relates a term and any result of appends at either sides.  To each node of a term, its depth (called height by some authors) can be assigned, i.e. its distance (number of edges) from the root. In this setting, the depth of a node always equals the length of its position string. In the picture, depth levels in the black term are indicated in green.  The size of a term commonly refers to the number of its nodes, or, equivalently, to the length of the term's written representation, counting symbols without parentheses. The black and the blue term in the picture has the size 15 and 5, respectively.  A term u  matches a term t , if an instance of u structurally equals a subterm of t , or formally, if u σ = t | p for some position p in t and some substitution σ. In this case, u , t , and σ is called the pattern term , the subject term , and the matching substitution , respectively. In the picture, the blue pattern term x *( y * z ) matches the black subject term at position 1, with the matching substitution  indicated by blue variables immediately left to their black substitutes. Intuitively, the pattern, except for its variables, must be contained in the subject; if a variable occurs multiply in the pattern, equal subterms are required at the respective positions of the subject.  unifying terms  term rewriting   Related concepts  Sorted terms  When the domain of discourse contains elements of basically different kinds, it is useful to split the set of all terms accordingly. To this end, a sort (sometimes also called type ) is assigned to each variable and each constant symbol, and a declaration 6 of domain sorts and range sort to each function symbol. A sorted term  f ( t 1 ,..., t n ) may be composed from sorted subterms t 1 ,..., t n only if the i th subterm's sort matches the declared i th domain sort of f . Such a term is also called well-sorted ; any other term (i.e. obeying the unsorted rules only) is called ill-sorted .  For example, a vector space comes with an associated field of scalar numbers. Let W and N denote the sort of vectors and numbers, respectively, let V W and V N be the set of vector and number variables, respectively, and C W and C N the set of vector and number constants, respectively. Then e.g.    0  →     normal-→  0    \vec{0}   ∈ C W and 0 ∈ C N , and the vector addition, the scalar multiplication, and the inner product is declared as +: W × W → W , *: W × N → W , and ⟨.,.⟩: W × W → N , respectively. Assuming variable symbols     v  →   ,   w  →       normal-→  v    normal-→  w     \vec{v},\vec{w}   ∈ V W and a , b ∈ V N , the term    ⟨    (    v  →   +   0  →    )   *  a   ,    w  →   *  b   ⟩          normal-→  v    normal-→  0    a      normal-→  w   b     \langle(\vec{v}+\vec{0})*a,\vec{w}*b\rangle   is well-sorted, while     v  →   +  a       normal-→  v   a    \vec{v}+a   is not (since + doesn't accept a term of sort N as 2nd argument). In order to make    a  *   v  →       a   normal-→  v     a*\vec{v}   a well-sorted term, an additional declaration *: N × W → W is required. Function symbols having several declarations are called overloaded .  See many-sorted logic for more information, including extensions of the many-sorted framework described here.  Lambda terms      Terms with bound variables     Notation example     lim n →∞  x / n          ∑   i  =  1   n    i  2       superscript   subscript     i  1    n    superscript  i  2     \sum_{i=1}^{n}i^{2}             ∫  a  b     sin   (   k  ⋅  t   )    d  t       superscript   subscript   a   b        normal-⋅  k  t    d  t     \int_{a}^{b}\sin(k\cdot t)dt        Motivation  Mathematical notations as shown in the table do not fit into the scheme of a first-order term as defined above , as they all introduce an own local , or bound , variable that may not appear outside the notation's scope, e.g.    t  ⋅    ∫  a  b     sin   (   k  ⋅  t   )    d  t       normal-⋅  t    superscript   subscript   a   b        normal-⋅  k  t    d  t      t\cdot\int_{a}^{b}\sin(k\cdot t)\;dt   doesn't make sense. In contrast, the other variables, referred to as free , behave like ordinary first-order term variables, e.g.    k  ⋅    ∫  a  b     sin   (   k  ⋅  t   )    d  t       normal-⋅  k    superscript   subscript   a   b        normal-⋅  k  t    d  t      k\cdot\int_{a}^{b}\sin(k\cdot t)\;dt   does make sense.  All these operators can be viewed as taking a function rather than a value term as one of their arguments. For example, the lim operator is applied to a sequence, i.e. to a mapping from positive integer to e.g. real numbers. As another example, a C function to implement the second example from the table, ∑, would have a function pointer argument (see box below).  Lambda terms can be used to denote anonymous functions to be supplied as arguments to lim , ∑, ∫, etc.  For example, the function square from the C program below can be written anonymously as a lambda term λ i . i 2 . The general sum operator ∑ can then be considered as a ternary function symbol taking a lower bound value, an upper bound value and a function to be summed-up. Due to its latter argument, the ∑ operator is called a second-order function symbol . As another example, the lambda term λ n . x / n denotes a function that maps 1, 2, 3, ... to x /1, x /2, x /3, ..., respectively, that is, it denotes the sequence ( x /1, x /2, x /3, ...). The lim operator takes such a sequence and returns its limit (if defined).  The rightmost column of the table indicates how each mathematical notation example can be represented by a lambda term, also converting common infix operators into prefix form.  int sum( int lwb, int upb, int fct( int )) { // implements general sum operator  int res = 0 ; for ( int i=lwb; i<=upb; ++i)
         res += fct(i); return res;
 } int square( int i) { return i*i; } // implements anonymous function (lambda i. i*i); however, C requires a name for it  #include  int main( void ) { int n;
     scanf( " %d" ,&n;);
     printf( "%d \n " , sum( 1 ,n,square) ); // applies sum operator to sum up squares  return  0 ;
 }  See also   Equation  Expression (mathematics)   Notes  References     "  Category:Mathematical logic  Category:Rewriting systems  Category:Elementary mathematics     ↩  ; here: Sect.1.3 ↩  ; here: Sect.II.1.3 ↩  Strictly speaking, x + y = y + x is an atomic formula, not a term, since = is a predicate, not a function symbol. However, since atomic formulas can be viewed as trees, too, and renaming is essentially a concept on trees, atomic (and, more generally, quantifier-free ) formulas can be renamed in a similar way as terms. In fact, some authors consider a quantifier-free formula as a term (of type bool rather than e.g. int , cf. #Sorted terms below). ↩  Renaming of the commutativity axiom can be viewed as alpha-conversion on the universal closure of the axiom: " x + y = y + x " actually means "∀ x , y : x + y = y + x ", which is synonymous to "∀ a , b : a + b = b + a "; see also #Lambda terms below. ↩  called "symbol type" in the Signature (logic)#Many-sorted signatures article ↩   