   Coppersmith method      Coppersmith method   The Coppersmith method , proposed by Don Coppersmith , is a method to find small integer roots of polynomial equations. These polynomials can be univariate or bivariate. In cryptography the algorithm is mainly used in attacks on RSA when parts of the secret key are known.  The method uses the Lenstra–Lenstra–Lovász lattice basis reduction algorithm (LLL) to find a polynomial that has the roots of the target polynomial as roots and has small coefficients. 1  Approach  Coppersmith’s method is based on lattice reduction. A lattice  L is a subgroup of    𝐑  n     superscript  𝐑  n    \mathbf{R}^{n}   . Also there exists a k such that    L  =    𝐙   b  1    ⊕  …  ⊕   𝐙   b  k         L   direct-sum    𝐙   subscript  b  1    normal-…    𝐙   subscript  b  k       L=\mathbf{Z}b_{1}\oplus\ldots\oplus\mathbf{Z}b_{k}   , where    B  =   (   b  1   ,   b  2   ,  …  ,   b  k   )       B    subscript  b  1    subscript  b  2   normal-…   subscript  b  k      B=(b_{1},b_{2},\ldots,b_{k})   is a basis of L . The LLL algorithm computes a basis    (   b  1  *   ,   b  2  *   ,  …  ,   b  k  *   )      superscript   subscript  b  1      superscript   subscript  b  2     normal-…   superscript   subscript  b  k       (b_{1}^{*},b_{2}^{*},\dots,b_{k}^{*})   of short vectors. If k=n , the determinant of the lattice is given by det( L )=det( B ); in general     det   (  L  )    ≤   ∏   ||   b  i  *   ||          det  L    product   norm   superscript   subscript  b  i         \mathrm{det}(L)\leq\prod||b_{i}^{*}||   .  For any LLL reduced basis    (   b  1  *   ,   b  2  *   ,  …  ,   b  k  *   )      superscript   subscript  b  1      superscript   subscript  b  2     normal-…   superscript   subscript  b  k       (b_{1}^{*},b_{2}^{*},\dots,b_{k}^{*})   it holds that     ||   b  k  *   ||   ≥     (   det   (  L  )    )    1  /  k    ⋅   2    (   1  -  k   )   /  4          norm   superscript   subscript  b  k       normal-⋅   superscript    det  L     1  k     superscript  2      1  k   4       ||b_{k}^{*}||\geq(\mathrm{det}(L))^{1/k}\cdot 2^{(1-k)/4}   . 2  Let     F   (  x  )    =    x  n   +    a   n  -  1     x   n  -  1     +  …  +    a  1   x   +   a  0          F  x      superscript  x  n      subscript  a    n  1     superscript  x    n  1     normal-…     subscript  a  1   x    subscript  a  0      F(x)=x^{n}+a_{n-1}x^{n-1}+\ldots+a_{1}x+a_{0}   and assume that     F   (   x  0   )    ≡   0  mod  M         F   subscript  x  0     modulo  0  M     F(x_{0})\equiv 0\mod M   for some integer     |   x  0   |   <   M   1  /  n           subscript  x  0     superscript  M    1  n      |x_{0}|   . Coppersmith’s algorithm can be used to find this integer solution    x  0     subscript  x  0    x_{0}   .  Finding roots over Q is easy using e.g. Newton's method but these algorithms do not work modulo a composite number M . The idea behind Coppersmith’s method is to find a different polynomial    F  2     subscript  F  2    F_{2}   related to F that has the same    x  0     subscript  x  0    x_{0}   as a solution and has only small coefficients. If the coefficients and    x  0     subscript  x  0    x_{0}   are so small that      F  2    (   x  0   )    <  M         subscript  F  2    subscript  x  0    M    F_{2}(x_{0})   over the integers, then    x  0     subscript  x  0    x_{0}   is a root of F over Q and can easily be found.  Computing small roots  Coppersmith’s approach is a reduction of solving modular polynomial equations to solving polynomials over the integers. Coppersmith's algorithm uses LLL to construct the polynomial    F  2     subscript  F  2    F_{2}   with small coefficients.  Given F , the algorithm constructs polynomials      p  1    (  x  )    ,    p  2    (  x  )    ,  …  ,    p  n    (  x  )          subscript  p  1   x      subscript  p  2   x   normal-…     subscript  p  n   x     p_{1}(x),p_{2}(x),\dots,p_{n}(x)   that have the same    x  0     subscript  x  0    x_{0}   as root modulo    M  a     superscript  M  a    M^{a}   , where a is some integer chosen dependent on the degree of F and the size of    x  0     subscript  x  0    x_{0}   . Any linear combination of these polynomials has    x  0     subscript  x  0    x_{0}   as root modulo    M  a     superscript  M  a    M^{a}   .  The next step is to use the LLL algorithm to construct a linear combination      F  2    (  x  )    =   ∑    c  i    p  i    (  x  )            subscript  F  2   x        subscript  c  i    subscript  p  i   x      F_{2}(x)=\sum c_{i}p_{i}(x)   of the    p  i     subscript  p  i    p_{i}   so that the inequality     |    F  2    (  x  )    |   <   M  a            subscript  F  2   x     superscript  M  a     |F_{2}(x)|   holds. Now standard factorization methods can calculate the roots of     F  2    (  x  )        subscript  F  2   x    F_{2}(x)   over the integers.  See also   Coppersmith's Attack   References  "  Category:Asymmetric-key algorithms     ↩  ↩     