   Max-flow min-cut theorem      Max-flow min-cut theorem   In optimization theory , the max-flow min-cut theorem states that in a flow network , the maximum amount of flow passing from the source to the sink is equal to the minimum capacity that, when removed in a specific way from the network, causes the situation that no flow can pass from the source to the sink.  The max-flow min-cut theorem is a special case of the duality theorem for linear programs and can be used to derive Menger's theorem and the König–Egerváry theorem .  Definitions and statement  Let    N  =   (  V  ,  E  )       N   V  E     N=(V,E)   be a network (directed graph) with   s   s   s   and   t   t   t   being the source and the sink of   N   N   N   respectively.  Maximum flow  Definition. The capacity of an edge is a mapping , denoted by or    c   (  u  ,  v  )       c   u  v     c(u,v)   . It represents the maximum amount of flow that can pass through an edge.  Definition. A flow is a mapping , denoted by or    f   (  u  ,  v  )       f   u  v     f(u,v)   , subject to the following two constraints:   1. Capacity Constraint:     ∀   (  u  ,  v  )   ∈  E  :   f   u  v    ≤   c   u  v       fragments  for-all   fragments  normal-(  u  normal-,  v  normal-)    E  normal-:  italic-   subscript  f    u  v      subscript  c    u  v      \forall(u,v)\in E:\qquad f_{uv}\leq c_{uv}      2. Conservation of Flows:     ∀  v  ∈  V  ∖   {  s  ,  t  }   :   ∑   {  u  :    (  u  ,  v  )   ∈  E   }     f   u  v    =   ∑   {  u  :    (  v  ,  u  )   ∈  E   }     f   v  u    .     fragments  for-all  v   V    fragments  normal-{  s  normal-,  t  normal-}   normal-:  italic-   subscript    conditional-set  u     u  v   E      subscript  f    u  v      subscript    conditional-set  u     v  u   E      subscript  f    v  u    normal-.    \forall v\in V\setminus\{s,t\}:\qquad\sum\nolimits_{\{u:(u,v)\in E\}}f_{uv}=%
 \sum\nolimits_{\{u:(v,u)\in E\}}f_{vu}.       Definition. The value of flow is defined by        |  f  |   =    ∑   v  ∈  V     f   s  v      ,        f     subscript     v  V     subscript  f    s  v       |f|=\sum\nolimits_{v\in V}f_{sv},   where   s   s   s   is the source of   N   N   N   . It represents the amount of flow passing from the source to the sink.   Maximum Flow Problem. Maximize    |  f  |      f    |f|   , that is, to route as much flow as possible from   s   s   s   to   t   t   t   .   Minimum cut  Definition. An s-t cut     C  =   (  S  ,  T  )       C   S  T     C=(S,T)   is a partition of   V   V   V   such that    s  ∈  S      s  normal-∈  S    s∈S   and    t  ∈  T      t  normal-∈  T    t∈T   . The cut-set of   C   C   C   is the set       {    (  u  ,  v  )   ∈   E    :    u  ∈  S   ,   v  ∈  T    }   .     conditional-set     u  v   E    formulae-sequence    u  S     v  T      \{(u,v)\in E\ :\ u\in S,v\in T\}.   Note that if the edges in the cut-set of   C   C   C   are removed,     |  f  |   =  0        f   0    |f|=0   .  Definition. The capacity of an s-t cut is defined by        c   (  S  ,  T  )    =    ∑    (  u  ,  v  )   ∈   S  ×  T      c   u  v     =    ∑    (  i  ,  j  )   ∈  E      c   i  j     d   i  j       ,          c   S  T      subscript      u  v     S  T      subscript  c    u  v            subscript      i  j   E       subscript  c    i  j     subscript  d    i  j         c(S,T)=\sum\nolimits_{(u,v)\in S\times T}c_{uv}=\sum\nolimits_{(i,j)\in E}c_{%
 ij}d_{ij},   where     d   i  j    =  1       subscript  d    i  j    1    d_{ij}=1   if    i  ∈  S      i  S    i\in S   and    j  ∈  T      j  T    j\in T   , 0 otherwise.   Minimum s-t Cut Problem. Minimize    c   (  S  ,  T  )       c   S  T     c(S,T)   , that is, to determine   S   S   S   and   T   T   T   such that the capacity of the S-T cut is minimal.   Statement   Max-flow min-cut theorem. The maximum value of an s-t flow is equal to the minimum capacity over all s-t cuts.   Linear program formulation  The max-flow problem and min-cut problem can be formulated as two primal-dual linear programs.      Max-flow (Primal)   Min-cut (Dual)       maximize     |  f  |   =   ∇  s         f    subscript  normal-∇  s     |f|=\nabla_{s}      minimize     ∑    (  i  ,  j  )   ∈  E      c   i  j     d   i  j         subscript      i  j   E       subscript  c    i  j     subscript  d    i  j       \sum_{(i,j)\in E}c_{ij}d_{ij}        subject to         f   i  j      ≤     c   i  j        (  i  ,  j  )   ∈  E          ∑   j  :    (  j  ,  i  )   ∈  E      f   j  i     -    ∑   j  :    (  i  ,  j  )   ∈  E      f   i  j        ≤    0      i  ∈  V   ,   i  ≠   s  ,  t            ∇  s   +    ∑   j  :    (  j  ,  s  )   ∈  E      f   j  s      -    ∑   j  :    (  s  ,  j  )   ∈  E      f   s  j        ≤    0          -   ∇  s    +    ∑   j  :    (  j  ,  t  )   ∈  E      f   j  t      -    ∑   j  :    (  t  ,  j  )   ∈  E      f   t  j        ≤    0        f   i  j      ≥    0      (  i  ,  j  )   ∈  E          subscript  f    i  j      subscript  c    i  j       i  j   E         subscript    normal-:  j     j  i   E      subscript  f    j  i       subscript    normal-:  j     i  j   E      subscript  f    i  j       0   formulae-sequence    i  V     i   s  t            subscript  normal-∇  s     subscript    normal-:  j     j  s   E      subscript  f    j  s        subscript    normal-:  j     s  j   E      subscript  f    s  j       0   missing-subexpression            subscript  normal-∇  s      subscript    normal-:  j     j  t   E      subscript  f    j  t        subscript    normal-:  j     t  j   E      subscript  f    t  j       0   missing-subexpression      subscript  f    i  j     0     i  j   E      \begin{array}[]{rclr}f_{ij}&\leq&c_{ij}&(i,j)\in E\\
 \sum_{j:(j,i)\in E}f_{ji}-\sum_{j:(i,j)\in E}f_{ij}&\leq&0&i\in V,i\neq s,t\\
 \nabla_{s}+\sum_{j:(j,s)\in E}f_{js}-\sum_{j:(s,j)\in E}f_{sj}&\leq&0&\\
 -\nabla_{s}+\sum_{j:(j,t)\in E}f_{jt}-\sum_{j:(t,j)\in E}f_{tj}&\leq&0&\\
 f_{ij}&\geq&0&(i,j)\in E\\
 \end{array}      subject to           d   i  j    -   p  i    +   p  j      ≥    0      (  i  ,  j  )   ∈  E         p  s   -   p  t      ≥    1        p  i     ≥    0     i  ∈  V        d   i  j      ≥    0      (  i  ,  j  )   ∈  E              subscript  d    i  j     subscript  p  i     subscript  p  j     0     i  j   E        subscript  p  s    subscript  p  t     1   missing-subexpression      subscript  p  i    0    i  V      subscript  d    i  j     0     i  j   E      \begin{array}[]{rclr}d_{ij}-p_{i}+p_{j}&\geq&0&(i,j)\in E\\
 p_{s}-p_{t}&\geq&1&\\
 p_{i}&\geq&0&i\in V\\
 d_{ij}&\geq&0&(i,j)\in E\end{array}        Note that for the given s-t cut    C  =   (  S  ,  T  )       C   S  T     C=(S,T)   if    i  ∈  S      i  S    i\in S   then     p  i   =  1       subscript  p  i   1    p_{i}=1   and 0 otherwise. Therefore    p  s     subscript  p  s    p_{s}   should be 1 and    p  t     subscript  p  t    p_{t}   shout be zero. The equality in the max-flow min-cut theorem follows from the strong duality theorem in linear programming , which states that if the primal program has an optimal solution, x *, then the dual program also has an optimal solution, y *, such that the optimal values formed by the two solutions are equal.  Example  The figure on the right is a network having a value of flow of 7. The vertex in white and the vertices in grey form the subsets   S   S   S   and   T   T   T   of an s-t cut, whose cut-set contains the dashed edges. Since the capacity of the s-t cut is 7, which equals to the value of flow, the max-flow min-cut theorem tells us that the value of flow and the capacity of the s-t cut are both optimal in this network.  Application  Generalized max-flow min-cut theorem  In addition to edge capacity, consider there is capacity at each vertex, that is, a mapping , denoted by    c   (  v  )       c  v    c(v)   , such that the flow   f   f   f   has to satisfy not only the capacity constraint and the conservation of flows, but also the vertex capacity constraint      ∀  v  ∈  V  ∖   {  s  ,  t  }   :   ∑   i  ∈  V     f   i  v    ≤  c   (  v  )   .     fragments  for-all  v   V    fragments  normal-{  s  normal-,  t  normal-}   normal-:  italic-   subscript     i  V     subscript  f    i  v     c   fragments  normal-(  v  normal-)   normal-.    \forall v\in V\setminus\{s,t\}:\qquad\sum\nolimits_{i\in V}f_{iv}\leq c(v).     In other words, the amount of flow passing through a vertex cannot exceed its capacity. Define an s-t cut to be the set of vertices and edges such that for any path from s to t , the path contains a member of the cut. In this case, the capacity of the cut is the sum the capacity of each edge and vertex in it.  In this new definition, the generalized max-flow min-cut theorem states that the maximum value of an s-t flow is equal to the minimum capacity of an s-t cut in the new sense.  Menger's theorem  In the undirected edge-disjoint paths problem, we are given an undirected graph    G  =   (  V  ,  E  )       G   V  E     G=(V,E)   and two vertices   s   s   s   and   t   t   t   , and we have to find the maximum number of edge-disjoint s-t paths in   G   G   G   .  The Menger's theorem states that the maximum number of edge-disjoint s-t paths in an undirected graph is equal to the minimum number of edges in an s-t cut-set.  Project selection problem  In the project selection problem, there are   n   n   n   projects and   m   m   m   equipments. Each project yields revenue and each equipment costs to purchase. Each project requires a number of equipments and each equipment can be shared by several projects. The problem is to determine which projects and equipments should be selected and purchased respectively, so that the profit is maximized.  Let   P   P   P   be the set of projects not selected and   Q   Q   Q   be the set of equipments purchased, then the problem can be formulated as,        max   {  g  }    =     ∑  i    r   (   p  i   )     -    ∑    p  i   ∈  P     r   (   p  i   )     -    ∑    q  j   ∈  Q     c   (   q  j   )       .        g       subscript   i     r   subscript  p  i       subscript      subscript  p  i   P      r   subscript  p  i       subscript      subscript  q  j   Q      c   subscript  q  j        \max\{g\}=\sum_{i}r(p_{i})-\sum_{p_{i}\in P}r(p_{i})-\sum_{q_{j}\in Q}c(q_{j}).     Since the first term does not depend on the choice of   P   P   P   and   Q   Q   Q   , this maximization problem can be formulated as a minimization problem instead, that is,        min   {   g  ′   }    =     ∑    p  i   ∈  P     r   (   p  i   )     +    ∑    q  j   ∈  Q     c   (   q  j   )       .         superscript  g  normal-′        subscript      subscript  p  i   P      r   subscript  p  i       subscript      subscript  q  j   Q      c   subscript  q  j        \min\{g^{\prime}\}=\sum_{p_{i}\in P}r(p_{i})+\sum_{q_{j}\in Q}c(q_{j}).     The above minimization problem can then be formulated as a minimum-cut problem by constructing a network, where the source is connected to the projects with capacity , and the sink is connected by the equipments with capacity . An edge with infinite capacity is added if project requires equipment . The s-t cut-set represents the projects and equipments in   P   P   P   and   Q   Q   Q   respectively. By the max-flow min-cut theorem, one can solve the problem as a maximum flow problem .  The figure on the right gives a network formulation of the following project selection problem:       Project   Equipment        1   100   200   Project 1 requires equipments 1 and 2.     2   200   100   Project 2 requires equipment 2.     3   150   50   Project 3 requires equipment 3.     The minimum capacity of a s-t cut is 250 and the sum of the revenue of each project is 450; therefore the maximum profit g is 450 − 250 = 200, by selecting projects and .  The idea here is to 'flow' the project profits through the 'pipes' of the equipment. If we cannot fill the pipe, the equipment's return is less than its cost, and the min cut algorithm will find it cheaper to cut the project's profit edge instead of the equipment's cost edge.  Image segmentation problem  In the image segmentation problem, there are   n   n   n   pixels. Each pixel   i   i   i   can be assigned a foreground value or a background value . There is a penalty of if pixels    i  ,  j     i  j    i,j   are adjacent and have different assignments. The problem is to assign pixels to foreground or background such that the sum of their values minus the penalties is maximum.  Let   P   P   P   be the set of pixels assigned to foreground and   Q   Q   Q   be the set of points assigned to background, then the problem can be formulated as,        max   {  g  }    =      ∑   i  ∈  P     f  i    +    ∑   i  ∈  Q     b  i     -    ∑     i  ∈  P   ,   j  ∈   Q  j   ∈  P    ,   i  ∈  Q      p   i  j       .        g         subscript     i  P     subscript  f  i      subscript     i  Q     subscript  b  i       subscript    formulae-sequence   formulae-sequence    i  P       j    Q  j        P       i  Q      subscript  p    i  j        \max\{g\}=\sum_{i\in P}f_{i}+\sum_{i\in Q}b_{i}-\sum_{i\in P,j\in Qj\in P,i\in
 Q%
 }p_{ij}.     This maximization problem can be formulated as a minimization problem instead, that is,        min   {   g  ′   }    =    ∑     i  ∈  P   ,   j  ∈   Q  j   ∈  P    ,   i  ∈  Q      p   i  j      .         superscript  g  normal-′      subscript    formulae-sequence   formulae-sequence    i  P       j    Q  j        P       i  Q      subscript  p    i  j       \min\{g^{\prime}\}=\sum_{i\in P,j\in Qj\in P,i\in Q}p_{ij}.     The above minimization problem can be formulated as a minimum-cut problem by constructing a network where the source (orange node) is connected to all the pixels with capacity , and the sink (purple node) is connected by all the pixels with capacity . Two edges (    i  ,  j     i  j    i,j   ) and (    j  ,  i     j  i    j,i   ) with capacity are added between two adjacent pixels. The s-t cut-set then represents the pixels assigned to the foreground in   P   P   P   and pixels assigned to background in   Q   Q   Q   .  History  The max-flow min-cut theorem was proven by P. Elias , A. Feinstein, and C.E. Shannon in 1956, and independently also by L.R. Ford, Jr. and D.R. Fulkerson in the same year.  Proof  Let    G  =   (  V  ,  E  )       G   V  E     G=(V,E)   be a network (directed graph) with   s   s   s   and   t   t   t   being the source and the sink of   G   G   G   respectively.  Consider the flow   f   f   f   computed for   G   G   G   by Ford–Fulkerson algorithm . In the residual graph obtained for   G   G   G   (after the final flow assignment by Ford–Fulkerson algorithm ), define two subsets of vertices as follows:      A   A   A   : the set of vertices reachable from   s   s   s   in  : the set of remaining vertices i.e.    V  −  A      V  normal-−  A    V−A      Claim.   c ( A , A c )}} , where the capacity of an s-t cut is defined by       c   (  S  ,  T  )    =    ∑    (  u  ,  v  )   ∈   S  ×  T      c   u  v           c   S  T      subscript      u  v     S  T      subscript  c    u  v       c(S,T)=\sum\nolimits_{(u,v)\in S\times T}c_{uv}   .  Now, we know,     v  a  l  u  e   (  f  )    =     f   o  u  t     (  A  )    -    f   i  n     (   A  c   )           v  a  l  u  e  f        subscript  f    o  u  t    A      subscript  f    i  n     superscript  A  c       value(f)=f_{out}(A)-f_{in}(A^{c})   for any subset of vertices,   A   A   A   . Therefore for  c ( A , A c )}} we need:   All outgoing edges from the cut must be fully saturated .  All incoming edges to the cut must have zero flow .   To prove the above claim we consider two cases:   In   G   G   G   , there exists an outgoing edge        (  x  ,  y  )   ,  x   ∈  A   ,   y  ∈   A  c       formulae-sequence      x  y   x   A     y   superscript  A  c      (x,y),x\in A,y\in A^{c}   such that it is not saturated, i.e., . This implies, that there exists a forward edge from   x   x   x   to   y   y   y   in , therefore there exists a path from   s   s   s   to   y   y   y   in , which is a contradiction. Hence, any outgoing edge    (  x  ,  y  )     x  y    (x,y)   is fully saturated.    In   G   G   G   , there exists an incoming edge        (  y  ,  x  )   ,  x   ∈  A   ,   y  ∈   A  c       formulae-sequence      y  x   x   A     y   superscript  A  c      (y,x),x\in A,y\in A^{c}   such that it carries some non-zero flow, i.e.,     f   (  x  ,  y  )    >  0        f   x  y    0    f(x,y)>0   . This implies, that there exists a backward edge from   x   x   x   to   y   y   y   in , therefore there exists a path from   s   s   s   to   y   y   y   in , which is again a contradiction. Hence, any incoming edge    (  x  ,  y  )     x  y    (x,y)   must have zero flow.   Both of the above statements prove that the capacity of cut obtained in the above described manner is equal to the flow obtained in the network. Also, the flow was obtained by Ford-Fulkerson algorithm , so it is the max-flow of the network as well.   Also, since any flow in the network is always less than or equal to capacity of every cut possible in a network , the above described cut is also the min-cut which obtains the max-flow .   See also   Linear programming  Maximum flow  Minimum cut  Flow network  Edmonds–Karp algorithm  Ford–Fulkerson algorithm   References       "  Category:Combinatorial optimization  Category:Theorems in graph theory   