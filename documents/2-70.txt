


Max-flow min-cut theorem




Max-flow min-cut theorem

In optimization theory, the max-flow min-cut theorem states that in a flow network, the maximum amount of flow passing from the source to the sink is equal to the minimum capacity that, when removed in a specific way from the network, causes the situation that no flow can pass from the source to the sink.
The max-flow min-cut theorem is a special case of the duality theorem for linear programs and can be used to derive Menger's theorem and the König–Egerváry theorem.
Definitions and statement
Let 
 
 
 
  be a network (directed graph) with 
 
 
 
  and 
 
 
 
  being the source and the sink of 
 
 
 
  respectively.
Maximum flow
Definition. The capacity of an edge is a mapping , denoted by  or 
 
 
 
 . It represents the maximum amount of flow that can pass through an edge.
Definition. A flow is a mapping , denoted by  or 
 
 
 
 , subject to the following two constraints:

1. Capacity Constraint:
 
 



2. Conservation of Flows:
 
 




Definition. The value of flow is defined by


 
  where 
 
 
 
  is the source of 
 
 
 
 . It represents the amount of flow passing from the source to the sink.

Maximum Flow Problem. Maximize 
 
 
 
 , that is, to route as much flow as possible from 
 
 
 
  to 
 
 
 
 .
 

Minimum cut
Definition. An s-t cut

 
  is a partition of 
 
 
 
  such that 
 
 
 
  and 
 
 
 
 . The cut-set of 
 
 
 
  is the set


 
  Note that if the edges in the cut-set of 
 
 
 
  are removed, 
 
 
 
 .
Definition. The capacity of an s-t cut is defined by


 
  where 
 
 
 
  if 
 
 
 
  and 
 
 
 
 , 0 otherwise.

Minimum s-t Cut Problem. Minimize 
 
 
 
 , that is, to determine 
 
 
 
  and 
 
 
 
  such that the capacity of the S-T cut is minimal.
 

Statement

Max-flow min-cut theorem. The maximum value of an s-t flow is equal to the minimum capacity over all s-t cuts.
 

Linear program formulation
The max-flow problem and min-cut problem can be formulated as two primal-dual linear programs.




Max-flow (Primal)

Min-cut (Dual)





maximize 
 
 


minimize 
 
 




subject to




subject to






Note that for the given s-t cut 
 
 
 
  if 
 
 
 
  then 
 
 
 
  and 0 otherwise. Therefore 
 
 
 
  should be 1 and 
 
 
 
  shout be zero. The equality in the max-flow min-cut theorem follows from the strong duality theorem in linear programming, which states that if the primal program has an optimal solution, x*, then the dual program also has an optimal solution, y*, such that the optimal values formed by the two solutions are equal.
Example
 The figure on the right is a network having a value of flow of 7. The vertex in white and the vertices in grey form the subsets 
 
 
 
  and 
 
 
 
  of an s-t cut, whose cut-set contains the dashed edges. Since the capacity of the s-t cut is 7, which equals to the value of flow, the max-flow min-cut theorem tells us that the value of flow and the capacity of the s-t cut are both optimal in this network.
Application
Generalized max-flow min-cut theorem
In addition to edge capacity, consider there is capacity at each vertex, that is, a mapping , denoted by 
 
 
 
 , such that the flow 
 
 
 
  has to satisfy not only the capacity constraint and the conservation of flows, but also the vertex capacity constraint



In other words, the amount of flow passing through a vertex cannot exceed its capacity. Define an s-t cut to be the set of vertices and edges such that for any path from s to t, the path contains a member of the cut. In this case, the capacity of the cut is the sum the capacity of each edge and vertex in it.
In this new definition, the generalized max-flow min-cut theorem states that the maximum value of an s-t flow is equal to the minimum capacity of an s-t cut in the new sense.
Menger's theorem
In the undirected edge-disjoint paths problem, we are given an undirected graph 
 
 
 
  and two vertices 
 
 
 
  and 
 
 
 
 , and we have to find the maximum number of edge-disjoint s-t paths in 
 
 
 
 .
The Menger's theorem states that the maximum number of edge-disjoint s-t paths in an undirected graph is equal to the minimum number of edges in an s-t cut-set.
Project selection problem
 In the project selection problem, there are 
 
 
 
  projects and 
 
 
 
  equipments. Each project  yields revenue  and each equipment  costs  to purchase. Each project requires a number of equipments and each equipment can be shared by several projects. The problem is to determine which projects and equipments should be selected and purchased respectively, so that the profit is maximized.
Let 
 
 
 
  be the set of projects not selected and 
 
 
 
  be the set of equipments purchased, then the problem can be formulated as,



Since the first term does not depend on the choice of 
 
 
 
  and 
 
 
 
 , this maximization problem can be formulated as a minimization problem instead, that is,



The above minimization problem can then be formulated as a minimum-cut problem by constructing a network, where the source is connected to the projects with capacity , and the sink is connected by the equipments with capacity . An edge  with infinite capacity is added if project  requires equipment . The s-t cut-set represents the projects and equipments in 
 
 
 
  and 
 
 
 
  respectively. By the max-flow min-cut theorem, one can solve the problem as a maximum flow problem.
The figure on the right gives a network formulation of the following project selection problem:





Project 

Equipment 






1

100

200

Project 1 requires equipments 1 and 2.



2

200

100

Project 2 requires equipment 2.



3

150

50

Project 3 requires equipment 3.



The minimum capacity of a s-t cut is 250 and the sum of the revenue of each project is 450; therefore the maximum profit g is 450 − 250 = 200, by selecting projects  and .
The idea here is to 'flow' the project profits through the 'pipes' of the equipment. If we cannot fill the pipe, the equipment's return is less than its cost, and the min cut algorithm will find it cheaper to cut the project's profit edge instead of the equipment's cost edge.
Image segmentation problem
 In the image segmentation problem, there are 
 
 
 
  pixels. Each pixel 
 
 
 
  can be assigned a foreground value  or a background value . There is a penalty of  if pixels 
 
 
 
  are adjacent and have different assignments. The problem is to assign pixels to foreground or background such that the sum of their values minus the penalties is maximum.
Let 
 
 
 
  be the set of pixels assigned to foreground and 
 
 
 
  be the set of points assigned to background, then the problem can be formulated as,



This maximization problem can be formulated as a minimization problem instead, that is,



The above minimization problem can be formulated as a minimum-cut problem by constructing a network where the source (orange node) is connected to all the pixels with capacity , and the sink (purple node) is connected by all the pixels with capacity . Two edges (
 
 
 
 ) and (
 
 
 
 ) with  capacity are added between two adjacent pixels. The s-t cut-set then represents the pixels assigned to the foreground in 
 
 
 
  and pixels assigned to background in 
 
 
 
 .
History
The max-flow min-cut theorem was proven by P. Elias, A. Feinstein, and C.E. Shannon in 1956, and independently also by L.R. Ford, Jr. and D.R. Fulkerson in the same year.
Proof
Let 
 
 
 
  be a network (directed graph) with 
 
 
 
  and 
 
 
 
  being the source and the sink of 
 
 
 
  respectively.
Consider the flow 
 
 
 
  computed for 
 
 
 
  by Ford–Fulkerson algorithm. In the residual graph  obtained for 
 
 
 
  (after the final flow assignment by Ford–Fulkerson algorithm), define two subsets of vertices as follows:



 
 : the set of vertices reachable from 
 
 
 
  in 
: the set of remaining vertices i.e. 
 
 


Claim.  c(A, Ac)}}, where the capacity of an s-t cut is defined by


 
 .
Now, we know, 
 
 
 
  for any subset of vertices, 
 
 
 
 . Therefore for  c(A, Ac)}} we need:

All outgoing edges from the cut must be fully saturated.
All incoming edges to the cut must have zero flow.

To prove the above claim we consider two cases:

In 
 
 
 
 , there exists an outgoing edge

 
  such that it is not saturated, i.e., . This implies, that there exists a forward edge from 
 
 
 
  to 
 
 
 
  in , therefore there exists a path from 
 
 
 
  to 
 
 
 
  in , which is a contradiction. Hence, any outgoing edge 
 
 
 
  is fully saturated.


In 
 
 
 
 , there exists an incoming edge

 
  such that it carries some non-zero flow, i.e., 
 
 
 
 . This implies, that there exists a backward edge from 
 
 
 
  to 
 
 
 
  in , therefore there exists a path from 
 
 
 
  to 
 
 
 
  in , which is again a contradiction. Hence, any incoming edge 
 
 
 
  must have zero flow.

Both of the above statements prove that the capacity of cut obtained in the above described manner is equal to the flow obtained in the network. Also, the flow was obtained by Ford-Fulkerson algorithm, so it is the max-flow of the network as well.

Also, since any flow in the network is always less than or equal to capacity of every cut possible in a network, the above described cut is also the min-cut which obtains the max-flow.
 

See also

Linear programming
Maximum flow
Minimum cut
Flow network
Edmonds–Karp algorithm
Ford–Fulkerson algorithm

References





"
Category:Combinatorial optimization Category:Theorems in graph theory


