   Jaro–Winkler distance      Jaro–Winkler distance   In computer science and statistics , the Jaro–Winkler distance (Winkler, 1990) is a measure of similarity between two strings . It is a variant of the Jaro distance metric (Jaro, 1989, 1995), a type of string edit distance , and was developed in the area of record linkage (duplicate detection) (Winkler, 1990). The higher the Jaro–Winkler distance for two strings is, the more similar the strings are. The Jaro–Winkler distance metric is designed and best suited for short strings such as person names. The score is normalized such that 0 equates to no similarity and 1 is an exact match.  Definition  The Jaro distance    d  j     subscript  d  j    d_{j}   of two given strings    s  1     subscript  s  1    s_{1}   and    s  2     subscript  s  2    s_{2}   is       d  j   =   {     0      if  m   =  0         1  3    (    m   |   s  1   |    +   m   |   s  2   |    +    m  -  t   m    )      otherwise            subscript  d  j    cases    0      if  m   0         1  3       m     subscript  s  1       m     subscript  s  2         m  t   m     otherwise       d_{j}=\left\{\par
 \begin{array}[]{l l}0&\text{if }m=0\\
 \frac{1}{3}\left(\frac{m}{|s_{1}|}+\frac{m}{|s_{2}|}+\frac{m-t}{m}\right)&%
 \text{otherwise}\end{array}\right.     Where:      m   m   m   is the number of matching characters (see below);     t   t   t   is half the number of transpositions (see below).   Two characters from    s  1     subscript  s  1    s_{1}   and    s  2     subscript  s  2    s_{2}   respectively, are considered matching only if they are the same and not farther than     ⌊    max   (   |   s  1   |   ,   |   s  2   |   )    2   ⌋   -  1               subscript  s  1       subscript  s  2     2    1    \left\lfloor\frac{\max(|s_{1}|,|s_{2}|)}{2}\right\rfloor-1   .  Each character of    s  1     subscript  s  1    s_{1}   is compared with all its matching characters in    s  2     subscript  s  2    s_{2}   . The number of matching (but different sequence order) characters divided by 2 defines the number of transpositions . For example, in comparing CRATE with TRACE, only 'R' 'A' 'E' are the matching characters, i.e. m=3. Although 'C', 'T' appear in both strings, they are farther than 1, i.e., floor(5/2)-1=1. Therefore, t=0 . In DwAyNE versus DuANE the matching letters are already in the same order D-A-N-E, so no transpositions are needed.  Jaro–Winkler distance uses a prefix scale   p   p   p   which gives more favourable ratings to strings that match from the beginning for a set prefix length   ℓ   normal-ℓ   \ell   . Given two strings    s  1     subscript  s  1    s_{1}   and    s  2     subscript  s  2    s_{2}   , their Jaro–Winkler distance    d  w     subscript  d  w    d_{w}   is:       d  w   =    d  j   +   (   ℓ  p   (   1  -   d  j    )    )         subscript  d  w      subscript  d  j     normal-ℓ  p    1   subscript  d  j        d_{w}=d_{j}+(\ell p(1-d_{j}))     where:       d  j     subscript  d  j    d_{j}   is the Jaro distance for strings    s  1     subscript  s  1    s_{1}   and    s  2     subscript  s  2    s_{2}        ℓ   normal-ℓ   \ell   is the length of common prefix at the start of the string up to a maximum of 4 characters     p   p   p   is a constant scaling factor for how much the score is adjusted upwards for having common prefixes.   p   p   p   should not exceed 0.25, otherwise the distance can become larger than 1. The standard value for this constant in Winkler's work is    p  =  0.1      p  0.1    p=0.1      Although often referred to as a distance metric , the Jaro–Winkler distance is actually not a metric in the mathematical sense of that term because it does not obey the triangle inequality  1 . In fact the Jaro-Winkler distance also does not satisfy that axiom that states that     d   (  x  ,  y  )    =  0  →  x  =  y          d   x  y    0    normal-→    x       y     d(x,y)=0\rightarrow x=y   .  In some implementations of Jaro-Winkler, the prefix bonus    ℓ  p   (   1  -   d  j    )       normal-ℓ  p    1   subscript  d  j      \ell p(1-d_{j})   is only added when the compared strings have a Jaro distance above a set "boost threshold"    b  t     subscript  b  t    b_{t}   . The boost threshold in Winkler's implementation was 0.7.       d  w   =   {      d  j       if   d  j    <   b  t          d  j   +   (   ℓ  p   (   1  -   d  j    )    )      otherwise            subscript  d  w    cases     subscript  d  j       if   subscript  d  j     subscript  b  t         subscript  d  j     normal-ℓ  p    1   subscript  d  j      otherwise       d_{w}=\left\{\par
 \begin{array}[]{l l}d_{j}&\text{if }d_{j}     Example  Note that Winkler's "reference" C code differs in at least two ways from published accounts of the Jaro–Winkler metric. First is his use of a typo table (adjwt) and also some optional additional tolerance for long strings.  Given the strings    s  1     subscript  s  1    s_{1}    MARTHA and    s  2     subscript  s  2    s_{2}    MARHTA we find:       m  =  6      m  6    m=6          |   s  1   |   =  6         subscript  s  1    6    |s_{1}|=6          |   s  2   |   =  6         subscript  s  2    6    |s_{2}|=6     There are mismatched characters T/H and H/T leading to    t  =   2  2   =  1        t    2  2        1     t=\frac{2}{2}=1      We find a Jaro score of:       d  j   =    1  3    (    6  6   +   6  6   +    6  -  1   6    )    =  0.944         subscript  d  j       1  3       6  6     6  6       6  1   6          0.944     d_{j}=\frac{1}{3}\left(\frac{6}{6}+\frac{6}{6}+\frac{6-1}{6}\right)=0.944     To find the Jaro–Winkler score using the standard weight    p  =  0.1      p  0.1    p=0.1   , we continue to find:       ℓ  =  3      normal-ℓ  3    \ell=3      Thus:       d  w   =   0.944  +   (    3  *  0.1    (   1  -  0.944   )    )    =  0.961         subscript  d  w     0.944      3  0.1     1  0.944          0.961     d_{w}=0.944+(3*0.1(1-0.944))=0.961     Given the strings    s  1     subscript  s  1    s_{1}    DWAYNE and    s  2     subscript  s  2    s_{2}    DUANE we find:       m  =  4      m  4    m=4          |   s  1   |   =  6         subscript  s  1    6    |s_{1}|=6          |   s  2   |   =  5         subscript  s  2    5    |s_{2}|=5         t  =  0      t  0    t=0      We find a Jaro score of:       d  j   =    1  3    (    4  6   +   4  5   +    4  -  0   4    )    =  0.822         subscript  d  j       1  3       4  6     4  5       4  0   4          0.822     d_{j}=\frac{1}{3}\left(\frac{4}{6}+\frac{4}{5}+\frac{4-0}{4}\right)=0.822     To find the Jaro–Winkler score using the standard weight    p  =  0.1      p  0.1    p=0.1   , we continue to find:       ℓ  =  1      normal-ℓ  1    \ell=1      Thus:       d  w   =   0.822  +   (    1  *  0.1    (   1  -  0.822   )    )    =  0.84         subscript  d  w     0.822      1  0.1     1  0.822          0.84     d_{w}=0.822+(1*0.1(1-0.822))=0.84     Given the strings    s  1     subscript  s  1    s_{1}    DIXON and    s  2     subscript  s  2    s_{2}    DICKSONX we find:       D   I   X   O   N     D   1   0   0   0   0     I   0   1   0   0   0     C   0   0   0   0   0     K   0   0   0   0   0     S   0   0   0   0   0     O   0   0   0   1   0     N   0   0   0   0   1     X   0   0   0   0   0          m  =  4      m  4    m=4   Note that the two X s are not considered matches because they are outside the match window of 3.         |   s  1   |   =  5         subscript  s  1    5    |s_{1}|=5          |   s  2   |   =  8         subscript  s  2    8    |s_{2}|=8         t  =  0      t  0    t=0      We find a Jaro score of:       d  j   =    1  3    (    4  5   +   4  8   +    4  -  0   4    )    =  0.767         subscript  d  j       1  3       4  5     4  8       4  0   4          0.767     d_{j}=\frac{1}{3}\left(\frac{4}{5}+\frac{4}{8}+\frac{4-0}{4}\right)=0.767     To find the Jaro–Winkler score using the standard weight    p  =  0.1      p  0.1    p=0.1   , we continue to find:       ℓ  =  2      normal-ℓ  2    \ell=2      Thus:       d  w   =   0.767  +   (    2  *  0.1    (   1  -  0.767   )    )    =  0.814         subscript  d  w     0.767      2  0.1     1  0.767          0.814     d_{w}=0.767+(2*0.1(1-0.767))=0.814     See also   Levenshtein distance  Record linkage  Census   References           External links   strcmp.c - Original C Implementation by the author of the algorithm   "  Category:String similarity measures   