   Evolvability (computer science)      Evolvability (computer science)   The term evolvability is used for a recent framework of computational learning introduced by Leslie Valiant in his paper of the same name and described below. The aim of this theory is to model biological evolution and categorize which types of mechanisms are evolvable. Evolution is an extension of PAC learning and learning from statistical queries.  General Framework  Let     F  n      subscript  F  n    F_{n}\,   and     R  n      subscript  R  n    R_{n}\,   be collections of functions on    n    n   n\,   variables. Given an ideal function     f  ∈   F  n       f   subscript  F  n     f\in F_{n}   , the goal is to find by local search a representation     r  ∈   R  n       r   subscript  R  n     r\in R_{n}   that closely approximates    f    f   f\,   . This closeness is measured by the performance     Perf   (  f  ,  r  )      Perf  f  r    \operatorname{Perf}(f,r)   of    r    r   r\,   with respect to    f    f   f\,   .  As is the case in the biological world, there is a difference between genotype and phenotype. In general, there can be multiple representations (genotypes) that correspond to the same function (phenotype). That is, for some     r  ,   r  ′    ∈   R  n        r   superscript  r  normal-′     subscript  R  n     r,r^{\prime}\in R_{n}   , with    r  ≠    r  ′        r   superscript  r  normal-′     r\neq r^{\prime}\,   , still     r   (  x  )    =    r  ′    (  x  )          r  x      superscript  r  normal-′   x     r(x)=r^{\prime}(x)\,   for all    x  ∈   X  n       x   subscript  X  n     x\in X_{n}   . However, this need not be the case. The goal then, is to find a representation that closely matches the phenotype of the ideal function, and the spirit of the local search is to allow only small changes in the genotype. Let the neighborhood     N   (  r  )       N  r    N(r)\,   of a representation    r    r   r\,   be the set of possible mutations of    r    r   r\,   .  For simplicity, consider Boolean functions on     X  n   =     {   -  1   ,  1  }   n         subscript  X  n    superscript     1   1   n     X_{n}=\{-1,1\}^{n}\,   , and let     D  n      subscript  D  n    D_{n}\,   be a probability distribution on     X  n      subscript  X  n    X_{n}\,   . Define the performance in terms of this. Specifically,        Perf   (  f  ,  r  )    =    ∑   x  ∈   X  n      f   (  x  )   r   (  x  )    D  n    (  x  )      .       Perf  f  r     subscript     x   subscript  X  n       f  x  r  x   subscript  D  n   x      \operatorname{Perf}(f,r)=\sum_{x\in X_{n}}f(x)r(x)D_{n}(x).   Note that      Perf   (  f  ,  r  )    =    Prob   (    f   (  x  )    =   r   (  x  )     )    -   Prob   (    f   (  x  )    ≠   r   (  x  )     )      .       Perf  f  r      Prob      f  x     r  x      Prob      f  x     r  x        \operatorname{Perf}(f,r)=\operatorname{Prob}(f(x)=r(x))-\operatorname{Prob}(f(%
 x)\neq r(x)).   In general, for non-Boolean functions, the performance will not correspond directly to the probability that the functions agree, although it will have some relationship.  Throughout an organism's life, it will only experience a limited number of environments, so its performance cannot be determined exactly. The empirical performance is defined by       Perf  s    (  f  ,  r  )    =    1  s     ∑   x  ∈  S     f   (  x  )   r   (  x  )       ,        subscript  Perf  s   f  r       1  s     subscript     x  S      f  x  r  x       \operatorname{Perf}_{s}(f,r)=\frac{1}{s}\sum_{x\in S}f(x)r(x),   where    S    S   S\,   is a multiset of    s    s   s\,   independent selections from     X  n      subscript  X  n    X_{n}\,   according to     D  n      subscript  D  n    D_{n}\,   . If    s    s   s\,   is large enough, evidently     Perf  s    (  f  ,  r  )       subscript  Perf  s   f  r    \operatorname{Perf}_{s}(f,r)   will be close to the actual performance    Perf   (  f  ,  r  )      Perf  f  r    \operatorname{Perf}(f,r)   .  Given an ideal function    f  ∈   F  n       f   subscript  F  n     f\in F_{n}   , initial representation    r  ∈   R  n       r   subscript  R  n     r\in R_{n}   , sample size     s    s   s\,   , and tolerance     t    t   t\,   , the mutator     Mut   (  f  ,  r  ,  s  ,  t  )      Mut  f  r  s  t    \operatorname{Mut}(f,r,s,t)   is a random variable defined as follows. Each     r  ′   ∈   N   (  r  )         superscript  r  normal-′     N  r     r^{\prime}\in N(r)   is classified as beneficial, neutral, or deleterious, depending on its empirical performance. Specifically,        r  ′      superscript  r  normal-′    r^{\prime}\,   is a beneficial mutation if       Perf  s    (  f  ,   r  ′   )    -    Perf  s    (  f  ,  r  )     ≥  t          subscript  Perf  s   f   superscript  r  normal-′      subscript  Perf  s   f  r    t    \operatorname{Perf}_{s}(f,r^{\prime})-\operatorname{Perf}_{s}(f,r)\geq t   ;       r  ′      superscript  r  normal-′    r^{\prime}\,   is a neutral mutation if     -  t   <     Perf  s    (  f  ,   r  ′   )    -    Perf  s    (  f  ,  r  )     <  t          t       subscript  Perf  s   f   superscript  r  normal-′      subscript  Perf  s   f  r         t     -t<\operatorname{Perf}_{s}(f,r^{\prime})-\operatorname{Perf}_{s}(f,r)   ;       r  ′      superscript  r  normal-′    r^{\prime}\,   is a deleterious mutation if       Perf  s    (  f  ,   r  ′   )    -    Perf  s    (  f  ,  r  )     ≤   -  t           subscript  Perf  s   f   superscript  r  normal-′      subscript  Perf  s   f  r      t     \operatorname{Perf}_{s}(f,r^{\prime})-\operatorname{Perf}_{s}(f,r)\leq-t   .   If there are any beneficial mutations, then    Mut   (  f  ,  r  ,  s  ,  t  )      Mut  f  r  s  t    \operatorname{Mut}(f,r,s,t)   is equal to one of these at random. If there are no beneficial mutations, then    Mut   (  f  ,  r  ,  s  ,  t  )      Mut  f  r  s  t    \operatorname{Mut}(f,r,s,t)   is equal to a random neutral mutation. In light of the similarity to biology,    r    r   r\,   itself is required to be available as a mutation, so there will always be at least one neutral mutation.  The intention of this definition is that at each stage of evolution, all possible mutations of the current genome are tested in the environment. Out of the ones who thrive, or at least survive, one is chosen to be the candidate for the next stage. Given     r  0   ∈   R  n        subscript  r  0    subscript  R  n     r_{0}\in R_{n}   , we define the sequence     r  0   ,   r  1   ,   r  2   ,  …      subscript  r  0    subscript  r  1    subscript  r  2   normal-…    r_{0},r_{1},r_{2},\ldots   by     r   i  +  1    =   Mut   (  f  ,   r  i   ,  s  ,  t  )         subscript  r    i  1     Mut  f   subscript  r  i   s  t     r_{i+1}=\operatorname{Mut}(f,r_{i},s,t)   . Thus     r  g      subscript  r  g    r_{g}\,   is a random variable representing what     r  0      subscript  r  0    r_{0}\,   has evolved to after    g    g   g\,    generations .  Let    F    F   F\,   be a class of functions,    R    R   R\,   be a class of representations, and    D    D   D\,   a class of distributions on    X    X   X\,   . We say that    F    F   F\,   is evolvable by    R    R   R\,   over    D    D   D\,    if there exists polynomials    p   (  ⋅  ,  ⋅  )       p   normal-⋅  normal-⋅     p(\cdot,\cdot)   ,    s   (  ⋅  ,  ⋅  )       s   normal-⋅  normal-⋅     s(\cdot,\cdot)   ,    t   (  ⋅  ,  ⋅  )       t   normal-⋅  normal-⋅     t(\cdot,\cdot)   , and    g   (  ⋅  ,  ⋅  )       g   normal-⋅  normal-⋅     g(\cdot,\cdot)   such that for all    n    n   n\,   and all    ϵ  >   0       ϵ  0    \epsilon>0\,   , for all ideal functions    f  ∈   F  n       f   subscript  F  n     f\in F_{n}   and representations     r  0   ∈   R  n        subscript  r  0    subscript  R  n     r_{0}\in R_{n}   , with probability at least    1  -   ϵ       1  ϵ    1-\epsilon\,   ,        Perf   (  f  ,   r   g   (  n  ,   1  /  ϵ   )     )    ≥   1  -  ϵ    ,       Perf  f   subscript  r    g   n    1  ϵ         1  ϵ     \operatorname{Perf}(f,r_{g(n,1/\epsilon)})\geq 1-\epsilon,   where the sizes of neighborhoods    N   (  r  )       N  r    N(r)\,   for    r  ∈    R  n        r   subscript  R  n     r\in R_{n}\,   are at most    p   (  n  ,   1  /  ϵ   )       p   n    1  ϵ      p(n,1/\epsilon)\,   , the sample size is    s   (  n  ,   1  /  ϵ   )       s   n    1  ϵ      s(n,1/\epsilon)\,   , the tolerance is    t   (   1  /  n   ,  ϵ  )       t     1  n   ϵ     t(1/n,\epsilon)\,   , and the generation size is    g   (  n  ,   1  /  ϵ   )       g   n    1  ϵ      g(n,1/\epsilon)\,   .      F    F   F\,   is evolvable over    D    D   D\,    if it is evolvable by some    R    R   R\,   over    D    D   D\,   .      F    F   F\,   is evolvable if it is evolvable over all distributions    D    D   D\,   .  Results  The class of conjunctions and the class of disjunctions are evolvable over the uniform distribution for short conjunctions and disjunctions, respectively.  The class of parity functions (which evaluate to the parity of the number of true literals in a given subset of literals) are not evolvable, even for the uniform distribution.  Evolvability implies PAC learnability .  References    .   "  Category:Machine learning   