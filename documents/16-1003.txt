   Supersingular Isogeny Key Exchange      Supersingular Isogeny Key Exchange   The Supersingular Isogeny Diffie‚ÄìHellman Key Exchange (SIDH) is a post-quantum public key cryptographic algorithm used to establish a secret key between two parties over an otherwise insecure communications channel. It was designed to resist cryptanalytic attack by an adversary in possession of a quantum computer . Because the SIDH has key sizes, computations and foward security protection similar to that of the widely supported Elliptic Curve Diffie‚ÄìHellman key exchange it is a natural candidate to replace Diffie-Hellman and Elliptic Curve Diffie-Hellman in the face of a growing quantum computer threat.  Introduction  Developments in quantum computing threaten the security of the cryptography used to secure the internet. Researchers at IBM's Watson Research Laboratories announced in 2013 that functional quantum computers could be available in as little as 15 to 20 years. 1 When sufficiently sized quantum computers exist, all of the commonly used public key algorithms, RSA , Diffie‚ÄìHellman , elliptic curve Diffie‚ÄìHellman and the Elliptic Curve DSA , will become insecure.  The Supersingular Isogeny Diffie-Hellman was created in 2011 by De Feo, Jao, and Plut and published as: "Towards Quantum-Resistant Cryptosystems from Supersingular Elliptic Curve Isogenies." 2 Because the Supersingular Isogeny method uses many of the same computational primitives (such as adding points on an elliptic curve) used in conventional elliptic curve cryptography, it may be easy to upgrade systems that use elliptic curve Diffie‚ÄìHellman to use the SIDH. A search of the World Intellectual Property Organization's Patent Database indicates that the Supersingular Isogeny Diffie-Hellman is not patented by any of the authors of this paper. 3  Unlike other post-quantum public key systems , such as the McEliece system or NTRU , the Supersingular Isogeny Diffie-Hellman method provides forward secrecy and thus avoids the risk associated with reliance on the security of long term secret keys. Forward secrecy is an important tool to prevent mass surveillance 4 and to protect against memory leaks in systems as evidenced by the Heartbleed bug. 5  Background  The Supersingular Isogeny Diffie-Hellman method works with the set of supersingular elliptic curves E over F p 2 , where the number of points on any such curve will be (p ¬± 1) 2 . An isogeny of an elliptic curve E is a rational map from E to another elliptic curve E' such that the number of points on both curves is the same. For supersingular elliptic curves, isogenies are equivalently defined by points inside their kernel .  The SIDH method works with a prime of the form p = (w A ) e A (w B ) e B (f) ¬± 1 where w A and w B are small primes and an elliptic curve E defined by the equation: y 2 = x 3 + ax + b. SIDH builds an isogeny maps from a single elliptic curve point which is taken as the generator for the isogeny's kernel. This point is chosen to be a random linear combination to two fixed points chosen to be in the kernel of the isogeny.  The j-Invariant of an elliptic curve E is a fixed function of a set of isomorphic curves. It is computed from the parameters that define the curve. For an elliptic curve E defined by the equation: y 2 = x 3 + ax + b the j-invariant of the curve E is:        j   (  E  )    =   1728    4   a  3      4   a  3    +   27   b  2        .        j  E     1728      4   superscript  a  3        4   superscript  a  3      27   superscript  b  2         j(E)=1728\frac{4a^{3}}{4a^{3}+27b^{2}}.     Security  De Feo, Jao and Plut suggest that the security of SIDH will be:  O(p 1/4 ) for classical computers O(p 1/6 ) for quantum computers. 6  This suggests that SIDH will be 128-bit secure for a prime (p) of 768 bits.  The set of isogenies of a supersingular elliptic curve together with operation of composition form a non-abelian group and the security of the SIDH is dependent on this non-abelian structure. 7 The security of SIDH is closely related to the problem of finding the isogeny mapping between two supersingular elliptic curves with the same number of points. A 2014 study of the difficulty of this problem is by Delfs and Galbraith and confirms the O(p 1/4 ) for classical computers. 8  Efficiency  During a Key exchange entities A and B will each transmit information 2 (mod p) coefficients defining an elliptic curve and 2 elliptic curve points. Each elliptic curve coefficient requires log 2 p bits. Each elliptic curve point can be transmitted in log 2 p+1 bits. Hence the transmission is 4log 2 p + 2 bits. For a 768-bit modulus p for the elliptic curve this is 3074 bits; hence, the bandwidth for SIDH is equivalent to that of the non-quantum secure RSA or Diffie-Hellman public key systems at the 128-bit security level.  There are several different ways to compute isogenies given a point in the kernel of the isogeny. However, the optimal strategy for a prime p, as described above has work less than O(w i e i ) (i = A or B). Because of this, the value for w i is often chosen as 2 or 3. With that choice the value of e i is chosen to provide the desired security level. The mathematics of composing isogenies use a set of formula's by Velu. For these formulas and a discussion of isogeny computation see, "Isogenies of Elliptic Curves: A Computational Approach" by Shumow. 9 Further aspects of isogeny computation are found in the work of Moody and Shumow. 10  In 2014, researchers at the University of Waterloo developed a software implementation of SIDH. They ran their partially optimized code on a X86-64 processor running at 2.4 GHz. For a 768-bit modulus they were able to complete the key exchange computations in 200 milliseconds thus demonstrating that the SIDH is computationally practical. 11  The Supersingular Isogeny Diffie-Hellman Method  While several steps of SIDH involve complex isogeny calculations, the overall flow of SIDH for parties A and B is straightforward for those familiar with a Diffie-Hellman Key Exchange or its elliptic curve variant.  Setup  These are public parameters that can be shared by everyone in the network, or they can be negotiated by parties A and B at the beginning of a session.  1. A prime of the form    p  =     w  A   e  A    ‚ãÖ   w  B   e  B    ‚ãÖ  f   ¬±  1.       p   plus-or-minus   normal-‚ãÖ   superscript   subscript  w  A    subscript  e  A     superscript   subscript  w  B    subscript  e  B    f   1.     p=w_{A}^{e_{A}}\cdot w_{B}^{e_{B}}\cdot f\pm 1.     2. A supersingular elliptic curve E over    ùîΩ   p  2      subscript  ùîΩ   superscript  p  2     \mathbb{F}_{p^{2}}   .  3. Fixed elliptic points      P  A   ,   Q  A   ,   P  B   ,    Q  B   on  E    .      subscript  P  A    subscript  Q  A    subscript  P  B      subscript  Q  B   on  E     P_{A},Q_{A},P_{B},Q_{B}\text{ on }E.     4. The order of    P  A     subscript  P  A    P_{A}   and    Q  A     subscript  Q  A    Q_{A}   is      (   w  A   )    e  A    .     superscript   subscript  w  A    subscript  e  A     (w_{A})^{e_{A}}.   The order of    P  B     subscript  P  B    P_{B}   and    Q  B     subscript  Q  B    Q_{B}   is     (   w  B   )    e  B      superscript   subscript  w  B    subscript  e  B     (w_{B})^{e_{B}}   .  Key exchange  In the key exchange, parties A and B will each create an isogeny from a common elliptic curve E. They each will do this by creating a random point in what will be the kernel of their isogeny. The kernel of their isogeny will be spanned by the pairs of points    P  A     subscript  P  A    P_{A}   ,    Q  A     subscript  Q  A    Q_{A}   and    P  B     subscript  P  B    P_{B}   ,    Q  B     subscript  Q  B    Q_{B}   respectively. The different pairs of points used ensure that parties A and B create different, non-communting, isogenies. A random point (    R  A     subscript  R  A    R_{A}   , or    R  B     subscript  R  B    R_{B}   ) in the kernel of the isogenies is created as a random linear combination of the points    P  A     subscript  P  A    P_{A}   ,    Q  A     subscript  Q  A    Q_{A}   and    P  B     subscript  P  B    P_{B}   ,    Q  B     subscript  Q  B    Q_{B}   .  Using    R  A     subscript  R  A    R_{A}   , or    R  B     subscript  R  B    R_{B}   , parties A and B then use Velu's formulas for creating isogenies    œï  A     subscript  œï  A    \phi_{A}   and    œï  B     subscript  œï  B    \phi_{B}   respectively. From this they compute the image of the pairs of points    P  A     subscript  P  A    P_{A}   ,    Q  A     subscript  Q  A    Q_{A}   or    P  B     subscript  P  B    P_{B}   ,    Q  B     subscript  Q  B    Q_{B}   under the    œï  A     subscript  œï  A    \phi_{A}   and    œï  B     subscript  œï  B    \phi_{B}   isogenies respectively.  As a result A and B will now have two pairs of points     œï  B    (   P  A   )        subscript  œï  B    subscript  P  A     \phi_{B}(P_{A})   ,     œï  B    (   Q  A   )        subscript  œï  B    subscript  Q  A     \phi_{B}(Q_{A})   and     œï  A    (   P  B   )        subscript  œï  A    subscript  P  B     \phi_{A}(P_{B})   ,     œï  A    (   Q  B   )        subscript  œï  A    subscript  Q  B     \phi_{A}(Q_{B})   respectively. A and B now exchange these pairs of points over a communications channel.  A and B now use the pair of points they receive as the basis for the kernel of a new isogeny. They use the same linear coefficients they used above with the points they received to form a point in the kernel of an isogeny that they will create. They each compute points    S   B  A      subscript  S    B  A     S_{BA}   and    S   A  B      subscript  S    A  B     S_{AB}   and use Velu's formulas to construct new isogenies.  To complete the key exchange, A and B compute the coefficients of two new elliptic curves under these two new isogenies. They then compute the j-invariant of these curves. Unless there were errors in transmission, the j-invariant of the curve created by A will equal to the j-invariant of the curve created by B.  Notationally, the SIDH key exchange between parties A and B works as follows:  1A. A generates two random integers m A , n A A) eA 2A. A generates      R  A   :=     m  A   ‚ãÖ   (   P  A   )    +    n  A   ‚ãÖ   (   Q  A   )      .     assign   subscript  R  A      normal-‚ãÖ   subscript  m  A    subscript  P  A     normal-‚ãÖ   subscript  n  A    subscript  Q  A       R_{A}:=m_{A}\cdot(P_{A})+n_{A}\cdot(Q_{A}).     3A. A uses the point    R  A     subscript  R  A    R_{A}   to create an isogeny mapping     œï  A   :   E  ‚Üí   E  A       normal-:   subscript  œï  A    normal-‚Üí  E   subscript  E  A      \phi_{A}:E\rightarrow E_{A}   and curve    E  A     subscript  E  A    E_{A}   isogenous to    E  .    E   E.     4A. A applies    œï  A     subscript  œï  A    \phi_{A}   to    P  B     subscript  P  B    P_{B}   and    Q  B     subscript  Q  B    Q_{B}   to form two points on     E  A   :    œï  A    (   P  B   )       normal-:   subscript  E  A      subscript  œï  A    subscript  P  B      E_{A}:\phi_{A}(P_{B})   and      œï  A    (   Q  B   )    .       subscript  œï  A    subscript  Q  B     \phi_{A}(Q_{B}).     5A. A sends to B     E  A   ,    œï  A    (   P  B   )        subscript  E  A      subscript  œï  A    subscript  P  B      E_{A},\phi_{A}(P_{B})   , and      œï  A    (   Q  B   )    .       subscript  œï  A    subscript  Q  B     \phi_{A}(Q_{B}).     1B - 4B: Same as A1 through A4, but with A and B subscripts swapped.  5B. B sends to A     E  B   ,    œï  B    (   P  A   )        subscript  E  B      subscript  œï  B    subscript  P  A      E_{B},\phi_{B}(P_{A})   , and      œï  B    (   Q  A   )    .       subscript  œï  B    subscript  Q  A     \phi_{B}(Q_{A}).     7A. A has     m  A   ,   n  A   ,    œï  B    (   P  A   )        subscript  m  A    subscript  n  A      subscript  œï  B    subscript  P  A      m_{A},n_{A},\phi_{B}(P_{A})   , and     œï  B    (   Q  A   )        subscript  œï  B    subscript  Q  A     \phi_{B}(Q_{A})   and forms      S   B  A    :=     m  A    (    œï  B    (   P  A   )    )    +    n  A    (    œï  B    (   Q  A   )    )      .     assign   subscript  S    B  A         subscript  m  A      subscript  œï  B    subscript  P  A        subscript  n  A      subscript  œï  B    subscript  Q  A        S_{BA}:=m_{A}(\phi_{B}(P_{A}))+n_{A}(\phi_{B}(Q_{A})).     8A. A uses    S   B  A      subscript  S    B  A     S_{BA}   to create an isogeny mapping    œà   B  A      subscript  œà    B  A     \psi_{BA}   .  9A. A uses    œà   B  A      subscript  œà    B  A     \psi_{BA}   to create an elliptic curve    E   B  A      subscript  E    B  A     E_{BA}   which is isogenous to E.  10A. A computes    K  :=   j-invariant   (   j   B  A    )       assign  K    j-invariant   subscript  j    B  A       K:=\text{ j-invariant }(j_{BA})   of the curve    E   B  A      subscript  E    B  A     E_{BA}   .  7B. Similarly, B has     m  B   ,   n  B   ,    œï  A    (   P  B   )        subscript  m  B    subscript  n  B      subscript  œï  A    subscript  P  B      m_{B},n_{B},\phi_{A}(P_{B})   , and     œï  A    (   Q  B   )        subscript  œï  A    subscript  Q  B     \phi_{A}(Q_{B})   and forms     S   A  B    =     m  B    (    œï  A    (   P  B   )    )    +    n  B    (    œï  A    (   Q  B   )    )          subscript  S    A  B         subscript  m  B      subscript  œï  A    subscript  P  B        subscript  n  B      subscript  œï  A    subscript  Q  B        S_{AB}=m_{B}(\phi_{A}(P_{B}))+n_{B}(\phi_{A}(Q_{B}))   .  8B. B uses    S   A  B      subscript  S    A  B     S_{AB}   to create an isogeny mapping    œà   A  B      subscript  œà    A  B     \psi_{AB}   .  9B. B uses    œà   A  B      subscript  œà    A  B     \psi_{AB}   to create an elliptic curve    E   A  B      subscript  E    A  B     E_{AB}   which is isogenous to E. 10B. B computes K = j-invariant (     j   A  B    )     fragments   subscript  j    A  B    normal-)    j_{AB})   of the curve    E   A  B      subscript  E    A  B     E_{AB}   .  The curves    E   A  B      subscript  E    A  B     E_{AB}   and    E   B  A      subscript  E    B  A     E_{BA}   will be guaranteed to both will have the same j-invariant. A function of K is used as the shared key. 12  Sample Parameters  The following parameters are suggested by Defeo et. al as providing 128 bits of security: 13  p = 768-bit prime for the key exchange with w A = 2, w B = 3, e A = 63, e B = 41, and f = 11. Thus p = (2 63 ¬∑3 41 ¬∑11) + 1.  E 0 = the base (starting) curve for the key exchange = y 2 = x 3 + x  Luca Defeo, one of the authors of the paper defining the key exchange has posted software that implements the key exchange for these and other parameters. 14  Similar Systems, Signatures, and Uses  A predecessor to the SIDH was published in 2006 by Rostovtsev and Stolbunov. They created the first Diffie-Hellman replacement based on elliptic curve isogenies. Unlike the method of De Feo, Jao, and Plut, the method of Rostovtsev and Stolbunov used ordinary elliptic curves 15 and was found to have a subexponential quantum attack. 16  In March 2014, researchers at the Chinese State Key Lab for Integrated Service Networks and Xidian University, extended the security of the SIDH to a form of digital signature with strong designated verifier. 17 In October 2014, well known elliptic curve researchers Jao and Soukharev from the University of Waterloo presented an alternative method of creating undeniable signatures with designated verifier using elliptic curve isogenies.  References  "  Category:Cryptographic algorithms     ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©    ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©    ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©     