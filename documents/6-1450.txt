


Event calculus




Event calculus

The event calculus is a logical language for representing and reasoning about events and their effects first presented by Robert Kowalski and Marek Sergot in 1986. It was extended by Murray Shanahan and Rob Miller in the 1990s. Similar to other languages for reasoning about change, the event calculus represents the effects of actions on fluents. However, events can also be external to the system. In the event calculus, one can specify the value of fluents at some given time points, the events that take place at given time points, and their effects.
Fluents and events
In the event calculus, fluents are reified. This means that they are not formalized by means of predicates but by means of functions. A separate predicate 
 
 
 
  is used to tell which fluents hold at a given time point. For example, 
 
 
 
  means that the box is on the table at time 
 
 
 
 ; in this formula, 
 
 
 
  is a predicate while 
 
 
 
  is a function.
Events are also represented as terms. The effects of events are given using the predicates 
 
 
 
  and 
 
 
 
 . In particular, 
 
 
 
  means that, if the event represented by the term 
 
 
 
  is executed at time 
 
 
 
 , then the fluent 
 
 
 
  will be true after 
 
 
 
 . The 
 
 
 
  predicate has a similar meaning, with the only difference being that 
 
 
 
  will be false and not true after 
 
 
 
 .
Domain-independent axioms
Like other languages for representing actions, the event calculus formalizes the correct evolution of the fluent via formulae telling the value of each fluent after an arbitrary action has been performed. The event calculus solves the frame problem in a way that is similar to the successor state axioms of the situation calculus: a fluent is true at time 
 
 
 
  if and only if it has been made true in the past and has not been made false in the meantime.


 
  is true at time 
 
 
 
  if:

an event 
 
 
 
  has taken place
 
 
 
 ;
this took place in the past:
this event has the fluent 
 
 
 
  as an effect
 
 
 
 ;
the fluent has not been made false in the meantime
 
 


A similar formula is used to formalize the opposite case in which a fluent is false at a given time. Other formulae are also needed for correctly formalizing fluents before they have been effects of an event. These formulae are similar to the above, but 
 
 
 
  is replaced by 
 
 
 
 .
The 
 
 
 
  predicate, stating that a fluent has been made false during an interval, can be axiomatized, or simply taken as a shorthand, as follows:



Domain-dependent axioms
The axioms above relate the value of the predicates 
 
 
 
 , 
 
 
 
  and 
 
 
 
 , but do not specify which fluents are known to be true and which events actually make fluents true or false. This is done by using a set of domain-dependent axioms. The known values of fluents are stated as simple literals 
 
 
 
 . The effects of events are stated by formulae relating the effects of events with their preconditions. For example, if the event 
 
 
 
  makes the fluent 
 
 
 
  true, but only if 
 
 
 
  is currently true, the corresponding formula in the event calculus is:



The right-hand expression of this equivalence is composed of a disjunction: for each event and fluent that can be made true by the event, there is a disjunct saying that 
 
 
 
  is actually that event, that 
 
 
 
  is actually that fluent, and that the precondition of the event is met.
The formula above specifies the truth value of 
 
 
 
  for every possible event and fluent. As a result, all effects of all events have to be combined in a single formulae. This is a problem, because the addition of a new event requires modifying an existing formula rather than adding new ones. This problem can be solved by the application of circumscription to a set of formulae each specifying one effect of one event:









These formulae are simpler than the formula above, because each effect of each event can be specified separately. The single formula telling which events 
 
 
 
  and fluents 
 
 
 
  make 
 
 
 
  true has been replaced by a set of smaller formulae, each one telling the effect of an event on a fluent.
However, these formulae are not equivalent to the formula above. Indeed, they only specify sufficient conditions for 
 
 
 
  to be true, which should be completed by the fact that 
 
 
 
  is false in all other cases. This fact can be formalized by simply circumscribing the predicate 
 
 
 
  in the formula above. It is important to note that this circumscription is done only on the formulae specifying 
 
 
 
  and not on the domain-independent axioms. The predicate 
 
 
 
  can be specified in the same way 
 
 
 
  is.
A similar approach can be taken for the 
 
 
 
  predicate. The evaluation of this predicate can be enforced by formulae specifying not only when it is true and when it is false:



Circumscription can simplify this specification, as only necessary conditions can be specified:






Circumscribing the predicate 
 
 
 
 , this predicate will be false at all points in which it is not explicitly specified to be true. This circumscription has to be done separately from the circumscription of the other formulae. In other words, if 
 
 
 
  is the set of formulae of the kind 
 
 
 
 , 
 
 
 
  is the set of formulae 
 
 
 
 , and 
 
 
 
  are the domain independent axioms, the correct formulation of the domain is:
$$Circ(F; Initiates, Terminates) \wedge
 Circ(G; Happens) \wedge H$$
The event calculus as a logic program
The event calculus was originally formulated as a set of Horn clauses augmented with negation as failure and could be run as a Prolog program. In fact, circumscription is one of the several semantics that can be given to negation as failure, and is closely related to the completion semantics (in which "if" is interpreted as "if and only if" — see logic programming).
Extensions and applications
The original event calculus paper of Kowalski and Sergot focused on applications to database updates and narratives. Extensions of the event calculus can also formalize non-deterministic actions, concurrent actions, actions with delayed effects, gradual changes, actions with duration, continuous change, and non-inertial fluents.
Kave Eshghi showed how the event calculus can be used for planning, using abduction to generate hypothetical events in abductive logic programming. Van Lambalgen and Hamm showed how the event calculus can also be used to give an algorithmic semantics to tense and aspect in natural language using constraint logic programming.
Reasoning tools
In addition to Prolog and its variants, several other tools for reasoning using the event calculus are also available:

Abductive Event Calculus Planners
Discrete Event Calculus Reasoner
Event Calculus Answer Set Programming
Reactive Event Calculus

See also

First-order logic
Frame problem
Situation calculus

References

Brandano, S. (2001) "[http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?isnumber=20130&arnumber;;=930691&count;=35&index;=2 The Event Calculus Assessed,]" IEEE TIME Symposium: 7-12.
Eshghi, K. (1988) "Abductive Planning with Event Calculus," ICLP/SLP: 562-79.
Kowalski, R. (1992) "Database updates in the event calculus," Journal of Logic Programming 12 (162): 121-46.
-------- and M. Sergot (1986) "A Logic-Based Calculus of Events," New Generation Computing 4: 67–95.
-------- and F. Sadri (1995) "Variants of the Event Calculus," ICLP: 67-81.
Miller, R., and M. Shanahan (1999) "The event-calculus in classical logic — alternative axiomatizations," Electronic Transactions on Artificial Intelligence 3(1): 77-105.
Mueller, Erik T. (2015). Commonsense Reasoning: An Event Calculus Based Approach (2nd Ed.). Waltham, MA: Morgan Kaufmann/Elsevier. ISBN 978-0128014165. (Guide to using the event calculus)
Shanahan, M. (1997) Solving the frame problem: A mathematical investigation of the common sense law of inertia. MIT Press.
-------- (1999) "The Event Calculus Explained," Springer Verlag, LNAI (1600): 409-30.
Van Lambalgen, M., and F. Hamm (2005) The proper treatment of events. Oxford and Boston: Blackwell Publishing.

"
Category:1986 introductions Category:Logic in computer science Category:Logic programming Category:Knowledge representation Category:Logical calculi


