


Power iteration




Power iteration

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In mathematics, the power iteration is an eigenvalue algorithm: given a matrix A, the algorithm will produce a number λ (the eigenvalue) and a nonzero vector v (the eigenvector), such that Av = λv. The algorithm is also known as the Von Mises iteration.1
The power iteration is a very simple algorithm. It does not compute a matrix decomposition, and hence it can be used when A is a very large sparse matrix. However, it will find only one eigenvalue (the one with the greatest absolute value) and it may converge only slowly.
The method
The power iteration algorithm starts with a vector b0, which may be an approximation to the dominant eigenvector or a random vector. The method is described by the iteration


 
  So, at every iteration, the vector bk is multiplied by the matrix A and normalized.
Under the assumptions:

A has an eigenvalue that is strictly greater in magnitude than its other eigenvalues
The starting vector 
 
 
 
  has a nonzero component in the direction of an eigenvector associated with the dominant eigenvalue.

then:

A subsequence of 
 
 
 
  converges to an eigenvector associated with the dominant eigenvalue

Note that the sequence 
 
 
 
 
  does not necessarily converge. It can be shown that:

 
  where
 
 
 
  is an eigenvector associated with the dominant eigenvalue, and 
 
 
 
 . The presence of the term 
 
 
 
  implies that 
 
 
 
 
  does not converge unless 
 
 
 
  Under the two assumptions listed above, the sequence 
 
 
 
  defined by: 
 
 
 
  converges to the dominant eigenvalue.
This can be run as a simulation program with the following simple algorithm:
for each(''simulation'') {
     // calculate the matrix-by-vector product Ab
     for(i=0; i"0;" (k="0;" *="" +="tmp[k]*tmp[k];" <="" a="" b="tmp/norm;" b[j];="" calculate="" column="" dot="" for="" i++)="" i-th="" in="" iteration="" j++)="" j"" k++)="" k"" length="" next="" norm="sqrt(norm_sq);" norm_sq="" normalize="" of="" product="" resultant="" row="" source="" the="" tmp[i]="" to="" unit="" vector="" with="" {="" }="">
 The value of ''norm'' converges to the absolute value of the dominant eigenvalue, and the vector ''b'' to an associated eigenvector.
 
 ''Note:'' The above code assumes real A,b. To handle complex; A[i][j] becomes conj(A[i][j]), and tmp[k]*tmp[k] becomes conj(tmp[k])*tmp[k]
 
 This algorithm is the one used to calculate such things as the Google [[PageRank]].
 
 The method can also be used to calculate the [[spectral radius]] of a matrix by computing the [[Rayleigh quotient]]
 :
 
 ==Analysis==
 Let  be decomposed into its [[Jordan canonical form]]:,
 where the first column of  is an eigenvector of  corresponding to the dominant eigenvalue .
 Since the dominant eigenvalue of  is unique,
 the first Jordan block of  is the  matrix
 , where
  is the largest eigenvalue of ''A'' in magnitude.
 The starting vector 
 can be written as a linear combination of the columns of V:
 .
 By assumption,  has a nonzero component in the direction of the dominant eigenvalue, so
 .
 
 The computationally useful [[recurrence relation]] for 
 can be rewritten as:
 ,
 where the expression: is more amenable to the following analysis.
 


 The expression above simplifies as 


 as
 .
 
 The limit follows from the fact that the eigenvalue of
 
 is less than 1 in magnitude, so
 
 as
 

 It follows that:
 

 as
 

 Using this fact,
 
 can be written in a form that emphasizes its relationship with  when k is large:
 

 where 
and

 as
 

 The sequence
  is bounded, so it contains a convergent subsequence. Note that the eigenvector corresponding to the dominant eigenvalue is only unique up to a scalar, so although the sequence  may not converge,
  is nearly an eigenvector of ''A'' for large k.
 
 Alternatively, if ''A'' is [[diagonalizable]], then the following proof yields the same result
 
 Let λ1, λ2, …, λ''m'' be the m eigenvalues (counted with multiplicity) of A and let ''v''1, ''v''2, …, ''v''''m'' be the corresponding eigenvectors.  Suppose that  is the dominant eigenvalue, so that  for .
 
 The initial vector  can be written:
 :
 If  is chosen randomly (with uniform probability), then ''c''1 ≠ 0 with [[Almost surely|probability 1]].  Now,
 :
 
 The expression within parentheses converges to  because  for . On the other hand, we have
 :
 Therefore,  converges to (a multiple of) the eigenvector . The convergence is [[geometric sequence|geometric]], with ratio
 :
 where  denotes the second dominant eigenvalue. Thus, the method converges slowly if there is an eigenvalue close in magnitude to the dominant eigenvalue.
 
 ==Applications==
 Although the power iteration method approximates only one eigenvalue of a matrix, it remains useful for certain [[computational problem]]s. For instance, [[Google]] uses it to calculate the [[PageRank]] of documents in their search engine,{{cite news|author=Ipsen, Ilse, and Rebecca M. Wills|url=http://www4.ncsu.edu/~ipsen/ps/slides_imacs.pdf|title=7th IMACS International Symposium on Iterative Methods in Scientific Computing|location=Fields Institute, Toronto, Canada|date=5–8 May 2005}} and [[Twitter]] uses it to show users recommendations of who to follow.Pankaj Gupta, Ashish Goel, Jimmy Lin, Aneesh Sharma, Dong Wang, and Reza Bosagh Zadeh [http://dl.acm.org/citation.cfm?id=2488433 WTF: The who-to-follow system at Twitter], Proceedings of the 22nd international conference on World Wide Web For matrices that are well-conditioned and as sparse as the Web matrix, the power iteration method can be more efficient than other methods of finding the dominant eigenvector.
 
 Some of the more advanced eigenvalue algorithms can be understood as variations of the power iteration. For instance, the [[inverse iteration]] method applies power iteration to the matrix . Other algorithms look at the whole subspace generated by the vectors . This subspace is known as the [[Krylov subspace]]. It can be computed by [[Arnoldi iteration]] or [[Lanczos iteration]].
 Another variation of the power method that simultaneously gives n eigenvalues and eigenfunctions,
 as well as accelerated convergence as  is
 "Multiple extremal eigenpairs by the power method"
 in the Journal of Computational Physics
 Volume 227 Issue 19, October, 2008,
 Pages 8508-8522 (Also see pdf below for Los Alamos National Laboratory report LA-UR-07-4046)
 
 ==See also==
 * [[Rayleigh quotient iteration]]
 * [[Inverse iteration]]
 
 ==References==
 {{Reflist}}
 
 ==External links==
 * [http://www.math.buffalo.edu/~pitman/courses/mth437/na2/node17.html Power method], part of lecture notes on numerical linear algebra by E. Bruce Pitman, State University of New York.
 * [http://math.fullerton.edu/mathews/n2003/PowerMethodMod.html Module for the Power Method]
 * [http://arxiv.org/pdf/0807.1261.pdf] Los Alamos report LA-UR-07-4046 ""Multiple extremal eigenpairs by the power method"
 
 {{Numerical linear algebra}}
 {{Use dmy dates|date=September 2010}}
 {{DEFAULTSORT:Power Iteration}}
 [[Category:Numerical linear algebra]]"




Richard von Mises and H. Pollaczek-Geiringer, Praktische Verfahren der Gleichungsauflösung, ZAMM - Zeitschrift für Angewandte Mathematik und Mechanik 9, 152-164 (1929).


