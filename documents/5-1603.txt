   Dyck language      Dyck language   In the theory of formal languages of computer science , mathematics , and linguistics , the Dyck language is the language consisting of balanced strings of square brackets [ and ]. It is important in the parsing of expressions that must have a correctly nested sequence of brackets, such as arithmetic or algebraic expressions. It is named after the mathematician Walther von Dyck .  Formal definition  Let    Σ  =   {   [  ,  ]   }      fragments  Σ    fragments  normal-{   fragments  normal-[  normal-,  normal-]   normal-}     \Sigma=\{[,]\}   be the alphabet consisting of the symbols [ and ] and let    Σ  *     superscript  normal-Σ     \Sigma^{*}   denote its Kleene closure . For any element    u  ∈   Σ  *       u   superscript  normal-Σ      u\in\Sigma^{*}   with length    |  u  |      u    |u|   we define partial functions      i  n  s  e  r  t   :      Σ  *   ×  ℕ   ∪   {  0  }    →   Σ  *       normal-:    i  n  s  e  r  t    normal-→       superscript  normal-Σ    ℕ    0     superscript  normal-Σ       insert:\Sigma^{*}\times\mathbb{N}\cup\{0\}\rightarrow\Sigma^{*}   and     d  e  l  e  t  e   :     Σ  *   ×  ℕ   →   Σ  *       normal-:    d  e  l  e  t  e    normal-→     superscript  normal-Σ    ℕ    superscript  normal-Σ       delete:\Sigma^{*}\times\mathbb{N}\rightarrow\Sigma^{*}   by      i  n  s  e  r  t   (  u  ,  j  )       i  n  s  e  r  t   u  j     insert(u,j)   is   u   u   u   with "    [  ]      []   " inserted into the   j   j   j   th position      d  e  l  e  t  e   (  u  ,  j  )       d  e  l  e  t  e   u  j     delete(u,j)   is   u   u   u   with "    [  ]      []   " deleted from the   j   j   j   th position  with the understanding that    i  n  s  e  r  t   (  u  ,  j  )       i  n  s  e  r  t   u  j     insert(u,j)   is undefined for    j  >   |  u  |       j    u     j>|u|   and    d  e  l  e  t  e   (  u  ,  j  )       d  e  l  e  t  e   u  j     delete(u,j)   is undefined if    j  >    |  u  |   -  2       j      u   2     j>|u|-2   . We define an equivalence relation    R   R   R   on    Σ  *     superscript  normal-Σ     \Sigma^{*}   as follows: for elements     a  ,  b   ∈   Σ  *        a  b    superscript  normal-Σ      a,b\in\Sigma^{*}   we have     (  a  ,  b  )   ∈  R       a  b   R    (a,b)\in R   if and only if there exists a finite sequence of applications of the    i  n  s  e  r  t      i  n  s  e  r  t    insert   and    d  e  l  e  t  e      d  e  l  e  t  e    delete   functions starting with   a   a   a   and ending with   b   b   b   , where the empty sequence is allowed. That the empty sequence is allowed accounts for the reflexivity of   R   R   R   . Symmetry  follows from the observation that any finite sequence of applications of    i  n  s  e  r  t      i  n  s  e  r  t    insert   to a string can be undone with a finite sequence of applications of    d  e  l  e  t  e      d  e  l  e  t  e    delete   . Transitivity is clear from the definition.  The equivalence relation partitions the language    Σ  *     superscript  normal-Σ     \Sigma^{*}   into equivalence classes. If we take   ϵ   ϵ   \epsilon   to denote the empty string, then the language corresponding to the equivalence class    Cl   (  ϵ  )      Cl  ϵ    \operatorname{Cl}(\epsilon)   is called the Dyck language .  Alternative definition  An alternative definition of the Dyck language can be formulated when we introduce the     i  m  b  a  l  a  n  c  e   :    Σ  *   →   (   ℕ  ∪   {  0  }    )       normal-:    i  m  b  a  l  a  n  c  e    normal-→   superscript  normal-Σ      ℕ   0       imbalance:\Sigma^{*}\rightarrow\left(\mathbb{N}\cup\{0\}\right)   function.       i  m  b  a  l  a  n  c  e   (  u  )    =     |  u  |   [   -    |  u  |   ]          i  m  b  a  l  a  n  c  e  u      subscript    u   normal-[    subscript    u   normal-]      imbalance(u)=|u|_{[}-|u|_{]}   for any    u  ∈   Σ  *       u   superscript  normal-Σ      u\in\Sigma^{*}   .  where     |  u  |   [     subscript    u   normal-[    |u|_{[}   and     |  u  |   ]     subscript    u   normal-]    |u|_{]}   are respectively the number of [ and ] in   u   u   u   . I.e.    i  m  b  a  l  a  n  c  e      i  m  b  a  l  a  n  c  e    imbalance   counts the imbalance of [ over ]. If    i  m  b  a  l  a  n  c  e   (  u  )       i  m  b  a  l  a  n  c  e  u    imbalance(u)   is positive then   u   u   u   has more [ than ].  Now, the Dyck language can be defined as the language      {   u  ∈   Σ  *    |    i  m  b  a  l  a  n  c  e   (  u  )    =   0  and  i  m  b  a  l  a  n  c  e   (  v  )    ≥   0  for all prefixes  v  of  u    }     conditional-set    u   superscript  normal-Σ           i  m  b  a  l  a  n  c  e  u     0  and  i  m  b  a  l  a  n  c  e  v          0  for all prefixes  v  of  u       \{u\in\Sigma^{*}|imbalance(u)=0\text{ and }imbalance(v)\geq 0\text{ for all %
 prefixes }v\text{ of }u\}     Properties   The Dyck language is closed under the operation of concatenation .  By treating    Σ  *     superscript  normal-Σ     \Sigma^{*}   as an algebraic monoid under concatenation we see that the monoid structure transfers onto the quotient      Σ  *   /  R       superscript  normal-Σ    R    \Sigma^{*}/R   , resulting in the syntactic monoid of the Dyck language . The class    Cl   (  ϵ  )      Cl  ϵ    \operatorname{Cl}(\epsilon)   will be denoted   1   1   1   .  The syntactic monoid of the Dyck language is not commutative : if    u  =  Cl   (   [  )       fragments  u   Cl   fragments  normal-(   fragments  normal-[  normal-)      u=\operatorname{Cl}([)   and    v  =  Cl   (  ]   )     fragments  v   Cl   fragments  normal-(  normal-]   normal-)    v=\operatorname{Cl}(])   then    u  v  =  Cl   (   [  ]   )   =  1  ≠  Cl   (  ]    [  )   =  v  u     fragments  u  v   Cl   fragments  normal-(   fragments  normal-[  normal-]   normal-)    1   Cl   fragments  normal-(  normal-]    fragments  normal-[  normal-)    v  u    uv=\operatorname{Cl}([])=1\neq\operatorname{Cl}(][)=vu   .  With the notation above,     u  v   =  1        u  v   1    uv=1   but neither   u   u   u   nor   v   v   v   are invertible in     Σ  *   /  R       superscript  normal-Σ    R    \Sigma^{*}/R   .  The syntactic monoid of the Dyck language is isomorphic to the bicyclic semigroup by virtue of the properties of    Cl   (   [  )       fragments  Cl   fragments  normal-(   fragments  normal-[  normal-)      \operatorname{Cl}([)   and    Cl   (  ]   )     fragments  Cl   fragments  normal-(  normal-]   normal-)    \operatorname{Cl}(])   described above.  By the Chomsky–Schützenberger representation theorem , any context-free language is a homomorphic image of the intersection of some regular language with a homomorphic preimage of the Dyck language on two brackets. 1  The Dyck language with two distinct types of brackets can be recognized in the complexity class     T   C  0       T   superscript  C  0     TC^{0}    . 2   Examples  For Example : As you move from left to right , insert a '[' for every times it goes up and a ']'for every times go down you end up with a string such as [[] ]. Two diagrams are connected if swapping one set of two adjacent brackets produces the other. i.e. in the top, [[ ]] is connected to [[[][]]] and vice versa by swapping the middle two. It's major uses are in combinatorics.  See also   Catalan number  Dyck congruence   Notes  References   A proof of the Chomsky Schützenberger theorem   "  Category:Formal languages     Kambites, Communications in Algebra Volume 37 Issue 1 (2009) 193-208 ↩  Barrington and Corbett, Information Processing Letters 32 (1989) 251-256 ↩     