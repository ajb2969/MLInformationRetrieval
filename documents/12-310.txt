   Director string      Director string   In mathematics , in the area of lambda calculus and computation , directors or director strings are a mechanism for keeping track of the free variables in a term . Loosely speaking, they can be understood as a kind of memoization for free variables; that is, as an optimization technique for rapidly locating the free variables in a term algebra or in a lambda expression. Director strings were introduced by Kennaway and Sleep in 1982 and further developed by Sinot, Fernández and Mackie 1 as a mechanism for understanding and controlling the computational complexity cost of beta reduction .  Motivation  In beta reduction, one defines the value of the expression on the left to be that on the right:       (  λ  x  .  E  )   y  ≡  E   [  x  :=  y  ]      fragments   fragments  normal-(  λ  x  normal-.  E  normal-)   y   E   fragments  normal-[  x  assign  y  normal-]     (\lambda x.E)y\equiv E[x:=y]\,   or     (  λ  x  .  E  )   y  ≡  E   [  x  /  y  ]      fragments   fragments  normal-(  λ  x  normal-.  E  normal-)   y   E   fragments  normal-[  x   y  normal-]     (\lambda x.E)y\equiv E[x/y]   (Replace all x in E (body) by y )  While this is a conceptually simple operation, the computational complexity of the step can be non-trivial: a naive algorithm would scan the expression E for all occurrences of the free variable x . Such an algorithm is clearly O ( n ) in the length of the expression E . Thus, one is motivated to somehow track the occurrences of the free variables in the expression. One may attempt to track the position of every free variable, wherever it may occur in the expression, but this can clearly become very costly in terms of storage; furthermore, it provides a level of detail that is not really needed. Director strings suggest that the correct model is to track free variables in a hierarchical fashion, by tracking their use in component terms.  Definition  Consider, for simplicity, a term algebra , that is, a collection of free variables, constants, and operators which may be freely combined. Assume that a term t takes the form      t  :  :=  f   (   t  1   ,   t  2   ,  …  ,   t  n   )      fragments  t  normal-:  assign  f   fragments  normal-(   subscript  t  1   normal-,   subscript  t  2   normal-,  normal-…  normal-,   subscript  t  n   normal-)     t::=f(t_{1},t_{2},\dots,t_{n})     where f is a function , of arity  n , with no free variables , and the    t  i     subscript  t  i    t_{i}   are terms that may or may not contain free variables. Let V denote the set of all free variables that may occur in the set of all terms. The director is then the map       σ  t   :   V  →   P   (   {  1  ,  2  ,  …  ,  n  }   )        normal-:   subscript  σ  t    normal-→  V    P   1  2  normal-…  n       \sigma_{t}:V\to P(\{1,2,\dots,n\})     from the free variables to the power set     P   (  X  )       P  X    P(X)   of the set    X  =   {  1  ,  2  ,  …  ,  n  }       X   1  2  normal-…  n     X=\{1,2,\dots,n\}   . The values taken by    σ  t     subscript  σ  t    \sigma_{t}   are simply a list of the indices of the    t  i     subscript  t  i    t_{i}   in which a given free variable occurs. Thus, for example, if a free variable    x  ∈  V      x  V    x\in V   occurs in    t  3     subscript  t  3    t_{3}   and    t  5     subscript  t  5    t_{5}   but in no other terms, then one has      σ  t    (  x  )    =   {  3  ,  5  }          subscript  σ  t   x    3  5     \sigma_{t}(x)=\{3,5\}   .  Thus, for every term    t  ∈  T      t  T    t\in T   in the set of all terms T , one maintains a function    σ  t     subscript  σ  t    \sigma_{t}   , and instead of working only with terms t , one works with pairs    (  t  ,   σ  t   )     t   subscript  σ  t     (t,\sigma_{t})   . Thus, the time complexity of finding the free variables in t is traded for the space complexity of maintaining a list of the terms in which a variable occurs.  General case  Although the above definition is formulated in terms of a term algebra , the general concept applies more generally, and can be defined both for combinatory algebras and for lambda calculus proper, specifically, within the framework of explicit substitution .  See also   Term rewrite system  Explicit substitution  Combinatory reduction system  Memoization   References     F.-R. Sinot. " Director Strings Revisited: A Generic Approach to the Efficient Representation of Free Variables in Higher-order Rewriting. " Journal of Logic and Computation  15 (2), pages 201-218, 2005.   "  Category:Lambda calculus  Category:Rewriting systems  Category:Software optimization     F.-R. Sinot, M. Fernández and I. Mackie. Efficient Reductions with Director Strings. In Proc. Rewriting Techniques and Applications . Springer LNCS vol 2706, 2003 ↩     