


Count-distinct problem




Count-distinct problem

In computer science, the count-distinct problem1 (also known in applied mathematics as the cardinality estimation problem) is the problem of finding the number of distinct elements in a data stream with repeated elements. This is a well-known problem with numerous applications. The elements might represent IP addresses of packets passing through a router, unique visitors to a web site, elements in a large database, motifs in a DNA sequence, or elements of RFID/sensor networks.
Formal definition

Instance: A stream of elements 
 
 
 
  with repetitions, and an integer 
 
 
 
 . Let 
 
 
 
  be the number of distinct elements, namely 
 
 
 
 , and let these elements be 
 
 
 
 .
 
Objective: Find an estimate 
 
 
 
  of 
 
 
 
  using only 
 
 
 
  storage units, where 
 
 
 
 .
 

An example of an instance for the cardinality estimation problem is the stream
 
 
 
 . For this instance, 
 
 
 
 .
Naive solution
The naive solution to the problem is as follows:
 Initialize a counter, 

, to zero, 

.
 Initialize an efficient dictionary data structure, 

, such as hash table or search tree in which insertion and membership can be performed quickly.  
 For each element 

, a membership query is issued. 
 If 

 is not a member of 

 (

)
   Add 

 to 


   Increase 

 by one, 


 Otherwise (

) do nothing.
 Output 

.
As long as the number of distinct elements is not too big, 
 
 
 
  fits in main memory and an exact answer can be retrieved. However, this approach does not scale for bounded storage, or if the computation performed for each element 
 
 
 
  should be minimized. In such a case, several streaming algorithms have been proposed which use a fixed number of storage units.
Streaming algorithms
To handle the bounded storage constraint, streaming algorithms use a randomization to produce a non-exact estimation of the distinct number of elements, 
 
 
 
 . State-of-the-art estimators hash every element 
 
 
 
  into a low dimensional data sketch using a hash function, 
 
 
 
 . The different techniques can be classified according to the data sketches they store.
Min/max sketches
Min/max sketches 2 3 store only the minimum/maximum hashed values. Examples of known min/max sketch estimators: Chassaing et al. 4 presents max sketch which is the minimum-variance unbiased estimator for the problem. The continuous max sketches estimator 5 is the maximum likelihood estimator. The estimator of choice in practice is the HyperLogLog algorithm.6
The intuition behind such estimators is that each sketch carries information about the desired quantity. For example, when every element 
 
 
 
  is associated with a uniform RV, 
 
 
 
 , the expected minimum value of 
 
 
 
  is 
 
 
 
 . The hash function guarantees that 
 
 
 
  is identical for all the appearances of 
 
 
 
 . Thus, the existence of duplicates does not affect the value of the extreme order statistics.
There are other estimation techniques other than min/max sketches. The first paper on count-distinct estimation by Flajolet et al. 7 describes a bit pattern sketch. In this case, the elements are hashed into a bit vector and the sketch holds the logical OR of all hashed values. The first asymptotically space- and time-optimal algorithm for this problem was given by Daniel M. Kane, Jelani Nelson, and David P. Woodruff.8
Bottom-m sketches
Bottom-m sketches 9 are a generalization of min sketches, which maintain the 
 
 
 
  minimal values, where 
 
 
 
 . See Cosma et al.10 for a theoretical overview of count-distinct estimation algorithms, and Metwally 11 for a practical overview with comparative simulation results.
Weighted count-distinct problem
In its weighted version, each element is associated with a weight and the goal is to estimate the total sum of weights. Formally,

Instance: A stream of weighted elements 
 
 
 
  with repetitions, and an integer 
 
 
 
 . Let 
 
 
 
  be the number of distinct elements, namely 
 
 
 
 , and let these elements be 
 
 
 
 . Finally, let 
 
 
 
  be the weight of 
 
 
 
 .
 
Objective: Find an estimate 
 
 
 
  of 
 
 
 
  using only 
 
 
 
  storage units, where 
 
 
 
 .
 

An example of an instance for the weighted problem is
 
 
 
 . For this instance, 
 
 
 
 , the weights are 
 
 
 
  and 
 
 
 
 .
As an application example, 
 
 
 
  could be IP packets received by a server. Each packet belongs to one of 
 
 
 
  IP flows 
 
 
 
 . The weight 
 
 
 
  can be the load imposed by flow 
 
 
 
  on the server. Thus, 
 
 
 
  represents the total load imposed on the server by all the flows to which packets 
 
 
 
  belong.
Solving the weighted count-distinct problem
Any extreme order statistics estimator (min/max sketches) for the unweighted problem can be generalized to an estimator for the weighted problem .12 For example, the weighted estimator proposed by Cohen et al.13 can be obtained when the continuous max sketches estimator is extended to solve the weighted problem. In particular, the HyperLogLog algorithm 14 can be extended to solve the weighted problem. The extended HyperLogLog algorithm offers the best performance, in terms of statistical accuracy and memory usage, among all the other known algorithms for the weighted problem.
See also

HyperLogLog
Count–min sketch
Streaming algorithm
Maximum likelihood
Minimum-variance unbiased estimator

References
"
Category:Statistical algorithms





















