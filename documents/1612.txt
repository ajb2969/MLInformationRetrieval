   Latent Dirichlet allocation      Latent Dirichlet allocation   In natural language processing , Latent Dirichlet allocation ( LDA ) is a generative model that allows sets of observations to be explained by unobserved groups that explain why some parts of the data are similar. For example, if observations are words collected into documents, it posits that each document is a mixture of a small number of topics and that each word's creation is attributable to one of the document's topics. LDA is an example of a topic model and was first presented as a graphical model for topic discovery by David Blei , Andrew Ng , and Michael Jordan in 2003. 1  Topics in LDA  In LDA, each document may be viewed as a mixture of various topics. This is similar to probabilistic latent semantic analysis (pLSA), except that in LDA the topic distribution is assumed to have a Dirichlet  prior . In practice, this results in more reasonable mixtures of topics in a document. It has been noted, however, that the pLSA model is equivalent to the LDA model under a uniform Dirichlet prior distribution. 2  For example, an LDA model might have topics that can be classified as CAT_related and DOG_related . A topic has probabilities of generating various words, such as milk , meow , and kitten , which can be classified and interpreted by the viewer as "CAT_related". Naturally, the word cat itself will have high probability given this topic. The DOG_related topic likewise has probabilities of generating each word: puppy , bark , and bone might have high probability. Words without special relevance, such as the (see function word ), will have roughly even probability between classes (or can be placed into a separate category). A topic is not strongly defined, neither semantically nor epistemologically . It is identified on the basis of supervised labeling and (manual) pruning on the basis of their likelihood of co-occurrence. A lexical word may occur in several topics with a different probability, however, with a different typical set of neighboring words in each topic.  Each document is assumed to be characterized by a particular set of topics. This is akin to the standard bag of words model assumption, and makes the individual words exchangeable .  Intuitive Explanation 3  Suppose you have the following set of sentences:   I eat  fish and vegetables .  Fish are pets .  My kitten  eats fish .   LDA is a technique that automatically discovers topics that these documents contain.  Given the above sentences, LDA might classify the bold words under the Topic F , which we might label as “ food “. Similarly, words in italics might be classified under a separate Topic P , which we might label as “ pets “. LDA defines each topic as a bag of words, and you have to label the topics as you deem fit.  There are 2 benefits from LDA defining topics on a word-level:  1) We can infer the content spread of each sentence by a word count:   Sentence 1 : 100% Topic F  Sentence 2 : 100% Topic P  Sentence 3 : 33% Topic P and 67% Topic F   2) We can derive the proportions that each word constitutes in given topics. For example, Topic F might comprise words in the following proportions: 40% eat, 40% fish, 20% vegetables, …  LDA achieves the above results in 3 steps.  To illustrate these steps, imagine that you are now discovering topics in documents instead of sentences. Imagine you have 2 documents with the following words in Figure 1.  (Figure)  Figure 1: Classifying these documents into topics   Step 1 You tell the algorithm how many topics you think there are. You can either use an informed estimate (e.g. results from a previous analysis), or simply trial-and-error. In trying different estimates, you may pick the one that generates topics to your desired level of interpretability, or the one yielding the highest statistical certainty (i.e. log likelihood). In our example above, the number of topics might be inferred just by eyeballing the documents.  Step 2 The algorithm will assign every word to a temporary topic. Topic assignments are temporary as they will be updated in Step 3. Temporary topics are assigned to each word in a semi-random manner (according to a Dirichlet distribution, to be exact). This also means that if a word appears twice, each word may be assigned to different topics. Note that in analyzing actual documents, function words (e.g. “the”, “and”, “my”) are removed and not assigned to any topics.  Step 3  (iterative) The algorithm will check and update topic assignments, looping through each word in every document. For each word, its topic assignment is updated based on two criteria:   How prevalent is that word across topics?   (Figure)  Words in Doc Y are assigned to Topic F and Topic P in a 50-50 ratio    How prevalent are topics in the document?   To understand how these two criteria work, imagine that we are now checking the topic assignment for the word “fish” in Doc Y.   How prevalent is that word across topics? Since “fish” words across both documents comprise nearly half of remaining Topic F words but 0% of remaining Topic P words, a “fish” word picked at random would more likely be about Topic F.    How prevalent are topics in the document? Since the words in Doc Y are assigned to Topic F and Topic P in a 50-50 ratio, the remaining “fish” word seems equally likely to be about either topic.   Weighing conclusions from the two criteria, we would assign the “fish” word of Doc Y to Topic F. Doc Y might then be a document on what to feed kittens.  The process of checking topic assignment is repeated for each word in every document, cycling through the entire collection of documents multiple times. This iterative updating is the key feature of LDA that generates a final solution with coherent topics.  For an example application of topic modeling on news articles, see Automated Biography of a Nation .  Model  With plate notation , the dependencies among the many variables can be captured concisely. The boxes are “plates” representing replicates. The outer plate represents documents, while the inner plate represents the repeated choice of topics and words within a document. M denotes the number of documents, N the number of words in a document. Thus:   α is the parameter of the Dirichlet prior on the per-document topic distributions,  β is the parameter of the Dirichlet prior on the per-topic word distribution,      θ  i     subscript  θ  i    \theta_{i}   is the topic distribution for document i ,      ϕ  k     subscript  ϕ  k    \phi_{k}   is the word distribution for topic k ,      z   i  j      subscript  z    i  j     z_{ij}   is the topic for the j th word in document i , and      w   i  j      subscript  w    i  j     w_{ij}   is the specific word.   (Figure)  Plate notation for smoothed LDA   The    w   i  j      subscript  w    i  j     w_{ij}   are the only observable variables , and the other variables are latent variables . Mostly, the basic LDA model will be extended to a smoothed version to gain better results . The plate notation is shown on the right, where K denotes the number of topics considered in the model and:     ϕ   ϕ   \phi   is a K*V ( V is the dimension of the vocabulary) Markov matrix (transition matrix), and each row of which denotes the word distribution of a topic.  The generative process is as follows. Documents are represented as random mixtures over latent topics, where each topic is characterized by a distribution over words. LDA assumes the following generative process for a corpus   D   D   D   consisting of   M   M   M   documents each of length    N  i     subscript  N  i    N_{i}   :  1. Choose      θ  i    ∼   Dir   (  α  )       similar-to   subscript  θ  i     Dir  α     \theta_{i}\,\sim\,\mathrm{Dir}(\alpha)   , where    i  ∈   {  1  ,  …  ,  M  }       i   1  normal-…  M     i\in\{1,\dots,M\}   and    Dir   (  α  )       Dir  α    \mathrm{Dir}(\alpha)   is the Dirichlet distribution for parameter   α   α   \alpha     2. Choose      ϕ  k    ∼   Dir   (  β  )       similar-to   subscript  ϕ  k     Dir  β     \phi_{k}\,\sim\,\mathrm{Dir}(\beta)   , where    k  ∈   {  1  ,  …  ,  K  }       k   1  normal-…  K     k\in\{1,\dots,K\}     3. For each of the word positions    i  ,  j     i  j    i,j   , where    j  ∈   {  1  ,  …  ,   N  i   }       j   1  normal-…   subscript  N  i      j\in\{1,\dots,N_{i}\}   , and    i  ∈   {  1  ,  …  ,  M  }       i   1  normal-…  M     i\in\{1,\dots,M\}      (a) Choose a topic       z   i  ,  j     ∼   Multinomial   (   θ  i   )     .     similar-to   subscript  z   i  j      Multinomial   subscript  θ  i      z_{i,j}\,\sim\,\mathrm{Multinomial}(\theta_{i}).       (b) Choose a word      w   i  ,  j     ∼   Multinomial   (   ϕ   z   i  ,  j     )       similar-to   subscript  w   i  j      Multinomial   subscript  ϕ   subscript  z   i  j        w_{i,j}\,\sim\,\mathrm{Multinomial}(\phi_{z_{i,j}})   .   (Note that the Multinomial distribution here refers to the Multinomial with only one trial. It is formally equivalent to the categorical distribution .)  The lengths    N  i     subscript  N  i    N_{i}   are treated as independent of all the other data generating variables (   q   q   q   and   z   z   z   ). The subscript is often dropped, as in the plate diagrams shown here.  Mathematical definition  A formal description of smoothed LDA is as follows:      Definition of variables in the model   Variable   Type   Meaning        K   K   K      integer   number of topics (e.g. 50)        V   V   V      integer   number of words in the vocabulary (e.g. 50,000 or 1,000,000)        M   M   M      integer   number of documents         N   d  =   1  …  M       subscript  N    d    1  normal-…  M      N_{d=1\dots M}      integer   number of words in document d        N   N   N      integer   total number of words in all documents; sum of all    N  d     subscript  N  d    N_{d}   values, i.e.    N  =    ∑   d  =  1   M    N  d        N    superscript   subscript     d  1    M    subscript  N  d      N=\sum_{d=1}^{M}N_{d}            α   k  =   1  …  K       subscript  α    k    1  normal-…  K      \alpha_{k=1\dots K}      positive real   prior weight of topic k in a document; usually the same for all topics; normally a number less than 1, e.g. 0.1, to prefer sparse topic distributions, i.e. few topics per document        𝜶   𝜶   \boldsymbol{\alpha}      K -dimension vector of positive reals   collection of all    α  k     subscript  α  k    \alpha_{k}   values, viewed as a single vector         β   w  =   1  …  V       subscript  β    w    1  normal-…  V      \beta_{w=1\dots V}      positive real   prior weight of word w in a topic; usually the same for all words; normally a number much less than 1, e.g. 0.001, to strongly prefer sparse word distributions, i.e. few words per topic        𝜷   𝜷   \boldsymbol{\beta}      V -dimension vector of positive reals   collection of all    β  w     subscript  β  w    \beta_{w}   values, viewed as a single vector         ϕ    k  =   1  …  K    ,   w  =   1  …  V        subscript  ϕ   formulae-sequence    k    1  normal-…  K      w    1  normal-…  V       \phi_{k=1\dots K,w=1\dots V}      probability (real number between 0 and 1)   probability of word w occurring in topic k         ϕ   k  =   1  …  K       subscript  bold-italic-ϕ    k    1  normal-…  K      \boldsymbol{\phi}_{k=1\dots K}      V -dimension vector of probabilities, which must sum to 1   distribution of words in topic k         θ    d  =   1  …  M    ,   k  =   1  …  K        subscript  θ   formulae-sequence    d    1  normal-…  M      k    1  normal-…  K       \theta_{d=1\dots M,k=1\dots K}      probability (real number between 0 and 1)   probability of topic k occurring in document d for any given word         𝜽   d  =   1  …  M       subscript  𝜽    d    1  normal-…  M      \boldsymbol{\theta}_{d=1\dots M}      K -dimension vector of probabilities, which must sum to 1   distribution of topics in document d         z    d  =   1  …  M    ,   w  =   1  …   N  d         subscript  z   formulae-sequence    d    1  normal-…  M      w    1  normal-…   subscript  N  d        z_{d=1\dots M,w=1\dots N_{d}}      integer between 1 and K   identity of topic of word w in document d        𝐙   𝐙   \mathbf{Z}      N -dimension vector of integers between 1 and K   identity of topic of all words in all documents         w    d  =   1  …  M    ,   w  =   1  …   N  d         subscript  w   formulae-sequence    d    1  normal-…  M      w    1  normal-…   subscript  N  d        w_{d=1\dots M,w=1\dots N_{d}}      integer between 1 and V   identity of word w in document d        𝐖   𝐖   \mathbf{W}      N -dimension vector of integers between 1 and V   identity of all words in all documents     We can then mathematically describe the random variables as follows:         ϕ   k  =   1  …  K       ∼      Dirichlet  V    (  𝜷  )         𝜽   d  =   1  …  M       ∼      Dirichlet  K    (  𝜶  )         z    d  =   1  …  M    ,   w  =   1  …   N  d         ∼      Categorical  K    (   𝜽  d   )         w    d  =   1  …  M    ,   w  =   1  …   N  d         ∼      Categorical  V    (   ϕ   z   d  w     )           subscript  bold-italic-ϕ    k    1  normal-…  K     similar-to    subscript  Dirichlet  V   𝜷      subscript  𝜽    d    1  normal-…  M     similar-to    subscript  Dirichlet  K   𝜶      subscript  z   formulae-sequence    d    1  normal-…  M      w    1  normal-…   subscript  N  d       similar-to    subscript  Categorical  K    subscript  𝜽  d       subscript  w   formulae-sequence    d    1  normal-…  M      w    1  normal-…   subscript  N  d       similar-to    subscript  Categorical  V    subscript  bold-italic-ϕ   subscript  z    d  w         \begin{array}[]{lcl}\boldsymbol{\phi}_{k=1\dots K}&\sim&\operatorname{%
 Dirichlet}_{V}(\boldsymbol{\beta})\\
 \boldsymbol{\theta}_{d=1\dots M}&\sim&\operatorname{Dirichlet}_{K}(\boldsymbol%
 {\alpha})\\
 z_{d=1\dots M,w=1\dots N_{d}}&\sim&\operatorname{Categorical}_{K}(\boldsymbol{%
 \theta}_{d})\\
 w_{d=1\dots M,w=1\dots N_{d}}&\sim&\operatorname{Categorical}_{V}(\boldsymbol{%
 \phi}_{z_{dw}})\\
 \end{array}     Inference  Learning the various distributions (the set of topics, their associated word probabilities, the topic of each word, and the particular topic mixture of each document) is a problem of Bayesian inference . The original paper used a variational Bayes approximation of the posterior distribution ; 4 alternative inference techniques use Gibbs sampling 5 and expectation propagation . 6  Following is the derivation of the equations for collapsed Gibbs sampling , which means   φ   φ   \varphi   s and   θ   θ   \theta   s will be integrated out. For simplicity, in this derivation the documents are all assumed to have the same length   N   N   N   . The derivation is equally valid if the document lengths vary.  According to the model, the total probability of the model is:      P   (  𝑾  ,  𝒁  ,  𝜽  ,  𝝋  ;  α  ,  β  )   =   ∏   i  =  1   K   P   (   φ  i   ;  β  )    ∏   j  =  1   M   P   (   θ  j   ;  α  )    ∏   t  =  1   N   P   (   Z   j  ,  t    |   θ  j   )   P   (   W   j  ,  t    |   φ   Z   j  ,  t     )   ,     fragments  P   fragments  normal-(  W  normal-,  Z  normal-,  θ  normal-,  φ  normal-;  α  normal-,  β  normal-)     superscript   subscript  product    i  1    K   P   fragments  normal-(   subscript  φ  i   normal-;  β  normal-)    superscript   subscript  product    j  1    M   P   fragments  normal-(   subscript  θ  j   normal-;  α  normal-)    superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  Z   j  t    normal-|   subscript  θ  j   normal-)   P   fragments  normal-(   subscript  W   j  t    normal-|   subscript  φ   subscript  Z   j  t     normal-)   normal-,    P(\boldsymbol{W},\boldsymbol{Z},\boldsymbol{\theta},\boldsymbol{\varphi};%
 \alpha,\beta)=\prod_{i=1}^{K}P(\varphi_{i};\beta)\prod_{j=1}^{M}P(\theta_{j};%
 \alpha)\prod_{t=1}^{N}P(Z_{j,t}|\theta_{j})P(W_{j,t}|\varphi_{Z_{j,t}}),     where the bold-font variables denote the vector version of the variables. First of all,   𝝋   𝝋   \boldsymbol{\varphi}   and   𝜽   𝜽   \boldsymbol{\theta}   need to be integrated out.       P  ;   (  𝒁  ,  𝑾  ;  α  ,  β  )    =     ∫  𝜽       ∫  𝝋     P   (  𝑾  ,  𝒁  ,  𝜽  ,  𝝋  ;  α  ,  β  )   d   𝝋   d  𝜽          P   𝒁  𝑾  α  β      subscript   𝜽     subscript   𝝋     P   𝑾  𝒁  𝜽  𝝋  α  β   d  𝝋  d  𝜽       \displaystyle P;(\boldsymbol{Z},\boldsymbol{W};\alpha,\beta)=\int_{\boldsymbol%
 {\theta}}\int_{\boldsymbol{\varphi}}P(\boldsymbol{W},\boldsymbol{Z},%
 \boldsymbol{\theta},\boldsymbol{\varphi};\alpha,\beta)\,d\boldsymbol{\varphi}%
 \,d\boldsymbol{\theta}     All the   θ   θ   \theta   s are independent to each other and the same to all the   φ   φ   \varphi   s. So we can treat each   θ   θ   \theta   and each   φ   φ   \varphi   separately. We now focus only on the   θ   θ   \theta   part.       ∫  𝜽    ∏   j  =  1   M   P   (   θ  j   ;  α  )    ∏   t  =  1   N   P   (   Z   j  ,  t    ∣   θ  j   )   d  𝜽  =   ∏   j  =  1   M    ∫   θ  j    P   (   θ  j   ;  α  )    ∏   t  =  1   N   P   (   Z   j  ,  t    ∣   θ  j   )   d   θ  j   .     fragments   subscript   𝜽    superscript   subscript  product    j  1    M   P   fragments  normal-(   subscript  θ  j   normal-;  α  normal-)    superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  Z   j  t    normal-∣   subscript  θ  j   normal-)   d  θ    superscript   subscript  product    j  1    M    subscript    subscript  θ  j    P   fragments  normal-(   subscript  θ  j   normal-;  α  normal-)    superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  Z   j  t    normal-∣   subscript  θ  j   normal-)   d   subscript  θ  j   normal-.    \int_{\boldsymbol{\theta}}\prod_{j=1}^{M}P(\theta_{j};\alpha)\prod_{t=1}^{N}P(%
 Z_{j,t}\mid\theta_{j})d\boldsymbol{\theta}=\prod_{j=1}^{M}\int_{\theta_{j}}P(%
 \theta_{j};\alpha)\prod_{t=1}^{N}P(Z_{j,t}\mid\theta_{j})\,d\theta_{j}.     We can further focus on only one   θ   θ   \theta   as the following:       ∫   θ  j    P   (   θ  j   ;  α  )    ∏   t  =  1   N   P   (   Z   j  ,  t    ∣   θ  j   )   d   θ  j   .     fragments   subscript    subscript  θ  j    P   fragments  normal-(   subscript  θ  j   normal-;  α  normal-)    superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  Z   j  t    normal-∣   subscript  θ  j   normal-)   d   subscript  θ  j   normal-.    \int_{\theta_{j}}P(\theta_{j};\alpha)\prod_{t=1}^{N}P(Z_{j,t}\mid\theta_{j})\,%
 d\theta_{j}.     Actually, it is the hidden part of the model for the    j   t  h      superscript  j    t  h     j^{th}   document. Now we replace the probabilities in the above equation by the true distribution expression to write out the explicit equation.        ∫   θ  j     P   (   θ  j   ;  α  )     ∏   t  =  1   N    P   (   Z   j  ,  t    ∣   θ  j   )   d   θ  j   =     fragments   subscript    subscript  θ  j    P   fragments  normal-(   subscript  θ  j   normal-;  α  normal-)    superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  Z   j  t    normal-∣   subscript  θ  j   normal-)   d   subscript  θ  j      \displaystyle\int_{\theta_{j}}P(\theta_{j};\alpha)\prod_{t=1}^{N}P(Z_{j,t}\mid%
 \theta_{j})\,d\theta_{j}=     Let    n   j  ,  r   i     superscript   subscript  n   j  r    i    n_{j,r}^{i}   be the number of word tokens in the    j   t  h      superscript  j    t  h     j^{th}   document with the same word symbol (the    r   t  h      superscript  r    t  h     r^{th}   word in the vocabulary) assigned to the    i   t  h      superscript  i    t  h     i^{th}   topic. So,    n   j  ,  r   i     superscript   subscript  n   j  r    i    n_{j,r}^{i}   is three dimensional. If any of the three dimensions is not limited to a specific value, we use a parenthesized point    (  ⋅  )    normal-⋅   (\cdot)   to denote. For example,    n   j  ,   (  ⋅  )    i     superscript   subscript  n   j  normal-⋅    i    n_{j,(\cdot)}^{i}   denotes the number of word tokens in the    j   t  h      superscript  j    t  h     j^{th}   document assigned to the    i   t  h      superscript  i    t  h     i^{th}   topic. Thus, the right most part of the above equation can be rewritten as:       ∏   t  =  1   N   P   (   Z   j  ,  t    ∣   θ  j   )   =   ∏   i  =  1   K    θ   j  ,  i    n   j  ,   (  ⋅  )    i    .     fragments   superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  Z   j  t    normal-∣   subscript  θ  j   normal-)     superscript   subscript  product    i  1    K    superscript   subscript  θ   j  i     superscript   subscript  n   j  normal-⋅    i    normal-.    \prod_{t=1}^{N}P(Z_{j,t}\mid\theta_{j})=\prod_{i=1}^{K}\theta_{j,i}^{n_{j,(%
 \cdot)}^{i}}.     So the    θ  j     subscript  θ  j    \theta_{j}   integration formula can be changed to:        ∫   θ  j         Γ   (    ∑   i  =  1   K    α  i    )      ∏   i  =  1   K    Γ   (   α  i   )          ∏   i  =  1   K      θ   j  ,  i     α  i   -  1       ∏   i  =  1   K       θ   j  ,  i    n   j  ,   (  ⋅  )    i     d   θ  j            subscript    subscript  θ  j          normal-Γ    superscript   subscript     i  1    K    subscript  α  i       superscript   subscript  product    i  1    K     normal-Γ   subscript  α  i        superscript   subscript  product    i  1    K      superscript   subscript  θ   j  i       subscript  α  i   1      superscript   subscript  product    i  1    K      superscript   subscript  θ   j  i     superscript   subscript  n   j  normal-⋅    i    d   subscript  θ  j          \displaystyle\int_{\theta_{j}}\frac{\Gamma\bigl(\sum_{i=1}^{K}\alpha_{i}\bigr)%
 }{\prod_{i=1}^{K}\Gamma(\alpha_{i})}\prod_{i=1}^{K}\theta_{j,i}^{\alpha_{i}-1}%
 \prod_{i=1}^{K}\theta_{j,i}^{n_{j,(\cdot)}^{i}}\,d\theta_{j}     Clearly, the equation inside the integration has the same form as the Dirichlet distribution . According to the Dirichlet distribution ,        ∫   θ  j       Γ   (     ∑   i  =  1   K    n   j  ,   (  ⋅  )    i    +   α  i    )      ∏   i  =  1   K    Γ   (    n   j  ,   (  ⋅  )    i   +   α  i    )        ∏   i  =  1   K      θ   j  ,  i      n   j  ,   (  ⋅  )    i   +   α  i    -  1     d   θ  j       =  1.        subscript    subscript  θ  j          normal-Γ      superscript   subscript     i  1    K    superscript   subscript  n   j  normal-⋅    i     subscript  α  i       superscript   subscript  product    i  1    K     normal-Γ     superscript   subscript  n   j  normal-⋅    i    subscript  α  i         superscript   subscript  product    i  1    K      superscript   subscript  θ   j  i         superscript   subscript  n   j  normal-⋅    i    subscript  α  i    1    d   subscript  θ  j       1.    \int_{\theta_{j}}\frac{\Gamma\bigl(\sum_{i=1}^{K}n_{j,(\cdot)}^{i}+\alpha_{i}%
 \bigr)}{\prod_{i=1}^{K}\Gamma(n_{j,(\cdot)}^{i}+\alpha_{i})}\prod_{i=1}^{K}%
 \theta_{j,i}^{n_{j,(\cdot)}^{i}+\alpha_{i}-1}\,d\theta_{j}=1.     Thus,        ∫   θ  j     P   (   θ  j   ;  α  )     ∏   t  =  1   N    P   (   Z   j  ,  t    ∣   θ  j   )   d   θ  j   =    ∫   θ  j        Γ   (    ∑   i  =  1   K    α  i    )      ∏   i  =  1   K    Γ   (   α  i   )         ∏   i  =  1   K      θ   j  ,  i      n   j  ,   (  ⋅  )    i   +   α  i    -  1     d   θ  j      fragments   subscript    subscript  θ  j    P   fragments  normal-(   subscript  θ  j   normal-;  α  normal-)    superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  Z   j  t    normal-∣   subscript  θ  j   normal-)   d   subscript  θ  j     subscript    subscript  θ  j        normal-Γ    superscript   subscript     i  1    K    subscript  α  i       superscript   subscript  product    i  1    K     normal-Γ   subscript  α  i       superscript   subscript  product    i  1    K    superscript   subscript  θ   j  i         superscript   subscript  n   j  normal-⋅    i    subscript  α  i    1    d   subscript  θ  j     \displaystyle\int_{\theta_{j}}P(\theta_{j};\alpha)\prod_{t=1}^{N}P(Z_{j,t}\mid%
 \theta_{j})\,d\theta_{j}=\int_{\theta_{j}}\frac{\Gamma\bigl(\sum_{i=1}^{K}%
 \alpha_{i}\bigr)}{\prod_{i=1}^{K}\Gamma(\alpha_{i})}\prod_{i=1}^{K}\theta_{j,i%
 }^{n_{j,(\cdot)}^{i}+\alpha_{i}-1}\,d\theta_{j}     Now we turn our attentions to the   𝝋   𝝋   \boldsymbol{\varphi}   part. Actually, the derivation of the   𝝋   𝝋   \boldsymbol{\varphi}   part is very similar to the   𝜽   𝜽   \boldsymbol{\theta}   part. Here we only list the steps of the derivation:        ∫  𝝋      ∏   i  =  1   K    P   (   φ  i   ;  β  )     ∏   j  =  1   M      ∏   t  =  1   N    P   (   W   j  ,  t    ∣   φ   Z   j  ,  t     )   d  𝝋     fragments   subscript   𝝋    superscript   subscript  product    i  1    K   P   fragments  normal-(   subscript  φ  i   normal-;  β  normal-)    superscript   subscript  product    j  1    M    superscript   subscript  product    t  1    N   P   fragments  normal-(   subscript  W   j  t    normal-∣   subscript  φ   subscript  Z   j  t     normal-)   d  φ    \displaystyle\int_{\boldsymbol{\varphi}}\prod_{i=1}^{K}P(\varphi_{i};\beta)%
 \prod_{j=1}^{M}\prod_{t=1}^{N}P(W_{j,t}\mid\varphi_{Z_{j,t}})\,d\boldsymbol{\varphi}     For clarity, here we write down the final equation with both   ϕ   bold-italic-ϕ   \boldsymbol{\phi}   and   𝜽   𝜽   \boldsymbol{\theta}   integrated out:      P   (  𝒁  ,  𝑾  ;  α  ,  β  )       P   𝒁  𝑾  α  β     \displaystyle P(\boldsymbol{Z},\boldsymbol{W};\alpha,\beta)     The goal of Gibbs Sampling here is to approximate the distribution of    P   (  𝒁  ∣  𝑾  ;  α  ,  β  )      fragments  P   fragments  normal-(  Z  normal-∣  W  normal-;  α  normal-,  β  normal-)     P(\boldsymbol{Z}\mid\boldsymbol{W};\alpha,\beta)   . Since    P   (  𝑾  ;  α  ,  β  )       P   𝑾  α  β     P(\boldsymbol{W};\alpha,\beta)   is invariable for any of Z, Gibbs Sampling equations can be derived from    P   (  𝒁  ,  𝑾  ;  α  ,  β  )       P   𝒁  𝑾  α  β     P(\boldsymbol{Z},\boldsymbol{W};\alpha,\beta)   directly. The key point is to derive the following conditional probability:      P   (   Z   (  m  ,  n  )    ∣   𝒁   -   (  𝒎  ,  𝒏  )     ,  𝑾  ;  α  ,  β  )   =    P   (   Z   (  m  ,  n  )    ,   𝒁   -   (  𝒎  ,  𝒏  )     ,  𝑾  ;  α  ,  β  )     P   (   𝒁   -   (  𝒎  ,  𝒏  )     ,  𝑾  ;  α  ,  β  )     ,     fragments  P   fragments  normal-(   subscript  Z   m  n    normal-∣   subscript  𝒁     𝒎  𝒏     normal-,  W  normal-;  α  normal-,  β  normal-)        P    subscript  Z   m  n     subscript  𝒁     𝒎  𝒏     𝑾  α  β      P    subscript  𝒁     𝒎  𝒏     𝑾  α  β     normal-,    P(Z_{(m,n)}\mid\boldsymbol{Z_{-(m,n)}},\boldsymbol{W};\alpha,\beta)=\frac{P(Z_%
 {(m,n)},\boldsymbol{Z_{-(m,n)}},\boldsymbol{W};\alpha,\beta)}{P(\boldsymbol{Z_%
 {-(m,n)}},\boldsymbol{W};\alpha,\beta)},     where    Z   (  m  ,  n  )      subscript  Z   m  n     Z_{(m,n)}   denotes the   Z   Z   Z   hidden variable of the    n   t  h      superscript  n    t  h     n^{th}   word token in the    m   t  h      superscript  m    t  h     m^{th}   document. And further we assume that the word symbol of it is the    v   t  h      superscript  v    t  h     v^{th}   word in the vocabulary.    𝒁   -   (  𝒎  ,  𝒏  )       subscript  𝒁     𝒎  𝒏      \boldsymbol{Z_{-(m,n)}}   denotes all the   Z   Z   Z   s but    Z   (  m  ,  n  )      subscript  Z   m  n     Z_{(m,n)}   . Note that Gibbs Sampling needs only to sample a value for    Z   (  m  ,  n  )      subscript  Z   m  n     Z_{(m,n)}   , according to the above probability, we do not need the exact value of    P   (   Z   m  ,  n    ∣   𝒁   -   (  𝒎  ,  𝒏  )     ,  𝑾  ;  α  ,  β  )      fragments  P   fragments  normal-(   subscript  Z   m  n    normal-∣   subscript  𝒁     𝒎  𝒏     normal-,  W  normal-;  α  normal-,  β  normal-)     P(Z_{m,n}\mid\boldsymbol{Z_{-(m,n)}},\boldsymbol{W};\alpha,\beta)   but the ratios among the probabilities that    Z   (  m  ,  n  )      subscript  Z   m  n     Z_{(m,n)}   can take value. So, the above equation can be simplified as:      P   (   Z   (  m  ,  n  )    =  k  ∣   𝒁   -   (  𝒎  ,  𝒏  )     ,  𝑾  ;  α  ,  β  )      fragments  P   fragments  normal-(   subscript  Z   m  n     k  normal-∣   subscript  𝒁     𝒎  𝒏     normal-,  W  normal-;  α  normal-,  β  normal-)     \displaystyle P(Z_{(m,n)}=k\mid\boldsymbol{Z_{-(m,n)}},\boldsymbol{W};\alpha,\beta)     Finally, let    n   j  ,  r    i  ,   -   (  m  ,  n  )        superscript   subscript  n   j  r     i     m  n       n_{j,r}^{i,-(m,n)}   be the same meaning as    n   j  ,  r   i     superscript   subscript  n   j  r    i    n_{j,r}^{i}   but with the    Z   (  m  ,  n  )      subscript  Z   m  n     Z_{(m,n)}   excluded. The above equation can be further simplified leveraging the property of gamma function . We first split the summation and then merge it back to obtain a   k   k   k   -independent summation, which could be dropped:     ∝   proportional-to   \displaystyle\propto     Note that the same formula is derived in the article on the Dirichlet-multinomial distribution , as part of a more general discussion of integrating Dirichlet distribution priors out of a Bayesian network .  Faster Sampling  Recent research has been focused on speeding up the inference of Latent Dirichlet Allocation to support capture of a massive number of topics in large number of documents. The update equation of the Collapsed Gibbs Sampler mentioned in the earlier section has a natural sparsity within it that can be taken advantage of. Intuitively, since each document only contains a subset of topics    K  d     subscript  K  d    K_{d}   , and a word also only appears in a subset of topics    K  w     subscript  K  w    K_{w}   , the above update equation could be rewritten to take advantage of this sparsity. 7     p   (   Z   d  ,  n    =  k  )   ∝    α  β     C  k   ¬  n    +   V  β     +     C  k  d   β     C  k   ¬  n    +   V  β     +     C  k  w    (   α  +   C  k  d    )      C  k   ¬  n    +   V  β        fragments  p   fragments  normal-(   subscript  Z   d  n     k  normal-)   proportional-to      α  β      superscript   subscript  C  k      n      V  β           superscript   subscript  C  k   d   β      superscript   subscript  C  k      n      V  β           superscript   subscript  C  k   w     α   superscript   subscript  C  k   d        superscript   subscript  C  k      n      V  β       p(Z_{d,n}=k)\propto\frac{\alpha\beta}{C_{k}^{\neg n}+V\beta}+\frac{C_{k}^{d}%
 \beta}{C_{k}^{\neg n}+V\beta}+\frac{C_{k}^{w}(\alpha+C_{k}^{d})}{C_{k}^{\neg n%
 }+V\beta}     In this equation, we have three terms, out of which two of them are sparse, and the other is small. We call these terms    a  ,  b     a  b    a,b   and   c   c   c   respectively. Now, if we normalize each term by summing over all the topics, we get:      A  =    ∑   k  =  1   K     α  β     C  k   ¬  n    +   V  β          A    superscript   subscript     k  1    K       α  β      superscript   subscript  C  k      n      V  β        A=\sum_{k=1}^{K}\frac{\alpha\beta}{C_{k}^{\neg n}+V\beta}       B  =    ∑   k  =  1   K      C  k  d   β     C  k   ¬  n    +   V  β          B    superscript   subscript     k  1    K        superscript   subscript  C  k   d   β      superscript   subscript  C  k      n      V  β        B=\sum_{k=1}^{K}\frac{C_{k}^{d}\beta}{C_{k}^{\neg n}+V\beta}       C  =    ∑   k  =  1   K      C  k  w    (   α  +   C  k  d    )      C  k   ¬  n    +   V  β          C    superscript   subscript     k  1    K        superscript   subscript  C  k   w     α   superscript   subscript  C  k   d        superscript   subscript  C  k      n      V  β        C=\sum_{k=1}^{K}\frac{C_{k}^{w}(\alpha+C_{k}^{d})}{C_{k}^{\neg n}+V\beta}     Here, we can see that   B   B   B   is a summation of the topics that appear in document   d   d   d   , and   C   C   C   is also a sparse summation of the topics that a word   w   w   w   has been observed by in the whole corpus.   A   A   A   on the other hand, is dense but because of the small values of   α   α   \alpha   &   β   β   \beta   , the value is very small compared to the two other terms.  Now, while sampling a topic, if we sample a random variable uniformly from    s  ∼  U   (  s  |  A  +  B  +  C  )      fragments  s  similar-to  U   fragments  normal-(  s  normal-|  A   B   C  normal-)     s\sim U(s|A+B+C)   , we can check which bucket our sample lands in. Since   A   A   A   is small, we are very unlikely to fall into this bucket; however, if we do fall into this bucket, sampling a topic takes O(K) time (same as the original Collapsed Gibbs Sampler). However, if we fall into the other two buckets, we only need to check a subset of topics if we keep record of the sparse topics. A topic can be sampled from the   B   B   B   bucket in    O   (   K  d   )       O   subscript  K  d     O(K_{d})   time, and a topic can be sampled in    O   (    K  w   +   K  d    )       O     subscript  K  w    subscript  K  d      O(K_{w}+K_{d})   time.  Notice that after sampling each topic, updating these buckets are all basic    O   (  1  )       O  1    O(1)   arithmetic operations.  Applications, extensions and similar techniques  Topic modeling is a classic problem in information retrieval . Related models and techniques are, among others, latent semantic indexing , independent component analysis , probabilistic latent semantic indexing , non-negative matrix factorization , and Gamma-Poisson distribution .  The LDA model is highly modular and can therefore be easily extended. The main field of interest is modeling relations between topics. This is achieved by using another distribution on the simplex instead of the Dirichlet. The Correlated Topic Model 8 follows this approach, inducing a correlation structure between topics by using the logistic normal distribution instead of the Dirichlet. Another extension is the hierarchical LDA (hLDA), 9 where topics are joined together in a hierarchy by using the nested Chinese restaurant process . LDA can also be extended to a corpus in which a document includes two types of information (e.g., words and names), as in the LDA-dual model . 10 Nonparametric extensions of LDA include the Hierarchical Dirichlet process mixture model, which allows the number of topics to be unbounded and learnt from data and the Nested Chinese Restaurant Process which allows topics to be arranged in a hierarchy whose structure is learnt from data.  As noted earlier, PLSA is similar to LDA. The LDA model is essentially the Bayesian version of PLSA model. The Bayesian formulation tends to perform better on small datasets because Bayesian methods can avoid overfitting the data. For very large datasets, the results of the two models tend to converge. One difference is that PLSA uses a variable   d   d   d   to represent a document in the training set. So in PLSA, when presented with a document the model hasn't seen before, we fix    Pr   (  w  ∣  z  )      Pr  w  z    \Pr(w\mid z)   —the probability of words under topics—to be that learned from the training set and use the same EM algorithm to infer    Pr   (  z  ∣  d  )      Pr  z  d    \Pr(z\mid d)   —the topic distribution under   d   d   d   . Blei argues that this step is cheating because you are essentially refitting the model to the new data.  Variations on LDA have been used to automatically put natural images into categories, such as "bedroom" or "forest", by treating an image as a document, and small patches of the image as words; 11 one of the variations is called Spatial Latent Dirichlet Allocation . 12  Recently, LDA has been also applied to bioinformatics context. 13  See also   Pachinko allocation  tf-idf   Notes  External links   jLDADMM A Java package for topic modeling on normal or short texts. jLDADMM includes implementations of LDA and the one-topic-per-document Dirichlet Multinomial Mixture model (i.e. mixture-of-unigrams). jLDADMM also provides an implementation for document clustering evaluation to compare topic models.  Extremely useful lecture for understanding LDA: LDA and Topic Modelling Video Lecture by David Blei or same lecture on YouTube  D. Mimno's LDA Bibliography An exhaustive list of LDA-related resources (incl. papers and some implementations)  Gensim , a Python+ NumPy implementation of online LDA for inputs larger than the available RAM.  topicmodels and lda are two R packages for LDA analysis.  "Text Mining with R" including LDA methods , video presentation to the October 2011 meeting of the Los Angeles R users group  MALLET Open source Java-based package from the University of Massachusetts-Amherst for topic modeling with LDA, also has an independently developed GUI, the Topic Modeling Tool  LDA in Mahout implementation of LDA using MapReduce on the Hadoop platform  Latent Dirichlet Allocation (LDA) Tutorial for the Infer.NET Machine Computing Framework Microsoft Research C# Machine Learning Framework  LDA in Spark : Since version 1.3.0, Apache Spark also features an implementation of LDA   "  Category:Statistical natural language processing  Category:Latent variable models  Category:Probabilistic models     ↩  ↩  "Layman's Explanation of Topic Modeling with LDA" ↩   ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  [ http://ieeexplore.ieee.org/xpl/login.jsp?tp =&arnumber;=6845514&url;=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6845514 "Latent Dirichlet Allocation based on Gibbs Sampling for gene function prediction"] ↩     