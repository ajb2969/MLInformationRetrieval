   MQV      MQV   MQV ( Menezes–Qu–Vanstone ) is an authenticated  protocol for key agreement based on the Diffie–Hellman scheme. Like other authenticated Diffie-Hellman schemes, MQV provides protection against an active attacker. The protocol can be modified to work in an arbitrary finite group , and, in particular, elliptic curve groups, where it is known as elliptic curve MQV (ECMQV) .  MQV was initially proposed by Menezes , Qu and Vanstone in 1995. It was modified with Law and Solinas in 1998. There are one-, two- and three-pass variants.  MQV is incorporated in the public-key standard IEEE P1363 .  Some variants of MQV are claimed in patents assigned to Certicom .  MQV has some weaknesses that were fixed by HMQV in 2005. 1 A few articles 2 3 offered alternative viewpoint.  ECMQV has been dropped from the National Security Agency's Suite B set of cryptographic standards.  __TOC__  Description  Alice has a key pair ( A,a ) with A her public key and a her private key and Bob has the key pair ( B,b ) with B his public key and b his private key.  In the following    R  ¯     normal-¯  R    \bar{R}   has the following meaning. Let    R  =   (  x  ,  y  )       R   x  y     R=(x,y)   be a point on an elliptic curve. Then     R  ¯   =    (    x   mod   2  L    )   +   2  L         normal-¯  R      modulo  x   superscript  2  L     superscript  2  L      \bar{R}=(x\,\bmod\,2^{L})+2^{L}   where    L  =   ⌈     ⌊    log  2   n   ⌋   +  1   2   ⌉       L            subscript   2   n    1   2      L=\left\lceil\frac{\lfloor\log_{2}n\rfloor+1}{2}\right\rceil   and n is the order of the used generator point P . So    R  ¯     normal-¯  R    \bar{R}   are the first L bits of the x coordinate of R .      Step   Operation       1   Alice generates a key pair ( X,x ) by generating randomly x and calculating X=xP with P a point on an elliptic curve.     2   Bob generates a key pair ( Y,y ) in the same way as Alice.     3   Now, Alice calculates     S  a   =   x  +    X  ¯   a         subscript  S  a     x     normal-¯  X   a      S_{a}=x+\bar{X}a   and sends X to Bob.     4   Bob calculates     S  b   =   y  +    Y  ¯   b         subscript  S  b     y     normal-¯  Y   b      S_{b}=y+\bar{Y}b   and sends Y to Alice.     5   Alice calculates    K  =    h  ⋅   S  a     (   Y  +    Y  ¯   B    )        K     normal-⋅  h   subscript  S  a      Y     normal-¯  Y   B       K=h\cdot S_{a}(Y+\bar{Y}B)   and Bob calculates    K  =    h  ⋅   S  b     (   X  +    X  ¯   A    )        K     normal-⋅  h   subscript  S  b      X     normal-¯  X   A       K=h\cdot S_{b}(X+\bar{X}A)   where h is the cofactor (see Elliptic curve cryptography: domain parameters ).     6   The communication of secret   K   K   K   was successful. A key for a symmetric-key algorithm can be derived from K .     Note: for the algorithm to be secure some checks have to be performed. See Hankerson et al.  Correctness  Bob calculates:    K  =    h  ⋅   S  b     (   X  +    X  ¯   A    )    =    h  ⋅   S  b     (    x  P   +    X  ¯   a  P    )    =    h  ⋅   S  b     (   x  +    X  ¯   a    )   P   =    h  ⋅   S  b     S  a   P         K     normal-⋅  h   subscript  S  b      X     normal-¯  X   A             normal-⋅  h   subscript  S  b        x  P      normal-¯  X   a  P             normal-⋅  h   subscript  S  b      x     normal-¯  X   a    P           normal-⋅  h   subscript  S  b     subscript  S  a   P      K=h\cdot S_{b}(X+\bar{X}A)=h\cdot S_{b}(xP+\bar{X}aP)=h\cdot S_{b}(x+\bar{X}a)%
 P=h\cdot S_{b}S_{a}P   .  Alice calculates:    K  =    h  ⋅   S  a     (   Y  +    Y  ¯   B    )    =    h  ⋅   S  a     (    y  P   +    Y  ¯   b  P    )    =    h  ⋅   S  a     (   y  +    Y  ¯   b    )   P   =    h  ⋅   S  b     S  a   P         K     normal-⋅  h   subscript  S  a      Y     normal-¯  Y   B             normal-⋅  h   subscript  S  a        y  P      normal-¯  Y   b  P             normal-⋅  h   subscript  S  a      y     normal-¯  Y   b    P           normal-⋅  h   subscript  S  b     subscript  S  a   P      K=h\cdot S_{a}(Y+\bar{Y}B)=h\cdot S_{a}(yP+\bar{Y}bP)=h\cdot S_{a}(y+\bar{Y}b)%
 P=h\cdot S_{b}S_{a}P   .  So the keys K are indeed the same with    K  =    h  ⋅   S  b     S  a   P       K     normal-⋅  h   subscript  S  b     subscript  S  a   P     K=h\cdot S_{b}S_{a}P     See also   Elliptic curve cryptography   References  Bibliography         External links   A Secure and Efficient Authenticated Diffie–Hellman Protocol by Sarr, Elbaz-Vincent, and Bajard  HMQV: A High-Performance Secure Diffie–Hellman Protocol by Hugo Krawczyk  Another look at HMQV  An Efficient Protocol for Authenticated Key Agreement  MQV and HMQV in IEEE P1363 (power point)   "  Category:Key-agreement protocols  Category:Elliptic curve cryptography     ↩  ↩  ↩     