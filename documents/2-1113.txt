   Domain relational calculus      Domain relational calculus   In computer science , domain relational calculus ( DRC ) is a calculus that was introduced by Michel Lacroix and Alain Pirotte as a declarative  database query language for the relational data model . 1  In DRC, queries have the form:      {   ⟨   X  1   ,   X  2   ,  …  .  ,   X  n   ⟩   ∣  p   (   ⟨   X  1   ,   X  2   ,  …  .  ,   X  n   ⟩   )   }     fragments  normal-{   fragments  normal-⟨   subscript  X  1   normal-,   subscript  X  2   normal-,  normal-…  normal-.  normal-,   subscript  X  n   normal-⟩   normal-∣  p   fragments  normal-(   fragments  normal-⟨   subscript  X  1   normal-,   subscript  X  2   normal-,  normal-…  normal-.  normal-,   subscript  X  n   normal-⟩   normal-)   normal-}    \{\langle X_{1},X_{2},....,X_{n}\rangle\mid p(\langle X_{1},X_{2},....,X_{n}%
 \rangle)\}     where each X i is either a domain variable or constant, and    p   (   ⟨   X  1   ,   X  2   ,  …  .  ,   X  n   ⟩   )      fragments  p   fragments  normal-(   fragments  normal-⟨   subscript  X  1   normal-,   subscript  X  2   normal-,  normal-…  normal-.  normal-,   subscript  X  n   normal-⟩   normal-)     p(\langle X_{1},X_{2},....,X_{n}\rangle)   denotes a DRC formula . The result of the query is the set of tuples X 1 to X n which makes the DRC formula true.  This language uses the same operators as tuple calculus , the logical connectives ∧ (and), ∨ (or) and ¬ (not). The existential quantifier (∃) and the universal quantifier (∀) can be used to bind the variables.  Its computational expressiveness is equivalent to that of Relational algebra . 2  Examples  Let (A, B, C) mean (Rank, Name, ID) in the Enterprise relation  and let (D, E, F) mean (Name, DeptName, ID) in the Department relation  Find all captains of the starship USS Enterprise :      {   ⟨  A  ,  B  ,  C  ⟩   ∣    ⟨  A  ,  B  ,  C  ⟩   ∈    Enterprise   ∧  A   =   Captain   ′    ′    }     conditional-set   A  B  C        A  B  C     Enterprise  A         superscript   superscript  Captain  normal-′   normal-′       \left\{\ {\left\langle A,B,C\right\rangle}\mid{\left\langle A,B,C\right\rangle%
 \in\mathrm{Enterprise}\ \land\ A=\mathrm{{}^{\prime}Captain^{\prime}}}\ \right\}     In this example, A, B, C denotes both the result set and a set in the table Enterprise.  Find names of Enterprise crew members who are in Stellar Cartography:         {   ⟨  B  ⟩       ∣  ∃  A  ,   C    ⟨  A  ,  B  ,  C  ⟩   ∈  Enterprise           ∧   ∃  D    ,  E  ,    F    ⟨  D  ,  E  ,  F  ⟩     ∈  Departments         ∧  F  =   C   ∧  E  =    Stellar     ′    Cartography  ′   }          fragments  normal-{   fragments  normal-⟨  B  normal-⟩     fragments  normal-∣   A  normal-,  C   fragments  normal-⟨  A  normal-,  B  normal-,  C  normal-⟩    Enterprise      missing-subexpression          D    E    F   D  E  F     Departments      missing-subexpression    fragments   F   C   E    superscript  Stellar  normal-′    superscript  Cartography  normal-′   normal-}      \begin{aligned}\displaystyle\{{\left\langle B\right\rangle}&\displaystyle\mid{%
 \exists A,C\ \left\langle A,B,C\right\rangle\in\mathrm{Enterprise}}\\
 &\displaystyle\land\ {\exists D,E,F\ \left\langle D,E,F\right\rangle\in\mathrm%
 {Departments}}\\
 &\displaystyle\land\ F=C\ \land\ E=\mathrm{{}^{\prime}Stellar\ Cartography^{%
 \prime}}\}\\
 \end{aligned}     In this example, we're only looking for the name, and that's B. F = C is a requirement, because we need to find Enterprise crew members AND they are in the Stellar Cartography Department.  An alternate representation of the previous example would be:      {   ⟨  B  ⟩   ∣     ∃  A   ,    C    ⟨  A  ,  B  ,  C  ⟩     ∈    Enterprise   ∧   ∃    D    ⟨  D  ,     Stellar     ′    Cartography  ′    ,  C  ⟩      ∈   Departments    }     conditional-set   delimited-⟨⟩  B          A     C   A  B  C       Enterprise      D   D     superscript  Stellar  normal-′    superscript  Cartography  normal-′    C           Departments      \left\{\ {\left\langle B\right\rangle}\mid{\exists A,C\ \left\langle A,B,C%
 \right\rangle\in\mathrm{Enterprise}}\ \land\ {\exists D\ \left\langle D,%
 \mathrm{{}^{\prime}Stellar\ Cartography^{\prime}},C\right\rangle\in\mathrm{%
 Departments}}\ \right\}     In this example, the value of the requested F domain is directly placed in the formula and the C domain variable is re-used in the query for the existence of a department, since it already holds a crew member's id.  Relational Data Model: The Relational model uses relation (table) to represent both entities and relationships among entities. A relation may be visualized as a table. However table is just one of the way, among many, to represent a relation.  See also   Relational algebra  Relational calculus   Tuple relational calculus (TRC)   Aldat Relational Algebra  Domain algebra   References    "  Category:Relational model  Category:Logical calculi     Michel Lacroix, Alain Pirotte: Domain-Oriented Relational Languages. VLDB 1977: 370-378 ↩  E. F. Codd : Relational Completeness of Data Base Sub-languages. In R. Rustin, editor, Data Base Systems. Prentice Hall, 1972 ↩     