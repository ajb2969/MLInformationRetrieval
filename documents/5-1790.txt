


Otsu's method




Otsu's method

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



  In computer vision and image processing, Otsu's method, named after , is used to automatically perform clustering-based image thresholding,1 or, the reduction of a graylevel image to a binary image. The algorithm assumes that the image contains two classes of pixels following bi-modal histogram (foreground pixels and background pixels), it then calculates the optimum threshold separating the two classes so that their combined spread (intra-class variance) is minimal, or equivalently (because the sum of pairwise squared distances is constant), so that their inter-class variance is maximal.2 Consequently, Otsu's method is roughly a one-dimensional, discrete analog of Fisher's Discriminant Analysis.
The extension of the original method to multi-level thresholding is referred to as the Multi Otsu method.3
Method
In Otsu's method we exhaustively search for the threshold that minimizes the intra-class variance (the variance within the class), defined as a weighted sum of variances of the two classes:


 
  Weights 
 
 
 
  are the probabilities of the two classes separated by a threshold 
 
 
 
  and 
 
 
 
 
  are variances of these classes.
Otsu shows that minimizing the intra-class variance is the same as maximizing inter-class variance:4



which is expressed in terms of class probabilities 
 
 
 
  and class means 
 
 
 
 .
The class probability 
 
 
 
  is computed from the histogram as 
 
 
 
 
 :



while the class mean 
 
 
 
  is:



where 
 
 
 
  is the value at the center of the 
 
 
 
 
 th histogram bin. Similarly, you can compute 
 
 
 
  and 
 
 
 
  on the right-hand side of the histogram for bins greater than 
 
 
 
 .
The class probabilities and class means can be computed iteratively. This idea yields an effective algorithm.
The Otsu method produces a threshold on the 0:1 scale. This threshold applies to the dynamic range of pixel intensities present in the image. For example, were the image to only contain pixel intensities in the range of 155 to 255, an Otsu threshold of 0.75 would map to a grayscale threshold value of 230 (not 191 as it would if the image contained pixels in the full range of 0-255). Common photographic images will tend to contain a full range of pixel intensities, making it a moot point, but other applications could be sensitive to the distinction.5
Algorithm

Compute histogram and probabilities of each intensity level
Set up initial 
 
 
 
  and 
 
 

Step through all possible thresholds 
 
 
 
  maximum intensity
 
Update 
 
 
 
  and 
 
 

Compute 
 
 


Desired threshold corresponds to the maximum 
 
 

You can compute two maxima (and two corresponding thresholds). 
 
 
 
  is the greater max and 
 
 
 
  is the greater or equal maximum
Desired threshold = 
 
 


JavaScript implementation
NB: The input argument total is the number of pixels in the given image. The input argument histogram is a 256-element histogram of a grayscale image different gray-levels (typical for 8-bit images). This function outputs the threshold for the image.
function otsu(histogram, total) {
     var sum = 0;
     for (var i = 1; i < 256; ++i)
         sum += i * histogram[i];
     var sumB = 0;
     var wB = 0;
     var wF = 0;
     var mB;
     var mF;
     var max = 0.0;
     var between = 0.0;
     var threshold1 = 0.0;
     var threshold2 = 0.0;
     for (var i = 0; i < 256; ++i) {
         wB += histogram[i];
         if (wB == 0)
             continue;
         wF = total - wB;
         if (wF == 0)
             break;
         sumB += i * histogram[i];
         mB = sumB / wB;
         mF = (sum - sumB) / wF;
         between = wB * wF * (mB - mF) * (mB - mF);
         if ( between >= max ) {
             threshold1 = i;
             if ( between > max ) {
                 threshold2 = i;
             }
             max = between;            
         }
     }
     return ( threshold1 + threshold2 ) / 2.0;
 }
For more please refer to this link #REDIRECT 1
References
External links

Lecture notes on thresholding - covers the Otsu method.
A plugin for ImageJ using Otsu's method to do the threshold.
A full explanation of Otsu's method with a working example and Java implementation.
Implementation of Otsu's method in ITK
Otsu Thresholding in C# A straightforward C# implementation with explanation.
Otsu's method using MATLAB

"
Category:Image segmentation











