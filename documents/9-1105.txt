   K-mer      K-mer  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     The term k-mer typically refers to all the possible substrings of length k that are contained in a string. In computational genomics , k-mers refer to all the possible subsequences (of length k) from a read obtained through DNA Sequencing . The amount of k-mers possible given a string of length, L, is     L  -  k   +  1        L  k   1    L-k+1   whilst the number of possible k-mers given n possibilities (4 in the case of DNA e.g. ACTG) is    n  k     superscript  n  k    n^{k}   . K-mers are typically used during sequence assembly , 1 but can also be used in sequence alignment .  Sequence Assembly  Overview  In sequence assembly , k-mers are typically used during the construction of De Bruijn graphs . In order to create a De Bruijn Graph, the strings stored in each edge with length,   L   L   L   , must overlap another string in another edge by    L  -  1      L  1    L-1   in order to create a vertex . Reads generated from next-generation sequencing will typically have different read lengths being generated. For example, reads by Illumina ’s sequencing technology capture reads of 100-mers. However, the problem with the sequencing is that only small fractions out of all the possible 100-mers that are present in the genome are actually generated. This is due to read errors, but more importantly, just simple coverage holes that occur during sequencing. The problem is though, that these small fractions of the possible k-mers violates the key assumption of de Bruijn graphs such that all the k-mer reads must overlap its adjoining k-mer in the genome by    k  -  1      k  1    k-1   (which can’t occur when all the possible k-mers aren’t present). The solution to this problem is to break these k-mer sized reads into smaller k-mers, such that the resulting smaller k-mers will represent all the possible k-mers of that smaller size that are present in the genome. 2 Furthermore, splitting the k-mers into smaller sizes also helps alleviate the problem of different initial read lengths. An example of the solution of splitting the reads into smaller k-mers is shown in figure 1. In this example the 5 reads do not account for all the possible 7-mers of the genome, and as such, a de Bruijn graph cannot be created. But when they are split into 4-mers, the resultant subsequences are enough to reconstruct the genome using a de Bruijn graph. thumb|center|upright=2.0|alt=blah blah blah.| This figure shows the process of splitting reads into smaller k-mers (4-mers in this case) in order to be able to be used in a de Bruijn graph. (A) Shows the initial segment of DNA being sequenced. (B) Shows the reads that were outputted from sequencing and also shows how they align. The problem with this alignment though is that they overlap by k-2 not k-1 (which is needed in de Bruijn graphs). (C) Shows the reads being split into smaller 4-mers. (D) Discards the repeated 4-mers and then shows the alignment of them. Note that these k-mers overlap by k-1 and can then be used in a de Bruijn graph.  Choice of k-mer  The choice of the k-mer size has many different effects of the sequence assembly . These effects vary greatly between lower sized and larger sized k-mers. Therefore an understanding of the different k-mer sizes must be known in order to choose a suitable size that creates a balance the effects. The effects of the sizes are outlined below.  Lower k-mer sizes   A lower k-mer size will decrease the amount of edges stored the graph, and as such, will help decrease the amount of space required to store DNA sequence.  Having smaller sizes will increase the chance for all the k-mers to overlap, and as such, have the required subsequences in order to construct the de Bruijn graph.     However, the by having smaller sized k-mers, you also risk having many vertices in the graph leading into a single k-mer. Therefore, this will make the reconstruction of the genome more difficult as there is a higher level of path ambiguities due to the larger amount of vertices that will need to be traversed.  Information is lost as the k-mers become smaller.  ' E.g. ' The possibility of AGTCGTAGATGCTG is lower than ACGT, and as such, holds a greater amount of information (refer to entropy (information theory) for more information).   Smaller k-mers also have the problem of not being able to resolve areas in the DNA where small microsatellites or repeats occur. This is because smaller k-mers will tend to sit entirely within the repeat region and is therefore hard to determine the amount of repetition that has actually taken place.  ' E.g. ' For the subsequence ATGTGTGTGTGTGTACG, the amount of repetitions of TG will be lost if a k-mer size less than 16 is chosen. This is because most of the k-mers will sit in the repeated region and may just be discarded as repeats of the same k-mer instead of referring the amount of repeats.    Higher k-mer sizes   Having larger sized k-mers will increase the amount of edges in the graph, which in turn, will increase the amount of memory needed to store the DNA sequence.  By increasing the size of the k-mers, the number of vertices will also decrease. This will help with the construction of the genome as there will be fewer paths to traverse in the graph. 3  Larger k-mers also run a higher risk of not having outward vertices from every k-mer. This is due to larger k-mers increasing the risk that it will not overlap with another k-mer by    k  -  1      k  1    k-1   . Therefore this can lead to disjoints in the reads, and as such, can lead to a higher amount of smaller contigs .  Larger k-mer sizes help alleviate the problem of small repeat regions. This is due to the fact that the k-mer will contain a balance of the repeat region and the adjoining DNA sequences (given it are a large enough size) that can help to resolve the amount of repetition in that particular area.   Pseudocode  Determining the possible k-mers of a read can be done by simply cycling over the string length by one and taking out each substring of length, k. The pseudocode to achieve this is as follows:  procedure k-mer(String, k : length of each k-mer)
 
      n = length(String)
      
      /* cycle over the length of String till k-mers of length, k, can still be made */
      for i = 1 to  n-k+1 inclusive do
           /* output each k-mer of length k, from i to i+k in String*/
           output String[i:i+k]
      end for
 
 end procedure  Implementations  A number of implementations in different languages to find all the k-mers in a string are listed below.  Python  def find_kmers(string, k):
     
       kmers = []
       n =  len (string) for i in  range ( 0 , n - k +1 ):
            kmers.append(string[i:i + k]) return kmers  Ruby  class  String  # Iterate over each k-mer of this string  def each_kmer k return enum_for( :each_kmer , k) unless block_given?
     ( 0 .. length - k).each { |i| yield  self [i, k]
     } end  end  Java  private  void  getKmers (String seq)
     { int seqLength = seq. length (); if (seqLength > length)
         { for ( int i = 0 ; i < seqLength - length + 1 ; i++)
             {
                 System. out . println (seq. substring (i,length + i));
             }
         } else {
             System. out . println (seq);
         }
     }  Examples  Here are some examples showing the possible k-mers (given a specified k value) from DNA sequences:  ' Read: ' AGATCGAGTG  3-mers: AGA GAT ATC TCG CGA GAG AGT GTG  ' Read: ' GTAGAGCTGT  5-mers: GTAGA TAGAG AGAGC GAGCT AGCTG GCTGT  See also   n-gram   References    "  Category:Nucleic acids  Category:Applied mathematics  Category:Biophysics  Category:Computational biology  Category:Bioinformatics  Category:Amino acids     Compeau, P., Pevzner, P. & Teslar, G. ''How to apply de Bruijn graphs to genome assembly”. Nature Biotechnology, 2011. . ↩      