   Production (computer science)      Production (computer science)   A production or production rule in computer science is a rewrite rule specifying a symbol substitution that can be recursively performed to generate new symbol sequences. A finite set of productions   P   P   P   is the main component in the specification of a formal grammar (specifically a generative grammar ). The other components are a finite set   N   N   N   of nonterminal symbols , a finite set (known as an alphabet)   Σ   normal-Σ   \Sigma   of terminal symbols that is disjoint from   N   N   N   and a distinguished symbol    S  ∈  N      S  N    S\in N   that is the start symbol.  In an unrestricted grammar , a production is of the form    u  →  v     normal-→  u  v    u\to v   where   u   u   u   and   v   v   v   are arbitrary strings of terminals and nonterminals however   u   u   u   may not be the empty string. If   v   v   v   is the empty string, this is denoted by the symbol   ϵ   ϵ   \epsilon   , or   λ   λ   \lambda   (rather than leave the right-hand side blank). So productions are of the form:         (   N  ∪  Σ   )   *   N    (   N  ∪  Σ   )   *    →    (   N  ∪  Σ   )   *      normal-→     superscript    N  normal-Σ     N   superscript    N  normal-Σ       superscript    N  normal-Σ       (N\cup\Sigma)^{*}N(N\cup\Sigma)^{*}\to(N\cup\Sigma)^{*}     where     *        {}^{*}   is the Kleene star operator, and   ∪     \cup   denotes set union .  The other types of formal grammar in the Chomsky hierarchy impose additional restrictions on what constitutes a production. Notably in a context-free grammar , the left-hand side of a production must be a single nonterminal symbol. So productions are of the form:      N  →    (   N  ∪  Σ   )   *      normal-→  N   superscript    N  normal-Σ       N\to(N\cup\Sigma)^{*}     Grammar generation  To generate a string in the language, one begins with a string consisting of only a single start symbol , and then successively applies the rules (any number of times, in any order) to rewrite this string. This stops when we obtain a string containing only terminals. The language consists of all the strings that can be generated in this manner. Any particular sequence of legal choices taken during this rewriting process yields one particular string in the language. If there are multiple different ways of generating this single string, then the grammar is said to be ambiguous .  For example, assume the alphabet consists of   a   a   a   and   b   b   b   , with the start symbol   S   S   S   , and we have the following rules:   1.    S  →   a  S  b      normal-→  S    a  S  b     S\rightarrow aSb     2.    S  →   b  a      normal-→  S    b  a     S\rightarrow ba      then we start with   S   S   S   , and can choose a rule to apply to it. If we choose rule 1, we replace   S   S   S   with    a  S  b      a  S  b    aSb   and obtain the string    a  S  b      a  S  b    aSb   . If we choose rule 1 again, we replace   S   S   S   with    a  S  b      a  S  b    aSb   and obtain the string    a  a  S  b  b      a  a  S  b  b    aaSbb   . This process is repeated until we only have symbols from the alphabet (i.e.,   a   a   a   and   b   b   b   ). If we now choose rule 2, we replace   S   S   S   with    b  a      b  a    ba   and obtain the string    a  a  b  a  b  b      a  a  b  a  b  b    aababb   , and are done. We can write this series of choices more briefly, using symbols    S  ⇒   a  S  b   ⇒   a  a  S  b  b   ⇒   a  a  b  a  b  b        normal-⇒  S    a  S  b     normal-⇒      a  a  S  b  b     normal-⇒      a  a  b  a  b  b      S\Rightarrow aSb\Rightarrow aaSbb\Rightarrow aababb   . The language of the grammar is the set of all the strings that can be generated using this process    {   b  a   ,   a  b  a  b   ,   a  a  b  a  b  b   ,   a  a  a  b  a  b  b  b   ,  …  }       b  a     a  b  a  b     a  a  b  a  b  b     a  a  a  b  a  b  b  b   normal-…    \{ba,abab,aababb,aaababbb,\ldots\}   .  See also   Formal grammar  Finite automata  Generative grammar  L-system  Rewrite rule  Backus–Naur form (A compact form for writing the productions of a context-free grammar.)  Phrase structure rule  Post canonical system (Emil Post's production systems- a model of computation.)   "  Category:Grammar  Category:Natural language processing  Category:Formal languages   