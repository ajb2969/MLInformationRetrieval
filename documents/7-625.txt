


Markov logic network




Markov logic network

A Markov logic network (or MLN) is a probabilistic logic which applies the ideas of a Markov network to first-order logic, enabling uncertain inference. Markov logic networks generalize first-order logic, in the sense that, in a certain limit, all unsatisfiable statements have a probability of zero, and all  tautologies have probability one.
Description
Briefly, it is a collection of formulas from first order logic, to each of which is assigned a real number, the weight. Taken as a Markov network, the vertices of the network graph are atomic formulas, and the edges are the logical connectives used to construct the formula. Each formula is considered to be a clique, and the Markov blanket is the set of formulas in which a given atom appears. A potential function is associated to each formula, and takes the value of one when the formula is true, and zero when it is false. The potential function is combined with the weight to form the Gibbs measure and partition function for the Markov network.
The above definition glosses over a subtle point: atomic formulas do not have a truth value unless they are grounded and given an interpretation; that is, until they are ground atoms with a Herbrand interpretation. Thus, a Markov logic network becomes a Markov network only with respect to a specific grounding and interpretation; the resulting Markov network is called the ground Markov network. The vertices of the graph of the ground Markov network are the ground atoms. The size of the resulting Markov network thus depends strongly (exponentially) on the number of constants in the domain of discourse.
Inference
The goal of inference in a Markov logic network is to find the stationary distribution of the system, or one that is close to it; that this may be difficult or not always possible is illustrated by the richness of behaviour seen in the Ising model. As in a Markov network, the stationary distribution finds the most likely assignment of probabilities to the vertices of the graph; in this case, the vertices are the ground atoms of an interpretation. That is, the distribution indicates the probability of the truth or falsehood of each ground atom. Given the stationary distribution, one can then perform inference in the traditional statistical sense of conditional probability: obtain the probability 
 
 
 
  that formula A holds, given that formula B is true.
Inference in MLNs can be performed using standard Markov network inference techniques over the minimal subset of the relevant Markov network required for answering the query. These techniques include Gibbs sampling, which is effective but may be excessively slow for large networks, belief propagation, or approximation via pseudolikelihood.
Resources



See also

Statistical relational learning
Probabilistic logic network

External links

University of Washington Statistical Relational Learning group
Alchemy 2.0: Markov logic networks in C++
ProbCog: Markov logic networks in Python and Java that can use its own inference engine or Alchemy's
markov thebeast: Markov logic networks in Java
RockIt: Markov logic networks in Java (with web interface/REST API)
Tuffy: A Learning and Inference Engine with strong RDBMs-based optimization for scalability
Felix: A successor to Tuffy, with prebuilt submodules to speed up common subtasks
Factorie: Scala based probabilistic inference language, with prebuilt submodules for natural language processing etc
Figaro: Scala based MLN language

"
Category:Bayesian statistics Category:Markov networks


