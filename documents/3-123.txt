   Recursively enumerable set      Recursively enumerable set   In computability theory , traditionally called recursion theory, a set S of natural numbers is called recursively enumerable , computably enumerable , semidecidable , provable or Turing-recognizable if:   There is an algorithm such that the set of input numbers for which the algorithm halts is exactly S .   Or, equivalently,   There is an algorithm that enumerates the members of S . That means that its output is simply a list of the members of S : s 1 , s 2 , s 3 , ... . If necessary, this algorithm may run forever.   The first condition suggests why the term semidecidable is sometimes used; the second suggests why computably enumerable is used. The abbreviations r.e. and c.e. are often used, even in print, instead of the full phrase.  In computational complexity theory , the complexity class containing all recursively enumerable sets is RE . In recursion theory , the lattice of r.e. sets under inclusion is denoted   ℰ   ℰ   \mathcal{E}   .  Formal definition  A set S of natural numbers is called recursively enumerable if there is a partial recursive function whose domain is exactly S , meaning that the function is defined if and only if its input is a member of S .  Equivalent formulations  The following are all equivalent properties of a set S of natural numbers:   Semidecidability:  The set S is recursively enumerable. That is, S is the domain (co-range) of a partial recursive function.  There is a partial recursive function f such that:   : f(x) =    \left\{\begin{matrix} 1 &\mbox{if}\ x \in S \\ \mbox{undefined/does not halt}\ &\mbox{if}\ x \notin S \end{matrix}\right.   Enumerability:  The set S is the range of a partial recursive function.  The set S is the range of a total recursive function or empty. If S is infinite, the function can be chosen to be injective .  The set S is the range of a primitive recursive function or empty. Even if S is infinite, repetition of values may be necessary in this case.    Diophantine:  There is a polynomial p with integer coefficients and variables x , a , b , c , d , e , f , g , h , i ranging over the natural numbers such that       x  ∈  S  ⇔  ∃  a  ,  b  ,  c  ,  d  ,  e  ,  f  ,  g  ,  h  ,   i    (  p   (  x  ,  a  ,  b  ,  c  ,  d  ,  e  ,  f  ,  g  ,  h  ,  i  )   =  0  )   .     fragments  x   S  normal-⇔   a  normal-,  b  normal-,  c  normal-,  d  normal-,  e  normal-,  f  normal-,  g  normal-,  h  normal-,  i   fragments  normal-(  p   fragments  normal-(  x  normal-,  a  normal-,  b  normal-,  c  normal-,  d  normal-,  e  normal-,  f  normal-,  g  normal-,  h  normal-,  i  normal-)    0  normal-)   normal-.    x\in S\Leftrightarrow\exists a,b,c,d,e,f,g,h,i\ (p(x,a,b,c,d,e,f,g,h,i)=0).      There is a polynomial from the integers to the integers such that the set S contains exactly the non-negative numbers in its range.     The equivalence of semidecidability and enumerability can be obtained by the technique of dovetailing .  The Diophantine characterizations of a recursively enumerable set, while not as straightforward or intuitive as the first definitions, were found by Yuri Matiyasevich as part of the negative solution to Hilbert's Tenth Problem . Diophantine sets predate recursion theory and are therefore historically the first way to describe these sets (although this equivalence was only remarked more than three decades after the introduction of recursively enumerable sets). The number of bound variables in the above definition of the Diophantine set is the best known so far; it might be that a lower number can be used to define all diophantine sets.     (Figure)  Recursive enumeration of the set of all Turing machines halting on a fixed input: Simulate all Turing machines (enumerated on vertical axis) step by step (horizontal axis), using the shown diagonalization scheduling. If a machine terminates, print its number. This way, the number of each terminating machine is eventually printed. In the example, the algorithm prints "9, 13, 4, 15, 12, 18, 6, 2, 8, 0, ..."      Examples   Every recursive set is recursively enumerable, but it is not true that every recursively enumerable set is recursive. For recursive sets, the algorithm must also say if an input is not in the set – this is not required of recursively enumerable sets.  A recursively enumerable language is a recursively enumerable subset of a formal language .  The set of all provable sentences in an effectively presented axiomatic system is a recursively enumerable set.  Matiyasevich's theorem states that every recursively enumerable set is a Diophantine set (the converse is trivially true).  The simple sets are recursively enumerable but not recursive.  The creative sets are recursively enumerable but not recursive.  Any productive set is not recursively enumerable.  Given a Gödel numbering    ϕ   ϕ   \phi   of the computable functions, the set    {   ⟨  i  ,  x  ⟩   ∣   ϕ  i    (  x  )   ↓  }     fragments  normal-{   fragments  normal-⟨  i  normal-,  x  normal-⟩   normal-∣   subscript  ϕ  i    fragments  normal-(  x  normal-)   normal-↓  normal-}    \{\langle i,x\rangle\mid\phi_{i}(x)\downarrow\}   (where    ⟨  i  ,  x  ⟩     i  x    \langle i,x\rangle   is the Cantor pairing function and      ϕ  i    (  x  )    ↓      normal-↓     subscript  ϕ  i   x   absent    \phi_{i}(x)\downarrow   indicates     ϕ  i    (  x  )        subscript  ϕ  i   x    \phi_{i}(x)   is defined) is recursively enumerable (cf. picture for a fixed x ). This set encodes the halting problem as it describes the input parameters for which each Turing machine halts.  Given a Gödel numbering   ϕ   ϕ   \phi   of the computable functions, the set    {   ⟨  x  ,  y  ,  z  ⟩   ∣     ϕ  x    (  y  )    =  z   }     conditional-set   x  y  z        subscript  ϕ  x   y   z     \{\left\langle x,y,z\right\rangle\mid\phi_{x}(y)=z\}   is recursively enumerable. This set encodes the problem of deciding a function value.  Given a partial function f from the natural numbers into the natural numbers, f is a partial recursive function if and only if the graph of f , that is, the set of all pairs    ⟨  x  ,   f   (  x  )    ⟩     x    f  x     \langle x,f(x)\rangle   such that f(x) is defined, is recursively enumerable.   Properties  If A and B are recursively enumerable sets then A ∩ B , A ∪ B and A × B (with the ordered pair of natural numbers mapped to a single natural number with the Cantor pairing function ) are recursively enumerable sets. The preimage of a recursively enumerable set under a partial recursive function is a recursively enumerable set.  A set is recursively enumerable if and only if it is at level    Σ  1  0     subscript   superscript  normal-Σ  0   1    \Sigma^{0}_{1}   of the arithmetical hierarchy .  A set   T   T   T   is called co-recursively enumerable or co-r.e. if its complement     ℕ  ∖  T      ℕ  T    \mathbb{N}\setminus T   is recursively enumerable. Equivalently, a set is co-r.e. if and only if it is at level    Π  1  0     subscript   superscript  normal-Π  0   1    \Pi^{0}_{1}   of the arithmetical hierarchy.  A set A is recursive (synonym: computable) if and only if both A and the complement of A are recursively enumerable. A set is recursive if and only if it is either the range of an increasing total recursive function or finite.  Some pairs of recursively enumerable sets are effectively separable and some are not.  Remarks  According to the Church–Turing thesis , any effectively calculable function is calculable by a Turing machine , and thus a set S is recursively enumerable if and only if there is some algorithm which yields an enumeration of S . This cannot be taken as a formal definition, however, because the Church–Turing thesis is an informal conjecture rather than a formal axiom.  The definition of a recursively enumerable set as the domain of a partial function, rather than the range of a total recursive function, is common in contemporary texts. This choice is motivated by the fact that in generalized recursion theories, such as α-recursion theory , the definition corresponding to domains has been found to be more natural. Other texts use the definition in terms of enumerations, which is equivalent for recursively enumerable sets.  References   Rogers, H. The Theory of Recursive Functions and Effective Computability , MIT Press . ISBN 0-262-68052-1; ISBN 0-07-053522-1.  Soare, R. Recursively enumerable sets and degrees. Perspectives in Mathematical Logic.  Springer-Verlag , Berlin, 1987. ISBN 3-540-15299-7.  Soare, Robert I. Recursively enumerable sets and degrees. Bull. Amer. Math. Soc. 84 (1978), no. 6, 1149–1181.   "  Category:Computability theory  Category:Theory of computation   