   Lamport signature      Lamport signature   In cryptography , a Lamport signature or Lamport one-time signature scheme is a method for constructing a digital signature . Lamport signatures can be built from any cryptographically secure one-way function ; usually a cryptographic hash function is used.  Although the potential development of quantum computers threatens the security of many common forms of cryptography such as RSA , it is believed that Lamport signatures with large hash functions would still be secure in that event. Unfortunately, each Lamport key can only be used to sign a single message. However, combined with hash trees , a single key could be used for many messages, making this a fairly efficient digital signature scheme.  The Lamport signature cryptosystem was invented in 1979 and named after its inventor, Leslie Lamport .  Example  Alice has a 256-bit cryptographic hash function and some kind of secure random number generator . She wants to create and use a Lamport key pair, that is, a private key and a corresponding public key.  Making the key pair  To create the private key Alice uses the random number generator to produce 256 pairs of random numbers (2×256 numbers in total), each number being 256 bits in size, that is, a total of 2×256×256 bits = 16 KiB in total. This is her private key and she will store it away in a secure place for later use.  To create the public key she hashes each of the 512 random numbers in the private key, thus creating 512 hashes, each 256 bits in size. (Also 16 KiB in total.) These 512 numbers form her public key, which she will share with the world.  Signing the message  Later Alice wants to sign a message. First she hashes the message to a 256-bit hash sum. Then, for each bit in the hash sum, she picks one number from the corresponding pairs of numbers that comprise her private key. This produces a sequence of 256 random numbers. As each number is itself 256 bits long the total size of her signature will be 256×256 bits = 8 KiB. These random numbers are her signature and she publishes them along with the message.  Whether she must choose the first or second number from any of the pairs that make up her private key is determined by the value of the corresponding bit in the hash sum. If the hash bit is 0 she chooses the first number of the corresponding pair; if the hash bit is 1 she chooses the second number. For instance, if the 6th hash bit is 1 then the 6th number in her signature is the second number of the 6th pair.  Note that now that Alice's private key is used, it should never be used again. The other 256 random numbers that she did not use for the signature she must destroy. Otherwise, each additional signature reusing the private key halves the security level 1 against adversaries that might later create false signatures from them.  Verifying the signature  Then Bob wants to verify Alice's signature of the message. He also hashes the message to get a 256-bit hash sum. Then he uses the bits in the hash sum to pick out 256 of the hashes in Alice's public key. He picks the hashes in the same manner that Alice picked the random numbers for the signature. That is, if the first bit of the message hash is a 0, he picks the first hash in the first pair, and so on.  Then Bob hashes each of the 256 random numbers in Alice's signature. This gives him 256 hashes. If these 256 hashes exactly match the 256 hashes he just picked from Alice's public key then the signature is ok. If not, then the signature is wrong.  Note that prior to Alice publishing the signature of the message, no one else knows the 2×256 random numbers in the private key. Thus, no one else can create the proper list of 256 random numbers for the signature. And after Alice has published the signature, others still do not know the other 256 random numbers and thus can not create signatures that fit other message hashes.  Mathematical description  Below is a short description of how Lamport signatures work, written in mathematical notation . Note that the "message" in this description is a fixed sized block of reasonable size, possibly (but not necessarily) the hash result of an arbitrary long message being signed.  Keys  Let   k   k   k   be a positive integer and let    P  =    {  0  ,  1  }   k       P   superscript   0  1   k     P=\{0,1\}^{k}   be the set of messages. Let    f  :   Y  →  Z      normal-:  f   normal-→  Y  Z     f:\,Y\rightarrow Z   be a one-way function .  For    1  ≤  i  ≤  k        1  i       k     1\leq i\leq k   and    j  ∈   {  0  ,  1  }       j   0  1     j\in\{0,1\}   the signer chooses     y   i  ,  j    ∈  Y       subscript  y   i  j    Y    y_{i,j}\in Y   randomly and computes     z   i  ,  j    =   f   (   y   i  ,  j    )         subscript  z   i  j      f   subscript  y   i  j       z_{i,j}=f(y_{i,j})   .  The private key   K   K   K   consists of    2  k      2  k    2k   values    y   i  ,  j      subscript  y   i  j     y_{i,j}   . The public key consists of the    2  k      2  k    2k   values    z   i  ,  j      subscript  z   i  j     z_{i,j}   .  Signing a message  Let    m  =    m  1   …   m  k    ∈    {  0  ,  1  }   k         m     subscript  m  1   normal-…   subscript  m  k          superscript   0  1   k      m=m_{1}\ldots m_{k}\in\{0,1\}^{k}   be a message.  The signature of the message is     s  i  g   (    m  1   …   m  k    )    =   (   y   1  ,   m  1     ,  …  ,   y   k  ,   m  k     )   =   (   s  1   ,  …  ,   s  k   )           s  i  g     subscript  m  1   normal-…   subscript  m  k       subscript  y   1   subscript  m  1     normal-…   subscript  y   k   subscript  m  k             subscript  s  1   normal-…   subscript  s  k       sig(m_{1}\ldots m_{k})=(y_{1,m_{1}},\ldots,y_{k,m_{k}})=(s_{1},\ldots,s_{k})   .  Verifying a signature  The verifier validates a signature by checking that     f   (   s  i   )    =   z   i  ,   m  i           f   subscript  s  i     subscript  z   i   subscript  m  i       f(s_{i})=z_{i,m_{i}}   for all    1  ≤  i  ≤  k        1  i       k     1\leq i\leq k   .  In order to forge a message Eve would have to invert the one-way function   f   f   f   . This is assumed to be intractable for suitably sized inputs and outputs.  Security parameters  The security of Lamport signatures is based on security of the one way hash function, the length of its output and the quality of the input.  For a hash function that generates an n-bit message digest, the ideal preimage and 2nd preimage resistance on a single hash function invocation implies on the order of 2 n operations and 2 n bits of memory effort to find a collision under a classical computing model. According to Grover's algorithm , finding a preimage collision on a single invocation of an ideal hash function is upper bound on O(2 n /2 ) operations under a quantum computing model. In Lamport signatures, each bit of the public key and signature is based on short messages requiring only a single invocation to a hash function.  For each private key y i,j and its corresponding z i,j public key pair, the private key length must be selected so performing a preimage attack on the length of the input is not faster than performing a preimage attack on the length of the output. For example, in a degenerate case, if each private key y i,j element was only 16 bits in length, it is trivial to exhaustively search all 2 16 possible private key combinations in 2 15 operations to find a match with the output, irrespective of the message digest length. Therefore a balanced system design ensures both lengths are approximately equal.  Based on Grover's algorithm, a quantum secure system, the length of the public key elements z i,j , the private key elements y i,j and the signature elements s i,j must be no less than 2 times larger than the security rating of the system. That is:   An 80-bit secure system uses element lengths of no less than 160 bit;  A 128-bit secure systems uses element lengths of no less than 256 bit;   However caution should be taken as the idealistic work estimates above assume an ideal (perfect) hash function and are limited to attacks that target only a single preimage at a time. It is known under a conventional computing model that if 2 3 n /5 preimages are searched, the full cost per preimage decreases from 2 ''n/2 to 2 2 n /5 . 2 Selecting the optimum element size taking into account the collection of multiple message digests is an open problem. Selection of larger element sizes and stronger hash functions, such as 512-bit elements and SHA-512, ensures greater security margins to manage these unknowns.  Optimisations and variants  Short private key  Instead of creating and storing all the random numbers of the private key a single key of sufficient size can be stored. (Usually the same size as one of the random numbers in the private key.) The single key can then be used as the seed for a cryptographically secure pseudorandom number generator (CSPRNG) to create all the random numbers in the private key when needed. Note a cryptographically secure hash (or at least whose output is not XORed with the seed) can not be used instead of CSPRNG because signing a message would reveal additional random values from the private key. If the adversary can access the signature before the intended recipients can, then he can forge a signature with a halving of security level for each doubling of the revealed random values from the private key.  In the same manner a single key can be used together with a CSPRNG to create many Lamport keys. Preferably then some kind of random access CSPRNG should be used, such as BBS .  Short public key  A Lamport signature can be combined with a hash list , making it possible to publish only the single top hash instead of all the hashes in the public key. That is, instead of the    2  k      2  k    2k   values    z   i  j      subscript  z    i  j     z_{ij}   . To verify against the single top hash, the signature must include the random numbers and the unused hashes from hash list of the public key, resulting in signatures of about twice the size. That is, the values    (   z   i  j    )     subscript  z    i  j     (z_{ij})   for all    j  ≠   m  i       j   subscript  m  i     j\neq m_{i}   needs to be included.  The unused hashes do not need to be included in the signature if a cryptographic accumulator is used instead of a hash list. 3 However if the accumulator is based on number-theoretic assumptions this probably defeats the benefit of employing Lamport signatures, e.g. quantum computing resistance.  Short keys and signature  Winternitz signature compression reduces the size of the private key and public key by slightly less than a factor of the    2  *  chunk size in bits      2  chunk size in bits    2*\text{chunk size in bits}   , and half that factor for the signature. The computation increases by slightly more than a factor of     (   2  chunk size in bits   )   /   (  chunk size in bits  )        superscript  2  chunk size in bits   chunk size in bits    (2^{\text{chunk size in bits}})/(\text{chunk size in bits})   . A cryptographically secure hash suffices instead of the requirement for a CSPRNG. 4  A hash list could also be employed to shorten the public key to a single value at the expense of doubling the size of the signature as explained in the prior section.  Public key for multiple messages  Each Lamport public key can only be used to sign one single message, which means many keys have to be published if many messages are to be signed. But a hash tree can be used on those public keys, publishing the top hash of the hash tree instead. This increases the size of the resulting signature, since parts of the hash tree have to be included in the signature, but it makes it possible to publish a single hash that then can be used to verify any given number of future signatures.  Hashing the message  Unlike some other signature schemes (e.g. RSA ) the Lamport signature scheme does not require that the message m is hashed before it is signed. A system for signing long messages can use a collision resistant hash function h and sign h( m ) instead of m .  References   Notes    L. Lamport , Constructing digital signatures from a one-way function , Technical Report SRI-CSL-98, SRI International Computer Science Laboratory, Oct. 1979.  Efficient Use of Merkle Trees - RSA labs explanation of the original purpose of Merkle trees + Lamport signatures, as an efficient one-time signature scheme.   "  Category:Digital signature schemes  Category:Hash-based cryptography     ↩  Bart Preneel, "Design Principles for Iterated Hash Functions Revised" ↩  ↩  ↩     