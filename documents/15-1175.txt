   Weighted constraint satisfaction problem      Weighted constraint satisfaction problem   Whereas all constraints in a constraint satisfaction problem (CSP) must be satisfied, a Weighted Constraint Satisfaction Problem (WCSP) is a constraint satisfaction problem where constraints can be violated (according a violation degree) and in which preferences among solutions can be expressed. Many real problems can be represented as Constraint Satisfaction Problem. However, a wide range of problems are over-constrained (no solution can be found without violating at least one constraint) or have multiple solutions and the goal is to find the solution having minimal cost according to a cost function. This kind of Constraint Satisfaction Problem are called Weighted Constraint Satisfaction Problem (WCSP).  Formal definition  A Weighted Constraint Network (WCN) is a triplet    ⟨  X  ,  C  ,  k  ⟩     X  C  k    \langle X,C,k\rangle   where   X   X   X   is a finite set of variables,   C   C   C   is a finite set of soft constraints and    k  >  0      k  0    k>0   is either a natural integer or   ∞     \infty   .  Each soft constraint     c  S   ∈  C       subscript  c  S   C    c_{S}\in C   involves an ordered set   S   S   S   of variables, called its scope, and is defined as a cost function from    l   (  S  )       l  S    l(S)   to    ⟨  0  ,  …  ,  k  ⟩     0  normal-…  k    \langle 0,...,k\rangle   where    l   (  S  )       l  S    l(S)   is the set of possible instantiations of   S   S   S   . When an instantiation    I  ∈   l   (  S  )        I    l  S     I\in l(S)   is given the cost   k   k   k   , i.e.,      c  S    (  I  )    =  k         subscript  c  S   I   k    c_{S}(I)=k   , it is said forbidden. Otherwise it is permitted with the corresponding cost (0 being completely satisfactory).  In WCSP, specific subclass of Valued CSP (VCSP), costs are combined with the specific operator   ⊕   direct-sum   \oplus   defined as       ∀  α   ,  β   ∈   ⟨  0  ,  …  ,  k  ⟩    ,    α  ⊕  β   =   m  i  n   (  k  ,   α  +  β   )        formulae-sequence      for-all  α   β    0  normal-…  k       direct-sum  α  β     m  i  n   k    α  β        \forall\alpha,\beta\in\langle 0,...,k\rangle,\alpha\oplus\beta=min(k,\alpha+\beta)   . The partial inverse of   ⊕   direct-sum   \oplus   is   ⊖   symmetric-difference   \ominus   defined by: if    0  ≤  β  ≤  α  <  k        0  β       α       k     0\leq\beta\leq\alpha   ,     α  ⊖  β   =   α  -  β        symmetric-difference  α  β     α  β     \alpha\ominus\beta=\alpha-\beta   and if   c   c   c   .  Without any loss of generality, the existence of a nullary constraint    c  x     subscript  c  x    c_{x}   (a cost) as well as the presence of a unary constraint   x   x   x   for every variable    I  ∈   l   (  S  )        I    l  S     I\in l(S)   is assumed.  The total cost of an instantiation    c  S     subscript  c  S    c_{S}   on a soft constraint   I   I   I   , includes the cost of    c  S     subscript  c  S    c_{S}   on    c  ∅     subscript  c     c_{\emptyset}   as well as the nullary cost   I   I   I   and the unary costs for   S   S   S   of the variables in   c   c   c   .  Considering a WCN, the usual (NP-hard) task of WCSP is to find a complete instantiation with a minimal cost.  Resolution of binary/ternary WCSPs  Approach with cost transfer operations  Node consistency (NC) and Arc consistency (AC), introduced for the Constraint Satisfaction Problem (CSP), have been studied later in the context of WCSP. Furthermore, several consistencies about the best form of arc consistency have been proposed: Full Directional Arc consistency (FDAC) , 1  Existencial Directional Arc consistency (EDAC) , 2  Virtual Arc consistency (VAC) 3 and Optimal Soft Arc consistency (OSAC) . 4  Algorithms enforcing such properties are based on Equivalence Preserving Transformations (EPT) that allow safe moves of costs among constraints. Three basic costs transfer operations are:   Project : cost transfer from constraints to unary constraints  ProjectUnary : cost transfer from unary constraint to nullary constraint  Extend : cost transfer from unary constraint to constraint   thumb|alt=Basic Equivalence Preserving Transformations|upright=5|center|Basic Equivalence Preserving Transformations.  The goal of Equivalence Preserving Transformations is to concentrate costs on the nullary constraint   c   c   c   and remove efficiently instantiations and values with a cost, additionned to    l  b      l  b    lb   , that is greater than or equal to the forbidden cost or the cost of the best solution found  Approach without cost transfer operations  An alternative to cost transfer algorithms is the algorithm PFC-MRDAC 5 which is a classical branch and bound algorithm that computes lower bound    u  b      u  b    ub   at each node of the search tree, that corresponds to an under-estimation of the cost of any solution that can be obtained from this node. The cost of the best solution found is     l  b   ≥   u  b         l  b     u  b     lb\geq ub   . When     G  A   C  w    -   W  S  T  R         G  A   superscript  C  w      W  S  T  R     GAC^{w}-WSTR   , then the search tree from this node is pruned.  Resolution of n-ary WCSPs  Cost transfer algorithms have been shown to be particularly efficient to solve real-world problem when soft constraints are binary or ternary (maximal arity of constraints in the problem is equal to 2 or 3). For soft constraints of large arity, cost transfer becomes a serious issue because the risk of combinatorial explosion has to be controlled.  An algorithm, called $GAC^w-WSTR$ , 6 has been proposed to enforce a weak version of the property Generalized Arc Consistency (GAC) on soft constraints defined extensionally by listing tuples and their costs. This algorithm combine two techniques, namely, Simple Tabular Reduction (STR) 7 and cost transfer. Values that are no longer consistent with respect to GAC are identify and minimum costs of values are computed, which is particularly useful for performing efficiently projection operations that are required to establish GAC.  Benchmarks  Many real-world WCSP benchmarks are available on http://costfunction.org/en/benchmark 8 and on http://www.cril.univ-artois.fr/~lecoutre/benchmarks.html .  See also   Constraint satisfaction problem  Constraint programming  Preference-based planning   References    "  Category:Constraint programming     M. Cooper. Reduction operations in fuzzy or valued constraint satisfaction. Fuzzy Sets and Systems, 134(3):311–342, 2003. ↩  S. de Givry, F. Heras, M. Zytnicki, and J. Larrosa. Existential arc consistency: Getting closer to full arc consistency in weighted CSPs. In Proceedings of IJCAI’05, pages 84–89, 2005. ↩  M. Cooper, S. de Givry, M. Sanchez, T. Schiex, M. Zytnicki. Virtual Arc Consistency for Weighted CSP. In Proceedings of AAAI’08, pages 253-258, 2008. ↩  M. Cooper, S. de Givry, M. Sanchez, T. Schiex, M. Zytnicki, and T. Werner. Soft arc consistency revisited. Artificial Intelligence, 174(7-8):449–478, 2010. ↩  E.C. Freuder and R.J. Wallace. Partial constraint satisfaction. Artificial Intelligence, 58(1- 3):21–70, 1992. ↩  C. Lecoutre, N. Paris, O. Roussel, S. Tabary. Propagating Soft Table Constraints. In Proceedings of CP’12, pages 390-405, 2012. ↩  C. Lecoutre. STR2: Optimized simple tabular reduction for table constraint. Constraints, 16(4):341–371, 2011. ↩  The aims of this web site is to promote cost function network in providing Benchmark and teaching material, solver demo, link to articule about cost function used in the contexte of constraint programming. ↩     