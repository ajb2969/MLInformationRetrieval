   Roberts cross      Roberts cross   The Roberts cross operator is used in image processing and computer vision for edge detection . It was one of the first edge detectors and was initially proposed by Lawrence Roberts in 1963. 1 As a differential operator , the idea behind the Roberts cross operator is to approximate the gradient of an image through discrete differentiation which is achieved by computing the sum of the squares of the differences between diagonally adjacent pixels.  Motivation  According to Roberts, an edge detector should have the following properties: the produced edges should be well-defined, the background should contribute as little noise as possible, and the intensity of edges should correspond as close as possible to what a human would perceive. With these criteria in mind and based on then prevailing psychophysical theory Roberts proposed the following equations:       y   i  ,  j    =    x   i  ,  j          subscript  y   i  j       subscript  x   i  j       y_{i,j}=\sqrt{x_{i,j}}          z   i  ,  j    =      (    y   i  ,  j    -   y    i  +  1   ,   j  +  1      )   2   +    (    y    i  +  1   ,  j    -   y   i  ,   j  +  1      )   2          subscript  z   i  j         superscript     subscript  y   i  j     subscript  y     i  1     j  1      2    superscript     subscript  y     i  1   j     subscript  y   i    j  1      2       z_{i,j}=\sqrt{(y_{i,j}-y_{i+1,j+1})^{2}+(y_{i+1,j}-y_{i,j+1})^{2}}     where x is the initial intensity value in the image, z is the computed derivative and i,j represent the location in the image.  The results of this operation will highlight changes in intensity in a diagonal direction. One of the most appealing aspects of this operation is its simplicity; the kernel is small and contains only integers. However with the speed of computers today this advantage is negligible and the Roberts cross suffers greatly from sensitivity to noise. 2  Formulation  In order to perform edge detection with the Roberts operator we first convolve the original image, with the following two kernels:        [      +  1     0      0     -  1      ]   and   [     0     +  1        -  1     0     ]    .         1   0    0    1     and    0    1       1   0      \begin{bmatrix}+1&0\\
 0&-1\\
 \end{bmatrix}\quad\mbox{and}\quad\begin{bmatrix}0&+1\\
 -1&0\\
 \end{bmatrix}.     Let    I   (  x  ,  y  )       I   x  y     I(x,y)   be a point in the original image and     G  x    (  x  ,  y  )        subscript  G  x    x  y     G_{x}(x,y)   be a point in an image formed by convolving with the first kernel and     G  y    (  x  ,  y  )        subscript  G  y    x  y     G_{y}(x,y)   be a point in an image formed by convolving with the second kernel. The gradient can then be defined as:         ∇  I    (  x  ,  y  )    =   G   (  x  ,  y  )    =     G  x  2   +   G  y  2      .           normal-∇  I    x  y      G   x  y              superscript   subscript  G  x   2    superscript   subscript  G  y   2        \nabla I(x,y)=G(x,y)=\sqrt{G_{x}^{2}+G_{y}^{2}}.     The direction of the gradient can also be defined as follows:        Θ   (  x  ,  y  )    =   arctan   (     G  y    (  x  ,  y  )      G  x    (  x  ,  y  )     )     .        normal-Θ   x  y           subscript  G  y    x  y       subscript  G  x    x  y        \Theta(x,y)=\arctan{\left(\frac{G_{y}(x,y)}{G_{x}(x,y)}\right)}.     Example comparisons  Here, four different gradient operators are used to estimate the magnitude of the gradient of the test image.     (Figure)  Grayscale test image of brick wall and bike rack   (Figure)  Gradient magnitude from Roberts cross operator   (Figure)  Gradient magnitude from Sobel operator     (Figure)  Gradient magnitude from Scharr operator   (Figure)  Gradient magnitude from Prewitt operator      See also   Digital image processing  Feature detection (computer vision)  Feature extraction  Sobel operator  Prewitt operator   References    "  Category:Feature detection (computer vision)     Machine Perception Of Three-Dimensional Solids ↩  LS. Davis, "A survey of edge detection techniques", Computer Graphics and Image Processing, vol 4, no. 3, pp 248-260, 1975 ↩     