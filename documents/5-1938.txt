   Pseudorandom binary sequence      Pseudorandom binary sequence  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     A binary sequence (BS) is a sequence      a  0   ,  …  ,   a   N  -  1        subscript  a  0   normal-…   subscript  a    N  1      a_{0},\ldots,a_{N-1}   of   N   N   N   bits, i.e.       a  j   ∈   {  0  ,  1  }        subscript  a  j    0  1     a_{j}\in\{0,1\}   for    j  =   0  ,  1  ,  …  ,   N  -  1        j   0  1  normal-…    N  1      j=0,1,...,N-1   .  A BS consists of    m  =   ∑   a  j        m     subscript  a  j      m=\sum a_{j}   ones and    N  -  m      N  m    N-m   zeros.  A BS is a pseudo-random binary sequence (PRBS) if its autocorrelation function :       C   (  v  )    =    ∑   j  =  0    N  -  1      a  j    a   j  +  v            C  v     superscript   subscript     j  0      N  1       subscript  a  j    subscript  a    j  v        C(v)=\sum_{j=0}^{N-1}a_{j}a_{j+v}     has only two values:       C   (  v  )    =   {       m  ,   if  v    ≡    0    (   mod  N   )                  m  c   ,  otherwise              C  v    cases     m    if  v      0    mod  N     otherwise  absent  otherwise     m  c   otherwise   otherwise     C(v)=\begin{cases}m,\mbox{ if }v\equiv 0\;\;(\mbox{mod}N)\\
 \\
 mc,\mbox{ otherwise }\end{cases}     where      c  =    m  -  1    N  -  1        c      m  1     N  1      c=\frac{m-1}{N-1}     is called the duty cycle of the PRBS, similar to the duty cycle of a continuous time signal.  A PRBS is 'pseudorandom', because, although it is in fact deterministic, it seems to be random in a sense that the value of an    a  j     subscript  a  j    a_{j}   element is independent of the values of any of the other elements, similar to real random sequences.  A PRBS can be stretched to infinity by repeating it after   N   N   N   elements, this in contrast to most random sequences, such as sequences generated by radioactive decay or by white noise, that are 'infinite' by nature. The PRBS is more general than the maximum length sequence , which is a special pseudo-random binary sequence of N bits generated as the output of a linear shift register. A maximum length sequence always has a 1/2 duty cycle, and for a k-length register its number of elements is    N  =    2  k   -  1       N     superscript  2  k   1     N=2^{k}-1   . PRBS's are used in telecommunication , encryption , simulation , correlation technique and time-of-flight spectroscopy .  Practical implementation  Pseudorandom binary sequences can be generated using linear feedback shift registers . 1  Some common sequence generating polynomials are  PRBS7 =     x  7   +   x  6   +  1       superscript  x  7    superscript  x  6   1    x^{7}+x^{6}+1     PRBS15 =     x  15   +   x  14   +  1       superscript  x  15    superscript  x  14   1    x^{15}+x^{14}+1     PRBS23 =     x  23   +   x  18   +  1       superscript  x  23    superscript  x  18   1    x^{23}+x^{18}+1     PRBS31 =     x  31   +   x  28   +  1       superscript  x  31    superscript  x  28   1    x^{31}+x^{28}+1     An example of generating a "PRBS-7" sequence can be expressed in C as  #include  #include  #include  int main( int argc, char * argv[]) { uint8_t start = 0x02 ; uint8_t a = start; int i; for (i = 1 ;; i++) { int newbit = (((a >> 6 ) ^ (a >> 5 )) & 1 );
         a = ((a << 1 ) | newbit) & 0x7f ;
         printf( "%x \n " , a); if (a == start) {
             printf( "repetition period is %d \n " , i); break ;
         }
     }
 }  In this particular case, "PRBS-7" has a repetition period of 127 bits.  See also   Pseudorandom number generator  Gold code  Complementary sequences  Bit Error Rate Test  Pseudorandom noise   References  External links   http://www.scriptwell.net/correlation.htm    "  Category:Pseudorandomness  Category:Binary sequences     Paul H. Bardell, William H. McAnney, and Jacob Savir, "Built-In Test for VLSI: Pseudorandom Techniques", John Wiley & Sons, New York, 1987. ↩   