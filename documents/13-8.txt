


Make Compatible




Make Compatible

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Make Compatible is a program developed by Microsoft that is included with Windows 9x operating systems. It changes per-program system settings in Windows to allow Windows 3.1 programs that are tailored specifically to that platform to execute under newer versions. The name of the program image file for Make Compatible is , and it is stored in the  directory.12
Options
When it is invoked, one can choose the name of the Windows 3.1 application program image file using the "Choose Program" option on the "File" menu. After the program image file is chosen, Make Compatible by default displays a list of five options that can be set to alter the behaviour of Windows for that program when it is executed:3

Don't spool to enhanced meta files4
Give application more stack space5
Lie about printer device mode size6
Lie about Windows version number7
Windows 3.1-style controls8

An advanced options mode, selectable via the "Advanced Options" selection on the "File" menu presents a longer list of options, allowing finer control of Windows 3.1 emulation if the particular application requires it.9
Compatibility bits
Each of the options is recorded in a system database of so-called "compatibility bits". This is a database of 1-bit flags, one for each of the options displayed by Make Compatible.1011
This database already existed in earlier versions of Windows. In Windows 3.1, the database is stored in the  section of , with entries such as:1213
:
[Compatibility]
 ACAD=0x8000
 AMIPRO=0x04000010
Each line names an application program, and gives a hexadecimal numeric constant to associate with that program. The hexadecimal numeric constant encodes the compatibility bitflags for that particular application, that Windows applies when the application is executed. Make Compatible merely provides a graphical user interface for editing these flags in an easy way, rather than editing  manually, with a text editor. It allows one to set and unset individual flags without having to know their numeric values.1415
The compatibility bitflags settable in  are not documented in the  file that ships with Windows 3.1, or in the Microsoft Windows 3.1 Resource Kit published by Microsoft. They are listed as a simple set of defined constants (with names beginning "GACF_" for "GetAppCompatFlags"), without explanation, in the  header file that is shipped with the Microsoft Windows 3.1 Device driver Development Kit. In Windows 3.1, the compatibility flags that are in effect for any given task in the kernel's Task Database are readable via the undocumented GetAppCompatFlags() function that is exported from the  module.16
Advanced mode flags
The flags are documented in Microsoft KnowledgeBase article #82860. They correspond to the "advanced mode" flags that are settable by Make Compatible's "Advanced Options" menu:17

30 average width metrics:This is bit #19 of the compatibility bits word, with hexadecimal value 0x80000, known by the symbolic name GACF_30AVGWIDTH in . This flag causes Windows to re-scale all fonts by a factor of 
 
 
 
  when calculating their average character widths. The reason for this is that one particular Windows 3.0 application, TurboTax, hard-coded the values that it was using for such size calculations, which failed to work correctly with the new TrueType-compatible font average width calculation method employed by Windows 3.1. This prevented people from using TurboTax to print their income tax return forms on PostScript printers.18
 Always send NC_Paint:This is bit #6 of the compatibility bits word, with hexadecimal value 0x40, known by the symbolic name GACF_ALWAYSSENDNCPAINT in . This flag forces any call to SetWindowPos() to cause the sending of WM_NCPAINT message to all child windows. This is the Windows 3.0 behaviour. In Windows 3.1, the behaviour was changed so that the window message is only sent to those windows that need their non-client areas to be repainted. Some Windows 3.0 applications, however, relied upon always receiving this message, to determine whether child windows needed repositioning.19
 Don't enum device fonts:This is bit #14 of the compatibility bits word, with hexadecimal value 0x4000, known by the symbolic name GACF_ENUMTTNOTEDEVICE in . This flag causes Windows 3.1 to turn the DEVICE_FONTTYPE flag off in particular circumstances when an application that is wanting to print enumerates fonts. The particular circumstances are when the target printer is not either a dot matrix printer or a PostScript printer, and the fonts are TrueType fonts that are not resident in the printer itself. In such circumstances, some applications (including PageMaker and MGXDraw) misinterpret the flag and believe the font to be device-resident. (TrueType fonts can be uploaded by Windows to printers, and need not be resident on the device itself to be usable.) They then query the printer to see what sizes of the font it supports, and when that fails (because the printer doesn't know about the font until it is uploaded), they incorrectly assume that the font cannot be resized. Setting the DEVICE_FONTTYPE flag to false in such situations prevents the applications from going wrong, and that is what this compatibility bitflag does.20
 Don't send calcsize WM_MOVE:This is bit #17 of the compatibility bits word, with hexadecimal value 0x20000, known by the symbolic name GACF_NCCALCSIZEONMOVE in . This flag forces the WM_NCCALCSIZE message to be sent to a window that is being moved or resized. This is the Windows 3.0 behaviour. In Windows 3.1, the behaviour was changed so that the window message is only sent to those windows that were being resized. It was not sent if the window was merely moved. Some Windows 3.0 applications, however, such as Lotus Notes for example, relied upon always receiving this message.21
 Enum Helv and Times Roman fonts:This is bit #12 of the compatibility bits word, with hexadecimal value 0x1000, known by the symbolic name GACF_ENUMHELVTMSRMN in . This flag works around a problem with applications that refused to work properly unless fonts with the exact names "Helv" and "Tms Rmn" were listed as present on the system by the Windows font enumeration API. The names are trademarks of Linotype company for particular fonts, Helvetica and Times Roman, and since Microsoft didn't ship those Linotype fonts with Windows 3.1, it could not enumerate them as present. This flag causes Windows to enumerate the "MS Sans Serif" and "MS Serif" fonts under the names "Helv" and "Tms Rmn", for compatibility with the applications that don't work without those exact names being used.22
 Force extra windows words:This is bit #8 of the compatibility bits word, with hexadecimal value 0x100, known by the symbolic name GACF_MOREEXTRAWNDWORDS in . This flag works around a problem with applications that assumed the existence of window words (extra items of data associated by Windows with GUI windows) when they had not in fact informed Windows that extra window words were required. Windows 3.1, unlike Windows 3.0, bounds checks all uses of extra window words, and applications that assumed that they could use more space than they had asked for would thus fail. For applications run with this flag set, Windows 3.1 silently increased the total number of words requested by the application by an extra 4 bytes.23
 Force printer text to new band:This is bit #1 of the compatibility bits word, with hexadecimal value 0x2, known by the symbolic name GACF_FORCETEXTBAND in . This flag causes Windows 3.1 to always use two bands when printing, the first for graphics and the second for text. Normally Windows 3.1 tries to print both in a single band. But applications such as WordPerfect assumed that a second band would always exist, and would always be where the text was, as had been the case in Windows 3.0. Freelance Graphics had a similar problem.24
 Force TT fonts to graphics band:This is bit #15 of the compatibility bits word, with hexadecimal value 0x8000, known by the symbolic name GACF_FORCETTGRAPHICS in . This flag was to work around a problem with Freelance Graphics, where it wouldn't print using TrueType fonts unless they were printed as graphics.25
 Global hooks only called for Win16 apps:
 Ignore discardable segment attributes:This is bit #0 of the compatibility bits word, with hexadecimal value 0x1, known by the symbolic name GACF_IGNORENODISCARD in . This flag forces the GEM_NODISCARD flag passed to GlobalAlloc() by a program to be ignored. It worked around a bug in the run-time library supplied with Microsoft's own C compiler, Microsoft C version 6. The run-time library would erroneously set that flag in calls to GlobalAlloc(), and any application compiled with that compiler would thus exhibit the behaviour.26
 Ignore raster fonts:This is bit #9 of the compatibility bits word, with hexadecimal value 0x200, known by the symbolic name GACF_TTIGNORERASTERDUPE in . This flag prevents fonts of the same sizes from being enumerated as both bitmap and TrueType fonts. This was because several applications, including WordPerfect and Visual Basic, were not capable of handling that particular situation correctly.27
 Ignore topmost windows:This is bit #3 of the compatibility bits word, with hexadecimal value 0x8, known by the symbolic name GACF_IGNORETOPMOST in . This flag fixes a particular problem with cc:Mail that caused it to fail on Windows 3.1. It assumed that accessing the first window with GetWindow(HWND,GW_HWND_FIRST) would return it the window of the application that it had just started with WinExec(). But on Windows 3.1, which introduced the idea of "topmost" windows, this was no longer true. The flag caused Windows 3.1 to skip topmost windows when that particular API request was made.28
 Module specific hack:
 No HRGN 1:This is bit #16 of the compatibility bits word, with hexadecimal value 0x10000, known by the symbolic name GACF_NOHRGN1 in . This flag reinstates a bug that existed in Windows 3.0 that was fixed in Windows 3.1. It did so because several applications, such as Microsoft Draw, worked around the bug themselves, and would fail to work correctly when the bug was eliminated. The bug was an error in the return value of the GetUpdateRect() function, whereby in certain situations (where the entire window was invalid) it would return the coördinates of the update rectangle in window coördinates, rather than in logical coördinates as it was supposed to. In Windows 3.1, it always returned the update rectangle in logical coördinates. The applications that worked around the bug would perform the coördinate transform themselves to work around the bug, and end up updating the wrong parts of their windows on Windows 3.1.29
 One graphic band and use print escapes:This is bit #2 of the compatibility bits word, with hexadecimal value 0x4, known by the symbolic name GACF_ONELANDGRXBAND in . This flag causes Windows 3.1 to use a single graphics band when printing in Landscape mode, consuming as much memory as needed for that band, and discarding whatever content would not fit into the band.30
 Subtract clip siblings:This is bit #14 of the compatibility bits word, with hexadecimal value 0x4000, known by the symbolic name GACF_SUBTRACTCLIPSIBS in . This flag causes Windows 3.1 to handle window invalidation differently for top-level windows that do not have the WS_CLIPSIBLINGS window style set, and their chlid windows. (In other words: It affects dialogue boxes and the controls on them.) With the flag set, Windows would not invalidate sibling child windows underneath (in the z-order) other WS_CLIPSIBLINGS child windows. The main reason for the flag was applications such as Lotus Notes 2.1, which implemented its own combo boxes as child windows, rather than as top-level windows (the system default combo box implementation). With this flag set, odd display problems with such windows would disappear.31
 Support multiple printing bands:This is bit #5 of the compatibility bits word, with hexadecimal value 0x20, known by the symbolic name GACF_MULTIPLEBANDS in . This flag causes Windows 3.1 to always use multiple bands for printing, even when one band would be sufficient. This was to work around a problem in Freelance Graphics, which would assume that if only one band existed, and it was the entire page, it was the text band, and would not even attempt to print graphics. On Windows 3.1, the universal printer driver would sometimes be able to handle both text and graphics with a single band. By forcing the use of multiple bands, the problems that this would cause for Freelance Graphics were avoided.32
 TT fonts are device fonts:This is bit #4 of the compatibility bits word, with hexadecimal value 0x10, known by the symbolic name GACF_CALLTTDEVICE in . This flag causes Windows 3.1 to always set the DEVICE_FONTTYPE flag on any TrueType fonts that are enumerated using the Windows EnumFont() API. This was to fix a problem with applications including AmiPro and WordPerfect, both of which assumed that all TrueType fonts available on a printer would be device-resident.33
 Windows 3.1 palette behavior:

Additional flags
Windows 3.1 defined 20 application compatibility flags.34 Windows 95 and 98 defined a further 11 flags, not documented in the KnowledgeBase article and not assigned symbolic constant names in , which are the remainder of the options accessible via the "Advanced Options" menu in Make Compatible:35

Disable 16 color brush cache and 55ms timer:This is bit #29 of the compatibility bits word, with hexadecimal value 0x20000000.
 Disable EMF spooling:This is bit #26 of the compatibility bits word, with hexadecimal value 0x4000000.
 Disable font associations:This is bit #24 of the compatibility bits word, with hexadecimal value 0x1000000.
 Don't attach input thread when journaling, SetActiveWindow == SetForeGroundWindow:This is bit #28 of the compatibility bits word, with hexadecimal value 0x10000000.
 Don't Shutdown/Ignore certain faults/dequote commandline:This is bit #25 of the compatibility bits word, with hexadecimal value 0x2000000.
 Enable 3.x UI features:This is bit #27 of the compatibility bits word, with hexadecimal value 0x8000000.
 Force Win31 printer dev mode size:This is bit #23 of the compatibility bits word, with hexadecimal value 0x800000.
 Increase stack size:This is bit #22 of the compatibility bits word, with hexadecimal value 0x400000.
 Lie about device caps/no SetDIBits validation:This is bit #20 of the compatibility bits word, with hexadecimal value 0x100000.
 Lie about windows version:This is bit #21 of the compatibility bits word, with hexadecimal value 0x200000.
 Mirror fonts in :This is bit #30 of the compatibility bits word, with hexadecimal value 0x40000000.

References
Further reading






"
Category:Windows 95 Category:Windows components Category:Computer configuration









































