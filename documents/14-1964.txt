   Probalign      Probalign   Probalign is a sequence alignment tool that calculates a maximum expected accuracy alignment using partition function posterior probabilities. 1 Base pair probabilities are estimated using an estimate similar to Boltzmann distribution . The partition function is calculated using a dynamic programming approach.  Algorithm  The following describes the algorithm used by probalign to determine the base pair probabilities. 2  Alignment score  To score an alignment of two sequences two things are needed:   a similarity function    σ   (  x  ,  y  )       σ   x  y     \sigma(x,y)   (e.g. PAM , BLOSUM ,...)  affine gap penalty     g   (  k  )    =   α  +   β  k          g  k     α    β  k      g(k)=\alpha+\beta k      The score    S   (  a  )       S  a    S(a)   of an alignment a is defined as:       S   (  a  )    =     ∑     x  i   -   y  j    ∈  a     σ   (   x  i   ,   y  j   )     +  gap cost         S  a       subscript        subscript  x  i    subscript  y  j    a      σ    subscript  x  i    subscript  y  j      gap cost     S(a)=\sum_{x_{i}-y_{j}\in a}\sigma(x_{i},y_{j})+\text{gap cost}     Now the boltzmann weighted score of an alignment a is:       e    S   (  a  )    T    =   e       ∑     x  i   -   y  j    ∈  a      σ   (   x  i   ,   y  j   )     +  gap cost   T    =    (    ∏     x  i   -   y  i    ∈  a     e      ∑     x  i   -   y  j    ∈  a      σ   (   x  i   ,   y  j   )     T     )   ⋅   e    g  a  p  c  o  s  t   T            superscript  e      S  a   T     superscript  e        subscript        subscript  x  i    subscript  y  j    a      σ    subscript  x  i    subscript  y  j      gap cost   T          normal-⋅    subscript  product       subscript  x  i    subscript  y  i    a     superscript  e      subscript        subscript  x  i    subscript  y  j    a      σ    subscript  x  i    subscript  y  j      T      superscript  e      g  a  p  c  o  s  t   T        e^{\frac{S(a)}{T}}=e^{\frac{\sum_{x_{i}-y_{j}\in a}\sigma(x_{i},y_{j})+\text{%
 gap cost}}{T}}=\left(\prod_{x_{i}-y_{i}\in a}e^{\frac{\sum_{x_{i}-y_{j}\in a}%
 \sigma(x_{i},y_{j})}{T}}\right)\cdot e^{\frac{gapcost}{T}}     Where   T   T   T   is a scaling factor.  The probability of an alignment assuming boltzmann distribution is given by      P  r   [  a  |  x  ,  y  ]   =    e    S   (  a  )    T    Z      fragments  P  r   fragments  normal-[  a  normal-|  x  normal-,  y  normal-]       superscript  e      S  a   T    Z     Pr[a|x,y]=\frac{e^{\frac{S(a)}{T}}}{Z}     Where   Z   Z   Z   is the partition function, i.e. the sum of the boltzmann weights of all alignments.  Dynamic Programming  Let    Z   i  ,  j      subscript  Z   i  j     Z_{i,j}   denote the partition function of the prefixes     x  0   ,   x  1   ,  …  ,   x  i       subscript  x  0    subscript  x  1   normal-…   subscript  x  i     x_{0},x_{1},...,x_{i}   and     y  0   ,   y  1   ,  …  ,   y  j       subscript  y  0    subscript  y  1   normal-…   subscript  y  j     y_{0},y_{1},...,y_{j}   . Three different cases are considered:        Z   i  ,  j   M   :      normal-:   subscript   superscript  Z  M    i  j    absent    Z^{M}_{i,j}:   the partition function of all alignments of the two prefixes that end in a match.       Z   i  ,  j   I   :      normal-:   subscript   superscript  Z  I    i  j    absent    Z^{I}_{i,j}:   the partition function of all alignments of the two prefixes that end in an insertion    (  -  ,   y  j   )       subscript  y  j     (-,y_{j})   .       Z   i  ,  j   D   :      normal-:   subscript   superscript  Z  D    i  j    absent    Z^{D}_{i,j}:   the partition function of all alignments of the two prefixes that end in a deletion    (   x  i   ,  -  )      subscript  x  i      (x_{i},-)   .   Then we have     Z   i  ,  j    =    Z   i  ,  j   M   +   Z   i  ,  j   D   +   Z   i  ,  j   I         subscript  Z   i  j       subscript   superscript  Z  M    i  j     subscript   superscript  Z  D    i  j     subscript   superscript  Z  I    i  j       Z_{i,j}=Z^{M}_{i,j}+Z^{D}_{i,j}+Z^{I}_{i,j}     Initialization  The matrixes are initialized as follows:        Z   0  ,  j   M   =   Z   i  ,  0   M   =  0         subscript   superscript  Z  M    0  j     subscript   superscript  Z  M    i  0         0     Z^{M}_{0,j}=Z^{M}_{i,0}=0          Z   0  ,  0   M   =  1       subscript   superscript  Z  M    0  0    1    Z^{M}_{0,0}=1          Z   0  ,  j   D   =  0       subscript   superscript  Z  D    0  j    0    Z^{D}_{0,j}=0          Z   i  ,  0   I   =  0       subscript   superscript  Z  I    i  0    0    Z^{I}_{i,0}=0      Recursion  The partition function for the alignments of two sequences   x   x   x   and   y   y   y   is given by    Z    |  x  |   ,   |  y  |       subscript  Z     x     y      Z_{|x|,|y|}   , which can be recursively computed:        Z   i  ,  j   M   =    Z    i  -  1   ,   j  -  1     ⋅   e    σ   (   x  i   ,   y  j   )    T          subscript   superscript  Z  M    i  j     normal-⋅   subscript  Z     i  1     j  1      superscript  e      σ    subscript  x  i    subscript  y  j     T       Z^{M}_{i,j}=Z_{i-1,j-1}\cdot e^{\frac{\sigma(x_{i},y_{j})}{T}}          Z   i  ,  j   D   =     Z    i  -  1   ,  j   D   ⋅   e   β  T     +    Z    i  -  1   ,  j   M   ⋅   e    g   (  1  )    T     +    Z    i  -  1   ,  j   I   ⋅   e    g   (  1  )    T           subscript   superscript  Z  D    i  j       normal-⋅   subscript   superscript  Z  D      i  1   j     superscript  e    β  T      normal-⋅   subscript   superscript  Z  M      i  1   j     superscript  e      g  1   T      normal-⋅   subscript   superscript  Z  I      i  1   j     superscript  e      g  1   T        Z^{D}_{i,j}=Z^{D}_{i-1,j}\cdot e^{\frac{\beta}{T}}+Z^{M}_{i-1,j}\cdot e^{\frac%
 {g(1)}{T}}+Z^{I}_{i-1,j}\cdot e^{\frac{g(1)}{T}}         Z   i  ,  j   I     subscript   superscript  Z  I    i  j     Z^{I}_{i,j}   analogously   Base pair probability  Finally the probability that positions    x  i     subscript  x  i    x_{i}   and    y  j     subscript  y  j    y_{j}   form a base pair is given by:      P   (   x  i   -   y  j   |  x  ,  y  )   =     Z    i  -  1   ,   j  -  1     ⋅   e    σ   (   x  i   ,   y  j   )    T    ⋅   Z    i  ′   ,   j  ′    ′     Z    |  x  |   ,   |  y  |         fragments  P   fragments  normal-(   subscript  x  i     subscript  y  j   normal-|  x  normal-,  y  normal-)       normal-⋅   subscript  Z     i  1     j  1      superscript  e      σ    subscript  x  i    subscript  y  j     T     subscript   superscript  Z  normal-′     superscript  i  normal-′    superscript  j  normal-′       subscript  Z     x     y        P(x_{i}-y_{j}|x,y)=\frac{Z_{i-1,j-1}\cdot e^{\frac{\sigma(x_{i},y_{j})}{T}}%
 \cdot Z^{\prime}_{i^{\prime},j^{\prime}}}{Z_{|x|,|y|}}        Z  ′   ,   i  ′   ,   j  ′       superscript  Z  normal-′    superscript  i  normal-′    superscript  j  normal-′     Z^{\prime},i^{\prime},j^{\prime}   are the respective values for the recalculated   Z   Z   Z   with inversed base pair strings.  See also   ProbCons  Multiple Sequence Alignment   References  External links   Probalign Webservice   "  Category:Sequence alignment algorithms     U. Roshan and D. R. Livesay, Probalign: multiple sequence alignment using partition function posterior probabilities, Bioinformatics, 22(22):2715-21, 2006 ([ http://bioinformatics.oxfordjournals.org/cgi/reprint/btl472?ijkey=GR3m5VV6yTz1jEx&keytype; ;=ref PDF]) ↩  Lecture "Bioinformatics II" at University of Freiburg ↩     