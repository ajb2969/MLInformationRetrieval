   Disjunctive normal form      Disjunctive normal form  {{refimprove|date=November 2010}}In [[boolean logic]], a '''disjunctive normal form''' (DNF) is a stand ardization (or normalization) of a logical formula which is a disjunction of conjunctive clauses ; it can also be described as an OR of ANDs, a sum of products , or (in philosophical logic) a cluster concept . As a normal form , it is useful in automated theorem proving . A logical formula is considered to be in DNF if and only if it is a disjunction of one or more conjunctions of one or more literals . A DNF formula is in full disjunctive normal form if each of its variables appears exactly once in every clause. As in conjunctive normal form (CNF), the only propositional operators in DNF are and , or , and not . The not operator can only be used as part of a literal, which means that it can only precede a propositional variable . For example, all of the following formulas are in DNF:       (   A  and  ¬  B  and  ¬  C   )    (   ¬  D  and  E  and  F   )         A  italic- and   B  italic- and   C      D  italic- and  E  italic- and  F     (A\and\neg B\and\neg C)(\neg D\and E\and F)          (   A  and  B   )   C        A  italic- and  B   C    (A\and B)C   but and also      A  and  B      A  italic- and  B    A\and B         A    A   A\!     However, the following formulas are NOT in DNF:      ¬   (   A  B   )         A  B     \neg(AB)   — NOT is the outermost operator      A   (   B  and   (   C  D   )    )       A    B  italic- and    C  D      A(B\and(CD))   — an OR is nested within an AND  Converting a formula to DNF involves using logical equivalences , such as the double negative elimination , De Morgan's laws , and the distributive law .  All logical formulas can be converted into disjunctive normal form. However, in some cases conversion to DNF can lead to an exponential explosion of the formula. For example, in DNF, logical formulas of the following form have 2 n terms:       (    X  1    Y  1    )   and   (    X  2    Y  2    )   and  …  and   (    X  n    Y  n    )          subscript  X  1    subscript  Y  1    italic- and     subscript  X  2    subscript  Y  2    italic- and  normal-…  italic- and     subscript  X  n    subscript  Y  n      (X_{1}Y_{1})\and(X_{2}Y_{2})\and\dots\and(X_{n}Y_{n})     Any particular Boolean function can be represented by one and only one full disjunctive normal form, one of the two canonical forms .  An important variation used in the study of computational complexity is k-DNF . A formula is in k-DNF if it is in DNF and each clause contains at most k literals. Unlike the corresponding subclasses of conjunctive normal form for k>=3, there is no easy algorithm to convert an arbitrary instance of a formula in DNF to k-DNF.  The following is a formal grammar for DNF:   disjunct → ( conjunct ∨ disjunct )  disjunct → conjunct  conjunct → ( literal ∧ conjunct )  conjunct → literal  literal → ¬ variable  literal → variable   Where variable is any variable.  See also   Algebraic normal form  Boolean function  Boolean-valued function  Conjunctive normal form  Horn clause  Karnaugh map  Logical graph  Propositional logic  Quine–McCluskey algorithm  Truth table   External links    Java applet for converting boolean logic expressions to CNF and DNF, showing the laws used   "  Category:Normal forms (logic)   