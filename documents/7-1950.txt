   List of knapsack problems      List of knapsack problems   The knapsack problem is one of the most studied problems in combinatorial optimization , with many real-life applications. For this reason, many special cases and generalizations have been examined.  Common to all versions are a set of n items, with each item    1  ≤  j  ≤  n        1  j       n     1\leq j\leq n   having an associated profit p j ,weight w j . The binary decision variable x j is used to select the item. The objective is to pick some of the items, with maximal total profit, while obeying that the maximum total weight of the chosen items must not exceed W . Generally, these coefficients are scaled to become integers, and they are almost always assumed to be positive.  The knapsack problem in its most basic form:      maximize     ∑   j  =  1   n     p  j    x  j        superscript   subscript     j  1    n      subscript  p  j    subscript  x  j      \sum_{j=1}^{n}p_{j}x_{j}         subject to          ∑   j  =  1   n     w  j    x  j     ≤  W   ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x  j     W    \sum_{j=1}^{n}w_{j}x_{j}\leq W,              x  j   ∈   {  0  ,  1  }        subscript  x  j    0  1     x_{j}\in\{0,1\}        __TOC__  Direct generalizations  One common variant is that each item can be chosen multiple times. The bounded knapsack problem specifies, for each item j , an upper bound u j (which may be a positive integer, or infinity) on the number of times item j can be selected:      maximize     ∑   j  =  1   n     p  j    x  j        superscript   subscript     j  1    n      subscript  p  j    subscript  x  j      \sum_{j=1}^{n}p_{j}x_{j}         subject to          ∑   j  =  1   n     w  j    x  j     ≤  W   ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x  j     W    \sum_{j=1}^{n}w_{j}x_{j}\leq W,               u  j   ≥   x  j   ≥  0   ,   x  j      formulae-sequence       subscript  u  j    subscript  x  j        0     subscript  x  j     u_{j}\geq x_{j}\geq 0,x_{j}   integral for all j     The unbounded knapsack problem (sometimes called the integer knapsack problem ) does not put any upper bounds on the number of times an item may be selected:      maximize     ∑   j  =  1   n     p  j    x  j        superscript   subscript     j  1    n      subscript  p  j    subscript  x  j      \sum_{j=1}^{n}p_{j}x_{j}         subject to          ∑   j  =  1   n     w  j    x  j     ≤  W   ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x  j     W    \sum_{j=1}^{n}w_{j}x_{j}\leq W,              x  j   ≥   0  ,   x  j         subscript  x  j    0   subscript  x  j      x_{j}\geq 0,x_{j}   integral for all j     The unbounded variant was shown to be NP-complete in 1975 by Lueker. 1 Both the bounded and unbounded variants admit an FPTAS (essentially the same as the one used in the 0-1 knapsack problem).  If the items are subdivided into k classes denoted    N  i     subscript  N  i    N_{i}   , and exactly one item must be taken from each class, we get the multiple-choice knapsack problem :      maximize     ∑   i  =  1   k     ∑   j  ∈   N  i       p   i  j     x   i  j          superscript   subscript     i  1    k     subscript     j   subscript  N  i        subscript  p    i  j     subscript  x    i  j        \sum_{i=1}^{k}\sum_{j\in N_{i}}p_{ij}x_{ij}         subject to          ∑   i  =  1   k     ∑   j  ∈   N  i       w   i  j     x   i  j       ≤  W   ,        superscript   subscript     i  1    k     subscript     j   subscript  N  i        subscript  w    i  j     subscript  x    i  j       W    \sum_{i=1}^{k}\sum_{j\in N_{i}}w_{ij}x_{ij}\leq W,                ∑   j  ∈   N  i      x   i  j     =  1   ,        subscript     j   subscript  N  i      subscript  x    i  j     1    \sum_{j\in N_{i}}x_{ij}=1,              x   i  j    ∈   {  0  ,  1  }        subscript  x    i  j     0  1     x_{ij}\in\{0,1\}        If for each item the profits and weights are identical, we get the subset sum problem (often the corresponding decision problem is given instead):      maximize     ∑   j  =  1   n     p  j    x  j        superscript   subscript     j  1    n      subscript  p  j    subscript  x  j      \sum_{j=1}^{n}p_{j}x_{j}         subject to          ∑   j  =  1   n     p  j    x  j     ≤  W   ,        superscript   subscript     j  1    n      subscript  p  j    subscript  x  j     W    \sum_{j=1}^{n}p_{j}x_{j}\leq W,              x  j   ∈   {  0  ,  1  }        subscript  x  j    0  1     x_{j}\in\{0,1\}        If we have n items and m knapsacks with capacities    W  i     subscript  W  i    W_{i}   , we get the multiple knapsack problem :      maximize     ∑   i  =  1   m     ∑   j  =  1   n     p  j    x   i  j          superscript   subscript     i  1    m     superscript   subscript     j  1    n      subscript  p  j    subscript  x    i  j        \sum_{i=1}^{m}\sum_{j=1}^{n}p_{j}x_{ij}         subject to          ∑   j  =  1   n     w  j    x   i  j      ≤   W  i    ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x    i  j       subscript  W  i     \sum_{j=1}^{n}w_{j}x_{ij}\leq W_{i},                ∑   i  =  1   m    x   i  j     ≤  1   ,        superscript   subscript     i  1    m    subscript  x    i  j     1    \sum_{i=1}^{m}x_{ij}\leq 1,              x   i  j    ∈   {  0  ,  1  }        subscript  x    i  j     0  1     x_{ij}\in\{0,1\}        As a special case of the multiple knapsack problem, when the profits are equal to weights and all bins have the same capacity, we can have multiple subset sum problem .  Quadratic knapsack problem :      maximize      ∑   j  =  1   n     p  j    x  j     +    ∑   i  =  1    n  -  1      ∑   j  =   i  +  1    n     p   i  j     x  i    x  j            superscript   subscript     j  1    n      subscript  p  j    subscript  x  j       superscript   subscript     i  1      n  1      superscript   subscript     j    i  1     n      subscript  p    i  j     subscript  x  i    subscript  x  j        \sum_{j=1}^{n}p_{j}x_{j}+\sum_{i=1}^{n-1}\sum_{j=i+1}^{n}p_{ij}x_{i}x_{j}         subject to          ∑   j  =  1   n     w  j    x  j     ≤  W   ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x  j     W    \sum_{j=1}^{n}w_{j}x_{j}\leq W,              x  j   ∈   {  0  ,  1  }        subscript  x  j    0  1     x_{j}\in\{0,1\}        Set-Union Knapsack Problem :  SUKP is defined by Kellerer et al 2 (on page 423) as follows:   Given a set of   n   n   n   items    N  =   {  1  ,  …  ,  n  }       N   1  normal-…  n     N=\{1,\ldots,n\}   and a set of   m   m   m   so-called elements    P  =   {  1  ,  …  ,  m  }       P   1  normal-…  m     P=\{1,\ldots,m\}   , each item   j   j   j   corresponds to a subset    P  j     subscript  P  j    P_{j}   of the element set   P   P   P   . The items   j   j   j   have non-negative profits    p  j     subscript  p  j    p_{j}   ,    j  =   1  ,  …  ,  n       j   1  normal-…  n     j=1,\ldots,n   , and the elements   i   i   i   have non-negative weights    w  i     subscript  w  i    w_{i}   ,    i  =   1  ,  …  ,  m       i   1  normal-…  m     i=1,\ldots,m   . The total weight of a set of items is given by the total weight of the elements of the union of the corresponding element sets. The objective is to find a subset of the items with total weight not exceeding the knapsack capacity and maximal profit.   Multiple constraints  If there is more than one constraint (for example, both a volume limit and a weight limit, where the volume and weight of each item are not related), we get the multiply constrained knapsack problem , multidimensional knapsack problem , or m - dimensional knapsack problem . (Note, "dimension" here does not refer to the shape of any items.) This has 0-1, bounded, and unbounded variants; the unbounded one is shown below.      maximize     ∑   j  =  1   n     p  j    x  j        superscript   subscript     j  1    n      subscript  p  j    subscript  x  j      \sum_{j=1}^{n}p_{j}x_{j}         subject to          ∑   j  =  1   n     w   i  j     x  j     ≤   W  i    ,        superscript   subscript     j  1    n      subscript  w    i  j     subscript  x  j      subscript  W  i     \sum_{j=1}^{n}w_{ij}x_{j}\leq W_{i},              x  j   ≥  0       subscript  x  j   0    x_{j}\geq 0   ,    x  j     subscript  x  j    x_{j}   integer     The 0-1 variant (for any fixed    m  ≥  2      m  2    m\geq 2   ) was shown to be NP-complete around 1980 and more strongly, has no FPTAS unless P=NP. 3 4  The bounded and unbounded variants (for any fixed    m  ≥  2      m  2    m\geq 2   ) also exhibit the same hardness. 5  For any fixed    m  ≥  2      m  2    m\geq 2   , these problems do admit a pseudo-polynomial time algorithm (similar to the one for basic knapsack) and a PTAS . 6  Knapsack-like problems  If all the profits are 1, we can try to minimize the number of items which exactly fill the knapsack:      minimize     ∑   j  =  1   n    x  j       superscript   subscript     j  1    n    subscript  x  j     \sum_{j=1}^{n}x_{j}         subject to          ∑   j  =  1   n     w  j    x  j     =  W   ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x  j     W    \sum_{j=1}^{n}w_{j}x_{j}=W,               x  j   ∈   {  0  ,  1  }    ,       subscript  x  j    0  1     x_{j}\in\{0,1\},        If we have a number of containers (of the same size), and we wish to pack all n items in as few containers as possible, we get the bin packing problem , which is modelled by having indicator variables      y  i   =  1   ⇔      normal-⇔     subscript  y  i   1   absent    y_{i}=1\Leftrightarrow   container i is being used:      minimize     ∑   i  =  1   n    y  i       superscript   subscript     i  1    n    subscript  y  i     \sum_{i=1}^{n}y_{i}         subject to          ∑   j  =  1   n     w  j    x   i  j      ≤   W   y  i     ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x    i  j        W   subscript  y  i      \sum_{j=1}^{n}w_{j}x_{ij}\leq Wy_{i},               ∑   i  =  1   n    x   i  j     =  1        superscript   subscript     i  1    n    subscript  x    i  j     1    \sum_{i=1}^{n}x_{ij}=1              y  i   ∈   {  0  ,  1  }        subscript  y  i    0  1     y_{i}\in\{0,1\}              x   i  j    ∈   {  0  ,  1  }        subscript  x    i  j     0  1     x_{ij}\in\{0,1\}        The cutting stock problem is identical to the bin packing problem , but since practical instances usually have far fewer types of items, another formulation is often used. Item j is needed B j times, each "pattern" of items which fit into a single knapsack have a variable, x i (there are m patterns), and pattern i uses item j  b ij times:      minimize     ∑   i  =  1   m    x  i       superscript   subscript     i  1    m    subscript  x  i     \sum_{i=1}^{m}x_{i}         subject to          ∑   i  =  1   m     b   i  j     x  i     ≤   B  j    ,        superscript   subscript     i  1    m      subscript  b    i  j     subscript  x  i      subscript  B  j     \sum_{i=1}^{m}b_{ij}x_{i}\leq B_{j},              x  i   ∈   {  0  ,  1  ,  …  ,  n  }        subscript  x  i    0  1  normal-…  n     x_{i}\in\{0,1,\ldots,n\}        If, to the multiple choice knapsack problem, we add the constraint that each subset is of size n and remove the restriction on total weight, we get the assignment problem , which is also the problem of finding a maximal bipartite matching :      maximize     ∑   i  =  1   k     ∑   j  =  1   n     p   i  j     x   i  j          superscript   subscript     i  1    k     superscript   subscript     j  1    n      subscript  p    i  j     subscript  x    i  j        \sum_{i=1}^{k}\sum_{j=1}^{n}p_{ij}x_{ij}         subject to          ∑   i  =  1   n    x   i  j     =  1   ,        superscript   subscript     i  1    n    subscript  x    i  j     1    \sum_{i=1}^{n}x_{ij}=1,                ∑   j  =  1   n    x   i  j     =  1   ,        superscript   subscript     j  1    n    subscript  x    i  j     1    \sum_{j=1}^{n}x_{ij}=1,              x   i  j    ∈   {  0  ,  1  }        subscript  x    i  j     0  1     x_{ij}\in\{0,1\}        In the Maximum Density Knapsack variant there is an initial weight    w  0     subscript  w  0    w_{0}   , and we maximize the density of selected of items which do not violate the capacity constraint: 7      maximize       ∑   j  =  1   n      x  j    p  j       w  0   +     ∑   j  =  1   n      x  j    w  j            superscript   subscript     j  1    n      subscript  x  j    subscript  p  j        subscript  w  0     superscript   subscript     j  1    n      subscript  x  j    subscript  w  j        \frac{\sum_{j=1}^{n}x_{j}p_{j}}{w_{0}+\sum_{j=1}^{n}x_{j}w_{j}}         subject to          ∑   j  =  1   n     w  j    x  j     ≤  W   ,        superscript   subscript     j  1    n      subscript  w  j    subscript  x  j     W    \sum_{j=1}^{n}w_{j}x_{j}\leq W,               x  j   ∈   {  0  ,  1  }    ,       subscript  x  j    0  1     x_{j}\in\{0,1\},        Although less common than those above, several other knapsack-like problems exist, including:   Nested knapsack problem  Collapsing knapsack problem  Nonlinear knapsack problem  Inverse-parametric knapsack problem   The last three of these are discussed in Kellerer et al's reference work, Knapsack Problems . 8  References     "Algorithms for Knapsack Problems" , D. Pisinger. Ph.D. thesis, DIKU, University of Copenhagen, Report 95/1 (1995).   "  Category:Combinatorial optimization     ↩  ↩  ↩  ↩  ↩   Cohen, R. and Katzir, L. 2008. The Generalized Maximum Coverage Problem . Inf. Process. Lett . 108, 1 (Sep. 2008), 15-22. ↩      