   Trace monoid      Trace monoid   In mathematics and computer science, a trace is a set of strings, wherein certain letters in the string are allowed to commute , but others are not. It generalizes the concept of a string, by not forcing the letters to always be in a fixed order, but allowing certain reshufflings to take place. Traces were introduced by Cartier and Foata in 1969 to give a combinatorial proof of MacMahon's Master theorem . Traces are used in theories of concurrent computation , where commuting letters stand for portions of a job that can execute independently of one another, while non-commuting letters stand for locks, synchronization points or thread joins . 1  The trace monoid or free partially commutative monoid is a monoid of traces. In a nutshell, it is constructed as follows: sets of commuting letters are given by an independency relation . These induce an equivalence relation of equivalent strings; the elements of the equivalence classes are the traces. The equivalence relation then partitions up the free monoid (the set of all strings of finite length) into a set of equivalence classes; the result is still a monoid; it is a quotient monoid and is called the trace monoid . The trace monoid is universal, in that all homomorphic monoids are in fact isomorphic.  Trace monoids are commonly used to model concurrent computation , forming the foundation for process calculi . They are the object of study in trace theory. The utility of trace monoids comes from the fact that they are isomorphic to the monoid of dependency graphs; thus allowing algebraic techniques to be applied to graphs, and vice versa. They are also isomorphic to history monoids, which model the history of computation of individual processes in the context of all scheduled processes on one or more computers.  Trace  Let    Σ  *     superscript  normal-Σ     \Sigma^{*}   denote the free monoid, that is, the set of all strings written in the alphabet   Σ   normal-Σ   \Sigma   . Here, the asterisk denotes, as usual, the Kleene star . An independency relation    I   I   I   on   Σ   normal-Σ   \Sigma   then induces a binary relation   ∼   similar-to   \sim   on    Σ  *     superscript  normal-Σ     \Sigma^{*}   , where    u  ∼   v      similar-to  u  v    u\sim v\,   if and only if there exist     x  ,  y   ∈   Σ  *        x  y    superscript  normal-Σ      x,y\in\Sigma^{*}   , and a pair     (  a  ,  b  )   ∈  I       a  b   I    (a,b)\in I   such that    u  =   x  a  b  y       u    x  a  b  y     u=xaby   and    v  =   x  b  a  y       v    x  b  a  y     v=xbay   . Here,    u  ,  v  ,  x     u  v  x    u,v,x   and   y   y   y   are understood to be strings (elements of    Σ  *     superscript  normal-Σ     \Sigma^{*}   ), while   a   a   a   and   b   b   b   are letters (elements of   Σ   normal-Σ   \Sigma   ).  The trace is defined as the symmetric, reflexive and transitive closure of   ∼   similar-to   \sim   . The trace is thus an equivalence relation on    Σ  *     superscript  normal-Σ     \Sigma^{*}   , and is denoted by    ≡  D     subscript   D    \equiv_{D}   . The subscript D on the equivalence simply denotes that the equivalence is obtained from the independency I induced by the dependency D . Clearly, different dependencies will give different equivalence relations.  The transitive closure simply implies that    u  ≡  v      u  v    u\equiv v   if and only if there exists a sequence of strings    (   w  0   ,   w  1   ,  ⋯  ,   w  n   )      subscript  w  0    subscript  w  1   normal-⋯   subscript  w  n     (w_{0},w_{1},\cdots,w_{n})   such that    u  ∼    w  0       similar-to  u   subscript  w  0     u\sim w_{0}\,   and    v  ∼    w  n       similar-to  v   subscript  w  n     v\sim w_{n}\,   and     w  i   ∼    w   i  +  1        similar-to   subscript  w  i    subscript  w    i  1      w_{i}\sim w_{i+1}\,   for all    0  ≤  i  <  n        0  i       n     0\leq i   .  The trace monoid, commonly denoted as    𝕄   (  D  )       𝕄  D    \mathbb{M}(D)   , is defined as the quotient monoid      𝕄   (  D  )   =   Σ  *   /   ≡  D   .     fragments  M   fragments  normal-(  D  normal-)     superscript  normal-Σ      subscript   D   normal-.    \mathbb{M}(D)=\Sigma^{*}/\equiv_{D}.     The homomorphism       ϕ  D   :    Σ  *   →   𝕄   (  D  )        normal-:   subscript  ϕ  D    normal-→   superscript  normal-Σ      𝕄  D      \phi_{D}:\Sigma^{*}\to\mathbb{M}(D)     is commonly referred to as the natural homomorphism or canonical homomorphism . That the terms natural or canonical are deserved follows from the fact that this morphism embodies a universal property, as discussed in a later section.  Examples  Consider the alphabet    Σ  =   {  a  ,  b  ,  c  }       normal-Σ   a  b  c     \Sigma=\{a,b,c\}   . A possible dependency relation is        D    =       {  a  ,  b  }   ×   {  a  ,  b  }    ∪    {  a  ,  c  }   ×   {  a  ,  c  }            =       {  a  ,  b  }   2   ∪    {  a  ,  c  }   2           =     {   (  a  ,  b  )   ,   (  b  ,  a  )   ,   (  a  ,  c  )   ,   (  c  ,  a  )   ,   (  a  ,  a  )   ,   (  b  ,  b  )   ,   (  c  ,  c  )   }         D       a  b    a  b        a  c    a  c       absent      superscript   a  b   2    superscript   a  c   2      absent     a  b    b  a    a  c    c  a    a  a    b  b    c  c       \begin{matrix}D&=&\{a,b\}\times\{a,b\}\quad\cup\quad\{a,c\}\times\{a,c\}\\
 &=&\{a,b\}^{2}\cup\{a,c\}^{2}\\
 &=&\{(a,b),(b,a),(a,c),(c,a),(a,a),(b,b),(c,c)\}\end{matrix}     The corresponding independency is       I  D   =   {   (  b  ,  c  )   ,   (  c  ,  b  )   }        subscript  I  D     b  c    c  b      I_{D}=\{(b,c)\,,\,(c,b)\}     Therefore, the letters    b  ,  c     b  c    b,c   commute. Thus, for example, a trace equivalence class for the string    a  b  a  b  a  b  b  c  a      a  b  a  b  a  b  b  c  a    abababbca   would be        [   a  b  a  b  a  b  b  c  a   ]   D   =   {   a  b  a  b  a  b  b  c   a    ,   a  b  a  b  a  b  c  b   a    ,   a  b  a  b  a  c  b  b  a   }        subscript   delimited-[]    a  b  a  b  a  b  b  c  a    D      a  b  a  b  a  b  b  c  a     a  b  a  b  a  b  c  b  a     a  b  a  b  a  c  b  b  a      [abababbca]_{D}=\{abababbca\,,\;abababcba\,,\;ababacbba\}     The equivalence class     [   a  b  a  b  a  b  b  c  a   ]   D     subscript   delimited-[]    a  b  a  b  a  b  b  c  a    D    [abababbca]_{D}   is an element of the trace monoid.  Properties  The cancellation property states that equivalence is maintained under right cancellation . That is, if    w  ≡  v      w  v    w\equiv v   , then     (   w  ÷  a   )   ≡   (   v  ÷  a   )         w  a     v  a     (w\div a)\equiv(v\div a)   . Here, the notation    w  ÷  a      w  a    w\div a   denotes right cancellation, the removal of the first occurrence of the letter a from the string w , starting from the right-hand side. Equivalence is also maintained by left-cancellation. Several corollaries follow:   Embedding    w  ≡  v      w  v    w\equiv v   if and only if     x  w  y   ≡   x  v  y         x  w  y     x  v  y     xwy\equiv xvy   for strings x and y . Thus, the trace monoid is a syntactic monoid.    Independence: if     u  a   ≡   v  b         u  a     v  b     ua\equiv vb   and    a  ≠  b      a  b    a\neq b   , then a is independent of b . That is,     (  a  ,  b  )   ∈   I  D        a  b    subscript  I  D     (a,b)\in I_{D}   . Furthermore, there exists a string w such that    u  =   w  b       u    w  b     u=wb   and    v  =   w  a       v    w  a     v=wa   .    Projection rule: equivalence is maintained under string projection , so that if    w  ≡  v      w  v    w\equiv v   , then      π  Σ    (  w  )    ≡    π  Σ    (  v  )           subscript  π  normal-Σ   w      subscript  π  normal-Σ   v     \pi_{\Sigma}(w)\equiv\pi_{\Sigma}(v)   .   A strong form of Levi's lemma holds for traces. Specifically, if     u  v   ≡   x  y         u  v     x  y     uv\equiv xy   for strings u , v , x , y , then there exist strings     z  1   ,   z  2   ,   z  3       subscript  z  1    subscript  z  2    subscript  z  3     z_{1},z_{2},z_{3}   and    z  4     subscript  z  4    z_{4}   such that     (   w  2   ,   w  3   )   ∈   I  D         subscript  w  2    subscript  w  3     subscript  I  D     (w_{2},w_{3})\in I_{D}   for all letters     w  2   ∈  Σ       subscript  w  2   normal-Σ    w_{2}\in\Sigma   and     w  3   ∈  Σ       subscript  w  3   normal-Σ    w_{3}\in\Sigma   such that    w  2     subscript  w  2    w_{2}   occurs in    z  2     subscript  z  2    z_{2}   and    w  3     subscript  w  3    w_{3}   occurs in    z  3     subscript  z  3    z_{3}   , and        u  ≡    z  1    z  2     ,   v  ≡    z  3    z  4      ,     formulae-sequence    u     subscript  z  1    subscript  z  2       v     subscript  z  3    subscript  z  4       u\equiv z_{1}z_{2},\qquad v\equiv z_{3}z_{4},           x  ≡    z  1    z  3     ,   y  ≡    z  2    z  4      .     formulae-sequence    x     subscript  z  1    subscript  z  3       y     subscript  z  2    subscript  z  4       x\equiv z_{1}z_{3},\qquad y\equiv z_{2}z_{4}.    2  Universal property  A dependency morphism (with respect to a dependency D ) is a morphism      ψ  :    Σ  *   →   M       normal-:  ψ   normal-→   superscript  normal-Σ    M     \psi:\Sigma^{*}\to M\,   to some monoid M , such that the "usual" trace properties hold, namely:   1.     ψ   (  w  )    =   ψ   (  ε  )          ψ  w     ψ  ε     \psi(w)=\psi(\varepsilon)   implies that    w  =  ε      w  ε    w=\varepsilon       2.     (  a  ,  b  )   ∈   I  D        a  b    subscript  I  D     (a,b)\in I_{D}   implies that     ψ   (   a  b   )    =   ψ   (   b  a   )          ψ    a  b      ψ    b  a      \psi(ab)=\psi(ba)\,       3.     ψ   (   u  a   )    =   ψ   (  v  )          ψ    u  a      ψ  v     \psi(ua)=\psi(v)\,   implies that     ψ   (  u  )    =   ψ   (   v  ÷  a   )          ψ  u     ψ    v  a      \psi(u)=\psi(v\div a)       4.     ψ   (   u  a   )    =   ψ   (   v  b   )          ψ    u  a      ψ    v  b      \psi(ua)=\psi(vb)\,   and    a  ≠  b      a  b    a\neq b   imply that     (  a  ,  b  )   ∈   I  D        a  b    subscript  I  D     (a,b)\in I_{D}      Dependency morphisms are universal, in the sense that for a given, fixed dependency D , if    ψ  :    Σ  *   →   M       normal-:  ψ   normal-→   superscript  normal-Σ    M     \psi:\Sigma^{*}\to M\,   is a dependency morphism to a monoid M , then M is isomorphic to the trace monoid    𝕄   (  D  )       𝕄  D    \mathbb{M}(D)   . In particular, the natural homomorphism is a dependency morphism.  Normal forms  There are two well-known normal forms for words in trace monoids. One is the lexicographic normal form, due to Anatolij V. Anisimov and Donald Knuth, and the other is the Foata normal form due to Pierre Cartier and Dominique Foata who studied the trace monoid for its combinatorics in the 1960s.  Trace languages  Just as a formal language can be regarded as a subset of    Σ  *     superscript  normal-Σ     \Sigma^{*}   the set of all possible strings, so then a trace language is defined as subset of    𝕄   (  D  )       𝕄  D    \mathbb{M}(D)   all possible traces.  A language    L  ⊂   Σ  *       L   superscript  normal-Σ      L\subset\Sigma^{*}   is a trace language, or is said to be consistent with dependency D if      L  =   ⋃    [  L  ]   D        L     subscript   delimited-[]  L   D      L=\bigcup[L]_{D}     where        [  L  ]   D   =   {    [  w  ]   D   |   w  ∈  L   }        subscript   delimited-[]  L   D    conditional-set   subscript   delimited-[]  w   D     w  L      [L]_{D}=\{[w]_{D}|w\in L\}     is the trace closure of a set of strings, and       ⋃  T   =   {  w  |     [  w  ]   D   ∈  T   }         T    conditional-set  w     subscript   delimited-[]  w   D   T      \bigcup T=\{w|[w]_{D}\in T\}     is the set of strings in a set of traces.  Notes  References  General references     Antoni Mazurkiewicz, "Introduction to Trace Theory", pp 3–41, in The Book of Traces , V. Diekert, G. Rozenberg, eds. (1995) World Scientific, Singapore ISBN 981-02-2058-8  Volker Diekert, Combinatorics on traces , LNCS 454, Springer, 1990, ISBN 3-540-53031-2, pp. 9–29    Seminal publications   Pierre Cartier and Dominique Foata, Problèmes combinatoires de commutation et réarrangements , Lecture Notes in Mathematics 85, Springer-Verlag, Berlin, 1969, Free 2006 reprint with new appendixes  Antoni Mazurkiewicz, Concurrent program schemes and their interpretations , DAIMI Report PB 78, Aarhus University, 1977   "  Category:Semigroup theory  Category:Formal languages  Category:Free algebraic structures  Category:Combinatorics     Sándor & Crstici (2004) p.161 ↩  Proposition 2.2, Diekert and Métivier 1997. ↩     