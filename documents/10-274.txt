   List of Runge–Kutta methods      List of Runge–Kutta methods   Runge–Kutta methods are methods for the numerical solution of the ordinary differential equation        d  y    d  t    =   f   (  t  ,  y  )            d  y     d  t      f   t  y      \frac{dy}{dt}=f(t,y)\,     which take the form       y   n  +  1    =    y  n   +   h    ∑   i  =  1   s     b  i     k  i             subscript  y    n  1       subscript  y  n     h    superscript   subscript     i  1    s      subscript  b  i    subscript  k  i         y_{n+1}=y_{n}+h\sum_{i=1}^{s}b_{i}k_{i}\,           k  i   =   f   (    t  n   +    c  i   h    ,    y  n   +   h    ∑   j  =  1   s     a   i  j     k  j       )     .       subscript  k  i     f      subscript  t  n      subscript  c  i   h       subscript  y  n     h    superscript   subscript     j  1    s      subscript  a    i  j     subscript  k  j           k_{i}=f\left(t_{n}+c_{i}h,y_{n}+h\sum_{j=1}^{s}a_{ij}k_{j}\right).     The methods listed on this page are each defined by its Butcher tableau , which puts the coefficients of the method in a table as follows:         c  1      a  11      a  12     …     a   1  s         c  2      a  21      a  22     …     a   2  s        ⋮    ⋮    ⋮    ⋱    ⋮       c  s      a   s  1       a   s  2      …     a   s  s            b  1      b  2     …     b  s          subscript  c  1    subscript  a  11    subscript  a  12   normal-…   subscript  a    1  s       subscript  c  2    subscript  a  21    subscript  a  22   normal-…   subscript  a    2  s      normal-⋮  normal-⋮  normal-⋮  normal-⋱  normal-⋮     subscript  c  s    subscript  a    s  1     subscript  a    s  2    normal-…   subscript  a    s  s      absent   subscript  b  1    subscript  b  2   normal-…   subscript  b  s      \begin{array}[]{c|cccc}c_{1}&a_{11}&a_{12}&\dots&a_{1s}\\
 c_{2}&a_{21}&a_{22}&\dots&a_{2s}\\
 \vdots&\vdots&\vdots&\ddots&\vdots\\
 c_{s}&a_{s1}&a_{s2}&\dots&a_{ss}\\
 \hline&b_{1}&b_{2}&\dots&b_{s}\\
 \end{array}     Explicit methods  The explicit methods are those where the matrix    [   a   i  j    ]     delimited-[]   subscript  a    i  j      [a_{ij}]   is lower triangular .  Forward Euler  The Euler method is first order. The lack of stability and accuracy limits its popularity mainly to use as a simple introductory example of a numeric solution method.        0    0         1        0  0    absent  1     \begin{array}[]{c|c}0&0\\
 \hline&1\\
 \end{array}     Explicit midpoint method  The (explicit) midpoint method is a second-order method with two stages (see also the implicit midpoint method below):        0    0    0       1  /  2      1  /  2     0         0    1        0  0  0      1  2     1  2   0    absent  0  1     \begin{array}[]{c|cc}0&0&0\\
 1/2&1/2&0\\
 \hline&0&1\\
 \end{array}     Heun's method  Heun's method is a second-order method with two stages (also known as explicit trapezoid rule):        0    0    0      1    1    0          1  /  2      1  /  2         0  0  0    1  1  0    absent    1  2     1  2      \begin{array}[]{c|cc}0&0&0\\
 1&1&0\\
 \hline&1/2&1/2\\
 \end{array}     Ralston's method  Ralston's method is a second-order method with two stages and a minimum local error bound:        0    0    0       2  /  3      2  /  3     0          1  /  4      3  /  4         0  0  0      2  3     2  3   0    absent    1  4     3  4      \begin{array}[]{c|cc}0&0&0\\
 2/3&2/3&0\\
 \hline&1/4&3/4\\
 \end{array}     Generic second-order method        0    0    0       x    x    0           1  -   1   2  x        1   2  x            0  0  0   missing-subexpression     x  x  0   missing-subexpression     absent    1    1    2  x       1    2  x     missing-subexpression      \begin{array}[]{c|ccc}0&0&0\\
 x&x&0\\
 \hline&1-\frac{1}{2x}&\frac{1}{2x}\\
 \end{array}     Kutta's third-order method        0    0    0    0       1  /  2      1  /  2     0    0      1     -  1     2    0          1  /  6      2  /  3      1  /  6         0  0  0  0      1  2     1  2   0  0    1    1   2  0    absent    1  6     2  3     1  6      \begin{array}[]{c|ccc}0&0&0&0\\
 1/2&1/2&0&0\\
 1&-1&2&0\\
 \hline&1/6&2/3&1/6\\
 \end{array}     Classic fourth-order method  The "original" Runge–Kutta method.        0    0    0    0    0       1  /  2      1  /  2     0    0    0       1  /  2     0     1  /  2     0    0      1    0    0    1    0          1  /  6      1  /  3      1  /  3      1  /  6         0  0  0  0  0      1  2     1  2   0  0  0      1  2   0    1  2   0  0    1  0  0  1  0    absent    1  6     1  3     1  3     1  6      \begin{array}[]{c|cccc}0&0&0&0&0\\
 1/2&1/2&0&0&0\\
 1/2&0&1/2&0&0\\
 1&0&0&1&0\\
 \hline&1/6&1/3&1/3&1/6\\
 \end{array}     3/8-rule fourth-order method  This method doesn't have as much notoriety as the "classical" method, but is just as classical because it was proposed in the same paper (Kutta, 1901).        0    0    0    0    0       1  /  3      1  /  3     0    0    0       2  /  3      -   1  /  3      1    0    0      1    1     -  1     1    0          1  /  8      3  /  8      3  /  8      1  /  8         0  0  0  0  0      1  3     1  3   0  0  0      2  3       1  3    1  0  0    1  1    1   1  0    absent    1  8     3  8     3  8     1  8      \begin{array}[]{c|cccc}0&0&0&0&0\\
 1/3&1/3&0&0&0\\
 2/3&-1/3&1&0&0\\
 1&1&-1&1&0\\
 \hline&1/8&3/8&3/8&1/8\\
 \end{array}     Embedded methods  The embedded methods are designed to produce an estimate of the local truncation error of a single Runge-Kutta step, and as result, allow to control the error with adaptive stepsize . This is done by having two methods in the tableau, one with order p and one with order p-1.  The lower-order step is given by        y   n  +  1   *   =    y  n   +   h    ∑   i  =  1   s     b  i  *    k  i        ,       subscript   superscript  y      n  1       subscript  y  n     h    superscript   subscript     i  1    s      subscript   superscript  b    i    subscript  k  i         y^{*}_{n+1}=y_{n}+h\sum_{i=1}^{s}b^{*}_{i}k_{i},     where the    k  i     subscript  k  i    k_{i}   are the same as for the higher order method. Then the error is        e   n  +  1    =    y   n  +  1    -   y   n  +  1   *    =   h    ∑   i  =  1   s     (    b  i   -   b  i  *    )    k  i       ,         subscript  e    n  1       subscript  y    n  1     subscript   superscript  y      n  1            h    superscript   subscript     i  1    s        subscript  b  i    subscript   superscript  b    i     subscript  k  i         e_{n+1}=y_{n+1}-y^{*}_{n+1}=h\sum_{i=1}^{s}(b_{i}-b^{*}_{i})k_{i},     which is O ( h  p ). The Butcher Tableau for this kind of method is extended to give the values of    b  i  *     subscript   superscript  b    i    b^{*}_{i}            c  1      a  11      a  12     …     a   1  s         c  2      a  21      a  22     …     a   2  s        ⋮    ⋮    ⋮    ⋱    ⋮       c  s      a   s  1       a   s  2      …     a   s  s            b  1      b  2     …     b  s          b  1  *      b  2  *     …     b  s  *          subscript  c  1    subscript  a  11    subscript  a  12   normal-…   subscript  a    1  s       subscript  c  2    subscript  a  21    subscript  a  22   normal-…   subscript  a    2  s      normal-⋮  normal-⋮  normal-⋮  normal-⋱  normal-⋮     subscript  c  s    subscript  a    s  1     subscript  a    s  2    normal-…   subscript  a    s  s      absent   subscript  b  1    subscript  b  2   normal-…   subscript  b  s      missing-subexpression    superscript   subscript  b  1      superscript   subscript  b  2     normal-…   superscript   subscript  b  s        \begin{array}[]{c|cccc}c_{1}&a_{11}&a_{12}&\dots&a_{1s}\\
 c_{2}&a_{21}&a_{22}&\dots&a_{2s}\\
 \vdots&\vdots&\vdots&\ddots&\vdots\\
 c_{s}&a_{s1}&a_{s2}&\dots&a_{ss}\\
 \hline&b_{1}&b_{2}&\dots&b_{s}\\
 &b_{1}^{*}&b_{2}^{*}&\dots&b_{s}^{*}\\
 \end{array}     Heun–Euler  The simplest adaptive Runge–Kutta method involves combining Heun's method , which is order 2, with the Euler method, which is order 1. Its extended Butcher Tableau is:        0        1    1           1  /  2      1  /  2         1    0        0   missing-subexpression    missing-subexpression     1  1   missing-subexpression     absent    1  2     1  2      missing-subexpression   1  0     \begin{array}[]{c|cc}0&\\
 1&1\\
 \hline&1/2&1/2\\
 &1&0\end{array}     The error estimate is used to control the stepsize.  Bogacki–Shampine  The Bogacki–Shampine method has two methods of orders 3 and 2. Its extended Butcher Tableau is:       0      1/2      3/4      1             The first row of b coefficients gives the third-order accurate solution, and the second row has order two.  Fehlberg  The Runge–Kutta–Fehlberg method has two methods of orders 5 and 4. Its extended Butcher Tableau is:       0      1/4      3/8      12/13      1      1/2             The first row of b coefficients gives the fifth-order accurate solution, and the second row has order four.  Cash-Karp  Cash and Karp have modified Fehlberg's original idea. The extended tableau for the Cash–Karp method is       0      1/5      3/10      3/5      1      7/8             The first row of b coefficients gives the fifth-order accurate solution, and the second row has order four.  Dormand–Prince  The extended tableau for the Dormand–Prince method is       0      1/5      3/10      4/5      8/9      1      1             The first row of b coefficients gives the fifth-order accurate solution, and the second row has order four.  Implicit methods  Backward Euler  The backward Euler method is first order. Unconditionally stable and non-oscillatory for linear diffusion problems.        1    1         1        1  1    absent  1     \begin{array}[]{c|c}1&1\\
 \hline&1\\
 \end{array}     Implicit midpoint  The implicit midpoint method is of second order. It is the simplest method in the class of collocation methods known as the Gauss methods . It is a symplectic integrator .         1  /  2      1  /  2          1          1  2     1  2     absent  1     \begin{array}[]{c|c}1/2&1/2\\
 \hline&1\end{array}     Gauss–Legendre methods  These methods are based on the points of Gauss–Legendre quadrature. The Gauss–Legendre method of order four has Butcher tableau:          1  2   -    3   6       1  4       1  4   -    3   6          1  2   +    3   6        1  4   +    3   6       1  4           1  2      1  2             1  2       3   6      1  4       1  4       3   6          1  2       3   6        1  4       3   6      1  4     absent    1  2     1  2      \begin{array}[]{c|cc}\frac{1}{2}-\frac{\sqrt{3}}{6}&\frac{1}{4}&\frac{1}{4}-%
 \frac{\sqrt{3}}{6}\\
 \frac{1}{2}+\frac{\sqrt{3}}{6}&\frac{1}{4}+\frac{\sqrt{3}}{6}&\frac{1}{4}\\
 \hline&\frac{1}{2}&\frac{1}{2}\\
 \end{array}     The Gauss–Legendre method of order six has Butcher tableau:          1  2   -    15   10       5  36       2  9   -    15   15        5  36   -    15   30         1  2       5  36   +    15   24       2  9       5  36   -    15   24          1  2   +    15   10        5  36   +    15   30        2  9   +    15   15       5  36           5  18      4  9      5  18             1  2       15   10      5  36       2  9       15   15        5  36       15   30        1  2       5  36       15   24      2  9       5  36       15   24          1  2       15   10        5  36       15   30        2  9       15   15      5  36     absent    5  18     4  9     5  18      \begin{array}[]{c|ccc}\frac{1}{2}-\frac{\sqrt{15}}{10}&\frac{5}{36}&\frac{2}{9%
 }-\frac{\sqrt{15}}{15}&\frac{5}{36}-\frac{\sqrt{15}}{30}\\
 \frac{1}{2}&\frac{5}{36}+\frac{\sqrt{15}}{24}&\frac{2}{9}&\frac{5}{36}-\frac{%
 \sqrt{15}}{24}\\
 \frac{1}{2}+\frac{\sqrt{15}}{10}&\frac{5}{36}+\frac{\sqrt{15}}{30}&\frac{2}{9}%
 +\frac{\sqrt{15}}{15}&\frac{5}{36}\\
 \hline&\frac{5}{18}&\frac{4}{9}&\frac{5}{18}\\
 \end{array}     Lobatto methods  There are three families of Lobatto methods, called IIIA, IIIB and IIIC. These are named after Rehuel Lobatto . All are implicit methods, have order 2 s − 2 and they all have c 1 = 0 and c s = 1. Unlike any explicit method, it's possible for these methods to have the order greater than the number of stages. Lobatto lived before the classic fourth-order method was popularized by Runge and Kutta.  Lobatto IIIA methods  The Lobatto IIIA methods are collocation methods . The second-order method is known as the trapezoidal rule :        0    0    0      1     1  /  2      1  /  2           1  /  2      1  /  2         0  0  0    1    1  2     1  2     absent    1  2     1  2      \begin{array}[]{c|cc}0&0&0\\
 1&1/2&1/2\\
 \hline&1/2&1/2\\
 \end{array}     The fourth-order method is given by        0    0    0    0       1  /  2      5  /  24      1  /  3      -   1  /  24        1     1  /  6      2  /  3      1  /  6           1  /  6      2  /  3      1  /  6         0  0  0  0      1  2     5  24     1  3       1  24      1    1  6     2  3     1  6     absent    1  6     2  3     1  6      \begin{array}[]{c|ccc}0&0&0&0\\
 1/2&5/24&1/3&-1/24\\
 1&1/6&2/3&1/6\\
 \hline&1/6&2/3&1/6\\
 \end{array}     Lobatto IIIB methods  The Lobatto IIIB methods are not collocation methods, but they can be viewed as discontinuous collocation methods . The second-order method is given by        0     1  /  2     0      1     1  /  2     0          1  /  2      1  /  2         0    1  2   0    1    1  2   0    absent    1  2     1  2      \begin{array}[]{c|cc}0&1/2&0\\
 1&1/2&0\\
 \hline&1/2&1/2\\
 \end{array}     The fourth-order method is given by        0     1  /  6      -   1  /  6      0       1  /  2      1  /  6      1  /  3     0      1     1  /  6      5  /  6     0          1  /  6      2  /  3      1  /  6         0    1  6       1  6    0      1  2     1  6     1  3   0    1    1  6     5  6   0    absent    1  6     2  3     1  6      \begin{array}[]{c|ccc}0&1/6&-1/6&0\\
 1/2&1/6&1/3&0\\
 1&1/6&5/6&0\\
 \hline&1/6&2/3&1/6\\
 \end{array}     Lobatto IIIC methods  The Lobatto IIIC methods also are discontinuous collocation methods. The second-order method is given by        0     1  /  2      -   1  /  2        1     1  /  2      1  /  2           1  /  2      1  /  2         0    1  2       1  2      1    1  2     1  2     absent    1  2     1  2      \begin{array}[]{c|cc}0&1/2&-1/2\\
 1&1/2&1/2\\
 \hline&1/2&1/2\\
 \end{array}     The fourth-order method is given by        0     1  /  6      -   1  /  3       1  /  6        1  /  2      1  /  6      5  /  12      -   1  /  12        1     1  /  6      2  /  3      1  /  6           1  /  6      2  /  3      1  /  6         0    1  6       1  3      1  6       1  2     1  6     5  12       1  12      1    1  6     2  3     1  6     absent    1  6     2  3     1  6      \begin{array}[]{c|ccc}0&1/6&-1/3&1/6\\
 1/2&1/6&5/12&-1/12\\
 1&1/6&2/3&1/6\\
 \hline&1/6&2/3&1/6\\
 \end{array}     Radau methods  Radau methods are fully implicit methods (matrix A of such methods can have any structure). Radau methods attain order 2 s − 1 for s stages. Radau methods are A-stable, but expensive to implement. Also they can suffer from order reduction. The first order Radau method is similar to backward Euler method.  Radau IA methods  The third-order method is given by        0     1  /  4      -   1  /  4         2  /  3      1  /  4      5  /  12           1  /  4      3  /  4         0    1  4       1  4        2  3     1  4     5  12     absent    1  4     3  4      \begin{array}[]{c|cc}0&1/4&-1/4\\
 2/3&1/4&5/12\\
 \hline&1/4&3/4\\
 \end{array}     The fifth-order method is given by        0     1  9        -  1   -   6    18        -  1   +   6    18         3  5   -    6   10       1  9       11  45   +    7   6    360        11  45   -    43   6    360          3  5   +    6   10       1  9       11  45   +    43   6    360        11  45   -    7   6    360            1  9       4  9   +    6   36        4  9   -    6   36          0    1  9         1     6    18         1     6    18         3  5       6   10      1  9       11  45       7    6    360        11  45       43    6    360          3  5       6   10      1  9       11  45       43    6    360        11  45       7    6    360      absent    1  9       4  9       6   36        4  9       6   36       \begin{array}[]{c|ccc}0&\frac{1}{9}&\frac{-1-\sqrt{6}}{18}&\frac{-1+\sqrt{6}}{%
 18}\\
 \frac{3}{5}-\frac{\sqrt{6}}{10}&\frac{1}{9}&\frac{11}{45}+\frac{7\sqrt{6}}{360%
 }&\frac{11}{45}-\frac{43\sqrt{6}}{360}\\
 \frac{3}{5}+\frac{\sqrt{6}}{10}&\frac{1}{9}&\frac{11}{45}+\frac{43\sqrt{6}}{36%
 0}&\frac{11}{45}-\frac{7\sqrt{6}}{360}\\
 \hline&\frac{1}{9}&\frac{4}{9}+\frac{\sqrt{6}}{36}&\frac{4}{9}-\frac{\sqrt{6}}%
 {36}\\
 \end{array}     Radau IIA methods  The c i of this method are zeros of          P  s    (    2  x   -  1   )    -    P   s  -  1     (    2  x   -  1   )     =  0   ,           subscript  P  s       2  x   1       subscript  P    s  1        2  x   1     0    P_{s}(2x-1)-P_{s-1}(2x-1)=0,   where    P  s     subscript  P  s    P_{s}   is the Legendre polynomial of degree s . The third-order method is given by         1  /  3      5  /  12      -   1  /  12        1     3  /  4      1  /  4           3  /  4      1  /  4           1  3     5  12       1  12      1    3  4     1  4     absent    3  4     1  4      \begin{array}[]{c|cc}1/3&5/12&-1/12\\
 1&3/4&1/4\\
 \hline&3/4&1/4\\
 \end{array}     The fifth-order method is given by          2  5   -    6   10        11  45   -    7   6    360        37  225   -    169   6    1800        -   2  225    +    6   75          2  5   +    6   10        37  225   +    169   6    1800        11  45   +    7   6    360        -   2  225    -    6   75        1      4  9   -    6   36        4  9   +    6   36       1  9            4  9   -    6   36        4  9   +    6   36       1  9             2  5       6   10        11  45       7    6    360        37  225       169    6    1800          2  225        6   75          2  5       6   10        37  225       169    6    1800        11  45       7    6    360          2  225        6   75      1      4  9       6   36        4  9       6   36      1  9     absent      4  9       6   36        4  9       6   36      1  9      \begin{array}[]{c|ccc}\frac{2}{5}-\frac{\sqrt{6}}{10}&\frac{11}{45}-\frac{7%
 \sqrt{6}}{360}&\frac{37}{225}-\frac{169\sqrt{6}}{1800}&-\frac{2}{225}+\frac{%
 \sqrt{6}}{75}\\
 \frac{2}{5}+\frac{\sqrt{6}}{10}&\frac{37}{225}+\frac{169\sqrt{6}}{1800}&\frac{%
 11}{45}+\frac{7\sqrt{6}}{360}&-\frac{2}{225}-\frac{\sqrt{6}}{75}\\
 1&\frac{4}{9}-\frac{\sqrt{6}}{36}&\frac{4}{9}+\frac{\sqrt{6}}{36}&\frac{1}{9}%
 \\
 \hline&\frac{4}{9}-\frac{\sqrt{6}}{36}&\frac{4}{9}+\frac{\sqrt{6}}{36}&\frac{1%
 }{9}\\
 \end{array}     References    .   .   .   "  Category:Numerical differential equations  Runge-Kutta methods  Category:Runge–Kutta methods   