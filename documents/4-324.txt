


Μ operator




Μ operator

In computability theory, the μ operator, minimization operator, or unbounded search operator searches for the least natural number with a given property. Adding the μ-operator to the five primitive recursive operators makes it possible to define all computable functions (given that the Church-Turing thesis is true).
Definition
Suppose that R( y, x1, . . ., xk ) is a fixed k+1-ary relation on the natural numbers. The mu operator "μy", in either the unbounded or bounded form, is a "number theoretic function" defined from the natural numbers { 0, 1, 2, . . . }. to the natural numbers. However, "μy" contains a predicate over the natural numbers that delivers true when the predicate is satisfied and false when it is not.
The bounded mu operator appears earlier in Kleene (1952) Chapter IX Primitive Recursive Functions, §45 Predicates, prime factor representation, as:

"

Stephen Kleene notes that any of the six inequality restrictions on the range of the variable y is permitted, i.e. "y y" is defined in terms of two primitive recursive functions called the finite sum Σ and finite product Π, a predicate function that "does the test" and a representing function that converts { t, f } to { 0, 1 }.
In Chapter XI §57 General Recursive Functions, Kleene defines the unbounded μ-operator over the variable y in the following manner,

"
 
 
 
 " (p. 279, where "
 
 
 
 " means "There exists a y such that..."
 

In this instance R itself, or its representing function, delivers 0 when it is satisfied (i.e. delivers true); the function then delivers the number y. No upper bound exists on y, hence no inequality expressions appear in its definition.
For a given R(y) the unbounded mu operator μyR(y) (note no requirement for "(Ey)" ) is a partial function. Kleene makes it as a total function instead (cf. p. 317):

εyR(x, y) =
 
 :* the least y such that R(x,y) [is true], if (Ey)R(x,y)
:* 0, otherwise.


Properties
(i) In context of the primitive recursive functions, where the search variable y of the μ-operator is bounded, e.g. yy R( y, x1,..., xn ) is a primitive recursive function.
(ii) In the context of the (total) recursive functions: Where the search variable y is unbounded but guaranteed to exist for all values xi of the total recursive predicate R's parameters,

(x1), ..., (xn) (Ey) R( y, xi, ... xn ) implies that μyR(y, xi, ... xn) is a total recursive function.
 
here (xi) means "for all xi" and Ey means "there exists at least one value of y such that..." (cf Kleene (1952) p. 279.)
 



then the five primitive recursive operators plus the unbounded-but-total μ-operator give rise to what Kleene called the "general" recursive functions (i.e. total functions defined by the six recursion operators).
(iii) In the context of the partial recursive functions: Suppose that the relation R holds if and only if a partial recursive function converges to zero. And suppose that that partial recursive function converges (to something, not necessarily zero) whenever 
 
 
 
  is defined and y is 
 
 
 
  or smaller. Then the function 
 
 
 
  is also a partial recursive function.
The μ operator is used in the characterization of the computable functions as the μ recursive functions.
In constructive mathematics, the unbounded search operator is related to Markov's principle.
Examples
Example #1: The bounded μ-operator is a primitive recursive function

In the following, to save space the bold-face x i.e. x will represent the string xi, . . ., xn.


The bounded μ-operator can be expressed rather simply in terms of two primitive recursive functions (hereafter "prf") that also are used to define the CASE function—the product-of-terms Π and the sum-of-terms Σ (cf Kleene #B page 224). (As needed, any boundary for the variable such as s≤t or ts (x, s) = f0(x, 0) * f1(x, 1) * . . . * ft(x, t)
 
 :*Σt gt ( x, t ) = g0( x, 0 ) + g1(x, 1 ) + . . . + gz-1(x, z-1 )
Before we proceed we need to introduce a function ψ called "the representing function" of predicate R. Function ψ is defined from inputs ( t= "truth", f="falsity" ) to outputs ( 0, 1 ) (Observe the order!). In this case the input to ψ i.e. { t, f } is coming from the output of R:
:* ψ( R = t ) = 0
:* ψ( R = f ) = 1
Kleene demonstrates that μyy R(y) is defined as follows; we see the product function Π is acting like a Boolean OR operator, and the sum Σ is acting somewhat like a Boolean AND but is producing { Σ≠0, Σ=0 } rather than just { 1, 0 }:

μy y R(y) = Σt Πs≤t ψ( R( x ,t ,s )) =
 
[ ψ( x, 0, 0 ) ] +
[ ψ( x, 1, 0 ) * ψ( x, 1, 1 ) ] +
[ ψ( x, 2, 0 ) * ψ( x, 2, 1 ) * ψ( x, 2, 2 ) ] +
. . . . . . +
[ ψ( x, z-1, 0 ) * ψ( x, z-1, 1 ) * ψ( x, z-1, 2 ) + . . . + ψ ( x, z-1, z-1 ) ]




''Σ is actually a primitive recursion with the base Σ(x, 0) = 0 and the induction step Σ(x, y+1 ) = Σ( x, y ) + Π( x, y ). The product Π is also a primitive recursion Π with base step Π( x, 0 ) = ψ( x, 0 ) and induction step Π( x, y+1 ) = Π( x, y )*ψ( x, y+1 ).
 

The equation is easier if observed with an example, as given by Kleene. He just made up the entries for the representing function ψ(R(y)). He designated the representing functions χ(y) rather than ψ( x, y ):




y

0

1

2

style="background-color:#C0C0C0;" 3

4

5

6

7=z



χ(y)

1

1

1

0

1

0

0




π(y) = Πs≤y χ(s)

1

1

1

0

0

0

0

0



σ(y) = Σt π(t)

1

2

3

3

3

3

3

3



least yy R(y)




3




Example #2: The unbounded μ-operator is not primitive-recursive
The unbounded μ operator—the function μy—is the one commonly defined in the texts. But the reader may wonder why—the modern texts do not state the reason—the unbounded μ-operator is searching for a function R(x, y) to yield zero, rather than some other natural number.

In a footnote Minsky does allow his operator to terminate when the function inside produces a match to the parameter "k"; this example is also useful because it shows another author's format:

" For μt[ φ(t) = k ] "(p. 210)
 



The reason for zero is that the unbounded operator μy will be defined in terms of the function "product" Π with its index y allowed to "grow" as the μ operator searches. As noted in the example above, the product Π x of a string of numbers ψ(x, 0) *, . . ., * ψ(x, y) yields zero whenever one of its members ψ(x, i) is zero:

Πs = ψ(x, 0) * , . . ., * ψ(x, y) = 0
 

if any ψ(x, i)=0 where 0 ≤ i ≤ s. Thus the Π is acting like a Boolean AND.
The function μy produces as "output" a single natural number y = { 0, 1, 2, 3 ... }. However, inside the operator one of a couple "situations" can appear: (a) a "number-theoretic function" χ that produces a single natural number, or (b) a "predicate" R that produces either { t= true, f = false }. (And, in the context of partial recursive functions Kleene later admits a third outcome: "μ = undecided", pp. 332ff ).
Kleene splits his definition of the unbounded μ operator to handle the two situations (a) and (b). For situation (b), before the predicate R(x, y) can serve in an arithmetic capacity in the product Π, its output { t, f } must first be "operated on" by its representing function χ to yield { 0, 1 }. And for situation (a) if one definition is to be used then the number theoretic function χ must produce zero to "satisfy" the μ operator. With this matter settled, he demonstrates with single "Proof III" that either types (a) or (b) together with the five primitive recursive operators yield the (total) recursive functions ... with this proviso for a total function:

That for all parameters x, a demonstration that must be provided to show that a y exists that satisfies (a) μy ψ(x, y) or (b) μy R(x,y).


Kleene also admits a third situation (c) that does not require the demonstration of "for all x a y exists such that ψ(x, y)." He uses this in his proof that more total recursive functions exist than can be enumerated;'' cf footnote Total function demonstration.
Kleene's proof is informal and uses an example similar to the first example. Fbut first he casts the μ-operator into a different form that uses the "product-of-terms" Π operating on function χ that yields a natural number n where n can be any natural number, and 0 in the instance when the u operator's test is "satisfied".

The definition recast with the Π-function:
 
μy yχ(y) =
 
(i): π(x, y) = Πs χ( x, s)

:*(ii): φ(x) = τ( π(x, y), π( x, y' ), y)
:*(iii): τ(z', 0, y) = y ;τ( u, v, w ) is undefined for u = 0 or v > 0.


This is subtle. At first glance the equations seem to be using primitive recursion. But Kleene has not provided us with a base step and an induction step of the general form:
:* base step: φ( 0,x ) = φ( x )
:* induction step: φ( 0,x ) = ψ( y, φ(0,x), x )
What is going on? First, we have to remind ourselves that we have assigned a parameter (a natural number) to every variable xi. Second, we do see a successor-operator at work iterating y (i.e. the y'). And third, we see that the function μy yχ(y, x) is just producing instances of χ(y,x) i.e. χ(0,x), χ(1,x), ... until an instance yields 0. Fourth, when an instance χ(n,x) yields 0 it causes the middle term of τ, i.e. v = π( x, y' ) to yield 0. Finally, when the middle term v = 0, μy yχ(y) executes line (iii) and "exits". Kleene's presentation of equations (ii) and (iii) have been exchanged to make this point that line (iii) represents an exit—an exit taken only when the search successfully finds a y to satisfy χ(y) and the middle product-term π(x, y' ) is 0; the operator then terminates its search with τ(z', 0, y) = y.

τ( π(x, y), π( x, y' ), y), i.e.:
 
τ( π(x, 0), π( x, 1 ), 0),
τ( π(x, 1), π( x, 2 ), 1)
τ( π(x, 2), π( x, 3 ), 2)
τ( π(x, 3), π( x, 4 ), 3)
. . . . . until a match occurs at y=n and then:
τ(z', 0, y) = τ(z', 0, n) = n and the μ operator's search is done.



For the example Kleene "...consider[s] any fixed values of xi, ... xn) and write[s] simply "χ(y)" for "χ(xi, ... xn),y)":




y

0

1

2

style="background-color:#C0C0C0;" 3

4

5

6

7

etc.



χ(y)

3

1

2

0

9

0

1

5

. . .



π(y) = Π s≤y χ(s)

1

3

3

6

0

0

0

0

. . .







↑








least yin="" [="" [[#alternative="" [[counter="" [[peano="" [[primitive="" ]="" a="" abstract="" action="" an="" and="" as="" axioms]]="" boolos-burgess-jeffrey="" can="" clear="" closely="" clr="" consists="" contain="" contents="" definition="" definitions="" demonstration="" described="" each="" equal="" few="" finite="" following="" following,="" follows="" footnote="" footnote.="" four="" from="" function]]s.="" if="" in="" inc="" increment="" indicates="" instruction="" instructions="" ir="" is="" je="" jump="" machine="" machine;="" machine]]="" means="" mentioned="" minsky="" mnemonic="" model="" models="" natural="" number,="" of="" of",="" on="" only="" operator="" p. 21="" p. 60-61="" peculiarity"="" provide="" r="" r(y)="" r.="" recursive="" register="" register"="" register'="" register(s)="" register,="" related="" rename="" respect="" see="" set="" single="" so-called="" state="" such="" symbolism="" table="" table:="" terms="" that="" the="" to="" unbounded="" use="" we="" which="" will="" with="" without="" y1, r2, z)
 
none

IF [ r1 ] = [ r2 ] THEN z → IR
 ELSE [ IR ] +1 → IR


Halt

H

none

[ IR ] → IR

The algorithm for the minimization operator μy [φ( x, y )] will, in essence, create a sequence of instances of the function φ( x, y ) as the value of parameter y (a natural number) increases; the process will continue (see Note † below) until a match occurs between the output of function φ( x, y ) and some pre-established number (usually 0). Thus the evaluation of φ(x, y) requires, at the outset, assignment of a natural number to each of its variables x and an assignment of a "match-number" (usually 0) to a register "w", and a number (usually 0) to register y.

''Note †: The unbounded μ operator will continue this attempt-to-match process ad infinitum or until a match occurs. Thus the "y" register must be unbounded -- it must be able to "hold" a number of arbitrary size. Unlike a "real" computer model, abstract machine models allow this. In the case of a bounded μ operator, a lower-bounded μ operator would start with the contents of y set to a number other than zero. An upper-bounded μ operator would require an additional register "ub" to contain the number that represents the upper bound plus an additional comparison operation; an algorithm could provide for both lower- and upper bounds.''
 

In the following we are assuming that the Instruction Register (IR) encounters the μy "routine" at instruction number "n". Its first action will be to establish a number in a dedicated "w" register—an "example of" the number that function φ( x, y ) must produce before the algorithm can terminate (classically this is the number zero, but see the footnote about the use of numbers other than zero). The algorithm's next action at instructiton "n+1" will be to clear the "y" register -- "y" will act as an "up-counter" that starts from 0. Then at instruction "n+2" the algorithm evaluates its function φ( x, y ) -- we assume this takes j instructions to accomplish—and at the end of its evaluation φ( x, y ) deposits its output in register "φ". At the n+j+3rd instruction the algorithm compares the number in the "w" register (e.g. 0) to the number in the "φ" register—if they are the same the algorithm has succeeded and it escapes through exit; otherwise it increments the contents of the "y" register and loops back with this new y-value to test function φ( x, y ) again.




IR


Instruction

Action on register

Action on Instruction Register IR





n

μy[ φ( x, y ) ]:

CLR ( w )

0 → w

[ IR ] +1 → IR



n+1


CLR ( y )

0 → y

[ IR ] +1 → IR



n+2

loop:

φ ( x, y )

φ( [x], [y] ) → φ

[ IR ] +j+1 → IR



n+j+3


JE (φ, w, exit)

none

CASE: { IF [φ]=[w] THEN exit → IR
 ELSE [IR] +1 → IR }



n+j+4


INC ( y )

[ y ] +1 → y

[ IR ] +1 → IR



n+j+5


JE (0, 0, loop)

Unconditional jump

CASE: { IF [r0] =[r0] THEN loop → IR
 ELSE loop → IR }



n+j+6

exit:

etc.





Footnotes
Total function demonstration
What is mandatory if the function is to be a total function is a demonstration by some other method (e.g. induction) that for each and every combination of values of its parameters xi some natural number y will satisfy the μ-operator so that the algorithm that represents the calculation can terminate:

"...we must always hesitate to assume that a system of equations really defines a general-recursive [i.e. total] function. We normally require auxiliary evidence for this, e.g. in the form of an inductive proof that, for each argument value, the computation terminates with a unique value." (Minsky (1967) p. 186)
 


"In other words, we should not claim that a function is effectively calculable on the ground that it has been shown to be general [i.e. total] recursive, unless the demonstration that it is general recursive is effective."(Kleene (1952) p. 319)
 

For an example of what this means in practice see the examples at mu recursive functions—even the simplest ("improper") subtraction algorithm "x - y = d" can yield, for the undefined cases when x j, rk, z) }




IR


Instruction

Action on register

Action on Instruction Register, IR





n

μy φ( x ):

CLR ( w )

0 → w

[ IR ] +1 → IR



n+1


CLR ( t )

0 → t

[ IR ] +1 → IR



n+2

loop:

φ ( y, x )

φ( [ t ], [ x ] ) → φ

[ IR ] +j+1 → IR



n+j+3


INC ( t )

[ t ] +1 → t

[ IR ] +1 → IR



n+j+4


JNE (φ, w, loop)

none

CASE: { IF [φ] ≠ [w] THEN "exit" → IR
  ELSE [IR] +1 → IR }



n+j+5


INC ( t )

[ t ] +1 → t

[ IR ] +1 → IR



n+j+6

exit:

etc..





The unbounded μ operator is also defined by Boolos-Burgess-Jeffrey (2002) p. 60-61 for a counter machine with an instruction set equivalent to the following:

{ CLR (r), INC (r), DEC (r), JZ (r, z), H }
 

In this version the counter "y" is called "r2", and the function f( x, r2 ) deposits its number in register "r3". Perhaps the reason Boolos-Burgess-Jeffrey clear r3 is to facilitate an unconditional jump to loop; this is often done by use of a dedicated register "0" that contains "0":




IR


Instruction

Action on register

Action on Instruction Register, IR





n

μr2[f(x, r2)]:

CLR ( r2 )

0 → r2

[ IR ] +1 → IR



n+1

loop:

f( y, x )

f( [ t ], [ x ] ) →r3

[ IR ] +j+1 → IR



n+2


JZ ( r3, exit )

none

IF [ r3 ] = 0 THEN exit → IR
 ELSE [ IR ] +1 → IR



n+j+3


CLR ( r3 )

0 → r3

[ IR ] +1 → IR



n+j+4


INC ( r2 )

[ r2 ] +1 → r2

[ IR ] +1 → IR



n+j+5


JZ ( r3, loop)


CASE: { IF [ r3 ] =0 THEN loop → IR
 ELSE [IR] +1 → IR }



n+j+6

exit:

etc..





References

Stephen Kleene (1952) Introduction to Metamathematics, North-Holland Publishing Company, New York, 11th reprint 1971: (2nd edition notes added on 6th reprint).


Marvin L. Minsky (1967), Computation: Finite and Infinite Machines, Prentice-Hall, Inc. Englewood Cliffs, N.J.


On pages 210-215 Minsky shows how to create the μ-operator using the register machine model, thus demonstrating its equivalence to the general recursive functions.
 


George Boolos, John Burgess, Richard Jeffrey (2002), Computability and Logic: Fourth Edition, Cambridge University Press, Cambridge, UK. Cf pp. 70–71.

"
Mu operator
