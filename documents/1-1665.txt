   Elias delta coding      Elias delta coding  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     Elias delta code is a universal code encoding the positive integers developed by Peter Elias . 1  Encoding  To code a number X ≥1:   Let N =⌊log 2  X ⌋ be the highest power of 2 in X , so 2 N ≤ X  N +1.  Let L =⌊log 2  N +1⌋ be the highest power of 2 in N +1, so 2 L ≤ N +1 L +1.  Write L zeros, followed by  the L +1-bit binary representation of N +1, followed by  all but the leading bit (i.e. the last N bits) of X .   An equivalent way to express the same process:   Separate X into the highest power of 2 it contains (2 N ) and the remaining N binary digits.  Encode N +1 with Elias gamma coding .  Append the remaining N binary digits to this representation of N +1.   To represent a number   x   x   x   , Elias delta uses     ⌊    log  2    (  x  )    ⌋   +   2   ⌊    log  2    (    ⌊    log  2    (  x  )    ⌋   +  1   )    ⌋    +  1          subscript   2   x      2      subscript   2         subscript   2   x    1      1    \lfloor\log_{2}(x)\rfloor+2\lfloor\log_{2}(\lfloor\log_{2}(x)\rfloor+1)\rfloor+1   bits. 2  The code begins, using    γ  ′     superscript  γ  normal-′    \gamma^{\prime}   instead of   γ   γ   \gamma   :      Number   N   N+1   Encoding   Implied probability       1 = 2 0   0   1   1   1/2        2 = 2 1 + 0   1   2   0 1 0 ''0''   1/16     3 = 2 1 + 1   1   2   0 1 0 ''1''   1/16        4 = 2 2 + 0   2   3   0 1 1 ''00''   1/32     5 = 2 2 + 1   2   3   0 1 1 ''01''   1/32     6 = 2 2 + 2   2   3   0 1 1 ''10''   1/32     7 = 2 2 + 3   2   3   0 1 1 ''11''   1/32        8 = 2 3 + 0   3   4   00 1 00 ''000''   1/256     9 = 2 3 + 1   3   4   00 1 00 ''001''   1/256     10 = 2 3 + 2   3   4   00 1 00 ''010''   1/256     11 = 2 3 + 3   3   4   00 1 00 ''011''   1/256     12 = 2 3 + 4   3   4   00 1 00 ''100''   1/256     13 = 2 3 + 5   3   4   00 1 00 ''101''   1/256     14 = 2 3 + 6   3   4   00 1 00 ''110''   1/256     15 = 2 3 + 7   3   4   00 1 00 ''111''   1/256        16 = 2 4 + 0   4   5   00 1 01 ''0000''   1/512     17 = 2 4 + 1   4   5   00 1 01 ''0001''   1/512     To decode an Elias delta-coded integer:   Read and count zeros from the stream until you reach the first one. Call this count of zeros L .  Considering the one that was reached to be the first digit of an integer, with a value of 2 L , read the remaining L digits of the integer. Call this integer N +1, and subtract one to get N .  Put a one in the first place of our final output, representing the value 2 N .  Read and append the following N digits.   Example:  001010011  1. 2 leading zeros in 001  2. read 2 more bits i.e. 00101  3. decode N+1 = 00101 = 5  4. get N = 5 − 1 = 4 remaining bits for the complete code i.e. '0011'  5. encoded number = 2 4 + 3 = 19  This code can be generalized to zero or negative integers in the same ways described in Elias gamma coding .  Example code  Encoding  void eliasDeltaEncode( char * source, char * dest)
 {
     IntReader intreader(source);
     BitWriter bitwriter(dest); while (intreader.hasLeft())
     { int num = intreader.getInt(); int len = 0 ; int lengthOfLen = 0 ; for ( int temp = num; temp > 0 ; temp >>= 1 ) // calculate 1+floor(log2(num)) len++; for ( int temp = len; temp > 1 ; temp >>= 1 ) // calculate floor(log2(len)) lengthOfLen++; for ( int i = lengthOfLen; i > 0 ; --i)
             bitwriter.outputBit( 0 ); for ( int i = lengthOfLen; i >= 0 ; --i)
             bitwriter.outputBit((len >> i) & 1 ); for ( int i = len -2 ; i >= 0 ; i--)
             bitwriter.outputBit((num >> i) & 1 );
     }
     bitwriter.close();
     intreader.close();
 }  Decoding  void eliasDeltaDecode( char * source, char * dest)
 {
     BitReader bitreader(source);
     IntWriter intwriter(dest); while (bitreader.hasLeft())
     { int num = 1 ; int len = 1 ; int lengthOfLen = 0 ; while (!bitreader.inputBit()) // potentially dangerous with malformed files. lengthOfLen++; for ( int i = 0 ; i < lengthOfLen; i++)
         {
             len <<= 1 ; if (bitreader.inputBit())
                 len |= 1 ;
         } for ( int i = 0 ; i < len -1 ; i++)
         {
             num <<= 1 ; if (bitreader.inputBit())
                 num |= 1 ;
         }
         intwriter.putInt(num); // write out the value }
     bitreader.close();
     intwriter.close();
 }  Generalizations  Elias delta coding does not code zero or negative integers. One way to code all non negative integers is to add 1 before coding and then subtract 1 after decoding. One way to code all integers is to set up a bijection , mapping integers all integers (0, 1, −1, 2, −2, 3, −3, ...) to strictly positive integers (1, 2, 3, 4, 5, 6, 7, ...) before coding. This bijection can be performed using the "ZigZag" encoding from Protocol Buffers (not to be confused with Zigzag code , nor the JPEG Zig-zag entropy coding ).  References    See also   Elias gamma coding  Elias omega coding   "  Category:Numeral systems  Category:Lossless compression algorithms     ↩     