   Proof compression      Proof compression   In proof theory , an area of mathematical logic , proof compression is the problem of algorithmically compressing formal proofs. The developed algorithms can be used to improve the proofs generated by automated theorem proving tools such as sat-solvers , SMT-solvers , first-order theorem provers and proof assistants .  Problem Representation  In propositional logic a resolution proof of a clause   κ   κ   \kappa   from a set of clauses C is a directed acyclic graph (DAG): the input nodes are axiom inferences (without premises) whose conclusions are elements of C, the resolvent nodes are resolution inferences, and the proof has a node with conclusion   κ   κ   \kappa   . 1  The DAG contains an edge from a node    η  1     subscript  η  1    \eta_{1}   to a node    η  2     subscript  η  2    \eta_{2}   if and only if a premise of    η  1     subscript  η  1    \eta_{1}   is the conclusion of    η  2     subscript  η  2    \eta_{2}   . In this case,    η  1     subscript  η  1    \eta_{1}   is a child of    η  2     subscript  η  2    \eta_{2}   , and    η  2     subscript  η  2    \eta_{2}   is a parent of    η  1     subscript  η  1    \eta_{1}   . A node with no children is a root.  A proof compression algorithm will try to create a new DAG with less nodes that represents a valid proof of   κ   κ   \kappa   or, in some cases, a valid proof of a subset of   κ   κ   \kappa   .  A simple example  Let's take a resolution proof for the clause    {  a  ,  b  ,  c  }     a  b  c    \left\{a,b,c\right\}   from the set of clauses       {   η  1   :     {  a  ,  b  ,  p  }   ,   η  2    :   {  c  ,   ¬  p   }    }       η  1   :   a  ,  b  ,  p   η  2    :   c  ,   ¬  p       η  3   :   a  ,  b  ,  c     p       conditional-set   subscript  η  1    normal-:    a  b  p    subscript  η  2     c     p             normal-:   subscript  η  1    a  b  p   subscript  η  2      normal-:     c     p       normal-:   subscript  η  3    a  b  c     p     \left\{\eta_{1}:\left\{a,b,p\right\},\eta_{2}:\left\{c,\neg p\right\}\right\}%
 \quad\frac{\eta_{1}:a,b,p\quad\quad\eta_{2}:c,\neg p}{\eta_{3}:a,b,c}p     Here we can see:       η  1     subscript  η  1    \eta_{1}   and    η  2     subscript  η  2    \eta_{2}   are input nodes.  The node    η  3     subscript  η  3    \eta_{3}   has a pivot   p   p   p   ,  left resolved literal   p   p   p     right resolved literal    ¬  p       p    \neg p          η  3     subscript  η  3    \eta_{3}   conclusion is the clause    {  a  ,  b  ,  c  }     a  b  c    \left\{a,b,c\right\}         η  3     subscript  η  3    \eta_{3}   premises are the conclusion of nodes    η  1     subscript  η  1    \eta_{1}   and    η  2     subscript  η  2    \eta_{2}   (its parents)  The DAG would be          η  1       η  2          ↖  ↗          η  3           subscript  η  1    missing-subexpression    subscript  η  2      missing-subexpression    normal-↖  absent  normal-↗    missing-subexpression      missing-subexpression    subscript  η  3    missing-subexpression      \begin{array}[]{ccc}\eta_{1}&&\eta_{2}\\
 &\nwarrow\nearrow\\
 &\eta_{3}\end{array}          η  1     subscript  η  1    \eta_{1}   and    η  2     subscript  η  2    \eta_{2}   are parents of    η  3     subscript  η  3    \eta_{3}         η  3     subscript  η  3    \eta_{3}   is a child of    η  1     subscript  η  1    \eta_{1}   and    η  2     subscript  η  2    \eta_{2}         η  3     subscript  η  3    \eta_{3}   is a root of the proof   A (resolution) refutation of C is a resolution proof of   ⊥   bottom   \bot   from C. It is a common that given a node   η   η   \eta   , to refer to the clause   η   η   \eta   or   η   η   \eta   ’s clause meaning the conclusion clause of   η   η   \eta   , and (sub)proof   η   η   \eta   meaning the (sub)proof having   η   η   \eta   as its only root.  In some works it can be found an algebraic representation of a resolution inference . The resolvent of    κ  1     subscript  κ  1    \kappa_{1}   and    κ  2     subscript  κ  2    \kappa_{2}   with pivot   p   p   p   can be denoted as     κ  1    ⊙  p    κ  2       subscript  direct-product  p    subscript  κ  1    subscript  κ  2     \kappa_{1}\odot_{p}\kappa_{2}   . When the pivot is uniquely defined or irrelevant, we omit it and write simply     κ  1   ⊙   κ  2      direct-product   subscript  κ  1    subscript  κ  2     \kappa_{1}\odot\kappa_{2}   . In this way, the set of clauses can be seen as an algebra with a commutative operator; and terms in the corresponding term algebra denote resolution proofs in a notation style that is more compact and more convenient for describing resolution proofs than the usual graph notation.  In our last example the notation of the DAG would be     {  a  ,  b  ,  p  }    ⊙  p    {  c  ,   ¬  p   }       subscript  direct-product  p    a  b  p    c     p      \left\{a,b,p\right\}\odot_{p}\left\{c,\neg p\right\}   or simply      {  a  ,  b  ,  p  }   ⊙   {  c  ,   ¬  p   }    .     direct-product   a  b  p    c     p      \left\{a,b,p\right\}\odot\left\{c,\neg p\right\}.     We can identify         {  a  ,  b  ,  p  }   ⏞    η  1    ⊙     {  c  ,   ¬  p   }   ⏞    η  2     ⏟    η  3      subscript   normal-⏟   direct-product   superscript   normal-⏞   a  b  p     subscript  η  1     superscript   normal-⏞   c     p      subscript  η  2       subscript  η  3     \underbrace{\overbrace{\left\{a,b,p\right\}}^{\eta_{1}}\odot\overbrace{\left\{%
 c,\neg p\right\}}^{\eta_{2}}}_{\eta_{3}}     Compression algorithms  Algorithms for compression of sequent calculus proofs include Cut-introduction and Cut-elimination .  Algorithms for compression of propositional resolution proofs include RecycleUnits , 2  RecyclePivots , 3  RecyclePivotsWithIntersection , 4  LowerUnits , 5  LowerUnivalents , 6  Split , 7  Reduce&Reconstruct; , 8 and Subsumption .  Notes  "  Category:Proof theory     Fontaine, Pascal; Merz, Stephan; Woltzenlogel Paleo, Bruno. Compression of Propositional Resolution Proofs via Partial Regularization . 23rd International Conference on Automated Deduction, 2011. ↩  Bar-Ilan, O.; Fuhrmann, O.; Hoory, S. ; Shacham, O. ; Strichman, O. Linear-time Reductions of Resolution Proofs . Hardware and Software: Verification and Testing, p. 114–128, Springer, 2011. ↩  Bar-Ilan, O.; Fuhrmann, O.; Hoory, S. ; Shacham, O. ; Strichman, O. Linear-time Reductions of Resolution Proofs . Hardware and Software: Verification and Testing, p. 114–128, Springer, 2011. ↩  Fontaine, Pascal; Merz, Stephan; Woltzenlogel Paleo, Bruno. Compression of Propositional Resolution Proofs via Partial Regularization . 23rd International Conference on Automated Deduction, 2011. ↩  Fontaine, Pascal; Merz, Stephan; Woltzenlogel Paleo, Bruno. Compression of Propositional Resolution Proofs via Partial Regularization . 23rd International Conference on Automated Deduction, 2011. ↩  https://github.com/Paradoxika/Skeptik/tree/develop/doc/papers/LUniv ↩  Cotton, Scott. "Two Techniques for Minimizing Resolution Proofs". 13th International Conference on Theory and Applications of Satisfiability Testing, 2010. ↩  Simone, S.F. ; Brutomesso, R. ; Sharygina, N. "An Efficient and Flexible Approach to Resolution Proof Reduction". 6th Haifa Verification Conference, 2010. ↩     