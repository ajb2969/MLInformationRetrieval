   Walk-on-spheres method      Walk-on-spheres method   In mathematics , the walk-on-spheres method (WoS) is a numerical probabilistic algorithm , or Monte-Carlo method , used mainly in order to approximate the solutions of some specific boundary value problem for partial differential equations . 1 2 The WoS method was first introduced by M. E. Muller in 1956 to solve Laplace's equation , 3 and was since then generalized to other problems.  It relies on probabilistic interpretations of PDEs, by simulating paths of Brownian motion (or for some more general variants, diffusion processes ), and it is today one of the most widely used "grid-free" algorithms for generating Brownian paths.  Informal description  Let   Œ©   normal-Œ©   \Omega   be a bounded domain in    ‚Ñù  d     superscript  ‚Ñù  d    \mathbb{R}^{d}   with a sufficiently regular boundary   Œì   normal-Œì   \Gamma   , let h be a function on   Œì   normal-Œì   \Gamma   , and let   x   x   x   be a point inside   Œ©   normal-Œ©   \Omega   .  Let us consider the Dirichlet problem:      {       Œî  u   (  x  )    =  0       if  x   ‚àà  Œ©         u   (  x  )    =   h   (  x  )          if  x   ‚àà  Œì   .         cases      normal-Œî  u  x   0       if  x   normal-Œ©       u  x     h  x        if  x   normal-Œì     \begin{cases}\Delta u(x)=0&\mbox{if }x\in\Omega\\
 u(x)=h(x)&\mbox{if }x\in\Gamma.\end{cases}     It can be easily shown that when the solution   u   u   u   exists, for    x  ‚àà  Œ©      x  normal-Œ©    x\in\Omega   :       u   (  x  )    =    ùîº  x    [   h   (   W  œÑ   )    ]          u  x      subscript  ùîº  x    delimited-[]    h   subscript  W  œÑ        u(x)=\mathbb{E}_{x}[h(W_{\tau})]     where   W   W   W   is a   d   d   d   -dimensional Wiener process, the expected value is taken conditionally on } , and is the first-exit time out of   Œ©   normal-Œ©   Œ©   .  To compute a solution using this formula, we only have to simulate the first exit point of independent Brownian paths since with the law of large numbers :        ùîº  x    [   h   (   W  œÑ   )    ]    ‚àº    1  n     ‚àë   i  =  1   n    h   (   W  œÑ  i   )         similar-to     subscript  ùîº  x    delimited-[]    h   subscript  W  œÑ          1  n     superscript   subscript     i  1    n     h   subscript   superscript  W  i   œÑ        \mathbb{E}_{x}[h(W_{\tau})]\sim\frac{1}{n}\sum_{i=1}^{n}h(W^{i}_{\tau})     The WoS method provides an efficient way of sampling the first exit point of a Brownian motion from the domain, by remarking that for any    (   d  ‚àí   1   )      d  normal-‚àí  normal-  1    (d‚àí¬†1)   -sphere centred on   x   x   x   , the first point of exit of   W   W   W   out of the sphere has a uniform distribution over its surface. Rather than simulating in detail the path of the process, it samples only the exit-points out of successive spheres, often making it less costly than "grid-based" algorithms.  The WoS algorithm consists in drawing the largest sphere    ùíÆ  0     subscript  ùíÆ  0    \mathcal{S}_{0}   centered on   x   x   x   and contained inside the domain. The first point of exit from    ùíÆ  0     subscript  ùíÆ  0    \mathcal{S}_{0}   is uniformly distributed on its surface. By repeating this step inductively, the WoS provides a sequence of positions of the Brownian Motion.  According to intuition, the process will converge to the first exit point of the domain. However, this algorithm takes almost surely an infinite number of steps to end. For computational implementation, the process is usually stopped when it gets sufficiently close to the border, and returns the projection of the process on the border. This procedure is sometimes called introducing an   Œµ   Œµ   \varepsilon   -shell, or   Œµ   Œµ   \varepsilon   -layer. 4  Formulation of the method  (Figure)  Illustration of a run of the Walk-on-spheres algorithm on an arbitrary domain   Œ©   normal-Œ©   \Omega   with an   Œµ   Œµ   \varepsilon   -shell   Choose    Œµ  >  0      Œµ  0    \varepsilon>0   . Using the same notations as above, the Walk-on-spheres algorithm is described as follows:   Initialize     x   (  0  )    =  x       superscript  x  0   x    x^{(0)}=x     While     d   (   x   (  n  )    ,  Œì  )    >  Œµ        d    superscript  x  n   normal-Œì    Œµ    d(x^{(n)},\Gamma)>\varepsilon   :  Set     r  n   =   d   (   x  n   ,  Œì  )         subscript  r  n     d    superscript  x  n   normal-Œì      r_{n}=d(x^{n},\Gamma)   .  Sample    Œ≥  n     subscript  Œ≥  n    \gamma_{n}   a vector uniformly distributed over the unit sphere, independently from the preceding ones.  Set     x   (   n  +  1   )    :=    x   (  n  )    +    r  n    Œ≥  n        assign   superscript  x    n  1       superscript  x  n      subscript  r  n    subscript  Œ≥  n       x^{(n+1)}:=x^{(n)}+r_{n}\gamma_{n}      When     d   (   x   (  n  )    ,  Œì  )    ‚â§  Œµ        d    superscript  x  n   normal-Œì    Œµ    d(x^{(n)},\Gamma)\leq\varepsilon   :       x  f   :=    p  Œì    (   x   (  n  )    )       assign   subscript  x  f      subscript  p  normal-Œì    superscript  x  n      x_{f}:=p_{\Gamma}(x^{(n)})   , the orthogonal projection of    x   (  n  )      superscript  x  n    x^{(n)}   on   Œì   normal-Œì   \Gamma     Return    x  f     subscript  x  f    x_{f}      The result    x  f     subscript  x  f    x_{f}   is an estimator of the first exit point from   Œ©   normal-Œ©   \Omega   of a Wiener process starting from   x   x   x   , in the sense that they have close probability distributions (see below for comments on the error).  Comments and practical considerations  Radius of the spheres  In some cases the distance to the border might be difficult to compute, and it is then preferable to replace the radius of the sphere by a lower bound of this distance. One must then ensure that the radius of the spheres stays large enough so that the process reaches the border. 5  Bias in the method and GFFP  As it is a Monte-Carlo method, the error of the estimator can be decomposed into the sum of a bias , and a statistical error . The statistical error is reduced by increasing the number of paths sampled, or by using variance reduction methods.  The WoS theoretically provides exact (or unbiased) simulations of the paths of the Brownian motion. However, as it is formulated here, the   Œµ   Œµ   \varepsilon   -shell introduced to ensure that the algorithm terminates also adds an error, usually of order    ùí™   (  Œµ  )       ùí™  Œµ    \mathcal{O}(\varepsilon)   . 6 This error has been studied, and can be avoided in some geometries by using Green's Functions First Passage method: 7 one can change the geometry of the "spheres" when close enough to the border, so that the probability of reaching the border in one step becomes positive. This requires the knowledge of Green's functions for the specific domains. (see also Harmonic measure )  When it is possible to use it, the GFFP method is usually preferred, as it is both faster and more accurate than the classical WoS. 8  Complexity  It can be showed that the number of steps taken for the WoS process to reach the   Œµ   Œµ   \varepsilon   -shell is of order    ùí™   (   |   log   (  Œµ  )    |   )       ùí™      Œµ      \mathcal{O}(|\log(\varepsilon)|)   . 9 Therefore, one can increase the precision to a certain extent without making the number of steps grow notably.  As it is commonly the case for Monte-Carlo methods, this algorithm performs particularly well when the dimension is higher than   3   3   3   , and one only needs a small set of values. Indeed, the computational cost increases linearly with the dimension, whereas the cost of grid dependant methods increase exponentially with the dimension. 10  Variants, extensions  This method has been largely studied, generalized and improved. For example, it is now extensively used for the computation of physical properties of materials (such as capacitance , electrostatic internal energy of molecules, etc.). Some notable extensions include:  Elliptic equations  The WoS method can be modified to solve more general problems. In particular, the method has been generalized to solve Dirichlet problems for equations of the form     Œî  u   =    c  u   +  f         normal-Œî  u       c  u   f     \Delta u=cu+f    11 (which include the Poisson and linearized Poisson‚àíBoltzmann equations) or for any elliptic equation with constant coefficients. 12  More efficient ways of solving the linearized Poisson‚àíBoltzmann equation have also been developed, relying on Feynman‚àíKac representations of the solutions. 13  Time dependency  Again, within a regular enough border, it possible to use the WoS method to solve the following problem :      {          ‚àÇ  t   u    (  x  ,  t  )    +     1  2     Œî  x   u   (  x  ,  t  )     =  0       if  x   ‚àà   Œ©  and  t   <  T         u   (  x  ,  T  )    =   h   (  x  ,  T  )         if  x   ‚àà   Œ©  ¬Ø          u   (  x  ,  t  )    =   h   (  x  ,  t  )          if  x   ‚àà  Œì   .         cases          subscript   t   u    x  t        1  2    subscript  normal-Œî  x   u   x  t     0         if  x     normal-Œ©  and  t        T        u   x  T      h   x  T         if  x    normal-¬Ø  normal-Œ©        u   x  t      h   x  t         if  x   normal-Œì     \begin{cases}\partial_{t}u(x,t)+\frac{1}{2}\Delta_{x}u(x,t)=0&\mbox{if }x\in%
 \Omega\mbox{and }t     of which the solution can be represented as: 14       u   (  x  ,  t  )    =    ùîº   t  ,  x     (   h   (   X   T  ‚àß  œÑ    ,   T  ‚àß  œÑ   )    )          u   x  t       subscript  ùîº   t  x      h    subscript  X    T  œÑ      T  œÑ        u(x,t)=\mathbb{E}_{t,x}(h(X_{T\wedge\tau},T\wedge\tau))   ,  where the expectation is taken conditionally on     X  t   =  x       subscript  X  t   x    X_{t}=x     To use the WoS through this formula, one needs to sample the exit-time from each sphere drawn, which is an independent variable    œÑ  0     subscript  œÑ  0    \tau_{0}   with Laplace transform (for a sphere of radius   R   R   R   ): 15      ùîº   (  exp   (  -  s   œÑ  0   )   )   )  =    R    2  s      sinh   (   R    2  s     )        fragments  E   fragments  normal-(    fragments  normal-(   s   subscript  œÑ  0   normal-)   normal-)   normal-)       R      2  s         R      2  s         \mathbb{E}(\exp(-s\tau_{0})))=\frac{R\sqrt{2s}}{\sinh(R\sqrt{2s})}     The total time of exit from the domain   œÑ   œÑ   \tau   can be computed as the sum of the exit-times from the spheres. The process also has to be stopped when it has not exited the domain at time   T   T   T   .  Other extensions  The WoS method has been generalized to estimate the solution to elliptic partial differential equations everywhere in a domain, rather than at a single point. 16  The WoS method has also been generalized in order to compute hitting times for processes other than Brownian motions. For example, hitting times of Bessel processes can be computed via an algorithm called "Walk on moving spheres". 17 This problem has applications in mathematical finance.  Finally, WoS can be adapted to solve the Poisson and Poisson‚àíBoltzmann equation with flux conditions on the boundary. 18  See also   Feynman‚ÄìKac formula  Stochastic processes and boundary value problems  Euler‚ÄìMaruyama method to sample the paths of general diffusion processes   Notes  References  Further reading     External links   Some continuous Monte-Carlo methods for the Dirichlet problem The paper in which Marvin Edgar Muller introduced the method.  Brownian Motion by Peter M√∂rters and Yuval Peres. See Chapter 3.3 on harmonic measure, Green's functions and exit-points.   "  Category:Variants of random walks  Category:Numerical differential equations  Category:Articles created via the Article Wizard  Category:Boundary conditions  Category:Partial differential equations     ‚Ü©  ‚Ü©     ‚Ü©  ‚Ü©     ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©     