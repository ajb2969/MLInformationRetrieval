


Π-calculus




Π-calculus

In theoretical computer science, the π-calculus (or pi-calculus) is a process calculus. The π-calculus allows channel names to be communicated along the channels themselves, and in this way it is able to describe concurrent computations whose network configuration may change during the computation.
The π-calculus is elegantly simple yet very expressive. Functional programs can be encoded into the π-calculus, and the encoding emphasises the dialogue nature of computation, drawing connections with game semantics. Extensions of the π-calculus, such as the spi calculus and applied π, have been successful in reasoning about cryptographic protocols. Beside the original use in describing concurrent systems, the π-calculus has also been used to reason about business processes and molecular biology.
Informal definition
The π-calculus belongs to the family of process calculi, mathematical formalisms for describing and analyzing properties of concurrent computation. In fact, the π-calculus, like the λ-calculus, is so minimal that it does not contain primitives such as numbers, booleans, data structures, variables, functions, or even the usual control flow statements (such as if-then-else, while).
Process constructs
Central to the π-calculus is the notion of name. The simplicity of the calculus lies in the dual role that names play as communication channels and variables.
The process constructs available in the calculus are the following (a precise definition is given in the following section):

concurrency, written 
 
 
 
 , where 
 
 
 
  and 
 
 
 
  are two processes or threads executed concurrently.
communication, where
 
input prefixing

 
  is a process waiting for a message that was sent on a communication channel named 
 
 
 
  before proceeding as  binding the name received to the name  Typically, this models either a process expecting a communication from the network or a label c usable only once by a goto c operation.
output prefixing

 
  describes that the name 
 
 
 
  is emitted on channel 
 
 
 
  before proceeding as  Typically, this models either sending a message on the network or a goto c operation.

replication, written 
 
 
 
 , which may be seen as a process which can always create a new copy of  Typically, this models either a network service or a label c waiting for any number of goto c operations.
creation of a new name, written 
 
 
 
 , which may be seen as a process allocating a new constant 
 
 
 
  within  The constants of  are defined by their names only and are always communication channels. Creation of a new name in a process is also called restriction.
the nil process, written 
 
 
 
 , is a process whose execution is complete and has stopped.

Although the minimalism of the π-calculus prevents us from writing programs in the normal sense, it is easy to extend the calculus. In particular, it is easy to define both control structures such as recursion, loops and sequential composition and datatypes such as first-order functions, truth values, lists and integers. Moreover, extensions of the  have been proposed which take into account distribution or public-key cryptography. The applied  due to Abadi and Fournet 1 put these various extensions on a formal footing by extending the  with arbitrary datatypes.
A small example
Below is a tiny example of a process which consists of three parallel components. The channel name 
 
 
 
  is only known by the first two components.



The first two components are able to communicate on the channel 
 
 
 
 , and the name 
 
 
 
 
  becomes bound to 
 
 
 
 . The next step in the process is therefore



Note that the remaining 
 
 
 
  is not affected because it is defined in an inner scope. The second and third parallel components can now communicate on the channel name 
 
 
 
 , and the name 
 
 
 
  becomes bound to 
 
 
 
 . The next step in the process is now



Note that since the local name 
 
 
 
  has been output, the scope of 
 
 
 
  is extended to cover the third component as well. Finally, the channel 
 
 
 
  can be used for sending the name 
 
 
 
 . After that all concurrently executing processes have stopped



Formal definition
Syntax
Let Χ be a set of objects called names. The abstract syntax for the π-calculus is built from the following BNF grammar (where x and y are any names from Χ):1



In the concrete syntax below, the prefixes bind more tightly than the parallel composition (|), and parentheses are used to disambiguate.
Names are bound by the restriction and input prefix constructs. Formally, the sets of free and bound names of a process in π–calculus are defined inductively as follows.




Construct

Free names

Bound names









None

None







a; x; all free names of P

All bound names of P







a; free names of P except for x

x; all bound names of P







All free names of P and Q

All bound names of P and Q







Free names of P except for x

x; all bound names of P







All free names of P

All bound names of P



Structural congruence
Central to both the reduction semantics and the labelled transition semantics is the notion of structural congruence. Two processes are structurally congruent, if they are identical up to structure. In particular, parallel composition is commutative and associative.
More precisely, structural congruence is defined as the least equivalence relation preserved by the process constructs and satisfying:
Alpha-conversion:
:* 
 
 
 
  if 
 
 
 
  can be obtained from 
 
 
 
  by renaming one or more bound names in 
 
 
 
 .
Axioms for parallel composition:
:* 
 
 

:* 
 
 

:*
 
 

Axioms for restriction:
:* 
 
 

:* 
 
 

Axiom for replication:
:* 
 
 

Axiom relating restriction and parallel:
:* 
 
 
 
  if 
 
 
 
  is not a free name of 
 
 
 
 .
This last axiom is known as the "scope extension" axiom. This axiom is central, since it describes how a bound name 
 
 
 
  may be extruded by an output action, causing the scope of 
 
 
 
 
  to be extended. In cases where 
 
 
 
  is a free name of 
 
 
 
 , alpha-conversion may be used to allow extension to proceed.
Reduction semantics
We write 
 
 
 
  if 
 
 
 
  can perform a computation step, following which it is now 
 
 
 
 
 . This reduction relation

 
  is defined as the least relation closed under a set of reduction rules.
The main reduction rule which captures the ability of processes to communicate through channels is the following:






where 
 
 
 
  denotes the process 
 
 
 
  in which the free name 
 
 
 
 
  has been substituted for the free occurrences of 
 
 
 
 . If a free occurrence of 
 
 
 
  occurs in a location where 
 
 
 
  would not be free, alpha-conversion may be required.
 

There are three additional rules:

If 
 
 
 
  then also 
 
 
 
 
 .


This rule says that parallel composition does not inhibit computation.
 


If 
 
 
 
 , then also 
 
 
 
 .


This rule ensures that computation can proceed underneath a restriction.
 


If 
 
 
 
  and 
 
 
 
  where 
 
 
 
 
 , then also 
 
 
 
 .

The latter rule states that processes that are structurally congruent have the same reductions.
The example revisited
Consider again the process



Applying the definition of the reduction semantics, we get the reduction



Note how, applying the reduction substitution axiom, occurrences of 
 
 
 
  are now labeled as 
 
 
 
 
 .
Next, we get the reduction



Note that since the local name 
 
 
 
  has been output, the scope of 
 
 
 
  is extended to cover the third component as well. This was captured using the scope extension axiom.
Labelled semantics
Alternatively, one may give the pi-calculus a labelled transition semantics (as has been done with the Calculus of Communicating Systems). Transitions in this semantics are of the form:



This notation signifies that 
 
 
 
 
  after the action 
 
 
 
  becomes 
 
 
 
 . 
 
 
 
  can be an input action

 
 , an output action 

, or a tau-action 
 
 
 
  corresponding to an internal communication.
A standard result about the labelled semantics is that it agrees with the reduction semantics in the sense that 
 
 
 
  if and only if 
 
 
 
  for some action 
 
 
 
 .
Extensions and variants
The syntax given above is a minimal one. However, the syntax may be modified in various ways.
A nondeterministic choice operator

 
 
  can be added to the syntax.
A test for name equality

 
  can be added to the syntax. This match operator can proceed as 
 
 
 
  if and only if 
 
 
 
  and 
 
 
 
  are the same name. Similarly, one may add a mismatch operator for name inequality. Practical programs which can pass names (URLs or pointers) often use such functionality: for directly modelling such functionality inside the calculus, this and related extensions are often useful.
The asynchronous π-calculus allows only outputs with no suffix, i.e. output atoms of the form 
 
 
 
 
 , yielding a smaller calculus. However, any process in the original calculus can be represented by the smaller asynchronous π-calculus using an extra channel to simulate explicit acknowledgement from the receiving process. Since a continuation-free output can model a message-in-transit, this fragment shows that the original π-calculus, which is intuitively based on synchronous communication, has an expressive asynchronous communication model inside its syntax. However, the nondeterministic choice operator defined above cannot be expressed in this way, as an unguarded choice would be converted into a guarded one; this fact has been used to demonstrate that the asynchronous calculus is strictly less expressive than the synchronous one (with the choice operator).2
The polyadic π-calculus allows communicating more than one name in a single action
 
 
(polyadic output) and 
 
 
(polyadic input). This polyadic extension, which is useful especially when studying types for name passing processes, can be encoded in the monadic calculus by passing the name of a private channel through which the multiple arguments are then passed in sequence. The encoding is defined recursively by the clauses


 
  is encoded as 
 
 

 
 
  is encoded as 
 
 

All other process constructs are left unchanged by the encoding.
In the above, 
 
 
 
  denotes the encoding of all prefixes in the continuation 
 
 
 
  in the same way.
The full power of replication 
 
 
 
  is not needed. Often, one only considers replicated input

 
 
 , whose structural congruence axiom is 
 
 
 
 .
Replicated input process such as 
 
 
 
  can be understood as servers, waiting on channel 
 
 
 
  to be invoked by clients. Invocation of a server spawns a new copy of the process 
 
 
 
 , where a is the name passed by the client to the server, during the latter's invocation.
A higher order π-calculus can be defined where not only names but processes are sent through channels. The key reduction rule for the higher order case is



Here, 
 
 
 
  denotes a process variable which can be instantiated by a process term. Sangiorgi established that the ability to pass processes does not increase the expressivity of the π-calculus: passing a process P can be simulated by just passing a name that points to P instead.
Properties
Turing completeness
The π-calculus is a universal model of computation. This was first observed by Milner in his paper "Functions as Processes",3 in which he presents two encodings of the lambda-calculus in the π-calculus. One encoding simulates the eager (call-by-value) evaluation strategy, the other encoding simulates the normal-order (call-by-name) strategy. In both of these, the crucial insight is the modeling of environment bindings – for instance, "
 
 
 
  is bound to term 
 
 
 
 " – as replicating agents that respond to requests for their bindings by sending back a connection to the term 
 
 
 
 .
The features of the π-calculus that make these encodings possible are name-passing and replication (or, equivalently, recursively defined agents). In the absence of replication/recursion, the π-calculus ceases to be Turing-powerful. This can be seen by the fact that bisimulation equivalence becomes decidable for the recursion-free calculus and even for the finite-control π-calculus where the number of parallel components in any process is bounded by a constant.4
Bisimulations in the π-calculus
As for process calculi, the π-calculus allows for a definition of bisimulation equivalence. In the π-calculus, the definition of bisimulation equivalence (also known as bisimilarity) may be based on either the reduction semantics or on the labelled transition semantics.
There are (at least) three different ways of defining labelled bisimulation equivalence in the π-calculus: Early, late and open bisimilarity. This stems from the fact that the π-calculus is a value-passing process calculus.
In the remainder of this section, we let 
 
 
 
 
  and 
 
 
 
  denote processes and 
 
 
 
  denote binary relations over processes.
Early and late bisimilarity
Early and late bisimilarity were both formulated by Milner, Parrow and Walker in their original paper on the π-calculus.5
A binary relation 
 
 
 
  over processes is an early bisimulation if for every pair of processes 
 
 
 
 ,

whenever 

p \,\xrightarrow{a(x)}\,p'  then for every name 
 
 
 
 
  there exists some 
 
 
 
  such that 
 
 
 
  and 
 
 
 
 ;

for any non-input action 
 
 
 
 , if 

p \xrightarrow\alpha p'
  then there exists some 

 such that 

 and 

;

and symmetric requirements with 
 
 
 
  and 
 
 
 
  interchanged.

Processes 
 
 
 
 
  and 
 
 
 
  are said to be early bisimilar, written 
 
 
 
  if the pair 
 
 
 
  for some early bisimulation 
 
 
 
 .
In late bisimilarity, the transition match must be independent of the name being transmitted. A binary relation 
 
 
 
 
  over processes is a late bisimulation if for every pair of processes 
 
 
 
 ,

whenever 

p \xrightarrow{a(x)} p'  then for some 
 
 
 
  it holds that 
 
 
 
  and 
 
 
for every name y;

for any non-input action 
 
 
 
 
 , if 

p \xrightarrow\alpha p'
  implies that there exists some 

 such that 

and 

;

and symmetric requirements with 
 
 
 
  and 
 
 
 
 
  interchanged.

Processes 
 
 
 
  and 
 
 
 
  are said to be late bisimilar, written 
 
 
 
  if the pair 
 
 
 
  for some late bisimulation 
 
 
 
 
 .
Both 
 
 
 
  and 
 
 
 
  suffer from the problem that they are not congruence relations in the sense that they are not preserved by all process constructs. More precisely, there exist processes 
 
 
 
  and 
 
 
 
  such that 
 
 
 
 
  but 
 
 
 
 . One may remedy this problem by considering the maximal congruence relations included in 
 
 
 
  and 
 
 
 
 , known as early congruence and late congruence, respectively.
Open bisimilarity
Fortunately, a third definition is possible, which avoids this problem, namely that of open bisimilarity, due to Sangiorgi.6
A binary relation 
 
 
 
  over processes is an open bisimulation if for every pair of elements 
 
 
 
 
  and for every name substitution 
 
 
 
  and every action 
 
 
 
 , whenever 
 
 
 
  then there exists some 
 
 
 
  such that 
 
 
 
 
  and 
 
 
 
 .
Processes 
 
 
 
  and 
 
 
 
  are said to be open bisimilar, written 
 
 
 
  if the pair 
 
 
 
 
  for some open bisimulation 
 
 
 
 .
Early, late and open bisimilarity are distinct
Early, late and open bisimilarity are distinct. The containments are proper, so 
 
 
 
 .
In certain subcalculi such as the asynchronous pi-calculus, late, early and open bisimilarity are known to coincide. However, in this setting a more appropriate notion is that of asynchronous bisimilarity.
The reader should note that, in the literature, the term open bisimulation usually refers to a more sophisticated notion, where processes and relations are indexed by distinction relations; details are in Sangiorgi's paper cited above.
Barbed equivalence
Alternatively, one may define bisimulation equivalence directly from the reduction semantics. We write 
 
 
 
  if process 
 
 
 
  immediately allows an input or an output on name 
 
 
 
 
 .
A binary relation 
 
 
 
  over processes is a barbed bisimulation if it is a symmetric relation which satisfies that for every pair of elements 
 
 
 
  we have that

(1) 
 
 
 
  if and only if 
 
 
 
  for every name 
 
 


and

(2) for every reduction 
 
 
 
  there exists a reduction 
 
 


such that 
 
 
 
 .
We say that 
 
 
 
  and 
 
 
 
 
  are barbed bisimilar if there exists a barbed bisimulation 
 
 
 
  where 
 
 
 
 .
Defining a context as a π term with a hole [] we say that two processes P and Q are barbed congruent, written 
 
 
 
 , if for every context 
 
 
 
  we have that 
 
 
 
 
  and 
 
 
 
  are barbed bisimilar. It turns out that barbed congruence coincides with the congruence induced by early bisimilarity.
Applications
The π-calculus has been used to describe many different kinds of concurrent systems. In fact, some of the most recent applications lie outside the realm of traditional computer science.
In 1997, Martin Abadi and Andrew Gordon proposed an extension of the π-calculus, the Spi-calculus, as a formal notation for describing and reasoning about cryptographic protocols. The spi-calculus extends the π-calculus with primitives for encryption and decryption. In 2001, Martin Abadi and Cedric Fournet generalised the handling of cryptographic protocols to produce the applied π calculus. There is now a large body of work devoted to variants of the applied π calculus, including a number of experimental verification tools. One example is the tool ProVerif 2 due to Bruno Blanchet, based on a translation of the applied π-calculus into Blanchet's logic programming framework. Another example is Cryptyc 3, due to Andrew Gordon and Alan Jeffrey, which uses Woo and Lam's method of correspondence assertions as the basis for type systems that can check for authentication properties of cryptographic protocols.
Around 2002, Howard Smith and Peter Fingar became interested in using the π-calculus as a description tool for modelling business processes. As of July 2006, there is discussion in the community as to how useful this will be. Most recently, the π-calculus has been used as the theoretical basis of Business Process Modeling Language (BPML), and of Microsoft's XLANG.7
The π-calculus has also attracted interest in molecular biology. In 1999, Aviv Regev and Ehud Shapiro showed that one can describe a cellular signaling pathway (the so-called RTK/MAPK cascade) and in particular the molecular "lego" which implements these tasks of communication in an extension of the π-calculus.8 Following this seminal paper, other authors described the whole metabolic network of a minimal cell.9
History
The π-calculus was originally developed by Robin Milner, Joachim Parrow and David Walker in 1992, based on ideas by Uffe Engberg and Mogens Nielsen. It can be seen as a continuation of Milner's work on the process calculus CCS (Calculus of Communicating Systems). In his Turing lecture, Milner describes the development of the π-calculus as an attempt to capture the uniformity of values and processes in actors.10
Implementations
The following programming languages are implementations either of the π-calculus or of its variants:

Business Process Modeling Language (BPML)
occam-π
Pict
JoCaml (based on the Join-calculus)

Notes
References





External links

PiCalculus on the C2 wiki
FAQ on π-Calculus by Jeannette M. Wing

"
Category:Process calculi Category:Theoretical computer science



A Calculus of Mobile Processes part 1 page 10, by R. Milner, J. Parrow and D. Walker published in Information and Computation 100(1) pp.1-40, Sept 1992





"BPML | BPEL4WS: A Convergence Path toward a Standard BPM Stack." BPMI.org Position Paper. August 15, 2002.4


Robin Milner. 1993. Elements of interaction: Turing award lecture. Commun. ACM 36, 1 (January 1993), 78-89. DOI=10.1145/151233.151240 http://doi.acm.org/10.1145/151233.151240




