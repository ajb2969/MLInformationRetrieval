


Binary expression tree




Binary expression tree

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



A binary expression tree is a specific application of a binary tree to evaluate certain expressions. Two common types of expressions that a binary expression tree can represent are algebraic1 and boolean. These trees can represent expressions that contain both unary and binary operators.2
In general, expression trees are a special kind of binary tree. A binary tree is a tree in which all nodes contain zero, one or two children. This restricted structure simplifies the programmatic processing of Expression trees.
Overview
 The leaves of a binary expression tree are operands, such as constants or variable names, and the other nodes contain operators. These particular trees happen to be binary, because all of the operations are binary, and although this is the simplest case, it is possible for nodes to have more than two children. It is also possible for a node to have only one child, as is the case with the unary minus operator. An expression tree, T, can be evaluated by applying the operator at the root to the values obtained by recursively evaluating the left and right subtrees.3
Traversal
An algebraic expression can be produced from a binary expression tree by recursively producing a parenthesized left expression, then printing out the operator at the root, and finally recursively producing a parenthesized right expression. This general strategy (left, node, right) is known as an in-order traversal. An alternate traversal strategy is to recursively print out the left subtree, the right subtree, and then the operator. This traversal strategy is generally known as post-order traversal. A third strategy is to print out the operator first and then recursively print out the left and right subtree.4
These three standard depth-first traversals are representations of the three different expression formats: infix, postfix, and prefix. An infix expression is produced by the inorder traversal, a postfix expression is produced by the post-order traversal, and a prefix expression is produced by the pre-order traversal.5 {{-}}
Infix Traversal
When an infix expression is printed, an opening and closing parenthesis must be added at the beginning and ending of each expression. As every subtree represents a subexpression, an opening parenthesis is printed at its start and the closing parenthesis is printed after processing all of its children.
Pseudocode:
Algorithm infix (tree)
 /*Print the infix expression for an expression tree.
  Pre : tree is a pointer to an expression tree
  Post: the infix expression has been printed*/
  if (tree not empty)
     if (tree token is operator)
        print (open parenthesis)
     end if
     infix (tree left subtree)
     print (tree token)
     infix (tree right subtree)
     if (tree token is operator)
        print (close parenthesis)
     end if
  end if
 end infix
Postfix Traversal
The postfix expression is formed by the basic postorder traversal of any binary tree. It does not require parentheses.
Pseudocode:
Algorithm postfix (tree)
 /*Print the postfix expression for an expression tree.
  Pre : tree is a pointer to an expression tree
  Post: the postfix expression has been printed*/
  if (tree not empty)
     postfix (tree left subtree)
     postfix (tree right subtree)
     print (tree token)
  end if
 end postfix
Prefix Traversal
The prefix expression formed by prefix traversal uses the standard pre-order tree traversal. No parentheses are necessary.
Pseudocode:
Algorithm prefix (tree)
 /*Print the prefix expression for an expression tree.
  Pre : tree is a pointer to an expression tree
  Post: the prefix expression has been printed*/
  if (tree not empty)
     print (tree token)
     prefix (tree left subtree)
     prefix (tree right subtree) and check if stack is not empty
  end if
 end prefix
Construction of an Expression Tree
The evaluation of the tree takes place by reading the postfix expression one symbol at a time. If the symbol is an operand, one-node tree is created and a pointer is pushed onto a stack. If the symbol is an operator, the pointers are popped to two trees T1 and T2 from the stack and a new tree whose root is the operator and whose left and right children point to T2 and T1 respectively is formed . A pointer to this new tree is then pushed to the Stack.6
Example
The input is: a b + c d e + * * Since the first two symbols are operands, one-node trees are created and pointers are pushed to them onto a stack. For convenience the stack will grow from left to right.
(Figure)
Stack growing from left to right

The next symbol is a '+'. It pops the two pointers to the trees, a new tree is formed, and a pointer to it is pushed onto to the stack.
(Figure)
Formation of a new tree

Next, c, d, and e are read. A one-node tree is created for each and a pointer to the corresponding tree is pushed onto the stack.
(Figure)
Creating a one-node tree

Continuing, a '+' is read, and it merges the last two trees.
(Figure)
Merging two trees

Now, a '*' is read. The last two tree pointers are popped and a new tree is formed with a '*' as the root.
(Figure)
Forming a new tree with a root

Finally, the last symbol is read. The two trees are merged and a pointer to the final tree remains on the stack.7
(Figure)
Steps to construct an expression tree a b + c d e + * *

Algebraic expressions
 Algebraic expression trees represent expressions that contain numbers, variables, and unary and binary operators. Some of the common operators are × (multiplication), ÷ (division), + (addition), − (subtraction), ^ (exponentiation), and - (negation). The operators are contained in the internal nodes of the tree, with the numbers and variables in the leaf nodes.8 The nodes of binary operators have two child nodes, and the unary operators have one child node. {{-}}
Boolean expressions
 Boolean expressions are represented very similarly to algebraic expressions, the only difference being the specific values and operators used. Boolean expressions use true and false as constant values, and the operators include 
 
 
 
  (AND), 
 
 
 
  (OR), 
 
 
 
  (NOT). {{-}}
See also

Expression (coding)
Expression (mathematics)
Term (logic)
Context-free grammar
Parse tree

References
"
Category:Binary trees



↩




Mark Allen Weiss,Data Structures and Algorithm Analysis in C,2nd edition, Addison Wesley publications↩





