   Flow network      Flow network   In graph theory , a flow network (also known as a transportation network ) is a directed graph where each edge has a capacity and each edge receives a flow. The amount of flow on an edge cannot exceed the capacity of the edge. Often in operations research , a directed graph is called a network . The vertices are called nodes and the edges are called arcs . A flow must satisfy the restriction that the amount of flow into a node equals the amount of flow out of it, unless it is a source , which has only outgoing flow, or sink , which has only incoming flow. A network can be used to model traffic in a road system, circulation with demands, fluids in pipes, currents in an electrical circuit, or anything similar in which something travels through a network of nodes.  Definition  Let    G  =   (  V  ,  E  )       G   V  E     G=(V,E)   be a finite directed graph in which every edge      (  u  ,  v  )   ∈  E       u  v   E    \ (u,v)\in E   has a non-negative, real-valued capacity     c    (  u  ,  v  )       c   u  v     \ c(u,v)   . If     (  u  ,  v  )   ∉  E       u  v   E    \ (u,v)\not\in E   , we assume that      c    (  u  ,  v  )    =  0        c   u  v    0    \ c(u,v)=0   . We distinguish two vertices: a source    s    s   \ s   and a sink    t    t   \ t   . A flow in a flow network is a real  function      f   :    V  ×  V   →  ℝ      normal-:  f   normal-→    V  V   ℝ     \ f:V\times V\rightarrow\mathbb{R}   with the following three properties for all nodes    u    u   \ u   and    v    v   \ v   :        Capacity constraints :         f    (  u  ,  v  )    ≤   c   (  u  ,  v  )          f   u  v      c   u  v      \ f(u,v)\leq c(u,v)   . The flow along an edge cannot exceed its capacity.     Skew symmetry :         f    (  u  ,  v  )    =   -   f   (  v  ,  u  )           f   u  v        f   v  u       \ f(u,v)=-f(v,u)   . The net flow from    u    u   \ u   to    v    v   \ v   must be the opposite of the net flow from    v    v   \ v   to    u    u   \ u   (see example).     Flow conservation :         ∑   w  ∈  V     f   (  u  ,  w  )     =  0        subscript     w  V      f   u  w     0    \ \sum_{w\in V}f(u,w)=0   , unless     u   =  s      u  s    \ u=s   or     u   =  t      u  t    \ u=t   . The net flow to a node is zero, except for the source, which "produces" flow, and the sink, which "consumes" flow.       i.e. ' Flow conservation ' implies      ∑    (  u  ,  v  )   ∈  E     f   (  u  ,  v  )     =    ∑    (  v  ,  z  )   ∈  E     f   (  v  ,  z  )           subscript      u  v   E      f   u  v       subscript      v  z   E      f   v  z       \ \sum_{(u,v)\in E}f(u,v)=\sum_{(v,z)\in E}f(v,z)   , for each vertex     v   ∈   V  ∖   {  s  ,  t  }        v    V   s  t      \ {v\in V\setminus\{s,t\}}     Notice that     f    (  u  ,  v  )       f   u  v     \ f(u,v)   is the net flow from    u    u   \ u   to    v    v   \ v   . If the graph represents a physical network, and if there is a real flow of, for example, 4 units from    u    u   \ u   to    v    v   \ v   , and a real flow of 3 units from    v    v   \ v   to    u    u   \ u   , we have      f    (  u  ,  v  )    =  1        f   u  v    1    \ f(u,v)=1   and      f    (  v  ,  u  )    =   -  1         f   v  u      1     \ f(v,u)=-1   .  Basically we can say that flow for a physical network is flow leaving at s =     ∑    (  s  ,  v  )   ∈  E     f   (  s  ,  v  )        subscript      s  v   E      f   s  v      \ \sum_{(s,v)\in E}f(s,v)     The residual capacity of an edge is       c   f    (  u  ,  v  )    =    c   (  u  ,  v  )    -   f   (  u  ,  v  )            subscript  c  f    u  v        c   u  v      f   u  v       \ c_{f}(u,v)=c(u,v)-f(u,v)   . This defines a residual network denoted      G   f    (  V  ,   E  f   )        subscript  G  f    V   subscript  E  f      \ G_{f}(V,E_{f})   , giving the amount of available capacity. See that there can be a path from    u    u   \ u   to    v    v   \ v   in the residual network, even though there is no path from    u    u   \ u   to    v    v   \ v   in the original network. Since flows in opposite directions cancel out, decreasing the flow from    v    v   \ v   to    u    u   \ u   is the same as increasing the flow from    u    u   \ u   to    v    v   \ v   . An augmenting path is a path    (   u  1   ,   u  2   ,  …  ,   u  k   )      subscript  u  1    subscript  u  2   normal-…   subscript  u  k     \ (u_{1},u_{2},\dots,u_{k})   in the residual network, where      u   1   =  s       subscript  u  1   s    \ u_{1}=s   ,      u   k   =  t       subscript  u  k   t    \ u_{k}=t   , and       c   f    (   u  i   ,   u   i  +  1    )    >  0         subscript  c  f     subscript  u  i    subscript  u    i  1      0    \ c_{f}(u_{i},u_{i+1})>0   . A network is at maximum flow if and only if there is no augmenting path in the residual network     G   f     subscript  G  f    \ G_{f}   .  So     G   f     subscript  G  f    \ G_{f}   is constructed using graph G as follows:  1. Vertices of     G   f     subscript  G  f    \ G_{f}   =    V    V   \ V     2. Edges of     G   f     subscript  G  f    \ G_{f}   =     E   f     subscript  E  f    \ E_{f}   defined as-  For each edge     (  x  ,  y  )   ∈  E       x  y   E    \ (x,y)\in E     (i). If        f    (  x  ,  y  )    <   c   (  x  ,  y  )     ,        f   x  y      c   x  y      \ f(x,y)    make Forward edge      (  x  ,  y  )   ∈   E  f        x  y    subscript  E  f     \ (x,y)\in E_{f}    with '''capacity '''       c   f   =    c   (  x  ,  y  )    -   f   (  x  ,  y  )          subscript  c  f       c   x  y      f   x  y       \ c_{f}=c(x,y)-f(x,y)    .  (ii). If        f    (  x  ,  y  )    >  0   ,        f   x  y    0    \ f(x,y)>0,    make Backward edge      (  y  ,  x  )   ∈   E  f        y  x    subscript  E  f     \ (y,x)\in E_{f}    with '''capacity '''       c   f   =   f   (  x  ,  y  )         subscript  c  f     f   x  y      \ c_{f}=f(x,y)    .  This concept is used in Ford–Fulkerson algorithm which computes the maximum flow in a flow network.  Sometimes one needs to model a network with more than one source, a supersource is introduced to the graph. 1 This consists of a vertex connected to each of the sources with edges of infinite capacity, so as to act as a global source. A similar construct for sinks is called a supersink . 2  Example  To the right you see a flow network with source labeled   s   s   s   , sink   t   t   t   , and four additional nodes. The flow and capacity is denoted    f  /  c      f  c    f/c   . Notice how the network upholds skew symmetry, capacity constraints and flow conservation. The total amount of flow from   s   s   s   to   t   t   t   is 5, which can be easily seen from the fact that the total outgoing flow from   s   s   s   is 5, which is also the incoming flow to   t   t   t   . We know that no flow appears or disappears in any of the other nodes.  Below you see the residual network for the given flow. Notice how there is positive residual capacity on some edges where the original capacity is zero, for example for the edge    (  d  ,  c  )     d  c    (d,c)   . This flow is not a maximum flow . There is available capacity along the paths    (  s  ,  a  ,  c  ,  t  )     s  a  c  t    (s,a,c,t)   ,    (  s  ,  a  ,  b  ,  d  ,  t  )     s  a  b  d  t    (s,a,b,d,t)   and    (  s  ,  a  ,  b  ,  d  ,  c  ,  t  )     s  a  b  d  c  t    (s,a,b,d,c,t)   , which are then the augmenting paths. The residual capacity of the first path is    min   (    c   (  s  ,  a  )    -   f   (  s  ,  a  )     ,    c   (  a  ,  c  )    -   f   (  a  ,  c  )     ,    c   (  c  ,  t  )    -   f   (  c  ,  t  )     )           c   s  a      f   s  a         c   a  c      f   a  c         c   c  t      f   c  t       \min(c(s,a)-f(s,a),c(a,c)-f(a,c),c(c,t)-f(c,t))        =   min   (   5  -  3   ,   3  -  2   ,   2  -  1   )    =   min   (  2  ,  1  ,  1  )    =  1        absent      5  3     3  2     2  1           2  1  1        1     =\min(5-3,3-2,2-1)=\min(2,1,1)=1   . Notice that as long as there exists some path with a positive residual capacity, the flow will not be maximum. The residual capacity for some path is the minimum residual capacity of all edges in that path.  Applications  Picture a series of water pipes, fitting into a network. Each pipe is of a certain diameter, so it can only maintain a flow of a certain amount of water. Anywhere that pipes meet, the total amount of water coming into that junction must be equal to the amount going out, otherwise we would quickly run out of water, or we would have a buildup of water. We have a water inlet, which is the source, and an outlet, the sink. A flow would then be one possible way for water to get from source to sink so that the total amount of water coming out of the outlet is consistent. Intuitively, the total flow of a network is the rate at which water comes out of the outlet.  Flows can pertain to people or material over transportation networks, or to electricity over electrical distribution systems. For any such physical network, the flow coming into any intermediate node needs to equal the flow going out of that node. This conservation constraint was formalized as Kirchhoff's current law .  Flow networks also find applications in ecology : flow networks arise naturally when considering the flow of nutrients and energy between different organizations in a food web . The mathematical problems associated with such networks are quite different from those that arise in networks of fluid or traffic flow. The field of ecosystem network analysis, developed by Robert Ulanowicz and others, involves using concepts from information theory and thermodynamics to study the evolution of these networks over time.  The simplest and most common problem using flow networks is to find what is called the maximum flow , which provides the largest possible total flow from the source to the sink in a given graph. There are many other problems which can be solved using max flow algorithms, if they are appropriately modeled as flow networks, such as bipartite matching , the assignment problem and the transportation problem . Maximum flow problems can be solved efficiently with the relabel-to-front algorithm . The max-flow min-cut theorem states that finding a maximal network flow is equivalent to finding a cut of minimum capacity that separates the source and the sink. Where a cut is the division of vertices such that the source is in one division and the sink is in another.  In a multi-commodity flow problem , you have multiple sources and sinks, and various "commodities" which are to flow from a given source to a given sink. This could be for example various goods that are produced at various factories, and are to be delivered to various given customers through the same transportation network.  In a minimum cost flow problem , each edge    u  ,  v     u  v    u,v   has a given cost    k   (  u  ,  v  )       k   u  v     k(u,v)   , and the cost of sending the flow    f   (  u  ,  v  )       f   u  v     f(u,v)   across the edge is      f   (  u  ,  v  )    ⋅  k    (  u  ,  v  )        normal-⋅    f   u  v    k    u  v     f(u,v)\cdot k(u,v)   . The objective is to send a given amount of flow from the source to the sink, at the lowest possible price.  In a circulation problem , you have a lower bound    l   (  u  ,  v  )       l   u  v     l(u,v)   on the edges, in addition to the upper bound    c   (  u  ,  v  )       c   u  v     c(u,v)   . Each edge also has a cost. Often, flow conservation holds for all nodes in a circulation problem, and there is a connection from the sink back to the source. In this way, you can dictate the total flow with    l   (  t  ,  s  )       l   t  s     l(t,s)   and    c   (  t  ,  s  )       c   t  s     c(t,s)   . The flow circulates through the network, hence the name of the problem.  In a network with gains or generalized network each edge has a gain , a real number (not zero) such that, if the edge has gain g , and an amount x flows into the edge at its tail, then an amount gx flows out at the head.  In a source localization problem , an algorithm tries to identify the most likely source node of information diffusion through a partially observed network. This can be done in linear time for trees and cubic time for arbitrary networks and has applications ranging from tracking mobile phone users to identifying the originating village of disease outbreaks. 3  See also   Braess' paradox  Centrality  Constructal theory  Ford–Fulkerson algorithm  Dinic's algorithm  Flow (computer networking)  Flow graph  Max-flow min-cut theorem  Oriented matroid  Shortest path problem   References  Further reading           External links   Maximum Flow Problem  [ http://www.topcoder.com/tc?module=Static&d1; ;=tutorials&d2;=maxFlow Maximum Flow]  Real graph instances  Software, papers, test graphs, etc.  [Software and papers for network flow problems  Lemon C++ library with several maximum flow and minimum cost circulation algorithms  QuickGraph , graph data structures and algorithms for .Net   "  Category:Network flow  Category:Graph algorithms  Category:Operations research  Category:Directed graphs     ↩  ↩  http://www.pedropinto.org.s3.amazonaws.com/publications/locating_source_diffusion_networks.pdf ↩     