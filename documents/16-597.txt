   Polling system      Polling system   In queueing theory , a discipline within the mathematical theory of probability , a polling system or polling model is a system where a single server visits a set of queues in some order. 1 The model has applications in computer networks and telecommunications , 2  manufacturing 3 4 and road traffic management . The term polling system was coined at least as early as 1968 5 6 and the earliest study of such a system in 1957 where a single repairman servicing machines in the British cotton industry was modelled. 7  Typically it is assumed that the server visits the different queues in a cyclic manner. 8 Exact results exist for waiting times, marginal queue lengths and joint queue lengths 9 at polling epochs in certain models. 10  Mean value analysis techniques can be applied to compute average quantities. 11  In a fluid limit , where a very large number of small jobs arrive the individual nodes can be viewed to behave similarly to fluid queues (with a two state process). 12  Model definition  A group of n queues are served by a single server, typically in a cyclic order 1, 2, …, n , 1, …. New jobs arrive at queue i according to a Poisson process of rate λ i and are served on a first-come, first-served basis with each job having a service time denoted by a independent and identically distributed random variables  S i .  The server chooses when to progress to the next node according to one of the following criteria: 13   exhaustive service, where a node continues to receive service until the buffer is empty.  gated service, where the node serves all traffic that was present at the instant that the server arrived and started serving, but subsequent arrivals during this service time must wait until the next server visit.  limited service, where a maximum fixed number of jobs can be served in each visit by the server. 14   If a queueing node is empty the server immediately moves to serve the next queueing node.  The time taken to switch from serving node i − 1 and node i is denoted by the random variable d i .  Utilization  Define ρ i = λ i E( S i ) and write ρ = ρ 1 + ρ 2 + … + ρ n . Then ρ is the long-run fraction of time the server spends attending to customers. 15  Waiting time  Expected waiting time  For gated service, the expected waiting time at node i is 16       𝔼   (   W  i   )    =      1  +   ρ  i    2   𝔼   (  C  )    +     (   1  +   ρ  i    )   Var   (   C  i   )     2  𝔼   (  C  )            𝔼   subscript  W  i            1   subscript  ρ  i    2   𝔼  C         1   subscript  ρ  i    Var   subscript  C  i      2  𝔼  C       \mathbb{E}(W_{i})=\frac{1+\rho_{i}}{2}\mathbb{E}(C)+\frac{(1+\rho_{i})\text{%
 Var}(C_{i})}{2\mathbb{E}(C)}   and for exhaustive service       𝔼   (   W  i   )    =      1  -   ρ  i    2   𝔼   (  C  )    +     (   1  -   ρ  i    )   Var   (   C   i  +  1    )     2  𝔼   (  C  )            𝔼   subscript  W  i            1   subscript  ρ  i    2   𝔼  C         1   subscript  ρ  i    Var   subscript  C    i  1       2  𝔼  C       \mathbb{E}(W_{i})=\frac{1-\rho_{i}}{2}\mathbb{E}(C)+\frac{(1-\rho_{i})\text{%
 Var}(C_{i+1})}{2\mathbb{E}(C)}   where C i is a random variable denoting the time between entries to node i and 17       𝔼   (  C  )    =    ∑   i  =  1   n     𝔼   (   d  i   )     1  -  ρ           𝔼  C     superscript   subscript     i  1    n       𝔼   subscript  d  i      1  ρ       \mathbb{E}(C)=\sum_{i=1}^{n}\frac{\mathbb{E}(d_{i})}{1-\rho}   The variance of C i is more complicated and a straightforward calculation requires solving n 2 linear equations and n 2 unknowns, 18 however it is possible to compute from n equations. 19  Heavy traffic  The workload process can be approximated by a reflected Brownian motion in a heavily loaded and suitably scaled system if switching servers is immediate 20 and a Bessel process when switching servers takes time. 21  Applications  Polling systems have been used to model token ring networks. 22  External links   Bibliography on polling models (papers published 1984–1993) by Hideaki Takagi   References  "  Category:Queueing theory     ↩  ↩  ↩  ↩  ↩  ↩  ↩   ↩  ↩  ↩  ↩  ↩  ↩  ↩   ↩  ↩  ↩  ↩  ↩  ↩     