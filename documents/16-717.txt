   Kernel embedding of distributions      Kernel embedding of distributions  In machine learning , the kernel embedding of distributions (also called the kernel mean or mean map ) comprises a class of nonparametric methods in which a probability distribution is represented as an element of a reproducing kernel Hilbert space (RKHS). 1 A generalization of the individual data-point feature mapping done in classical kernel methods , the embedding of distributions into infinite-dimensional feature spaces can preserve all of the statistical features of arbitrary distributions, while allowing one to compare and manipulate distributions using Hilbert space operations such as inner products , distances, projections , linear transformations , and spectral analysis . 2 This learning framework is very general and can be applied to distributions over any space   Œ©   normal-Œ©   \Omega   on which a sensible kernel function (measuring similarity between elements of   Œ©   normal-Œ©   \Omega   ) may be defined. For example, various kernels have been proposed for learning from data which are: vectors in    ‚Ñù  d     superscript  ‚Ñù  d    \mathbb{R}^{d}   , discrete classes/categories, strings , graphs / networks , images, time series , manifolds , dynamical systems , and other structured objects. 3 4 The theory behind kernel embeddings of distributions has been primarily developed by Alex Smola , Le Song , Arthur Gretton , and Bernhard Sch√∂lkopf .  The analysis of distributions is fundamental in machine learning and statistics , and many algorithms in these fields rely on information theoretic approaches such as entropy , mutual information , or Kullback‚ÄìLeibler divergence . However, to estimate these quantities, one must first either perform density estimation, or employ sophisticated space-partitioning/bias-correction strategies which are typically infeasible for high-dimensional data. 5 Commonly, methods for modeling complex distributions rely on parametric assumptions that may be unfounded or computationally challenging (e.g. Gaussian mixture models ), while nonparametric methods like kernel density estimation (Note: the smoothing kernels in this context have a different interpretation than the kernels discussed here) or characteristic function representation (via the Fourier transform of the distribution) break down in high-dimensional settings. 6  Methods based on the kernel embedding of distributions sidestep these problems and also possess the following advantages: 7   Data may be modeled without restrictive assumptions about the form of the distributions and relationships between variables  Intermediate density estimation is not needed  Practitioners may specify the properties of a distribution most relevant for their problem (incorporating prior knowledge via choice of the kernel)  If a characteristic kernel is used, then the embedding can uniquely preserve all information about a distribution, while thanks to the kernel trick , computations on the potentially infinite-dimensional RKHS can be implemented in practice as simple Gram matrix operations  Dimensionality-independent rates of convergence for the empirical kernel mean (estimated using samples from the distribution) to the kernel embedding of the true underlying distribution can be proven.  Learning algorithms based on this framework exhibit good generalization ability and finite sample convergence, while often being simpler and more effective than information theoretic methods   Thus, learning via the kernel embedding of distributions offers a principled drop-in replacement for information theoretic approaches and is a framework which not only subsumes many popular methods in machine learning and statistics as special cases, but also can lead to entirely new learning algorithms.  Definitions  Let   X   X   X   denote a random variable with domain   Œ©   normal-Œ©   \Omega   and distribution    P   (  X  )       P  X    P(X)   . Given a kernel   k   k   k   on    Œ©  √ó  Œ©      normal-Œ©  normal-Œ©    \Omega\times\Omega   , the Moore-Aronszajn Theorem asserts the existence of a RKHS   ‚Ñã   ‚Ñã   \mathcal{H}   (a Hilbert space of functions    f  :   Œ©  ‚Ü¶  ‚Ñù      normal-:  f   maps-to  normal-Œ©  ‚Ñù     f:\Omega\mapsto\mathbb{R}   equipped with inner products     ‚ü®  ‚ãÖ  ,  ‚ãÖ  ‚ü©   ‚Ñã     subscript   normal-‚ãÖ  normal-‚ãÖ   ‚Ñã    \langle\cdot,\cdot\rangle_{\mathcal{H}}   and norms    |  |  ‚ãÖ  |   |  ‚Ñã      fragments  normal-|  normal-|  normal-‚ãÖ  normal-|   subscript  normal-|  ‚Ñã     ||\cdot||_{\mathcal{H}}   ) in which the element     k    (  x  ,  ‚ãÖ  )       k   x  normal-‚ãÖ     \ k(x,\cdot)   satisfies the reproducing property       ‚ü®  f  ,   k   (  x  ,  ‚ãÖ  )    ‚ü©   ‚Ñã   =   f   (  x  )    ‚àÄ  f    ‚àà  ‚Ñã   ,    ‚àÄ  x   ‚àà  Œ©      formulae-sequence       subscript   f    k   x  normal-‚ãÖ     ‚Ñã     f  x   for-all  f         ‚Ñã       for-all  x   normal-Œ©     \langle f,k(x,\cdot)\rangle_{\mathcal{H}}=f(x)\ \forall f\in\mathcal{H},%
 \forall x\in\Omega   . One may alternatively consider     k    (  x  ,  ‚ãÖ  )       k   x  normal-‚ãÖ     \ k(x,\cdot)   an implicit feature mapping    œï   (  x  )       œï  x    \phi(x)   from   Œ©   normal-Œ©   \Omega   to   ‚Ñã   ‚Ñã   \mathcal{H}   (which is therefore also called the feature space), so that      k    (  x  ,   x  ‚Ä≤   )    =    ‚ü®   œï   (  x  )    ,   œï   (   x  ‚Ä≤   )    ‚ü©   ‚Ñã         k   x   superscript  x  normal-‚Ä≤      subscript     œï  x     œï   superscript  x  normal-‚Ä≤     ‚Ñã     \ k(x,x^{\prime})=\langle\phi(x),\phi(x^{\prime})\rangle_{\mathcal{H}}   can be viewed as a measure of similarity between points     x  ,   x  ‚Ä≤    ‚àà  Œ©       x   superscript  x  normal-‚Ä≤    normal-Œ©    x,x^{\prime}\in\Omega   . While the similarity measure is linear in the feature space, it may be highly nonlinear in the original space depending on the choice of kernel.  Kernel embedding  The kernel embedding of the distribution    P   (  X  )       P  X    P(X)   in   ‚Ñã   ‚Ñã   \mathcal{H}   (also called the kernel mean or mean map ) is given by: 8         Œº  X   :=    ùîº  X    [   k   (  X  ,  ‚ãÖ  )    ]    =    ùîº  X    [   œï   (  X  )    ]    =    ‚à´  Œ©    œï   (  x  )   d  P   (  x  )          assign   subscript  Œº  X      subscript  ùîº  X    delimited-[]    k   X  normal-‚ãÖ              subscript  ùîº  X    delimited-[]    œï  X            subscript   normal-Œ©     œï  x  normal-d  P  x       \mu_{X}:=\mathbb{E}_{X}[k(X,\cdot)]=\mathbb{E}_{X}[\phi(X)]=\int_{\Omega}\phi(%
 x)\ \mathrm{d}P(x)        A kernel is characteristic if the mean embedding    Œº  :    {   family of distributions over  Œ©   }   ‚Ü¶  ‚Ñã      normal-:  Œº   maps-to     family of distributions over  normal-Œ©    ‚Ñã     \mu:\{\text{family of distributions over }\Omega\}\mapsto\mathcal{H}   is injective. 9 Each distribution can thus be uniquely represented in the RKHS and all statistical features of distributions are preserved by the kernel embedding if a characteristic kernel is used.  Empirical kernel embedding  Given   n   n   n   training examples    {   x  1   ,  ‚Ä¶  ,   x  n   }      subscript  x  1   normal-‚Ä¶   subscript  x  n     \{x_{1},\dots,x_{n}\}   drawn independently and identically distributed (i.i.d.) from   P   P   P   , the kernel embedding of   P   P   P   can be empirically estimated as          Œº  ^   X   =    1  n     ‚àë   i  =  1   n    œï   (   x  i   )           subscript   normal-^  Œº   X       1  n     superscript   subscript     i  1    n     œï   subscript  x  i        \widehat{\mu}_{X}=\frac{1}{n}\sum_{i=1}^{n}\phi(x_{i})        Joint distribution embedding  If   Y   Y   Y   denotes another random variable (for simplicity, assume the domain of   Y   Y   Y   is also   Œ©   normal-Œ©   \Omega   with the same kernel   k   k   k   which satisfies     ‚ü®     œï   (  x  )    ‚äó  œï    (  y  )    ,     œï   (   x  ‚Ä≤   )    ‚äó  œï    (   y  ‚Ä≤   )    ‚ü©   =     k   (  x  ,   x  ‚Ä≤   )    ‚äó  k    (  y  ,   y  ‚Ä≤   )            tensor-product    œï  x   œï   y      tensor-product    œï   superscript  x  normal-‚Ä≤    œï    superscript  y  normal-‚Ä≤        tensor-product    k   x   superscript  x  normal-‚Ä≤     k    y   superscript  y  normal-‚Ä≤       \langle\phi(x)\otimes\phi(y),\phi(x^{\prime})\otimes\phi(y^{\prime})\rangle=k(%
 x,x^{\prime})\otimes k(y,y^{\prime})   ), then the joint distribution     P   (  X  ,  Y  )       P   X  Y     P(X,Y)   can be mapped into a tensor product feature space    ‚Ñã  ‚äó  ‚Ñã     tensor-product  ‚Ñã  ‚Ñã    \mathcal{H}\otimes\mathcal{H}   via 10         ùíû   X  Y    =    ùîº   X  Y     [     œï   (  X  )    ‚äó  œï    (  Y  )    ]    =    ‚à´   Œ©  √ó  Œ©       œï   (  x  )    ‚äó  œï    (  y  )   d  P   (  x  ,  y  )            subscript  ùíû    X  Y       subscript  ùîº    X  Y     delimited-[]     tensor-product    œï  X   œï   Y            subscript     normal-Œ©  normal-Œ©       tensor-product    œï  x   œï   y  normal-d  P   x  y        \mathcal{C}_{XY}=\mathbb{E}_{XY}[\phi(X)\otimes\phi(Y)]=\int_{\Omega\times%
 \Omega}\phi(x)\otimes\phi(y)\ \mathrm{d}P(x,y)        By the equivalence between a tensor and a linear map , this joint embedding may be interpreted as an uncentered cross-covariance operator     ùíû   X  Y    :   ‚Ñã  ‚Ü¶  ‚Ñã      normal-:   subscript  ùíû    X  Y     maps-to  ‚Ñã  ‚Ñã     \mathcal{C}_{XY}:\mathcal{H}\mapsto\mathcal{H}   from which the cross-covariance of mean-zero functions     f  ,  g   ‚àà  ‚Ñã       f  g   ‚Ñã    f,g\in\mathcal{H}   can be computed as 11          Cov   X  Y     (   f   (  X  )    ,   g   (  Y  )    )    :=    ùîº   X  Y     [   f   (  X  )   g   (  Y  )    ]    =    ‚ü®  f  ,    ùíû   X  Y    g   ‚ü©   ‚Ñã   =    ‚ü®   f  ‚äó  g   ,   ùíû   X  Y    ‚ü©    ‚Ñã  ‚äó  ‚Ñã         assign     subscript  Cov    X  Y       f  X     g  Y        subscript  ùîº    X  Y     delimited-[]    f  X  g  Y           subscript   f     subscript  ùíû    X  Y    g    ‚Ñã         subscript    tensor-product  f  g    subscript  ùíû    X  Y      tensor-product  ‚Ñã  ‚Ñã       \text{Cov}_{XY}(f(X),g(Y)):=\mathbb{E}_{XY}[f(X)g(Y)]=\langle f,\mathcal{C}_{%
 XY}g\rangle_{\mathcal{H}}=\langle f\otimes g,\mathcal{C}_{XY}\rangle_{\mathcal%
 {H}\otimes\mathcal{H}}        Given   n   n   n   pairs of training examples    {   (   x  1   ,   y  1   )   ,  ‚Ä¶  ,   (   x  n   ,   y  n   )   }       subscript  x  1    subscript  y  1    normal-‚Ä¶    subscript  x  n    subscript  y  n      \{(x_{1},y_{1}),\dots,(x_{n},y_{n})\}   drawn i.i.d. from   P   P   P   , we can also empirically estimate the joint distribution kernel embedding via          ùíû  ^    X  Y    =    1  n     ‚àë   i  =  1   n      œï   (   x  i   )    ‚äó  œï    (   y  i   )           subscript   normal-^  ùíû     X  Y        1  n     superscript   subscript     i  1    n      tensor-product    œï   subscript  x  i    œï    subscript  y  i        \widehat{\mathcal{C}}_{XY}=\frac{1}{n}\sum_{i=1}^{n}\phi(x_{i})\otimes\phi(y_{%
 i})        Conditional distribution embedding  Given a conditional distribution     P   (  Y  ‚à£  X  )      fragments  P   fragments  normal-(  Y  normal-‚à£  X  normal-)     P(Y\mid X)   , one can define the corresponding RKHS embedding as 12         Œº   Y  ‚à£  x    =   ùîº   Y  ‚à£  x     [  œï   (  Y  )   ]   =   ‚à´  Œ©   œï   (  y  )   d  P   (  y  ‚à£  x  )      fragments   subscript  Œº   fragments  Y  normal-‚à£  x      subscript  ùîº   fragments  Y  normal-‚à£  x     fragments  normal-[  œï   fragments  normal-(  Y  normal-)   normal-]     subscript   normal-Œ©   œï   fragments  normal-(  y  normal-)   d  P   fragments  normal-(  y  normal-‚à£  x  normal-)     \mu_{Y\mid x}=\mathbb{E}_{Y\mid x}[\phi(Y)]=\int_{\Omega}\phi(y)\ \mathrm{d}P(%
 y\mid x)        Note that the embedding of    P   (  Y  ‚à£  X  )      fragments  P   fragments  normal-(  Y  normal-‚à£  X  normal-)     P(Y\mid X)   thus defines a family of points in the RKHS indexed by the values   x   x   x   taken by conditioning variable   X   X   X   . By fixing   X   X   X   to a particular value, we obtain a single element in   ‚Ñã   ‚Ñã   \mathcal{H}   , and thus it is natural to define the operator         ùíû   Y  ‚à£  X    :   ‚Ñã  ‚Ü¶  ‚Ñã      normal-:   subscript  ùíû   fragments  Y  normal-‚à£  X     maps-to  ‚Ñã  ‚Ñã     \mathcal{C}_{Y\mid X}:\mathcal{H}\mapsto\mathcal{H}   as     ùíû   Y  ‚à£  X    =    ùíû   Y  X     ùíû   X  X    -  1          subscript  ùíû   fragments  Y  normal-‚à£  X       subscript  ùíû    Y  X     superscript   subscript  ùíû    X  X      1       \mathcal{C}_{Y\mid X}=\mathcal{C}_{YX}\mathcal{C}_{XX}^{-1}        which given the feature mapping of   x   x   x   outputs the conditional embedding of   Y   Y   Y   given    X  =  x      X  x    X=x   . Assuming that for all     g  ‚àà  ‚Ñã   :     ùîº   Y  ‚à£  X     [   g   (  Y  )    ]    ‚àà  ‚Ñã      normal-:    g  ‚Ñã        subscript  ùîº   fragments  Y  normal-‚à£  X     delimited-[]    g  Y     ‚Ñã     g\in\mathcal{H}:\ \mathbb{E}_{Y\mid X}[g(Y)]\in\mathcal{H}   , it can be shown that 13         Œº   Y  ‚à£  x    =    ùíû   Y  ‚à£  X    œï   (  x  )         subscript  Œº   fragments  Y  normal-‚à£  x       subscript  ùíû   fragments  Y  normal-‚à£  X    œï  x     \mu_{Y\mid x}=\mathcal{C}_{Y\mid X}\phi(x)        This assumption is always true for finite domains with characteristic kernels, but may not necessarily hold for continuous domains. 14 Nevertheless, even in cases where the assumption fails,     ùíû   Y  ‚à£  X    œï   (  x  )        subscript  ùíû   fragments  Y  normal-‚à£  X    œï  x    \mathcal{C}_{Y\mid X}\phi(x)   may still be used to approximate the conditional kernel embedding    Œº   Y  ‚à£  x      subscript  Œº   fragments  Y  normal-‚à£  x     \mu_{Y\mid x}   , and in practice, the inversion operator is replaced with a regularized version of itself     (    ùíû   X  X    +   Œª  ùêà    )    -  1      superscript     subscript  ùíû    X  X      Œª  ùêà      1     (\mathcal{C}_{XX}+\lambda\mathbf{I})^{-1}   (where   ùêà   ùêà   \mathbf{I}   denotes the identity matrix ).  Given training examples    {   (   x  1   ,   y  1   )   ,  ‚Ä¶  ,   (   x  n   ,   y  n   )   }       subscript  x  1    subscript  y  1    normal-‚Ä¶    subscript  x  n    subscript  y  n      \{(x_{1},y_{1}),\dots,(x_{n},y_{n})\}   , the empirical kernel conditional embedding operator may be estimated as 15          C  ^    Y  ‚à£  X    =   ùöΩ    (   ùêä  +   Œª  ùêà    )    -  1     ùöº  T         subscript   normal-^  C    fragments  Y  normal-‚à£  X      ùöΩ   superscript    ùêä    Œª  ùêà      1     superscript  ùöº  T      \widehat{C}_{Y\mid X}=\boldsymbol{\Phi}(\mathbf{K}+\lambda\mathbf{I})^{-1}%
 \boldsymbol{\Upsilon}^{T}        where     ùöΩ  =   (   œï   (   y  i   )    ,  ‚Ä¶  ,   (   y  n   )   )    ,   ùöº  =   (   œï   (   x  i   )    ,  ‚Ä¶  ,   (   x  n   )   )       formulae-sequence    ùöΩ     œï   subscript  y  i    normal-‚Ä¶   subscript  y  n       ùöº     œï   subscript  x  i    normal-‚Ä¶   subscript  x  n       \boldsymbol{\Phi}=\left(\phi(y_{i}),\dots,(y_{n})\right),\boldsymbol{\Upsilon}%
 =\left(\phi(x_{i}),\dots,(x_{n})\right)   are implicitly formed feature matrices,    ùêä  =    ùöº  T   ùöº       ùêä     superscript  ùöº  T   ùöº     \mathbf{K}=\boldsymbol{\Upsilon}^{T}\boldsymbol{\Upsilon}   is the Gram matrix for samples of   X   X   X   , and   Œª   Œª   \lambda   is a regularization parameter needed to avoid overfitting .  Thus, the empirical estimate of the kernel conditional embedding is given by a weighted sum of samples of   Y   Y   Y   in the feature space:          Œº  ^    Y  ‚à£  x    =    ‚àë   i  =  1   n     Œ≤  i    (  x  )   œï   (   y  i   )     =   ùöΩ  ùú∑   (  x  )           subscript   normal-^  Œº    fragments  Y  normal-‚à£  x      superscript   subscript     i  1    n      subscript  Œ≤  i   x  œï   subscript  y  i            ùöΩ  ùú∑  x      \widehat{\mu}_{Y\mid x}=\sum_{i=1}^{n}\beta_{i}(x)\phi(y_{i})=\boldsymbol{\Phi%
 }\boldsymbol{\beta}(x)   where     ùú∑   (  x  )    =     (   ùêä  +   Œª  ùêà    )    -  1     ùêä  x          ùú∑  x      superscript    ùêä    Œª  ùêà      1     subscript  ùêä  x      \boldsymbol{\beta}(x)=(\mathbf{K}+\lambda\mathbf{I})^{-1}\mathbf{K}_{x}   and     ùêä  x   =    (   k   (   x  1   ,  x  )    ,  ‚Ä¶  ,   k   (   x  n   ,  x  )    )   T        subscript  ùêä  x    superscript     k    subscript  x  1   x    normal-‚Ä¶    k    subscript  x  n   x     T     \mathbf{K}_{x}=\left(k(x_{1},x),\dots,k(x_{n},x)\right)^{T}        Properties   The expectation of any function   f   f   f   in the RKHS can be computed as an inner product with the kernel embedding:           ùîº  X    [   f   (  X  )    ]    =    ‚ü®  f  ,   Œº  X   ‚ü©   ‚Ñã          subscript  ùîº  X    delimited-[]    f  X      subscript   f   subscript  Œº  X    ‚Ñã     \mathbb{E}_{X}[f(X)]=\langle f,\mu_{X}\rangle_{\mathcal{H}}         In the presence of large sample sizes, manipulations of the    n  √ó  n      n  n    n\times n   Gram matrix may be computationally demanding. Through use of a low-rank approximation of the Gram matrix (such as the incomplete Cholesky factorization ), running time and memory requirements of kernel-embedding-based learning algorithms can be drastically reduced without suffering much loss in approximation accuracy. 16   Convergence of empirical kernel mean to the true distribution embedding   If   k   k   k   is defined such that    f  ‚àà   [  0  ,  1  ]       f   0  1     f\in[0,1]   for all    f  ‚àà  ‚Ñã      f  ‚Ñã    f\in\mathcal{H}   with      ||  f  ||   ‚Ñã   ‚â§  1       subscript   norm  f   ‚Ñã   1    ||f||_{\mathcal{H}}\leq 1   (as is the case for the widely used radial basis function kernels), then with probability at least    1  -  Œ¥      1  Œ¥    \ 1-\delta   : 17       ||    Œº  X   -    Œº  ^   X    ||   ‚Ñã   =    sup   f  ‚àà   ‚Ñ¨   (  0  ,  1  )       |     ùîº  X    [   f   (  X  )    ]    -    1  n     ‚àë   i  =  1   n    f   (   x  i   )       |    ‚â§     2  n    ùîº  X    [    tr  K    ]    +     log   (   2  /  Œ¥   )     2  n             subscript   norm     subscript  Œº  X    subscript   normal-^  Œº   X     ‚Ñã     subscript  supremum    f    ‚Ñ¨   0  1             subscript  ùîº  X    delimited-[]    f  X         1  n     superscript   subscript     i  1    n     f   subscript  x  i                    2  n    subscript  ùîº  X    delimited-[]      tr  K              2  Œ¥      2  n         ||\mu_{X}-\widehat{\mu}_{X}||_{\mathcal{H}}=\sup_{f\in\mathcal{B}(0,1)}\left|%
 \mathbb{E}_{X}[f(X)]-\frac{1}{n}\sum_{i=1}^{n}f(x_{i})\right|\leq\frac{2}{n}%
 \mathbb{E}_{X}\left[\sqrt{\text{tr}K}\right]+\sqrt{\frac{\log(2/\delta)}{2n}}    where    ‚Ñ¨   (  0  ,  1  )       ‚Ñ¨   0  1     \mathcal{B}(0,1)   denotes the unit ball in   ‚Ñã   ‚Ñã   \mathcal{H}   and   ùêä   ùêä   \mathbf{K}   is the Gram matrix whose    i  ,  j     i  j    i,j   th entry is    k   (   x  i   ,   x  j   )       k    subscript  x  i    subscript  x  j      k(x_{i},x_{j})   .  The rate of convergence (in RKHS norm) of the empirical kernel embedding to its distribution counterpart is    O   (   n   -   1  /  2     )       O   superscript  n      1  2       O(n^{-1/2})   and does not depend on the dimension of   X   X   X   .  Statistics based on kernel embeddings thus avoid the curse of dimensionality , and though the true underlying distribution is unknown in practice, one can (with high probability) obtain an approximation within    O   (   n   -   1  /  2     )       O   superscript  n      1  2       O(n^{-1/2})   of the true kernel embedding based on a finite sample of size   n   n   n   .  For the embedding of conditional distributions, the empirical estimate can be seen as a weighted average of feature mappings (where the weights     Œ≤  i    (  x  )        subscript  Œ≤  i   x    \beta_{i}(x)   depend on the value of the conditioning variable and capture the effect of the conditioning on the kernel embedding). In this case, the empirical estimate converges to the conditional distribution RKHS embedding with rate    O   (   n   -   1  /  4     )       O   superscript  n      1  4       O\left(n^{-1/4}\right)   if the regularization parameter   Œª   Œª   \lambda   is decreased as    O   (   n   -   1  /  2     )       O   superscript  n      1  2       O\left(n^{-1/2}\right)   , though faster rates of convergence may be achieved by placing additional assumptions on the joint distribution. 18   Universal kernels   Letting    C   (  ùí≥  )       C  ùí≥    C(\mathcal{X})   denote the space of continuous  bounded functions on compact domain   ùí≥   ùí≥   \mathcal{X}   , we call a kernel   k   k   k    universal if    k   (  x  ,  ‚ãÖ  )       k   x  normal-‚ãÖ     k(x,\cdot)   is continuous for all   x   x   x   and the RKHS induced by   k   k   k   is dense in    C   (  ùí≥  )       C  ùí≥    C(\mathcal{X})   .    If   k   k   k   induces a strictly positive definite kernel matrix for any set of distinct points, then it is a universal kernel. 19 For example, the widely used Gaussian RBF kernel          k   (  x  ,   x  ‚Ä≤   )    =   exp   (   -    1   2   œÉ  2       ||   x  -   x  ‚Ä≤    ||   2     )          k   x   superscript  x  normal-‚Ä≤             1    2   superscript  œÉ  2      superscript   norm    x   superscript  x  normal-‚Ä≤     2        k(x,x^{\prime})=\exp\left(-\frac{1}{2\sigma^{2}}||x-x^{\prime}||^{2}\right)        on compact subsets of    ‚Ñù  d     superscript  ‚Ñù  d    \mathbb{R}^{d}   is universal.   If   k   k   k   is universal, then it is characteristic , i.e. the kernel embedding is one-to-one. 20   Parameter selection for conditional distribution kernel embeddings   The empirical kernel conditional distribution embedding operator     ùíû  ^    Y  |  X      subscript   normal-^  ùíû    fragments  Y  normal-|  X     \widehat{\mathcal{C}}_{Y|X}   can alternatively be viewed as the solution of the following regularized least squares (function-valued) regression problem 21           min   ùíû  :   ‚Ñã  ‚Ü¶  ‚Ñã       ‚àë   i  =  1   n     ||    œï   (   y  i   )    -   ùíû  œï   (   x  i   )     ||   ‚Ñã  2     +   Œª    ||  ùíû  ||    H  S   2           subscript    normal-:  ùíû   maps-to  ‚Ñã  ‚Ñã       superscript   subscript     i  1    n    superscript   subscript   norm      œï   subscript  y  i      ùíû  œï   subscript  x  i      ‚Ñã   2       Œª   superscript   subscript   norm  ùíû     H  S    2      \min_{\mathcal{C}:\mathcal{H}\mapsto\mathcal{H}}\sum_{i=1}^{n}||\phi(y_{i})-%
 \mathcal{C}\phi(x_{i})||_{\mathcal{H}}^{2}+\lambda||\mathcal{C}||_{HS}^{2}   where    |  |  ‚ãÖ  |   |   H  S       fragments  normal-|  normal-|  normal-‚ãÖ  normal-|   subscript  normal-|    H  S      ||\cdot||_{HS}   is the Hilbert-Schmidt norm .      One can thus select the regularization parameter   Œª   Œª   \lambda   by performing cross-validation based on the squared loss function of the regression problem.   Rules of probability as operations in the RKHS  This section illustrates how basic probabilistic rules may be reformulated as (multi)linear algebraic operations in the kernel embedding framework and is primarily based on the work of Song et al. 22 23 The following notation is adopted:        P   (  X  ,  Y  )    =         P   X  Y    absent    P(X,Y)=   joint distribution over random variables    X  ,  Y     X  Y    X,Y          P   (  X  )    =    ‚à´  Œ©    P   (  X  ,   d  y   )     =           P  X     subscript   normal-Œ©     P   X    normal-d  y           absent     P(X)=\int_{\Omega}P(X,\mathrm{d}y)=   marginal distribution of   X   X   X   ;     P   (  Y  )    =         P  Y   absent    P(Y)=   marginal distribution of   Y   Y   Y         P   (  Y  ‚à£  X  )   =    P   (  X  ,  Y  )     P   (  X  )     =     fragments  P   fragments  normal-(  Y  normal-‚à£  X  normal-)        P   X  Y      P  X       P(Y\mid X)=\frac{P(X,Y)}{P(X)}=   conditional distribution of   Y   Y   Y   given   X   X   X   with corresponding conditional embedding operator    ùíû   Y  ‚à£  X      subscript  ùíû   fragments  Y  normal-‚à£  X     \mathcal{C}_{Y\mid X}          œÄ   (  Y  )    =         œÄ  Y   absent    \pi(Y)=   prior distribution over   Y   Y   Y        Q   Q   Q   is used to distinguish distributions which incorporate the prior from distributions   P   P   P   which do not rely on the prior   In practice, all embeddings are empirically estimated from data    {   (   x  1   ,   y  1   )   ,  ‚Ä¶  ,   (   x  n   ,   y  n   )   }       subscript  x  1    subscript  y  1    normal-‚Ä¶    subscript  x  n    subscript  y  n      \{(x_{1},y_{1}),\dots,(x_{n},y_{n})\}   and it assumed that a set of samples    {    y  ~   1   ,  ‚Ä¶  ,    y  ~    n  ~    }      subscript   normal-~  y   1   normal-‚Ä¶   subscript   normal-~  y    normal-~  n      \{\widetilde{y}_{1},\dots,\widetilde{y}_{\widetilde{n}}\}   may be used to estimate the kernel embedding of the prior distribution    œÄ   (  Y  )       œÄ  Y    \pi(Y)   .  Kernel sum rule  In probability theory, the marginal distribution of   X   X   X   can be computed by integrating out   Y   Y   Y   from the joint density (including the prior distribution on   Y   Y   Y   )        Q   (  X  )   =   ‚à´  Œ©   P   (  X  ‚à£  Y  )   d  œÄ   (  Y  )      fragments  Q   fragments  normal-(  X  normal-)     subscript   normal-Œ©   P   fragments  normal-(  X  normal-‚à£  Y  normal-)   d  œÄ   fragments  normal-(  Y  normal-)     Q(X)=\int_{\Omega}P(X\mid Y)\mathrm{d}\pi(Y)        The analog of this rule in the kernel embedding framework states that    Œº  X  œÄ     superscript   subscript  Œº  X   œÄ    \mu_{X}^{\pi}   , the RKHS embedding of    Q   (  X  )       Q  X    Q(X)   , can be computed via         Œº  X  œÄ   =    ùîº  Y    [    ùíû   X  ‚à£  Y    œï   (  Y  )    ]    =    ùíû   X  ‚à£  Y     ùîº  Y    [   œï   (  Y  )    ]    =    ùíû   X  ‚à£  Y     Œº  Y  œÄ           superscript   subscript  Œº  X   œÄ      subscript  ùîº  Y    delimited-[]     subscript  ùíû   fragments  X  normal-‚à£  Y    œï  Y             subscript  ùíû   fragments  X  normal-‚à£  Y     subscript  ùîº  Y    delimited-[]    œï  Y             subscript  ùíû   fragments  X  normal-‚à£  Y     superscript   subscript  Œº  Y   œÄ       \mu_{X}^{\pi}=\mathbb{E}_{Y}[\mathcal{C}_{X\mid Y}\phi(Y)]=\mathcal{C}_{X\mid Y%
 }\mathbb{E}_{Y}[\phi(Y)]=\mathcal{C}_{X\mid Y}\mu_{Y}^{\pi}   where    Œº  Y  œÄ     superscript   subscript  Œº  Y   œÄ    \mu_{Y}^{\pi}   is the kernel embedding of    œÄ   (  Y  )       œÄ  Y    \pi(Y)        In practical implementations, the kernel sum rule takes the following form          Œº  ^   X  œÄ   =     ùíû  ^    X  ‚à£  Y      Œº  ^   Y  œÄ    =   ùöº    (   G  +   Œª  ùêà    )    -  1     ùëÆ  ~   ùú∂          superscript   subscript   normal-^  Œº   X   œÄ      subscript   normal-^  ùíû    fragments  X  normal-‚à£  Y     superscript   subscript   normal-^  Œº   Y   œÄ           ùöº   superscript    G    Œª  ùêà      1     normal-~  ùëÆ   ùú∂      \widehat{\mu}_{X}^{\pi}=\widehat{\mathcal{C}}_{X\mid Y}\widehat{\mu}_{Y}^{\pi}%
 =\boldsymbol{\Upsilon}(G+\lambda\mathbf{I})^{-1}\widetilde{\boldsymbol{G}}%
 \boldsymbol{\alpha}        where     Œº  Y  œÄ   =    ‚àë   i  =  1    n  ~      Œ±  i   œï   (    y  ~   i   )          superscript   subscript  Œº  Y   œÄ     superscript   subscript     i  1     normal-~  n       subscript  Œ±  i   œï   subscript   normal-~  y   i       \mu_{Y}^{\pi}=\sum_{i=1}^{\widetilde{n}}\alpha_{i}\phi(\widetilde{y}_{i})   is the empirical kernel embedding of the prior distribution,    ùú∂  =    (   Œ±  1   ,  ‚Ä¶  ,   Œ±   n  ~    )   T       ùú∂   superscript    subscript  Œ±  1   normal-‚Ä¶   subscript  Œ±   normal-~  n     T     \boldsymbol{\alpha}=(\alpha_{1},\dots,\alpha_{\widetilde{n}})^{T}   ,    ùöº  =   (   œï   (   x  1   )    ,  ‚Ä¶  ,   œï   (   x  n   )    )       ùöº     œï   subscript  x  1    normal-‚Ä¶    œï   subscript  x  n       \boldsymbol{\Upsilon}=\left(\phi(x_{1}),\dots,\phi(x_{n})\right)   , and    ùêÜ  ,   ùêÜ  ~      ùêÜ   normal-~  ùêÜ     \mathbf{G},\widetilde{\mathbf{G}}   are Gram matrices with entries      ùêÜ   i  j    =   k   (   y  i   ,   y  j   )     ,     ùêÜ  ~    i  j    =   k   (   y  i   ,    y  ~   j   )        formulae-sequence     subscript  ùêÜ    i  j      k    subscript  y  i    subscript  y  j         subscript   normal-~  ùêÜ     i  j      k    subscript  y  i    subscript   normal-~  y   j        \mathbf{G}_{ij}=k(y_{i},y_{j}),\widetilde{\mathbf{G}}_{ij}=k(y_{i},\widetilde{%
 y}_{j})   respectively.  Kernel chain rule  In probability theory, a joint distribution can be factorized into a product between conditional and marginal distributions        Q   (  X  ,  Y  )   =  P   (  X  ‚à£  Y  )   œÄ   (  Y  )      fragments  Q   fragments  normal-(  X  normal-,  Y  normal-)    P   fragments  normal-(  X  normal-‚à£  Y  normal-)   œÄ   fragments  normal-(  Y  normal-)     Q(X,Y)=P(X\mid Y)\pi(Y)        The analog of this rule in the kernel embedding framework states that    ùíû   X  Y   œÄ     superscript   subscript  ùíû    X  Y    œÄ    \mathcal{C}_{XY}^{\pi}   , the joint embedding of    Q   (  X  ,  Y  )       Q   X  Y     Q(X,Y)   , can be factorized as a composition of conditional embedding operator with the auto-covariance operator associated with    œÄ   (  Y  )       œÄ  Y    \pi(Y)            ùíû   X  Y   œÄ   =    ùíû   X  ‚à£  Y     ùíû   Y  Y   œÄ         superscript   subscript  ùíû    X  Y    œÄ      subscript  ùíû   fragments  X  normal-‚à£  Y     superscript   subscript  ùíû    Y  Y    œÄ      \mathcal{C}_{XY}^{\pi}=\mathcal{C}_{X\mid Y}\mathcal{C}_{YY}^{\pi}   where     ùíû   X  Y   œÄ   =    ùîº   X  Y     [     œï   (  X  )    ‚äó  œï    (  Y  )    ]         superscript   subscript  ùíû    X  Y    œÄ      subscript  ùîº    X  Y     delimited-[]     tensor-product    œï  X   œï   Y       \mathcal{C}_{XY}^{\pi}=\mathbb{E}_{XY}[\phi(X)\otimes\phi(Y)]   and     ùíû   Y  Y   œÄ   =    ùîº  Y    [     œï   (  Y  )    ‚äó  œï    (  Y  )    ]         superscript   subscript  ùíû    Y  Y    œÄ      subscript  ùîº  Y    delimited-[]     tensor-product    œï  Y   œï   Y       \mathcal{C}_{YY}^{\pi}=\mathbb{E}_{Y}[\phi(Y)\otimes\phi(Y)]        In practical implementations, the kernel chain rule takes the following form          ùíû  ^    X  Y   œÄ   =     ùíû  ^    X  ‚à£  Y      ùíû  ^    Y  Y   œÄ    =   ùöº    (   ùêÜ  +   Œª  ùêà    )    -  1     ùêÜ  ~   diag   (  ùú∂  )    ùöΩ  T           superscript   subscript   normal-^  ùíû     X  Y    œÄ      subscript   normal-^  ùíû    fragments  X  normal-‚à£  Y     superscript   subscript   normal-^  ùíû     Y  Y    œÄ           ùöº   superscript    ùêÜ    Œª  ùêà      1     normal-~  ùêÜ   diag  ùú∂   superscript  ùöΩ  T       \widehat{\mathcal{C}}_{XY}^{\pi}=\widehat{\mathcal{C}}_{X\mid Y}\widehat{%
 \mathcal{C}}_{YY}^{\pi}=\boldsymbol{\Upsilon}(\mathbf{G}+\lambda\mathbf{I})^{-%
 1}\widetilde{\mathbf{G}}\text{diag}(\boldsymbol{\alpha})\boldsymbol{\Phi}^{T}        Kernel Bayes' rule  In probability theory, a posterior distribution can be expressed in terms of a prior distribution and a likelihood function as        Q   (  Y  ‚à£  x  )   =    P   (  x  ‚à£  Y  )   œÄ   (  Y  )     Q   (  x  )        fragments  Q   fragments  normal-(  Y  normal-‚à£  x  normal-)       fragments  P   fragments  normal-(  x  normal-‚à£  Y  normal-)   œÄ   fragments  normal-(  Y  normal-)      Q  x      Q(Y\mid x)=\frac{P(x\mid Y)\pi(Y)}{Q(x)}   where    Q   (  x  )   =   ‚à´  Œ©   P   (  x  ‚à£  y  )   d  œÄ   (  y  )      fragments  Q   fragments  normal-(  x  normal-)     subscript   normal-Œ©   P   fragments  normal-(  x  normal-‚à£  y  normal-)   d  œÄ   fragments  normal-(  y  normal-)     Q(x)=\int_{\Omega}P(x\mid y)\mathrm{d}\pi(y)        The analog of this rule in the kernel embedding framework expresses the kernel embedding of the conditional distribution in terms of conditional embedding operators which are modified by the prior distribution         Œº   Y  ‚à£  x   œÄ   =    ùíû   Y  ‚à£  X   œÄ   œï   (  x  )    =    ùíû   Y  X   œÄ     (   ùíû   X  X   œÄ   )    -  1    œï   (  x  )           superscript   subscript  Œº   fragments  Y  normal-‚à£  x    œÄ      superscript   subscript  ùíû   fragments  Y  normal-‚à£  X    œÄ   œï  x           superscript   subscript  ùíû    Y  X    œÄ    superscript   superscript   subscript  ùíû    X  X    œÄ     1    œï  x      \mu_{Y\mid x}^{\pi}=\mathcal{C}_{Y\mid X}^{\pi}\phi(x)=\mathcal{C}_{YX}^{\pi}(%
 \mathcal{C}_{XX}^{\pi})^{-1}\phi(x)   where from the chain rule     ùíû   Y  X   œÄ   =    (    ùíû   X  ‚à£  Y     ùíû   Y  Y   œÄ    )   T        superscript   subscript  ùíû    Y  X    œÄ    superscript     subscript  ùíû   fragments  X  normal-‚à£  Y     superscript   subscript  ùíû    Y  Y    œÄ    T     \mathcal{C}_{YX}^{\pi}=\left(\mathcal{C}_{X\mid Y}\mathcal{C}_{YY}^{\pi}\right%
 )^{T}   .     In practical implementations, the kernel Bayes' rule takes the following form          Œº  ^    Y  ‚à£  x   œÄ   =     ùíû  ^    Y  X   œÄ     (     (    ùíû  ^    X  X    )   2   +    Œª  ~   ùêà    )    -  1      ùíû  ^    X  X   œÄ   œï   (  x  )    =    ùöΩ  ~    ùö≤  T     (     (  ùêÉùêä  )   2   +    Œª  ~   ùêà    )    -  1     ùêäùêÉùêä  x           superscript   subscript   normal-^  Œº    fragments  Y  normal-‚à£  x    œÄ      superscript   subscript   normal-^  ùíû     Y  X    œÄ    superscript     superscript   subscript   normal-^  ùíû     X  X    2      normal-~  Œª   ùêà      1     superscript   subscript   normal-^  ùíû     X  X    œÄ   œï  x           normal-~  ùöΩ    superscript  ùö≤  T    superscript     superscript  ùêÉùêä  2      normal-~  Œª   ùêà      1     subscript  ùêäùêÉùêä  x       \widehat{\mu}_{Y\mid x}^{\pi}=\widehat{\mathcal{C}}_{YX}^{\pi}\left((\widehat{%
 \mathcal{C}}_{XX})^{2}+\widetilde{\lambda}\mathbf{I}\right)^{-1}\widehat{%
 \mathcal{C}}_{XX}^{\pi}\phi(x)=\widetilde{\boldsymbol{\Phi}}\boldsymbol{%
 \Lambda}^{T}\left((\mathbf{D}\mathbf{K})^{2}+\widetilde{\lambda}\mathbf{I}%
 \right)^{-1}\mathbf{K}\mathbf{D}\mathbf{K}_{x}        where     ùö≤  =     (   ùêÜ  +    Œª  ~   ùêà    )    -  1     ùêÜ  ~   diag   (  ùú∂  )     ,   ùêÉ  =   diag   (     (   ùêÜ  +    Œª  ~   ùêà    )    -  1     ùêÜ  ~   ùú∂   )        formulae-sequence    ùö≤     superscript    ùêÜ     normal-~  Œª   ùêà      1     normal-~  ùêÜ   diag  ùú∂      ùêÉ    diag     superscript    ùêÜ     normal-~  Œª   ùêà      1     normal-~  ùêÜ   ùú∂       \boldsymbol{\Lambda}=\left(\mathbf{G}+\widetilde{\lambda}\mathbf{I}\right)^{-1%
 }\widetilde{\mathbf{G}}\text{diag}(\boldsymbol{\alpha}),\mathbf{D}=\text{diag}%
 \left(\left(\mathbf{G}+\widetilde{\lambda}\mathbf{I}\right)^{-1}\widetilde{%
 \mathbf{G}}\boldsymbol{\alpha}\right)   . Two regularization parameters are used in this framework   Œª   Œª   \lambda   for the estimation of       ùíû  ^    Y  X   œÄ   ,    ùíû  ^    X  X   œÄ    =   ùöº  ùêÉ   ùöº  T          superscript   subscript   normal-^  ùíû     Y  X    œÄ    superscript   subscript   normal-^  ùíû     X  X    œÄ      ùöº  ùêÉ   superscript  ùöº  T      \widehat{\mathcal{C}}_{YX}^{\pi},\widehat{\mathcal{C}}_{XX}^{\pi}=\boldsymbol{%
 \Upsilon}\mathbf{D}\boldsymbol{\Upsilon}^{T}   and    Œª  ~     normal-~  Œª    \widetilde{\lambda}   for the estimation of the final conditional embedding operator      ùíû  ^    Y  ‚à£  X   œÄ   =     ùíû  ^    Y  X   œÄ     (     (    ùíû  ^    X  X   œÄ   )   2   +    Œª  ~   ùêà    )    -  1      ùíû  ^    X  X   œÄ         superscript   subscript   normal-^  ùíû    fragments  Y  normal-‚à£  X    œÄ      superscript   subscript   normal-^  ùíû     Y  X    œÄ    superscript     superscript   superscript   subscript   normal-^  ùíû     X  X    œÄ   2      normal-~  Œª   ùêà      1     superscript   subscript   normal-^  ùíû     X  X    œÄ      \widehat{\mathcal{C}}_{Y\mid X}^{\pi}=\widehat{\mathcal{C}}_{YX}^{\pi}\left((%
 \widehat{\mathcal{C}}_{XX}^{\pi})^{2}+\widetilde{\lambda}\mathbf{I}\right)^{-1%
 }\widehat{\mathcal{C}}_{XX}^{\pi}   . The latter regularization is done on square of     ùíû  ^    X  X   œÄ     superscript   subscript   normal-^  ùíû     X  X    œÄ    \widehat{\mathcal{C}}_{XX}^{\pi}   because   D   D   D   may not be positive definite .  Applications  Measuring distance between distributions  The maximum mean discrepancy (MMD) is a distance-measure between distributions    P   (  X  )       P  X    P(X)   and    Q   (  Y  )       Q  Y    Q(Y)   which is defined as the squared distance between their embeddings in the RKHS 24         MMD   (  P  ,  Q  )    =    ||    Œº  X   -   Œº  Y    ||   ‚Ñã  2         MMD   P  Q     superscript   subscript   norm     subscript  Œº  X    subscript  Œº  Y     ‚Ñã   2     \text{MMD}(P,Q)=\left|\left|\mu_{X}-\mu_{Y}\right|\right|_{\mathcal{H}}^{2}        While most distance-measures between distributions such as the widely used Kullback‚ÄìLeibler divergence either require density estimation (either parametrically or nonparametrically) or space partitioning/bias correction strategies, 25 the MMD is easily estimated as an empirical mean which is concentrated around the true value of the MMD. The characterization of this distance as the maximum mean discrepancy refers to the fact that computing the MMD is equivalent to finding the RKHS function that maximizes the difference in expectations between the two probability distributions         MMD   (  P  ,  Q  )    =    sup     ||  f  ||   ‚Ñã   ‚â§  1     (     ùîº  X    [   f   (  X  )    ]    -    ùîº  Y    [   f   (  Y  )    ]     )          MMD   P  Q      subscript  supremum     subscript   norm  f   ‚Ñã   1         subscript  ùîº  X    delimited-[]    f  X        subscript  ùîº  Y    delimited-[]    f  Y         \text{MMD}(P,Q)=\sup_{||f||_{\mathcal{H}}\leq 1}\left(\mathbb{E}_{X}[f(X)]-%
 \mathbb{E}_{Y}[f(Y)]\right)        Kernel two sample test  Given n training examples from    P   (  X  )       P  X    P(X)   and m samples from    Q   (  Y  )       Q  Y    Q(Y)   , one can formulate a test statistic based on the empirical estimate of the MMD          MMD  ^    (  P  ,  Q  )    =    ||     1  n     ‚àë   i  =  1   n    œï   (   x  i   )      -    1  m     ‚àë   i  =  1   m    œï   (   y  i   )       ||   ‚Ñã  2   =    1   n  m      ‚àë   i  =  1   n     ‚àë   j  =  1   m    [     k   (   x  i   ,   x  j   )    +   k   (   y  i   ,   y  j   )     -   2  k   (   x  i   ,   y  j   )     ]               normal-^  MMD    P  Q     superscript   subscript   norm        1  n     superscript   subscript     i  1    n     œï   subscript  x  i          1  m     superscript   subscript     i  1    m     œï   subscript  y  i        ‚Ñã   2            1    n  m      superscript   subscript     i  1    n     superscript   subscript     j  1    m    delimited-[]        k    subscript  x  i    subscript  x  j       k    subscript  y  i    subscript  y  j        2  k    subscript  x  i    subscript  y  j             \widehat{\text{MMD}}(P,Q)=\left|\left|\frac{1}{n}\sum_{i=1}^{n}\phi(x_{i})-%
 \frac{1}{m}\sum_{i=1}^{m}\phi(y_{i})\right|\right|_{\mathcal{H}}^{2}=\frac{1}{%
 nm}\sum_{i=1}^{n}\sum_{j=1}^{m}\left[k(x_{i},x_{j})+k(y_{i},y_{j})-2k(x_{i},y_%
 {j})\right]        to obtain a two-sample test  26 of the null hypothesis that both samples stem from the same distribution (i.e.    P  =  Q      P  Q    P=Q   ) against the broad alternative    P  ‚â†  Q      P  Q    P\neq Q   .  Density estimation via kernel embeddings  Although learning algorithms in the kernel embedding framework circumvent the need for intermediate density estimation, one may nonetheless use the empirical embedding to perform density estimation based on n samples drawn from an underlying distribution    P  X  *     superscript   subscript  P  X      P_{X}^{*}   . This can be done by solving the following optimization problem 27 28          max   P  X    H    (   P  X   )         subscript    subscript  P  X    H    subscript  P  X     \max_{P_{X}}H(P_{X})   subject to      ||     Œº  ^   X   -    Œº  X    [   P  X   ]     ||   ‚Ñã   ‚â§  œµ       subscript   norm     subscript   normal-^  Œº   X      subscript  Œº  X    delimited-[]   subscript  P  X       ‚Ñã   œµ    ||\widehat{\mu}_{X}-\mu_{X}[P_{X}]||_{\mathcal{H}}\leq\epsilon        where the maximization is done over the entire space of distributions on   Œ©   normal-Œ©   \Omega   . Here,     Œº  X    [   P  X   ]        subscript  Œº  X    delimited-[]   subscript  P  X      \mu_{X}[P_{X}]   is the kernel embedding of the proposed density    P  X     subscript  P  X    P_{X}   and   H   H   H   is an entropy-like quantity (e.g. Entropy , KL divergence , Bregman divergence ). The distribution which solves this optimization may be interpreted as a compromise between fitting the empirical kernel means of the samples well, while still allocating a substantial portion of the probability mass to all regions of the probability space (much of which may not be represented in the training examples). In practice, a good approximate solution of the difficult optimization may be found by restricting the space of candidate densities to a mixture of M candidate distributions with regularized mixing proportions. Connections between the ideas underlying Gaussian processes and conditional random fields may be drawn with the estimation of conditional probability distributions in this fashion, if one views the feature mappings associated with the kernel as sufficient statistics in generalized (possibly infinite-dimensional) exponential families . 29  Measuring dependence of random variables  A measure of the statistical dependence between random variables   X   X   X   and   Y   Y   Y   (from any domains on which sensible kernels can be defined) can be formulated based on the Hilbert‚ÄìSchmidt Independence Criterion 30         HSIC   (  X  ,  Y  )    =    ||    ùíû   X  Y    -    Œº  X   ‚äó   Œº  Y     ||    ‚Ñã  ‚äó  ‚Ñã   2         HSIC   X  Y     superscript   subscript   norm     subscript  ùíû    X  Y     tensor-product   subscript  Œº  X    subscript  Œº  Y       tensor-product  ‚Ñã  ‚Ñã    2     \text{HSIC}(X,Y)=\left|\left|\mathcal{C}_{XY}-\mu_{X}\otimes\mu_{Y}\right|%
 \right|_{\mathcal{H}\otimes\mathcal{H}}^{2}        and can be used as a principled replacement for mutual information , Pearson correlation or any other dependence measure used in learning algorithms. Most notably, HSIC can detect arbitrary dependencies (when a characteristic kernel is used in the embeddings, HSIC is zero if and only if the variables are independent ), and can be used to measure dependence between different types of data (e.g. images and text captions). Given n i.i.d. samples of each random variable, a simple parameter-free unbiased estimator of HSIC which exhibits concentration about the true value can be computed in    O   (   n   (    d  f  2   +   d  g  2    )    )       O    n     superscript   subscript  d  f   2    superscript   subscript  d  g   2       O(n(d_{f}^{2}+d_{g}^{2}))   time, 31 where the Gram matrices of the two datasets are approximated using     ùêÄùêÄ  T   ,   ùêÅùêÅ  T       superscript  ùêÄùêÄ  T    superscript  ùêÅùêÅ  T     \mathbf{A}\mathbf{A}^{T},\mathbf{B}\mathbf{B}^{T}   with     ùêÄ  ‚àà   ‚Ñù   n  √ó   d  f      ,   ùêÅ  ‚àà   ‚Ñù   n  √ó   d  g         formulae-sequence    ùêÄ   superscript  ‚Ñù    n   subscript  d  f        ùêÅ   superscript  ‚Ñù    n   subscript  d  g        \mathbf{A}\in\mathbb{R}^{n\times d_{f}},\mathbf{B}\in\mathbb{R}^{n\times d_{g}}   . The desirable properties of HSIC have led to the formulation of numerous algorithms which utilize this dependence measure for a variety of common machine learning tasks such as: feature selection (BAHSIC 32 ), clustering (CLUHSIC 33 ), and dimensionality reduction (MUHSIC 34 ).  Kernel belief propagation  Belief propagation is a fundamental algorithm for inference in graphical models in which nodes repeatedly pass and receive messages corresponding to the evaluation of conditional expectations. In the kernel embedding framework, the messages may be represented as RKHS functions and the conditional distribution embeddings can be applied to efficiently compute message updates. Given n samples of random variables represented by nodes in a Markov Random Field , the incoming message to node t from node u can be expressed as      m   u  t     (  ‚ãÖ  )    =    ‚àë   i  =  1   n     Œ≤   u  t   i   œï   (   x  t  i   )            subscript  m    u  t    normal-‚ãÖ     superscript   subscript     i  1    n      superscript   subscript  Œ≤    u  t    i   œï   superscript   subscript  x  t   i       m_{ut}(\cdot)=\sum_{i=1}^{n}\beta_{ut}^{i}\phi(x_{t}^{i})   if it assumed to lie in the RKHS. The kernel belief propagation update message from t to node s is then given by 35          m  ^    t  s    =    (   ‚äô   u  ‚àà    N   (  t  )    \  s      ùêä  t    ùú∑   u  t    )   T     (   ùêä  s   +  Œª  ùêà  )    -  1     ùöº  s  T   œï   (   x  s   )      fragments   subscript   normal-^  m     t  s      superscript   fragments  normal-(   subscript  direct-product    u   normal-\    N  t   s      subscript  ùêä  t    subscript  ùú∑    u  t    normal-)   T    superscript   fragments  normal-(   subscript  ùêä  s    Œª  I  normal-)     1     superscript   subscript  ùöº  s   T   œï   fragments  normal-(   subscript  x  s   normal-)     \widehat{m}_{ts}=\left(\odot_{u\in N(t)\backslash s}\mathbf{K}_{t}\boldsymbol{%
 \beta}_{ut}\right)^{T}(\mathbf{K}_{s}+\lambda\mathbf{I})^{-1}\boldsymbol{%
 \Upsilon}_{s}^{T}\phi(x_{s})        where   ‚äô   direct-product   \odot   denotes the element-wise vector product,     N   (  t  )    \  s     normal-\    N  t   s    N(t)\backslash s   is the set of nodes connected to t excluding node s ,     ùú∑   u  t    =   (   Œ≤   u  t   1   ,  ‚Ä¶  ,   Œ≤   u  t   n   )        subscript  ùú∑    u  t      superscript   subscript  Œ≤    u  t    1   normal-‚Ä¶   superscript   subscript  Œ≤    u  t    n      \boldsymbol{\beta}_{ut}=\left(\beta_{ut}^{1},\dots,\beta_{ut}^{n}\right)   ,     ùêä  t   ,   ùêä  s       subscript  ùêä  t    subscript  ùêä  s     \mathbf{K}_{t},\mathbf{K}_{s}   are the Gram matrices of the samples from variables     X  t   ,   X  s       subscript  X  t    subscript  X  s     X_{t},X_{s}   , respectively, and     ùöº  s   =   (   œï   (   x  s  1   )    ,  ‚Ä¶  ,   œï   (   x  s  n   )    )        subscript  ùöº  s      œï   superscript   subscript  x  s   1    normal-‚Ä¶    œï   superscript   subscript  x  s   n       \boldsymbol{\Upsilon}_{s}=\left(\phi(x_{s}^{1}),\dots,\phi(x_{s}^{n})\right)   is the feature matrix for the samples from    X  s     subscript  X  s    X_{s}   .  Thus, if the incoming messages to node t are linear combinations of feature mapped samples from    X  t     subscript  X  t    X_{t}   , then the outgoing message from this node is also a linear combination of feature mapped samples from    X  s     subscript  X  s    X_{s}   . This RKHS function representation of message-passing updates therefore produces an efficient belief propagation algorithm in which the potentials are nonparametric functions inferred from the data so that arbitrary statistical relationships may be modeled. 36  Nonparametric filtering in hidden Markov models  In the hidden Markov model (HMM), two key quantities of interest are the transition probabilities between hidden states    P   (   S  t   ‚à£   S   t  -  1    )      fragments  P   fragments  normal-(   superscript  S  t   normal-‚à£   superscript  S    t  1    normal-)     P(S^{t}\mid S^{t-1})   and the emission probabilities    P   (   O  t   ‚à£   S  t   )      fragments  P   fragments  normal-(   superscript  O  t   normal-‚à£   superscript  S  t   normal-)     P(O^{t}\mid S^{t})   for observations. Using the kernel conditional distribution embedding framework, these quantities may be expressed in terms of samples from the HMM. A serious limitation of the embedding methods in this domain is the need for training samples containing hidden states, as otherwise inference with arbitrary distributions in the HMM is not possible.  One common use of HMMs is filtering in which the goal is to estimate posterior distribution over the hidden state    s  t     superscript  s  t    s^{t}   at time step t given a history of previous observations     h  t   =   (   o  1   ,  ‚Ä¶  ,   o  t   )        superscript  h  t     superscript  o  1   normal-‚Ä¶   superscript  o  t      h^{t}=(o^{1},\dots,o^{t})   from the system. In filtering, a belief state     P   (   S   t  +  1    ‚à£   h   t  +  1    )      fragments  P   fragments  normal-(   superscript  S    t  1    normal-‚à£   superscript  h    t  1    normal-)     P(S^{t+1}\mid h^{t+1})   is recursively maintained via a prediction step (where updates    P   (   S   t  +  1    ‚à£   h  t   )   =   ùîº    S  t   ‚à£   h  t      [  P   (   S   t  +  1    ‚à£   S  t   )   ]      fragments  P   fragments  normal-(   superscript  S    t  1    normal-‚à£   superscript  h  t   normal-)     subscript  ùîº   fragments   superscript  S  t   normal-‚à£   superscript  h  t      fragments  normal-[  P   fragments  normal-(   superscript  S    t  1    normal-‚à£   superscript  S  t   normal-)   normal-]     P(S^{t+1}\mid h^{t})=\mathbb{E}_{S^{t}\mid h^{t}}[P(S^{t+1}\mid S^{t})]   are computed by marginalizing out the previous hidden state) followed by a conditioning step (where updates    P   (   S   t  +  1    ‚à£   h  t   ,   o   t  +  1    )   ‚àù  P   (   o   t  +  1    ‚à£   S   t  +  1    )   P   (   S   t  +  1    ‚à£   h  t   )      fragments  P   fragments  normal-(   superscript  S    t  1    normal-‚à£   superscript  h  t   normal-,   superscript  o    t  1    normal-)   proportional-to  P   fragments  normal-(   superscript  o    t  1    normal-‚à£   superscript  S    t  1    normal-)   P   fragments  normal-(   superscript  S    t  1    normal-‚à£   superscript  h  t   normal-)     P(S^{t+1}\mid h^{t},o^{t+1})\propto P(o^{t+1}\mid S^{t+1})P(S^{t+1}\mid h^{t})   are computed by applying Bayes' rule to condition on a new observation). 37 The RKHS embedding of the belief state at time t+1 can be recursively expressed as         Œº    S   t  +  1    ‚à£   h   t  +  1      =    ùíû    S   t  +  1     O   t  +  1     œÄ     (   ùíû    O   t  +  1     O   t  +  1     œÄ   )    -  1    œï   (   o   t  +  1    )         subscript  Œº   fragments   superscript  S    t  1    normal-‚à£   superscript  h    t  1         superscript   subscript  ùíû     superscript  S    t  1     superscript  O    t  1      œÄ    superscript   superscript   subscript  ùíû     superscript  O    t  1     superscript  O    t  1      œÄ     1    œï   superscript  o    t  1       \mu_{S^{t+1}\mid h^{t+1}}=\mathcal{C}_{S^{t+1}O^{t+1}}^{\pi}\left(\mathcal{C}_%
 {O^{t+1}O^{t+1}}^{\pi}\right)^{-1}\phi(o^{t+1})        by computing the embeddings of the prediction step via the kernel sum rule and the embedding of the conditioning step via kernel Bayes' rule . Assuming a training sample    (    s  ~   1   ,  ‚Ä¶  ,    s  ~   T   ,    o  ~   1   ,  ‚Ä¶  ,    o  ~   T   )      superscript   normal-~  s   1   normal-‚Ä¶   superscript   normal-~  s   T    superscript   normal-~  o   1   normal-‚Ä¶   superscript   normal-~  o   T     (\widetilde{s}^{1},\dots,\widetilde{s}^{T},\widetilde{o}^{1},\dots,\widetilde{%
 o}^{T})   is given, one can in practice estimate      Œº  ^     S   t  +  1    ‚à£   h   t  +  1      =    ‚àë   i  =  1   T     Œ±  i  t   œï   (    s  ~   t   )          subscript   normal-^  Œº    fragments   superscript  S    t  1    normal-‚à£   superscript  h    t  1        superscript   subscript     i  1    T      superscript   subscript  Œ±  i   t   œï   superscript   normal-~  s   t       \widehat{\mu}_{S^{t+1}\mid h^{t+1}}=\sum_{i=1}^{T}\alpha_{i}^{t}\phi(%
 \widetilde{s}^{t})   and filtering with kernel embeddings is thus implemented recursively using the following updates for the weights    ùú∂  =   (   Œ±  1   ,  ‚Ä¶  ,   Œ±  T   )       ùú∂    subscript  Œ±  1   normal-‚Ä¶   subscript  Œ±  T      \boldsymbol{\alpha}=(\alpha_{1},\dots,\alpha_{T})    38         ùêÉ   t  +  1    =   diag   (     (   G  +   Œª  ùêà    )    -  1     G  ~    ùú∂  t    )         superscript  ùêÉ    t  1      diag     superscript    G    Œª  ùêà      1     normal-~  G    superscript  ùú∂  t       \mathbf{D}^{t+1}=\text{diag}\left((G+\lambda\mathbf{I})^{-1}\widetilde{G}%
 \boldsymbol{\alpha}^{t}\right)          ùú∂   t  +  1    =    ùêÉ   t  +  1    ùêä    (     (    ùêÉ   t  +  1    K   )   2   +    Œª  ~   ùêà    )    -  1     ùêÉ   t  +  1     ùêä   o   t  +  1           superscript  ùú∂    t  1       superscript  ùêÉ    t  1    ùêä   superscript     superscript     superscript  ùêÉ    t  1    K   2      normal-~  Œª   ùêà      1     superscript  ùêÉ    t  1     subscript  ùêä   superscript  o    t  1        \boldsymbol{\alpha}^{t+1}=\mathbf{D}^{t+1}\mathbf{K}\left((\mathbf{D}^{t+1}K)^%
 {2}+\widetilde{\lambda}\mathbf{I}\right)^{-1}\mathbf{D}^{t+1}\mathbf{K}_{o^{t+%
 1}}        where    ùêÜ  ,  ùêä     ùêÜ  ùêä    \mathbf{G},\mathbf{K}   denote the Gram matrices of      s  ~   1   ,  ‚Ä¶  ,    s  ~   T       superscript   normal-~  s   1   normal-‚Ä¶   superscript   normal-~  s   T     \widetilde{s}^{1},\dots,\widetilde{s}^{T}   and      o  ~   1   ,  ‚Ä¶  ,    o  ~   T       superscript   normal-~  o   1   normal-‚Ä¶   superscript   normal-~  o   T     \widetilde{o}^{1},\dots,\widetilde{o}^{T}   respectively,    ùêÜ  ~     normal-~  ùêÜ    \widetilde{\mathbf{G}}   is a transfer Gram matrix defined as      ùêÜ  ~    i  j    =   k   (    s  ~   i   ,    s  ~    j  +  1    )         subscript   normal-~  ùêÜ     i  j      k    subscript   normal-~  s   i    subscript   normal-~  s     j  1        \widetilde{\mathbf{G}}_{ij}=k(\widetilde{s}_{i},\widetilde{s}_{j+1})   , and     ùêä   o   t  +  1     =    (   k   (    o  ~   1   ,   o   t  +  1    )    ,  ‚Ä¶  ,   k   (    o  ~   T   ,   o   t  +  1    )    )   T        subscript  ùêä   superscript  o    t  1      superscript     k    superscript   normal-~  o   1    superscript  o    t  1      normal-‚Ä¶    k    superscript   normal-~  o   T    superscript  o    t  1       T     \mathbf{K}_{o^{t+1}}=(k(\widetilde{o}^{1},o^{t+1}),\dots,k(\widetilde{o}^{T},o%
 ^{t+1}))^{T}   .  Support measure machines  The support measure machine (SMM) is a generalization of the support vector machine (SVM) in which the training examples are probability distributions paired with labels       {   P  i   ,   y  i   }    i  =  1   n   ,   y  i    ‚àà   {   +  1   ,   -  1   }         superscript   subscript    subscript  P  i    subscript  y  i      i  1    n    subscript  y  i       1     1      \{P_{i},y_{i}\}_{i=1}^{n},\ y_{i}\in\{+1,-1\}   . 39 SMMs solve the standard SVM dual optimization problem using the following expected kernel         K   (   P   (  X  )    ,   Q   (  Z  )    )    =    ‚ü®   Œº  X   ,   Œº  Z   ‚ü©   ‚Ñã   =    ùîº   X  Z     [   k   (  x  ,  z  )    ]            K     P  X     Q  Z      subscript    subscript  Œº  X    subscript  Œº  Z    ‚Ñã           subscript  ùîº    X  Z     delimited-[]    k   x  z         K\left(P(X),Q(Z)\right)=\langle\mu_{X},\mu_{Z}\rangle_{\mathcal{H}}=\mathbb{E}%
 _{XZ}[k(x,z)]        which is computable in closed form for many common specific distributions    P  i     subscript  P  i    P_{i}   (such as the Gaussian distribution) combined with popular embedding kernels   k   k   k   (e.g. the Gaussian kernel or polynomial kernel), or can be accurately empirically estimated from i.i.d. samples       {   x  i   }    i  =  1   n   ‚àº   P   (  X  )     ,     {   z  j   }    j  =  1   m   ‚àº   Q   (  Z  )        formulae-sequence   similar-to   superscript   subscript    subscript  x  i      i  1    n     P  X     similar-to   superscript   subscript    subscript  z  j      j  1    m     Q  Z      \{x_{i}\}_{i=1}^{n}\sim P(X),\{z_{j}\}_{j=1}^{m}\sim Q(Z)   via          K  ^    (  X  ,  Z  )    =    1   n  m      ‚àë   i  =  1   n     ‚àë   j  =  1   m    k   (   x  i   ,   z  j   )              normal-^  K    X  Z        1    n  m      superscript   subscript     i  1    n     superscript   subscript     j  1    m     k    subscript  x  i    subscript  z  j          \widehat{K}\left(X,Z\right)=\frac{1}{nm}\sum_{i=1}^{n}\sum_{j=1}^{m}k(x_{i},z_%
 {j})        Under certain choices of the embedding kernel   k   k   k   , the SMM applied to training examples     {   P  i   ,   y  i   }    i  =  1   n     superscript   subscript    subscript  P  i    subscript  y  i      i  1    n    \{P_{i},y_{i}\}_{i=1}^{n}   is equivalent to a SVM trained on samples     {   x  i   ,   y  i   }    i  =  1   n     superscript   subscript    subscript  x  i    subscript  y  i      i  1    n    \{x_{i},y_{i}\}_{i=1}^{n}   , and thus the SMM can be viewed as a flexible SVM in which a different data-dependent kernel (specified by the assumed form of the distribution    P  i     subscript  P  i    P_{i}   ) may be placed on each training point. 40  Domain adaptation under covariate, target, and conditional shift  The goal of domain adaptation is the formulation of learning algorithms which generalize well when the training and test data have different distributions. Given training examples     {   (   x  i   t  r    ,   y  i   t  r    )   }    i  =  1   n     superscript   subscript     superscript   subscript  x  i     t  r     superscript   subscript  y  i     t  r        i  1    n    \{(x_{i}^{tr},y_{i}^{tr})\}_{i=1}^{n}   and a test set     {   (   x  j   t  e    ,   y  j   t  e    )   }    j  =  1   m     superscript   subscript     superscript   subscript  x  j     t  e     superscript   subscript  y  j     t  e        j  1    m    \{(x_{j}^{te},y_{j}^{te})\}_{j=1}^{m}   where the    y  j   t  e      superscript   subscript  y  j     t  e     y_{j}^{te}   are unknown, three types of differences are commonly assumed between the distribution of the training examples     P   t  r     (  X  ,  Y  )        superscript  P    t  r     X  Y     P^{tr}(X,Y)   and the test distribution     P   t  e     (  X  ,  Y  )        superscript  P    t  e     X  Y     P^{te}(X,Y)   : 41 42   Covariate Shift in which the marginal distribution of the covariates changes across domains      P   t  r     (  X  )    ‚â†    P   t  e     (  X  )           superscript  P    t  r    X      superscript  P    t  e    X     P^{tr}(X)\neq P^{te}(X)     Target Shift in which the marginal distribution of the outputs changes across domains      P   t  r     (  Y  )    ‚â†    P   t  e     (  Y  )           superscript  P    t  r    Y      superscript  P    t  e    Y     P^{tr}(Y)\neq P^{te}(Y)     Conditional Shift in which    P   (  Y  )       P  Y    P(Y)   remains the same across domains, but the conditional distributions differ     P   t  r     (  X  ‚à£  Y  )   ‚â†   P   t  e     (  X  ‚à£  Y  )      fragments   superscript  P    t  r     fragments  normal-(  X  normal-‚à£  Y  normal-)     superscript  P    t  e     fragments  normal-(  X  normal-‚à£  Y  normal-)     P^{tr}(X\mid Y)\neq P^{te}(X\mid Y)   . In general, the presence of conditional shift leads to an ill-posed problem, and the additional assumption that    P   (  X  ‚à£  Y  )      fragments  P   fragments  normal-(  X  normal-‚à£  Y  normal-)     P(X\mid Y)   changes only under location - scale (LS) transformations on   X   X   X   is commonly imposed to make the problem tractable.   By utilizing the kernel embedding of marginal and conditional distributions, practical approaches to deal with the presence of these types of differences between training and test domains can be formulated. Covariate shift may be accounted for by reweighting examples via estimates of the ratio       P   t  e     (  X  )    /   P   t  r      (  X  )            superscript  P    t  e    X    superscript  P    t  r     X    P^{te}(X)/P^{tr}(X)   obtained directly from the kernel embeddings of the marginal distributions of   X   X   X   in each domain without any need for explicit estimation of the distributions. 43 Target shift, which cannot be similarly dealt with since no samples from   Y   Y   Y   are available in the test domain, is accounted for by weighting training examples using the vector     ùú∑  *    (   ùê≤   t  r    )        superscript  ùú∑     superscript  ùê≤    t  r      \boldsymbol{\beta}^{*}(\mathbf{y}^{tr})   which solves the following optimization problem (where in practice, empirical approximations must be used) 44         min   ùú∑   (  y  )       ||     ùíû    (  X  ‚à£  Y  )    t  r      ùîº   Y   t  r      [   ùú∑   (  y  )   œï   (  y  )    ]    -   Œº   X   t  e      ||   ‚Ñã  2        subscript     ùú∑  y     superscript   subscript   norm       subscript  ùíû   superscript   fragments  normal-(  X  normal-‚à£  Y  normal-)     t  r      subscript  ùîº   superscript  Y    t  r      delimited-[]    ùú∑  y  œï  y      subscript  Œº   superscript  X    t  e       ‚Ñã   2     \min_{\boldsymbol{\beta}(y)}\left|\left|\mathcal{C}_{{(X\mid Y)}^{tr}}\mathbb{%
 E}_{Y^{tr}}[\boldsymbol{\beta}(y)\phi(y)]-\mu_{X^{te}}\right|\right|_{\mathcal%
 {H}}^{2}   subject to      ùú∑   (  y  )    ‚â•  0   ,     ùîº   Y   t  r      [   ùú∑   (  y  )    ]    =  1      formulae-sequence      ùú∑  y   0        subscript  ùîº   superscript  Y    t  r      delimited-[]    ùú∑  y     1     \boldsymbol{\beta}(y)\geq 0,\mathbb{E}_{Y^{tr}}[\boldsymbol{\beta}(y)]=1        To deal with location scale conditional shift, one can perform a LS transformation of the training points to obtain new transformed training data     ùêó   n  e  w    =     ùêó   t  r    ‚äô  ùêñ   +  ùêÅ        superscript  ùêó    n  e  w       direct-product   superscript  ùêó    t  r    ùêñ   ùêÅ     \mathbf{X}^{new}=\mathbf{X}^{tr}\odot\mathbf{W}+\mathbf{B}   (where   ‚äô   direct-product   \odot   denotes the element-wise vector product). To ensure similar distributions between the new transformed training samples and the test data,    ùêñ  ,  ùêÅ     ùêñ  ùêÅ    \mathbf{W},\mathbf{B}   are estimated by minimizing the following empirical kernel embedding distance 45          ||     Œº  ^    X   n  e  w     -    Œº  ^    X   t  e      ||   ‚Ñã  2   =    ||      ùíû  ^     (  X  ‚à£  Y  )    n  e  w       Œº  ^    Y   t  r      -    Œº  ^    X   t  e      ||   ‚Ñã  2        superscript   subscript   norm     subscript   normal-^  Œº    superscript  X    n  e  w      subscript   normal-^  Œº    superscript  X    t  e       ‚Ñã   2    superscript   subscript   norm       subscript   normal-^  ùíû    superscript   fragments  normal-(  X  normal-‚à£  Y  normal-)     n  e  w      subscript   normal-^  Œº    superscript  Y    t  r       subscript   normal-^  Œº    superscript  X    t  e       ‚Ñã   2     \left|\left|\widehat{\mu}_{X^{new}}-\widehat{\mu}_{X^{te}}\right|\right|_{%
 \mathcal{H}}^{2}=\left|\left|\widehat{\mathcal{C}}_{(X\mid Y)^{new}}\widehat{%
 \mu}_{Y^{tr}}-\widehat{\mu}_{X^{te}}\right|\right|_{\mathcal{H}}^{2}        In general, the kernel embedding methods for dealing with LS conditional shift and target shift may be combined to find a reweighted transformation of the training data which mimics the test distribution, and these methods may perform well even in the presence of conditional shifts other than location-scale changes. 46  Domain generalization via invariant feature representation  Given N sets of training examples sampled i.i.d. from distributions      P   (  1  )     (  X  ,  Y  )    ,    P   (  2  )     (  X  ,  Y  )    ,  ‚Ä¶  ,    P   (  N  )     (  X  ,  Y  )          superscript  P  1    X  Y       superscript  P  2    X  Y    normal-‚Ä¶     superscript  P  N    X  Y      P^{(1)}(X,Y),P^{(2)}(X,Y),\dots,P^{(N)}(X,Y)   , the goal of domain generalization is to formulate learning algorithms which perform well on test examples sampled from a previously unseen domain     P  *    (  X  ,  Y  )        superscript  P     X  Y     P^{*}(X,Y)   where no data from the test domain is available at training time. If conditional distributions    P   (  Y  ‚à£  X  )      fragments  P   fragments  normal-(  Y  normal-‚à£  X  normal-)     P(Y\mid X)   are assumed to be relatively similar across all domains, then a learner capable of domain generalization must estimate a functional relationship between the variables which is robust to changes in the marginals    P   (  X  )       P  X    P(X)   . Based on kernel embeddings of these distributions, Domain Invariant Component Analysis (DICA) is a method which determines the transformation of the training data that minimizes the difference between marginal distributions while preserving a common conditional distribution shared between all training domains. 47 DICA thus extracts invariants , features that transfer across domains, and may be viewed as a generalization of many popular dimension-reduction methods such as kernel principal component analysis , transfer component analysis, and covariance operator inverse regression. 48  Defining a probability distribution   ùí´   ùí´   \mathcal{P}   on the RKHS   ‚Ñã   ‚Ñã   \mathcal{H}   with      ùí´   (   Œº    X   (  i  )     Y   (  i  )      )    =    1  /  N   for  i   =  1   ,   ‚Ä¶  ,  N      formulae-sequence        ùí´   subscript  Œº     superscript  X  i    superscript  Y  i          1  N   for  i        1     normal-‚Ä¶  N     \mathcal{P}(\mu_{X^{(i)}Y^{(i)}})=1/N\text{ for }i=1,\dots,N   , DICA measures dissimilarity between domains via distributional variance which is computed as          V  ‚Ñã    (  ùí´  )    =     1  N   tr   (  ùêÜ  )    -    1   N  2      ‚àë    i  ,  j   =  1   N    ùêÜ   i  j              subscript  V  ‚Ñã   ùí´         1  N   tr  ùêÜ       1   superscript  N  2      superscript   subscript      i  j   1    N    subscript  ùêÜ    i  j         V_{\mathcal{H}}(\mathcal{P})=\frac{1}{N}\text{tr}(\mathbf{G})-\frac{1}{N^{2}}%
 \sum_{i,j=1}^{N}\mathbf{G}_{ij}   where     ùêÜ   i  j    =    ‚ü®   Œº   X   (  i  )     ,   Œº   X   (  j  )     ‚ü©   ‚Ñã        subscript  ùêÜ    i  j     subscript    subscript  Œº   superscript  X  i     subscript  Œº   superscript  X  j     ‚Ñã     \mathbf{G}_{ij}=\langle\mu_{X^{(i)}},\mu_{X^{(j)}}\rangle_{\mathcal{H}}        so   ùêÜ   ùêÜ   \mathbf{G}   is a    N  √ó  N      N  N    N\times N   Gram matrix over the distributions from which the training data are sampled. Finding an orthogonal transform onto a low-dimensional subspace  B (in the feature space) which minimizes the distributional variance, DICA simultaneously ensures that B aligns with the bases of a central subspace  C for which   Y   Y   Y   becomes independent of   X   X   X   given     C  T   X       superscript  C  T   X    C^{T}X   across all domains. In the absence of target values   Y   Y   Y   , an unsupervised version of DICA may be formulated which finds a low-dimensional subspace that minimizes distributional variance while simultaneously maximizing the variance of   X   X   X   (in the feature space) across all domains (rather than preserving a central subspace). 49  Example  In this simple example, which is taken from Song et al., 50     X  ,  Y     X  Y    X,Y   are assumed to be discrete random variables which take values in the set    {  1  ,  ‚Ä¶  ,  K  }     1  normal-‚Ä¶  K    \{1,\dots,K\}   and the kernel is chosen to be the Kronecker delta function, so     k   (  x  ,   x  ‚Ä≤   )    =   Œ¥   (  x  ,   x  ‚Ä≤   )          k   x   superscript  x  normal-‚Ä≤       Œ¥   x   superscript  x  normal-‚Ä≤       k(x,x^{\prime})=\delta(x,x^{\prime})   . The feature map corresponding to this kernel is the standard basis vector     œï   (  x  )    =   ùêû  x         œï  x    subscript  ùêû  x     \phi(x)=\mathbf{e}_{x}   . The kernel embeddings of such a distributions are thus vectors of marginal probabilities while the embeddings of joint distributions in this setting are    K  √ó  K      K  K    K\times K   matrices specifying joint probability tables, and the explicit form of these embeddings is    \mu_X = \mathbb{E}_X [\mathbf{e}_x] = \left(     \begin{array}{c} P(X=1) \\ \vdots \\ P(X=K) \\ \end{array} \right)         ùíû   X  Y    =   ùîº   X  Y     [   ùêû  X   ‚äó   e  Y   ]   =    (  P   (  X  =  s  ,  Y  =  t  )   )     s  ,  t   ‚àà   {  1  ,  ‚Ä¶  ,  K  }        fragments   subscript  ùíû    X  Y      subscript  ùîº    X  Y     fragments  normal-[   subscript  ùêû  X   tensor-product   subscript  e  Y   normal-]     subscript   fragments  normal-(  P   fragments  normal-(  X   s  normal-,  Y   t  normal-)   normal-)      s  t    1  normal-‚Ä¶  K       \mathcal{C}_{XY}=\mathbb{E}_{XY}[\mathbf{e}_{X}\otimes e_{Y}]=\bigg(P(X=s,Y=t)%
 \bigg)_{s,t\in\{1,\dots,K\}}        The conditional distribution embedding operator     ùíû   Y  ‚à£  X    =    ùíû   Y  X     ùíû   X  X    -  1          subscript  ùíû   fragments  Y  normal-‚à£  X       subscript  ùíû    Y  X     superscript   subscript  ùíû    X  X      1       \mathcal{C}_{Y\mid X}=\mathcal{C}_{YX}\mathcal{C}_{XX}^{-1}   is in this setting a conditional probability table         ùíû   Y  ‚à£  X    =    (  P   (  Y  =  s  ‚à£  X  =  t  )   )     s  ,  t   ‚àà   {  1  ,  ‚Ä¶  ,  K  }        fragments   subscript  ùíû   fragments  Y  normal-‚à£  X      subscript   fragments  normal-(  P   fragments  normal-(  Y   s  normal-‚à£  X   t  normal-)   normal-)      s  t    1  normal-‚Ä¶  K       \mathcal{C}_{Y\mid X}=\bigg(P(Y=s\mid X=t)\bigg)_{s,t\in\{1,\dots,K\}}       and \mathcal{C}_{XX} =\left(   \begin{array}{c c c} P(X=1) & \dots & 0 \\ \vdots & \ddots & \vdots \\ 0 & \dots & P(X=K) \\ \end{array} \right)  Thus, the embeddings of the conditional distribution under a fixed value of   X   X   X   may be computed as    \mu_{Y \mid x} = \mathcal{C}_{Y \mid X} \phi(x) = \left(     \begin{array}{c} P(Y=1 \mid X = x) \\ \vdots \\ P(Y=K \mid X = x) \\ \end{array} \right)  In this discrete-valued setting with the Kronecker delta kernel, the kernel sum rule becomes    \underbrace{ \left(     \begin{array}{c} Q(X=1) \\ \vdots \\ P(X = N) \\ \end{array} \right) }_{\mu_Y^\pi} = \underbrace{ \left( \begin{array}{c} \\ P(X=s \mid Y=t) \\ \\ \end{array} \right) }_{ \mathcal{C}_{X\mid Y} } \underbrace{ \left( \begin{array}{c} \pi(Y=1) \\ \vdots \\ pi(Y = N) \\ \end{array} \right) }_{ \mu_Y^\pi}  The kernel chain rule in this case is given by    \underbrace{ \left( \begin{array}{c} \\ Q(X=s,Y=t) \\ \\ \end{array} \right) }_{\mathcal{C}_{XY}^\pi} =     \underbrace{¬†\left(¬†\begin{array}{c}¬†\\¬†P(X=s¬†\mid¬†Y=t)¬†\\¬†\\¬†\end{array}¬†\right)¬†}_{\mathcal{C}_{X¬†\mid¬†Y}}  \underbrace{ \left( \begin{array}{c c c} \pi(Y=1) & \dots & 0 \\ \vdots & \ddots & \vdots \\ 0 & \dots & \pi(Y=K) \\ \end{array} \right) }_{\mathcal{C}_{YY}^\pi}  References  "  Category:Machine learning  Category:Statistics     A. Smola, A. Gretton, L. Song, B. Sch√∂lkopf. (2007). A Hilbert Space Embedding for Distributions . Algorithmic Learning Theory: 18th International Conference . Springer: 13‚Äì31. ‚Ü©  L. Song, K. Fukumizu, F. Dinuzzo, A. Gretton (2013). Kernel Embeddings of Conditional Distributions: A unified kernel framework for nonparametric inference in graphical models . IEEE Signal Processing Magazine  30 : 98‚Äì111. ‚Ü©  J. Shawe-Taylor, N. Christianini. (2004). Kernel Methods for Pattern Analysis . Cambridge University Press, Cambridge, UK. ‚Ü©  T. Hofmann, B. Sch√∂lkopf, A. Smola. (2008). [ http://projecteuclid.org/DPubS?service=UI&version; ;=1.0&verb;=Display&handle;=euclid.aos/1211819561 Kernel Methods in Machine Learning]. The Annals of Statistics  36 (3):1171‚Äì1220. ‚Ü©  L. Song. (2008) Learning via Hilbert Space Embedding of Distributions . PhD Thesis, University of Sidney. ‚Ü©     K. Fukumizu, A. Gretton, X. Sun, and B. Sch√∂lkopf (2008). Kernel measures of conditional independence . Advances in Neural Information Processing Systems  20 , MIT Press, Cambridge, MA. ‚Ü©   L. Song, J. Huang, A. J. Smola, K. Fukumizu. (2009). Hilbert space embeddings of conditional distributions . Proc. Int. Conf. Machine Learning . Montreal, Canada: 961-968. ‚Ü©          A. Gretton, K. Borgwardt, M. Rasch, B. Sch√∂lkopf, A. Smola. (2007). A kernel method for the two-sample-problem . Advances in Neural Information Processing Systems  19 , MIT Press, Cambridge, MA. ‚Ü©  S. Grunewalder, G. Lever, L. Baldassarre, S. Patterson, A. Gretton, M. Pontil. (2012). Conditional mean embeddings as regressors . Proc. Int. Conf. Machine Learning : 1823‚Äì1830. ‚Ü©      A. Gretton, K. Borgwardt, M. Rasch, B. Sch√∂lkopf, A. Smola. (2012). A kernel two-sample test . Journal of Machine Learning Research , 13 : 723-773. ‚Ü©   M. Dud√≠k, S. J. Phillips, R. E. Schapire. (2007). Maximum Entropy Distribution Estimation with Generalized Regularization and an Application to Species Distribution Modeling . Journal of Machine Learning Research , 8 : 1217-1260. ‚Ü©   A. Gretton, O. Bousquet, A. Smola, B. Sch√∂lkopf. (2005). Measuring statistical dependence with Hilbert‚ÄìSchmidt norms . Proc. Intl. Conf. on Algorithmic Learning Theory : 63‚Äì78. ‚Ü©   L. Song, A. Smola , A. Gretton, K. Borgwardt, J. Bedo. (2007). Supervised feature selection via dependence estimation . Proc. Intl. Conf. Machine Learning , Omnipress: 823‚Äì830. ‚Ü©  L. Song, A. Smola, A. Gretton, K. Borgwardt. (2007). A dependence maximization view of clustering . Proc. Intl. Conf. Machine Learning . Omnipress: 815‚Äì822. ‚Ü©  L. Song, A. Smola, K. Borgwardt, A. Gretton. (2007). Colored maximum variance unfolding . Neural Information Processing Systems . ‚Ü©      K. Muandet, K. Fukumizu, F. Dinuzzo, B. Sch√∂lkopf. (2012). Learning from Distributions via Support Measure Machines . Advances in Neural Information Processing Systems : 10‚Äì18. ‚Ü©   K. Zhang, B. Sch√∂lkopf, K. Muandet, Z. Wang. (2013). Domain adaptation under target and conditional shift . ''Journal of Machine Learning Research, 28 (3): 819‚Äì827. ‚Ü©  A. Gretton, A. Smola, J. Huang, M. Schmittfull, K. Borgwardt, B. Sch√∂lkopf. (2008). Covariate shift and local learning by distribution matching. In J. Quinonero-Candela, M. Sugiyama, A. Schwaighofer, N. Lawrence (eds.). Dataset shift in machine learning , MIT Press, Cambridge, MA: 131‚Äì160. ‚Ü©      K. Muandet, D. Balduzzi, B. Sch√∂lkopf. (2013). Domain Generalization Via Invariant Feature Representation . 30th International Conference on Machine Learning . ‚Ü©        