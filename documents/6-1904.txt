


Grammar-based code




Grammar-based code

Grammar-based codes or Grammar-based compression are compression algorithms based on the idea of constructing a context-free grammar (CFG) for the string to be compressed. Examples include universal lossless data compression algorithms 1 and SEQUITUR, among others. To compress a data sequence 
 
 
 
 , a grammar-based code transforms 
 
 
 
  into a context-free grammar 
 
 
 
 . The problem to find a smallest grammar for an input sequence is known to be NP-hard,2 so many grammar-transform algorithms are proposed from theoretical and practical viewpoints. Generally, the produced grammar 
 
 
 
 
  is further compressed by statistical encoders like arithmetic coding.
Examples and characteristics
The class of grammar-based codes is very broad. It includes block codes, variations of the incremental parsing Lempel-Ziv code,3 the multilevel pattern matching (MPM) algorithm,4 and many other new universal lossless compression algorithms. Grammar-based codes are universal in the sense that they can achieve asymptotically the entropy rate of any stationary, ergodic source with a finite alphabet.
Practical algorithms
The compression programs of following are available from external links.

Sequitur5 is a classical grammar compression algorithm that sequentially translates an input text into a CFG, and then the produced CFG is encoded by an arithmetic coder.
Re-Pair6 is a greedy algorithm by the strategy of most-frequent-first substitution. The compressive performance is powerful, although the main memory space is very large.

See also

Smallest grammar problem
Straight-line grammar

References
External links

Description of grammar-based codes with example
Sequitur codes
Re-Pair codes
Re-Pair codes a version of Gonzalo Navarro.
GrammarViz 2.0 - implementation of Sequitur, Re-Pair, and parallel Re-Pair in Java.

"
Category:Data compression Category:Coding theory Category:Information theory













