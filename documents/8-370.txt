   EigenTrust      EigenTrust   EigenTrust  algorithm is a reputation management algorithm for peer-to-peer networks, developed by Sep Kamvar , Mario Schlosser, and Hector Garcia-Molina . 1 The algorithm provides each peer in the network a unique global trust value based on the peer's history of uploads and thus aims to reduce the number of inauthentic files in a P2P network. It has been cited by approximately 3853 other articles according to Google Scholar. 2  Overview  Peer-to-peer systems available today (like Gnutella ) are open, often anonymous and lack accountability. Hence a user with malicious intent can introduce into the peer-to-peer network resources that may be inauthentic, corrupted or malicious ( Virus ). This reflects poorly on the credibility of current peer-to-peer systems. A research team from Stanford provides a reputation management system, where each peer in the system has a unique global trust value based on the peer's history of uploads. Any peer requesting resources will be able to access the trust value of a peer and avoid downloading files from untrusted peers.  Algorithm  The Eigentrust algorithm is based on the notion of transitive trust: If a peer i trusts any peer j , it would also trust the peers trusted by j . Each peer i calculates the local trust value s ij for all peers that have provided it with authentic or fake downloads based on the satisfactory or unsatisfactory transactions that it has had.       s   i  j    =    sat   (  i  ,  j  )    -   unsat   (  i  ,  j  )          subscript  s    i  j       sat  i  j    unsat  i  j      s_{ij}=\operatorname{sat}(i,j)-\operatorname{unsat}(i,j)     where sat ( i , j ) refers to the number of satisfactory responses that peer i has received from peer j , and unsat( i , j ) refers to the number of unsatisfactory responses that peer i has received from peer j .  The local value is normalized, to prevent malicious peers from assigning arbitrarily high local trust values to colluding malicious peers and arbitrarily low local trust values to good peers. The normalized local trust value c ij is then       c   i  j    =    max   (   s   i  j    ,  0  )      ∑  j    max   (   s   i  j    ,  0  )           subscript  c    i  j         subscript  s    i  j    0     subscript   j      subscript  s    i  j    0       c_{ij}=\frac{\max(s_{ij},0)}{\sum_{j}\max(s_{ij},0)}     The local trust values are aggregated at a central location or in a distributed manner to create a trust vector for the whole network. Based on the idea of transitive trust, a peer i would ask other peers it knows to report the trust value of a peer k and weigh responses of these peers by the trust peer i places in them.       t   i  k    =    ∑  j     c   i  j     c   j  k           subscript  t    i  k      subscript   j      subscript  c    i  j     subscript  c    j  k        t_{ik}=\sum_{j}c_{ij}c_{jk}     If we assume that a user knew the c ij values for the whole network in the form of a matrix  C , then trust vector     t  ¯   i     subscript   normal-¯  t   i    \bar{t}_{i}   that defines the trust value for    t   i  k      subscript  t    i  k     t_{ik}   is given by         t  ¯   i   =    C  T     c  ¯   i     .       subscript   normal-¯  t   i      superscript  C  T    subscript   normal-¯  c   i      \bar{t}_{i}=C^{T}\bar{c}_{i}.\,     In the equation shown above, if C is assumed to be aperiodic and strongly connected, powers of the matrix C will converge to a stable value at some point.        t  ¯   =     (   C  T   )   x     c  ¯   i     .       normal-¯  t      superscript   superscript  C  T   x    subscript   normal-¯  c   i      \bar{t}=(C^{T})^{x}\bar{c}_{i}.\,     It seems that for a large value of x , the trust vector     t  ¯   i     subscript   normal-¯  t   i    \bar{t}_{i}   will converge to the same vector for every peer in the network. The vector     t  ¯   i     subscript   normal-¯  t   i    \bar{t}_{i}   is known as the left principal eigenvector of the matrix C . We also note that since     t  ¯   i     subscript   normal-¯  t   i    \bar{t}_{i}   is same for all nodes in the network, it represents the global trust value.  Based on the results above a simple centralized trust value computing algorithm can be written. Note that we assume that all the local trust values for the whole network are available and present in the matrix C . We also note that, if the equation shown above converges, we can replace the initial vector     c  ¯   i     subscript   normal-¯  c   i    \bar{c}_{i}   by a vector    e  ¯     normal-¯  e    \bar{e}   that is an m-vector representing uniform probability distribution over all m peers. The basic EigenTrust algorithm is shown below:         t  ¯   0   =   e  ¯    ;       subscript   normal-¯  t   0    normal-¯  e     \bar{t}_{0}=\bar{e};      repeat           t  ¯    (   k  +  1   )    =    C  T     t  ¯    (  k  )      ;       superscript   normal-¯  t     k  1       superscript  C  T    superscript   normal-¯  t   k      \bar{t}^{(k+1)}=C^{T}\bar{t}^{(k)};          δ  =   ||    t   (   k  +  1   )    -   t   (  k  )     ||    ;      δ   norm     superscript  t    k  1     superscript  t  k       {\delta}=||t^{(k+1)}-t^{(k)}||;      until      δ  <  error   ;      δ  error    {\delta}<\mathrm{error};      See also   Markov chain  Eigenvalues and eigenvectors in mathematics and physics  Eigen (C++ library) , a computer programming library for matrix and linear algebra operations   References  "  Category:Peer-to-peer computing  Category:Reputation management     ↩  ↩     