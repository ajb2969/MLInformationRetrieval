   Perceptron      Perceptron  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In machine learning , the perceptron is an algorithm for supervised learning of binary classifiers : functions that can decide whether an input (represented by a vector of numbers) belong to one class or another. It is a type of linear classifier , i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector . The algorithm allows for online learning , in that it processes elements in the training set one at a time.  The perceptron algorithm dates back to the late 1950s; its first implementation, in custom hardware, was one of the first artificial neural networks to be produced.  History   See also: History of artificial intelligence , AI winter    The perceptron algorithm was invented in 1957 at the Cornell Aeronautical Laboratory by Frank Rosenblatt , 1 funded by the United States Office of Naval Research . 2 The perceptron was intended to be a machine, rather than a program, and while its first implementation was in software for the IBM 704 , it was subsequently implemented in custom-built hardware as the "Mark 1 perceptron". This machine was designed for image recognition: it had an array of 400 photocells , randomly connected to the "neurons". Weights were encoded in potentiometers , and weight updates during learning were performed by electric motors. 3  In a 1958 press conference organized by the US Navy, Rosenblatt made statements about the perceptron that caused a heated controversy among the fledgling AI community; based on Rosenblatt's statements, The New York Times reported the perceptron to be "the embryo of an electronic computer that [the Navy] expects will be able to walk, talk, see, write, reproduce itself and be conscious of its existence." 4  Although the perceptron initially seemed promising, it was quickly proved that perceptrons could not be trained to recognise many classes of patterns. This led to the field of neural network research stagnating for many years, before it was recognised that a feedforward neural network with two or more layers (also called a multilayer perceptron ) had far greater processing power than perceptrons with one layer (also called a single layer perceptron ). Single layer perceptrons are only capable of learning linearly separable patterns; in 1969 a famous book entitled Perceptrons by Marvin Minsky and Seymour Papert showed that it was impossible for these classes of network to learn an XOR function. It is often believed that they also conjectured (incorrectly) that a similar result would hold for a multi-layer perceptron network. However, this is not true, as both Minsky and Papert already knew that multi-layer perceptrons were capable of producing an XOR function. (See the page on Perceptrons (book) for more information.) Three years later Stephen Grossberg published a series of papers introducing networks capable of modelling differential, contrast-enhancing and XOR functions. (The papers were published in 1972 and 1973, see e.g.:). Nevertheless the often-miscited Minsky/Papert text caused a significant decline in interest and funding of neural network research. It took ten more years until neural network research experienced a resurgence in the 1980s. This text was reprinted in 1987 as "Perceptrons - Expanded Edition" where some errors in the original text are shown and corrected.  The kernel perceptron algorithm was already introduced in 1964 by Aizerman et al. 5 Margin bounds guarantees were given for the Perceptron algorithm in the general non-separable case first by Freund and Schapire (1998), 6 and more recently by Mohri and Rostamizadeh (2013) who extend previous results and give new L1 bounds. 7  Definition  In the modern sense, the perceptron is an algorithm for learning a binary classifier: a function that maps its input   x   x   x   (a real-valued vector ) to an output value    f   (  x  )       f  x    f(x)   (a single binary value):       f   (  x  )    =   {     1        if  w   ‚ãÖ  x   +  b   >  0       0    otherwise            f  x    cases  1       normal-‚ãÖ    if  w   x   b   0   0  otherwise     f(x)=\begin{cases}1&\text{if }w\cdot x+b>0\\
 0&\text{otherwise}\end{cases}     where   w   w   w   is a vector of real-valued weights,    w  ‚ãÖ  x     normal-‚ãÖ  w  x    w\cdot x   is the dot product      ‚àë  i     w  i    x  i        subscript   i      subscript  w  i    subscript  x  i      \sum_{i}w_{i}x_{i}   , and   b   b   b   is the bias , a term that shifts the decision boundary away from the origin and does not depend on any input value.  The value of    f   (  x  )       f  x    f(x)   (0 or 1) is used to classify   x   x   x   as either a positive or a negative instance, in the case of a binary classification problem. If   b   b   b   is negative, then the weighted combination of inputs must produce a positive value greater than    |  b  |      b    |b|   in order to push the classifier neuron over the 0 threshold. Spatially, the bias alters the position (though not the orientation) of the decision boundary . The perceptron learning algorithm does not terminate if the learning set is not linearly separable . If the vectors are not linearly separable learning will never reach a point where all vectors are classified properly. The most famous example of the perceptron's inability to solve problems with linearly nonseparable vectors is the Boolean exclusive-or problem. The solution spaces of decision boundaries for all binary functions and learning behaviors are studied in the reference. 8  In the context of neural networks, a perceptron is an artificial neuron using the Heaviside step function as the activation function. The perceptron algorithm is also termed the single-layer perceptron , to distinguish it from a multilayer perceptron , which is a misnomer for a more complicated neural network. As a linear classifier, the single-layer perceptron is the simplest feedforward neural network .  Learning algorithm  Below is an example of a learning algorithm for a (single-layer) perceptron. For multilayer perceptrons , where a hidden layer exists, more sophisticated algorithms such as backpropagation must be used. Alternatively, methods such as the delta rule can be used if the function is non-linear and differentiable, although the one below will work as well.  When multiple perceptrons are combined in an artificial neural network, each output neuron operates independently of all the others; thus, learning each output can be considered in isolation. 500px |thumb |Right |A diagram showing a perceptron updating its linear boundary as more training examples are added.  Definitions  We first define some variables:       y  =   f   (  ùê≥  )        y    f  ùê≥     y=f(\mathbf{z})\,   denotes the output from the perceptron for an input vector   ùê≥   ùê≥   \mathbf{z}   .      b    b   b\,   is the bias term, which in the example below we take to be 0.      D  =   {   (   ùê±  1   ,   d  1   )   ,  ‚Ä¶  ,   (   ùê±  s   ,   d  s   )   }       D     subscript  ùê±  1    subscript  d  1    normal-‚Ä¶    subscript  ùê±  s    subscript  d  s       D=\{(\mathbf{x}_{1},d_{1}),\dots,(\mathbf{x}_{s},d_{s})\}\,   is the training set of   s   s   s   samples, where:      ùê±  j     subscript  ùê±  j    \mathbf{x}_{j}   is the   n   n   n   -dimensional input vector.       d  j      subscript  d  j    d_{j}\,   is the desired output value of the perceptron for that input.    We show the values of the features as follows:        x   j  ,  i       subscript  x   j  i     x_{j,i}\,   is the value of the   i   i   i   th feature of the   j   j   j   th training input vector .       x   j  ,  0    =   1        subscript  x   j  0    1    x_{j,0}=1\,   .   To represent the weights:        w  i      subscript  w  i    w_{i}\,   is the   i   i   i   th value in the weight vector , to be multiplied by the value of the   i   i   i   th input feature.  Because     x   j  ,  0    =   1        subscript  x   j  0    1    x_{j,0}=1\,   , the     w  0      subscript  w  0    w_{0}\,   is effectively a learned bias that we use instead of the bias constant   b   b   b   .   To show the time-dependence of   ùê∞   ùê∞   \mathbf{w}   , we use:        w  i    (  t  )        subscript  w  i   t    w_{i}(t)\,   is the weight   i   i   i   at time   t   t   t   .      Œ±    Œ±   \alpha\,   is the learning rate , where    0  <  Œ±  ‚â§  1        0  Œ±       1     0<\alpha\leq 1   .   Too high a learning rate makes the perceptron periodically oscillate around the solution unless additional steps are taken.  (Figure)  The appropriate weights are applied to the inputs, and the resulting weighted sum passed to a function that produces the output y.   Steps  1. Initialize the weights and the threshold. Weights may be initialized to 0 or to a small random value. In the example below, we use 0.  2. For each example    j    j   j\,   in our training set    D    D   D\,   , perform the following steps over the input     ùê±  j      subscript  ùê±  j    \mathbf{x}_{j}\,   and desired output     d  j      subscript  d  j    d_{j}\,   :   2a. Calculate the actual output:       y  j    (  t  )    =   f   [    ùê∞   (  t  )    ‚ãÖ   ùê±  j    ]    =   f   [     w  0    (  t  )    +    w  1    (  t  )    x   j  ,  1     +    w  2    (  t  )    x   j  ,  2     +  ‚ãØ  +    w  n    (  t  )    x   j  ,  n      ]             subscript  y  j   t     f   delimited-[]   normal-‚ãÖ    ùê∞  t    subscript  ùê±  j             f   delimited-[]       subscript  w  0   t      subscript  w  1   t   subscript  x   j  1        subscript  w  2   t   subscript  x   j  2     normal-‚ãØ     subscript  w  n   t   subscript  x   j  n           y_{j}(t)=f[\mathbf{w}(t)\cdot\mathbf{x}_{j}]=f[w_{0}(t)+w_{1}(t)x_{j,1}+w_{2}(%
 t)x_{j,2}+\cdots+w_{n}(t)x_{j,n}]      2b. Update the weights:       w  i    (   t  +  1   )    =     w  i    (  t  )    +   Œ±   (    d  j   -    y  j    (  t  )     )     x   j  ,  i              subscript  w  i     t  1         subscript  w  i   t     Œ±     subscript  d  j      subscript  y  j   t     subscript  x   j  i        w_{i}(t+1)=w_{i}(t)+\alpha(d_{j}-y_{j}(t))x_{j,i}\,   , for all feature    0  ‚â§  i  ‚â§  n        0  i       n     0\leq i\leq n   .    3. For offline learning , the step 2 may be repeated until the iteration error     1  s     ‚àë   j  =  1   s    |    d  j   -    y  j    (  t  )     |          1  s     superscript   subscript     j  1    s        subscript  d  j      subscript  y  j   t        \frac{1}{s}\sum_{j=1}^{s}|d_{j}-y_{j}(t)|\,   is less than a user-specified error threshold    Œ≥    Œ≥   \gamma\,   , or a predetermined number of iterations have been completed.  The algorithm updates the weights after steps 2a and 2b. These weights are immediately applied to a pair in the training set, and subsequently updated, rather than waiting until all pairs in the training set have undergone these steps.  Convergence  The perceptron is a linear classifier , therefore it will never get to the state with all the input vectors classified correctly if the training set   D   D   D   is not linearly separable , i.e. if the positive examples can not be separated from the negative examples by a hyperplane. In this case, no "approximate" solution will be gradually approached under the standard learning algorithm, but instead learning will fail completely. Hence, if linear separability of the training set is not known a priori, one of the training variants below should be used.  But if the training set is linearly separable, then the perceptron is guaranteed to converge, and there is an upper bound on the number of times the perceptron will adjust its weights during the training.  Suppose that the input vectors from the two classes can be separated by a hyperplane with a margin   Œ≥   Œ≥   \gamma   , i.e. there exists a weight vector     ùê∞  ,   ||  ùê∞  ||    =  1       ùê∞   norm  ùê∞    1    \mathbf{w},||\mathbf{w}||=1   , and a bias term   b   b   b   such that      ùê∞  ‚ãÖ   ùê±  j    +  b   >  Œ≥         normal-‚ãÖ  ùê∞   subscript  ùê±  j    b   Œ≥    \mathbf{w}\cdot\mathbf{x}_{j}+b>\gamma   for all    j  :    d  j   =  1      normal-:  j     subscript  d  j   1     j:d_{j}=1   and      ùê∞  ‚ãÖ   ùê±  j    +  b   <   -  Œ≥          normal-‚ãÖ  ùê∞   subscript  ùê±  j    b     Œ≥     \mathbf{w}\cdot\mathbf{x}_{j}+b<-\gamma   for all    j  :    d  j   =  0      normal-:  j     subscript  d  j   0     j:d_{j}=0   . And also let   R   R   R   denote the maximum norm of an input vector. Novikoff (1962) proved that in this case the perceptron algorithm converges after making    O   (    R  2   /   Œ≥  2    )       O     superscript  R  2    superscript  Œ≥  2      O(R^{2}/\gamma^{2})   updates. The idea of the proof is that the weight vector is always adjusted by a bounded amount in a direction that it has a negative dot product with, and thus can be bounded above by    O   (   t   )       O    t     O(\sqrt{t})   where t is the number of changes to the weight vector. But it can also be bounded below by    O   (  t  )       O  t    O(t)   because if there exists an (unknown) satisfactory weight vector, then every change makes progress in this (unknown) direction by a positive amount that depends only on the input vector.  While the perceptron algorithm is guaranteed to converge on some solution in the case of a linearly separable training set, it may still pick any solution and problems may admit many solutions of varying quality. 9 The perceptron of optimal stability , nowadays better known as the linear support vector machine , was designed to solve this problem.  The decision boundary of a perceptron is invariant with respect to scaling of the weight vector; that is, a perceptron trained with initial weight vector   ùê∞   ùê∞   \mathbf{w}   and learning rate    Œ±    Œ±   \alpha\,   behaves identically to a perceptron trained with initial weight vector    ùê∞  /   Œ±       ùê∞  Œ±    \mathbf{w}/\alpha\,   and learning rate 1. Thus, since the initial weights become irrelevant with increasing number of iterations, the learning rate does not matter in the case of the perceptron and is usually just set to 1.  Variants  The pocket algorithm with ratchet (Gallant, 1990) solves the stability problem of perceptron learning by keeping the best solution seen so far "in its pocket". The pocket algorithm then returns the solution in the pocket, rather than the last solution. It can be used also for non-separable data sets, where the aim is to find a perceptron with a small number of misclassifications. However, these solutions appear purely stochastically and hence the pocket algorithm neither approaches them gradually in the course of learning, nor are they guaranteed to show up within a given number of learning steps.  The Maxover algorithm (Wendemuth, 1995) 10 is "robust" in the sense that it will converge regardless of (prior) knowledge of linear separability of the data set. In the linear separable case, it will solve the training problem - if desired, even with optimal stability ( maximum margin between the classes). For non-separable data sets, it will return a solution with a small number of misclassifications. In all cases, the algorithm gradually approaches the solution in the course of learning, without memorizing previous states and without stochastic jumps. Convergence is to global optimality for separable data sets and to local optimality for non-separable data sets.  In separable problems, perceptron training can also aim at finding the largest separating margin between the classes. The so-called perceptron of optimal stability can be determined by means of iterative training and optimization schemes, such as the Min-Over algorithm (Krauth and Mezard, 1987) 11 or the AdaTron (Anlauf and Biehl, 1989)) . 12 AdaTron uses the fact that the corresponding quadratic optimization problem is convex. The perceptron of optimal stability, together with the kernel trick , are the conceptual foundations of the support vector machine .  The   Œ±   Œ±   \alpha   -perceptron further used a pre-processing layer of fixed random weights, with thresholded output units. This enabled the perceptron to classify analogue patterns, by projecting them into a binary space . In fact, for a projection space of sufficiently high dimension, patterns can become linearly separable.  For example, consider the case of having to classify data into two classes. Here is a small such data set, consisting of points coming from two Gaussian distributions .  Image:Two_class_Gaussian_data.png|Two-class Gaussian data Image:Linear_classifier_on_Gaussian_data.png|A linear classifier operating on the original space Image:Hidden_space_linear_classifier_on_Gaussian_data.png|A linear classifier operating on a high-dimensional projection  A linear classifier can only separate points with a hyperplane , so no linear classifier can classify all the points here perfectly. On the other hand, the data can be projected into a large number of dimensions. In our example, a random matrix was used to project the data linearly to a 1000-dimensional space; then each resulting data point was transformed through the hyperbolic tangent function . A linear classifier can then separate the data, as shown in the third figure. However the data may still not be completely separable in this space, in which the perceptron algorithm would not converge. In the example shown, stochastic steepest gradient descent was used to adapt the parameters.  Another way to solve nonlinear problems without using multiple layers is to use higher order networks ( sigma-pi unit ). In this type of network, each element in the input vector is extended with each pairwise combination of multiplied inputs (second order). This can be extended to an n -order network.  It should be kept in mind, however, that the best classifier is not necessarily that which classifies all the training data perfectly. Indeed, if we had the prior constraint that the data come from equi-variant Gaussian distributions, the linear separation in the input space is optimal, and the nonlinear solution is overfitted .  Other linear classification algorithms include Winnow , support vector machine and logistic regression .  Example  A perceptron learns to perform a binary NAND function on inputs     x  1      subscript  x  1    x_{1}\,   and     x  2      subscript  x  2    x_{2}\,   .  Inputs     x  0      subscript  x  0    x_{0}\,   ,     x  1      subscript  x  1    x_{1}\,   ,     x  2      subscript  x  2    x_{2}\,   , with input     x  0      subscript  x  0    x_{0}\,   held constant at 1.  Threshold (   t   t   t   ): 0.5  Bias (   b   b   b   ): 1  Learning rate (   r   r   r   ): 0.1  Training set, consisting of four samples:    {   (   (  1  ,  0  ,  0  )   ,  1  )   ,   (   (  1  ,  0  ,  1  )   ,  1  )   ,   (   (  1  ,  1  ,  0  )   ,  1  )   ,   (   (  1  ,  1  ,  1  )   ,  0  )   }       1  0  0   1     1  0  1   1     1  1  0   1     1  1  1   0     \{((1,0,0),1),((1,0,1),1),((1,1,0),1),((1,1,1),0)\}\,     In the following, the final weights of one iteration become the initial weights of the next. Each cycle over all the samples in the training set is demarcated with heavy lines.      Input   rowspan="2" Initial weights   Output   Error   Correction   rowspan="2" Final weights       Sensor values   Desired output   Per sensor   Sum   Network         x  0     subscript  x  0    x_{0}          x  1     subscript  x  1    x_{1}          x  2     subscript  x  2    x_{2}         z   z   z          w  0     subscript  w  0    w_{0}          w  1     subscript  w  1    w_{1}                1   0   0   1   0   0     1   0   1   1   0.1   0     1   1   0   1   0.2   0     1   1   1   0   0.3   0.1     1   0   0   1   0.3   0.1     1   0   1   1   0.4   0.1     1   1   0   1   0.5   0.1     1   1   1   0   0.5   0.1     1   0   0   1   0.4   0     1   0   1   1   0.5   0     1   1   0   1   0.5   0     1   1   1   0   0.6   0.1     1   0   0   1   0.5   0     1   0   1   1   0.6   0     1   1   0   1   0.6   0     1   1   1   0   0.6   0     1   0   0   1   0.5   -0.1     1   0   1   1   0.6   -0.1     1   1   0   1   0.7   -0.1     1   1   1   0   0.7   -0.1     1   0   0   1   0.6   -0.2     1   0   1   1   0.6   -0.2     1   1   0   1   0.7   -0.2     1   1   1   0   0.8   -0.1     1   0   0   1   0.7   -0.2     1   0   1   1   0.7   -0.2     1   1   0   1   0.7   -0.2     1   1   1   0   0.8   -0.1     1   0   0   1   0.7   -0.2     1   0   1   1   0.7   -0.2     1   1   0   1   0.8   -0.2     1   1   1   0   0.8   -0.2     1   0   0   1   0.8   -0.2     1   0   1   1   0.8   -0.2     1   1   0   1   0.8   -0.2     1   1   1   0   0.8   -0.2     This example can be implemented in the following Python code.  threshold =  0.5 learning_rate =  0.1 weights = [ 0 , 0 , 0 ]
 training_set = [(( 1 , 0 , 0 ), 1 ), (( 1 , 0 , 1 ), 1 ), (( 1 , 1 , 0 ), 1 ), (( 1 , 1 , 1 ), 0 )] def dot_product(values, weights): return  sum (value * weight for value, weight in  zip (values, weights)) while  True : print ( '-'  *  60 )
     error_count =  0  for input_vector, desired_output in training_set: print (weights)
         result = dot_product(input_vector, weights) > threshold
         error = desired_output - result if error !=  0 :
             error_count +=  1  for index, value in  enumerate (input_vector):
                 weights[index] += learning_rate * error * value if error_count ==  0 : break  Multiclass perceptron  Like most other techniques for training linear classifiers, the perceptron generalizes naturally to multiclass classification . Here, the input   x   x   x   and the output   y   y   y   are drawn from arbitrary sets. A feature representation function    f   (  x  ,  y  )       f   x  y     f(x,y)   maps each possible input/output pair to a finite-dimensional real-valued feature vector. As before, the feature vector is multiplied by a weight vector   w   w   w   , but now the resulting score is used to choose among many possible outputs:        y  ^   =      argmax  y   f    (  x  ,  y  )    ‚ãÖ  w    .       normal-^  y    normal-‚ãÖ      subscript  argmax  y   f    x  y    w     \hat{y}=\operatorname{argmax}_{y}f(x,y)\cdot w.     Learning again iterates over the examples, predicting an output for each, leaving the weights unchanged when the predicted output matches the target, and changing them when it does not. The update becomes:        w   t  +  1    =     w  t   +   f   (  x  ,  y  )     -   f   (  x  ,   y  ^   )      .       subscript  w    t  1         subscript  w  t     f   x  y       f   x   normal-^  y        w_{t+1}=w_{t}+f(x,y)-f(x,\hat{y}).     This multiclass formulation reduces to the original perceptron when   x   x   x   is a real-valued vector,   y   y   y   is chosen from    {  0  ,  1  }     0  1    \{0,1\}   , and     f   (  x  ,  y  )    =   y  x         f   x  y      y  x     f(x,y)=yx   .  For certain problems, input/output representations and features can be chosen so that      argmax  y   f   (  x  ,  y  )    ‚ãÖ  w     normal-‚ãÖ     subscript  argmax  y   f   x  y    w    \mathrm{argmax}_{y}f(x,y)\cdot w   can be found efficiently even though   y   y   y   is chosen from a very large or even infinite set.  In recent years, perceptron training has become popular in the field of natural language processing for such tasks as part-of-speech tagging and syntactic parsing (Collins, 2002).  References   Aizerman, M. A. and Braverman, E. M. and Lev I. Rozonoer. Theoretical foundations of the potential function method in pattern recognition learning. Automation and Remote Control, 25:821‚Äì837, 1964.  Rosenblatt, Frank (1958), The Perceptron: A Probabilistic Model for Information Storage and Organization in the Brain, Cornell Aeronautical Laboratory, Psychological Review, v65, No. 6, pp.¬†386‚Äì408. .  Rosenblatt, Frank (1962), Principles of Neurodynamics. Washington, DC:Spartan Books.  Minsky M. L. and Papert S. A. 1969. Perceptrons . Cambridge, MA: MIT Press.  Gallant, S. I. (1990). Perceptron-based learning algorithms. IEEE Transactions on Neural Networks, vol. 1, no. 2, pp.¬†179‚Äì191.  Mohri, Mehryar and Rostamizadeh, Afshin (2013). Perceptron Mistake Bounds arXiv:1305.0208, 2013.  Novikoff, A. B. (1962). On convergence proofs on perceptrons. Symposium on the Mathematical Theory of Automata, 12, 615-622. Polytechnic Institute of Brooklyn.  Widrow, B. , Lehr, M.A., "30 years of Adaptive Neural Networks: Perceptron, Madaline, and Backpropagation," Proc. IEEE , vol 78, no 9, pp.¬†1415‚Äì1442, (1990).  Collins, M. 2002. Discriminative training methods for hidden Markov models: Theory and experiments with the perceptron algorithm in Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP '02).  Yin, Hongfeng (1996), Perceptron-Based Algorithms and Analysis, Spectrum Library, Concordia University, Canada   External links   A Perceptron implemented in MATLAB to learn binary NAND function  Chapter 3 Weighted networks - the perceptron and chapter 4 Perceptron learning of Neural Networks - A Systematic Introduction by Ra√∫l Rojas (ISBN 978-3-540-60505-8)  Explanation of the update rule by Charles Elkan  History of perceptrons  Mathematics of perceptrons   "  Category:Classification algorithms  Category:Artificial neural networks  Category:Articles with example Python code     Rosenblatt, Frank (1957), The Perceptron--a perceiving and recognizing automaton. Report 85-460-1, Cornell Aeronautical Laboratory. ‚Ü©  ‚Ü©  ‚Ü©   ‚Ü©  ‚Ü©  Mohri, Mehryar and Rostamizadeh, Afshin (2013). Perceptron Mistake Bounds arXiv:1305.0208, 2013. ‚Ü©  ‚Ü©  ‚Ü©  A. Wendemuth. Learning the Unlearnable . J. of Physics A: Math. Gen. 28: 5423-5436 (1995) ‚Ü©  W. Krauth and M. Mezard. Learning algorithms with optimal stability in neural networks. J. of Physics A: Math. Gen. 20: L745-L752 (1987) ‚Ü©  J.K. Anlauf and M. Biehl. The AdaTron: an Adaptive Perceptron algorithm. Europhysics Letters 10: 687-692 (1989) ‚Ü©    