


Cross-entropy method




Cross-entropy method

The cross-entropy (CE) method attributed to Reuven Rubinstein is a general Monte Carlo approach to combinatorial and continuous multi-extremal optimization and importance sampling. The method originated from the field of rare event simulation, where very small probabilities need to be accurately estimated, for example in network reliability analysis, queueing models, or performance analysis of telecommunication systems. The CE method can be applied to static and noisy combinatorial optimization problems such as the traveling salesman problem, the quadratic assignment problem, DNA sequence alignment, the max-cut problem and the buffer allocation problem, as well as continuous global optimization problems with many local extrema.
In a nutshell the CE method consists of two phases:

Generate a random data sample (trajectories, vectors, etc.) according to a specified mechanism.
Update the parameters of the random mechanism based on the data to produce a "better" sample in the next iteration. This step involves minimizing the cross-entropy or Kullback–Leibler divergence.

Estimation via importance sampling
Consider the general problem of estimating the quantity 
 
 
 
 , where 
 
 
 
  is some performance function and 
 
 
 
  is a member of some parametric family of distributions. Using importance sampling this quantity can be estimated as 
 
 
 
 , where 
 
 
 
  is a random sample from 
 
 
 
 . For positive 
 
 
 
 , the theoretically optimal importance sampling density (pdf) is given by 
 
 
 
 . This, however, depends on the unknown 
 
 
 
 . The CE method aims to approximate the optimal PDF by adaptively selecting members of the parametric family that are closest (in the Kullback–Leibler sense) to the optimal PDF 
 
 
 
 .
Generic CE algorithm

Choose initial parameter vector 
 
 
 
 ; set t = 1.
Generate a random sample 
 
 
 
  from 
 
 

Solve for 
 
 
 
 , where


If convergence is reached then stop; otherwise, increase t by 1 and reiterate from step 2.

In several cases, the solution to step 3 can be found analytically. Situations in which this occurs are

When 
 
 
 
  belongs to the natural exponential family
When 
 
 
 
  is discrete with finite support
When 
 
 
 
  and 
 
 
 
 , then 
 
 
 
  corresponds to the maximum likelihood estimator based on those 
 
 
 
 .

Continuous optimization—example
The same CE algorithm can be used for optimization, rather than estimation. Suppose the problem is to maximize some function 
 
 
 
 , for example, 
 
 
 
 . To apply CE, one considers first the associated stochastic problem of estimating 
 
 
 
  for a given level

 
 , and parametric family 
 
 
 
 , for example the 1-dimensional Gaussian distribution, parameterized by its mean 
 
 
 
  and variance 
 
 
 
  (so 
 
 
 
  here). Hence, for a given 
 
 
 
 , the goal is to find 
 
 
 
  so that 
 
 
 
  is minimized. This is done by solving the sample version (stochastic counterpart) of the KL divergence minimization problem, as in step 3 above. It turns out that parameters that minimize the stochastic counterpart for this choice of target distribution and parametric family are the sample mean and sample variance corresponding to the elite samples, which are those samples that have objective function value 
 
 
 
 . The worst of the elite samples is then used as the level parameter for the next iteration. This yields the following randomized algorithm that happens to coincide with the so-called Estimation of Multivariate Normal Algorithm (EMNA), an estimation of distribution algorithm.
Pseudo-code
1. mu:=-6; sigma2:=100; t:=0; maxits=100;    // Initialize parameters
2. N:=100; Ne:=10;                           //
3. while t  epsilon     // While maxits not exceeded and not converged
4.  X = SampleGaussian(mu,sigma2,N);         // Obtain N samples from current sampling distribution
5.  S = exp(-(X-2)^2) + 0.8 exp(-(X+2)^2);   // Evaluate objective function at sampled points
6.  X = sort(X,S);                           // Sort X by objective function values (in descending order)
7.  mu = mean(X(1:Ne)); sigma2=var(X(1:Ne)); // Update parameters of sampling distribution
8.  t = t+1;                                 // Increment iteration counter
9. return mu                                 // Return mean of final sampling distribution as solution
Related methods

Simulated annealing
Genetic algorithms
Harmony search
Estimation of distribution algorithm
Tabu search

See also

Cross entropy
Kullback–Leibler divergence
Randomized algorithm
Importance sampling

References

De Boer, P-T., Kroese, D.P, Mannor, S. and Rubinstein, R.Y. (2005). A Tutorial on the Cross-Entropy Method. Annals of Operations Research, 134 (1), 19–67.1
Rubinstein, R.Y. (1997). Optimization of Computer simulation Models with Rare Events, European Journal of Operations Research, 99, 89–112.
Rubinstein, R.Y., Kroese, D.P. (2004). The Cross-Entropy Method: A Unified Approach to Combinatorial Optimization, Monte-Carlo Simulation, and Machine Learning, Springer-Verlag, New York.

External links

Homepage for the CE method


CEoptim R package

"
Category:Heuristics Category:Optimization algorithms and methods Category:Monte Carlo methods Category:Machine learning


