   Bogacki–Shampine method      Bogacki–Shampine method   The Bogacki–Shampine method is a method for the numerical solution of ordinary differential equations , that was proposed by Przemyslaw Bogacki and Lawrence F. Shampine in 1989 . The Bogacki–Shampine method is a Runge–Kutta method of order three with four stages with the First Same As Last (FSAL) property, so that it uses approximately three function evaluations per step. It has an embedded second-order method which can be used to implement adaptive step size . The Bogacki–Shampine method is implemented in the ode23 function in MATLAB .  Low-order methods are more suitable than higher-order methods like the Dormand–Prince method of order five, if only a crude approximation to the solution is required. Bogacki and Shampine argue that their method outperforms other third-order methods with an embedded method of order two.  The Butcher tableau for the Bogacki–Shampine method is:       0      1/2      3/4      1             Following the standard notation, the differential equation to be solved is     y  ′   =   f   (  t  ,  y  )         superscript  y  normal-′     f   t  y      y^{\prime}=f(t,y)   . Furthermore,    y  n     subscript  y  n    y_{n}   denotes the numerical solution at time    t  n     subscript  t  n    t_{n}   and    h  n     subscript  h  n    h_{n}   is the step size, defined by     h  n   =    t   n  +  1    -   t  n         subscript  h  n      subscript  t    n  1     subscript  t  n      h_{n}=t_{n+1}-t_{n}   . Then, one step of the Bogacki–Shampine method is given by:      k  1     subscript  k  1    \displaystyle k_{1}     Here,    z   n  +  1      subscript  z    n  1     z_{n+1}   is a second-order approximation to the exact solution. The method for calculating    y   n  +  1      subscript  y    n  1     y_{n+1}   is due to . On the other hand,    y   n  +  1      subscript  y    n  1     y_{n+1}   is a third-order approximation, so the difference between    y   n  +  1      subscript  y    n  1     y_{n+1}   and    z   n  +  1      subscript  z    n  1     z_{n+1}   can be used to adapt the step size . The FSAL—first same as last—property is that the stage value    k  4     subscript  k  4    k_{4}   in one step equals    k  1     subscript  k  1    k_{1}   in the next step; thus, only three function evaluations are needed per step.  References    .   .   .   "  Category:Runge–Kutta methods   