   Kahn process networks      Kahn process networks  '''Kahn process networks''' (''KPNs'', or ''process networks'') is a [[Distributed computing|distributed]] ''[[m odel of computation]]'' ( MoC ) where a group of deterministic sequential processes are communicating through unbounded FIFO channels. The resulting process network exhibits deterministic behavior that does not depend on the various computation or communication delays. The model was originally developed for modeling distributed systems but has proven its convenience for modeling signal processing systems. As such, KPNs have found many applications in modeling embedded systems , high-performance computing systems, and other computational tasks. KPNs were first introduced by Gilles Kahn . 1   Execution model  KPN is a common model for describing signal processing systems where infinite streams of data are incrementally transformed by processes executing in sequence or parallel. Despite parallel processes, multitasking or parallelism are not required for executing this model.  In a KPN, processes communicate via unbounded FIFO channels. Processes read and write atomic data elements , or alternatively called tokens , from and to channels. Writing to a channel is non-blocking , i.e. it always succeeds and does not stall the process, while reading from a channel is blocking , i.e. a process that reads from an empty channel will stall and can only continue when the channel contains sufficient data items ( tokens ). Processes are not allowed to test an input channel for existence of tokens without consuming them. Given a specific input (token) history for a process, the process must be deterministic so that it always produces the same outputs (tokens). Timing or execution order of processes must not affect the result and therefore testing input channels for tokens is forbidden.  Notes on processes   A process need not read any input or have any input channels as it may act as a pure data source  A process need not write any output or have any output channels  Testing input channels for emptiness (or non-blocking reads ) could be allowed for optimization purposes, but it should not affect outputs. It can be beneficial and/or possible to do something in advance rather than wait for a channel. For example, assume there were 2 reads from different channels. If the first read would stall (wait for a token) but the second read could be read a token directly, it could be beneficial to read the second one first to save time, because the reading itself often consumes some time (e.g. time for memory allocation or copying).   Process firing semantics as Petri nets  Assuming process P in the KPN above is constructed so that it first reads data from channel A , then channel B , computes something and then writes data to channel C , the execution model of the process can be modeled with the Petri net shown on the right. The single token in the PE resource place forbids that the process is executed simultaneously for different input data. When data arrives at channel A or B , tokens are placed into places FIFO A and FIFO B respectively. The transitions of the Petri net are associated with the respective I/O operations and computation. When the data has been written to channel C , PE resource is filled with its initial marking again allowing new data to be read.  Process as a finite state machine  A process can be modeled as a finite state machine that is in one of two states:   Active; the process computes or writes data  Wait; the process is blocked (waiting) for data   Assuming the finite state machine reads program elements associated with the process, it may read three kinds of tokens, which are "Compute", "Read" and "Write token". Additionally, in the Wait state it can only come back to Active state by reading a special "Get token" which means the communication channel associated with the wait contains readable data.  Properties  Boundedness of channels  A channel is strictly bounded by   b   b   b   if it has at most   b   b   b   unconsumed tokens for any possible execution. A KPN is strictly bounded by   b   b   b   if all channels are strictly bounded by   b   b   b   .  The number of unconsumed tokens depends on the execution order ( scheduling ) of processes. A spontaneous data source could produce arbitrarily many tokens into a channel if the scheduler would not execute processes consuming those tokens.  A real application can not have unbounded FIFOs and therefore scheduling and maximum capacity of FIFOs must be designed into a practical implementation. The maximum capacity of FIFOs can be handled in several ways:   FIFO bounds can be mathematically derived in design to avoid FIFO overflows. This is however not possible for all KPNs. It is an undecidable problem to test whether a KPN is strictly bounded by   b   b   b   . Moreover, in practical situations, the bound may be data dependent.  FIFO bounds can be grown on demand. 2  Blocking writes can be used so that a process blocks if a FIFO is full. This approach may unfortunately lead to an artificial deadlock unless the designer properly derives safe bounds for FIFOs (Parks, 1995). Local artificial detection at run-time may be necessary to guarantee the production of the correct output. 3   Closed and open systems  A closed KPN has no external input or output channels. Processes that have no input channels act as data sources and processes that have no output channels act as data sinks. In an open KPN each process has at least one input and output channel.  Determinism  Processes of a KPN are deterministic . For the same input history they must always produce exactly the same output. Processes can be modeled as sequential programs that do reads and writes to ports in any order or quantity as long as determinism property is preserved. As a consequence, KPN model is deterministic so that following factors entirely determine outputs of the system:   processes  the network  initial tokens   Hence, timing of the processes does not affect outputs of the system.  Monotonicity  KPN processes are monotonic , which means that they only need partial information of the input stream in order to produce partial information of the output stream. Monotonicity allows parallelism. In a KPN there is a total order of events inside a signal. However, there is no order relation between events in different signals. Thus, KPNs are only partially ordered, which classifies them as untimed model .  Applications  Due to its high expressiveness and succinctness, KPNs as underlying the model of computation are applied in several academic modeling tools to represent streaming applications, which have certain properties (e.g., dataflow-oriented, stream-based).  The open source Daedalus framework 4 maintained by Leiden Embedded Research Center at Leiden university accepts sequential programs written in C and generates a corresponding KPN. This KPN could, for example, be used to map the KPN onto an FPGA -based platform systematically.  The Ambric Am2045 massively parallel processor array is a KPN implemented in actual silicon. 5 Its 336 32-bit processors are connected by a programmable interconnect of dedicated FIFOs. Thus its channels are strictly bounded with blocking writes.  See also   Flow-based programming   References  Further reading   Lee, E. and Park, T. (1995). Dataflow Process Networks . In Proceedings of the IEEE, volume 83, pages 773-799.  Josephs, M.B. (2005). Models for Data-Flow Sequential Processes . In: Communicating Sequential Processes, The First 25 Years, LNCS 3525, pages 85–97.   "  Category:Models of computation     ↩  ↩  ↩  http://daedalus.liacs.nl LIACS Daedalus framework ↩  Mike Butts, Anthony Mark Jones, Paul Wasson, "A Structural Object Programming Model, Architecture, Chip and Tools for Reconfigurable Computing", Proceedings of FCCM , April 2007, IEEE Computer Society ↩     