


Centripetal Catmull–Rom spline




Centripetal Catmull–Rom spline

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In computer graphics, centripetal Catmull–Rom spline is a variant form of Catmull-Rom spline 1 formulated according to the work of Barry and Goldman.2 It is a type of interpolating spline (a curve that goes through its control points) defined by four control points 
 
 
 
 , with the curve drawn only from 
 
 
 
  to 
 
 
 
 .
(Figure)
Catmull–Rom spline interpolation with four points

Definition
 
Let 
 
 
 
  denote a point. For a curve segment 
 
 
 
  defined by point 
 
 
 
  and knot sequence 
 
 
 
 , the centripetal Catmull-Rom spline can be produced by:



where















and



in which 
 
 
 
  ranges from 0 to 1 for knot parameterization, and 
 
 
 
  with 
 
 
 
 . For centripetal Catmull-Rom spline, the value of 
 
 
 
  is 
 
 
 
 . When 
 
 
 
 , the resulting curve is the standard Catmull-Rom spline (uniform Catmull-Rom spline); when 
 
 
 
 , the product is a chordal Catmull-Rom spline.
Plugging 
 
 
 
  into the spline equations 
 
 
 
  and 
 
 
 
  shows that the value of the spline curve at 
 
 
 
  is 
 
 
 
 . Similarly, substituting 
 
 
 
  into the spline equations shows that 
 
 
 
  at 
 
 
 
 . This is true independent of the value of 
 
 
 
  since the equation for 
 
 
 
  is not needed to calculate the value of 
 
 
 
  at points 
 
 
 
  and 
 
 
 
 .
Advantages
Centripetal Catmull–Rom spline has several desirable mathematical properties compared to the original and the other types of Catmull-Rom formulation.3 First, it will not form loop or self-intersection within a curve segment. Second, cusp will never occur within a curve segment. Third, it follows the control points more tightly.
(Figure)
 In this figure, there is a self-intersection/loop on the uniform Catmull-Rom spline (green), whereas for chordal Catmull-Rom spline (red), the curve does not follow tightly through the control points.

Other uses
In computer vision, centripetal Catmull-Rom spline has been used to formulate an active model for segmentation. The method is termed active spline model.4 The model is devised on the basis of active shape model, but uses centripetal Catmull-Rom spline to join two successive points (active shape model uses simple straight line), so that the total number of points necessary to depict a shape is lesser. The use of centripetal Catmull-Rom spline makes the training of a shape model much simpler, and it enables a better way to edit a contour after segmentation.
Code Example
The following is an implementation of the Catmull-Rom spline in Python.
import numpy
 import pylab as plt
 
 def CatmullRomSpline(P0, P1, P2, P3, nPoints=100):
   """
   P0, P1, P2, and P3 should be (x,y) point pairs that define the Catmull-Rom spline.
   nPoints is the number of points to include in this curve segment.
   """
   # Convert the points to numpy so that we can do array multiplication
   P0, P1, P2, P3 = map(numpy.array, [P0, P1, P2, P3])
 
   # Calculate t0 to t4
   alpha = 0.5
   def tj(ti, Pi, Pj):
     xi, yi = Pi
     xj, yj = Pj
     return ( ( (xj-xi)**2 + (yj-yi)**2 )**0.5 )**alpha + ti
 
   t0 = 0
   t1 = tj(t0, P0, P1)
   t2 = tj(t1, P1, P2)
   t3 = tj(t2, P2, P3)
 
   # Only calculate points between P1 and P2
   t = numpy.linspace(t1,t2,nPoints)
 
   # Reshape so that we can multiply by the points P0 to P3
   # and get a point for each value of t.
   t = t.reshape(len(t),1)
 
   A1 = (t1-t)/(t1-t0)*P0 + (t-t0)/(t1-t0)*P1
   A2 = (t2-t)/(t2-t1)*P1 + (t-t1)/(t2-t1)*P2
   A3 = (t3-t)/(t3-t2)*P2 + (t-t2)/(t3-t2)*P3
 
   B1 = (t2-t)/(t2-t0)*A1 + (t-t0)/(t2-t0)*A2
   B2 = (t3-t)/(t3-t1)*A2 + (t-t1)/(t3-t1)*A3
 
   C  = (t2-t)/(t2-t1)*B1 + (t-t1)/(t2-t1)*B2
   return C
 
 def CatmullRomChain(P):
   """
   Calculate Catmull Rom for a chain of points and return the combined curve.
   """
   sz = len(P)
 
   # The curve C will contain an array of (x,y) points.
   C = []
   for i in range(sz-3):
     c = CatmullRomSpline(P[i], P[i+1], P[i+2], P[i+3])
     C.extend(c)
 
   return C
 
 # Define a set of points for curve to go through
 Points = [[0,1.5],[2,2],[3,1],[4,0.5],[5,1],[6,2],[7,3]]
 
 # Calculate the Catmull-Rom splines through the points
 c = CatmullRomChain(Points)
 
 # Convert the Catmull Rom curve points into x and y arrays and plot
 x,y = zip(*c)
 plt.plot(x,y)
 
 # Plot the control points
 px, py = zip(*Points)
 plt.plot(px,py,'or')
 
 plt.show()
See also

Cubic Hermite splines

References
External links

Implementation in Java
Simplified implementation in C++

"
Category:Splines



E. Catmull and R. Rom. A class of local interpolating splines. Computer Aided Geometric Design, pages 317-326, 1974.↩
P. J. Barry and R. N. Goldman. A recursive evaluation algorithm for a class of Catmull–Rom splines. SIGGRAPH Computer Graphics, 22(4):199-204, 1988.↩
↩
↩



