   Factor graph      Factor graph   A factor graph is a bipartite graph representing the factorization of a function. In probability theory and its applications, factor graphs are used to represent factorization of a probability distribution function, enabling efficient computations, such as the computation of marginal distributions through the sum-product algorithm . One of the important success stories of factor graphs and the sum-product algorithm is the decoding of capacity-approaching error-correcting codes , such as LDPC and turbo codes .  Factor graphs generalize constraint graphs . A factor whose value is either 0 or 1 is called a constraint. A constraint graph is a factor graph where all factors are constraints. The max-product algorithm for factor graphs can be viewed as a generalization of the arc-consistency algorithm for constraint processing.  Definition  A factor graph is a bipartite graph representing the factorization of a function. Given a factorization of a function    g   (   X  1   ,   X  2   ,  …  ,   X  n   )       g    subscript  X  1    subscript  X  2   normal-…   subscript  X  n      g(X_{1},X_{2},\dots,X_{n})   ,        g   (   X  1   ,   X  2   ,  …  ,   X  n   )    =    ∏   j  =  1   m     f  j    (   S  j   )      ,        g    subscript  X  1    subscript  X  2   normal-…   subscript  X  n       superscript   subscript  product    j  1    m      subscript  f  j    subscript  S  j       g(X_{1},X_{2},\dots,X_{n})=\prod_{j=1}^{m}f_{j}(S_{j}),     where     S  j   ⊆   {   X  1   ,   X  2   ,  …  ,   X  n   }        subscript  S  j     subscript  X  1    subscript  X  2   normal-…   subscript  X  n      S_{j}\subseteq\{X_{1},X_{2},\dots,X_{n}\}   , the corresponding factor graph    G  =   (  X  ,  F  ,  E  )       G   X  F  E     G=(X,F,E)   consists of variable vertices    X  =   {   X  1   ,   X  2   ,  …  ,   X  n   }       X    subscript  X  1    subscript  X  2   normal-…   subscript  X  n      X=\{X_{1},X_{2},\dots,X_{n}\}   , factor vertices     F  =   {   f  1   ,   f  2   ,  …  ,   f  m   }       F    subscript  f  1    subscript  f  2   normal-…   subscript  f  m      F=\{f_{1},f_{2},\dots,f_{m}\}   , and edges   E   E   E   . The edges depend on the factorization as follows: there is an undirected edge between factor vertex    f  j     subscript  f  j    f_{j}   and variable vertex    X  k     subscript  X  k    X_{k}   iff     X  k   ∈   S  j        subscript  X  k    subscript  S  j     X_{k}\in S_{j}   . The function is tacitly assumed to be real-valued     g   (   X  1   ,   X  2   ,  …  ,   X  n   )    ∈  ℝ        g    subscript  X  1    subscript  X  2   normal-…   subscript  X  n     ℝ    g(X_{1},X_{2},\dots,X_{n})\in\mathbb{R}   .  Factor graphs can be combined with message passing algorithms to efficiently compute certain characteristics of the function    g   (   X  1   ,   X  2   ,  …  ,   X  n   )       g    subscript  X  1    subscript  X  2   normal-…   subscript  X  n      g(X_{1},X_{2},\dots,X_{n})   , such as the marginal distributions .  Examples  (Figure)  An example factor graph   Consider a function that factorizes as follows:       g   (   X  1   ,   X  2   ,   X  3   )    =    f  1    (   X  1   )    f  2    (   X  1   ,   X  2   )    f  3    (   X  1   ,   X  2   )    f  4    (   X  2   ,   X  3   )          g    subscript  X  1    subscript  X  2    subscript  X  3        subscript  f  1    subscript  X  1    subscript  f  2     subscript  X  1    subscript  X  2     subscript  f  3     subscript  X  1    subscript  X  2     subscript  f  4     subscript  X  2    subscript  X  3       g(X_{1},X_{2},X_{3})=f_{1}(X_{1})f_{2}(X_{1},X_{2})f_{3}(X_{1},X_{2})f_{4}(X_{%
 2},X_{3})   ,  with a corresponding factor graph shown on the right. Observe that the factor graph has a cycle . If we merge     f  2    (   X  1   ,   X  2   )    f  3    (   X  1   ,   X  2   )        subscript  f  2     subscript  X  1    subscript  X  2     subscript  f  3     subscript  X  1    subscript  X  2      f_{2}(X_{1},X_{2})f_{3}(X_{1},X_{2})   into a single factor, the resulting factor graph will be a tree . This is an important distinction, as message passing algorithms are usually exact for trees, but only approximate for graphs with cycles.  Message passing on factor graphs  A popular message passing algorithm on factor graphs is the sum-product algorithm , which efficiently computes all the marginals of the individual variables of the function. In particular, the marginal of variable    X  k     subscript  X  k    X_{k}   is defined as        g  k    (   X  k   )    =    ∑   X   k  ¯      g   (   X  1   ,   X  2   ,  …  ,   X  n   )            subscript  g  k    subscript  X  k      subscript    subscript  X   normal-¯  k       g    subscript  X  1    subscript  X  2   normal-…   subscript  X  n        g_{k}(X_{k})=\sum_{X_{\bar{k}}}g(X_{1},X_{2},\dots,X_{n})   where the notation    X   k  ¯      subscript  X   normal-¯  k     X_{\bar{k}}   means that the summation goes over all the variables, except     X  k     subscript  X  k    X_{k}   . The messages of the sum-product algorithm are conceptually computed in the vertices and passed along the edges. A message from or to a variable vertex is always a function of that particular variable. For instance, when a variable is binary, the messages over the edges incident to the corresponding vertex can be represented as vectors of length 2: the first entry is the message evaluated in 0, the second entry is the message evaluated in 1. When a variable belongs to the field of real numbers , messages can be arbitrary functions, and special care needs to be taken in their representation.  In practice, the sum-product algorithm is used for statistical inference , whereby    g   (   X  1   ,   X  2   ,  …  ,   X  n   )       g    subscript  X  1    subscript  X  2   normal-…   subscript  X  n      g(X_{1},X_{2},\dots,X_{n})   is a joint distribution or a joint likelihood function , and the factorization depends on the conditional independencies among the variables.  The Hammersley–Clifford theorem shows that other probabilistic models such as Markov networks and Bayesian networks can be represented as factor graphs; the latter representation is frequently used when performing inference over such networks using belief propagation . On the other hand, Bayesian networks are more naturally suited for generative models , as they can directly represent the causalities of the model.  See also   Belief propagation  Bayesian inference  Bayesian programming  Conditional probability  Markov network  Bayesian network  Hammersley–Clifford theorem   External links   A tutorial-style dissertation by Volker Koch  An Introduction to Factor Graphs by Hans-Andrea Loeliger , IEEE Signal Processing Magazine , January 2004, pp. 28–41.  dimple an open-source tool for building and solving factor graphs in MATLAB.  An introduction to Factor Graph. Presentation from the ETH by Prof. Dr. Hans Loeliger   References        "  Category:Graphical models  Category:Markov networks  Category:Application-specific graphs   