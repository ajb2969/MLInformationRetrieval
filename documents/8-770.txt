   Cantor‚ÄìZassenhaus algorithm      Cantor‚ÄìZassenhaus algorithm   In computational  algebra , the Cantor‚ÄìZassenhaus algorithm is a well known method for factorising polynomials over finite fields (also called Galois fields).  The algorithm consists mainly of exponentiation and polynomial GCD computations. It was invented by David G. Cantor and Hans Zassenhaus in 1981.  It is arguably the dominant algorithm for solving the problem, having replaced the earlier Berlekamp's algorithm of 1967. It is currently implemented in many well-known computer algebra systems .  Overview  Background  The Cantor‚ÄìZassenhaus algorithm takes as input a squarefree polynomial    f   (  x  )       f  x    f(x)   (i.e. one with no repeated factors) of degree n with coefficients in a finite field    ùîΩ  q     subscript  ùîΩ  q    \mathbb{F}_{q}   whose irreducible polynomial factors are all of equal degree (algorithms exist for efficiently factorising arbitrary polynomials into a product of polynomials satisfying these conditions, so that the Cantor‚ÄìZassenhaus algorithm can be used to factorise arbitrary polynomials). It gives as output a polynomial    g   (  x  )       g  x    g(x)   with coefficients in the same field such that    g   (  x  )       g  x    g(x)   divides    f   (  x  )       f  x    f(x)   . The algorithm may then be applied recursively to these and subsequent divisors, until we find the decomposition of    f   (  x  )       f  x    f(x)   into powers of irreducible polynomials (recalling that the ring of polynomials over any field is a unique factorisation domain ).  All possible factors of    f   (  x  )       f  x    f(x)   are contained within the factor ring     R  =     ùîΩ  q    [  x  ]     ‚ü®   f   (  x  )    ‚ü©        R       subscript  ùîΩ  q    delimited-[]  x     delimited-‚ü®‚ü©    f  x       R=\frac{\mathbb{F}_{q}[x]}{\langle f(x)\rangle}   . If we suppose that    f   (  x  )       f  x    f(x)   has irreducible factors      p  1    (  x  )    ,    p  2    (  x  )    ,  ‚Ä¶  ,    p  s    (  x  )          subscript  p  1   x      subscript  p  2   x   normal-‚Ä¶     subscript  p  s   x     p_{1}(x),p_{2}(x),\ldots,p_{s}(x)   , all of degree d , then this factor ring is isomorphic to the direct product of factor rings    S  =    ‚àè   i  =  1   s      ùîΩ  q    [  x  ]     ‚ü®    p  i    (  x  )    ‚ü©         S    superscript   subscript  product    i  1    s        subscript  ùîΩ  q    delimited-[]  x     delimited-‚ü®‚ü©     subscript  p  i   x        S=\prod_{i=1}^{s}\frac{\mathbb{F}_{q}[x]}{\langle p_{i}(x)\rangle}   . The isomorphism from R to S , say   œï   œï   \phi   , maps a polynomial     g   (  x  )    ‚àà  R        g  x   R    g(x)\in R   to the s -tuple of its reductions modulo each of the     p  i    (  x  )        subscript  p  i   x    p_{i}(x)   , i.e. if:         g   (  x  )         ‚â°     g  1    (  x  )       (   mod    p  1    (  x  )     )     ,        g   (  x  )         ‚â°     g  2    (  x  )       (   mod    p  2    (  x  )     )     ,         ‚ãÆ        g   (  x  )         ‚â°     g  s    (  x  )       (   mod    p  s    (  x  )     )     ,           g  x     absent   annotated     subscript  g  1   x    pmod     subscript  p  1   x          g  x     absent   annotated     subscript  g  2   x    pmod     subscript  p  2   x         missing-subexpression   normal-‚ãÆ      g  x     absent   annotated     subscript  g  s   x    pmod     subscript  p  s   x         \begin{aligned}\displaystyle g(x)&\displaystyle{}\equiv g_{1}(x)\;\;(\mathop{{%
 \rm mod}}p_{1}(x)),\\
 \displaystyle g(x)&\displaystyle{}\equiv g_{2}(x)\;\;(\mathop{{\rm mod}}p_{2}(%
 x)),\\
 &\displaystyle{}\ \ \vdots\\
 \displaystyle g(x)&\displaystyle{}\equiv g_{s}(x)\;\;(\mathop{{\rm mod}}p_{s}(%
 x)),\end{aligned}     then     œï   (    g   (  x  )    +   ‚ü®   f   (  x  )    ‚ü©    )    =   (     g  1    (  x  )    +   ‚ü®    p  1    (  x  )    ‚ü©    ,  ‚Ä¶  ,     g  s    (  x  )    +   ‚ü®    p  s    (  x  )    ‚ü©    )         œï      g  x    delimited-‚ü®‚ü©    f  x            subscript  g  1   x    delimited-‚ü®‚ü©     subscript  p  1   x     normal-‚Ä¶       subscript  g  s   x    delimited-‚ü®‚ü©     subscript  p  s   x        \phi(g(x)+\langle f(x)\rangle)=(g_{1}(x)+\langle p_{1}(x)\rangle,\ldots,g_{s}(%
 x)+\langle p_{s}(x)\rangle)   . It is important to note the following at this point, as it shall be of critical importance later in the algorithm: Since the     p  i    (  x  )        subscript  p  i   x    p_{i}(x)   are each irreducible, each of the factor rings in this direct sum is in fact a field. These fields each have degree    q  d     superscript  q  d    q^{d}   .  Core result  The core result underlying the Cantor‚ÄìZassenhaus algorithm is the following: If     a   (  x  )    ‚àà  R        a  x   R    a(x)\in R   is a polynomial satisfying:       a   (  x  )    ‚â†   0  ,   ¬±  1          a  x    0   plus-or-minus  1      a(x)\neq 0,\pm 1             a  i    (  x  )    ‚àà    {  0  ,   -  1   ,  1  }   for  i   =  1   ,   2  ,  ‚Ä¶  ,  s    ,     formulae-sequence         subscript  a  i   x      0    1   1   for  i        1     2  normal-‚Ä¶  s     a_{i}(x)\in\{0,-1,1\}\text{ for }i=1,2,\ldots,s,     where     a  i    (  x  )        subscript  a  i   x    a_{i}(x)   is the reduction of    a   (  x  )       a  x    a(x)   modulo     p  i    (  x  )        subscript  p  i   x    p_{i}(x)   as before, and if any two of the following three sets is non-empty:       A  =   {  i  |     a  i    (  x  )    =  0   }    ,      A   conditional-set  i       subscript  a  i   x   0      A=\{i|a_{i}(x)=0\},          B  =   {  i  |     a  i    (  x  )    =   -  1    }    ,      B   conditional-set  i       subscript  a  i   x     1       B=\{i|a_{i}(x)=-1\},          C  =   {  i  |     a  i    (  x  )    =  1   }    ,      C   conditional-set  i       subscript  a  i   x   1      C=\{i|a_{i}(x)=1\},     then there exist the following non-trivial factors of    f   (  x  )       f  x    f(x)   :        gcd   (   f   (  x  )    ,   a   (  x  )    )    =    ‚àè   i  ‚àà  A      p  i    (  x  )      ,          f  x     a  x      subscript  product    i  A       subscript  p  i   x      \gcd(f(x),a(x))=\prod_{i\in A}p_{i}(x),           gcd   (   f   (  x  )    ,    a   (  x  )    +  1   )    =    ‚àè   i  ‚àà  B      p  i    (  x  )      ,          f  x       a  x   1      subscript  product    i  B       subscript  p  i   x      \gcd(f(x),a(x)+1)=\prod_{i\in B}p_{i}(x),           gcd   (   f   (  x  )    ,    a   (  x  )    -  1   )    =    ‚àè   i  ‚àà  C      p  i    (  x  )      .          f  x       a  x   1      subscript  product    i  C       subscript  p  i   x      \gcd(f(x),a(x)-1)=\prod_{i\in C}p_{i}(x).     Algorithm  The Cantor‚ÄìZassenhaus algorithm computes polynomials of the same type as    a   (  x  )       a  x    a(x)   above using the isomorphism discussed in the Background section. It proceeds as follows, in the case where the field    ùîΩ  q     subscript  ùîΩ  q    \mathbb{F}_{q}   is of odd-characteristic. The process can be generalised to characteristic 2 fields in a fairly straightforward way: Select a random polynomial     b   (  x  )    ‚àà  R        b  x   R    b(x)\in R   such that     b   (  x  )    ‚â†   0  ,   ¬±  1          b  x    0   plus-or-minus  1      b(x)\neq 0,\pm 1   . Set    m  =    (    q  d   -  1   )   /  2       m       superscript  q  d   1   2     m=(q^{d}-1)/2   and compute    b    (  x  )   m       b   superscript  x  m     b(x)^{m}   . Since   œï   œï   \phi   is an isomorphism, we have (using our now-established notation):        œï   (   b    (  x  )   m    )    =   (     b  1  m    (  x  )    +   ‚ü®    p  1    (  x  )    ‚ü©    ,  ‚Ä¶  ,     b  s  m    (  x  )    +   ‚ü®    p  s    (  x  )    ‚ü©    )    .        œï    b   superscript  x  m           superscript   subscript  b  1   m   x    delimited-‚ü®‚ü©     subscript  p  1   x     normal-‚Ä¶       subscript   superscript  b  m   s   x    delimited-‚ü®‚ü©     subscript  p  s   x        \phi(b(x)^{m})=(b_{1}^{m}(x)+\langle p_{1}(x)\rangle,\ldots,b^{m}_{s}(x)+%
 \langle p_{s}(x)\rangle).     Now, each      b  i    (  x  )    +   ‚ü®    p  i    (  x  )    ‚ü©          subscript  b  i   x    delimited-‚ü®‚ü©     subscript  p  i   x      b_{i}(x)+\langle p_{i}(x)\rangle   is an element of a field of order    q  d     superscript  q  d    q^{d}   , as noted earlier. The multiplicative subgroup of this field has order     q  d   -  1       superscript  q  d   1    q^{d}-1   and so, unless      b  i    (  x  )    =  0         subscript  b  i   x   0    b_{i}(x)=0   , we have      b  i     (  x  )     q  d   -  1     =  1         subscript  b  i    superscript  x     superscript  q  d   1     1    b_{i}(x)^{q^{d}-1}=1   for each i and hence      b  i     (  x  )   m    =   ¬±  1          subscript  b  i    superscript  x  m     plus-or-minus  1     b_{i}(x)^{m}=\pm 1   for each i . If      b  i    (  x  )    =  0         subscript  b  i   x   0    b_{i}(x)=0   , then of course      b  i     (  x  )   m    =  0         subscript  b  i    superscript  x  m    0    b_{i}(x)^{m}=0   . Hence    b    (  x  )   m       b   superscript  x  m     b(x)^{m}   is a polynomial of the same type as    a   (  x  )       a  x    a(x)   above. Further, since     b   (  x  )    ‚â†   0  ,   ¬±  1          b  x    0   plus-or-minus  1      b(x)\neq 0,\pm 1   , at least two of the sets    A  ,  B     A  B    A,B   and C are non-empty and by computing the above GCDs we may obtain non-trivial factors. Since the ring of polynomials over a field is an Euclidean domain , we may compute these GCDs using the Euclidean algorithm .  Applications  One important application of the Cantor‚ÄìZassenhaus algorithm is in computing discrete logarithms over finite fields of prime-power order. Computing discrete logarithms is an important problem in public key cryptography . For a field of prime-power order, the fastest known method is the index calculus method , which involves the factorisation of field elements. If we represent the prime-power order field in the usual way ‚Äì that is, as polynomials over the prime order base field, reduced modulo an irreducible polynomial of appropriate degree ‚Äì then this is simply polynomial factorisation, as provided by the Cantor‚ÄìZassenhaus algorithm.  Implementation in computer algebra systems  The Cantor‚ÄìZassenhaus algorithm may be accessed in the PARI/GP package using the factorcantor command.  See also   Polynomial factorisation  Factorization of polynomials over a finite field and irreducibility tests   References     "  Category:Computer algebra  Category:Finite fields   