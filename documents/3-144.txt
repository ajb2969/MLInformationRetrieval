


Prettyprint




Prettyprint

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Prettyprint (or pretty-print) is the application of any of various stylistic formatting conventions to text files, such as source code, markup, and similar kinds of content. These formatting conventions can adjust positioning and spacing (indent style), add color and contrast (syntax highlighting), adjust size, and make similar modifications intended to make the content easier for people to view, read, and understand. Prettyprinters for programming language source code are sometimes called code beautifiers or syntax highlighters.
Pretty-printing mathematics
 Pretty-printing usually refers to displaying mathematical expressions similar to the way they would be typeset professionally. For example, in computer algebra systems such as Maxima or Mathematica the system may write output like "x ^ 2 + 3 * x" as "
 
 
 
 ". Some graphing calculators, such as the Casio 9860 series, HP-49 series, TI-84 Plus, TI-89, and TI-Nspire, the TI-83 Plus with the PrettyPt add-on, or the TI-84 Plus with the same add-on or the "MathPrint"-enabled OSes, can perform pretty-printing. Additionally, a number of newer scientific calculators are equipped with dot matrix screens capable of pretty-printing such as the Casio FX-ES series (Natural Display), Sharp EL-W series (WriteView), HP SmartCalc 300s, and TI-30XB.
Many text formatting programs can also typeset mathematics: TeX was developed specifically for high-quality mathematical typesetting.
Pretty-printing markup and tag-based code
Pretty-printing in markup language instances is most typically associated with indentation of tags and string content to visually determine hierarchy and nesting. Although the syntactical structures of tag based languages do not significantly vary, indentation may vary significantly due to how a markup language is interpreted or in reflect to the data they describe.
In MathML, whitespace characters do not reflect data, meaning, or syntax above what is required by XML syntax. In HTML, whitespace characters between tags are considered text and are parsed as text nodes into the parsed result.1 While indentation may be generously applied to a MathML document, sufficient additional care must be taken in prettyprinting an HTML document to ensure additional text nodes are not created or destroyed in general proximity to content or content-reflective tag elements. This difference in complexity is non-trivial from the perspective of an automated pretty-print operation where no special rules or edge cases are necessary, as in the more simple MathML example. The HTML example may require a series of progressive interrelated algorithms to account for various patterns of tag elements and content that conforms to a uniform style and is consistent in application across various instances, as evidenced by the markup_beauty.js application component used to beautify HTML, XML, and related technologies for the Pretty Diff tool.
Programming code formatting and beautification
Programmers often use tools to format programming language source code in a particular manner. Proper code formatting makes it easier to read and understand. Different programmers often prefer different styles of formatting, such as the use of code indentation and whitespace or positioning of braces. A code formatter converts source code from one format style to another. This is relatively straightforward because of the unambiguous syntax of programming languages. Code beautification involves parsing the source code into component structures, such as assignment statements, if blocks, loops, etc. (see also control flow), and formatting them in a manner specified by the user in a configuration file.
Code beautifiers exist as standalone applications and built into text editors and integrated development environments. For example, Emacs' various language modes can correctly indent blocks of code attractively.2
Lisp pretty-printer
An early example of pretty-printing was Bill Gosper's "GRINDEF" (i.e. 'grind function') program (c. 1967), which used combinatorial search with pruning to format LISP programs. Early versions operated on the executable (list structure) form of the Lisp program and were oblivious to the special meanings of various functions. Later versions had special read conventions for incorporating non-executable comments and also for preserving read macros in unexpanded form. They also allowed special indentation conventions for special functions such as if.34 The term "grind" was used in some Lisp circles as a synonym for pretty-printing.5
Project style rules
Many open source projects have established rules for code layout. The most typical are the GNU style and the [http://www.freebsd.org/cgi/man.cgi?query=style&sektion;;=9 BSD style]. The biggest difference between the two is the location of the braces: in the GNU style, opening and closing braces are on lines by themselves, with the same indent. BSD style places an opening brace at the end of the preceding line, and the closing braces can be followed by else. The size of indent and location of whitespace also differs.
Example of formatting and beautifying code
The following example shows some typical C structures and how various indentation style rules format them. Without any formatting at all, it looks like this:
int foo(int k){if(k<1||k>2){printf("out of range\n");
 printf("this function requires a value of 1 or 2\n");}else{
 printf("Switching\n");switch(k){case 1:printf("1\n");break;case
 2:printf("2\n");break;}}}
The GNU indent program produces the following output when asked to indent according to the GNU rules:
int
 foo (int k)
 {
   if (k < 1 || k > 2)
     {
       printf ("out of range\n");
       printf ("this function requires a value of 1 or 2\n");
     }
   else
     {
       printf ("Switching\n");
       switch (k)
     {
     case 1:
       printf ("1\n");
       break;
     case 2:
       printf ("2\n");
       break;
     }
     }
 }
It produces this output when formatting according to BSD rules:
int
 foo(int k)
 {
     if (k < 1 || k > 2) {
         printf("out of range\n");
         printf("this function requires a value of 1 or 2\n");
     } else {
         printf("Switching\n");
         switch (k) {
         case 1:
             printf("1\n");
             break;
         case 2:
             printf("2\n");
             break;
         }
     }
 }
Formatted text
Formatted text can be considered a generalized form of pretty-printing.
Notes


See also

Elastic tabstop, a feature of some source code editors that detects and maintains aligned indents
enscript, a general text printing tool with prettyprinting functions
indent
Pretty Diff a pretty printer attached to a file comparison tool, such as a diff utility

External links

[http://portal.acm.org/citation.cfm?id=365673&dl;;=ACM&coll;=ACM Algorithm 268: ALGOL 60 reference language editor] W. M. McKeeman: Commun. ACM 8(11): 667-668 (1965)
NEATER2: a PL/I source statement reformatter Kenneth Conrow, Ronald G. Smith: Commun. ACM 13(11): 669-675 (1970)
SOAP - A Program which Documents and Edits ALGOL 60 Programs. R. S. Scowen, D. Allin, A. L. Hillman, M. Shimell: Comput. J. 14(2): 133-135 (1971)
PRETTYP.PAS Early pascal prettyprinter. Ledgard et al.: Pascal With Style (1979)
[http://www.freebsd.org/cgi/man.cgi?query=style&sektion;;=9 style(9)] FreeBSD style guidelines
Formatting your source code GNU style guidelines

"
Category:Articles with example C code Category:Source code Category:Text editor features



↩
↩
Ira Goldstein, "Pretty Printing : Converting List to Linear Structure", Artificial Intelligence Memo 279, Massachusetts Institute of Technology, February 1973. full text↩
Richard C. Waters, "Using the new common Lisp pretty printer", ACM SIGPLAN Lisp Pointers 5:2:27-34, April–June 1992. full text↩
Jargon File, s.v. grind↩



