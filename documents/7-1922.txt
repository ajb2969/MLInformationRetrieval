


Mason's gain formula




Mason's gain formula
'''Mason's gain formula''' (MGF) is a method for finding the
 transfer function of a linear signal-flow graph (SFG).  The formula was derived by Samuel Jefferson Mason,1 whom it is also named after. MGF is an alternate method to finding the transfer function algebraically by labeling each signal, writing down the equation for how that signal depends on other signals, and then solving the multiple equations for the output signal in terms of the input signal.  MGF provides a step by step method to obtain the transfer function from a SFG.  Often, MGF can be determined by inspection of the SFG.  The method can easily handle SFGs with many variables and loops including loops with inner loops.  MGF comes up often in  the context of control systems and digital filters because control systems and digital filters are often represented by SFGs.
Formula
The gain formula is as follows:






where:

Δ = the determinant of the graph.
yin = input-node variable
yout = output-node variable
G = complete gain between yin and yout
N = total number of forward paths between yin and yout
Gk = path gain of the kth forward path between yin and yout
Li = loop gain of each closed loop in the system
LiLj = product of the loop gains of any two non-touching loops (no common nodes)
LiLjLk = product of the loop gains of any three pairwise nontouching loops
Δk = the cofactor value of Δ for the kth forward path, with the loops touching the kth forward path removed. *

definitions2

Path: a continuous set of branches traversed in the direction that they indicate.
Forward path: A path from an input node to an output node in which no node is touched more than once.
Loop: A path that originates and ends on the same node in which no node is touched more than once.
Path gain: the product of the gains of all the branches in the path.
Loop gain: the product of the gains of all the branches in the loop.

Procedure
To use this technique,

Make a list of all forward paths, and their gains, and label these Gk.
Make a list of all the loops and their gains, and label these Li (for i loops). Make a list of all pairs of non-touching loops, and the products of their gains (LiLj). Make a list of all pairwise non-touching loops taken three at a time (LiLjLk), then four at a time, and so forth, until there are no more.
Compute the determinant Δ and cofactors Δk.
Apply the formula.

Examples
Circuit containing two-port
(Figure)
lrft|thumb|400px| Signal flow graph of a circuit containing a two port. The forward path from input to output is shown in a different color.

The transfer function from Vin to V2 is desired.
There is only one forward path:
:* Vin to V1 to I2 to V2 with gain 
 
 

There are three loops:
:* V1 to I1 to V1 with gain 
 
 

:* V2 to I2 to V2 with gain 
 
 

:* V1 to I2 to V2 to I1 to V1 with gain 
 
 



 
  note: L1 and L2 do not touch each other whereas L3 touches both of the other loops.


 
  note: the forward path touches all the loops so all that is left is 1.


 
  {{-}}
Digital IIR biquad filter
(Figure)
 The signal flow graph (SFG) for a digital infinite impulse response bi-quad filter. This SFG has three forward paths and two loops.

Digital filters are often diagramed as signal flow graphs.

There are two loops
 











 
  Note, the two loops touch so there is no term for their product.

There are three forward paths
 













All the forward paths touch all the loops so 
 
 







 
  {{-}}
Servo
(Figure)
 Angular position servo and signal flow graph. θC = desired angle command, θL = actual load angle, KP = position loop gain, VωC = velocity command, VωM = motor velocity sense voltage, KV = velocity loop gain, VIC = current command, VIM = current sense voltage, KC = current loop gain, VA = power amplifier output voltage, VM = effective voltage across the inductance, LM = motor inductance, IM = motor current, RM = motor resistance, RS = current sense resistance, KM = motor torque constant (Nm/amp), T = torque, M = moment of inertia of all rotating components α = angular acceleration, ω = angular velocity, β = mechanical damping, GM = motor back EMF constant, GT = tachometer conversion gain constant,. There is one forward path (shown in a different color) and six feedback loops. The drive shaft assumed to be stiff enough to not treat as a spring. Constants are shown in black and variables in purple.

The signal flow graph has six loops. They are:
:*
 
 

:*
 
 

:*
 
 

:*
 
 

:*
 
 

:*
 
 




There is one forward path:
:*
 
 

The forward path touches all the loops therefore the co-factor 
 
 

And the gain from input to output is 
 
 
 
  {{-}}
Equivalent matrix form
Mason's rule can be stated in a simple matrix form. Assume 
 
 
 
  is the transient matrix of the graph where 
 
 
 
  is the sum transmittance of branches from node m toward node n. Then, the gain from node m to node n of the graph is equal to 
 
 
 
 , where


 
 ,
and 
 
 
 
  is the identity matrix.
Mason's Rule is also particularly useful for deriving the z-domain transfer function of discrete networks that have inner feedback loops embedded within outer feedback loops (nested loops). If the discrete network can be drawn as a signal flow graph, then the application of Mason's Rule will give that network's z-domain H(z) transfer function.
Complexity and Computational Applications
Mason's Rule can grow factorially, because the enumeration of paths in a directed graph grows thusly. To see this consider the complete directed graph on 
 
 
 
  vertices, having an edge between every pair of vertices. There is a path form 
 
 
 
  to 
 
 
 
  for each of the 
 
 
 
  permutations of the intermediate vertices. Thus Gaussian elimination is more efficient in the general case.
Yet Mason's rule characterizes the transfer functions of interconnected systems in a way which is simultaneously algebraic and combinatorial, allowing for general statements and other computations in algebraic systems theory. While numerous inverses occur during Gaussian eliminiation, Mason's rule naturally collects these into a single quasi-inverse. General form is








Where as described above, 
 
 
 
  is a sum of cycle products, each of which typically falls into an ideal (for example, the strictly causal operators). Fractions of this form form a subring

 
  of the rational function field. This observation carries over to the noncommutative case,3 even though Mason's rule itself must then be replaced by Riegle's rule.
See also

Signal-flow graph
Riegle's rule

Notes
References




"
Category:Control theory










