   Quantum Fourier transform      Quantum Fourier transform   In quantum computing , the quantum Fourier transform is a linear transformation on quantum bits , and is the quantum analogue of the discrete Fourier transform . The quantum Fourier transform is a part of many quantum algorithms , notably Shor's algorithm for factoring and computing the discrete logarithm , the quantum phase estimation algorithm for estimating the eigenvalues of a unitary operator , and algorithms for the hidden subgroup problem .  The quantum Fourier transform can be performed efficiently on a quantum computer, with a particular decomposition into a product of simpler unitary matrices . Using a simple decomposition, the discrete Fourier transform can be implemented as a quantum circuit consisting of only    O   (   n  2   )       O   superscript  n  2     O(n^{2})    Hadamard gates and controlled phase shift gates , where   n   n   n   is the number of qubits. 1 This can be compared with the classical discrete Fourier transform, which takes    O   (   n   2  n    )       O    n   superscript  2  n      O(n2^{n})   gates (where   n   n   n   is the number of bits), which is exponentially more than    O   (   n  2   )       O   superscript  n  2     O(n^{2})   . However, the quantum Fourier transform acts on a quantum state, whereas the classical Fourier transform acts on a vector, so not every task that uses the classical Fourier transform can take advantage of this exponential speedup.  The best quantum Fourier transform algorithms known today require only    O   (   n   log  n    )       O    n    n      O(n\log n)   gates to achieve an efficient approximation. 2  Definition  The quantum Fourier transform is the classical discrete Fourier transform applied to the vector of amplitudes of a quantum state. The classical (unitary) Fourier transform acts on a vector in    ℂ  N     superscript  ℂ  N    \mathbb{C}^{N}   , ( x 0 , ..., x N −1 ) and maps it to the vector ( y 0 , ..., y N −1 ) according to the formula:       y  k   =    1   N      ∑   j  =  0    N  -  1      x  j    ω   j  k            subscript  y  k       1    N      superscript   subscript     j  0      N  1       subscript  x  j    superscript  ω    j  k         y_{k}=\frac{1}{\sqrt{N}}\sum_{j=0}^{N-1}x_{j}\omega^{jk}     where    ω  =   e    2  π  i   N        ω   superscript  e      2  π  i   N      \omega=e^{\frac{2\pi i}{N}}   is a primitive N th  root of unity .  Similarly, the quantum Fourier transform acts on a quantum state     ∑   i  =  0    N  -  1      x  i    |  i  ⟩        superscript   subscript     i  0      N  1       subscript  x  i    ket  i      \sum_{i=0}^{N-1}x_{i}|i\rangle   and maps it to a quantum state     ∑   i  =  0    N  -  1      y  i    |  i  ⟩        superscript   subscript     i  0      N  1       subscript  y  i    ket  i      \sum_{i=0}^{N-1}y_{i}|i\rangle   according to the formula:        y  k   =    1   N      ∑   j  =  0    N  -  1      x  j    ω   j  k        .       subscript  y  k       1    N      superscript   subscript     j  0      N  1       subscript  x  j    superscript  ω    j  k         y_{k}=\frac{1}{\sqrt{N}}\sum_{j=0}^{N-1}x_{j}\omega^{jk}.   This can also be expressed as the map        |  j  ⟩   ↦    1   N      ∑   k  =  0    N  -  1      ω   j  k     |  k  ⟩       .     maps-to   ket  j       1    N      superscript   subscript     k  0      N  1       superscript  ω    j  k     ket  k        |j\rangle\mapsto\frac{1}{\sqrt{N}}\sum_{k=0}^{N-1}\omega^{jk}|k\rangle.     Equivalently, the quantum Fourier transform can be viewed as a unitary matrix ( quantum gate , similar to a logic gate for classical computers) acting on quantum state vectors, where the unitary matrix    F  N     subscript  F  N    F_{N}   is given by        F  N   =    1   N     [     1    1    1    1    ⋯    1      1    ω     ω  2      ω  3     ⋯     ω   N  -  1        1     ω  2      ω  4      ω  6     ⋯     ω   2   (   N  -  1   )         1     ω  3      ω  6      ω  9     ⋯     ω   3   (   N  -  1   )         ⋮    ⋮    ⋮    ⋮       ⋮      1     ω   N  -  1       ω   2   (   N  -  1   )        ω   3   (   N  -  1   )       ⋯     ω    (   N  -  1   )    (   N  -  1   )        ]     .       subscript  F  N       1    N      1  1  1  1  normal-⋯  1    1  ω   superscript  ω  2    superscript  ω  3   normal-⋯   superscript  ω    N  1      1   superscript  ω  2    superscript  ω  4    superscript  ω  6   normal-⋯   superscript  ω    2    N  1       1   superscript  ω  3    superscript  ω  6    superscript  ω  9   normal-⋯   superscript  ω    3    N  1       normal-⋮  normal-⋮  normal-⋮  normal-⋮  absent  normal-⋮    1   superscript  ω    N  1     superscript  ω    2    N  1      superscript  ω    3    N  1     normal-⋯   superscript  ω      N  1     N  1          F_{N}=\frac{1}{\sqrt{N}}\begin{bmatrix}1&1&1&1&\cdots&1\\
 1&\omega&\omega^{2}&\omega^{3}&\cdots&\omega^{N-1}\\
 1&\omega^{2}&\omega^{4}&\omega^{6}&\cdots&\omega^{2(N-1)}\\
 1&\omega^{3}&\omega^{6}&\omega^{9}&\cdots&\omega^{3(N-1)}\\
 \vdots&\vdots&\vdots&\vdots&&\vdots\\
 1&\omega^{N-1}&\omega^{2(N-1)}&\omega^{3(N-1)}&\cdots&\omega^{(N-1)(N-1)}\end{%
 bmatrix}.     Properties  Unitarity  Most of the properties of the quantum Fourier transform follow from the fact that it is a unitary transformation . This can be checked by performing matrix multiplication and ensuring that the relation     F   F  †    =    F  †   F   =  I          F   superscript  F  normal-†       superscript  F  normal-†   F        I     FF^{\dagger}=F^{\dagger}F=I   holds, where    F  †     superscript  F  normal-†    F^{\dagger}   is the Hermitian adjoint of   F   F   F   . Alternately, one can check that vectors of norm 1 get mapped to vectors of norm 1.  From the unitary property it follows that the inverse of the quantum Fourier transform is the Hermitian adjoint of the Fourier matrix, thus     F   -  1    =   F  †        superscript  F    1     superscript  F  normal-†     F^{-1}=F^{\dagger}   . Since there is an efficient quantum circuit implementing the quantum Fourier transform, the circuit can be run in reverse to perform the inverse quantum Fourier transform. Thus both transforms can be efficiently performed on a quantum computer.  Circuit implementation  (Figure)  Quantum circuit representation of the quantum Fourier transform   The quantum Fourier transform can be approximately implemented for any N ; however, the implementation for the case where N is a power of 2 is much simpler. Suppose N = 2 n . We have the orthonormal basis consisting of the vectors        |  0  ⟩   ,  …  ,   |    2  n   -  1   ⟩    .      ket  0   normal-…   ket     superscript  2  n   1      |0\rangle,\ldots,|2^{n}-1\rangle.     The basis states enumerate all the possible states of the qubits:       |  x  ⟩   =   |    x  1    x  2   …   x  n    ⟩   =    |   x  1   ⟩   ⊗   |   x  2   ⟩   ⊗  ⋯  ⊗   |   x  n   ⟩           ket  x    ket     subscript  x  1    subscript  x  2   normal-…   subscript  x  n           tensor-product   ket   subscript  x  1     ket   subscript  x  2    normal-⋯   ket   subscript  x  n        |x\rangle=|x_{1}x_{2}\ldots x_{n}\rangle=|x_{1}\rangle\otimes|x_{2}\rangle%
 \otimes\cdots\otimes|x_{n}\rangle   where, with tensor product notation   ⊗   tensor-product   \otimes   ,    |   x  j   ⟩     ket   subscript  x  j     |x_{j}\rangle   indicates that qubit   j   j   j   is in state    x  j     subscript  x  j    x_{j}   , with    x  j     subscript  x  j    x_{j}   either 0 or 1. By convention, the basis state index   x   x   x   orders the possible states of the qubits lexicographically, i.e., by converting from binary to decimal in this way:      x  =   x  1    2   n  -  1    +   x  2    2   n  -  2    +  ⋯  +   x  n    2  0   .     fragments  x    subscript  x  1    superscript  2    n  1      subscript  x  2    superscript  2    n  2     normal-⋯    subscript  x  n    superscript  2  0   normal-.     x=x_{1}2^{n-1}+x_{2}2^{n-2}+\cdots+x_{n}2^{0}.\quad     It is also useful to borrow fractional binary notation:        [   0.   x  1   …   x  m    ]   =    ∑   k  =  1   m     x  k    2   -  k       .       delimited-[]    0.   subscript  x  1   normal-…   subscript  x  m       superscript   subscript     k  1    m      subscript  x  k    superscript  2    k        [0.x_{1}\ldots x_{m}]=\sum_{k=1}^{m}x_{k}2^{-k}.   For instance,     [   0.   x  1    ]   =    x  1   2        delimited-[]    0.   subscript  x  1        subscript  x  1   2     [0.x_{1}]=\frac{x_{1}}{2}   and      [   0.   x  1    x  2    ]   =     x  1   2   +    x  2    2  2      .       delimited-[]    0.   subscript  x  1    subscript  x  2          subscript  x  1   2      subscript  x  2    superscript  2  2       [0.x_{1}x_{2}]=\frac{x_{1}}{2}+\frac{x_{2}}{2^{2}}.     With this notation, the action of the quantum Fourier transform can be expressed as:        |    x  1    x  2   …   x  n    ⟩   ↦      1   N      (    |  0  ⟩   +    e   2  π   i    [   0.   x  n    ]      |  1  ⟩     )    ⊗   (    |  0  ⟩   +    e   2  π   i    [   0.   x   n  -  1     x  n    ]      |  1  ⟩     )   ⊗  ⋯  ⊗   (    |  0  ⟩   +    e   2  π   i    [   0.   x  1    x  2   …   x  n    ]      |  1  ⟩     )     ,     maps-to   ket     subscript  x  1    subscript  x  2   normal-…   subscript  x  n      tensor-product      1    N       ket  0      superscript  e    2  π  i   delimited-[]    0.   subscript  x  n        ket  1         ket  0      superscript  e    2  π  i   delimited-[]    0.   subscript  x    n  1     subscript  x  n        ket  1     normal-⋯     ket  0      superscript  e    2  π  i   delimited-[]    0.   subscript  x  1    subscript  x  2   normal-…   subscript  x  n        ket  1        |x_{1}x_{2}\ldots x_{n}\rangle\mapsto\frac{1}{\sqrt{N}}\ \left(|0\rangle+e^{2%
 \pi i\,[0.x_{n}]}|1\rangle\right)\otimes\left(|0\rangle+e^{2\pi i\,[0.x_{n-1}x%
 _{n}]}|1\rangle\right)\otimes\cdots\otimes\left(|0\rangle+e^{2\pi i\,[0.x_{1}x%
 _{2}\ldots x_{n}]}|1\rangle\right),   where the output qubit 1 is in a superposition of state    |  0  ⟩     ket  0    |0\rangle   and     e   2  π   i    [   0.   x  n    ]      |  1  ⟩        superscript  e    2  π  i   delimited-[]    0.   subscript  x  n        ket  1     e^{2\pi i\,[0.x_{n}]}|1\rangle   , and so on for the other qubits.  In other words, the discrete Fourier transform, an operation on n -qubits, can be factored into the tensor product of n single-qubit operations, suggesting it is easily represented as a quantum circuit . In fact, each of those single-qubit operations can be implemented efficiently using a Hadamard gate and controlled  phase gates . The first term requires one Hadamard gate, the next one requires a Hadamard gate and a controlled phase gate, and each following term requires an additional controlled phase gate. Summing up the number of gates gives     1  +  2  +  ⋯  +  n   =    n   (   n  +  1   )    /  2   =   O   (   n  2   )            1  2  normal-⋯  n       n    n  1    2          O   superscript  n  2       1+2+\cdots+n=n(n+1)/2=O(n^{2})   gates, which is polynomial in the number of qubits.  Example  Consider the quantum Fourier transform on 3 qubits. It is the following transformation:        |  j  ⟩   ↦    1    2  3       ∑   k  =  0     2  3   -  1      ω   j  k     |  k  ⟩       ,     maps-to   ket  j       1     superscript  2  3       superscript   subscript     k  0       superscript  2  3   1       superscript  ω    j  k     ket  k        |j\rangle\mapsto\frac{1}{\sqrt{2^{3}}}\sum_{k=0}^{2^{3}-1}\omega^{jk}|k\rangle,   where   ω   ω   \omega   is a primitive eighth root of unity satisfying     ω  8   =    (   e    2  π  i   8    )   8   =  1         superscript  ω  8    superscript   superscript  e      2  π  i   8    8        1     \omega^{8}=\left(e^{\frac{2\pi i}{8}}\right)^{8}=1   (since    N  =   2  3   =  8        N   superscript  2  3        8     N=2^{3}=8   ).  The matrix representing this transformation on 3 qubits is        F   2  3    =    1    2  3      [     1    1    1    1    1    1    1    1      1    ω     ω  2      ω  3      ω  4      ω  5      ω  6      ω  7       1     ω  2      ω  4      ω  6      ω  8      ω  10      ω  12      ω  14       1     ω  3      ω  6      ω  9      ω  12      ω  15      ω  18      ω  21       1     ω  4      ω  8      ω  12      ω  16      ω  20      ω  24      ω  28       1     ω  5      ω  10      ω  15      ω  20      ω  25      ω  30      ω  35       1     ω  6      ω  12      ω  18      ω  24      ω  30      ω  36      ω  42       1     ω  7      ω  14      ω  21      ω  28      ω  35      ω  42      ω  49      ]    =    1    2  3      [     1    1    1    1    1    1    1    1      1    ω     ω  2      ω  3      ω  4      ω  5      ω  6      ω  7       1     ω  2      ω  4      ω  6     1     ω  2      ω  4      ω  6       1     ω  3      ω  6     ω     ω  4      ω  7      ω  2      ω  5       1     ω  4     1     ω  4     1     ω  4     1     ω  4       1     ω  5      ω  2      ω  7      ω  4     ω     ω  6      ω  3       1     ω  6      ω  4      ω  2     1     ω  6      ω  4      ω  2       1     ω  7      ω  6      ω  5      ω  4      ω  3      ω  2     ω     ]     .         subscript  F   superscript  2  3        1     superscript  2  3       1  1  1  1  1  1  1  1    1  ω   superscript  ω  2    superscript  ω  3    superscript  ω  4    superscript  ω  5    superscript  ω  6    superscript  ω  7     1   superscript  ω  2    superscript  ω  4    superscript  ω  6    superscript  ω  8    superscript  ω  10    superscript  ω  12    superscript  ω  14     1   superscript  ω  3    superscript  ω  6    superscript  ω  9    superscript  ω  12    superscript  ω  15    superscript  ω  18    superscript  ω  21     1   superscript  ω  4    superscript  ω  8    superscript  ω  12    superscript  ω  16    superscript  ω  20    superscript  ω  24    superscript  ω  28     1   superscript  ω  5    superscript  ω  10    superscript  ω  15    superscript  ω  20    superscript  ω  25    superscript  ω  30    superscript  ω  35     1   superscript  ω  6    superscript  ω  12    superscript  ω  18    superscript  ω  24    superscript  ω  30    superscript  ω  36    superscript  ω  42     1   superscript  ω  7    superscript  ω  14    superscript  ω  21    superscript  ω  28    superscript  ω  35    superscript  ω  42    superscript  ω  49               1     superscript  2  3       1  1  1  1  1  1  1  1    1  ω   superscript  ω  2    superscript  ω  3    superscript  ω  4    superscript  ω  5    superscript  ω  6    superscript  ω  7     1   superscript  ω  2    superscript  ω  4    superscript  ω  6   1   superscript  ω  2    superscript  ω  4    superscript  ω  6     1   superscript  ω  3    superscript  ω  6   ω   superscript  ω  4    superscript  ω  7    superscript  ω  2    superscript  ω  5     1   superscript  ω  4   1   superscript  ω  4   1   superscript  ω  4   1   superscript  ω  4     1   superscript  ω  5    superscript  ω  2    superscript  ω  7    superscript  ω  4   ω   superscript  ω  6    superscript  ω  3     1   superscript  ω  6    superscript  ω  4    superscript  ω  2   1   superscript  ω  6    superscript  ω  4    superscript  ω  2     1   superscript  ω  7    superscript  ω  6    superscript  ω  5    superscript  ω  4    superscript  ω  3    superscript  ω  2   ω        F_{2^{3}}=\frac{1}{\sqrt{2^{3}}}\begin{bmatrix}1&1&1&1&1&1&1&1\\
 1&\omega&\omega^{2}&\omega^{3}&\omega^{4}&\omega^{5}&\omega^{6}&\omega^{7}\\
 1&\omega^{2}&\omega^{4}&\omega^{6}&\omega^{8}&\omega^{10}&\omega^{12}&\omega^{%
 14}\\
 1&\omega^{3}&\omega^{6}&\omega^{9}&\omega^{12}&\omega^{15}&\omega^{18}&\omega^%
 {21}\\
 1&\omega^{4}&\omega^{8}&\omega^{12}&\omega^{16}&\omega^{20}&\omega^{24}&\omega%
 ^{28}\\
 1&\omega^{5}&\omega^{10}&\omega^{15}&\omega^{20}&\omega^{25}&\omega^{30}&%
 \omega^{35}\\
 1&\omega^{6}&\omega^{12}&\omega^{18}&\omega^{24}&\omega^{30}&\omega^{36}&%
 \omega^{42}\\
 1&\omega^{7}&\omega^{14}&\omega^{21}&\omega^{28}&\omega^{35}&\omega^{42}&%
 \omega^{49}\\
 \end{bmatrix}=\frac{1}{\sqrt{2^{3}}}\begin{bmatrix}1&1&1&1&1&1&1&1\\
 1&\omega&\omega^{2}&\omega^{3}&\omega^{4}&\omega^{5}&\omega^{6}&\omega^{7}\\
 1&\omega^{2}&\omega^{4}&\omega^{6}&1&\omega^{2}&\omega^{4}&\omega^{6}\\
 1&\omega^{3}&\omega^{6}&\omega&\omega^{4}&\omega^{7}&\omega^{2}&\omega^{5}\\
 1&\omega^{4}&1&\omega^{4}&1&\omega^{4}&1&\omega^{4}\\
 1&\omega^{5}&\omega^{2}&\omega^{7}&\omega^{4}&\omega&\omega^{6}&\omega^{3}\\
 1&\omega^{6}&\omega^{4}&\omega^{2}&1&\omega^{6}&\omega^{4}&\omega^{2}\\
 1&\omega^{7}&\omega^{6}&\omega^{5}&\omega^{4}&\omega^{3}&\omega^{2}&\omega\\
 \end{bmatrix}.     The 3-qubit quantum Fourier transform is the following operation:        |    x  1   ,   x  2   ,   x  3    ⟩   ↦      1    2  3       (    |  0  ⟩   +    e   2  π   i    [   0.   x  3    ]      |  1  ⟩     )    ⊗   (    |  0  ⟩   +    e   2  π   i    [   0.   x  2    x  3    ]      |  1  ⟩     )   ⊗   (    |  0  ⟩   +    e   2  π   i    [   0.   x  1    x  2    x  3    ]      |  1  ⟩     )     .     maps-to   ket    subscript  x  1    subscript  x  2    subscript  x  3      tensor-product      1     superscript  2  3        ket  0      superscript  e    2  π  i   delimited-[]    0.   subscript  x  3        ket  1         ket  0      superscript  e    2  π  i   delimited-[]    0.   subscript  x  2    subscript  x  3        ket  1        ket  0      superscript  e    2  π  i   delimited-[]    0.   subscript  x  1    subscript  x  2    subscript  x  3        ket  1        |x_{1},x_{2},x_{3}\rangle\mapsto\frac{1}{\sqrt{2^{3}}}\ \left(|0\rangle+e^{2%
 \pi i\,[0.x_{3}]}|1\rangle\right)\otimes\left(|0\rangle+e^{2\pi i\,[0.x_{2}x_{%
 3}]}|1\rangle\right)\otimes\left(|0\rangle+e^{2\pi i\,[0.x_{1}x_{2}x_{3}]}|1%
 \rangle\right).     This quantum circuit implements the quantum Fourier transform on the quantum state    |    x  1   ,   x  2   ,   x  3    ⟩     ket    subscript  x  1    subscript  x  2    subscript  x  3      |x_{1},x_{2},x_{3}\rangle   .  (Figure)  Quantum Fourier transform on three qubits.svg   The quantum gates used in the circuit above are the Hadamard gate and the controlled  phase gate     R  θ     subscript  R  θ    R_{\theta}   .  As calculated above, the number of gates used is     n   (   n  +  1   )    /  2        n    n  1    2    n(n+1)/2   which is equal to 6, for n = 3.  References     K. R. Parthasarathy , Lectures on Quantum Computation and Quantum Error Correcting Codes (Indian Statistical Institute, Delhi Center, June 2001)  John Preskill , Lecture Notes for Physics 229: Quantum Information and Computation (CIT, September 1998)   External links   Wolfram Demonstration Project: Quantum Circuit Implementing Grover's Search Algorithm   "  Category:Transforms  Category:Quantum algorithms     ↩  L. Hales, S. Hallgren, An improved quantum Fourier transform algorithm and applications, Proceedings of the 41st Annual Symposium on Foundations of Computer Science, p. 515, November 12–14, 2000 ↩     