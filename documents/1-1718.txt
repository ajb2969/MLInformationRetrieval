


Ford–Fulkerson algorithm




Ford–Fulkerson algorithm
The '''Ford–Fulkerson method''' or '''Ford–Fulkerson algorithm''' ('''FFA''') is an [[algorithm]] that co
 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   


mputes the maximum flow in a flow network. It is called a "method" instead of an "algorithm" as the approach to finding augmenting paths in a residual graph is not fully specificied1 or it is specified in several implementations with different running times.2 It was published in 1956 by L. R. Ford, Jr. and D. R. Fulkerson.3 The name "Ford–Fulkerson" is often also used for the Edmonds–Karp algorithm, which is a specialization of Ford–Fulkerson.
The idea behind the algorithm is as follows: as long as there is a path from the source (start node) to the sink (end node), with available capacity on all edges in the path, we send flow along one of the paths. Then we find another path, and so on. A path with available capacity is called an augmenting path.
Algorithm
Let 
 
 
 
  be a graph, and for each edge from 
 
 
 
  to 
 
 
 
 , let 
 
 
 
  be the capacity and 
 
 
 
  be the flow. We want to find the maximum flow from the source 
 
 
 
  to the sink 
 
 
 
 . After every step in the algorithm the following is maintained:






Capacity constraints:





The flow along an edge can not exceed its capacity.



Skew symmetry:





The net flow from 
 
 
 
  to 
 
 
 
  must be the opposite of the net flow from 
 
 
 
  to 
 
 
 
  (see example).



Flow conservation:





That is, unless 
 
 
 
  is 
 
 
 
  or 
 
 
 
 . The net flow to a node is zero, except for the source, which "produces" flow, and the sink, which "consumes" flow.



Value(f):





That is, the flow leaving from 
 
 
 
  must be equal to the flow arriving at 
 
 
 
 .







This means that the flow through the network is a legal flow after each round in the algorithm. We define the residual network

 
  to be the network with capacity 
 
 
 
  and no flow. Notice that it can happen that a flow from 
 
 
 
  to 
 
 
 
  is allowed in the residual network, though disallowed in the original network: if 
 
 
 
  and 
 
 
 
  then 
 
 
 
 .
Algorithm Ford–Fulkerson

Inputs Given a Network 
 
 
 
  with flow capacity 
 
 
 
 , a source node 
 
 
 
 , and a sink node 
 
 

Output Compute a flow 
 
 
 
  from 
 
 
 
  to 
 
 
 
  of maximum value
 


 
  for all edges 
 
 

While there is a path 
 
 
 
  from 
 
 
 
  to 
 
 
 
  in 
 
 
 
 , such that 
 
 
 
  for all edges 
 
 
 
 :
 
Find 
 
 

For each edge 
 
 



 
  (Send flow along the path)


 
  (The flow might be "returned" later)





The path in step 2 can be found with for example a breadth-first search or a depth-first search in 
 
 
 
 . If you use the former, the algorithm is called Edmonds–Karp.
When no more paths in step 2 can be found, 
 
 
 
  will not be able to reach 
 
 
 
  in the residual network. If 
 
 
 
  is the set of nodes reachable by 
 
 
 
  in the residual network, then the total capacity in the original network of edges from 
 
 
 
  to the remainder of 
 
 
 
  is on the one hand equal to the total flow we found from 
 
 
 
  to 
 
 
 
 , and on the other hand serves as an upper bound for all such flows. This proves that the flow we found is maximal. See also Max-flow Min-cut theorem.
If the graph 
 
 
 
  has multiple sources and sinks, we act as follows: Suppose that 
 
 
 
  and 
 
 
 
 . Add a new source 
 
 
 
  with an edge 
 
 
 
  from 
 
 
 
  to every node 
 
 
 
 , with capacity 
 
 
 
 . And add a new sink 
 
 
 
  with an edge 
 
 
 
  from every node 
 
 
 
  to 
 
 
 
 , with capacity 
 
 
 
 . Then apply the Ford–Fulkerson algorithm.
Also, if a node 
 
 
 
  has capacity constraint 
 
 
 
 , we replace this node with two nodes 
 
 
 
 , and an edge 
 
 
 
 , with capacity 
 
 
 
 . Then apply the Ford–Fulkerson algorithm.
Complexity
By adding the flow augmenting path to the flow already established in the graph, the maximum flow will be reached when no more flow augmenting paths can be found in the graph. However, there is no certainty that this situation will ever be reached, so the best that can be guaranteed is that the answer will be correct if the algorithm terminates. In the case that the algorithm runs forever, the flow might not even converge towards the maximum flow. However, this situation only occurs with irrational flow values. When the capacities are integers, the runtime of Ford–Fulkerson is bounded by 
 
 
 
  (see big O notation), where 
 
 
 
  is the number of edges in the graph and 
 
 
 
  is the maximum flow in the graph. This is because each augmenting path can be found in 
 
 
 
  time and increases the flow by an integer amount of at least 
 
 
 
 .
A variation of the Ford–Fulkerson algorithm with guaranteed termination and a runtime independent of the maximum flow value is the Edmonds–Karp algorithm, which runs in 
 
 
 
  time.
Integral example
The following example shows the first steps of Ford–Fulkerson in a flow network with 4 nodes, source 
 
 
 
  and sink 
 
 
 
 . This example shows the worst-case behaviour of the algorithm. In each step, only a flow of 
 
 
 
  is sent across the network. If breadth-first-search were used instead, only two steps would be needed.




Path

Capacity

Resulting flow network





Initial flow network
(Figure)
Ford-Fulkerson example 0.svg















(Figure)
Ford-Fulkerson example 1.svg















(Figure)
Ford-Fulkerson example 2.svg




After 1998 more steps …



Final flow network
(Figure)
Ford-Fulkerson example final.svg




Notice how flow is "pushed back" from 
 
 
 
  to 
 
 
 
  when finding the path 
 
 
 
 .
Non-terminating example
(Figure)
Ford-Fulkerson forever.svg

Consider the flow network shown on the right, with source 
 
 
 
 , sink 
 
 
 
 , capacities of edges 
 
 
 
 , 
 
 
 
  and 
 
 
 
  respectively 
 
 
 
 , 
 
 
 
  and 
 
 
 
  and the capacity of all other edges some integer 
 
 
 
 . The constant 
 
 
 
  was chosen so, that 
 
 
 
 . We use augmenting paths according to the following table, where 
 
 
 
 , 
 
 
 
  and 
 
 
 
 .




Step

Augmenting path

Sent flow

Residual capacities



















0









1















2















3















4















5















Note that after step 1 as well as after step 5, the residual capacities of edges 
 
 
 
 , 
 
 
 
  and 
 
 
 
  are in the form 
 
 
 
 , 
 
 
 
  and 
 
 
 
 , respectively, for some 
 
 
 
 . This means that we can use augmenting paths 
 
 
 
 , 
 
 
 
 , 
 
 
 
  and 
 
 
 
  infinitely many times and residual capacities of these edges will always be in the same form. Total flow in the network after step 5 is 
 
 
 
 . If we continue to use augmenting paths as above, the total flow converges to 
 
 
 
 , while the maximum flow is 
 
 
 
 . In this case, the algorithm never terminates and the flow doesn't even converge to the maximum flow.4 
Python implementation
class Edge(object):
     def __init__(self, u, v, w):
         self.source = u
         self.sink = v  
         self.capacity = w
     def __repr__(self):
         return "%s->%s:%s" % (self.source, self.sink, self.capacity)
 
 class FlowNetwork(object):
     def __init__(self):
         self.adj = {}
         self.flow = {}
  
     def add_vertex(self, vertex):
         self.adj[vertex] = []
  
     def get_edges(self, v):
         return self.adj[v]
  
     def add_edge(self, u, v, w=0):
         if u == v:
             raise ValueError("u == v")
         edge = Edge(u,v,w)
         redge = Edge(v,u,0)
         edge.redge = redge
         redge.redge = edge
         self.adj[u].append(edge)
         self.adj[v].append(redge)
         self.flow[edge] = 0
         self.flow[redge] = 0
  
     def find_path(self, source, sink, path):
         if source == sink:
             return path
         for edge in self.get_edges(source):
             residual = edge.capacity - self.flow[edge]
             if residual > 0 and edge not in path:
                 result = self.find_path( edge.sink, sink, path + [edge]) 
                 if result != None:
                     return result
  
     def max_flow(self, source, sink):
         path = self.find_path(source, sink, [])
         while path != None:
             residuals = [edge.capacity - self.flow[edge] for edge in path]
             flow = min(residuals)
             for edge in path:
                 self.flow[edge] += flow
                 self.flow[edge.redge] -= flow
             path = self.find_path(source, sink, [])
         return sum(self.flow[edge] for edge in self.get_edges(source))
Usage example
For the example flow network in maximum flow problem we do the following:
>>> g = FlowNetwork()
 >>> [g.add_vertex(v) for v in "sopqrt"]
 [None, None, None, None, None, None]
 >>>
 >>> g.add_edge('s','o',3)
 >>> g.add_edge('s','p',3)
 >>> g.add_edge('o','p',2)
 >>> g.add_edge('o','q',3)
 >>> g.add_edge('p','r',2)
 >>> g.add_edge('r','t',3)
 >>> g.add_edge('q','r',4)
 >>> g.add_edge('q','t',2)
 >>> print (g.max_flow('s','t'))
 5
Notes
References





See also

Approximate max-flow min-cut theorem

External links

[http://community.topcoder.com/tc?module=Static&d1;;=tutorials&d2;=maxFlow A tutorial explaining the Ford–Flukerson method to solve the max-flow problem]
Another Java animation
Java Web Start application

"
Category:Network flow Category:Articles with example pseudocode Category:Graph algorithms










