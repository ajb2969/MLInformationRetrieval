


Conjugate gradient method




Conjugate gradient method

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



 In mathematics, the conjugate gradient method is an algorithm for the numerical solution of particular systems of linear equations, namely those whose matrix is symmetric and positive-definite. The conjugate gradient method is often implemented as an iterative algorithm, applicable to sparse systems that are too large to be handled by a direct implementation or other direct methods such as the Cholesky decomposition. Large sparse systems often arise when numerically solving partial differential equations or optimization problems.
The conjugate gradient method can also be used to solve unconstrained optimization problems such as energy minimization. It was mainly developed by Magnus Hestenes and Eduard Stiefel.1
The biconjugate gradient method provides a generalization to non-symmetric matrices. Various nonlinear conjugate gradient methods seek minima of nonlinear equations.
Description of the method
Suppose we want to solve the following system of linear equations

Ax = b


for the vector x where the known n-by-n matrix A is symmetric (i.e., AT = A), positive definite (i.e. xTAx > 0 for all non-zero vectors x in Rn), and real, and b is known as well.
We denote the unique solution of this system by 
 
 
 
 .
The conjugate gradient method as a direct method
We say that two non-zero vectors u and v are conjugate (with respect to A) if



Since A is symmetric and positive definite, the left-hand side defines an inner product



Two vectors are conjugate if and only if they are orthogonal with respect to this inner product. Being conjugate is a symmetric relation: if u is conjugate to v, then v is conjugate to u.
Suppose that 
 
 
 
  is a set of n mutually conjugate directions. Then 
 
 
 
  is a basis of 
 
 
 
 , so within 
 
 
 
  we can expand the solution 
 
 
 
  of 
 
 
 
 :



and we see that



For any 
 
 
 
 ,



(because 
 
 
 
  are mutually conjugate)



This result is perhaps most transparent by considering the inner product defined above.
This gives the following method for solving the equation Ax = b: find a sequence of n conjugate directions, and then compute the coefficients 
 
 
 
 .
The conjugate gradient method as an iterative method
If we choose the conjugate vectors pk carefully, then we may not need all of them to obtain a good approximation to the solution 
 
 
 
 . So, we want to regard the conjugate gradient method as an iterative method. This also allows us to approximately solve systems where n is so large that the direct method would take too much time.
We denote the initial guess for 
 
 
 
  by x0. We can assume without loss of generality that x0 = 0 (otherwise, consider the system Az = b − Ax0 instead). Starting with x0 we search for the solution and in each iteration we need a metric to tell us whether we are closer to the solution 
 
 
 
  (that is unknown to us). This metric comes from the fact that the solution 
 
 
 
  is also the unique minimizer of the following quadratic function; so if f(x) becomes smaller in an iteration it means that we are closer to 
 
 
 
 .



This suggests taking the first basis vector p0 to be the negative of the gradient of f at x = x0. The gradient of f equals Ax−b. Starting with a "guessed solution" x0 (we can always guess that 
 
 
 
  is 0 and set x0 to 0 if we have no reason to guess for anything else), this means we take p0 = b−Ax0. The other vectors in the basis will be conjugate to the gradient, hence the name conjugate gradient method.
Let rk be the residual at the kth step:


 
  Note that rk is the negative gradient of f at x = xk, so the gradient descent method would be to move in the direction rk. Here, we insist that the directions pk be conjugate to each other. We also require that the next search direction be built out of the current residue and all previous search directions, which is reasonable enough in practice.
The conjugation constraint is an orthonormal-type constraint and hence the algorithm bears resemblance to Gram-Schmidt orthonormalization.
This gives the following expression:


 
  (see the picture at the top of the article for the effect of the conjugacy constraint on convergence). Following this direction, the next optimal location is given by


 
  with


 
  where the last equality holds because pk and xk-1 are conjugate.
The resulting algorithm
The above algorithm gives the most straightforward explanation of the conjugate gradient method. Seemingly, the algorithm as stated requires storage of all previous searching directions and residue vectors, as well as many matrix-vector multiplications, and thus can be computationally expensive. However, a closer analysis of the algorithm shows that rk+1 is conjugate to pi for all i k'', pk, and xk are needed to construct rk+1, pk+1, and xk+1. Furthermore, only one matrix-vector multiplication is needed in each iteration.
The algorithm is detailed below for solving Ax = b where A is a real, symmetric, positive-definite matrix. The input vector x0 can be an approximate initial solution or 0. It is a different formulation of the exact procedure described above.



This is the most commonly used algorithm. The same formula for 
 
 
 
  is also used in the Fletcher–Reeves nonlinear conjugate gradient method.
Computation of alpha and beta
In the algorithm, 
 
 
 
  is chosen such that 
 
 
 
  is orthogonal to 
 
 
 
 . The denominator is simplified from



since 
 
 
 
 . The 
 
 
 
  is chosen such that 
 
 
 
  is conjugated to 
 
 
 
 . Initially, 
 
 
 
  is



using 
 
 
 
  and equivalently 
 
 
 
 , the numerator of 
 
 
 
  is rewritten as



because 
 
 
 
  and 
 
 
 
  are orthogonal by design. The denominator is rewritten as



using that the search directions 
 
 
 
  are conjugated and again that the residuals are orthogonal. This gives the 
 
 
 
  in the algorithm after cancelling 
 
 
 
 .
Example code in MATLAB
function [x] = conjgrad(A,b,x)
     r=b-A*x;
     p=r;
     rsold=r*r';
 
     for i=1:1e6
         Ap=A*p;
         alpha=rsold/(p*Ap');
         x=x+alpha*p;
         r=r-alpha*Ap;
         rsnew=r*r';
         if sqrt(rsnew)<1e-10
               break;
         end
         p=r+rsnew/rsold*p;
         rsold=rsnew;
     end
 end
Numerical example
To illustrate the conjugate gradient method, we will complete a simple example.
Considering the linear system Ax = b given by






4 & 1 \\ 1 & 3 \end{bmatrix}\begin{bmatrix} x_1 \\ x_2 \end{bmatrix} = \begin{bmatrix} 1 \\ 2 \end{bmatrix} ,
we will perform two steps of the conjugate gradient method beginning with the initial guess






\begin{bmatrix} 2 \\ 1 \end{bmatrix} 
in order to find an approximate solution to the system.
Solution
For reference, the exact solution is






\mathbf{x} = \begin{bmatrix} \frac{1}{11} \\\\ \frac{7}{11} \end{bmatrix}  Our first step is to calculate the residual vector r0 associated with x0. This residual is computed from the formula r0 = b - Ax0, and in our case is equal to






\mathbf{r}_0 = \begin{bmatrix} 1 \\ 2 \end{bmatrix} - \begin{bmatrix} 4 & 1 \\ 1 & 3 \end{bmatrix} \begin{bmatrix} 2 \\ 1 \end{bmatrix} = \begin{bmatrix}-8 \\ -3 \end{bmatrix}.

Since this is the first iteration, we will use the residual vector r0 as our initial search direction p0; the method of selecting pk will change in further iterations.
We now compute the scalar α0 using the relationship






\alpha_0 = \frac{\mathbf{r}_0^\mathrm{T} \mathbf{r}_0}{\mathbf{p}_0^\mathrm{T} \mathbf{A p}_0} = \frac{\begin{bmatrix} -8 & -3 \end{bmatrix} \begin{bmatrix} -8 \\ -3 \end{bmatrix}}{ \begin{bmatrix} -8 & -3 \end{bmatrix} \begin{bmatrix} 4 & 1 \\ 1 & 3 \end{bmatrix} \begin{bmatrix} -8 \\ -3 \end{bmatrix} } = \frac{73}{331}. 
We can now compute x1 using the formula






\mathbf{x}_1 = \mathbf{x}_0 + \alpha_0\mathbf{p}_0 = \begin{bmatrix} 2 \\ 1 \end{bmatrix} + \frac{73}{331} \begin{bmatrix} -8 \\ -3 \end{bmatrix} = \begin{bmatrix} 0.2356 \\ 0.3384 \end{bmatrix}. 
This result completes the first iteration, the result being an "improved" approximate solution to the system, x1. We may now move on and compute the next residual vector r1 using the formula






\mathbf{r}_1 = \mathbf{r}_0 - \alpha_0 \mathbf{A} \mathbf{p}_0 = \begin{bmatrix} -8 \\ -3 \end{bmatrix} - \frac{73}{331} \begin{bmatrix} 4 & 1 \\ 1 & 3 \end{bmatrix} \begin{bmatrix} -8 \\ -3 \end{bmatrix} = \begin{bmatrix} -0.2810 \\ 0.7492 \end{bmatrix}. 
Our next step in the process is to compute the scalar β0 that will eventually be used to determine the next search direction p1.






\beta_0 = \frac{\mathbf{r}_1^\mathrm{T} \mathbf{r}_1}{\mathbf{r}_0^\mathrm{T} \mathbf{r}_0} = \frac{\begin{bmatrix} -0.2810 & 0.7492 \end{bmatrix} \begin{bmatrix} -0.2810 \\ 0.7492 \end{bmatrix}}{\begin{bmatrix} -8 & -3 \end{bmatrix} \begin{bmatrix} -8 \\ -3 \end{bmatrix}} = 0.0088. 
Now, using this scalar β0, we can compute the next search direction p1 using the relationship






\mathbf{p}_1 = \mathbf{r}_1 + \beta_0 \mathbf{p}_0 = \begin{bmatrix} -0.2810 \\ 0.7492 \end{bmatrix} + 0.0088 \begin{bmatrix} -8 \\ -3 \end{bmatrix} = \begin{bmatrix} -0.3511 \\ 0.7229 \end{bmatrix}. 
We now compute the scalar α1 using our newly acquired p1 using the same method as that used for α0.






\alpha_1 = \frac{\mathbf{r}_1^\mathrm{T} \mathbf{r}_1}{\mathbf{p}_1^\mathrm{T} \mathbf{A p}_1} = \frac{\begin{bmatrix} -0.2810 & 0.7492 \end{bmatrix} \begin{bmatrix} -0.2810 \\ 0.7492 \end{bmatrix}}{ \begin{bmatrix} -0.3511 & 0.7229 \end{bmatrix} \begin{bmatrix} 4 & 1 \\ 1 & 3 \end{bmatrix} \begin{bmatrix} -0.3511 \\ 0.7229 \end{bmatrix} } = 0.4122. 
Finally, we find x2 using the same method as that used to find x1.






\mathbf{x}_2 = \mathbf{x}_1 + \alpha_1 \mathbf{p}_1 = \begin{bmatrix} 0.2356 \\ 0.3384 \end{bmatrix} + 0.4122 \begin{bmatrix} -0.3511 \\ 0.7229 \end{bmatrix} = \begin{bmatrix} 0.0909 \\ 0.6364 \end{bmatrix}. 
The result, x2, is a "better" approximation to the system's solution than x1 and x0. If exact arithmetic were to be used in this example instead of limited-precision, then the exact solution would theoretically have been reached after n = 2 iterations (n being the order of the system).
Convergence properties of the conjugate gradient method
The conjugate gradient method can theoretically be viewed as a direct method, as it produces the exact solution after a finite number of iterations, which is not larger than the size of the matrix, in the absence of round-off error. However, the conjugate gradient method is unstable with respect to even small perturbations, e.g., most directions are not in practice conjugate, and the exact solution is never obtained. Fortunately, the conjugate gradient method can be used as an iterative method as it provides monotonically improving approximations 
 
 
 
  to the exact solution, which may reach the required tolerance after a relatively small (compared to the problem size) number of iterations. The improvement is typically linear and its speed is determined by the condition number

 
  of the system matrix 
 
 
 
 : the larger 
 
 
 
  is, the slower the improvement.2
If 
 
 
 
  is large, preconditioning is used to replace the original system 
 
 
 
  with 
 
 
 
  so that 
 
 
 
  gets smaller than 
 
 
 
 , see below.
The preconditioned conjugate gradient method
In most cases, preconditioning is necessary to ensure fast convergence of the conjugate gradient method. The preconditioned conjugate gradient method takes the following form:













repeat










if rk+1 is sufficiently small then exit loop end if















end repeat

The result is xk+1


The above formulation is equivalent to applying the conjugate gradient method without preconditioning to the system


 
  where 
 
 
 
  and 
 
 
 
 .
The preconditioner matrix M has to be symmetric positive-definite and fixed, i.e., cannot change from iteration to iteration. If any of these assumptions on the preconditioner is violated, the behavior of the preconditioned conjugate gradient method may become unpredictable.
An example of a commonly used preconditioner is the incomplete Cholesky factorization.
The flexible preconditioned conjugate gradient method
In numerically challenging applications, sophisticated preconditioners are used, which may lead to variable preconditioning, changing between iterations. Even if the preconditioner is symmetric positive-definite on every iteration, the fact that it may change makes the arguments above invalid, and in practical tests leads to a significant slow down of the convergence of the algorithm presented above. Using the Polak–Ribière formula








instead of the Fletcher–Reeves formula








may dramatically improve the convergence in this case.3 This version of the preconditioned conjugate gradient method can be called4 flexible, as it allows for variable preconditioning. The implementation of the flexible version requires storing an extra vector. For a fixed preconditioner, 
 
 
 
  so both formulas for 
 
 
 
  are equivalent in exact arithmetic, i.e., without the round-off error.
The mathematical explanation of the better convergence behavior of the method with the Polak–Ribière formula is that the method is locally optimal in this case, in particular, it does not converge slower than the locally optimal steepest descent method.5
Example code in MATLAB
function [x, k] = gcp(x0, A, C, b, mit, stol, bbA, bbC)
 % Synopsis:
 % x0: initial point
 % A: Matrix A of the system Ax=b
 % C: Preconditioning Matrix can be left or right
 % mit: Maximum number of iterations
 % stol: residue norm tolerance
 % bbA: Black Box that computes the matrix-vector product for A * u
 % bbC: Black Box that computes:
 %      for left-side preconditioner : ha = C \ ra
 %      for right-side preconditioner: ha = C * ra
 % x: Estimated solution point
 % k: Number of iterations done 
 %
 % Example:
 % tic;[x, t] = cgp(x0, S, speye(1), b, 3000, 10^-8, @(Z, o) Z*o, @(Z, o) o);toc
 % Elapsed time is 0.550190 seconds.
 %
 % Reference:
 %  Métodos iterativos tipo Krylov para sistema lineales
 %  B. Molina y M. Raydan - ISBN 908-261-078-X
         if ( nargin < 8 ), error('Not enough input arguments. Try help.'); end;
         if ( isempty(A) ), error('Input matrix A must not be empty.'); end;
         if ( isempty(C) ), error('Input preconditioner matrix C must not be empty.'); end;
         x = x0;
         ha = 0;
         hp = 0;
         hpp = 0;
         ra = 0;
         rp = 0;
         rpp = 0;
         u = 0;
         k = 0;
 
         ra = b - bbA(A, x0); % <--- ra = b - A * x0;
         while ( norm(ra, inf) > stol ),
                 ha = bbC(C, ra); % <--- ha = C \ ra;
                 k = k + 1;
                 if ( k == mit ), warning('GCP:MAXIT', 'mit reached, no conversion.'); return; end;
                 hpp = hp;
                 rpp = rp;
                 hp = ha;
                 rp = ra;
                 t = rp'*hp;
                 if ( k == 1 ),
                         u = hp;
                 else
                         u = hp + ( t / (rpp'*hpp) ) * u;
                 end;
                 Au = bbA(A, u); % <--- Au = A * u;
                 a = t / (u'*Au);
                 x = x + a * u;
                 ra = rp - a * Au;
         end;
The conjugate gradient method vs. the locally optimal steepest descent method
In both the original and the preconditioned conjugate gradient methods one only needs to set 
 
 
 
  in order to make them locally optimal, using the line search, steepest descent methods. With this substitution, vectors 
 
 
 
  are always the same as vectors 
 
 
 
 , so there is no need to store vectors 
 
 
 
 . Thus, every iteration of these steepest descent methods is a bit cheaper compared to that for the conjugate gradient methods. However, the latter converge faster, unless a (highly) variable preconditioner is used, see above.
Derivation of the method
The conjugate gradient method can be derived from several different perspectives, including specialization of the conjugate direction method for optimization, and variation of the Arnoldi/Lanczos iteration for eigenvalue problems. Despite differences in their approaches, these derivations share a common topic—proving the orthogonality of the residuals and conjugacy of the search directions. These two properties are crucial to developing the well-known succinct formulation of the method.
Conjugate gradient on the normal equations
The conjugate gradient method can be applied to an arbitrary n-by-m matrix by applying it to normal equations ATA and right-hand side vector ATb, since ATA is a symmetric positive-semidefinite matrix for any A. The result is conjugate gradient on the normal equations (CGNR).

ATAx = ATb


As an iterative method, it is not necessary to form ATA explicitly in memory but only to perform the matrix-vector and transpose matrix-vector multiplications. Therefore CGNR is particularly useful when A is a sparse matrix since these operations are usually extremely efficient. However the downside of forming the normal equations is that the condition number κ(ATA) is equal to κ2(A) and so the rate of convergence of CGNR may be slow and the quality of the approximate solution may be sensitive to roundoff errors. Finding a good preconditioner is often an important part of using the CGNR method.
Several algorithms have been proposed (e.g., CGLS, LSQR). The LSQR algorithm purportedly has the best numerical stability when A is ill-conditioned, i.e., A has a large condition number.
See also

Biconjugate gradient method (BiCG)
Conjugate residual method
Nonlinear conjugate gradient method
Iterative method. Linear systems
Preconditioning
Gaussian belief propagation
Krylov subspace
Sparse matrix-vector multiplication

Notes
References
The conjugate gradient method was originally proposed in



Descriptions of the method can be found in the following text books:






External links


An Introduction to the Conjugate Gradient Method Without the Agonizing Pain by Jonathan Richard Shewchuk.
Iterative methods for sparse linear systems by Yousef Saad
LSQR: Sparse Equations and Least Squares by Christopher Paige and Michael Saunders.
Derivation of fast implementation of conjugate gradient method and interactive example

"
Category:Numerical linear algebra Category:Gradient methods Category:Articles with example pseudocode Category:Articles with example MATLAB/Octave code



↩
↩
↩
↩
↩



