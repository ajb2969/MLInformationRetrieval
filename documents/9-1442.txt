   Alternating decision tree      Alternating decision tree   An alternating decision tree (ADTree) is a machine learning method for classification. It generalizes decision trees and has connections to boosting .  History  ADTrees were introduced by Yoav Freund and Llew Mason. 1 However, the algorithm as presented had several typographical errors. Clarifications and optimizations were later presented by Bernhard Pfahringer, Geoffrey Holmes and Richard Kirkby. 2 Implementations are available in Weka and JBoost.  Motivation  Original boosting algorithms typically used either decision stumps or decision trees as weak hypotheses. As an example, boosting decision stumps creates a set of   T   T   T   weighted decision stumps (where   T   T   T   is the number of boosting iterations), which then vote on the final classification according to their weights. Individual decision stumps are weighted according to their ability to classify the data.  Boosting a simple learner results in an unstructured set of   T   T   T   hypotheses, making it difficult to infer correlations between attributes. Alternating decision trees introduce structure to the set of hypotheses by requiring that they build off a hypothesis that was produced in an earlier iteration. The resulting set of hypotheses can be visualized in a tree based on the relationship between a hypothesis and its "parent."  Another important feature of boosted algorithms is that the data is given a different distribution at each iteration. Instances that are misclassified are given a larger weight while accurately classified instances are given reduced weight.  Alternating decision tree structure  An alternating decision tree consists of decision nodes and prediction nodes. Decision nodes specify a predicate condition. Prediction nodes contain a single number. ADTrees always have prediction nodes as both root and leaves. An instance is classified by an ADTree by following all paths for which all decision nodes are true and summing any prediction nodes that are traversed. This is different from binary classification trees such as CART ( Classification and regression tree ) or C4.5 in which an instance follows only one path through the tree.  Example  The following tree was constructed using JBoost on the spambase dataset 3 (available from the UCI Machine Learning Repository). 4 In this example, spam is coded as   1   1   1   and regular email is coded as    -  1      1    -1   .  (Figure)  An ADTree for 6 iterations on the Spambase dataset.   The following table contains part of the information for a single instance.      An instance to be classified     Feature     char_freq_bang     word_freq_hp     capital_run_length_longest     char_freq_dollar     word_freq_remove     word_freq_george     Other features     The instance is scored by summing all of the prediction nodes through which it passes. In the case of the instance above, the score is calculate as      Score for the above instance     Iteration     Instance values     Prediction     The final score of   0.657   0.657   0.657   is positive, so the instance is classified as spam. The magnitude of the value is a measure of confidence in the prediction. The original authors list three potential levels of interpretation for the set of attributes identified by an ADTree:   Individual nodes can be evaluated for their own predictive ability.  Sets of nodes on the same path may be interpreted as having a joint effect  The tree can be interpreted as a whole.   Care must be taken when interpreting individual nodes as the scores reflect a re weighting of the data in each iteration.  Description of the algorithm  The inputs to the alternating decision tree algorithm are:   A set of inputs     (   x  1   ,   y  1   )   ,  …  ,   (   x  m   ,   y  m   )        subscript  x  1    subscript  y  1    normal-…    subscript  x  m    subscript  y  m      (x_{1},y_{1}),\ldots,(x_{m},y_{m})   where    x  i     subscript  x  i    x_{i}   is a vector of attributes and    y  i     subscript  y  i    y_{i}   is either -1 or 1. Inputs are also called instances.  A set of weights    w  i     subscript  w  i    w_{i}   corresponding to each instance.   The fundamental element of the ADTree algorithm is the rule. A single rule consists of a precondition, a condition, and two scores. A condition is a predicate of the form "attribute value." A precondition is simply a logical conjunction of conditions. Evaluation of a rule involves a pair of nested if statements:  1 if (precondition)  2 if (condition)  3 return score_one  4 else  5 return score_two  6 end  if  7 else  8 return 0  9 end  if  Several auxiliary functions are also required by the algorithm:        W  +    (  c  )        subscript  W    c    W_{+}(c)   returns the sum of the weights of all positively labeled examples that satisfy predicate   c   c   c          W  -    (  c  )        subscript  W    c    W_{-}(c)   returns the sum of the weights of all negatively labeled examples that satisfy predicate   c   c   c          W   (  c  )    =     W  +    (  c  )    +    W  -    (  c  )           W  c        subscript  W    c      subscript  W    c      W(c)=W_{+}(c)+W_{-}(c)   returns the sum of the weights of all examples that satisfy predicate   c   c   c      The algorithm is as follows:  1 function ad_tree  2 input Set of    m   m   m    training instances  3  4      w  i   =   1  /  m        subscript  w  i     1  m     w_{i}=1/m    for all    i   i   i     5     a  =    1  /  2   ln     W  +    (   t  r  u  e   )      W  -    (   t  r  u  e   )          a      1  2   ln       subscript  W      t  r  u  e       subscript  W      t  r  u  e        a=1/2\textrm{ln}\frac{W_{+}(true)}{W_{-}(true)}     6      R  0   =        subscript  R  0   absent    R_{0}=    a rule with scores    a   a   a    and    0   0     , precondition "true" and condition "true."  7     𝒫  =   {   t  r  u  e   }       𝒫     t  r  u  e      \mathcal{P}=\{true\}      8     𝒞  =       𝒞  absent    \mathcal{C}=    the set of all possible conditions  9 for     j  =   1  …  T       j    1  normal-…  T     j=1\dots T     10      p  ∈  𝒫   ,   c  ∈  𝒞      formulae-sequence    p  𝒫     c  𝒞     p\in\mathcal{P},c\in\mathcal{C}    get values that minimize     z  =    2   (      W  +    (   p  ∧  c   )    W  -    (   p  ∧  c   )     +     W  +    (   p  ∧   ¬  c    )    W  -    (   p  ∧   ¬  c    )      )    +   W   (   ¬  p   )         z      2         subscript  W      p  c    subscript  W      p  c          subscript  W      p     c     subscript  W      p     c          W     p       z=2\left(\sqrt{W_{+}(p\wedge c)W_{-}(p\wedge c)}+\sqrt{W_{+}(p\wedge\neg c)W_{%
 -}(p\wedge\neg c)}\right)+W(\neg p)     11      𝒫  +   =     p  ∧  c   +  p   ∧   ¬  c         limit-from  𝒫          p  c   p      c      \mathcal{P}+=p\wedge c+p\wedge\neg c     12      a  1   =    1  2   ln      W  +    (   p  ∧  c   )    +  1      W  -    (   p  ∧  c   )    +  1          subscript  a  1       1  2   ln         subscript  W      p  c    1        subscript  W      p  c    1       a_{1}=\frac{1}{2}\textrm{ln}\frac{W_{+}(p\wedge c)+1}{W_{-}(p\wedge c)+1}     13      a  2   =    1  2   ln      W  +    (   p  ∧   ¬  c    )    +  1      W  -    (   p  ∧   ¬  c    )    +  1          subscript  a  2       1  2   ln         subscript  W      p     c     1        subscript  W      p     c     1       a_{2}=\frac{1}{2}\textrm{ln}\frac{W_{+}(p\wedge\neg c)+1}{W_{-}(p\wedge\neg c)%
 +1}     14      R  j   =        subscript  R  j   absent    R_{j}=    new rule with precondition    p   p   p    , condition    c   c   c    , and weights     a  1     subscript  a  1    a_{1}    and     a  2     subscript  a  2    a_{2}     15      w  i   =    w  i    e   -    y  i    R  j    (   x  i   )            subscript  w  i      subscript  w  i    superscript  e       subscript  y  i    subscript  R  j    subscript  x  i         w_{i}=w_{i}e^{-y_{i}R_{j}(x_{i})}     16 end  for  17 return set of     R  j     subscript  R  j    R_{j}     The set   𝒫   𝒫   \mathcal{P}   grows by two preconditions in each iteration, and it is possible to derive the tree structure of a set of rules by making note of the precondition that is used in each successive rule.  Empirical results  Figure 6 in the original paper 5 demonstrates that ADTrees are typically as robust as boosted decision trees and boosted decision stumps . Typically, equivalent accuracy can be achieved with a much simpler tree structure than recursive partitioning algorithms.  References  External links   An introduction to Boosting and ADTrees (Has many graphical examples of alternating decision trees in practice).  JBoost software implementing ADTrees.   "  Category:Decision trees  Category:Classification algorithms     Yoav Freund and Llew Mason. The Alternating Decision Tree Algorithm. Proceedings of the 16th International Conference on Machine Learning, pages 124-133 (1999) ↩  Bernhard Pfahringer, Geoffrey Holmes and Richard Kirkby. Optimizing the Induction of Alternating Decision Trees. Proceedings of the Fifth Pacific-Asia Conference on Advances in Knowledge Discovery and Data Mining. 2001, pp. 477-487 ↩  ↩  ↩      