


Mealy machine




Mealy machine

In the theory of computation, a Mealy machine is a finite-state machine whose output values are determined both by its current state and the current inputs. (This is in contrast to a Moore machine, whose output values are determined solely by its current state.) A Mealy machine is a deterministic finite state transducer: for each state and input, at most one transition is possible.
History
The Mealy machine is named after George H. Mealy, who presented the concept in a 1955 paper, “A Method for Synthesizing Sequential Circuits”.1
Formal definition
A Mealy machine is a 6-tuple

 
  consisting of the following:

a finite set of states


a start state (also called initial state) 
 
 
 
  which is an element of 
 
 

a finite set called the input alphabet


a finite set called the output alphabet


a transition function

 
  mapping pairs of a state and an input symbol to the corresponding next state.
an output function 
 
 
 
  mapping pairs of a state and an input symbol to the corresponding output symbol.

In some formulations, the transition and output functions are coalesced into a single function 
 
 
 
 .
Comparison

Mealy machine tend to have fewer states:
 
Different outputs on arcs (n2) rather than states (n).

Moore machine are safer to use:
 
Outputs change at clock edge (always one cycle later).
In Mealy machines, input change can cause output change as soon as logic is done—a big problem when two machines are interconnected – asynchronous feedback may occur if one isn't careful.

Mealy machine react faster to inputs:
 
React in same cycle—don't need to wait for clock.
In Moore machines, more logic may be necessary to decode state into outputs—more gate delays after clock edge.


Diagram
The state diagram for a Mealy machine associates an output value with each transition edge (in contrast to the state diagram for a Moore machine, which associates an output value with each state).
When the input and output alphabet are both 
 
 
 
 , one can also associate to a Mealy Automata an Helix directed graph.2

 
  This graph has as vertices the couples of state and letters, every nodes are of out-degree one, and the successor of 
 
 
 
  is the next state of the automata and the letter that the automata output when it is instate 
 
 
 
  and it reads letter 
 
 
 
 . This graph is a union of disjoint cycles iff the automaton is bireversible.
Examples
Simple
 A simple Mealy machine has one input and one output. Each transition edge is labeled with the value of the input (shown in red) and the value of the output (shown in blue). The machine starts in state . (In this example, the output is the exclusive-or of the two most-recent input values; thus, the machine implements an edge detector, outputting a one every time the input flips and a zero otherwise.)
Complex
More complex Mealy machines can have multiple inputs as well as multiple outputs.
Applications
Mealy machines provide a rudimentary mathematical model for cipher machines. Considering the input and output alphabet the Latin alphabet, for example, then a Mealy machine can be designed that given a string of letters (a sequence of inputs) can process it into a ciphered string (a sequence of outputs). However, although one could use a Mealy model to describe the Enigma, the state diagram would be too complex to provide feasible means of designing complex ciphering machines.
Moore/Mealy machines, are DFAs that have also output at any tick of the clock. Modern CPUs, computers, cell phones, digital clocks and basic electronic devices/machines have some kind of finite state machine to control it.
Simple software systems, particularly ones that can be represented using regular expressions, can be modeled as Finite State Machines. There are many of such simple systems, such as vending machines or basic electronics.
By finding the intersection of two Finite state machines, one can design in a very simple manner concurrent systems that exchange messages for instance. For example, a traffic light is a system that consists of multiple subsystems, such as the different traffic lights, that work concurrently.
Some examples of applications:

number classification
watch with timer
vending machine
traffic light
bar code scanner
gas pumps

Summary
Implementing a Moore or Mealy machine is not that hard, especially if one does not intend to minimize the circuit.
However, it does take practice to be able to do it reasonably fast, and is difficult to understand conceptually, at least, at first. One should trace out a few steps just to convince oneself of how it behaves. There is a subtle difference in the behavior of the implementation of a Mealy and Moore machine. Tracing out a few steps can show the differences more clearly.
Usually, it is harder to understand why the circuit does the right thing (i.e., implements the FSM) than it is to know how to build it. Certainly, one should devote time to both understanding why this technique works, as well as mastering the technique.
See also

Synchronous circuit
Moore machine
Algorithmic state machine
Richards controller

Footnotes
References






"
Category:Models of computation Category:Automata theory Category:Digital electronics




Akhavi et al (2012)




