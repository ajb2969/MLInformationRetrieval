   Tau-leaping      Tau-leaping   In probability theory , tau-leaping , or τ-leaping , is an approximate method for the simulation of a stochastic system . 1 It is based on the Gillespie algorithm , performing all reactions for an interval of length tau before updating the propensity functions. 2 By updating the rates less often this allows for more efficient simulation and thus the consideration of larger systems.  Cao et al. improved the method to prevent the generation of negative populations. 3 4  Algorithm  The algorithm is analogous to the Euler method for deterministic systems, but instead of making a fixed change       x   (   t  +  τ   )    =    x   (  t  )    +   τ   x  ′    (  t  )           x    t  τ        x  t     τ   superscript  x  normal-′   t      x(t+\tau)=x(t)+\tau x^{\prime}(t)     the change is       x   (   t  +  τ   )    =    x   (  t  )    +   P   (   τ   x  ′    (  t  )    )           x    t  τ        x  t     P    τ   superscript  x  normal-′   t       x(t+\tau)=x(t)+P(\tau x^{\prime}(t))     where    P   (   τ   x  ′    (  t  )    )       P    τ   superscript  x  normal-′   t     P(\tau x^{\prime}(t))   is a Poisson distributed random variable with mean    τ   x  ′    (  t  )       τ   superscript  x  normal-′   t    \tau x^{\prime}(t)   .  Given a state     𝐱   (  t  )    =   {    X  i    (  t  )    }         𝐱  t       subscript  X  i   t      \mathbf{x}(t)=\{X_{i}(t)\}   with events    E  j     subscript  E  j    E_{j}   occurring at rate     R  j    (   𝐱   (  t  )    )        subscript  R  j     𝐱  t     R_{j}(\mathbf{x}(t))   and with state change vectors    𝐯  j     subscript  𝐯  j    \mathbf{v}_{j}   (where   i   i   i   indexes the state variables, and   j   j   j   indexes the events), the method is as follows:   Initialise the model with initial conditions     𝐱   (   t  0   )    =   {    X  i    (   t  0   )    }         𝐱   subscript  t  0        subscript  X  i    subscript  t  0       \mathbf{x}(t_{0})=\{X_{i}(t_{0})\}   .  Calculate the event rates     R  j    (   𝐱   (  t  )    )        subscript  R  j     𝐱  t     R_{j}(\mathbf{x}(t))   .  Choose a time step   τ   τ   \tau   . This may be fixed, or by some algorithm dependent on the various event rates.  For each event    E  j     subscript  E  j    E_{j}   generate     K  j   ∼   Poisson   (    R  j   τ   )       similar-to   subscript  K  j     Poisson     subscript  R  j   τ      K_{j}\sim\text{Poisson}(R_{j}\tau)   , which is the number of times each event occurs during the time interval    [  t  ,   t  +  τ   )     t    t  τ     [t,t+\tau)   .  Update the state by      𝐱   (   t  +  τ   )    =    𝐱   (  t  )    +    ∑  j     K  j    v   i  j             𝐱    t  τ        𝐱  t     subscript   j      subscript  K  j    subscript  v    i  j         \mathbf{x}(t+\tau)=\mathbf{x}(t)+\sum_{j}K_{j}v_{ij}      where    v   i  j      subscript  v    i  j     v_{ij}   is the change on state variable    X  i     subscript  X  i    X_{i}   due to event    E  j     subscript  E  j    E_{j}   . At this point it may be necessary to check that no populations have reached unrealistic values (such as a population becoming negative due to the unbounded nature of the Poisson variable    K  j     subscript  K  j    K_{j}   ).   Repeat from Step 2 until some desired condition is met (e.g. a particular state variable reaches 0, or time    t  1     subscript  t  1    t_{1}   is reached).   Algorithm for efficient step size selection  This algorithm is described by Cao et al. 5 The idea is to bound the relative change in each event rate    R  j     subscript  R  j    R_{j}   by a specified tolerance   ϵ   ϵ   \epsilon   (Cao et al. recommend    ϵ  =  0.03      ϵ  0.03    \epsilon=0.03   , although it may depend on model specifics). This is achieved by bounding the relative change in each state variable    X  i     subscript  X  i    X_{i}   by    ϵ  /   g  i       ϵ   subscript  g  i     \epsilon/g_{i}   , where    g  i     subscript  g  i    g_{i}   depends on the rate that changes the most for a given change in    X  i     subscript  X  i    X_{i}   .Typically    g  i     subscript  g  i    g_{i}   is equal the highest order event rate, but this may be more complex in different situations (especially epidemiological models with non-linear event rates).  This algorithm typically requires computing    2  N      2  N    2N    auxiliary values (where   N   N   N   is the number of state variables    X  i     subscript  X  i    X_{i}   ), and should only require reusing previously calculated values     R  j    (  𝐱  )        subscript  R  j   𝐱    R_{j}(\mathbf{x})   . An important factor in this since    X  i     subscript  X  i    X_{i}   is an integer value, then there is a minimum value by which it can change, preventing the relative change in    R  j     subscript  R  j    R_{j}   being bounded by 0, which would result in   τ   τ   \tau   also tending to 0.   For each state variable    X  i     subscript  X  i    X_{i}   , calculate the auxiliary values       μ  i    (  𝐱  )    =    ∑  j     v   i  j     R  j    (  𝐱  )            subscript  μ  i   𝐱     subscript   j      subscript  v    i  j     subscript  R  j   𝐱      \mu_{i}(\mathbf{x})=\sum_{j}v_{ij}R_{j}(\mathbf{x})           σ  i  2    (  𝐱  )    =    ∑  j     v   i  j   2    R  j    (  𝐱  )            superscript   subscript  σ  i   2   𝐱     subscript   j      superscript   subscript  v    i  j    2    subscript  R  j   𝐱      \sigma_{i}^{2}(\mathbf{x})=\sum_{j}v_{ij}^{2}R_{j}(\mathbf{x})     For each state variable    X  i     subscript  X  i    X_{i}   , determine the highest order event in which it is involved, and obtain    g  i     subscript  g  i    g_{i}     Calculate time step   τ   τ   \tau   as     τ  =    min  i    {    max   {    ϵ   X  i    /   g  i    ,  1  }     |    μ  i    (  𝐱  )    |    ,    max    {  ϵ   X  i   /   g  i   ,  1  }   2      σ  i  2    (  𝐱  )     }        τ    subscript   i           ϵ   subscript  X  i     subscript  g  i    1        subscript  μ  i   𝐱        fragments    superscript   fragments  normal-{  ϵ   subscript  X  i     subscript  g  i   normal-,  1  normal-}   2       superscript   subscript  σ  i   2   𝐱       \tau=\min_{i}{\left\{\frac{\max{\{\epsilon X_{i}/g_{i},1\}}}{|\mu_{i}(\mathbf{%
 x})|},\frac{\max{\{\epsilon X_{i}/g_{i},1\}}^{2}}{\sigma_{i}^{2}(\mathbf{x})}%
 \right\}}      This computed   τ   τ   \tau   is then used in Step 3 of the   τ   τ   \tau   leaping algorithm.  References  "  Category:Chemical kinetics  Category:Computational chemistry  Category:Monte Carlo methods  Category:Stochastic simulation     ↩  ↩  ↩  ↩      