


Simpson's rule




Simpson's rule

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



 
(Figure)
An animation showing how Simpson's rule approximation improves with more strips.

In numerical analysis, Simpson's rule is a method for numerical integration, the numerical approximation of definite integrals. Specifically, it is the following approximation:



Simpson's rule also corresponds to the three-point Newton-Cotes quadrature rule.
The method is credited to the mathematician Thomas Simpson (1710–1761) of Leicestershire, England. Kepler used similar formulas over 100 years prior. For this reason the method is sometimes called Kepler's rule, or Keplersche Fassregel in German.
Derivation
Simpson's rule can be derived in various ways.
Quadratic interpolation
One derivation replaces the integrand 
 
 
 
  by the quadratic polynomial (i.e. parabola)
 
 
 
  which takes the same values as 
 
 
 
 
  at the end points a and b and the midpoint m = (a + b) / 2. One can use Lagrange polynomial interpolation to find an expression for this polynomial,


 
  An easy (albeit tedious) calculation shows that


1
This calculation can be carried out more easily if one first observes that (by scaling) there is no loss of generality in assuming that 
 
 
 
  and 
 
 
 
 .
Averaging the midpoint and the trapezoidal rules
Another derivation constructs Simpson's rule from two simpler approximations: the midpoint rule


 
  and the trapezoidal rule


 
  The errors in these approximations are


 
  respectively, where 
 
 
 
  denotes a term asymptotically proportional to 
 
 
 
 . The two 
 
 
 
 
  terms are not equal; see Big O notation for more details. It follows from the above formulas for the errors of the midpoint and trapezoidal rule that the leading error term vanishes if we take the weighted average


 
  This weighted average is exactly Simpson's rule.
Using another approximation (for example, the trapezoidal rule with twice as many points), it is possible to take a suitable weighted average and eliminate another error term. This is Romberg's method.
Undetermined coefficients
The third derivation starts from the ansatz



The coefficients α, β and γ can be fixed by requiring that this approximation be exact for all quadratic polynomials. This yields Simpson's rule.
Error
The error in approximating an integral by Simpson's rule is



where 
 
 
 
  is some number between 
 
 
 
 
  and 
 
 
 
 .2
The error is asymptotically proportional to 
 
 
 
 . However, the above derivations suggest an error proportional to 
 
 
 
 . Simpson's rule gains an extra order because the points at which the integrand is evaluated are distributed symmetrically in the interval [a, b].
Since the error term is proportional to the fourth derivative of f at 
 
 
 
 , this shows that Simpson's rule provides exact results for any polynomial f of degree three or less, since the fourth derivative of such a polynomial is zero at all points.
Composite Simpson's rule
If the interval of integration 
 
 
 
 
  is in some sense "small", then Simpson's rule will provide an adequate approximation to the exact integral. By small, what we really mean is that the function being integrated is relatively smooth over the interval 
 
 
 
 . For such a function, a smooth quadratic interpolant like the one used in Simpson's rule will give good results.
However, it is often the case that the function we are trying to integrate is not smooth over the interval. Typically, this means that either the function is highly oscillatory, or it lacks derivatives at certain points. In these cases, Simpson's rule may give very poor results. One common way of handling this problem is by breaking up the interval 
 
 
 
  into a number of small subintervals. Simpson's rule is then applied to each subinterval, with the results being summed to produce an approximation for the integral over the entire interval. This sort of approach is termed the composite Simpson's rule.
Suppose that the interval 
 
 
 
  is split up in 
 
 
 
  subintervals, with 
 
 
 
 
  an even number. Then, the composite Simpson's rule is given by



where 
 
 
 
  for 
 
 
 
  with 
 
 
 
 ; in particular, 
 
 
 
  and 
 
 
 
 . This composite rule with 
 
 
 
  corresponds with the regular Simpson's Rule of the preceding section. The above formula can also be written as



The error committed by the composite Simpson's rule is bounded (in absolute value) by



where 
 
 
 
  is the "step length", given by 
 
 
3
This formulation splits the interval 
 
 
 
  in subintervals of equal length. In practice, it is often advantageous to use subintervals of different lengths, and concentrate the efforts on the places where the integrand is less well-behaved. This leads to the adaptive Simpson's method.
Alternative extended Simpson's rule
This is another formulation of a composite Simpson's rule: instead of applying Simpson's rule to disjoint segments of the integral to be approximated, Simpson's rule is applied to overlapping segments, yielding:4



The formula above is obtained by combining the original composite Simpson's rule with the one consisting in using Simpson's 3/8 rule in the extreme subintervals and the standard 3-point rule in the remaining subintervals. The result is then obtained by taking the mean of the two formulas.
Simpson's 3/8 rule
Simpson's 3/8 rule is another method for numerical integration proposed by Thomas Simpson. It is based upon a cubic interpolation rather than a quadratic interpolation. Simpson's 3/8 rule is as follows:


 
  where b - a = 3h. The error of this method is:


 
  where 
 
 
 
  is some number between 
 
 
 
  and 
 
 
 
 . Thus, the 3/8 rule is about twice as accurate as the standard method, but it uses one more function value. A composite 3/8 rule also exists, similarly as above.5
A further generalization of this concept for interpolation with arbitrary degree polynomials are the Newton–Cotes formulas.
Simpson's 3/8 rule (for n intervals)
Defining,



we have



Note, we can only use this if 
 
 
 
  is a multiple of three.
A simplified version of Simpson's rules are used in naval architecture. The 3/8th rule is also called Simpson's Second Rule.
Sample implementation
An implementation of the composite Simpson's rule in Python 3 (Python 2.7 compatible):
#!/usr/bin/env python3
 from __future__ import division  # Python 2 compatibility
 
 def simpson(f, a, b, n):
     """Approximates the definite integral of f from a to b by the
     composite Simpson's rule, using n subintervals (with n even)"""
 
     if n % 2:
         raise ValueError("n must be even (received n=%d)" % n)
 
     h = (b - a) / n
     s = f(a) + f(b)
 
     for i in range(1, n, 2):
         s += 4 * f(a + i * h)
     for i in range(2, n-1, 2):
         s += 2 * f(a + i * h)
 
     return s * h / 3
 
 # Demonstrate that the method is exact for polynomials up to 3rd order
 print(simpson(lambda x:x**3, 0.0, 10.0, 2))       # 2500.0
 print(simpson(lambda x:x**3, 0.0, 10.0, 100000))  # 2500.0
 
 print(simpson(lambda x:x**4, 0.0, 10.0, 2))       # 20833.3333333
 print(simpson(lambda x:x**4, 0.0, 10.0, 100000))  # 20000.0
Note that this function is available in SciPy as scipy.integrate.simps.
See also

Gaussian quadrature
Rectangle method
Trapezoidal rule
Boole's rule

Notes
References








.


External links



Simpson's Rule for Numerical Integration
Application of Simpson's Rule — Earthwork Excavation (Note: The formula described in this page is correct but there are errors in the calculation which should give a result of 569m3 and not 623m3 as stated)
Simpson's 1/3rd rule of integration — Notes, PPT, Mathcad, Matlab, Mathematica, Maple at Numerical Methods for STEM undergraduate
A detailed description of a computer implementation is described by Dorai Sitaram in Teach Yourself Scheme in Fixnum Days, Appendix C
C Language Program to Implement Simpson's Rule

"
Category:Integral calculus Category:Numerical integration (quadrature) Category:Numerical analysis Category:Articles with example Python code



Atkinson, p. 256; Süli and Mayers, §7.2↩
Atkinson, equation (5.1.15); Süli and Mayers, Theorem 7.2↩
Atkinson, pp. 257+258; Süli and Mayers, §7.5↩
Press (1989), p. 122↩
Matthews (2004)↩



