   Subliminal channel      Subliminal channel   In cryptography, subliminal channels are covert channels that can be used to communicate secretly in normal looking communication over an insecure channel. 1 Subliminal channels in digital signature crypto systems were found in 1984 by Gustavus Simmons .  Simmons describes how the dilemma can be solved through parameter substitution in digital signature algorithms. 2  Signature algorithms like ElGamal and DSA have parameters which must be set with random information. He shows how one can make use of these parameters to send a message subliminally. Because the algorithm's signature creation procedure is unchanged, the signature remains verifiable and indistinguishable from a normal signature. Therefore it is hard to detect if the subliminal channel is used.   Subliminal channels can be classified into broadband and narrowband channel types.    Broadband and narrowband channels can exist in the same datastream.    The broadband channel uses almost all available bits that are available to use. This is commonly understood to mean {≥50% but ≤90%} channel utilization.    Every channel which uses fewer bits is called a narrow-band channel.    The additional used bits are needed for further protection, e.g., impersonation .   The broadband and the narrow-band channels can use different algorithm parameters. A narrow-band channel cannot transport maximal information, but it can be used to send the authentication key or datastream.  Research is ongoing : further developments can enhance the subliminal channel, e.g., allow for establishing a broadband channel without the need to agree on an authentication key in advance. Other developments try to avoid the entire subliminal channel.  Examples  An easy example of a narrowband subliminal channel for normal human-language text would be to define that an even word count in a sentence is associated with the bit "0" and an odd word count with the bit "1". The question "Hello, how do you do?" would therefore send the subliminal message "1".  The Digital Signature Algorithm has one subliminal broadband 3 and three subliminal narrow-band channels 4  At signing the parameter   k   k   k   has to be set random. For the broadband channel this parameter is instead set with a subliminal message    m  ′     superscript  m  normal-′    m^{\prime}   .   Key generation  choose prime    p  =  2347      p  2347    p=2347     choose prime    q  =  23      q  23    q=23     calculate generator    g  =  266      g  266    g=266     choose authentication key    x  =  1468      x  1468    x=1468   and send it securely to the receiver  calculate public key    y  =   g  x       y   superscript  g  x     y=g^{x}   mod    p  =  2100      p  2100    p=2100      Signing  choose message    m  =  1337      m  1337    m=1337     (hash function    H   (  m  )       H  m    H(m)   is here substituted with a modulo reduction by 107) calculate message hash value    h  =  m      h  m    h=m   mod    q  =  1337      q  1337    q=1337   mod    107  =  53      107  53    107=53     instead of random value    k  =  ?      k  normal-?    k=?   subliminal message     m  ′   =  17       superscript  m  normal-′   17    m^{\prime}=17   is chosen  calculate inverse of the subliminal message     m   ′   -  1     =  19       superscript  m   normal-′    1     19    m^{\prime-1}=19   mod   23   23   23     calculate signature value    r  =   (   g  k       fragments  r    fragments  normal-(   superscript  g  k      r=(g^{k}   mod    p  )     fragments  p  normal-)    p)   mod    q  =   (   266  17       fragments  q    fragments  normal-(   superscript  266  17      q=(266^{17}   mod    2347  )     fragments  2347  normal-)    2347)   mod    23  =  12      23  12    23=12     calculate signature value    s  =    k   -  1    *   (   h  +   x  *  r    )        s     superscript  k    1      h    x  r       s=k^{-1}*(h+x*r)   mod    q  =   19  *   (   53  +   1468  *  12    )        q    19    53    1468  12       q=19*(53+1468*12)   mod    23  =  3      23  3    23=3     sending message with signature triple    (  1337  ;  12  ,  3  )     1337  12  3    (1337;12,3)      Verifying  receiver gets message triple     (  m  ;  r  ,  s  )   =   (  1337  ;  12  ,  3  )        m  r  s    1337  12  3     (m;r,s)=(1337;12,3)     calculate message hash    h  =   H   (  m  )        h    H  m     h=H(m)   mod    q  =  1337      q  1337    q=1337   mod    107  =  53      107  53    107=53     calculate inverse    w  =   s   -  1        w   superscript  s    1      w=s^{-1}   mod    q  =  8      q  8    q=8     calculate     u  1   =   (   h  *  w   )        subscript  u  1     h  w     u_{1}=(h*w)   mod    q  =   53  *  8       q    53  8     q=53*8   mod    23  =  10      23  10    23=10     calculate     u  2   =   (   r  *  w   )        subscript  u  2     r  w     u_{2}=(r*w)   mod    q  =   12  *  8       q    12  8     q=12*8   mod    23  =  4      23  4    23=4     calculate signature    v  =   (   g   u  1    *   y   u  2        fragments  v    fragments  normal-(   superscript  g   subscript  u  1      superscript  y   subscript  u  2       v=(g^{u_{1}}*y^{u_{2}}   mod    p  )     fragments  p  normal-)    p)   mod    q  =   (   266  10   *   2100  4       fragments  q    fragments  normal-(   superscript  266  10     superscript  2100  4      q=(266^{10}*2100^{4}   mod    2347  )     fragments  2347  normal-)    2347)   mod    23  =  12      23  12    23=12     since    v  =  r      v  r    v=r   , the is signature valid   Message extraction on receiver side  from triple (1337; 12, 3)  extract message     m  ′   =   8  *   (   53  +   1468  *  12    )         superscript  m  normal-′     8    53    1468  12       m^{\prime}=8*(53+1468*12)   mod    23  =  17      23  17    23=17       The formula for message extraction is derived by transposing the signature value   s   s   s   calculation formula.       s  =    m   ′   -  1     *   (   h  +   x  r    )        s     superscript  m   normal-′    1       h    x  r       s=m^{\prime-1}*(h+xr)   mod   q   q   q          s  *   m  ′    =   h  +   x  r          s   superscript  m  normal-′      h    x  r      s*m^{\prime}=h+xr   mod   q   q   q          m  ′   =    s   -  1    *   (   h  +   x  r    )         superscript  m  normal-′      superscript  s    1      h    x  r       m^{\prime}=s^{-1}*(h+xr)   mod   q   q   q      ==Example: Using a Modulus n = pqr== In this example, an RSA modulus purporting to be of the form n = pq is actually of the form n = pqr, for primes p, q, and r. Calculation shows that exactly one extra bit can be hidden in the digitally signed message. The cure for this was found by cryptologists at the Centrum Wiskunde & Informatica in Amsterdam , who developed a Zero-knowledge proof that n is of the form n = pq. This example was motivated in part by The Empty Silo Proposal .  Example - RSA Case study  Here is a (real, working) PGP public key (using the RSA algorithm), which was generated to include two subliminal channels - the first is the "key ID", which should normally be random hex, but below is "covertly" modified to read "C0DED00D". The second is the base64 representation of the public key - again, supposed to be all random gibberish, but the English-readable message "//This+is+Christopher+Drakes+PGP+public+key//Who/What+is+watcHIng+you//" has been inserted. Adding both these subliminal messages was accomplished by tampering with the random number generation during the RSA key generation phase.  PGP Key. RSA 2020/C0DED00D   Fprint: 250A 7E38 9A1F 8A86  0811 C704 AF21 222C    -----BEGIN PGP PUBLIC KEY BLOCK-----  Version: Private    mQESAgAAAAAAAAEH5Ar//This+is+Christopher+Drakes+PGP+public+key//  Who/What+is+watcHIng+you//Di0nAraP+Ebz+iq83gCa06rGL4+hc9Gdsq667x  8FrpohTQzOlMF1Mj6aHeH2iy7+OcN7lL0tCJuvVGZ5lQxVAjhX8Lc98XjLm3vr1w  ZBa9slDAvv98rJ8+8YGQQPJsQKq3L3rN9kabusMs0ZMuJQdOX3eBRdmurtGlQ6AQ  AfjzUm8z5/2w0sYLc2g+aIlRkedDJWAFeJwAVENaY0LfkD3qpPFIhALN5MEWzdHt  Apc0WrnjJDby5oPz1DXxg6jaHD/WD8De0A0ARRAAAAAAAAAAAbQvQ2hyaXN0b3Bo  ZXIgRHJha2UgPENocmlzdG9waGVyLkRyYWtlQFBvQm94LmNvbT60SE5ldFNhZmUg  c2VjdXJpdHkgc29mdHdhcmUgZGlyZWN0b3IgQ2hyaXN0b3BoZXIgRHJha2UgPE5l  dFNhZmVAUG9Cb3guY29tPokBEgMFEDPXgvkcP9YPwN7QDQEB25oH4wWEhg9cBshB  i6l17fJRqIJpXKAz4Zt0CfAfXphRGXC7wC9bCYzpHZSerOi1pd3TpHWyGX3HjGEP  6hyPfMldN/sm5MzOqgFc2pO5Ke5ukfgxI05NI0+OKrfc5NQnDOBHcm47EkK9TsnM  c3Gz7HlWcHL6llRFwk75TWwSTVbfURbXKx4sC+nNExW7oJRKqpuN0JZxQxZaELdg  9wtdArqW/SY7jXQn//YJV/kftKvFrA24UYLxvGOXfZXpP7Gl2CGkDI6fzism75ya  xSAgn9B7BqQ4BLY5Vn+viS++6Rdavykyd8j9sDAK+oPz/qRtYJrMvTqBErN4C5uA  IV88P1U=  =/BRt  -----END PGP PUBLIC KEY BLOCK-----  Improvements  A modification to the Brickell and DeLaurentis signature scheme provides a broadband channel without the necessity to share the authentication key. 5 The Newton channel is not a subliminal channel, but it can be viewed as an enhancement. 6  Countermeasures  With the help of the zero-knowledge proof and the commitment scheme it is possible to prevent the usage of the subliminal channel. 7 8  It should be mentioned that this countermeasure has a 1-bit subliminal channel. The reason for that is the problem that a proof can succeed or purposely fail. 9  Another countermeasure can detect, but not prevent, the subliminal usage of the randomness. 10  References   Bruce Schneier. Applied Cryptography, Second Edition: Protocols, Algorithms, and Source Code in C, 2. Ed. Wiley Computer Publishing, John Wiley & Sons, Inc., 1995.   External links   Seminar 'Covert Channels and Embedded Forensics'   "  Category:Cryptography     Gustavus J. Simmons. The Prisoners Problem and the Subliminal Channel . In Advances in Cryptology – CRYPTO ’83, pages 51–67, New York, 1984. Lecture Notes in Computer Science, ed. D. Chaum. ↩  Gustavus J. Simmons. The subliminal channel and digital signatures . In Proc. of the EUROCRYPT 84 workshop on Advances in cryptology: theory and application of cryptographic techniques, pages 364–378, New York, NY, USA, 1985. Springer-Verlag New York, Inc. ↩  Gustavus J. Simmons. Subliminal communication is easy using the DSA . In EUROCRYPT ’93: Workshop on the theory and application of cryptographic techniques on Advances in cryptology, pages 218–232, Secaucus, NJ, USA, 1994. Springer-Verlag New York, Inc. ↩  Gustavus J. Simmons. The subliminal channel in the U.S. Digital Signature Algorithm (DSA), in Proceedings of the 3rd Symposium on State and Progress of Research in Cryptography ( SPRC '93 ), Rome, Italy, February 15–16, 1993. ↩  Gustavus J. Simmons. A Secure Subliminal Channel (?) . In CRYPTO ’85: Advances in Cryptology, pages 33–41, London, UK, 1986. Springer-Verlag. ↩  Ross J. Anderson, Serge Vaudenay, Bart Preneel, and Kaisa Nyberg. The Newton Channel . In Proceedings of the First International Workshop on Information Hiding, pages 151–156, London, UK, 1996. Springer-Verlag. ↩  Yvo Desmedt. Abuses in Cryptography and How to Fight Them . In CRYPTO ’88: Proceedings of the 8th Annual International Cryptology Conference on Advances in Cryptology, pages 375–389, London, UK, 1990. Springer-Verlag. ↩  Yvo Desmedt. "Subliminal-free authentication and signature". p. 24 of Christoph G. Günther, editor. "Advances in Cryptology - EUROCRYPT '88" . 1988. ↩  ↩  ↩     