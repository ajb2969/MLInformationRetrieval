   Linear programming relaxation      Linear programming relaxation   In mathematics, the linear programming relaxation of a 0-1 integer program is the problem that arises by replacing the constraint that each variable must be 0 or 1 by a weaker constraint, that each variable belong to the interval [0,1].  That is, for each constraint of the form       x  i   ∈   {  0  ,  1  }        subscript  x  i    0  1     x_{i}\in\{0,1\}   of the original integer program, one instead uses a pair of linear constraints      0  ≤   x  i   ≤  1.        0   subscript  x  i        1.     0\leq x_{i}\leq 1.     The resulting relaxation is a linear program , hence the name. This relaxation technique transforms an NP-hard optimization problem (integer programming) into a related problem that is solvable in polynomial time (linear programming); the solution to the relaxed linear program can be used to gain information about the solution to the original integer program.  Example  Consider the set cover problem , the linear programming relaxation of which was first considered by . In this problem, one is given as input a family of sets  F = { S 0 , S 1 , ...}; the task is to find a subfamily, with as few sets as possible, having the same union as F .  To formulate this as a 0-1 integer program, form an indicator variable  x i for each set S i , that takes the value 1 when S i belongs to the chosen subfamily and 0 when it does not. Then a valid cover can be described by an assignment of values to the indicator variables satisfying the constraints       x  i   ∈   {  0  ,  1  }        subscript  x  i    0  1     \textstyle x_{i}\in\{0,1\}   (that is, only the specified indicator variable values are allowed) and, for each element e j of the union of F ,         ∑   {  i  ∣    e  j   ∈   S  i    }      x  i    ≥  1        subscript    conditional-set  i     subscript  e  j    subscript  S  i       subscript  x  i    1    \textstyle\sum_{\{i\mid e_{j}\in S_{i}\}}x_{i}\geq 1   (that is, each element is covered). The minimum set cover corresponds to the assignment of indicator variables satisfying these constraints and minimizing the linear objective function       min     ∑  i     x  i     .         subscript   i    subscript  x  i      \textstyle\min\sum_{i}x_{i}.   The linear programming relaxation of the set cover problem describes a fractional cover in which the input sets are assigned weights such that the total weight of the sets containing each element is at least one and the total weight of all sets is minimized.  As a specific example of the set cover problem, consider the instance F = {{ a , b }, { b , c }, { a , c }}. There are three optimal set covers, each of which includes two of the three given sets. Thus, the optimal value of the objective function of the corresponding 0-1 integer program is 2, the number of sets in the optimal covers. However, there is a fractional solution in which each set is assigned the weight 1/2, and for which the total value of the objective function is 3/2. Thus, in this example, the linear programming relaxation has a value differing from that of the unrelaxed 0-1 integer program.  Solution quality of relaxed and original programs  The linear programming relaxation of an integer program may be solved using any standard linear programming technique. If the optimal solution to the linear program happens to have all variables either 0 or 1, it will also be an optimal solution to the original integer program. However, this is generally not true, except for some special cases (e.g., problems with totally unimodular matrix specifications.)  In all cases, though, the solution quality of the linear program is at least as good as that of the integer program, because any integer program solution would also be a valid linear program solution. That is, in a maximization problem, the relaxed program has a value greater than or equal to that of the original program, while in a minimization problem such as the set cover problem the relaxed program has a value smaller than or equal to that of the original program. Thus, the relaxation provides an optimistic bound on the integer program's solution.  In the example instance of the set cover problem described above, in which the relaxation has an optimal solution value of 3/2, we can deduce that the optimal solution value of the unrelaxed integer program is at least as large. Since the set cover problem has solution values that are integers (the numbers of sets chosen in the subfamily), the optimal solution quality must be at least as large as the next larger integer, 2. Thus, in this instance, despite having a different value from the unrelaxed problem, the linear programming relaxation gives us a tight lower bound on the solution quality of the original problem.  Approximation and integrality gap  Linear programming relaxation is a standard technique for designing approximation algorithms for hard optimization problems. In this application, an important concept is the integrality gap , the maximum ratio between the solution quality of the integer program and of its relaxation. In an instance of a minimization problem, if the real minimum (the minimum of the integer problem) is    M   i  n  t      subscript  M    i  n  t     M_{int}   , and the relaxed minimum (the minimum of the linear programming relaxation) is    M   f  r  a  c      subscript  M    f  r  a  c     M_{frac}   , then the integrality gap of that instance is     I  G   =    M   i  n  t     M   f  r  a  c           I  G      subscript  M    i  n  t     subscript  M    f  r  a  c       IG=\frac{M_{int}}{M_{frac}}   . In a maximization problem the fraction is reversed. The integrality gap is always at least 1. In the #Example above, the instance F = {{ a , b }, { b , c }, { a , c }} shows an integrality gap of 4/3.  Typically, the integrality gap translates into the approximation ratio of an approximation algorithm. This is because an approximation algorithm relies on some rounding strategy that finds, for every relaxed solution of size    M   f  r  a  c      subscript  M    f  r  a  c     M_{frac}   , an integer solution of size at most     R  R   ⋅   M   f  r  a  c       normal-⋅    R  R    subscript  M    f  r  a  c      RR\cdot M_{frac}   (where RR is the rounding ratio). If there is an instance with integrality gap IG , then every rounding strategy will return, on that instance, a rounded solution of size at least     M   i  n  t    =    I  G   ⋅   M   f  r  a  c          subscript  M    i  n  t     normal-⋅    I  G    subscript  M    f  r  a  c       M_{int}=IG\cdot M_{frac}   . Therefore necessarily     R  R   ≥   I  G         R  R     I  G     RR\geq IG   . The rounding ratio RR is only an upper bound on the approximation ratio, so in theory the actual approximation ratio may be lower than IG , but this may be hard to prove. In practice, a large IG usually implies that the approximation ratio in the linear programming relaxation might be bad, and it may be better to look for other approximation schemes for that problem.  For the set cover problem, Lovász proved that the integrality gap for an instance with n elements is H n , the n th harmonic number . One can turn the linear programming relaxation for this problem into an approximate solution of the original unrelaxed set cover instance via the technique of randomized rounding . Given a fractional cover, in which each set S i has weight w i , choose randomly the value of each 0-1 indicator variable x i to be 1 with probability w i ×(ln n +1), and 0 otherwise. Then any element e j has probability less than 1/( e × n ) of remaining uncovered, so with constant probability all elements are covered. The cover generated by this technique has total size, with high probability, (1+o(1))(ln n ) W , where W is the total weight of the fractional solution. Thus, this technique leads to a randomized approximation algorithm that finds a set cover within a logarithmic factor of the optimum. As  showed, both the random part of this algorithm and the need to construct an explicit solution to the linear programming relaxation may be eliminated using the method of conditional probabilities , leading to a deterministic greedy algorithm for set cover, known already to Lovász, that repeatedly selects the set that covers the largest possible number of remaining uncovered elements. This greedy algorithm approximates the set cover to within the same H n factor that Lovász proved as the integrality gap for set cover. There are strong complexity-theoretic reasons for believing that no polynomial time approximation algorithm can achieve a significantly better approximation ratio .  Similar randomized rounding techniques, and derandomized approximation algorithms, may be used in conjunction with linear programming relaxation to develop approximation algorithms for many other problems, as described by Raghavan, Tompson, and Young.  Branch and bound for exact solutions  As well as its uses in approximation, linear programming plays an important role in branch and bound algorithms for computing the true optimum solution to hard optimization problems.  If some variables in the optimal solution have fractional values, we may start a branch and bound type process, in which we recursively solve subproblems in which some of the fractional variables have their values fixed to either zero or one. In each step of an algorithm of this type, we consider a subproblem of the original 0-1 integer program in which some of the variables have values assigned to them, either 0 or 1, and the remaining variables are still free to take on either value. In subproblem i , let V i denote the set of remaining variables. The process begins by considering a subproblem in which no variable values have been assigned, and in which V 0 is the whole set of variables of the original problem. Then, for each subproblem i , it performs the following steps.   Compute the optimal solution to the linear programming relaxation of the current subproblem. That is, for each variable x j in V i , we replace the constraint that x j be 0 or 1 by the relaxed constraint that it be in the interval [0,1]; however, variables that have already been assigned values are not relaxed.  If the current subproblem's relaxed solution is worse than the best integer solution found so far, backtrack from this branch of the recursive search.  If the relaxed solution has all variables set to 0 or 1, test it against the best integer solution found so far and keep whichever of the two solutions is best.  Otherwise, let x j be any variable that is set to a fractional value in the relaxed solution. Form two subproblems, one in which x j is set to 0 and the other in which x j is set to 1; in both subproblems, the existing assignments of values to some of the variables are still used, so the set of remaining variables becomes V i \ { x j }. Recursively search both subproblems.   Although it is difficult to prove theoretical bounds on the performance of algorithms of this type, they can be very effective in practice.  Cutting plane method  Two 0-1 integer programs that are equivalent, in that they have the same objective function and the same set of feasible solutions, may have quite different linear programming relaxations: a linear programming relaxation can be viewed geometrically, as a convex polytope that includes all feasible solutions and excludes all other 0-1 vectors, and infinitely many different polytopes have this property. Ideally, one would like to use as a relaxation the convex hull of the feasible solutions; linear programming on this polytope would automatically yield the correct solution to the original integer program. However, in general, this polytope will have exponentially many facets and be difficult to construct. Typical relaxations, such as the relaxation of the set cover problem discussed earlier, form a polytope that strictly contains the convex hull and has vertices other than the 0-1 vectors that solve the unrelaxed problem.  The cutting-plane method for solving 0-1 integer programs, first introduced for the traveling salesman problem by  and generalized to other integer programs by , takes advantage of this multiplicity of possible relaxations by finding a sequence of relaxations that more tightly constrain the solution space until eventually an integer solution is obtained. This method starts from any relaxation of the given program, and finds an optimal solution using a linear programming solver. If the solution assigns integer values to all variables, it is also the optimal solution to the unrelaxed problem. Otherwise, an additional linear constraint (a cutting plane or cut ) is found that separates the resulting fractional solution from the convex hull of the integer solutions, and the method repeats on this new more tightly constrained problem.  Problem-specific methods are needed to find the cuts used by this method. It is especially desirable to find cutting planes that form facets of the convex hull of the integer solutions, as these planes are the ones that most tightly constrain the solution space; there always exists a cutting plane of this type that separates any fractional solution from the integer solutions. Much research has been performed on methods for finding these facets for different types of combinatorial optimization problems, under the framework of polyhedral combinatorics .  The related branch and cut method combines the cutting plane and branch and bound methods. In any subproblem, it runs the cutting plane method until no more cutting planes can be found, and then branches on one of the remaining fractional variables.  See also   Fractional coloring , a linear programming relaxation of graph coloring .  Randomized rounding , for obtaining a solution to the original problem from a solution to the relaxation.   References    .   .   .   .   .   .   .   .   .   "  Category:Linear programming  Category:Combinatorial optimization  Category:Polyhedral combinatorics  Category:Relaxation (approximation)   