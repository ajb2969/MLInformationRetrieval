


CoBoosting




CoBoosting

CoBoost is a semi-supervised training algorithm proposed by Collins and Singer in 1999. The original application for the algorithm was the task of Named Entity Classification using very weak learners.1 It can be used for performing semi-supervised learning in cases in which there exist redundancy in features.
It may be seen as a combination of co-training and boosting. Each example is available in two views (subsections of the feature set), and boosting is applied iteratively in alternation with each view using predicted labels produced in the alternate view on the previous iteration. CoBoosting is not a valid boosting algorithm in the PAC learning sense.
Motivation
CoBoosting was an attempt by Collins and Singer to improve on previous attempts to leverage redundancy in features for training classifiers in a semi-supervised fashion. CoTraining, a seminal work by Blum and Mitchell, was shown to be a powerful framework for learning classifiers given a small number of seed examples by iteratively inducing rules in a decision list. The advantage of CoBoosting to CoTraining is that it generalizes the CoTraining pattern so that it could be used with any classifier. CoBoosting accomplishes this feat by borrowing concepts from AdaBoost.
In both CoTrain and CoBoost the training and testing example sets must follow two properties. The first is that the feature space of the examples can separated into two feature spaces (or views) such that each view is sufficiently expressive for classification. Formally, there exist two functions 
 
 
 
  and 
 
 
 
  such that for all examples 
 
 
 
 , 
 
 
 
 . While ideal, this constraint is in fact too strong due to noise and other factors, and both algorithms instead seek to maximize the agreement between the two functions. The second property is that the two views must not be highly correlated.
Algorithm
Input
 
 
 
 , 
 
 

Initialize
 
 
 
 .
For 
 
 
 
  and for 
 
 
 
 :
Set pseudo-labels:
   


Set virtual distribution: 
 
 

   where 


   
   Find the weak hypothesis 

 that minimizes expanded training error.
   
   Choose value for 

 that minimizes expanded training error.
   Update the value for current strong non-thresholded classfier: 



The final strong classifier output is



Setting up AdaBoost
CoBoosting builds on the AdaBoost algorithm, which gives CoBoosting its generalization ability since AdaBoost can be used in conjunction with many other learning algorithms. This build up assumes a two class classification task, although it can be adapted to multiple class classification. In the AdaBoost framework, weak classifiers are generated in series as well as a distribution over examples in the training set. Each weak classifier is given a weight and the final strong classifier is defined as the sign of the sum of the weak classifiers weighted by their assigned weight. (See AdaBoost Wikipedia page for notation). In the AdaBoost framework Schapire and Singer have shown that the training error is bounded by the following equation:



Where 
 
 
 
  is the normalizing factor for the distribution 
 
 
 
 . Solving for 
 
 
 
  in the equation for 
 
 
 
  we get:



Where 
 
 
 
  is the feature selected in the current weak hypothesis. Three equations are defined describing the sum of the distributions for in which the current hypothesis has selected either correct or incorrect label. Note that it is possible for the classifier to abstain from selecting a label for an example, in which the label provided is 0. The two labels are selected to be either -1 or 1.





Schapire and Singer have shown that the value 
 
 
 
  can be minimized (and thus the training error) by selecting 
 
 
 
  to be as follows:



Providing confidence values for the current hypothesized classifier based on the number of correctly classified vs. the number of incorrectly classified examples weighted by the distribution over examples. This equation can be smoothed to compensate for cases in which 
 
 
 
  is too small. Deriving 
 
 
 
  from this equation we get:



The training error thus is minimized by selecting the weak hypothesis at every iteration that minimizes the previous equation.
AdaBoost with two views
CoBoosting extends this framework in the case where one has a labeled training set (examples from 
 
 
 
 ) and an unlabeled training set (from 
 
 
 
 ), as well as satisfy the conditions of redundancy in features in the form of 
 
 
 
 . The algorithm trains two classifiers in the same fashion as AdaBoost that agree on the labeled training sets correct labels and maximizes the agreement between the two classifiers on the unlabeled training set. The final classifier is the sign of the sum of the two strong classifiers. The bounded training error on CoBoost is extended as follows, where 
 
 
 
  is the extension of 
 
 
 
 :



Where 
 
 
 
  is the summation of hypotheses weight by their confidence values for the 
 
 
 
  view (j = 1 or 2). 
 
 
 
  is the sign of 
 
 
 
 . At each iteration of CoBoost both classifiers are updated iteratively. If 
 
 
 
  is the strong classifier output for the 
 
 
 
  view up to the 
 
 
 
  iteration we can set the pseudo-labels for the jth update to be:



In which 
 
 
 
  selects the other view to the one currently being updated. 
 
 
 
  is split into two such that 
 
 
 
 . Where



The distribution over examples for each view 
 
 
 
  at iteration 
 
 
 
  is defined as follows:



At which point 
 
 
 
  can be rewritten as



Which is identical to the equation in AdaBoost. Thus the same process can be used to update the values of 
 
 
 
  as in AdaBoost using 
 
 
 
  and 
 
 
 
 . By alternating this, the minimization of 
 
 
 
  and 
 
 
 
  in this fashion 
 
 
 
  is minimized in a greedy fashion.
References
Footnotes
"
Category:Classification algorithms



Michael Collins and Yoram Singer, Unsupervised Models for Named Entity Classification. Proceedings of the 1999 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora, pp. 100-110, 1999.↩




