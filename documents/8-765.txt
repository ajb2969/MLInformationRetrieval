   Berlekamp's algorithm      Berlekamp's algorithm   In mathematics , particularly computational algebra , Berlekamp's algorithm is a well-known method for factoring polynomials over finite fields (also known as Galois fields ). The algorithm consists mainly of matrix reduction and polynomial GCD computations. It was invented by Elwyn Berlekamp in 1967. It was the dominant algorithm for solving the problem until the Cantor–Zassenhaus algorithm of 1981. It is currently implemented in many well-known computer algebra systems .  Overview  Berlekamp's algorithm takes as input a square-free polynomial    f   (  x  )       f  x    f(x)   (i.e. one with no repeated factors) of degree   n   n   n   with coefficients in a finite field    𝔽  q     subscript  𝔽  q    \mathbb{F}_{q}   and gives as output a polynomial    g   (  x  )       g  x    g(x)   with coefficients in the same field such that    g   (  x  )       g  x    g(x)   divides    f   (  x  )       f  x    f(x)   . The algorithm may then be applied recursively to these and subsequent divisors, until we find the decomposition of    f   (  x  )       f  x    f(x)   into powers of irreducible polynomials (recalling that the ring of polynomials over a finite field is a unique factorization domain ).  All possible factors of    f   (  x  )       f  x    f(x)   are contained within the factor ring       R  =     𝔽  q    [  x  ]     ⟨   f   (  x  )    ⟩     .      R       subscript  𝔽  q    delimited-[]  x     delimited-⟨⟩    f  x       R=\frac{\mathbb{F}_{q}[x]}{\langle f(x)\rangle}.   The algorithm focuses on polynomials     g   (  x  )    ∈  R        g  x   R    g(x)\in R   which satisfy the congruence:        g    (  x  )   q    ≡    g   (  x  )       (   mod   f   (  x  )     )     .        g   superscript  x  q     annotated    g  x    pmod    f  x       g(x)^{q}\equiv g(x)\;\;(\mathop{{\rm mod}}f(x)).\,   These polynomials form a subalgebra of R (which can be considered as an   n   n   n   -dimensional vector space over    𝔽  q     subscript  𝔽  q    \mathbb{F}_{q}   ), called the Berlekamp subalgebra . The Berlekamp subalgebra is of interest because the polynomials    g   (  x  )       g  x    g(x)   it contains satisfy        f   (  x  )    =    ∏   s  ∈   𝔽  q      gcd   (   f   (  x  )    ,    g   (  x  )    -  s   )      .        f  x     subscript  product    s   subscript  𝔽  q         f  x       g  x   s       f(x)=\prod_{s\in\mathbb{F}_{q}}\gcd(f(x),g(x)-s).     In general, not every GCD in the above product will be a non-trivial factor of    f   (  x  )       f  x    f(x)   , but some are, providing the factors we seek.  Berlekamp's algorithm finds polynomials    g   (  x  )       g  x    g(x)   suitable for use with the above result by computing a basis for the Berlekamp subalgebra. This is achieved via the observation that Berlekamp subalgebra is in fact the kernel of a certain     (   n  +  1   )   ×   (   n  +  1   )         n  1     n  1     (n+1)\times(n+1)   matrix over    𝔽  q     subscript  𝔽  q    \mathbb{F}_{q}   , which is derived from the so-called Berlekamp matrix of the polynomial, denoted   𝒬   𝒬   \mathcal{Q}   . If    𝒬  =   [   q   i  ,  j    ]       𝒬   delimited-[]   subscript  q   i  j       \mathcal{Q}=[q_{i,j}]   then    q   i  ,  j      subscript  q   i  j     q_{i,j}   is the coefficient of the   j   j   j   -th power term in the reduction of    x   i  q      superscript  x    i  q     x^{iq}   modulo    f   (  x  )       f  x    f(x)   , i.e.:        x   i  q    ≡      q   i  ,  n     x  n    +    q   i  ,   n  -  1      x   n  -  1     +  …  +   q   i  ,  0        (   mod   f   (  x  )     )     .       superscript  x    i  q     annotated       subscript  q   i  n     superscript  x  n       subscript  q   i    n  1      superscript  x    n  1     normal-…   subscript  q   i  0      pmod    f  x       x^{iq}\equiv q_{i,n}x^{n}+q_{i,n-1}x^{n-1}+\ldots+q_{i,0}\;\;(\mathop{{\rm mod%
 }}f(x)).\,     With a certain polynomial     g   (  x  )    ∈  R        g  x   R    g(x)\in R   , say:        g   (  x  )    =     g  n    x  n    +    g   n  -  1     x   n  -  1     +  …  +   g  0     ,        g  x        subscript  g  n    superscript  x  n       subscript  g    n  1     superscript  x    n  1     normal-…   subscript  g  0      g(x)=g_{n}x^{n}+g_{n-1}x^{n-1}+\ldots+g_{0},\,     we may associate the row vector:       g  =   (   g  0   ,   g  1   ,  …  ,   g  n   )    .      g    subscript  g  0    subscript  g  1   normal-…   subscript  g  n      g=(g_{0},g_{1},\ldots,g_{n}).\,     It is relatively straightforward to see that the row vector    g  𝒬      g  𝒬    g\mathcal{Q}   corresponds, in the same way, to the reduction of    g    (  x  )   q       g   superscript  x  q     g(x)^{q}   modulo    f   (  x  )       f  x    f(x)   . Consequently a polynomial     g   (  x  )    ∈  R        g  x   R    g(x)\in R   is in the Berlekamp subalgebra if and only if     g   (   𝒬  -  I   )    =  0        g    𝒬  I    0    g(\mathcal{Q}-I)=0   (where   I   I   I   is the     (   n  +  1   )   ×   (   n  +  1   )         n  1     n  1     (n+1)\times(n+1)    identity matrix ), i.e. if and only if it is in the null space of    𝒬  -  I      𝒬  I    \mathcal{Q}-I   .  By computing the matrix    𝒬  -  I      𝒬  I    \mathcal{Q}-I   and reducing it to reduced row echelon form and then easily reading off a basis for the null space, we may find a basis for the Berlekamp subalgebra and hence construct polynomials    g   (  x  )       g  x    g(x)   in it. We then need to successively compute GCDs of the form above until we find a non-trivial factor. Since the ring of polynomials over a field is a Euclidean domain , we may compute these GCDs using the Euclidean algorithm .  Applications  One important application of Berlekamp's algorithm is in computing discrete logarithms over finite fields    𝔽   p  n      subscript  𝔽   superscript  p  n     \mathbb{F}_{p^{n}}   , where   p   p   p   is prime and    n  ≥  2      n  2    n\geq 2   . Computing discrete logarithms is an important problem in public key cryptography and error-control coding . For a finite field, the fastest known method is the index calculus method , which involves the factorisation of field elements. If we represent the field    𝔽   p  n      subscript  𝔽   superscript  p  n     \mathbb{F}_{p^{n}}   in the usual way - that is, as polynomials over the base field    𝔽  p     subscript  𝔽  p    \mathbb{F}_{p}   , reduced modulo an irreducible polynomial of degree   n   n   n   - then this is simply polynomial factorisation, as provided by Berlekamp's algorithm.  Implementation in Computer Algebra Systems  Berlekamp's algorithm may be accessed in the PARI/GP package using the factormod command, and the WolframAlpha  1 website.  See also   Polynomial factorisation  Factorization of polynomials over a finite field and irreducibility tests  Cantor-Zassenhaus algorithm   References    BSTJ Later republished in:    "  Category:Computer algebra  Category:Finite fields   