


Random projection




Random projection

In theoretical computer science, random projection is a graphical technique used to reduce the dimensionality of a set of points which lie in Euclidean space. Random projection methods are powerful methods known for their simplicity and less erroneous output compared with other methods. According to experimental results, random projection preserve distances well, but empirical results are sparse.
Dimensionality reduction
Dimensionality reduction, as the name suggests, is reducing number of random variables using various machine learning methods and techniques. Dimensionality reduction is used mainly to reduce of the problem of managing and manipulation of large data sets. When we have large data sets it is too difficult for us to perform various operations like pattern recognition. Dimensionality reduction techniques generally uses linear transformations in determining the intrinsic dimensionality of the manifold as well as extracting its principal directions. There are various techniques like Principal Component Analysis, linear discriminant analysis, canonical correlation analysis, Discrete Cosine transform Method, Gauss Method, random Projection etc.
The random projection module implements a simple and computationally efficient way to reduce the dimensionality of data by trading a controlled amount of accuracy for faster processing times and smaller model sizes. This module construct two types of random matrix: Gaussian random matrix and sparse random matrix.
The dimensions and distribution of random projections matrices are controlled so as to preserve the pairwise distances between any two samples of the dataset. It is a general data set reduction method in which a higher dimensional data a projected on lower dimensional subspace so that we can get a lower size subspace maintaining the relative distances of the elements. The main idea behind random projection is Johnson-Lindenstrauss lemma1 in which it is stated that if points in a vector space are in sufficient high dimension and we project them on a suitably high dimensional space then the distances between points remains almost preserved. In random projection, the original d-dimensional data is projected to a k-dimensional (k X_{kXN}^{RP}=R_{kXd}X_{dXN} is the projection of the data onto a lower k-dimensional subspace.Random projection is computationally very simple: forming the random matrix "R" and projecting the $dXN$ data matrix X into K dimensions of order $O(dkN)$, and if the data matrix X is sparse with about c nonzero entries per column the complexity is of order $O(ckN)$.2
The random matrix R can be generated using Gaussian distribution like this:3 The first row is a random unit vector uniformly chosen from $S^{N-1}$. The second row is a random unit vector from the space orthogonal to the first row, the third row is a random unit vector from the space orthogonal to the first two rows, and so on. In this way of chooing R the following properties can be satisfied:

Spherical symmetry: For any orthogonal matrix $A \in O(N)$, RA and R have the same distribution.
Orthogonality: The rows of R are orthogonal to each other.
Normality: The rows of R are unit-length vectors.

Achlioptas4 shows that the Gaussian distribution can be replaced by a much simpler distribution such as
$$R_{i,j} = \sqrt{3} \begin{cases}
 +1 & with\ probability \frac{1}{6}\\
 0 & with\ probability \frac{2}{3}\\
 -1 & with\ probability \frac{1}{6} \end{cases}$$ This is efficient for database applications because the computations can be performed using integer arithmetic.
References

Fodor,I. (2002) "A survey of dimension reduction techniques". Center for Applied Scientific Computing, Lawrence Livermore National, Technical Report UCRL-ID-148494
ADITYA KRISHNA MENON (2007) "Random projections and applications to dimensionality reduction". School of Information Technologies, The University of Sydney, Australia
ADITYA Ramdas "A Random Introduction To Random Projections". Carnegie Mellon University

"
Category:Machine learning Category:Dimension reduction



.↩
↩
↩
↩




