   Predicative programming      Predicative programming   Predicative programming is a methodology for program specification and refinement . The central idea of predicative programming is that each specification is a predicate (generally written as a boolean expression) that is true of acceptable behaviours and false of unacceptable behaviours. It follows that refinement is reversed implication universally quantified over behaviours:       (  P  ⊑  Q  )   ≡   (  ∀  b  ⋅  Q  ⇒  P  )      fragments   fragments  normal-(  P  square-image-of-or-equals  Q  normal-)     fragments  normal-(  for-all  b  normal-⋅  Q  normal-⇒  P  normal-)     (P\sqsubseteq Q)\equiv(\forall b\cdot Q\Rightarrow P)   Commands in a programming language are considered to be a special case of specifications—special only because they are compilable. For example in an environment where the program variables are   x   x   x   ,   y   y   y   , and   z   z   z   , the command    x  :=   y  +  1      assign  x    y  1     x:=y+1\,\!   is considered equivalent to the predicate (represented here by a boolean expression)       x  ′   =    y  +  1   ∧   y  ′    =   y  ∧   z  ′    =  z         superscript  x  normal-′       y  1    superscript  y  normal-′           y   superscript  z  normal-′         z     x^{\prime}=y+1\land y^{\prime}=y\land z^{\prime}=z   in which   x   x   x   ,   y   y   y   , and   z   z   z   represent the initial values of the program variables and    x  ′     superscript  x  normal-′    x^{\prime}   ,    y  ′     superscript  y  normal-′    y^{\prime}   , and    z  ′     superscript  z  normal-′    z^{\prime}   represent the final values of the program variables. Thus       x  ′   >  y  ⊑  x  :=   y  +  1          superscript  x  normal-′   y    square-image-of-or-equals    x    assign      y  1      x^{\prime}>y\sqsubseteq x:=y+1     Bibliography   E.C.R. Hehner, a Practical Theory of Programming , Springer-Verlag 1993. Most recent edition online at a Practical Theory of Programming .   External links   Publications by Eric Hehner .   "  Category:Formal methods  Category:Formal specification languages  Category:Logical calculi   