


Predicative programming




Predicative programming

Predicative programming is a methodology for program specification and refinement. The central idea of predicative programming is that each specification is a predicate (generally written as a boolean expression) that is true of acceptable behaviours and false of unacceptable behaviours. It follows that refinement is reversed implication universally quantified over behaviours:


 
  Commands in a programming language are considered to be a special case of specificationsâ€”special only because they are compilable. For example in an environment where the program variables are 
 
 
 
 , 
 
 
 
 , and 
 
 
 
 , the command 
 
 
 
  is considered equivalent to the predicate (represented here by a boolean expression)


 
  in which 
 
 
 
 , 
 
 
 
 , and 
 
 
 
  represent the initial values of the program variables and 
 
 
 
 , 
 
 
 
 , and 
 
 
 
  represent the final values of the program variables. Thus



Bibliography

E.C.R. Hehner, a Practical Theory of Programming, Springer-Verlag 1993. Most recent edition online at a Practical Theory of Programming.

External links

Publications by Eric Hehner.

"
Category:Formal methods Category:Formal specification languages Category:Logical calculi


