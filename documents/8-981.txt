   OFFSystem      OFFSystem   The Owner-Free File System ( OFF System , or OFF for short) is a peer-to-peer  distributed file system in which all shared files are represented by randomized multi-used data blocks. Instead of anonymizing the network, the data blocks are anonymized and therefore, only data garbage is ever exchanged and stored and no forwarding via intermediate nodes is required. OFF claims to have been created with the expressed intention "to cut off some gangrene-infested bits of the copyright industry." 1  History  OFF development started within the hacktivism group The Big Hack in 2003 by the hackers Cheater512, CaptainMorgan, Aqlo and WhiteRaven. In 2004, a rudimentary version was finished, written in PHP, which was distributed as two demo CDs. Following these, SpectralMorning re-implemented the functionality in 2004 in C++ , which lead to the current "mainline" OFF client.  On August 14, 2006, CaptainMorgan posted a letter of "closing" addressed to the "Copyright Industry Associations of America", such as the RIAA and MPAA , stating that they have created OFF with the purpose of ending "all of your problems with consumer copyright infringement." 2   In 2008, the network consisted of around 50 nodes . On April 11, 2008, a beta test was held 3 with a network size of over 100 nodes. Since SpectralMorning stopped work on OFF in late 2008, only minor bug fix releases were made to mainline OFF .  Starting from 2007, an alternative, but compatible client was developed, called BlocksNet. Written in Ruby and well-maintained, it saw major improvements over recent time. It has been under development until 2011. 4  The client OFFLoad is a fork from mainline OFF , which seemingly adds no features. Reasons for the fork are unclear. Another distantly related program is Monolith , which uses a similar principle to OFF . It was created after OFF and features no multi-use of blocks and no networking.  Functional Principle  The OFF System is a kind of anonymous, fully decentralized P2P file sharing program and network. In contrast to other anonymous file sharing networks, which derive their anonymity from forwarding their data blocks via intermediate network nodes, OFF derives its anonymity from anonymizing the data files. 5 Thus, the system refers to itself as a brightnet to contrast its method of operation with that of private file sharing systems known as darknets and with traditional, forwarding anonymous P2P programs.  Store Procedure  In order to store a file into the local OFF storage, resp. block cache , choose the tuple size   t   t   t   (default 3), split the source file   s   s   s   into blocks    s  i     subscript  s  i    s_{i}   of size 128 KiB (pad with random data to fit) and for each, do the following:   Select    t  -  1      t  1    t-1   blocks for use as randomizer blocks, or for short, randomizers , from the existing OFF cache, which have not been used in previous iterations. If not enough randomizers exist in the cache, generate them using a random number generator.  Calculate     o  i   =    s  i   ⊕   r  1   ⊕   r  2   ⊕  …  ⊕   r   t  -  1          subscript  o  i    direct-sum   subscript  s  i    subscript  r  1    subscript  r  2   normal-…   subscript  r    t  1       o_{i}=s_{i}\oplus r_{1}\oplus r_{2}\oplus...\oplus r_{t-1}   and store the resulting block    o  i     subscript  o  i    o_{i}   in the cache,   ⊕   direct-sum   \oplus   being the XOR operation.  Update the descriptor list , which contains the information on how to restore each source block    s  i     subscript  s  i    s_{i}   , with a new entry, which is a set of size   t   t   t       {   o  n   ,   r  1   ,    r  2   …   r   t  -  1     }      subscript  o  n    subscript  r  1      subscript  r  2   normal-…   subscript  r    t  1       \{o_{n},r_{1},r_{2}...r_{t-1}\}   .   Finally, store the descriptor list in an own block (or blocks, if the list is larger than 128 KiB) and insert these blocks    d  i     subscript  d  i    d_{i}   into the block cache and generate an OFF URL for referencing the source file and output it to the user or into the local OFF URL database.  Retrieve Procedure  To retrieve, obtain the descriptor block or blocks and for each contained set of size   t   t   t   , do the following:   Obtain the listed blocks     b  1   ,    b  2   …   b  t        subscript  b  1      subscript  b  2   normal-…   subscript  b  t      b_{1},b_{2}...b_{t}   . Though they have no identity any more at this point, they could be called     o  i   ,   r  1   ,    r  2   …   r   t  -  1         subscript  o  i    subscript  r  1      subscript  r  2   normal-…   subscript  r    t  1       o_{i},r_{1},r_{2}...r_{t-1}   .  Perform     s  i   =    b  1   ⊕   b  2   ⊕  …  ⊕   b  t         subscript  s  i    direct-sum   subscript  b  1    subscript  b  2   normal-…   subscript  b  t      s_{i}=b_{1}\oplus b_{2}\oplus...\oplus b_{t}   and output the resulting source data block    s  i     subscript  s  i    s_{i}   to a viewer program or to storage.   Anonymity  OFF derives its anonymity from the following:   No source file content is stored in the block cache, only blocks that consist of provably random data.  No source file content is searched for on the network.  No source file content is transmitted over the network.  (No block in the cache is copyrightable by itself, because numbers - however large - cannot be subject to copyright (and neither would be small parts of a copyrighted work).)  The original uploader remains unknown, because blocks are dispersed into the network and therefore downloading is done from multiple sources.  During disperse, the usage of the block cannot be stated, because blocks are re-used in other contexts to re-assemble other source file blocks. (TODO that is true also for retrieve)  (No block can be copyrighted without logical contradictions, because blocks used for re-assembling a source file block are re-used for re-assembly of other source file blocks. It is undecidable who would have copyright on a block, which has several meanings. Everyone would have copyright on everything.)  If the OFF -internal search function is used, search terms are untraceable to its originator, because the search request is forwarded to the next node and its results back to that node instead of directly to the originator. It is thus not possible to decide whether a node is the originating node or a node doing a search request on behalf of another node.  TODO add digital copyright note   Efficiency  Because OFF anonymizes the data blocks being exchanged instead of the network, no forwarding via intermediate nodes is required. Therefore, this method has a higher degree of efficiency than traditional, forwarding-based anonymous P2P systems.  The forwarding method requires that a data block is uploaded and downloaded several times before it reaches its destination, which happens between 5 and 15 times., 6 which, according to the resulting formula     s  *   (    h  i   +   h  o   +  1   )   *  2   -  s        s      h  i     h  o   1   2   s    s*(hi+ho+1)*2-s   , is equivalent to an overhead of 900 to 2900%, while the overhead of OFF without optimizations is about 200%. (   s   s   s   is the source file size,    h  i      h  i    hi   the inbound tunnel length and    h  o      h  o    ho   the outbound tunnel length. Plus 1 for the hop between the Outbound Endpoint and the Inbound Gateway .)  Efficiency can be further increased:   Re-use some of the result blocks    o  i     subscript  o  i    o_{i}   and randomizer blocks , which reduces the overhead to    s  *   (   t  -  1   )   *   e  100       s    t  1     e  100     s*(t-1)*\frac{e}{100}   , 7 where   s   s   s   is the source file size,   t   t   t   the tuple size and   e   e   e   the percentage of unrelated blocks used in the randomizing step during the store procedure. By default,   e   e   e   is chosen 75 (and   t   t   t   chosen 3), which leads to an overhead of 150%.  If some of the blocks required to fully retrieve, resp. re-assemble, the source file are already present in the block cache from other transfers or stored files because of the multi-use nature of OFF blocks, the degree of efficiency is increased further.  Use of the targeted store feature leads to the blocks of specific other files to be chosen as randomizers for this file with higher probability and therefore a reduction in overhead. This is especially useful when storing a group of related files.   See also   Anonymous P2P   References    External links   OFF System Development homepage  OFF System download ( Sourceforge )  On copyrightable numbers with an application to the Gesetzklageproblem - A detailed explanation of the mathematical principles behind the OFF System. (pdf)  OFF System support forum (deutsch) Support forum for OFF System.  OFF System support forum (english) Support forum for OFF System.   OFF implementations:   OFF System (reference implementation)  OFFLoad  BlocksNet ( secondary repository )   "  Category:Distributed file systems  Category:File sharing networks     OFF System ↩  http://thebighack.org/modules.php?op=modload&name; ;=News&file;=article&sid;=622&mode;=nestedℴ=0&thold;=0 "Closing Letter to the Copyright Industry Associations of America" - presenting the public release of the OFF System ↩  http://board.planetpeer.de/index.php/topic,4407.0.html Beta test announcement for 2008-04-11 of planetpeer.de and OFF developer Spectral Morning ↩  http://blocksnet.sf.net ↩  http://sourceforge.net/projects/offsystem/ OFF System homepage - technical part ↩  http://www.i2p2.de/how_tunnelrouting Explanation of tunnel length in I2P and its default settings, see "I2CP options" ↩  http://sourceforge.net/projects/offsystem/ OFF System source code and developer correspondence ↩     