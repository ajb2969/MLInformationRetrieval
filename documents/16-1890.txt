   Draft:Performance Comparisons of Spatial Rotations      Draft:Performance Comparisons of Spatial Rotations   Performance comparisons  This section discusses the performance implications of using quaternions versus other methods (axis/angle or rotation matrices) to perform rotations in 3D.  Results      Storage requirements     Method     Rotation matrix     Quaternion     Angle/axis     * Note: angle/axis can be stored as 3 elements by multiplying the unit rotation axis by half of the rotation angle, forming the logarithm of the quaternion, at the cost of additional calculations.      Performance comparison of rotation chaining operations     Method     Rotation matrices     Quaternions         Performance comparison of vector rotating operations 1     Method     Rotation matrix     Quaternions     Angle/axis     Used methods  There are three basic approaches to rotating a vector :   Compute the matrix product of a 3‚Äâ√ó‚Äâ3 rotation matrix    R   R   R   and the original 3‚Äâ√ó‚Äâ1 column matrix representing . This requires 3 √ó (3 multiplications + 2 additions) = 9 multiplications and 6 additions, the most efficient method for rotating a vector.  A rotation can be represented by a unit-length quaternion    ùê™  =   (  w  ,  )      fragments  q    fragments  normal-(  w  normal-,  normal-)     \mathbf{q}=(w,)   with scalar (real) part   w   w   w   and vector (imaginary) part . The rotation can be applied to a 3D vector  via the formula      v  ‚Üí   new   =    v  ‚Üí   +    2   r  ‚Üí    √ó   (     r  ‚Üí   √ó   v  ‚Üí    +   w   v  ‚Üí     )          subscript   normal-‚Üí  v   new      normal-‚Üí  v       2   normal-‚Üí  r         normal-‚Üí  r    normal-‚Üí  v      w   normal-‚Üí  v         \vec{v}_{\text{new}}=\vec{v}+2\vec{r}\times(\vec{r}\times\vec{v}+w\vec{v})   . This requires only 15 multiplications and 15 additions to evaluate (or 18 muls and 12 adds if the factor of 2 is done via multiplication.) This formula, originally thought to be used with axis/angle notation (Rodrigues' formula), can also be applied to quaternion notation. This yields the same result as the less efficient but more compact formula of quaternion multiplication      v  ‚Üí   new   =   q   v  ‚Üí    q   -  1          subscript   normal-‚Üí  v   new     q   normal-‚Üí  v    superscript  q    1       \vec{v}_{\text{new}}=q\vec{v}q^{-1}   .  Use the angle/axis formula to convert an angle/axis to a rotation matrix    R   R   R   then multiplying with a vector, or, similarly, use a formula to convert quaternion notation to a rotation matrix, then multiplying with a vector. Converting the angle/axis to   R   R   R   costs 12 multiplies, 2 function calls (sin, cos), and 10 add/subtracts; from item 1, rotating using   R   R   R   adds an additional 9 multiplications and 6 additions for a total of 21 multiplies, 16 add/subtracts, and 2 function calls (sin, cos). Converting a quaternion to   R   R   R   costs 12 multiplies and 12 add/subtracts; from item 1, rotating using   R   R   R   adds an additional 9 multiplications and 6 additions for a total of 21 multiplies and 18 add/subtracts.   References      "      Eberly, D., Rotation Representations and performance issues ‚Ü©     