


Merge sort




Merge sort

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In computer science, merge sort (also commonly spelled mergesort) is an O(n log n) comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Mergesort is a divide and conquer algorithm that was invented by John von Neumann in 1945.1 A detailed description and analysis of bottom-up mergesort appeared in a report by Goldstine and Neumann as early as 1948.2
Algorithm
 Conceptually, a merge sort works as follows:

Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted).
Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list.

Top-down implementation
Example C-like code using indices for top down merge sort algorithm that recursively splits the list (called runs in this example) into sublists until sublist size is 1, then merges those sublists to produce a sorted list. The copy back step could be avoided if the recursion alternated between two functions so that the direction of the merge corresponds with the level of recursion.
/* array A[] has the items to sort; array B[] is a work array */
 TopDownMergeSort(A[], B[], n)
 {
     TopDownSplitMerge(A, 0, n, B);
 }
 
 // iBegin is inclusive; iEnd is exclusive (A[iEnd] is not in the set)
 TopDownSplitMerge(A[], iBegin, iEnd, B[])
 {
     if(iEnd - iBegin < 2)                       // if run size == 1
         return;                                 //   consider it sorted
     // recursively split runs into two halves until run size == 1,
     // then merge them and return back up the call chain
     iMiddle = (iEnd + iBegin) / 2;              // iMiddle = mid point
     TopDownSplitMerge(A, iBegin,  iMiddle, B);  // split / merge left  half
     TopDownSplitMerge(A, iMiddle,    iEnd, B);  // split / merge right half
     TopDownMerge(A, iBegin, iMiddle, iEnd, B);  // merge the two half runs
     CopyArray(B, iBegin, iEnd, A);              // copy the merged runs back to A
 }
 
 //  left half is A[iBegin :iMiddle-1]
 // right half is A[iMiddle:iEnd-1   ]
 TopDownMerge(A[], iBegin, iMiddle, iEnd, B[])
 {
     i0 = iBegin, i1 = iMiddle;
     
     // While there are elements in the left or right runs
     for (j = iBegin; j < iEnd; j++) {
         // If left run head exists and is <= existing right run head.
         if (i0 < iMiddle && (i1 >= iEnd || A[i0] <= A[i1]))
             B[j] = A[i0];
             i0 = i0 + 1;
         else
             B[j] = A[i1];
             i1 = i1 + 1;    
     } 
 }
 
 CopyArray(B[], iBegin, iEnd, A[])
 {
     for(k = iBegin; k < iEnd; k++)
         A[k] = B[k];
 }
Bottom-up implementation
Example C like code using indices for bottom up merge sort algorithm which treats the list as an array of n sublists (called runs in this example) of size 1, and iteratively merges sub-lists back and forth between two buffers:
void BottomUpMerge(A[], iLeft, iRight, iEnd, B[])
 {
   i0 = iLeft;
   i1 = iRight;
   j;
 
   /* While there are elements in the left or right runs */
   for (j = iLeft; j < iEnd; j++)
     {
       /* If left run head exists and is <= existing right run head */
       if (i0 < iRight && (i1 >= iEnd || A[i0] <= A[i1]))
         {
           B[j] = A[i0];
           i0 = i0 + 1;
         }
       else
         {
           B[j] = A[i1];
           i1 = i1 + 1;
         }
     }
 }
 
 void CopyArray(B[], A[], n)
 {
     for(i = 0; i < n; i++)
         A[i] = B[i];
 }
 
 /* array A[] has the items to sort; array B[] is a work array */
 void BottomUpSort(A[], B[], n)
 {
   /* Each 1-element run in A is already "sorted". */
   /* Make successively longer sorted runs of length 2, 4, 8, 16... until whole array is sorted. */
   for (width = 1; width < n; width = 2 * width)
     {
       /* Array A is full of runs of length width. */
       for (i = 0; i < n; i = i + 2 * width)
         {
           /* Merge two runs: A[i:i+width-1] and A[i+width:i+2*width-1] to B[] */
           /* or copy A[i:n-1] to B[] ( if(i+width >= n) ) */
           BottomUpMerge(A, i, min(i+width, n), min(i+2*width, n), B);
         }
       /* Now work array B is full of runs of length 2*width. */
       /* Copy array B to array A for next iteration. */
       /* A more efficient implementation would swap the roles of A and B */
       CopyArray(B, A, n);
       /* Now array A is full of runs of length 2*width. */
     }
 }
Top-down implementation using lists
Pseudocode for top down merge sort algorithm which recursively divides the input list into smaller sublists until the sublists are trivially sorted, and then merges the sublists while returning up the call chain.
function merge_sort(list m)
    // Base case. A list of zero or one elements is sorted, by definition.
    if length(m) merge function merges the left and right sublists.
function merge(left, right)
    var list result
    while notempty(left) and notempty(right)
        if first(left) ⌈lg n⌉ + 1), which is between (n lg n - n + 1) and (n lg n + n + O(lg n)).3
For large n and a randomly ordered input list, merge sort's expected (average) number of comparisons approaches α·n fewer than the worst case where 
 
 

In the worst case, merge sort does about 39% fewer comparisons than quicksort does in the average case. In terms of moves, merge sort's worst case complexity is O(n log n)—the same complexity as quicksort's best case, and merge sort's best case takes about half as many iterations as the worst case.
Merge sort is more efficient than quicksort for some types of lists if the data to be sorted can only be efficiently accessed sequentially, and is thus popular in languages such as Lisp, where sequentially accessed data structures are very common. Unlike some (efficient) implementations of quicksort, merge sort is a stable sort.
Merge sort's most common implementation does not sort in place ; therefore, the memory size of the input must be allocated for the sorted output to be stored in (see below for versions that need only n/2 extra spaces).
Merge sort also has some demerits. One is its use of 2n locations; the additional n locations are commonly used because merging two sorted sets in place is more complicated and would need more comparisons and move operations. But despite the use of this space the algorithm still does a lot of work: The contents of m are first copied into left and right and later into the list result on each invocation of merge_sort (variable names according to the pseudocode above).
Variants
Variants of merge sort are primarily concerned with reducing the space complexity and the cost of copying.
A simple alternative for reducing the space overhead to n/2 is to maintain left and right as a combined structure, copy only the left part of m into temporary space, and to direct the merge routine to place the merged output into m. With this version it is better to allocate the temporary space outside the merge routine, so that only one allocation is needed. The excessive copying mentioned previously is also mitigated, since the last pair of lines before the return result statement (function '' merge ''in the pseudo code above) become superfluous.
One drawback of merge sort, when implemented on arrays, is its 
 
 
 
  working memory requirement. Several in-place variants have been suggested:

Katajainen et al. present an algorithm that requires a constant amount of working memory: enough storage space to hold one element of the input array, and additional space to hold 
 
 
 
  pointers into the input array. They achieve an 
 
 
 
  time bound with small constants, but their algorithm is not stable.4
Several attempts have been made at producing an in-place merge algorithm that can be combined with a standard (top-down or bottom-up) merge sort to produce an in-place merge sort. In this case, the notion of "in-place" can be relaxed to mean "taking logarithmic stack space", because standard merge sort requires that amount of space for its own stack usage. It was shown by Geffert et al. that in-place, stable merging is possible in 
 
 
 
  time using a constant amount of scratch space, but their algorithm is complicated and has high constant factors: merging arrays of length 
 
 
 
  and 
 
 
 
  can take 
 
 
 
  moves.5 Other in-place algorithms include SymMerge, which takes 
 
 
 
  time in total.6 Plugging such an algorithm into merge sort increases its complexity to the non-linearithmic, but still quasilinear, .

An alternative to reduce the copying into multiple lists is to associate a new field of information with each key (the elements in m are called keys). This field will be used to link the keys and any associated information together in a sorted list (a key and its related information is called a record). Then the merging of the sorted lists proceeds by changing the link values; no records need to be moved at all. A field which contains only a link will generally be smaller than an entire record so less space will also be used. This is a standard sorting technique, not restricted to merge sort.
A variant named binary merge sort uses a binary insertion sort to sort groups of 32 elements, followed by a final sort using merge sort. It combines the speed of insertion sort on small data sets with the speed of merge sort on large data sets.7
Use with tape drives
 An external merge sort is practical to run using disk or tape drives when the data to be sorted is too large to fit into memory. External sorting explains how merge sort is implemented with disk drives. A typical tape drive sort uses four tape drives. All I/O is sequential (except for rewinds at the end of each pass). A minimal implementation can get by with just 2 record buffers and a few program variables.
Naming the four tape drives as A, B, C, D, with the original data on A, and using only 2 record buffers, the algorithm is similar to Bottom-up implementation, using pairs of tape drives instead of arrays in memory. The basic algorithm can be described as follows:

Merge pairs of records from A; writing two-record sublists alternately to C and D.
Merge two-record sublists from C and D into four-record sublists; writing these alternately to A and B.
Merge four-record sublists from A and B into eight-record sublists; writing these alternately to C and D
Repeat until you have one list containing all the data, sorted --- in log2(n) passes.

Instead of starting with very short runs, usually a hybrid algorithm is used, where the initial pass will read many records into memory, do an internal sort to create a long run, and then distribute those long runs onto the output set. The step avoids many early passes. For example, an internal sort of 1024 records will save 9 passes. The internal sort is often large because it has such a benefit. In fact, there are techniques that can make the initial runs longer than the available internal memory.8
A more sophisticated merge sort that optimizes tape (and disk) drive usage is the polyphase merge sort.
Optimizing merge sort
On modern computers, locality of reference can be of paramount importance in software optimization, because multilevel memory hierarchies are used. Cache-aware versions of the merge sort algorithm, whose operations have been specifically chosen to minimize the movement of pages in and out of a machine's memory cache, have been proposed. For example, the  algorithm stops partitioning subarrays when subarrays of size S are reached, where S is the number of data items fitting into a CPU's cache. Each of these subarrays is sorted with an in-place sorting algorithm such as insertion sort, to discourage memory swaps, and normal merge sort is then completed in the standard recursive fashion. This algorithm has demonstrated better performance on machines that benefit from cache optimization.   suggested an alternative version of merge sort that uses constant additional space. This algorithm was later refined. 
Also, many applications of external sorting use a form of merge sorting where the input get split up to a higher number of sublists, ideally to a number for which merging them still makes the currently processed set of pages fit into main memory.
Parallel merge sort
Merge sort parallelizes well due to use of the divide-and-conquer method. Several parallel variants are discussed in the third edition of Cormen, Leiserson, Rivest, and Stein's Introduction to Algorithms.9 The first of these can be very easily expressed in a pseudocode with fork and join keywords:
/* inclusive/exclusive indices */
procedure mergesort(A, lo, hi):
    if lo+1 $Θ( n )$ time, which is somewhat faster than the serial version's 

 time, but still has only 

 parallelism.  A parallel merge algorithm to not only parallelize the recursive division of the array, but also the merge operation leads to a better parallel sort with parallelism 

.  Such a sort can perform well in practice when combined with a fast stable sequential sort, such as insertion sort, and a fast sequential merge as a base case for merging small arrays.10 Merge sort was one of the first sorting algorithms where optimal speed up was achieved, with Richard Cole using a clever subsampling algorithm to ensure O(1) merge.11 Other sophisticated parallel sorting algorithms can achieve the same or better time bounds with a lower constant. For example, in 1991 David Powers described a parallelized quicksort (and a related radix sort) that can operate in O(log n) time on a CRCW PRAM with n processors by performing partitioning implicitly.12 Powers13 further shows that a pipelined version of Batcher's Bitonic Mergesort at O(log2n) time on a butterfly sorting network is in practice actually faster than his O(log n) sorts on a PRAM, and he provides detailed discussion of the hidden overheads in comparison, radix and parallel sorting.
Comparison with other sort algorithms
Although heapsort has the same time bounds as merge sort, it requires only Θ(1) auxiliary space instead of merge sort's Θ(n). On typical modern architectures, efficient quicksort implementations generally outperform mergesort for sorting RAM-based arrays. On the other hand, merge sort is a stable sort and is more efficient at handling slow-to-access sequential media. Merge sort is often the best choice for sorting a linked list: in this situation it is relatively easy to implement a merge sort in such a way that it requires only Θ(1) extra space, and the slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible.
As of Perl 5.8, merge sort is its default sorting algorithm (it was quicksort in previous versions of Perl). In Java, the Arrays.sort() methods use merge sort or a tuned quicksort depending on the datatypes and for implementation efficiency switch to insertion sort when fewer than seven array elements are being sorted.14 Python uses Timsort, another tuned hybrid of merge sort and insertion sort, that has become the standard sort algorithm in Java SE 7,15 on the Android platform,16 and in GNU Octave.17
Notes
References



. Also Practical In-Place Mergesort. Also 1






External links

Animated Sorting Algorithms: Merge Sort – graphical demonstration and discussion of array-based merge sort
Animated Sorting Algorithms: Merge Sort - Allows stepping through the steps in the algorithm.
Dictionary of Algorithms and Data Structures: Merge sort
Mergesort applet with "level-order" recursive calls to help improve algorithm analysis
Open Data Structures - Section 11.1.1 - Merge Sort

no:Sorteringsalgoritme#Flettesortering"
Category:Sorting algorithms Category:Comparison sorts Category:Stable sorts Category:Articles with example pseudocode





The worst case number given here does not agree with that given in Knuth's Art of Computer Programming, Vol 3. The discrepancy is due to Knuth analyzing a variant implementation of merge sort that is slightly sub-optimal




Selection sort. Knuth's snowplow. Natural merge.

V. J. Duvanenko, "Parallel Merge Sort", Dr. Dobb's Journal, March 2011

Powers, David M. W. Parallelized Quicksort and Radixsort with Optimal Speedup, Proceedings of International Conference on Parallel Computing Technologies. Novosibirsk. 1991.
David M. W. Powers, Parallel Unification: Practical Complexity, Australasian Computer Architecture Workshop, Flinders University, January 1995
OpenJDK Subversion






