   Double pushout graph rewriting      Double pushout graph rewriting   In computer science , double pushout graph rewriting or (DPO graph rewriting) refers to a mathematical framework for graph rewriting . It was introduced as one of the first algebraic approaches to graph rewriting in the article "Graph-grammars: An algebraic approach" (1973). 1 It has since been generalized to allow rewriting structures which are not graphs, and to handle negative application conditions, 2 among other extensions.  Definition  A DPO graph transformation system (or graph grammar) consists of a finite graph , which is the starting state, and a finite or countable set of labeled spans in the category of finite graphs and graph homomorphisms, which serve as derivation rules. The rule spans are generally taken to be composed of monomorphisms , but the details can vary. 3  Rewriting is performed in two steps: deletion and addition.  After a match from the left hand side to   G   G   G   is fixed, nodes and edges that are not in the right hand side are deleted. The right hand side is then glued in.  Gluing graphs is in fact a pushout construction in the category of graphs, and the deletion is the same as finding a pushout complement, hence the name.  Uses  Double pushout graph rewriting allows the specification of graph transformations by specifying a pattern of fixed size and composition to be found and replaced, where part of the pattern can be preserved. The application of a rule is potentially non-deterministic: several distinct matches can be possible. These can be non-overlapping, or share only preserved items, thus showing a kind of concurrency known as parallel independence, 4 or they may be incompatible, in which case either the applications can sometimes be executed sequentially, or one can even preclude the other.  It can be used as a language for software design and programming (usually a variant working on richer structures than graphs is chosen). Termination for DPO graph rewriting is undecidable because the Post correspondence problem can be reduced to it. 5  DPO graph rewriting can be viewed as a generalization of Petri nets . 6  Generalization  Axioms have been sought to describe categories in which DPO rewriting will work. One possibility is the notion of an adhesive category , which also enjoys many closure properties. Related notions are HLR systems, quasi-adhesive categories and   ℳ   ℳ   \mathcal{M}   -adhesive categories, adhesive HLR categories. 7  The concepts of adhesive category and HLR system are related (an adhesive category with coproducts is a HLR system 8 ).  Hypergraph , typed graph and attributed graph rewriting, 9 for example, can be handled because they can be cast as adhesive HLR systems.  Notes    "  Category:Graph algorithms  Category:Graph rewriting     "Graph-grammars: An algebraic approach", Ehrig, Hartmut and Pfender, Michael and Schneider, Hans-Jürgen, Switching and Automata Theory, 1973. SWAT'08. IEEE Conference Record of 14th Annual Symposium on, pp. 167-180, 1973, IEEE ↩  "Constraints and application conditions: From graphs to high-level structures", Ehrig, Ehrig, Habel and Pennemann, Graph transformations, pp. 287--303, Springer ↩  "Double-pushout graph transformation revisited", Habel, Annegret and Müller, Jürgen and Plump, Detlef, Mathematical Structures in Computer Science, vol. 11, no. 05., pp. 637--688, 2001, Cambridge University Press ↩  "Concurrent computing: from Petri nets to graph grammars", Corradini, Andrea, ENTCS, vol. 2, pp. 56--70, 1995, Elsevier ↩  , "Termination of graph rewriting is undecidable", Detlef Plump, Fundamenta Informaticae, vol. 33, no. 2, pp. 201--209, 1998, IOS Press ↩   Hartmut Ehrig and Annegret Habel and Julia Padberg and Ulrike Prange, "Adhesive high-level replacement categories and systems", 2004, Springer ↩  "Adhesive categories", Stephen Lack and Paweł Sobociński, in Foundations of software science and computation structures , pp. 273--288, Springer 2004 ↩  "Fundamentals of Algebraic Graph Transformation", Hartmut Ehrig, Karsten Ehrig, Ulrike Prange and Gabriele Taentzer ↩     