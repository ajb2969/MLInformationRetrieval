


CTL*




CTL*

CTL* is a superset of computational tree logic (CTL) and linear temporal logic (LTL). It freely combines path quantifiers and temporal operators. Like CTL, CTL* is a branching time logic. The formal semantics of CTL* formulae are defined with respect to a given Kripke structure.
History
LTL has been proposed for the verification of computer programs first by Amir Pnueli in 1977. Four years later in 1981 E. M. Clarke and E. A. Emerson invented CTL and CTL model checking. CTL* was defined by E. A. Emerson and Joseph Y. Halpern in 1986.
Interestingly, CTL and LTL have been developed independently before CTL*. Both sublogics have become standards in the model checking community, while CTL* is of practical importance because it provides an expressive testbed for representing and comparing these and other logics. This is surprising because the computational complexity of model checking in CTL* is not worse than that of LTL: they both lie in PSPACE.
Syntax
The language of well-formed CTL* formulae is generated by the following unambiguous (wrt bracketing) context-free grammar:






where 
 
 
 
  ranges over a set of atomic formulas. Valid CTL*-formulae are built using the nonterminal 
 
 
 
 
 . These formulae are called state formulae, while those created by the symbol 
 
 
 
  are called path formulae. (The above grammar contains some redundancies; for example 
 
 
 
  as well as implication and equivalence can be defined as just for Boolean algebras (or propositional logic) from negation and conjunction, and the temporal operators X and U are sufficient to define the other two.)
The operators basically are the same as in CTL. However, in CTL, every temporal operator (
 
 
 
 ) has to be directly preceded by a quantifier, while in CTL* this is not required. The universal path quantifier may be defined in CTL* in the same way as for classical predicate calculus

 
 , although this in not possible in the CTL fragment.
Examples of formulae

CTL* formula that is neither in LTL or in CTL
 
 

LTL formula that is not in CTL
 
 

CTL formula that is not in LTL
 
 

CTL* formula that is in CTL and LTL
 
 


Remark: When taking LTL as subset of CTL*, any LTL formula is implicitly prefixed with the universal path quantifier 
 
 

Semantics
The semantics of CTL* are defined with respect to some Kripke structure. As the names imply, state formulae are interpreted with respect to the states of this structure, while path formulae are interpreted over paths on it.
State formulae
If a state 
 
 
 
 
  of the Kripke structure satisfies a state formula 
 
 
 
  it is denoted 
 
 
 
 . This relation is defined inductively as follows:
























 
 
  for all paths 
 
 
 
  starting in 
 
 



 
  for some path 
 
 
 
  starting in 
 
 


Path formulae
The satisfaction relation 
 
 
 
  for path formulae 
 
 
 
  and a path 
 
 
 
  is also defined inductively. For this, let 
 
 
 
  denote the sub-path 
 
 
 
 
 :
































See also

Temporal logic
Kripke structure
Model checking
Reo Coordination Language

References

Amir Pnueli: The temporal logic of programs. Proceedings of the 18th Annual Symposium on Foundations of Computer Science (FOCS), 1977, 46–57. DOI= 10.1109/SFCS.1977.32
E. Allen Emerson, Joseph Y. Halpern: "Sometimes" and "not never" revisited: on branching versus linear time temporal logic. J. ACM 33, 1 (Jan. 1986), 151–178. DOI= http://doi.acm.org/10.1145/4904.4999
Ph. Schnoebelen: The Complexity of Temporal Logic Model Checking. Advances in Modal Logic 2002: 393–436

External links

CTL Teaching slides of professor Alessandro Artale at the Free University of Bozen-Bolzano

"
Category:Logic in computer science Category:Temporal logic


