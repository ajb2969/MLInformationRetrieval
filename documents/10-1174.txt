   Queue automaton      Queue automaton   A queue machine or queue automaton is a finite state machine with the ability to store and retrieve data from an infinite-memory queue . It is a model of computation equivalent to a Turing machine , and therefore it can process any formal language .  Theory  We define a queue machine by the six-tuple      M  =   (  Q  ,  Σ  ,  Γ  ,  $  ,  s  ,  δ  )       M   Q  normal-Σ  normal-Γ  currency-dollar  s  δ     M=(Q,\Sigma,\Gamma,\$,s,\delta)   where       Q    Q   \,Q   is a finite set of states ;       Σ   ⊂  Γ      normal-Σ  normal-Γ    \,\Sigma\subset\Gamma   is the finite set of the input alphabet ;      Γ    normal-Γ   \,\Gamma   is the finite queue alphabet ;      $  ∈   Γ  -  Σ       currency-dollar    normal-Γ  normal-Σ     \,\$\in\Gamma-\Sigma   is the initial queue symbol ;       s   ∈  Q      s  Q    \,s\in Q   is the start state ;       δ   :    Q  ×  Γ   →   Q  ×   Γ  *        normal-:  δ   normal-→    Q  normal-Γ     Q   superscript  normal-Γ        \,\delta:Q\times\Gamma\rightarrow Q\times\Gamma^{*}   is the transition function .   We define the current status of the machine by a configuration , an ordered pair of its state and queue contents     (  q  ,  γ  )   ∈   Q  ×   Γ  *         q  γ     Q   superscript  normal-Γ       \,(q,\gamma)\in Q\times\Gamma^{*}   (note     Γ   *     superscript  normal-Γ     \,\Gamma^{*}   defines the Kleene closure or set of all supersets of    Γ    normal-Γ   \,\Gamma   ). The starting configuration on an input string    x    x   \,x   is defined as    (  s  ,   x  $   )     s    x  currency-dollar     \,(s,x\$)   , and the transition    →  M  1     superscript   subscript  normal-→  M   1    \rightarrow_{M}^{1}   from one configuration to the next is defined as:       (  p  ,   A  α   )    →  M  1    (  q  ,   α  γ   )       superscript   subscript  normal-→  M   1    p    A  α     q    α  γ      \,(p,A\alpha)\rightarrow_{M}^{1}(q,\alpha\gamma)     where   A   A   A   is a symbol from the queue alphabet,   α   α   \alpha   is a sequence of queue symbols (    α  ∈   Γ  *       α   superscript  normal-Γ      \alpha\in\Gamma^{*}   ), and     (  q  ,  γ  )   =   δ   (  p  ,  A  )         q  γ     δ   p  A      (q,\gamma)=\delta(p,A)   . Note the "first-in-first-out" property of the queue in the relation.  The machine accepts a string     x   ∈   Σ  *       x   superscript  normal-Σ      \,x\in\Sigma^{*}   if after a (possibly infinite) number of transitions the starting configuration evolves to exhaust the string (reaching a null string    ϵ    ϵ   \,\epsilon   ), or      (  s  ,   x  $   )    →  M  *    (  q  ,  ϵ  )    .      superscript   subscript  normal-→  M      s    x  currency-dollar     q  ϵ     \,(s,x\$)\rightarrow_{M}^{*}(q,\epsilon).    1  Turing completeness  We can prove that a queue machine is equivalent to a Turing machine by showing that a queue machine can simulate a Turing machine and vice versa.  A Turing machine can be simulated by a queue machine that keeps a copy of the Turing machine's contents in its queue at all times, with two special markers: one for the TM's head position, and one for the end of the tape; its transitions simulate those of the TM by running through the whole queue, popping off each of its symbols and re-enqueing either the popped symbol, or, near the head position, the equivalent of the TM transition's effect.  A queue machine can be simulated by a Turing machine, but more easily by a multi-tape Turing machine , which is known to be equivalent to a normal single-tape machine. The simulating queue machine reads input on one tape and stores the queue on the second, with pushes and pops defined by simple transitions to the beginning and end symbols of the tape. 2 A formal proof of this is often an exercise in theoretical computer science courses.  Applications  Queue machines offer a simple model on which to base computer architectures , 3 4  programming languages , or algorithms . 5 6  See also   Computability  Turing machine equivalents  Deterministic finite automaton  Pushdown automaton  Tag system  Manufactoria , a browser flash game tasking the player with implementation of various algorithms using a queue machine model.   References  "  Category:Automata theory  Category:Models of computation     ↩  ↩  ↩  ↩  ↩  ↩     