   Markov decision process      Markov decision process   Markov decision processes (MDPs) , named after Andrey Markov , provide a mathematical framework for modeling decision making in situations where outcomes are partly random and partly under the control of a decision maker. MDPs are useful for studying a wide range of optimization problems solved via dynamic programming and reinforcement learning . MDPs were known at least as early as the 1950s (cf. Bellman 1957). A core body of research on Markov decision processes resulted from Ronald A. Howard 's book published in 1960, Dynamic Programming and Markov Processes . They are used in a wide area of disciplines, including robotics , automated control , economics , and manufacturing .  More precisely, a Markov Decision Process is a discrete time  stochastic  control process. At each time step, the process is in some state   s   s   s   , and the decision maker may choose any action   a   a   a   that is available in state   s   s   s   . The process responds at the next time step by randomly moving into a new state    s  ′     superscript  s  normal-′    s^{\prime}   , and giving the decision maker a corresponding reward     R  a    (  s  ,   s  ′   )        subscript  R  a    s   superscript  s  normal-′      R_{a}(s,s^{\prime})   .  The probability that the process moves into its new state    s  ′     superscript  s  normal-′    s^{\prime}   is influenced by the chosen action. Specifically, it is given by the state transition function     P  a    (  s  ,   s  ′   )        subscript  P  a    s   superscript  s  normal-′      P_{a}(s,s^{\prime})   . Thus, the next state    s  ′     superscript  s  normal-′    s^{\prime}   depends on the current state   s   s   s   and the decision maker's action   a   a   a   . But given   s   s   s   and   a   a   a   , it is conditionally independent of all previous states and actions; in other words, the state transitions of an MDP process satisfies the Markov property .  Markov decision processes are an extension of Markov chains ; the difference is the addition of actions (allowing choice) and rewards (giving motivation). Conversely, if only one action exists for each state and all rewards are the same (e.g., zero), a Markov decision process reduces to a Markov chain .  Definition  A Markov decision process is a 5- tuple     (  S  ,  A  ,    P  ⋅    (  ⋅  ,  ⋅  )    ,    R  ⋅    (  ⋅  ,  ⋅  )    ,  γ  )     S  A     subscript  P  normal-⋅    normal-⋅  normal-⋅       subscript  R  normal-⋅    normal-⋅  normal-⋅    γ    (S,A,P_{\cdot}(\cdot,\cdot),R_{\cdot}(\cdot,\cdot),\gamma)   , where      S   S   S   is a finite set of states,     A   A   A   is a finite set of actions (alternatively,    A  s     subscript  A  s    A_{s}   is the finite set of actions available from state   s   s   s   ),        P  a    (  s  ,   s  ′   )    =   Pr   (    s   t  +  1    =   s  ′    ∣    s  t   =  s   ,    a  t   =  a   )           subscript  P  a    s   superscript  s  normal-′      Pr     subscript  s    t  1     superscript  s  normal-′       subscript  s  t   s      subscript  a  t   a      P_{a}(s,s^{\prime})=\Pr(s_{t+1}=s^{\prime}\mid s_{t}=s,a_{t}=a)   is the probability that action   a   a   a   in state   s   s   s   at time   t   t   t   will lead to state    s  ′     superscript  s  normal-′    s^{\prime}   at time    t  +  1      t  1    t+1   ,       R  a    (  s  ,   s  ′   )        subscript  R  a    s   superscript  s  normal-′      R_{a}(s,s^{\prime})   is the immediate reward (or expected immediate reward) received after transition to state    s  ′     superscript  s  normal-′    s^{\prime}   from state   s   s   s   ,      γ  ∈   [  0  ,  1  ]       γ   0  1     \gamma\in[0,1]   is the discount factor, which represents the difference in importance between future rewards and present rewards.   (Note: The theory of Markov decision processes does not state that   S   S   S   or   A   A   A   are finite, but the basic algorithms below assume that they are finite.)  Problem  The core problem of MDPs is to find a "policy" for the decision maker: a function   π   π   \pi   that specifies the action    π   (  s  )       π  s    \pi(s)   that the decision maker will choose when in state   s   s   s   . Note that once a Markov decision process is combined with a policy in this way, this fixes the action for each state and the resulting combination behaves like a Markov chain .  The goal is to choose a policy   π   π   \pi   that will maximize some cumulative function of the random rewards, typically the expected discounted sum over a potentially infinite horizon:       ∑   t  =  0   ∞     γ  t    R   a  t     (   s  t   ,   s   t  +  1    )        subscript   superscript       t  0       superscript  γ  t    subscript  R   subscript  a  t      subscript  s  t    subscript  s    t  1        \sum^{\infty}_{t=0}{\gamma^{t}R_{a_{t}}(s_{t},s_{t+1})}   (where we choose     a  t   =   π   (   s  t   )         subscript  a  t     π   subscript  s  t      a_{t}=\pi(s_{t})   )  where    γ    γ   \ \gamma   is the discount factor and satisfies    0  ≤   γ   <  1        0  γ       1     0\leq\ \gamma\ <1   . (For example,    γ  =   1  /   (   1  +  r   )        γ    1    1  r      \gamma=1/(1+r)   when the discount rate is r.)   γ   γ   \gamma   is typically close to 1.  Because of the Markov property, the optimal policy for this particular problem can indeed be written as a function of   s   s   s   only, as assumed above.  Algorithms  MDPs can be solved by linear programming or dynamic programming . In what follows we present the latter approach.  Suppose we know the state transition function   P   P   P   and the reward function   R   R   R   , and we wish to calculate the policy that maximizes the expected discounted reward.  The standard family of algorithms to calculate this optimal policy requires storage for two arrays indexed by state: value    V   V   V   , which contains real values, and policy    π   π   \pi   which contains actions. At the end of the algorithm,   π   π   \pi   will contain the solution and    V   (  s  )       V  s    V(s)   will contain the discounted sum of the rewards to be earned (on average) by following that solution from state   s   s   s   .  The algorithm has the following two kinds of steps, which are repeated in some order for all the states until no further changes take place. They are defined recursively as follows:       π   (  s  )    :=   arg    max  a    {    ∑   s  ′      P  a    (  s  ,   s  ′   )    (     R  a    (  s  ,   s  ′   )    +   γ  V   (   s  ′   )     )     }        assign    π  s       subscript   a     subscript    superscript  s  normal-′       subscript  P  a    s   superscript  s  normal-′         subscript  R  a    s   superscript  s  normal-′       γ  V   superscript  s  normal-′           \pi(s):=\arg\max_{a}\left\{\sum_{s^{\prime}}P_{a}(s,s^{\prime})\left(R_{a}(s,s%
 ^{\prime})+\gamma V(s^{\prime})\right)\right\}          V   (  s  )    :=    ∑   s  ′      P   π   (  s  )      (  s  ,   s  ′   )    (     R   π   (  s  )      (  s  ,   s  ′   )    +   γ  V   (   s  ′   )     )        assign    V  s     subscript    superscript  s  normal-′       subscript  P    π  s     s   superscript  s  normal-′         subscript  R    π  s     s   superscript  s  normal-′       γ  V   superscript  s  normal-′         V(s):=\sum_{s^{\prime}}P_{\pi(s)}(s,s^{\prime})\left(R_{\pi(s)}(s,s^{\prime})+%
 \gamma V(s^{\prime})\right)     Their order depends on the variant of the algorithm; one can also do them for all states at once or state by state, and more often to some states than others. As long as no state is permanently excluded from either of the steps, the algorithm will eventually arrive at the correct solution.  Notable variants  Value iteration  In value iteration (Bellman 1957), which is also called backward induction , the   π   π   \pi   function is not used; instead, the value of    π   (  s  )       π  s    \pi(s)   is calculated within    V   (  s  )       V  s    V(s)   whenever it is needed. Shapley's 1953 paper on stochastic games included as a special case the value iteration method for MDPs, but this was recognized only later on. 1  Substituting the calculation of    π   (  s  )       π  s    \pi(s)   into the calculation of    V   (  s  )       V  s    V(s)   gives the combined step:         V   i  +  1     (  s  )    :=    max  a    {    ∑   s  ′      P  a    (  s  ,   s  ′   )    (     R  a    (  s  ,   s  ′   )    +   γ   V  i    (   s  ′   )     )     }     ,     assign     subscript  V    i  1    s     subscript   a     subscript    superscript  s  normal-′       subscript  P  a    s   superscript  s  normal-′         subscript  R  a    s   superscript  s  normal-′       γ   subscript  V  i    superscript  s  normal-′          V_{i+1}(s):=\max_{a}\left\{\sum_{s^{\prime}}P_{a}(s,s^{\prime})\left(R_{a}(s,s%
 ^{\prime})+\gamma V_{i}(s^{\prime})\right)\right\},     where   i   i   i   is the iteration number. Value iteration starts at    i  =  0      i  0    i=0   and    V  0     subscript  V  0    V_{0}   as a guess of the value function. It then iterates, repeatedly computing    V   i  +  1      subscript  V    i  1     V_{i+1}   for all states   s   s   s   , until   V   V   V   converges with the left-hand side equal to the right-hand side (which is the " Bellman equation " for this problem).  Policy iteration  In policy iteration (Howard 1960), step one is performed once, and then step two is repeated until it converges. Then step one is again performed once and so on.  Instead of repeating step two to convergence, it may be formulated and solved as a set of linear equations.  This variant has the advantage that there is a definite stopping condition: when the array   π   π   \pi   does not change in the course of applying step 1 to all states, the algorithm is completed.  Modified policy iteration  In modified policy iteration (van Nunen, 1976; Puterman and Shin 1978), step one is performed once, and then step two is repeated several times. Then step one is again performed once and so on.  Prioritized sweeping  In this variant, the steps are preferentially applied to states which are in some way important - whether based on the algorithm (there were large changes in   V   V   V   or   π   π   \pi   around those states recently) or based on use (those states are near the starting state, or otherwise of interest to the person or program using the algorithm).  Extensions and generalizations  A Markov decision process is a stochastic game with only one player.  Partial observability  The solution above assumes that the state   s   s   s   is known when action is to be taken; otherwise    π   (  s  )       π  s    \pi(s)   cannot be calculated. When this assumption is not true, the problem is called a partially observable Markov decision process or POMDP.  A major advance in this area was provided by Burnetas and Katehakis in "Optimal adaptive policies for Markov decision processes". 2 In this work a class of adaptive policies that possess uniformly maximum convergence rate properties for the total expected finite horizon reward, were constructed under the assumptions of finite state-action spaces and irreducibility of the transition law. These policies prescribe that the choice of actions, at each state and time period, should be based on indices that are inflations of the right-hand side of the estimated average reward optimality equations.  Reinforcement learning  If the probabilities or rewards are unknown, the problem is one of reinforcement learning (Sutton and Barto, 1998).  For this purpose it is useful to define a further function, which corresponds to taking the action   a   a   a   and then continuing optimally (or according to whatever policy one currently has):         Q    (  s  ,  a  )    =    ∑   s  ′      P  a    (  s  ,   s  ′   )    (     R  a    (  s  ,   s  ′   )    +   γ  V   (   s  ′   )     )      .        Q   s  a      subscript    superscript  s  normal-′       subscript  P  a    s   superscript  s  normal-′         subscript  R  a    s   superscript  s  normal-′       γ  V   superscript  s  normal-′         \ Q(s,a)=\sum_{s^{\prime}}P_{a}(s,s^{\prime})(R_{a}(s,s^{\prime})+\gamma V(s^{%
 \prime})).     While this function is also unknown, experience during learning is based on    (  s  ,  a  )     s  a    (s,a)   pairs (together with the outcome    s  ′     superscript  s  normal-′    s^{\prime}   ); that is, "I was in state   s   s   s   and I tried doing   a   a   a   and    s  ′     superscript  s  normal-′    s^{\prime}   happened"). Thus, one has an array   Q   Q   Q   and uses experience to update it directly. This is known as Q‑learning .  Reinforcement learning can solve Markov decision processes without explicit specification of the transition probabilities; the values of the transition probabilities are needed in value and policy iteration. In reinforcement learning, instead of explicit specification of the transition probabilities, the transition probabilities are accessed through a simulator that is typically restarted many times from a uniformly random initial state. Reinforcement learning can also be combined with function approximation to address problems with a very large number of states.  Category theoretic interpretation  Other than the rewards, a Markov decision process    (  S  ,  A  ,  P  )     S  A  P    (S,A,P)   can be understood in terms of Category theory . Namely, let   𝒜   𝒜   \mathcal{A}   denote the free monoid with generating set A . Let Dist denote the Kleisli category of the Giry monad . Then a functor    𝒜  →  𝐃𝐢𝐬𝐭     normal-→  𝒜  𝐃𝐢𝐬𝐭    \mathcal{A}\to\mathbf{Dist}   encodes both the set S of states and the probability function P .  In this way, Markov decision processes could be generalized from monoids (categories with one object) to arbitrary categories. One can call the result    (  𝒞  ,  F  :  𝒞  →  𝐃𝐢𝐬𝐭     fragments  normal-(  C  normal-,  F  normal-:  C  normal-→  Dist    (\mathcal{C},F:\mathcal{C}\to\mathbf{Dist}   a context-dependent Markov decision process , because moving from one object to another in   𝒞   𝒞   \mathcal{C}   changes the set of available actions and the set of possible states.  Continuous-time Markov Decision Process  In discrete-time Markov Decision Processes, decisions are made at discrete time intervals. However, for Continuous-time Markov Decision Processes , decisions can be made at any time the decision maker chooses. In comparison to discrete-time Markov Decision Process, Continuous-time Markov Decision Process can better model the decision making process for a system that has continuous dynamics , i.e., the system dynamics is defined by partial differential equations (PDEs).  Definition  In order to discuss the continuous-time Markov Decision Process, we introduce two sets of notations:  If the state space and action space are finite,      𝒮   𝒮   \mathcal{S}   : State space;     𝒜   𝒜   \mathcal{A}   : Action space;      q   (  i  |  j  ,  a  )      fragments  q   fragments  normal-(  i  normal-|  j  normal-,  a  normal-)     q(i|j,a)        𝒮  ×  𝒜   →   △  𝒮      normal-→    𝒮  𝒜     normal-△  𝒮     \mathcal{S}\times\mathcal{A}\rightarrow\triangle\mathcal{S}   , transition rate function;      R   (  i  ,  a  )       R   i  a     R(i,a)        𝒮  ×  𝒜   →  ℝ     normal-→    𝒮  𝒜   ℝ    \mathcal{S}\times\mathcal{A}\rightarrow\mathbb{R}   , a reward function.   If the state space and action space are continuous,      𝒳   𝒳   \mathcal{X}   : State space.;     𝒰   𝒰   \mathcal{U}   : Space of possible control;      f   (  x  ,  u  )       f   x  u     f(x,u)        𝒳  ×  𝒰   →   △  𝒳      normal-→    𝒳  𝒰     normal-△  𝒳     \mathcal{X}\times\mathcal{U}\rightarrow\triangle\mathcal{X}   , a transition rate function;      r   (  x  ,  u  )       r   x  u     r(x,u)        𝒳  ×  𝒰   →  ℝ     normal-→    𝒳  𝒰   ℝ    \mathcal{X}\times\mathcal{U}\rightarrow\mathbb{R}   , a reward rate function such that     r   (   x   (  t  )    ,   u   (  t  )    )   d  t   =   d  R   (   x   (  t  )    ,   u   (  t  )    )          r     x  t     u  t    d  t     d  R     x  t     u  t       r(x(t),u(t))dt=dR(x(t),u(t))   , where    R   (  x  ,  u  )       R   x  u     R(x,u)   is the reward function we discussed in previous case.   Problem  Like the Discrete-time Markov Decision Processes, in Continuous-time Markov Decision Process we want to find the optimal policy or control which could give us the optimal expected integrated reward:      m  a  x   𝔼  u    [   ∫  0  ∞    γ  t   r   (  x   (  t  )   ,  u   (  t  )   )   )   d  t  |   x  0   ]     fragments  m  a  x    subscript  𝔼  u    fragments  normal-[   superscript   subscript   0      superscript  γ  t   r   fragments  normal-(  x   fragments  normal-(  t  normal-)   normal-,  u   fragments  normal-(  t  normal-)   normal-)   normal-)   d  t  normal-|   subscript  x  0   normal-]    max\quad\mathbb{E}_{u}[\int_{0}^{\infty}\gamma^{t}r(x(t),u(t)))dt|x_{0}]   Where    0  ≤  γ  <  1        0  γ       1     0\leq\gamma<1     Linear programming formulation  If the state space and action space are finite, we could use linear programming to find the optimal policy, which was one of the earliest approaches applied. Here we only consider the ergodic model, which means our continuous-time MDP becomes an ergodic continuous-time Markov Chain under a stationary policy . Under this assumption, although the decision maker can make a decision at any time at the current state, he could not benefit more by taking more than one action. It is better for him to take an action only at the time when system is transitioning from the current state to another state. Under some conditions,(for detail check Corollary 3.14 of Continuous-Time Markov Decision Processes ), if our optimal value function    V  *     superscript  V     V^{*}   is independent of state i, we will have the following inequality:      g  ≥  R   (  i  ,  a  )   +   ∑   j  ∈  S    q   (  j  |  i  ,  a  )   h   (  j  )   ∀  i  ∈   S   a  n   d   a  ∈  A   (  i  )      fragments  g   R   fragments  normal-(  i  normal-,  a  normal-)     subscript     j  S    q   fragments  normal-(  j  normal-|  i  normal-,  a  normal-)   h   fragments  normal-(  j  normal-)    for-all  i   S  a  n  d  a   A   fragments  normal-(  i  normal-)     g\geq R(i,a)+\sum_{j\in S}q(j|i,a)h(j)\quad\forall i\in S\,\,and\,\,a\in A(i)   If there exists a function   h   h   h   , then     V  ¯   *     superscript   normal-¯  V      \bar{V}^{*}   will be the smallest g satisfying the above equation. In order to find     V  ¯   *     superscript   normal-¯  V      \bar{V}^{*}   , we could use the following linear programming model:   Primal linear program(P-LP)       g  ;    g   \displaystyle g;      Dual linear program(D-LP)         ∑   i  ∈  S        ∑   a  ∈   A   (  i  )        R   (  i  ,  a  )   y   (  i  ,  a  )         subscript     i  S      subscript     a    A  i       R   i  a   y   i  a       \displaystyle\sum_{i\in S}\sum_{a\in A(i)}R(i,a)y(i,a)       y   (  i  ,  a  )       y   i  a     y(i,a)   is a feasible solution to the D-LP if    y   (  i  ,  a  )       y   i  a     y(i,a)   is nonnative and satisfied the constraints in the D-LP problem. A feasible solution     y  *    (  i  ,  a  )        superscript  y     i  a     y^{*}(i,a)   to the D-LP is said to be an optimal solution if         ∑   i  ∈  S        ∑   a  ∈   A   (  i  )        R   (  i  ,  a  )    y  *    (  i  ,  a  )      ≥     ∑   i  ∈  S        ∑   a  ∈   A   (  i  )        R   (  i  ,  a  )   y   (  i  ,  a  )            subscript     i  S      subscript     a    A  i       R   i  a    superscript  y     i  a        subscript     i  S      subscript     a    A  i       R   i  a   y   i  a        \displaystyle\sum_{i\in S}\sum_{a\in A(i)}R(i,a)y^{*}(i,a)\geq\sum_{i\in S}%
 \sum_{a\in A(i)}R(i,a)y(i,a)   for all feasible solution y(i,a) to the D-LP. Once we found the optimal solution     y  *    (  i  ,  a  )        superscript  y     i  a     y^{*}(i,a)   , we could use those optimal solution to establish the optimal policies.  Hamilton-Jacobi-Bellman equation  In continuous-time MDP, if the state space and action space are continuous, the optimal criterion could be found by solving Hamilton-Jacobi-Bellman (HJB) partial differential equation. In order to discuss the HJB equation, we need to reformulate our problem       V   (   x   (  0  )    ,  0  )    =         V     x  0   0    absent    \displaystyle V(x(0),0)=     D(   ⋅   normal-⋅   \cdot   ) is the terminal reward function,    x   (  t  )       x  t    x(t)   is the system state vector,    u   (  t  )       u  t    u(t)   is the system control vector we try to find. f(   ⋅   normal-⋅   \cdot   ) shows how the state vector change over time. Hamilton-Jacobi-Bellman equation is as follows:      0  =    max  u    (    r   (  t  ,  x  ,  u  )    +      ∂  V    (  t  ,  x  )     ∂  x    f   (  t  ,  x  ,  u  )     )        0     subscript  max  u       r   t  x  u            V    t  x      x    f   t  x  u        0=\text{max}_{u}(r(t,x,u)+\frac{\partial V(t,x)}{\partial x}f(t,x,u))   We could solve the equation to find the optimal control    u   (  t  )       u  t    u(t)   , which could give us the optimal value    V  *     superscript  V     V^{*}     Application  Continuous-time Markov decision processes have applications in queueing systems, epidemic processes, and population processes .  Alternative notations  The terminology and notation for MDPs are not entirely settled. There are two main streams — one focuses on maximization problems from contexts like economics, using the terms action, reward, value, and calling the discount factor   β   β   \beta   or   γ   γ   \gamma   , while the other focuses on minimization problems from engineering and navigation, using the terms control, cost, cost-to-go, and calling the discount factor   α   α   \alpha   . In addition, the notation for the transition probability varies.      in this article   alternative   comment       action   a   a   a      control   u   u   u         reward   R   R   R      cost   g   g   g         g   g   g   is the negative of   R   R   R        value   V   V   V      cost-to-go   J   J   J         J   J   J   is the negative of   V   V   V        policy   π   π   \pi      policy   μ   μ   \mu         discounting factor    γ    γ   \ \gamma      discounting factor   α   α   \alpha         transition probability     P  a    (  s  ,   s  ′   )        subscript  P  a    s   superscript  s  normal-′      P_{a}(s,s^{\prime})      transition probability     p   s   s  ′      (  a  )        subscript  p    s   superscript  s  normal-′     a    p_{ss^{\prime}}(a)         In addition, transition probability is sometimes written    P  r   (  s  ,  a  ,   s  ′   )       P  r   s  a   superscript  s  normal-′      Pr(s,a,s^{\prime})   ,    P  r   (   s  ′   |  s  ,  a  )      fragments  P  r   fragments  normal-(   superscript  s  normal-′   normal-|  s  normal-,  a  normal-)     Pr(s^{\prime}|s,a)   or, rarely,      p    s  ′   s     (  a  )    .       subscript  p     superscript  s  normal-′   s    a    p_{s^{\prime}s}(a).     Constrained Markov Decision Processes  Constrained Markov Decision Processes (CMDPs) are extensions to Markov Decision Process(MDPs). There are three fundamental differences between MDPs and CMDPs. 3   There are multiple costs incurred after applying an action instead of one.  CMDPs are solved with Linear Programs only, and Dynamic programming does not work.  The final policy is dependant of the starting state.   There are lots of applications for CMDP. It is recently being used in motion planning scenarios in robotics. 4  See also   Probabilistic automata  Quantum finite automata  Partially observable Markov decision process  Dynamic programming  Bellman equation for applications to economics.  Hamilton–Jacobi–Bellman equation  Optimal control  Recursive economics  Mabinogion sheep problem  Stochastic games  Q-learning   Notes  References   R. Bellman. A Markovian Decision Process . Journal of Mathematics and Mechanics 6, 1957.  R. E. Bellman. Dynamic Programming . Princeton University Press, Princeton, NJ, 1957. Dover paperback edition (2003), ISBN 0-486-42809-5.  Ronald A. Howard Dynamic Programming and Markov Processes , The M.I.T. Press, 1960.  D. Bertsekas. Dynamic Programming and Optimal Control. Volume 2, Athena, MA, 1995.  Burnetas, A.N. and M. N. Katehakis. "Optimal Adaptive Policies for Markov Decision Processes'', Mathematics of Operations Research, 22,(1), 1995.  E.A. Feinberg and A. Shwartz (eds.) Handbook of Markov Decision Processes, Kluwer, Boston, MA, 2002.  C. Derman. Finite state Markovian decision processes , Academic Press, 1970.  M. L. Puterman. Markov Decision Processes . Wiley, 1994.  H.C. Tijms. A First Course in Stochastic Models . Wiley, 2003.  Sutton, R. S. and Barto A. G. Reinforcement Learning: An Introduction . The MIT Press, Cambridge, MA, 1998.  J.A. E. E van Nunen. A set of successive approximation methods for discounted Markovian decision problems. Z. Operations Research, 20:203-208, 1976.  S. P. Meyn, 2007. Control Techniques for Complex Networks , Cambridge University Press, 2007. ISBN 978-0-521-88441-9. Appendix contains abridged Meyn & Tweedie .  S. M. Ross. 1983. Introduction to stochastic dynamic programming. Academic press  X. Guo and O. Hernández-Lerma. Continuous-Time Markov Decision Processes , Springer, 2009.  M. L. Puterman and Shin M. C. Modified Policy Iteration Algorithms for Discounted Markov Decision Problems, Management Science 24, 1978.   External links   MDP Toolbox for Matlab - An excellent tutorial and Matlab toolbox for working with MDPs.  MDP Toolbox for Python A package for solving MDPs  Reinforcement Learning An Introduction by Richard S. Sutton and Andrew G. Barto  SPUDD A structured MDP solver for download by Jesse Hoey  Learning to Solve Markovian Decision Processes by Satinder P. Singh  Optimal Adaptive Policies for Markov Decision Processes by Burnetas and Katehakis (1997).   "  Category:Optimal decisions  Category:Dynamic programming  Category:Markov processes  Category:Stochastic control     Lodewijk Kallenberg, Finite state and action MDPs , in Eugene A. Feinberg, Adam Shwartz (eds.) Handbook of Markov decision processes: methods and applications , Springer, 2002, ISBN 0-7923-7459-2 ↩  ↩  Altman, Eitan. Constrained Markov decision processes. Vol. 7. CRC Press, 1999. ↩  Feyzabadi, S.; Carpin, S., "Risk-aware path planning using hierarchical constrained Markov Decision Processes," Automation Science and Engineering (CASE), 2014 IEEE International Conference on , vol., no., pp.297,303, 18-22 Aug. 2014 ↩     