


Web Ontology Language




Web Ontology Language

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



The Web Ontology Language (OWL) is a family of knowledge representation languages for authoring ontologies. Ontologies are a formal way to describe taxonomies and classification networks, essentially defining the structure of knowledge for various domains: the nouns representing classes of objects and the verbs representing relations between the objects. Ontologies resemble class hierarchies in object-oriented programming but there are several critical differences. Class hierarchies are meant to represent structures used in source code that evolve fairly slowly (typically monthly revisions) whereas ontologies are meant to represent information on the Internet and are expected to be evolving almost constantly. Similarly, ontologies are typically far more flexible as they are meant to represent information on the Internet coming from all sorts of heterogeneous data sources. Class hierarchies on the other hand are meant to be fairly static and rely on far less diverse and more structured sources of data such as corporate databases. 1
The OWL languages are characterized by formal semantics. They are built upon a W3C XML standard for objects called the Resource Description Framework (RDF).2 OWL and RDF have attracted significant academic, medical and commercial interest.
In October 2007,3 a new W3C working group4 was started to extend OWL with several new features as proposed in the OWL 1.1 member submission.5 W3C announced the new version of OWL on 27 October 2009.6 This new version, called OWL 2, soon found its way into semantic editors such as Protégé and semantic reasoners such as Pellet,78 RacerPro,9 FaCT++1011 and HermiT.12
The OWL family contains many species, serializations, syntaxes and specifications with similar names. OWL and OWL2 are used to refer to the 2004 and 2009 specifications, respectively. Full species names will be used, including specification version (for example, OWL2 EL). When referring more generally, OWL Family will be used.131415
History
Early ontology languages
There is a long history of ontological development in philosophy and computer science. Since the 1990s, a number of research efforts have explored how the idea of knowledge representation (KR) from artificial intelligence (AI) could be made useful on the World Wide Web. These included languages based on HTML (called SHOE), based on XML (called XOL, later OIL), and various frame-based KR languages and knowledge acquisition approaches.
Ontology languages for the web
In 2000 in the United States, DARPA started development of DAML led by James Hendler.16 In March 2001, the Joint EU/US Committee on Agent Markup Languages decided that DAML should be merged with OIL.17 The EU/US ad hoc Joint Working Group on Agent Markup Languages was convened to develop DAML+OIL as a web ontology language. This group was jointly funded by the DARPA (under the DAML program) and the European Union's Information Society Technologies (IST) funding project. DAML+OIL was intended to be a thin layer above RDFS,18 with formal semantics based on a description logic (DL).19
DAML+OIL is a particularly major influence on OWL; OWL's design was specifically based on DAML+OIL.20
Semantic web standards
 
RDF schema

In the late 1990s, the World Wide Web Consortium (W3C) Metadata Activity started work on RDF Schema (RDFS), a language for RDF vocabulary sharing. The RDF became a W3C Recommendation in February 1999, and RDFS a Candidate Recommendation in March 2000.21 In February 2001, the Semantic Web Activity replaced the Metadata Activity.22 In 2004 (as part of a wider revision of RDF) RDFS became a W3C Recommendation.23 Though RDFS provides some support for ontology specification, the need for a more expressive ontology language had become clear.24 
Web-Ontology Working Group

The World Wide Web Consortium (W3C) created the Web-Ontology Working Group as part of their Semantic Web Activity. It began work on November 1, 2001 with co-chairs James Hendler and Guus Schreiber.25 The first working drafts of the abstract syntax, reference and synopsis were published in July 2002.26 OWL became a formal W3C recommendation on February 10, 2004 and the working group was disbanded on May 31, 2004.27
OWL Working Group
In 2005, at the OWL Experiences And Directions Workshop a consensus formed that recent advances in description logic would allow a more expressive revision to satisfy user requirements more comprehensively whilst retaining good computational properties. In December 2006, the OWL1.1 Member Submission28 was made to the W3C. The W3C chartered the OWL Working Group as part of the Semantic Web Activity in September 2007. In April 2008, this group decided to call this new language OWL2, indicating a substantial revision.29
OWL 2 became a W3C recommendation in October 2009. OWL 2 introduces profiles to improve scalability in typical applications.30
Acronym

The natural initialism for Web Ontology Language would be WOL instead of OWL. Although the character Owl from Winnie-the-Pooh wrote his name WOL, the acronym OWL was proposed without reference to that character, as an easily pronounced acronym that would yield good logos, suggest wisdom, and honor William A. Martin's One World Language knowledge representation project from the 1970s.3132
Adoption
A 2006 survey of ontologies available on the web collected 688 OWL ontologies. Of these, 199 were OWL Lite, 149 were OWL DL and 337 OWL Full (by syntax). They found that 19 ontologies had in excess of 2,000 classes, and that 6 had more than 10,000. The same survey collected 587 RDFS vocabularies.33
Ontologies

The data described by an ontology in the OWL family is interpreted as a set of "individuals" and a set of "property assertions" which relate these individuals to each other. An ontology consists of a set of axioms which place constraints on sets of individuals (called "classes") and the types of relationships permitted between them. These axioms provide semantics by allowing systems to infer additional information based on the data explicitly provided. A full introduction to the expressive power of the OWL is provided in the W3C's OWL Guide.34
OWL ontologies can import other ontologies, adding information from the imported ontology to the current ontology.35
Example
An ontology describing families might include axioms stating that a "hasMother" property is only present between two individuals when "hasParent" is also present, and individuals of class "HasTypeOBlood" are never related via "hasParent" to members of the "HasTypeABBlood" class. If it is stated that the individual Harriet is related via "hasMother" to the individual Sue, and that Harriet is a member of the "HasTypeOBlood" class, then it can be inferred that Sue is not a member of "HasTypeABBlood".
Species
OWL sublanguages
The W3C-endorsed OWL specification includes the definition of three variants of OWL, with different levels of expressiveness. These are OWL Lite, OWL DL and OWL Full (ordered by increasing expressiveness). Each of these sublanguages is a syntactic extension of its simpler predecessor. The following set of relations hold. Their inverses do not.

Every legal OWL Lite ontology is a legal OWL DL ontology.
Every legal OWL DL ontology is a legal OWL Full ontology.
Every valid OWL Lite conclusion is a valid OWL DL conclusion.
Every valid OWL DL conclusion is a valid OWL Full conclusion.

OWL Lite
OWL Lite was originally intended to support those users primarily needing a classification hierarchy and simple constraints. For example, while it supports cardinality constraints, it only permits cardinality values of 0 or 1. It was hoped that it would be simpler to provide tool support for OWL Lite than its more expressive relatives, allowing quick migration path for systems using thesauri and other taxonomies. In practice, however, most of the expressiveness constraints placed on OWL Lite amount to little more than syntactic inconveniences: most of the constructs available in OWL DL can be built using complex combinations of OWL Lite features.36 Development of OWL Lite tools has thus proven almost as difficult as development of tools for OWL DL, and OWL Lite is not widely used.37
OWL DL
OWL DL designed to provide the maximum expressiveness possible while retaining computational completeness (either φ or ¬φ belong), decidability (there is an effective procedure to determine whether φ is derivable or not), and the availability of practical reasoning algorithms. OWL DL includes all OWL language constructs, but they can be used only under certain restrictions (for example, number restrictions may not be placed upon properties which are declared to be transitive). OWL DL is so named due to its correspondence with description logic, a field of research that has studied the logics that form the formal foundation of OWL.
OWL Full
OWL Full is based on a different semantics from OWL Lite or OWL DL, and was designed to preserve some compatibility with RDF Schema. For example, in OWL Full a class can be treated simultaneously as a collection of individuals and as an individual in its own right; this is not permitted in OWL DL. OWL Full allows an ontology to augment the meaning of the pre-defined (RDF or OWL) vocabulary. OWL Full is undecidable, so no reasoning software is able to perform complete reasoning for it.
OWL2 profiles
In OWL 2, there are three sublanguages of the language. OWL 2 EL is a fragment that has polynomial time reasoning complexity; OWL 2 QL is designed to enable easier access and query to data stored in databases; OWL 2 RL is a rule subset of OWL 2.
Syntax
The OWL family of languages supports a variety of syntaxes. It is useful to distinguish high level syntaxes aimed at specification from exchange syntaxes more suitable for general use.
High level
These are close to the ontology structure of languages in the OWL family.
OWL abstract syntax
This high level syntax is used to specify the OWL ontology structure and semantics.38
The OWL abstract syntax presents an ontology as a sequence of annotations, axioms and facts. Annotations carry machine and human oriented meta-data. Information about the classes, properties and individuals that compose the ontology is contained in axioms and facts only. Each class, property and individual is either anonymous or identified by an URI reference. Facts state data either about an individual or about a pair of individual identifiers (that the objects identified are distinct or the same). Axioms specify the characteristics of classes and properties. This style is similar to frame languages, and quite dissimilar to well known syntaxes for description logics (DLs) and Resource Description Framework (RDF).39
Sean Bechhofer, et al. argue that though this syntax is hard to parse, it is quite concrete. They conclude that the name abstract syntax may be somewhat misleading.40
OWL2 functional syntax
This syntax closely follows the structure of an OWL2 ontology. It is used by OWL2 to specify semantics, mappings to exchange syntaxes and profiles.41
Exchange syntaxes
RDF syntaxes
Syntactic mappings into RDF are specified4243 for languages in the OWL family. Several RDF  serialization formats have been devised. Each leads to a syntax for languages in the OWL family through this mapping. RDF/XML is normative.4445
OWL2 XML syntax
OWL2 specifies an XML serialization that closely models the structure of an OWL2 ontology.46
Manchester Syntax
The Manchester Syntax is a compact, human readable syntax with a style close to frame languages. Variations are available for OWL and OWL2. Not all OWL and OWL2 ontologies can be expressed in this syntax.47
Examples

The W3C OWL 2 Web Ontology Language provides syntax examples.48

Tea ontology
Consider an ontology for tea based on a Tea class. But first, an ontology is needed. Every OWL ontology must be identified by an URI (http://www.example.org/tea.owl, say). This is enough to get a flavour of the syntax. To save space below, preambles and prefix definitions have been skipped.
OWL2 Functional Syntax
Ontology(
   Declaration( Class( :Tea ) )
 )
 
OWL2 XML Syntax
 ...="" ontologyiri="http://example.com/tea.owl">
  iri="http://www.w3.org/2002/07/owl#" name="owl">

 iri="Tea">


Manchester Syntax
Ontology: 
 Class: Tea
 
RDF/XML syntax
 ...="">
  rdf:about="">
 rdf:about="#Tea">

RDF/Turtle
 rdf:type owl:Ontology .
  :Tea  rdf:type            owl:Class .
 
Semantics
Relation to description logic

Early attempts to build large ontologies were plagued by a lack of clear definitions. Members of the OWL family have model theoretic formal semantics, and so have strong logical foundations.
Description logics (DLs) are a family of logics that are decidable fragments of first-order logic with attractive and well-understood computational properties. OWL DL and OWL Lite semantics are based on DLs.49 They combine a syntax for describing and exchanging ontologies, and formal semantics that gives them meaning. For example, OWL DL corresponds to the 
 
 
 
  description logic, while OWL 2 corresponds to the 
 
 
 
  logic.50 Sound, complete, terminating reasoners (i.e. systems which are guaranteed to derive every consequence of the knowledge in an ontology) exist for these DLs.
Relation To RDFS
OWL Full is intended to be compatible with RDF Schema (RDFS), and to be capable of augmenting the meanings of existing Resource Description Framework (RDF) vocabulary.51 A model theory describes the formal semantics for RDF.52 This interpretation provides the meaning of RDF and RDFS vocabulary. So, the meaning of OWL Full ontologies are defined by extension of the RDFS meaning, and OWL Full is a semantic extension of RDF.53
Open world assumption

The languages in the OWL family use the open world assumption. Under the open world assumption, if a statement cannot be proven to be true with current knowledge, we cannot draw the conclusion that the statement is false.
Contrast to other languages
A relational database consists of sets of tuples with the same attributes. SQL is a query and management language for relational databases. Prolog is a logical programming language. Both use the closed world assumption.
Terminology
Languages in the OWL family are capable of creating classes, properties, defining instances and its operations.
Instances
An instance is an object. It corresponds to a description logic individual.
Classes
A class is a collection of objects. It corresponds to a description logic (DL) concept. A class may contain individuals, instances of the class. A class may have any number of instances. An instance may belong to none, one or more classes.
A class may be a subclass of another, inheriting characteristics from its parent superclass. This corresponds to logical subsumption and DL concept inclusion notated 
 
 
 
 .
All classes are subclasses of owl:Thing (DL top notated 
 
 
 
 ), the root class.
All classes are subclassed by owl:Nothing (DL bottom notated 
 
 
 
 ), the empty class. No instances are members of owl:Nothing. Modelers use owl:Thing and owl:Nothing to assert facts about all or no instances.54
Class and their members can be defined in OWL either by extension or by intension. An individual can be explicitly assigned a class by a Class assertion, for example we can add a statement Queen elizabeth is a(n instance of) human, or by a class expression with ClassExpression statements every instance of the human class who has a female value to the sex property is an instance of the woman class.
Example
Let's call human the class of all humans in the world is a subclass of owl:thing. The class of all women (say woman) in the world is a subclass of human. Then we have owl:Nothing 
 
 
woman

human

 
  owl:Thing
The membership of some individual to a class could be noted
 ClassAssertion( Barack_Obama human )
and class inclusion
 SubClassOf( human woman ) 
The first means "barack Obama is a human" and the second "every woman is human".
Properties
A property is a directed binary relation that specifies class characteristics. It corresponds to a description logic role. They are attributes of instances and sometimes act as data values or link to other instances. Properties may possess logical capabilities such as being transitive, symmetric, inverse and functional. Properties may also have domains and ranges.
Datatype properties
Datatype properties are relations between instances of classes and RDF literals or XML schema datatypes. For example, modelName (String datatype) is the property of Manufacturer class. They are formulated using owl:DatatypeProperty type.
Object properties
Object properties are relations between instances of two classes. For example, ownedBy may be an object type property of the Vehicle class and may have a range which is the class Person. They are formulated using owl:ObjectProperty.
Operators
Languages in the OWL family support various operations on classes such as union, intersection and complement. They also allow class enumeration, cardinality, and disjointness.
Metaclasses
Metaclasses are classes of classes. They are allowed in OWL full or with a feature called class/instance punning.
Public ontologies
Libraries
Biomedical

OBO Foundry5556
NCBO BioPortal57
NCI Enterprise Vocabulary Services

Miscellaneous



Standards

Suggested Upper Merged Ontology58
TDWG59

Browsers
The following tools include public ontology browsers:

Protégé OWL60

Search

Swoogle

Limitations

No direct language support for n-ary relationships. For example modelers may wish to describe the qualities of a relation, to relate more than 2 individuals or to relate an individual to a list. This cannot be done within OWL. They may need to adopt a pattern instead which encodes the meaning outside the formal semantics.61

See also

RDF
Agris: International Information System for the Agricultural Sciences and Technology
Common logic
FOAF + DOAC
Frame language
Geopolitical ontology
IDEAS Group
Meta-Object Facility (MOF), a different standard for the Unified Modeling Language (UML) of the Object Management Group (OMG)
Multimedia Web Ontology Language
Semantic reasoner
SKOS
SSWAP: Simple Semantic Web Architecture and Protocol
Website Parse Template
metaclass (semantic web), a featured allowed by OWL to represent knowledge

References
External links

Horrocks, Ian (2010); SemTech 2010 tutorial part 1 and part 2 on Description Logics and OWL
Tutorial on OWL at the University of Manchester Computer Science Department
Introduction to Description Logics DL course by Enrico Franconi, Faculty of Computer Science, Free University of Bolzano, Italy
OWL API API for Using OWL 2, at SourceForge

"
Category:World Wide Web Consortium standards Category:Resource Description Framework Category:School of Computer Science, University of Manchester Category:XML-based standards Category:Declarative programming languages Category:Ontology languages Category:Semantic Web Category:Web Ontology Language






W3C working group



Pellet
RacerPro

FaCT++
HermiT










































OBO Foundry
OBO Download Matrix
NCBO BioPortal
SUMO download
TDWG LSID Vocabularies
Protégé web site



