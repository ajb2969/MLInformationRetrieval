   Communicating sequential processes      Communicating sequential processes  In [[computer science]], '''communicating sequential processes''' ('''CSP''') is a [[formal language|formal language]] for describing [[pattern]]s of [[interaction]] in [[concurrent systems]]. {{cite book|first=A. W.|last=Roscoe|authorlink=Bill Roscoe|title=The Theory and Practice of Concurrency|publisher=[[Prentice Hall]]|isbn = 0-13-674409-5|year=1997}} f> It is a member of the family of mathematical theories of concurrency known as process algebras, or process calculi , based on message passing via channels . CSP was highly influential in the design of the occam programming language, 1 2 and also influenced the design of programming languages such as Limbo 3 and Go . 4  CSP was first described in a 1978 paper by C. A. R. Hoare , 5 but has since evolved substantially. 6 CSP has been practically applied in industry as a tool for specifying and verifying the concurrent aspects of a variety of different systems, such as the T9000 Transputer , 7 as well as a secure ecommerce system. 8 The theory of CSP itself is also still the subject of active research, including work to increase its range of practical applicability (e.g., increasing the scale of the systems that can be tractably analyzed). 9  History  The version of CSP presented in Hoare's original 1978 paper was essentially a concurrent programming language rather than a process calculus . It had a substantially different syntax than later versions of CSP, did not possess mathematically defined semantics, 10 and was unable to represent unbounded nondeterminism . 11 Programs in the original CSP were written as a parallel composition of a fixed number of sequential processes communicating with each other strictly through synchronous message-passing. In contrast to later versions of CSP, each process was assigned an explicit name, and the source or destination of a message was defined by specifying the name of the intended sending or receiving process. For example the process  COPY = *[c:character; west?c → east!c]  repeatedly receives a character from the process named west , and then sends that character to process named east . The parallel composition  [west::DISASSEMBLE || X::COPY || east::ASSEMBLE]  assigns the names west to the DISASSEMBLE process, X to the COPY process, and east to the ASSEMBLE process, and executes these three processes concurrently. 12  Following the publication of the original version of CSP, Hoare, Stephen Brookes, and A. W. Roscoe developed and refined the theory of CSP into its modern, process algebraic form. The approach taken in developing CSP into a process algebra was influenced by Robin Milner 's work on the Calculus of Communicating Systems (CCS), and vice versa. The theoretical version of CSP was initially presented in a 1984 article by Brookes, Hoare, and Roscoe, 13 and later in Hoare's book Communicating Sequential Processes , 14 which was published in 1985. In September 2006, that book was still the third-most cited  computer science reference of all time according to Citeseer (albeit an unreliable source due to the nature of its sampling). The theory of CSP has undergone a few minor changes since the publication of Hoare's book. Most of these changes were motivated by the advent of automated tools for CSP process analysis and verification. Roscoe's The Theory and Practice of Concurrency 15 describes this newer version of CSP.  Applications  An early and important application of CSP was its use for specification and verification of elements of the INMOS T9000 Transputer , a complex superscalar pipelined processor designed to support large-scale multiprocessing. CSP was employed in verifying the correctness of both the processor pipeline, and the Virtual Channel Processor which managed off-chip communications for the processor. 16  Industrial application of CSP to software design has usually focused on dependable and safety-critical systems. For example, the Bremen Institute for Safe Systems and Daimler-Benz Aerospace modeled a fault management system and avionics interface (consisting of some 23,000 lines of code) intended for use on the International Space Station in CSP, and analyzed the model to confirm that their design was free of deadlock and livelock. 17 18 The modeling and analysis process was able to uncover a number of errors that would have been difficult to detect using testing alone. Similarly, Praxis High Integrity Systems applied CSP modeling and analysis during the development of software (approximately 100,000 lines of code) for a secure smart-card Certification Authority to verify that their design was secure and free of deadlock. Praxis claims that the system has a much lower defect rate than comparable systems. 19  Since CSP is well-suited to modeling and analyzing systems that incorporate complex message exchanges, it has also been applied to the verification of communications and security protocols. A prominent example of this sort of application is Lowe’s use of CSP and the FDR refinement-checker to discover a previously unknown attack on the Needham-Schroeder public-key authentication protocol , and then to develop a corrected protocol able to defeat the attack. 20  Informal description  As its name suggests, CSP allows the description of systems in terms of component processes that operate independently, and interact with each other solely through message-passing communication. However, the "Sequential" part of the CSP name is now something of a misnomer, since modern CSP allows component processes to be defined both as sequential processes, and as the parallel composition of more primitive processes. The relationships between different processes, and the way each process communicates with its environment, are described using various process algebraic operators. Using this algebraic approach, quite complex process descriptions can be easily constructed from a few primitive elements.  Primitives  CSP provides two classes of primitives in its process algebra:   Events  Events represent communications or interactions. They are assumed to be indivisible and instantaneous. They may be atomic names (e.g. on , off ), compound names (e.g. valve.open , valve.close ), or input/output events (e.g. mouse?xy , screen!bitmap ).  Primitive processes:  Primitive processes represent fundamental behaviors: examples include STOP (the process that communicates nothing, also called deadlock ), and SKIP (which represents successful termination).   Algebraic operators  CSP has a wide range of algebraic operators. The principal ones are:   Prefix  The prefix operator combines an event and a process to produce a new process. For example,         a  →  P     normal-→  a  P    a\rightarrow P         is the process which is willing to communicate   a   a   \mathit{a}   with its environment, and, after   a   a   \mathit{a}   , behaves like the process   P   P   \mathit{P}   .    Deterministic Choice  The deterministic (or external) choice operator allows the future evolution of a process to be defined as a choice between two component processes, and allows the environment to resolve the choice by communicating an initial event for one of the processes. For example,          (  a  →  P  )   □   (  b  →  Q  )      fragments   fragments  normal-(  a  normal-→  P  normal-)   □   fragments  normal-(  b  normal-→  Q  normal-)     \left(a\rightarrow P\right)\Box\left(b\rightarrow Q\right)         is the process which is willing to communicate the initial events   a   a   \mathit{a}   and   b   b   \mathit{b}   , and subsequently behaves as either   P   P   \mathit{P}   or   Q   Q   \mathit{Q}   depending on which initial event the environment chooses to communicate. If both   a   a   \mathit{a}   and   b   b   \mathit{b}   were communicated simultaneously the choice would be resolved nondeterministically.    Nondeterministic Choice  The nondeterministic (or internal) choice operator allows the future evolution of a process to be defined as a choice between two component processes, but does not allow the environment any control over which one of the component processes will be selected. For example,          (  a  →  P  )   ⊓   (  b  →  Q  )      fragments   fragments  normal-(  a  normal-→  P  normal-)   square-intersection   fragments  normal-(  b  normal-→  Q  normal-)     \left(a\rightarrow P\right)\sqcap\left(b\rightarrow Q\right)         can behave like either    (   a  →  P   )     normal-→  a  P    \left(a\rightarrow P\right)   or    (   b  →  Q   )     normal-→  b  Q    \left(b\rightarrow Q\right)   . It can refuse to accept   a   a   \mathit{a}   or   b   b   \mathit{b}   , and is only obliged to communicate if the environment offers both   a   a   \mathit{a}   and   b   b   \mathit{b}   . Nondeterminism can be inadvertently introduced into a nominally deterministic choice if the initial events of both sides of the choice are identical. So, for example,          (  a  →  a  →  S  T  O  P  )   □   (  a  →  b  →  S  T  O  P  )      fragments   fragments  normal-(  a  normal-→  a  normal-→  S  T  O  P  normal-)   □   fragments  normal-(  a  normal-→  b  normal-→  S  T  O  P  normal-)     \left(a\rightarrow a\rightarrow STOP\right)\Box\left(a\rightarrow b\rightarrow
 STOP\right)         is equivalent to         a  →   (   (  a  →  S  T  O  P  )   ⊓   (  b  →  S  T  O  P  )   )      fragments  a  normal-→   fragments  normal-(   fragments  normal-(  a  normal-→  S  T  O  P  normal-)   square-intersection   fragments  normal-(  b  normal-→  S  T  O  P  normal-)   normal-)     a\rightarrow\left(\left(a\rightarrow STOP\right)\sqcap\left(b\rightarrow STOP%
 \right)\right)         Interleaving  The interleaving operator represents completely independent concurrent activity. The process          P   |  |  |  Q     fragments  P  normal-|  normal-|  normal-|  Q    P\;|||\;Q         behaves as both   P   P   \mathit{P}   and   Q   Q   \mathit{Q}   simultaneously. The events from both processes are arbitrarily interleaved in time.    Interface Parallel  The interface parallel operator represents concurrent activity that requires synchronization between the component processes: any event in the interface set can only occur when all component processes are able to engage in that event. For example, the process         P   |   [   {  a  }   ]   |   Q      P     delimited-[]   a     Q    P\left|\left[\left\{a\right\}\right]\right|Q         requires that   P   P   \mathit{P}   and   Q   Q   \mathit{Q}   must both be able to perform event   a   a   \mathit{a}   before that event can occur. So, for example, the process          (  a  →  P  )   |   [   {  a  }   ]   |   (  a  →  Q  )      fragments   fragments  normal-(  a  normal-→  P  normal-)   normal-|   fragments  normal-[   fragments  normal-{  a  normal-}   normal-]   normal-|   fragments  normal-(  a  normal-→  Q  normal-)     \left(a\rightarrow P\right)\left|\left[\left\{a\right\}\right]\right|\left(a%
 \rightarrow Q\right)         can engage in event   a   a   \mathit{a}   , and become the process         P   |   [   {  a  }   ]   |   Q      P     delimited-[]   a     Q    P\left|\left[\left\{a\right\}\right]\right|Q         while          (  a  →  P  )   |   [   {  a  ,  b  }   ]   |   (  b  →  Q  )      fragments   fragments  normal-(  a  normal-→  P  normal-)   normal-|   fragments  normal-[   fragments  normal-{  a  normal-,  b  normal-}   normal-]   normal-|   fragments  normal-(  b  normal-→  Q  normal-)     \left(a\rightarrow P\right)\left|\left[\left\{a,b\right\}\right]\right|\left(b%
 \rightarrow Q\right)         will simply deadlock.    Hiding  The hiding operator provides a way to abstract processes, by making some events unobservable. A trivial example of hiding is          (  a  →  P  )   ∖   {  a  }      fragments   fragments  normal-(  a  normal-→  P  normal-)     fragments  normal-{  a  normal-}     \left(a\rightarrow P\right)\setminus\left\{a\right\}         which, assuming that the event   a   a   \mathit{a}   doesn't appear in   P   P   \mathit{P}   , simply reduces to        P   P   \mathit{P}        Examples  One of the archetypal CSP examples is an abstract representation of a chocolate vending machine and its interactions with a person wishing to buy some chocolate. This vending machine might be able to carry out two different events, “coin” and “choc” which represent the insertion of payment and the delivery of a chocolate respectively. A machine which demands payment before offering a chocolate can be written as:      𝑉𝑒𝑛𝑑𝑖𝑛𝑔𝑀𝑎𝑐ℎ𝑖𝑛𝑒  =  𝑐𝑜𝑖𝑛  →  𝑐ℎ𝑜𝑐  →  𝑆𝑇𝑂𝑃        VendingMachine  coin    normal-→    choc    normal-→    STOP     \textit{VendingMachine}=\textit{coin}\rightarrow\textit{choc}\rightarrow%
 \textit{STOP}     A person who might choose to use a coin or card to make payments could be modelled as:      𝑃𝑒𝑟𝑠𝑜𝑛  =   (  𝑐𝑜𝑖𝑛  →  𝑆𝑇𝑂𝑃  )   □   (  𝑐𝑎𝑟𝑑  →  𝑆𝑇𝑂𝑃  )      fragments  Person    fragments  normal-(  coin  normal-→  STOP  normal-)   □   fragments  normal-(  card  normal-→  STOP  normal-)     \textit{Person}=(\textit{coin}\rightarrow\textit{STOP})\Box(\textit{card}%
 \rightarrow\textit{STOP})     These two processes can be put in parallel, so that they can interact with each other. The behaviour of the composite process depends on the events that the two component processes must synchronise on. Thus,       𝑉𝑒𝑛𝑑𝑖𝑛𝑔𝑀𝑎𝑐ℎ𝑖𝑛𝑒   |   [   {  𝑐𝑜𝑖𝑛  ,  𝑐𝑎𝑟𝑑  }   ]   |   𝑃𝑒𝑟𝑠𝑜𝑛   ≡  𝑐𝑜𝑖𝑛  →  𝑐ℎ𝑜𝑐  →  𝑆𝑇𝑂𝑃          VendingMachine     delimited-[]   coin  card     Person   coin    normal-→    choc    normal-→    STOP     \textit{VendingMachine}\left|\left[\left\{\textit{coin},\textit{card}\right\}%
 \right]\right|\textit{Person}\equiv\textit{coin}\rightarrow\textit{choc}%
 \rightarrow\textit{STOP}     whereas if synchronization was only required on “coin”, we would obtain      𝑉𝑒𝑛𝑑𝑖𝑛𝑔𝑀𝑎𝑐ℎ𝑖𝑛𝑒  |   [   {  𝑐𝑜𝑖𝑛  }   ]   |  𝑃𝑒𝑟𝑠𝑜𝑛  ≡   (  𝑐𝑜𝑖𝑛  →  𝑐ℎ𝑜𝑐  →  𝑆𝑇𝑂𝑃  )   □   (  𝑐𝑎𝑟𝑑  →  𝑆𝑇𝑂𝑃  )      fragments  VendingMachine  normal-|   fragments  normal-[   fragments  normal-{  coin  normal-}   normal-]   normal-|  Person    fragments  normal-(  coin  normal-→  choc  normal-→  STOP  normal-)   □   fragments  normal-(  card  normal-→  STOP  normal-)     \textit{VendingMachine}\left|\left[\left\{\textit{coin}\right\}\right]\right|%
 \textit{Person}\equiv\left(\textit{coin}\rightarrow\textit{choc}\rightarrow%
 \textit{STOP}\right)\Box\left(\textit{card}\rightarrow\textit{STOP}\right)     If we abstract this latter composite process by hiding the “coin” and “card” events, i.e.       (   (  𝑐𝑜𝑖𝑛  →  𝑐ℎ𝑜𝑐  →  𝑆𝑇𝑂  P  )   □   (  𝑐𝑎𝑟𝑑  →  𝑆𝑇𝑂𝑃  )   )   ∖   {  𝑐𝑜𝑖𝑛  ,  c  a  r  d  }      fragments   fragments  normal-(   fragments  normal-(  coin  normal-→  choc  normal-→  STO  P  normal-)   □   fragments  normal-(  card  normal-→  STOP  normal-)   normal-)     fragments  normal-{  coin  normal-,  c  a  r  d  normal-}     \left(\left(\textit{coin}\rightarrow\textit{choc}\rightarrow\textit{STO}P%
 \right)\Box\left(\textit{card}\rightarrow\textit{STOP}\right)\right)\setminus%
 \left\{\textit{coin},card\right\}     we get the nondeterministic process       (  𝑐ℎ𝑜𝑐  →  𝑆𝑇𝑂𝑃  )   ⊓  𝑆𝑇𝑂𝑃     fragments   fragments  normal-(  choc  normal-→  STOP  normal-)   square-intersection  STOP    \left(\textit{choc}\rightarrow\textit{STOP}\right)\sqcap\textit{STOP}     This is a process which either offers a “choc” event and then stops, or just stops. In other words, if we treat the abstraction as an external view of the system (e.g., someone who does not see the decision reached by the person), nondeterminism has been introduced.  Formal definition  Syntax  The syntax of CSP defines the “legal” ways in which processes and events may be combined. Let   e   e   \mathit{e}   be an event, and   X   X   \mathit{X}   be a set of events. Then the basic syntax of CSP can be defined as:         P  r  o  c       :  :=     𝑆𝑇𝑂𝑃            |    𝑆𝐾𝐼𝑃            |     e  →  𝑃𝑟𝑜𝑐      (  prefixing  )          |      𝑃𝑟𝑜𝑐    □   𝑃𝑟𝑜𝑐      (    external   choice   )          |      𝑃𝑟𝑜𝑐   ⊓  𝑃𝑟𝑜𝑐      (    nondeterministic   choice   )          |      𝑃𝑟𝑜𝑐   |  |  |  𝑃𝑟𝑜𝑐      (  interleaving  )          |      𝑃𝑟𝑜𝑐    |   [   {  X  }   ]   |   𝑃𝑟𝑜𝑐      (    interface   parallel   )          |     𝑃𝑟𝑜𝑐  ∖  X      (  hiding  )          |     𝑃𝑟𝑜𝑐  ;  𝑃𝑟𝑜𝑐      (    sequential   composition   )          |      if    b    then    𝑃𝑟𝑜𝑐    else   P  r  o  c      (    boolean   conditional   )          |      𝑃𝑟𝑜𝑐   ▷  𝑃𝑟𝑜𝑐      (  timeout  )          |      𝑃𝑟𝑜𝑐    △   𝑃𝑟𝑜𝑐      (  interrupt  )           P  r  o  c    normal-:  absent  assign   STOP  absent    absent  normal-|  SKIP  absent    absent  normal-|   normal-→  e  Proc   prefixing    absent  normal-|    Proc  normal-□  Proc     external  choice     absent  normal-|   square-intersection  Proc  Proc     nondeterministic  choice     absent  normal-|   fragments  Proc  normal-|  normal-|  normal-|  Proc   interleaving    absent  normal-|    Proc     delimited-[]   X     Proc     interface  parallel     absent  normal-|    Proc  X   hiding    absent  normal-|   Proc  Proc     sequential  composition     absent  normal-|    if  b  then  Proc  else  P  r  o  c     boolean  conditional     absent  normal-|   normal-▷  Proc  Proc   timeout    absent  normal-|    Proc  normal-△  Proc   interrupt     \begin{matrix}Proc&::=&\textit{STOP}&\\
 &|&\textit{SKIP}&\\
 &|&e\rightarrow\textit{Proc}&(\text{prefixing})\\
 &|&\textit{Proc}\;\Box\;\textit{Proc}&(\text{external}\;\text{choice})\\
 &|&\textit{Proc}\;\sqcap\;\textit{Proc}&(\text{nondeterministic}\;\text{choice%
 })\\
 &|&\textit{Proc}\;|||\;\textit{Proc}&(\text{interleaving})\\
 &|&\textit{Proc}\;|[\{X\}]|\;\textit{Proc}&(\text{interface}\;\text{parallel})%
 \\
 &|&\textit{Proc}\setminus X&(\text{hiding})\\
 &|&\textit{Proc};\textit{Proc}&(\text{sequential}\;\text{composition})\\
 &|&\mathrm{if}\;b\;\mathrm{then}\;\textit{Proc}\;\mathrm{else}\;Proc&(\text{%
 boolean}\;\text{conditional})\\
 &|&\textit{Proc}\;\triangleright\;\textit{Proc}&(\text{timeout})\\
 &|&\textit{Proc}\;\triangle\;\textit{Proc}&(\text{interrupt})\end{matrix}     Note that, in the interests of brevity, the syntax presented above omits the   𝐝𝐢𝐯   𝐝𝐢𝐯   \mathbf{div}   process, which represents divergence , as well as various operators such as alphabetized parallel, piping, and indexed choices.  Formal semantics  CSP has been imbued with several different formal semantics , which define the meaning of syntactically correct CSP expressions. The theory of CSP includes mutually consistent denotational semantics , algebraic semantics , and operational semantics .  Denotational semantics  The three major denotational models of CSP are the traces model, the stable failures model, and the failures/divergences model. Semantic mappings from process expressions to each of these three models provide the denotational semantics for CSP. 21  The traces model defines the meaning of a process expression as the set of sequences of events (traces) that the process can be observed to perform. For example,  :*     𝑡𝑟𝑎𝑐𝑒𝑠   (  𝑆𝑇𝑂𝑃  )    =   {   ⟨  ⟩   }         𝑡𝑟𝑎𝑐𝑒𝑠  𝑆𝑇𝑂𝑃        \mathit{traces}\left(\mathit{STOP}\right)=\left\{\langle\rangle\right\}   since   𝑆𝑇𝑂𝑃   𝑆𝑇𝑂𝑃   \mathit{STOP}   performs no events  :*    𝑡𝑟𝑎𝑐𝑒𝑠   (  a  →  b  →  𝑆𝑇𝑂𝑃  )   =   {   ⟨  ⟩   ,   ⟨  a  ⟩   ,   ⟨  a  ,  b  ⟩   }      fragments  traces   fragments  normal-(  a  normal-→  b  normal-→  STOP  normal-)     fragments  normal-{   fragments  normal-⟨  normal-⟩   normal-,   fragments  normal-⟨  a  normal-⟩   normal-,   fragments  normal-⟨  a  normal-,  b  normal-⟩   normal-}     \mathit{traces}\left(a\rightarrow b\rightarrow\mathit{STOP}\right)=\left\{%
 \langle\rangle,\langle a\rangle,\langle a,b\rangle\right\}   since the process    (   a  →  b  →  𝑆𝑇𝑂𝑃   )       normal-→  a  b    normal-→    𝑆𝑇𝑂𝑃     (a\rightarrow b\rightarrow\mathit{STOP})   can be observed to have performed no events, the event   a   a   a   , or the sequence of events   a   a   a   followed by   b   b   b     More formally, the meaning of a process   P   P   P   in the traces model is defined as     𝑡𝑟𝑎𝑐𝑒𝑠   (  P  )    ⊆   Σ  ∗         𝑡𝑟𝑎𝑐𝑒𝑠  P    superscript  normal-Σ  normal-∗     \mathit{traces}\left(P\right)\subseteq\Sigma^{\ast}   such that:        ⟨  ⟩   ∈   𝑡𝑟𝑎𝑐𝑒𝑠   (  P  )           𝑡𝑟𝑎𝑐𝑒𝑠  P     \langle\rangle\in\mathit{traces}\left(P\right)   (i.e.    𝑡𝑟𝑎𝑐𝑒𝑠   (  P  )       𝑡𝑟𝑎𝑐𝑒𝑠  P    \mathit{traces}\left(P\right)   contains the empty sequence)       s  1   ⌢   s  2   ∈   𝑡𝑟𝑎𝑐𝑒𝑠   (  P  )    ⟹   s  1   ∈   𝑡𝑟𝑎𝑐𝑒𝑠   (  P  )         normal-⌢   subscript  s  1    subscript  s  2          𝑡𝑟𝑎𝑐𝑒𝑠  P         subscript  s  1          𝑡𝑟𝑎𝑐𝑒𝑠  P      s_{1}\smallfrown s_{2}\in\mathit{traces}\left(P\right)\implies s_{1}\in\mathit%
 {traces}\left(P\right)   (i.e.    𝑡𝑟𝑎𝑐𝑒𝑠   (  P  )       𝑡𝑟𝑎𝑐𝑒𝑠  P    \mathit{traces}\left(P\right)   is prefix-closed)   where    Σ  ∗     superscript  normal-Σ  normal-∗    \Sigma^{\ast}   is the set of all possible finite sequences of events.  The stable failures model extends the traces model with refusal sets, which are sets of events    X  ⊆  Σ      X  normal-Σ    X\subseteq\Sigma   that a process can refuse to perform. A failure is a pair    (  s  ,  X  )     s  X    \left(s,X\right)   , consisting of a trace   s   s   s   , and a refusal set   X   X   X   which identifies the events that a process may refuse once it has executed the trace   s   s   s   . The observed behavior of a process in the stable failures model is described by the pair    (   𝑡𝑟𝑎𝑐𝑒𝑠   (  P  )    ,   𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠   (  P  )    )       𝑡𝑟𝑎𝑐𝑒𝑠  P     𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠  P     \left(\mathit{traces}\left(P\right),\mathit{failures}\left(P\right)\right)   . For example,  :*    𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠   (   (  a  →  𝑆𝑇𝑂𝑃  )   □   (  b  →  𝑆𝑇𝑂𝑃  )   )   =   {   (   ⟨  ⟩   ,  ∅  )   ,   (   ⟨  a  ⟩   ,   {  a  ,  b  }   )   ,   (   ⟨  b  ⟩   ,   {  a  ,  b  }   )   }      fragments  failures   fragments  normal-(   fragments  normal-(  a  normal-→  STOP  normal-)   □   fragments  normal-(  b  normal-→  STOP  normal-)   normal-)     fragments  normal-{   fragments  normal-(   fragments  normal-⟨  normal-⟩   normal-,   normal-)   normal-,   fragments  normal-(   fragments  normal-⟨  a  normal-⟩   normal-,   fragments  normal-{  a  normal-,  b  normal-}   normal-)   normal-,   fragments  normal-(   fragments  normal-⟨  b  normal-⟩   normal-,   fragments  normal-{  a  normal-,  b  normal-}   normal-)   normal-}     \mathit{failures}\left(\left(a\rightarrow\mathit{STOP}\right)\Box\left(b%
 \rightarrow\mathit{STOP}\right)\right)=\left\{\left(\langle\rangle,\emptyset%
 \right),\left(\langle a\rangle,\left\{a,b\right\}\right),\left(\langle b%
 \rangle,\left\{a,b\right\}\right)\right\}     :*    𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠   (   (  a  →  𝑆𝑇𝑂𝑃  )   ⊓   (  b  →  𝑆𝑇𝑂𝑃  )   )   =   {   (   ⟨  ⟩   ,   {  a  }   )   ,   (   ⟨  ⟩   ,   {  b  }   )   ,   (   ⟨  a  ⟩   ,   {  a  ,  b  }   )   ,   (   ⟨  b  ⟩   ,   {  a  ,  b  }   )   }      fragments  failures   fragments  normal-(   fragments  normal-(  a  normal-→  STOP  normal-)   square-intersection   fragments  normal-(  b  normal-→  STOP  normal-)   normal-)     fragments  normal-{   fragments  normal-(   fragments  normal-⟨  normal-⟩   normal-,   fragments  normal-{  a  normal-}   normal-)   normal-,   fragments  normal-(   fragments  normal-⟨  normal-⟩   normal-,   fragments  normal-{  b  normal-}   normal-)   normal-,   fragments  normal-(   fragments  normal-⟨  a  normal-⟩   normal-,   fragments  normal-{  a  normal-,  b  normal-}   normal-)   normal-,   fragments  normal-(   fragments  normal-⟨  b  normal-⟩   normal-,   fragments  normal-{  a  normal-,  b  normal-}   normal-)   normal-}     \mathit{failures}\left(\left(a\rightarrow\mathit{STOP}\right)\sqcap\left(b%
 \rightarrow\mathit{STOP}\right)\right)=\left\{\left(\langle\rangle,\left\{a%
 \right\}\right),\left(\langle\rangle,\left\{b\right\}\right),\left(\langle a%
 \rangle,\left\{a,b\right\}\right),\left(\langle b\rangle,\left\{a,b\right\}%
 \right)\right\}     The failures/divergence model further extends the failures model to handle divergence . The semantics of a process in the failures/divergences model is a pair    (    𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠  ⟂    (  P  )    ,   𝑑𝑖𝑣𝑒𝑟𝑔𝑒𝑛𝑐𝑒𝑠   (  P  )    )        subscript  𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠  perpendicular-to   P     𝑑𝑖𝑣𝑒𝑟𝑔𝑒𝑛𝑐𝑒𝑠  P     \left(\mathit{failures}_{\perp}\left(P\right),\mathit{divergences}\left(P%
 \right)\right)   where    𝑑𝑖𝑣𝑒𝑟𝑔𝑒𝑛𝑐𝑒𝑠   (  P  )       𝑑𝑖𝑣𝑒𝑟𝑔𝑒𝑛𝑐𝑒𝑠  P    \mathit{divergences}\left(P\right)   is defined as the set of all traces that can lead to divergent behavior and      𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠  ⟂    (  P  )    =    𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠   (  P  )    ∪   {   (  s  ,  X  )   ∣   s  ∈   𝑑𝑖𝑣𝑒𝑟𝑔𝑒𝑛𝑐𝑒𝑠   (  P  )     }           subscript  𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠  perpendicular-to   P       𝑓𝑎𝑖𝑙𝑢𝑟𝑒𝑠  P    conditional-set   s  X     s    𝑑𝑖𝑣𝑒𝑟𝑔𝑒𝑛𝑐𝑒𝑠  P        \mathit{failures}_{\perp}\left(P\right)=\mathit{failures}\left(P\right)\cup%
 \left\{\left(s,X\right)\mid s\in\mathit{divergences}\left(P\right)\right\}   .  Tools  Over the years, a number of tools for analyzing and understanding systems described using CSP have been produced. Early tool implementations used a variety of machine-readable syntaxes for CSP, making input files written for different tools incompatible. However, most CSP tools have now standardized on the machine-readable dialect of CSP devised by Bryan Scattergood, sometimes referred to as CSP M . 22 The CSP M dialect of CSP possesses a formally defined operational semantics , which includes an embedded functional programming language .  The most well-known CSP tool is probably Failures/Divergence Refinement 2 ( FDR2 ), which is a commercial product developed by Formal Systems (Europe) Ltd. FDR2 is often described as a model checker , but is technically a refinement checker, in that it converts two CSP process expressions into Labelled Transition Systems (LTSs), and then determines whether one of the processes is a refinement of the other within some specified semantic model (traces, failures, or failures/divergence). 23 FDR2 applies various state-space compression algorithms to the process LTSs in order to reduce the size of the state-space that must be explored during a refinement check.  The Adelaide Refinement Checker ( ARC ) 24 is a CSP refinement checker developed by the Formal Modelling and Verification Group at The University of Adelaide . ARC differs from FDR2 in that it internally represents CSP processes as Ordered Binary Decision Diagrams (OBDDs), which alleviates the state explosion problem of explicit LTS representations without requiring the use of state-space compression algorithms such as those used in FDR2.  The ProB project, 25 which is hosted by the Institut für Informatik, Heinrich-Heine-Universität Düsseldorf, was originally created to support analysis of specifications constructed in the B method . However, it also includes support for analysis of CSP processes both through refinement checking, and LTL model-checking. ProB can also be used to verify properties of combined CSP and B specifications.  The Process Analysis Toolkit (PAT) 26 27 is a CSP analysis tool developed in the School of Computing at the National University of Singapore . PAT is able to perform refinement checking, LTL model-checking, and simulation of CSP and Timed CSP processes. The PAT process language extends CSP with support for mutable shared variables, asynchronous message passing, and a variety of fairness and quantitative time related process constructs such as deadline and waituntil . The underlying design principle of the PAT process language is to combine a high-level specification language with procedural programs (e.g. an event in PAT may be a sequential program or even an external C# library call) for greater expressiveness. Mutable shared variables and asynchronous channels provide a convenient syntactic sugar for well-known process modelling patterns used in standard CSP. The PAT syntax is similar, but not identical, to CSP M . 28 The principal differences between the PAT syntax and standard CSP M are the use of semicolons to terminate process expressions, the inclusion of syntactic sugar for variables and assignments, and the use of slightly different syntax for internal choice and parallel composition.  CSPsim 29 is a lazy simulator. It does not model check CSP, but is useful for exploring very large (potentially infinite) systems.  Related formalisms  Several other specification languages and formalisms have been derived from, or inspired by, the classic untimed CSP, including:   Timed CSP , which incorporates timing information for reasoning about real-time systems  Receptive Process Theory , a specialization of CSP that assumes an asynchronous (i.e. nonblocking ) send operation  CSPP  HCSP  Wright , an architecture description language  TCOZ , an integration of Timed CSP and Object Z  Circus , an integration of CSP and Z based on the Unifying Theories of Programming  CML (COMPASS Modelling Language), a combination of Circus and VDM developed for the modelling of Systems of Systems (SoS)  CspCASL , an extension of CASL that integrates CSP  LOTOS , an international standard 30 that incorporates features of CSP and CCS .   Comparison with the Actor Model  In as much as it is concerned with concurrent processes that exchange messages, the Actor model is broadly similar to CSP. However, the two models make some fundamentally different choices with regard to the primitives they provide:   CSP processes are anonymous, while actors have identities.    CSP message-passing fundamentally involves a rendezvous between the processes involved in sending and receiving the message, i.e. the sender cannot transmit a message until the receiver is ready to accept it. In contrast, message-passing in actor systems is fundamentally asynchronous, i.e. message transmission and reception do not have to happen at same time, and senders may transmit messages before receivers are ready to accept them. These approaches may be considered duals of each other, in the sense that rendezvous-based systems can be used to construct buffered communications that behave as asynchronous messaging systems, while asynchronous systems can be used to construct rendezvous-style communications by using a message/acknowledgement protocol to synchronize senders and receivers.    CSP uses explicit channels for message passing, whereas actor systems transmit messages to named destination actors. These approaches may also be considered duals of each other, in the sense that processes receiving through a single channel effectively have an identity corresponding to that channel, while the name-based coupling between actors may be broken by constructing actors that behave as channels.   See also   occam was the first language implementing a CSP model.  Ease programming language combines the process constructs of CSP with logically shared data structures.  JCSP is a blending of CSP and occam concepts in a Java thread support API.  XC is a language developed by XMOS which was heavily influenced by CSP and occam  Limbo is a language that implements concurrency inside the Inferno operating system, in a style inspired by CSP.  Plan 9 from Bell Labs and Plan 9 from User Space include the libthread library which allows the use of a CSP-inspired concurrency model from C .  VerilogCSP is a set of macros added to Verilog HDL to support communicating sequential processes channel communications.  SystemVerilogCSP 31 is a package for SystemVerilog that enables abstract CSP-like communication actions in SystemVerilog .  Trace monoid and history monoid , the mathematical formalism of which CSP is an example.  Trace theory , the general theory of traces.  Go is a programming language by Google incorporating ideas from CSP. 32 33  Clojure's core.async is a library for the Clojure programming language based on CSP principles.  Joyce is a programming language based on the principles of CSP, developed by Brinch Hansen around 1989.  SuperPascal is a programming language also developed by Brinch Hansen , influenced by CSP and his earlier work with Joyce .  Ada implements features of CSP such as the rendezvous.  Haskell MVars are a rendezvous mechanism for synchronizing threads. 34  DirectShow is the video framework inside DirectX , it uses the CSP concepts to implement the audio and video filters.  OpenComRTOS is a formally developed network-centric distributed RTOS based on a pragmatic superset of CSP.  Input/output automaton  Sire programming language (submitted thesis by James W. Hanlon, 2014)  Concurrent ML is a concurrent extension of Standard ML.  Hopac is a Concurrent ML style concurrent programming library for F#.  scala-gopher is an implementation of CSP in scala  C++CSP2 is an implementation of CSP in C++   Further reading     This book has been updated by Jim Davies at the Oxford University Computing Laboratory and the new edition is available for download as a PDF file at the Using CSP website.       Some links relating to this book are available here . The full text is available for download as a PS or PDF file from Bill Roscoe's list of academic publications.    References  External links   A PDF version of Hoare's CSP book - Copyright restriction apply, see the page text before downloading.  WoTUG , a User Group for CSP and occam style systems, contains some information about CSP and useful links.  [ http://citeseerx.ist.psu.edu/search?q=communicating+sequential+processes&submit; ;=Search&sort;=rlv&t;=doc CSP Citations from CiteSeer]  LuaCSP , a framework that allows you to create CSP Occam-like Lua-based programming language embeddable in your application.   "  Category:1978 introductions  Category:1978 in computer science  Category:Process calculi  Category:Concurrent computing      , INMOS document 72 occ 45 03 ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩   ↩     ↩  ↩   ↩   ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ISO 8807, Language of Temporal Ordering Specification ↩  ↩   Origins of Go concurrency style . Talk by Rob Pike at OSCON's Emerging Languages Camp 2010. ↩  1 . Control.Concurrent.MVar ↩   