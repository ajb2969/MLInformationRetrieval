


Berlekamp–Massey algorithm




Berlekamp–Massey algorithm

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



The Berlekamp–Massey algorithm is an algorithm that will find the shortest linear feedback shift register (LFSR) for a given binary output sequence. The algorithm will also find the minimal polynomial of a linearly recurrent sequence in an arbitrary field. The field requirement means that the Berlekamp–Massey algorithm requires all non-zero elements to have a multiplicative inverse.1 Reeds and Sloane offer an extension to handle a ring.2
Elwyn Berlekamp invented an algorithm for decoding Bose–Chaudhuri–Hocquenghem (BCH) codes.34 James Massey recognized its application to linear feedback shift registers and simplified the algorithm.56 Massey termed the algorithm the LFSR Synthesis Algorithm (Berlekamp Iterative Algorithm),7 but it is now known as the Berlekamp–Massey algorithm.
Description of algorithm
The Berlekamp–Massey algorithm is an alternate method to solve the set of linear equations described in Reed–Solomon Peterson decoder, which can be summarized as:



In the code examples below, C(x) is a potential instance of Λ(x). The error locator polynomial C(x) for L errors is defined as:



or reversed:



The goal of the algorithm is to determine the minimal degree L and C(x) which results in:



for all syndromes, n = L to (N-1).
Algorithm: C(x) is initialized to 1, L is the current number of assumed errors, and initialized to zero. N is the total number of syndromes. n is used as the main iterator and to index the syndromes from 0 to (N-1). B(x) is a copy of the last C(x) since L was updated and initialized to 1. b is a copy of the last discrepancy d (explained below) since L was updated and initialized to 1. m is the number of iterations since L, B(x), and b were updated and initialized to 1.
Each iteration of the algorithm calculates a discrepancy d. At iteration k this would be:



If d is zero, the algorithm assumes that C(x) and L are correct for the moment, increments m, and continues.
If d is not zero, the algorithm adjusts C(x) so that a recalculation of d would be zero:



The xm term shifts B(x) so it follows the syndromes corresponding to 'b'. If the previous update of L occurred on iteration j, then m = k - j, and a recalculated discrepancy would be:



This would change a recalculated discrepancy to:



The algorithm also needs to increase L (number of errors) as needed. If L equals the actual number of errors, then during the iteration process, the discrepancies will become zero before n becomes greater than or equal to (2 L). Otherwise L is updated and algorithm will update B(x), b, increase L, and reset m = 1. The L = (n + 1 - L) formula limits L to the number of available syndromes used to calculate discrepancies, and also handles the case where L increases by more than 1.
The algorithm for the binary field
The following is the Berlekamp–Massey algorithm specialized for the typical binary finite field F2 and GF(2). The field elements are 0 and 1. The field operations + and − are identical and become the exclusive or operation, XOR. The multiplication operator * becomes the logical AND operation. The division operator reduces to the identity operation (i.e., field division is only defined for dividing by 1, and x/1 = x).

Let 
 
 
 
 
  be the bits of the stream.
Initialise two arrays 
 
 
 
  and 
 
 
 
  each of length 
 
 
 
  to be zeroes, except 
 
 

assign

 
 
 .
For

step 1 while

 
 :
 
Let 
 
 
 
  be 
 
 
 
 .
if

 
 
 , then

 
  is already a polynomial which annihilates the portion of the stream from 
 
 
 
  to 
 
 
 
 .
else:
 
Let 
 
 
 
  be a copy of 
 
 
 
 
 .
Set 
 
 
 
  up to 
 
 
 
  (where 
 
 
 
  is the Exclusive or operator).
If 
 
 
 
 , set 
 
 
 
 
 , set 
 
 
 
 , and let 
 
 
 
 ; otherwise leave 
 
 
 
 , 
 
 
 
  and 
 
 
 
 
  alone.



At the end of the algorithm, 
 
 
 
  is the length of the minimal LFSR for the stream, and we have 
 
 
 
  for all 
 
 
 
 .
Code sample for the binary field in Java
The following code sample is for a binary field.
    public static int runTest(int[] array) {
         final int N = array.length;
         int[] b = new int[N];
         int[] c = new int[N];
         int[] t = new int[N];
         b[0] = 1;
         c[0] = 1;
         int l = 0;
         int m = -1;
         for (int n = 0; n < N; n++) {
             int d = 0;
             for (int i = 0; i <= l; i++) {
                 d ^= c[i] * array[n - i];
             }
             if (d == 1) {
                 System.arraycopy(c, 0, t, 0, N);
                 int N_M = n - m;
                 for (int j = 0; j < N - N_M; j++) {
                     c[N_M + j] ^= b[j];
                 }
                 if (l <= n / 2) {
                     l = n + 1 - l;
                     m = n;
                     System.arraycopy(t, 0, b, 0, N);
                 }
             }
         }
         return l;
     }
Berlekamp–Massey algorithm for fields
The algorithm from .
  polynomial(field K) s(x) = ... /* coeffs are s_j; output sequence as N-1 degree polynomial) */
   /* connection polynomial */
   polynomial(field K) C(x) = 1;  /* coeffs are c_j */
   polynomial(field K) B(x) = 1;
   int L = 0;
   int m = 1;
   field K b = 1;
   int n;
   for (n = 0; n < N; n++)
     {
       /* calculate discrepancy */
       field K d = s_n + \Sigma_{i=1}^L c_i * s_{n-i};
       if (d == 0)
         {
           /* annihilation continues */
           m = m + 1;
         }
       else if (2 * L <= n)
         {
           /* temporary copy of C(x) */
           polynomial(field K) T(x) = C(x);
           C(x) = C(x) - d b^{-1} x^m B(x);
           L = n + 1 - L;
           B(x) = T(x);
           b = d;
           m = 1;
         }
       else
         {
           C(x) = C(x) - d b^{-1} x^m B(x);
           m = m + 1;
         }
     }
   return L;
See also

Reeds–Sloane algorithm, an extension for sequences over integers mod n
Berlekamp–Welch algorithm
NLFSR, Non-Linear Feedback Shift Register

References
External links


Berlekamp–Massey algorithm at PlanetMath.

GF(2) implementation in Mathematica

Applet Berlekamp–Massey algorithm
Online GF(2) Berlekamp-Massey calculator

"
Category:Error detection and correction Category:Cryptanalytic algorithms






. Previous publisher McGraw-Hill, New York, NY.






