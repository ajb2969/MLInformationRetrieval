   Lamport timestamps      Lamport timestamps   The algorithm of Lamport timestamps is a simple algorithm used to determine the order of events in a distributed computer system . As different nodes or processes will typically not be perfectly synchronized, this algorithm is used to provide a partial ordering of events with minimal overhead, and conceptually provide a starting point for the more advanced vector clock method. They are named after their creator, Leslie Lamport .  Distributed algorithms such as resource synchronization often depend on some method of ordering events to function. For example, consider a system with two processes and a disk. The processes send messages to each other, and also send messages to the disk requesting access. The disk grants access in the order the messages were sent. Now, imagine process 1 sends a message to the disk asking for access to write, and then sends a message to process 2 asking it to read. Process 2 receives the message, and as a result sends its own message to the disk. Now, due to some timing delay, the disk receives both messages at the same time: how does it determine which message happened-before the other? (   A   A   A   happens-before   B   B   B   if one can get from   A   A   A   to   B   B   B   by a sequence of moves of two types: moving forward while remaining in the same process, and following a message from its sending to its reception.) A logical clock algorithm provides a mechanism to determine facts about the order of such events.  Lamport invented a simple mechanism by which the happened-before ordering can be captured numerically. A Lamport logical clock is an incrementing software counter maintained in each process.  It follows some simple rules:   A process increments its counter before each event in that process;  When a process sends a message, it includes its counter value with the message;  On receiving a message, the receiver process sets its counter to be the maximum of the message counter and its own counter incremented, before it considers the message received.   Conceptually, this logical clock can be thought of as a clock that only has meaning in relation to messages moving between processes. When a process receives a message, it resynchronizes its logical clock with that sender.  Considerations  For every two different events   a   a   a   and   b   b   b   occurring in the same process, and    C   (  x  )       C  x    C(x)   being the timestamp for a certain event   x   x   x   , it is necessary that    C   (  a  )       C  a    C(a)   never equals    C   (  b  )       C  b    C(b)   .  Therefore it is necessary that:   The logical clock be set so that there is minimum of one clock "tick" (increment of the counter) between events   a   a   a   and   b   b   b   ;  In a multiprocess or multithreaded environment, it might be necessary to attach the process ID (PID) or any other unique ID to the timestamp so that it is possible to differentiate between events   a   a   a   and   b   b   b   which may occur simultaneously in different processes.   Implications  A Lamport clock may be used to create a partial causal ordering of events between processes. Given a logical clock following these rules, the following relation is true: if    a  →  b     normal-→  a  b    a\rightarrow b   then     C   (  a  )    <   C   (  b  )          C  a     C  b     C(a)   , where   →   normal-→   \rightarrow\,   means happened-before .  This relation only goes one way, and is called clock consistency condition : if one event comes before another, then that event's logical clock comes before the other's. The strong clock consistency condition , which is two way (if     C   (  a  )    <   C   (  b  )          C  a     C  b     C(a)   then    a  →  b     normal-→  a  b    a\rightarrow b   ), can be obtained by other techniques such as vector clocks . Using only a simple Lamport clock, only a partial causal ordering can be inferred from the clock.  However, via the contrapositive, it's true that     C   (  a  )    ≮   C   (  b  )       not-less-than    C  a     C  b     C(a)\nless C(b)   implies    a  ↛  b     normal-↛  a  b    a\nrightarrow b   . So, for example, if     C   (  a  )    ≥   C   (  b  )          C  a     C  b     C(a)\geq C(b)   then   a   a   a   cannot have happened-before   b   b   b   .  Another way of putting this is that     C   (  a  )    <   C   (  b  )          C  a     C  b     C(a)   means that   a   a   a   may have happened-before   b   b   b   , or be incomparable with   b   b   b   in the happened-before ordering, but   a   a   a   did not happen after   b   b   b   .  Nevertheless, Lamport timestamps can be used to create a total ordering of events in a distributed system by using some arbitrary mechanism to break ties (e.g. the ID of the process). The caveat is that this ordering is artifactual and cannot be depended on to imply a causal relationship.  Lamport's logical clock in distributed systems   In a distributed system, it is not possible in practice to synchronize time across entities (typically thought of as processes) within the system; hence, the entities can use the concept of a logical clock based on the events through which they communicate.  If two entities do not exchange any messages, then they probably do not need to share a common clock; events occurring on those entities are termed as concurrent events.  Among the processes on the same local machine we can order the events based on the local clock of the system.  When two entities communicate by message passing, then the send event is said to 'happen before' the receive event, and the logical order can be established among the events.  A distributed system is said to have partial order if we can have a partial order relationship among the events in the system. If 'totality', i.e., causal relationship among all events in the system, can be established, then the system is said to have total order.  A single entity cannot have two events occur simultaneously. If the system has total order we can determine the order among all events in the system. If the system has partial order between processes, which is the type of order Lamport's logical clock provides, then we can only tell the ordering between entities that interact. Lamport addressed ordering two events with the same timestamp (or counter): "To break ties, we use any arbitrary total ordering  Thus two timestamps or counters may be the same within a distributed system, but in applying the logical clocks algorithm events that occur will always maintain at least a strict partial ordering.   See also   Happened-before  Vector clocks   References    "  Category:Distributed algorithms   