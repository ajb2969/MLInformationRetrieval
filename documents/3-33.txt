


Temporal logic




Temporal logic

In logic, temporal logic is any system of rules and symbolism for representing, and reasoning about, propositions qualified in terms of time. In a temporal logic we can then express statements like "I am always hungry", "I will eventually be hungry", or "I will be hungry until I eat something". Temporal logic is sometimes also used to refer to tense logic, a particular modal logic-based system of temporal logic introduced by Arthur Prior in the late 1950s, and important results were obtained by Hans Kamp. Subsequently it has been developed further by computer scientists, notably Amir Pnueli, and logicians.
Temporal logic has found an important application in formal verification, where it is used to state requirements of hardware or software systems. For instance, one may wish to say that whenever a request is made, access to a resource is eventually granted, but it is never granted to two requestors simultaneously. Such a statement can conveniently be expressed in a temporal logic.
Motivation
Consider the statement: "I am hungry." Though its meaning is constant in time, the truth value of the statement can vary in time. Sometimes the statement is true, and sometimes the statement is false, but the statement is never true and false simultaneously. In a temporal logic, statements can have a truth value which can vary in time. Contrast this with an atemporal logic, which can only discuss statements whose truth value is constant in time. This treatment of truth values over time differentiates temporal logic from computational verb logic.
Temporal logic always has the ability to reason about a time line. So-called linear time logics are restricted to this type of reasoning. Branching logics, however, can reason about multiple time lines. This presupposes an environment that may act unpredictably. To continue the example, in a branching logic we may state that "there is a possibility that I will stay hungry forever." We may also state that "there is a possibility that eventually I am no longer hungry." If we do not know whether or not I will ever get fed, these statements are both true some times.
History
Although Aristotle's logic is almost entirely concerned with the theory of the categorical syllogism, there are passages in his work that are now seen as anticipations of temporal logic, and may imply an early, partially developed form of first-order temporal modal binary logic. Aristotle was particularly concerned with the problem of future contingents, where he could not accept that the principle of bivalence applies to statements about future events, i.e. that we can presently decide if a statement about a future event is true or false, such as "there will be a sea battle tomorrow".1
There was little development for millennia, Charles Sanders Peirce noted in the 19th century:2 
Arthur Prior was concerned with the philosophical matters of free will and predestination. According to his wife, he first considered formalizing temporal logic in 1953. He gave lectures on the topic at the University of Oxford in 1955-6, and in 1957 published a book, Time and Modality, in which he introduced a propositional modal logic with two temporal connectives (modal operators), F and P, corresponding to "sometime in the future" and "sometime in the past". In this early work, Prior considered time to be linear. In 1958 however, he received a letter from Saul Kripke, who pointed out that this assumption is perhaps unwarranted. In a development that foreshadowed a similar one in computer science, Prior took this under advisement, and developed two theories of branching time, which he called "Ockhamist" and "Peircean".3 Between 1958 and 1965 Prior also corresponded with Charles Leonard Hamblin, and a number of early developments in the field can be traced to this correspondence, for example Hamblin implications. Prior published his most mature work on the topic, the book Past, Present, and Future in 1967. He died two years later.4
The binary temporal operators Since and Until were introduced by Hans Kamp in his 1968 Ph. D. thesis,5 which also contains an important result relating temporal logic to first order logic—a result now known as Kamp's theorem.678
Two early contenders in formal verifications were Linear Temporal Logic (a linear time logic by Amir Pnueli) and Computation Tree Logic, a branching time logic by Mordechai Ben-Ari, Zohar Manna and Amir Pnueli. An almost equivalent formalism to CTL was suggested around the same time by E.M. Clarke and E.A. Emerson. The fact that the second logic can be decided more efficiently than the first does not reflect on branching and linear logics in general, as has sometimes been argued. Rather, Emerson and Lei show that any linear logic can be extended to a branching logic that can be decided with the same complexity.
Temporal operators
Temporal logic has two kinds of operators: logical operators and modal operators 1. Logical operators are usual truth-functional operators (
 
 
 
 ). The modal operators used in Linear Temporal Logic and Computation Tree Logic are defined as follows.




Textual

Symbolic

Definition

Explanation

Diagram





Binary operators





U









Until
 
 
 
  holds at the current or a future position, and 
 
 
 
  has to hold until that position. At that position 
 
 
 
  does not have to hold any more.

 ImageSize = width:240 height:94 PlotArea = left:30 bottom:30 top:0 right:20 DateFormat = x.y Period = from:0 till:6 TimeAxis = orientation:horizontal AlignBars = justify ScaleMajor = gridcolor:black increment:1 start:0 ScaleMinor = gridcolor:black increment:1 start:0 PlotData=
bar:p color:red width:10 align:left fontsize:S
from:1 till:3
bar:q color:red width:10 align:left fontsize:S
from:3 till:5
bar:pUq color:red width:10 align:left fontsize:S
from:1 till:5






R









Release
 
 
 
  releases 
 
 
 
  if 
 
 
 
  is true until the first position in which 
 
 
 
  is true (or forever if such a position does not exist).

 ImageSize = width:240 height:100 PlotArea = left:30 bottom:30 top:0 right:20 DateFormat = x.y Period = from:0 till:8 TimeAxis = orientation:horizontal AlignBars = justify ScaleMajor = gridcolor:black increment:1 start:0 ScaleMinor = gridcolor:black increment:1 start:0 PlotData=
bar:p color:red width:10 align:left fontsize:S
from:2 till:4
from:6 till:8
bar:q color:red width:10 align:left fontsize:S
from:1 till:3
from:5 till:6
from:7 till:8
bar:pRq color:red width:10 align:left fontsize:S
from:1 till:3
from:7 till:8




Unary operators



N











Next
 
 
 
  has to hold at the next state. (X is used synonymously.)

 ImageSize = width:240 height:60 PlotArea = left:30 bottom:30 top:0 right:20 DateFormat = x.y Period = from:0 till:6 TimeAxis = orientation:horizontal AlignBars = justify ScaleMajor = gridcolor:black increment:1 start:0 ScaleMinor = gridcolor:black increment:1 start:0 PlotData=
bar:p color:red width:10 align:left fontsize:S
from:2 till:3
from:5 till:6
bar:Np color:red width:10 align:left fontsize:S
from:1 till:2
from:4 till:5




F











Future
 
 
 
  eventually has to hold (somewhere on the subsequent path).

 ImageSize = width:240 height:60 PlotArea = left:30 bottom:30 top:0 right:20 DateFormat = x.y Period = from:0 till:6 TimeAxis = orientation:horizontal AlignBars = justify ScaleMajor = gridcolor:black increment:1 start:0 ScaleMinor = gridcolor:black increment:1 start:0 PlotData=
bar:p color:red width:10 align:left fontsize:S
from:2 till:3
from:4 till:5
bar:Fp color:red width:10 align:left fontsize:S
from:0 till:5




G











Globally
 
 
 
  has to hold on the entire subsequent path.

 ImageSize = width:240 height:60 PlotArea = left:30 bottom:30 top:0 right:20 DateFormat = x.y Period = from:0 till:6 TimeAxis = orientation:horizontal AlignBars = justify ScaleMajor = gridcolor:black increment:1 start:0 ScaleMinor = gridcolor:black increment:1 start:0 PlotData=
bar:p color:red width:10 align:left fontsize:S
from:1 till:3
from:4 till:6
bar:Gp color:red width:10 align:left fontsize:S
from:4 till:6




A











All
 
 
 
  has to hold on all paths starting from the current state.




E











Exists: there exists at least one path starting from the current state where 
 
 
 
  holds.




Alternate symbols:

operator R is sometimes denoted by V
The operator W is the weak until operator
 
 
 
  is equivalent to 
 
 


Unary operators are well-formed formulas whenever B(
 
 
 
 ) is well-formed. Binary operators are well-formed formulas whenever B(
 
 
 
 ) and C(
 
 
 
 ) are well-formed.
In some logics, some operators cannot be expressed. For example, N operator cannot be expressed in Temporal Logic of Actions.
Temporal logics
Temporal logics include

Interval temporal logic (ITL)
μ calculus. which includes as a subset
 
Hennessy-Milner logic (HML)
CTL*, which includes as a subset
 
Computational tree logic (CTL)
Linear temporal logic (LTL)
Metric interval temporal logic (MITL) 9
Signal temporal logic (STL) 10



A variation, closely related to temporal or chronological or tense logics, are modal logics based upon "topology", "place", or "spatial position".1112
See also

HPO formalism
Kripke structure
Automata theory
Chomsky grammar
State transition system
Duration calculus (DC)
Hybrid logic
Temporal logic in finite-state verification
Temporal logic of actions (TLA)
Important publications in formal verification (including the use of temporal logic in formal verification)
Reo Coordination Language
Modal logic
Research Materials: Max Planck Society Archive

Notes
References

Mordechai Ben-Ari, Zohar Manna, Amir Pnueli: The Temporal Logic of Branching Time. POPL 1981: 164-176
Amir Pnueli: The Temporal Logic of Programs FOCS 1977: 46-57
Venema, Yde, 2001, "Temporal Logic," in Goble, Lou, ed., The Blackwell Guide to Philosophical Logic. Blackwell.
E. A. Emerson and C. Lei, modalities for model checking: branching time logic strikes back, in Science of Computer Programming 8, p 275-306, 1987.
E.A. Emerson, Temporal and modal logic, Handbook of Theoretical Computer Science, Chapter 16, the MIT Press, 1990

preprint Historical perspective on how seemingly disparate ideas came together in computer science and engineering. (The mention of Church in the title of this paper is a reference to a little-known 1957 paper, in which Church proposed a way to perform hardware verification.)

Further reading



External links

Stanford Encyclopedia of Philosophy: "Temporal Logic" -- by Anthony Galton.
Temporal Logic by Yde Venema, formal description of syntax and semantics, questions of axiomatization. Treating also Kamp's dyadic temporal operators (since, until)
Notes on games in temporal logic by Ian Hodkinson, including a formal description of first-order temporal logic
CADP - provides generic model checkers for various temporal logic
PAT is a powerful free model checker, LTL checker, simulator and refinement checker for CSP and its extensions (with shared variable, arrays, wide range of fairness).

"
 



Vardi 2008, p. 153↩
Vardi 2008, p. 154↩

 pp. 176-178, 210↩
↩
↩
Vardi 2008, p. 154↩
↩
O. Maler, D. Nickovic, "Monitoring temporal properties of continuous signals", 2004↩

Nicholas Rescher, James Garson, "Topological Logic" in The Journal of Symbolic Logic, 33(4):537-548, December, 1968↩
Georg Henrik von Wright, "A Modal Logic of Place", in E. Sosa (Editor), pp. 65-73, "The Philosophy of Nicholas Rescher: Discussion and Replies", D. Reidel, Dordrecht, Holland, 1979↩




