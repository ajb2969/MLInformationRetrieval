   Oblivious transfer      Oblivious transfer   In cryptography , an oblivious transfer protocol (often abbreviated OT ) is a type of protocol in which a sender transfers one of potentially many pieces of information to a receiver, but remains oblivious as to what piece (if any) has been transferred.  The first form of oblivious transfer was introduced in 1981 by Michael O. Rabin . In this form, the sender sends a message to the receiver with probability 1/2, while the sender remains oblivious as to whether or not the receiver received the message. Rabin's oblivious transfer scheme is based on the RSA cryptosystem. A more useful form of oblivious transfer called 1-2 oblivious transfer or "1 out of 2 oblivious transfer," was developed later by Shimon Even , Oded Goldreich , and Abraham Lempel , in order to build protocols for secure multiparty computation . It is generalized to "1 out of n oblivious transfer" where the user gets exactly one database element without the server getting to know which element was queried, and without the user knowing anything about the other elements that were not retrieved. The latter notion of oblivious transfer is a strengthening of private information retrieval , in which the database is not kept private.  Claude Crépeau showed that Rabin's oblivious transfer is equivalent to 1-2 oblivious transfer.  Further work has revealed oblivious transfer to be a fundamental and important problem in cryptography. It is considered one of the critical problems in the field, because of the importance of the applications that can be built based on it. In particular, it is complete for secure multiparty computation : that is, given an implementation of oblivious transfer it is possible to securely evaluate any polynomial time computable function without any additional primitive.  Rabin's oblivious transfer protocol  In Rabin's oblivious transfer protocol, the sender generates an RSA public modulus N = pq where p and q are large prime numbers , and an exponent e  relatively prime to ( p -1)( q -1). The sender encrypts the message m as m e mod N .   The sender sends N , e , and m e mod N to the receiver.  The receiver picks a random x modulo N and sends x 2 mod N to the sender. Note that gcd( x,N )=1 with overwhelming probability, which ensures that there are 4 square roots of x 2 mod N .  The sender finds a square root y of x 2 mod N and sends y to the receiver.   If the receiver finds y is neither x nor - x modulo N , the receiver will be able to factor  N and therefore decrypt m e to recover m (see Rabin encryption for more details). However, if y is x or - x mod N , the receiver will have no information about m beyond the encryption of it. Since every quadratic residue modulo N has four square roots, the probability that the receiver learns m is 1/2.  1-2 oblivious transfer  In a 1-2 oblivious transfer protocol, the sender has two messages m 0 and m 1 , and the receiver has a bit b , and the receiver wishes to receive m b , without the sender learning b , while the sender wants to ensure that the receiver receives only one of the two messages. The protocol of Even, Goldreich, and Lempel (which the authors attribute partially to Silvio Micali ), is general, but can be instantiated using RSA encryption as follows.      Alice    Bob       Secret   Public   Calculus          m  0   ,   m  1       subscript  m  0    subscript  m  1     m_{0},m_{1}       Messages to be sent        d   d   d          N  ,  e     N  e    N,e      Generate RSA key pair and send public portion to Bob           x  0   ,   x  1       subscript  x  0    subscript  x  1     x_{0},x_{1}      Generate two random messages              v   v   v                k  0       =     (   v  -   x  0    )   d   mod  N         k  1       =     (   v  -   x  1    )   d   mod  N           subscript  k  0     absent   modulo   superscript    v   subscript  x  0    d   N       subscript  k  1     absent   modulo   superscript    v   subscript  x  1    d   N       \begin{aligned}\displaystyle k_{0}&\displaystyle=(v-x_{0})^{d}\mod N\\
 \displaystyle k_{1}&\displaystyle=(v-x_{1})^{d}\mod N\end{aligned}       One of these will equal   k   k   k   , but Alice does not know which.              m  0  ′   =    m  0   +   k  0           m  1  ′   =    m  1   +   k  1              subscript   superscript  m  normal-′   0      subscript  m  0    subscript  k  0          subscript   superscript  m  normal-′   1      subscript  m  1    subscript  k  1        \begin{aligned}\displaystyle m^{\prime}_{0}=m_{0}+k_{0}\\
 \displaystyle m^{\prime}_{1}=m_{1}+k_{1}\end{aligned}      Send both messages to Bob           Alice has two messages,     m  0   ,   m  1       subscript  m  0    subscript  m  1     m_{0},m_{1}   , and wants to send exactly one of them to Bob, but does not want to know which one Bob receives.  Alice generates an RSA key pair, comprising the modulus   N   N   N   , the public exponent   e   e   e   and the private exponent   d   d   d     She also generates two random values,     x  0   ,   x  1       subscript  x  0    subscript  x  1     x_{0},x_{1}   and sends them to Bob along with her public modulus and exponent.  Bob picks   b   b   b   to be either 0 or 1, and selects either the first or second    x  b     subscript  x  b    x_{b}   .  He generates a random value   k   k   k   and blinds    x  b     subscript  x  b    x_{b}   by computing    v  =    (    x  b   +   k  e    )   mod  N       v   modulo     subscript  x  b    superscript  k  e    N     v=(x_{b}+k^{e})\mod N   , which he sends to Alice.  Alice doesn't know (and hopefully cannot determine) which of    x  0     subscript  x  0    x_{0}   and    x  1     subscript  x  1    x_{1}   Bob chose. She applies both of her random values and comes up with two possible values for   k   k   k        k  0   =     (   v  -   x  0    )   d   mod  N        subscript  k  0    modulo   superscript    v   subscript  x  0    d   N     k_{0}=(v-x_{0})^{d}\mod N   and     k  1   =     (   v  -   x  1    )   d   mod  N        subscript  k  1    modulo   superscript    v   subscript  x  1    d   N     k_{1}=(v-x_{1})^{d}\mod N   . One of these will be equal to   k   k   k   and can be correctly decrypted by Bob (but not Alice), while the other will produce a meaningless random value that does not reveal any information about   k   k   k   .  She combines the two secret messages with each of the possible keys,     m  0  ′   =    m  0   +   k  0         subscript   superscript  m  normal-′   0      subscript  m  0    subscript  k  0      m^{\prime}_{0}=m_{0}+k_{0}   and     m  1  ′   =    m  1   +   k  1         subscript   superscript  m  normal-′   1      subscript  m  1    subscript  k  1      m^{\prime}_{1}=m_{1}+k_{1}   , and sends them both to Bob.  Bob knows which of the two messages can be unblinded with   k   k   k   , so he is able to compute exactly one of the messages     m  b   =    m  b  ′   -  k        subscript  m  b      subscript   superscript  m  normal-′   b   k     m_{b}=m^{\prime}_{b}-k      1-out-of-n oblivious transfer and k-out-of-n oblivious transfer  A 1-out-of-n oblivious transfer protocol can be defined as a natural generalization of a 1-out-of-2 oblivious transfer protocol. Specifically, a sender has n messages, and the receiver has an index i , and the receiver wishes to receive the i -th among the sender's messages, without the sender learning i , while the sender wants to ensure that the receiver receive only one of the n messages.  1-out-of-n oblivious transfer is incomparable to private information retrieval (PIR). On the one hand, 1-out-of-n oblivious transfer imposes an additional privacy requirement for the database: namely, that the receiver learn at most one of the database entries. On the other hand, PIR requires communication sublinear in n, whereas 1-out-of-n oblivious transfer has no such requirement.  1-n oblivious transfer protocols were proposed, e.g., by Moni Naor and Benny Pinkas  1 , William Aiello , Yuval Ishai and Omer Reingold  2 , Sven Laur and Helger Lipmaa  3 .  Brassard , Crépeau and Robert further generalized this notion to k-n oblivious transfer, wherein the receiver obtains a set of "k" messages from the "n" message collection. The set of k messages may be received simultaneously ("non-adaptively"), or they may be requested consecutively, with each request based on previous messages received.  Generalized oblivious transfer  k-n Oblivious transfer is a special case of Generalized oblivious transfer, which was presented by Ishai and Kushilevitz. In that setting, the sender has a set U of n messages, and the transfer constraints are specified by a collection A of permissible subsets of U . The receiver may obtain any subset of the messages in U that appears in the collection A . The sender should remain oblivious of the selection made by the receiver, while the receiver cannot learn the value of the messages outside the subset of messages that he chose to obtain. The collection A is monotone decreasing, in the sense that it is closed under containment (i.e., if a given subset B is in the collection A , so are all of the subsets of B ). The solution proposed by Ishai and Kushilevitz uses the parallel invocations of 1-2 oblivious transfer while making use of a special model of private protocols. Later on, other solutions that are based on secret sharing were published --- one by Bhavani Shankar, Kannan Srinathan, and C. Pandu Rangan, and another by Tamir Tassa.  Origins  In the early seventies Stephen Wiesner introduced a primitive called multiplexing in his seminal paper "Conjugate Coding", which was the starting point of quantum cryptography . Unfortunately it took more than ten years to be published. Even though this primitive was equivalent to what was later called 1-2 oblivious transfer , Wiesner did not see its application to cryptography.  See also   Secure multiparty computation  Zero knowledge proof  PIR   References    Stephen Wiesner, "Conjugate coding", Sigact News, vol. 15, no. 1, 1983, pp. 78 - 88; original manuscript written circa 1970.   Michael O. Rabin . "How to exchange secrets by oblivious transfer." Technical Report TR-81, Aiken Computation Laboratory, Harvard University, 1981. Scanned handwriting + typed version on eprint.iacr.org archive . Typed version available on Dousti's homepage ([ https://docs.google.com/viewer?a=v&pid; ;=explorer&chrome;=true&srcid;=1NNsAGWFaxNp2O2h3-AAqP2uMfPXdliUJ2BIsdXScbK3ZYx7GJMXvE1hS7uKI&hl;=en Alternate link on Google Docs]).   S. Even, O. Goldreich, and A. Lempel, "A Randomized Protocol for Signing Contracts", Communications of the ACM , Volume 28, Issue 6, pg. 637-647, 1985. Paper at Catuscia Palamidessi's page   Claude Crépeau . "Equivalence between two flavours of oblivious transfer". In Advances in Cryptology: CRYPTO '87, volume 293 of Lecture Notes in Computer Science, pages 350--354. Springer, 1988   Joe Kilian . "Founding Cryptography on Oblivious Transfer", Proceedings, 20th Annual ACM Symposium on the Theory of Computation (STOC), 1988. Paper at ACM portal (subscription required)   Gilles Brassard , Claude Crépeau and Jean-Marc Robert . "All-or-nothing disclosure of secrets." In Advances in Cryptology: CRYPTO ’86, volume 263 of LNCS, pages 234–238. Springer, 1986.   Moni Naor and Benny Pinkas . "Oblivious transfer with adaptive queries." In Advances in Cryptology: CRYPTO ’99, volume 1666 of LNCS, pages 573–-590. Springer, 1999.   Yuval Ishai and Eyal Kushilevitz. "Private simultaneous messages protocols with applications." In Proc. of ISTCS’97, IEEE Computer Society, pages 174–-184, 1997.   Bhavani Shankar, Kannan Srinathan and C. Pandu Rangan. "Alternative protocols for generalized oblivious transfer". In Proc. of ICDCN’08, LNCS 4904, pages 304-–309, 2008.   Tamir Tassa. "Generalized oblivious transfer by secret sharing". Designs, Codes and Cryptography, Volume 58:1, pages 11-21, January 2011. Paper at openu.ac.il   External links   Helger Lipmaa's collection of Web links on the topic   "  Category:Cryptographic protocols  Category:Cryptographic primitives   