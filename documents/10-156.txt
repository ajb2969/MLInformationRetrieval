


Lambda-mu calculus




Lambda-mu calculus

In mathematical logic and computer science, the lambda-mu calculus is an extension of the lambda calculus, and was introduced by M. Parigot.1 It introduces two new operators: the mu operator (which is completely different both from the mu operator found in computability theory and from the μ operator of modal μ-calculus) and the bracket operator. Proof-theoretically, it provides a well-behaved formulation of classical natural deduction.
One of the main goals of this extended calculus is to be able to describe expressions corresponding to theorems in classical logic. According to the Curry–Howard isomorphism, lambda calculus on its own can express theorems in intuitionistic logic only, and several classical logical theorems can't be written at all. However with these new operators one is able to write terms that have the type of, for example, Peirce's law.
Semantically these operators correspond to continuations, found in some functional programming languages.
Formal definition
We can augment the definition of a lambda expression to gain one in the context of lambda-mu calculus. The three main expressions found in lambda calculus are as follows:

V, a variable, where V is any identifier.
λV.E, an abstraction, where V is any identifier and E is any lambda expression.
(E E′), an application, where E and E′ are any lambda expressions.

For details, see the corresponding article.
In addition to the traditional λ-variables, the lambda-mu calculus includes a distinct set of μ-variables. These μ-variables can be used to name or freeze arbitrary subterms, allowing us to later abstract on those names. The set of terms contains unnamed (all traditional lambda expressions are of this kind) and named terms. The terms that are added by the lambda-mu calculus are of the form:

[α]t is a named term, where α is a μ-variable and t is an unnamed term.
(μ α. E) is an unnamed term, where α is a μ-variable and E is a named term.

Reduction
The basic reduction rules used in the lambda-mu calculus are the following:




logical reduction







structural reduction







renaming







the equivalent of η-reduction



 
 , for α not freely occurring in u



These rules cause the calculus to be confluent. Further reduction rules could be added to provide us with a stronger notion of normal form, though this would be at the expense of confluence.
See also

Lambda Calculus
Classical pure type systems for typed generalizations of lambda calculi with control

References
External links

Lambda-mu relevant discussion on Lambda the Ultimate.

"
Category:Lambda calculus Category:Proof theory



Michel Parigot. λμ-Calculus: An algorithmic interpretation of classical natural deduction. Lecture Notes in Computer Science, Volume 624, pages 190-201, 1992.




