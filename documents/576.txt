   Alternating Turing machine      Alternating Turing machine   In computational complexity theory , an alternating Turing machine ( ATM ) is a non-deterministic Turing machine ( NTM ) with a rule for accepting computations that generalizes the rules used in the definition of the complexity classes  NP and co-NP . The concept of an ATM was set forth by Chandra and Stockmeyer 1 and independently by Kozen 2 in 1976, with a joint journal publication in 1981. 3  Definitions  Informal description  The definition of NP uses the existential mode of computation: if any choice leads to an accepting state, then the whole computation accepts. The definition of co-NP uses the universal mode of computation: only if all choices lead to an accepting state, then the whole computation accepts. An alternating Turing machine (or to be more precise, the definition of acceptance for such a machine) alternates between these modes.  An alternating Turing machine is a non-deterministic Turing machine whose states are divided into two sets: existential states and universal states . An existential state is accepting if some transition leads to an accepting state; a universal state is accepting if every transition leads to an accepting state. (Thus a universal state with no transitions accepts unconditionally; an existential state with no transitions rejects unconditionally). The machine as a whole accepts if the initial state is accepting.  Formal definition  Formally, a (one-tape) alternating Turing machine is a 5- tuple     M  =   (  Q  ,  Γ  ,  δ  ,   q  0   ,  g  )       M   Q  normal-Γ  δ   subscript  q  0   g     M=(Q,\Gamma,\delta,q_{0},g)   where      Q   Q   Q   is the finite set of states     Γ   normal-Γ   \Gamma   is the finite tape alphabet      δ  :    Q  ×  Γ   →   𝒫   (   Q  ×  Γ  ×   {  L  ,  R  }    )        normal-:  δ   normal-→    Q  normal-Γ     𝒫    Q  normal-Γ   L  R        \delta:Q\times\Gamma\rightarrow\mathcal{P}(Q\times\Gamma\times\{L,R\})   is called the transition function ( L shifts the head left and R shifts the head right)       q  0   ∈  Q       subscript  q  0   Q    q_{0}\in Q   is the initial state      g  :   Q  →   {  ∧  ,  ∨  ,   a  c  c  e  p  t   ,   r  e  j  e  c  t   }       normal-:  g   normal-→  Q       a  c  c  e  p  t     r  e  j  e  c  t       g:Q\rightarrow\{\wedge,\vee,accept,reject\}   specifies the type of each state   If M is in a state    q  ∈  Q      q  Q    q\in Q   with     g   (  q  )    =   a  c  c  e  p  t         g  q     a  c  c  e  p  t     g(q)=accept   then that configuration is said to be accepting , and if     g   (  q  )    =   r  e  j  e  c  t         g  q     r  e  j  e  c  t     g(q)=reject   the configuration is said to be rejecting . A configuration with     g   (  q  )    =  ∧        g  q      g(q)=\wedge   is said to be accepting if all configurations reachable in one step are accepting, and rejecting if some configuration reachable in one step is rejecting. A configuration with     g   (  q  )    =  ∨        g  q      g(q)=\vee   is said to be accepting when there exists some configuration reachable in one step which is accepting and rejecting when all configurations reachable in one step are rejecting (this is the type of all states in an NTM). M is said to accept an input string w if the initial configuration of M (the state of M is    q  0     subscript  q  0    q_{0}   , the head is at the left end of the tape, and the tape contains w ) is accepting, and to reject if the initial configuration is rejecting.  Resource bounds  When deciding if a configuration of an ATM is accepting or rejecting using the above definition, it is not necessary to examine all configurations reachable from the current configuration. In particular, an existential configuration can be labelled as accepting if any successor configuration is found to be accepting, and a universal configuration can be labelled as rejecting if any successor configuration is found to be rejecting.  An ATM decides a formal language in time    t   (  n  )       t  n    t(n)   if, on any input of length   n   n   n   , examining configurations only up to    t   (  n  )       t  n    t(n)   steps is sufficient to label the initial configuration as accepting or rejecting. An ATM decides a language in space    s   (  n  )       s  n    s(n)   if examining configurations which do not modify tape cells beyond the    s   (  n  )       s  n    s(n)   cell from the left is sufficient.  A language which is decided by some ATM in time     c  ⋅  t    (  n  )        normal-⋅  c  t   n    c\cdot t(n)   for some constant    c  >  0      c  0    c>0   is said to be in the class    ATIME   (   t   (  n  )    )       ATIME    t  n     {\rm ATIME}(t(n))   , and a language decided in space     c  ⋅  s    (  n  )        normal-⋅  c  s   n    c\cdot s(n)   is said to be in the class    ASPACE   (   s   (  n  )    )       ASPACE    s  n     {\rm ASPACE}(s(n))   .  Example  Perhaps the simplest problem for alternating machines to solve is the quantified Boolean formula problem , which is a generalization of the Boolean satisfiability problem in which each variable can be bound by either an existential or a universal quantifier. The alternating machine branches existentially to try all possible values of an existentially quantified variable and universally to try all possible values of a universally quantified variable, in the left-to-right order in which they are bound. After deciding a value for all quantified variables, the machine accepts if the resulting Boolean formula evaluates to true, and rejects if it evaluates to false. Thus at an existentially quantified variable the machine is accepting if a value can be substituted for the variable which renders the remaining problem satisfiable, and at a universally quantified variable the machine is accepting if any value can be substituted and the remaining problem is satisfiable.  Such a machine decides quantified Boolean formulas in time    n  2     superscript  n  2    n^{2}   and space   n   n   n   .  The Boolean satisfiability problem can be viewed as the special case where all variables are existentially quantified, allowing ordinary nondeterminism, which uses only existential branching, to solve it efficiently.  Complexity classes and comparison to deterministic Turing machines  The following complexity classes are useful to define for ATMs:       AP  =    ⋃   k  >  0     ATIME   (   n  k   )         AP    subscript     k  0      ATIME   superscript  n  k       {\rm AP}=\bigcup_{k>0}{\rm ATIME}(n^{k})   are the languages decidable in polynomial time      APSPACE  =    ⋃   k  >  0     ASPACE   (   n  k   )         APSPACE    subscript     k  0      ASPACE   superscript  n  k       {\rm APSPACE}=\bigcup_{k>0}{\rm ASPACE}(n^{k})   are the languages decidable in polynomial space      AEXPTIME  =    ⋃   k  >  0     ATIME   (   k  n   )         AEXPTIME    subscript     k  0      ATIME   superscript  k  n       {\rm AEXPTIME}=\bigcup_{k>0}{\rm ATIME}(k^{n})   are the languages decidable in exponential time   These are similar to the definitions of P , PSPACE , and EXPTIME , considering the resources used by an ATM rather than a deterministic Turing machine. Chandra, Kozen, and Stockmeyer 4 proved the theorems   AP = PSPACE  APSPACE = EXPTIME  AEXPTIME = EXPSPACE       ASPACE   (   f   (  n  )    )    =    ⋃   c  >  0     DTIME   (   2   c  f   (  n  )     )     =   DTIME   (   2   O   (   f   (  n  )    )     )            ASPACE    f  n      subscript     c  0      DTIME   superscript  2    c  f  n             DTIME   superscript  2    O    f  n         \mathrm{ASPACE}(f(n))=\bigcup_{c>0}{\rm DTIME}(2^{cf(n)})={\rm DTIME}(2^{O(f(n%
 ))})          ATIME   (   g   (  n  )    )    ⊆   DSPACE   (   g   (  n  )    )          ATIME    g  n      DSPACE    g  n      \mathrm{ATIME}(g(n))\subseteq{\rm DSPACE}(g(n))           NSPACE   (   g   (  n  )    )    ⊆    ⋃   c  >  0     ATIME   (    c  ×  g     (  n  )   2    )      ,        NSPACE    g  n      subscript     c  0      ATIME      c  g    superscript  n  2        \mathrm{NSPACE}(g(n))\subseteq\bigcup_{c>0}{\rm ATIME}(c\times g(n)^{2}),      when     f   (  n  )    ≥   log   (  n  )          f  n     n     f(n)\geq\log(n)   and     g   (  n  )    ≥   log   (  n  )          g  n     n     g(n)\geq\log(n)   .  A more general form of these relationships is expressed by the parallel computation thesis .  Bounded alternation  Definition  An alternating Turing machine with k alternations is an alternating Turing machine which switches from an existential to a universal state or vice versa no more than k −1 times. (It is an alternating Turing machine whose states are divided into k sets. The states in even-numbered sets are universal and the states in odd-numbered sets are existential (or vice versa). The machine has no transitions between a state in set i and a state in set j {\rm ATIME}(C,j)=\Sigma_j {\rm TIME}(C) is the class of function in time    f  ∈  C      f  C    f\in C   beginning by existential state and alternating at most    j  -  1      j  1    j-1   times. It is called the   j   j   j   th level of the    TIME   (  C  )       TIME  C    {\rm TIME}(C)   hierarchy.       coATIME   (  C  ,  j  )    =    Π  j   TIME   (  C  )          coATIME   C  j       subscript  normal-Π  j   TIME  C     {\rm coATIME}(C,j)=\Pi_{j}{\rm TIME}(C)   is the same classes, but beginning by a universal state, it is the complement of the language of    ATIME   (  f  ,  j  )       ATIME   f  j     {\rm ATIME}(f,j)   .       ASPACE   (  C  ,  j  )    =    Σ  SPACE    (  C  )          ASPACE   C  j       subscript  normal-Σ  SPACE   C     {\rm ASPACE}(C,j)=\Sigma_{\rm SPACE}(C)   is defined similarly for space bounded computation.  Example  Consider the circuit minimization problem : given a circuit A computing a Boolean function  f and a number n , determine if there is a circuit with at most n gates that computes the same function f . An alternating Turing machine, with one alternation, starting in an existential state, can solve this problem in polynomial time (by guessing a circuit B with at most n gates, then switching to a universal state, guessing an input, and checking that the output of B on that input matches the output of A on that input).  Collapsing classes  It is said that a hierarchy collapses to level   j   j   j   if every language in level    k  ≥  j      k  j    k\geq j   of the hierarchy is in its level   j   j   j   .  As a corollary of the Immerman–Szelepcsényi theorem , the logarithmic space hierarchy collapses to its first level. 5 As a corollary the    SPACE   (  f  )       SPACE  f    {\rm SPACE}(f)   hierarchy collapses to its first level when    f  =   Ω   (  log  )        f    normal-Ω      f=\Omega(\log)   is space constructible .  Special cases  An alternating Turing machine in polynomial time with k alternations, starting in an existential (respectively, universal) state can decide all the problems in the class    Σ  k  p     superscript   subscript  normal-Σ  k   p    \Sigma_{k}^{p}   (respectively,    Π  k  p     superscript   subscript  normal-Π  k   p    \Pi_{k}^{p}   ). 6 These classes are sometimes denoted     Σ  k   P       subscript  normal-Σ  k   normal-P    \Sigma_{k}\rm{P}   and     Π  k   P       subscript  normal-Π  k   normal-P    \Pi_{k}\rm{P}   , respectively. See the polynomial hierarchy article for details.  Another special case of time hierarchies is the logarithmic hierarchy .  References    Section 10.3: Alternation, pp. 348–354.   Section 10.3: Alternation, pp. 380–386.   Section 16.2: Alternation, pp. 399–401.   "  Category:Models of computation     ↩  ↩  ↩   ↩  ↩     