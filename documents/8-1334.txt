   Euler–Maruyama method      Euler–Maruyama method  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In mathematics , more precisely in Ito calculus , the Euler–Maruyama method , also called simply the Euler method , is a method for the approximate numerical solution of a stochastic differential equation (SDE). It is a simple generalization of the Euler method for ordinary differential equations to stochastic differential equations. It is named after Leonhard Euler and Gisiro Maruyama . Unfortunately the same generalization cannot be done for the other methods from deterministic theory, 1 e.g. Runge–Kutta schemes.  Consider the stochastic differential equation (see Itō calculus )        d   X  t    =    a   (   X  t   )   d  t   +   b   (   X  t   )   d   W  t      ,        normal-d   subscript  X  t        a   subscript  X  t   normal-d  t     b   subscript  X  t   normal-d   subscript  W  t       \mathrm{d}X_{t}=a(X_{t})\,\mathrm{d}t+b(X_{t})\,\mathrm{d}W_{t},     with initial condition  X 0 = x 0 , where W t stands for the Wiener process , and suppose that we wish to solve this SDE on some interval of time [0, T ]. Then the Euler–Maruyama approximation to the true solution X is the Markov chain  Y defined as follows:   partition the interval [0, T ] into N equal subintervals of width     Δ  t   >  0        normal-Δ  t   0    \Delta t>0   :          0  =   τ  0   <   τ  1   <  ⋯  <   τ  N   =   T  and  Δ  t   =   T  /  N    ;        0   subscript  τ  0         subscript  τ  1        normal-⋯        subscript  τ  N          T  and  normal-Δ  t          T  N      0=\tau_{0}<\tau_{1}<\cdots<\tau_{N}=T\text{ and }\Delta t=T/N;         set Y 0 = x 0 ;    recursively define Y n for 1 ≤ n ≤ N by            Y    n  +  1    =    Y  n   +   a   (   Y  n   )   Δ  t   +   b   (   Y  n   )   Δ   W  n      ,       subscript  Y    n  1       subscript  Y  n     a   subscript  Y  n   normal-Δ  t     b   subscript  Y  n   normal-Δ   subscript  W  n       \,Y_{n+1}=Y_{n}+a(Y_{n})\,\Delta t+b(Y_{n})\,\Delta W_{n},         where           Δ   W  n    =    W   τ   n  +  1     -   W   τ  n      .        normal-Δ   subscript  W  n       subscript  W   subscript  τ    n  1      subscript  W   subscript  τ  n       \Delta W_{n}=W_{\tau_{n+1}}-W_{\tau_{n}}.        The random variables Δ W n are independent and identically distributed  normal random variables with expected value zero and variance     Δ  t      normal-Δ  t    \Delta t   .  Example  Numerical simulation  (Figure)  Gene expression modelled as stochastic process   An area that has benefited significantly from SDE is biology or more precisely mathematical biology . Here the number of publications on the use of stochastic model grew, as most of the models are nonlinear, demanding numerical schemes.  The graphic depicts a stochastic differential equation being solved using the Euler Scheme. The deterministic counterpart is shown as well.  Computer implementation  The following Python code implements Euler–Maruyama to solve the Ornstein–Uhlenbeck process         d   Y  t    =     θ  ⋅   (   μ  -   Y  t    )    d  t   +    σ   d   W  t      ,    Y  0   =   I  C     .     formulae-sequence      d   subscript  Y  t         normal-⋅  θ    μ   subscript  Y  t     d  t     σ  d   subscript  W  t         subscript  Y  0     I  C      dY_{t}=\theta\cdot(\mu-Y_{t})\,dt+\sigma\,dW_{t},\;\;Y_{0}=IC.     import numpy as np import matplotlib.pyplot as plt
 
 tBegin =  0 tEnd =  2 dt = . 00001 t = np.arange(tBegin, tEnd, dt)
 N = t.size 
 IC =  0 theta =  1 mu =  1.2 sigma =  0.3 sqrtdt = np.sqrt(dt)
 y = np.zeros(N)
 y[ 0 ] = IC for i in  xrange ( 1 , N):
     y[i] = y[i -1 ] + dt * (theta * (mu - y[i -1 ])) + sigma * sqrtdt * np.random.normal(loc = 0.0 , scale = 1.0 )
 
 ax = plt.subplot( 111 )
 ax.plot(t, y)
 plt.show()  See also   Milstein method  Runge–Kutta method (SDE)   Notes  References     "  Category:Numerical differential equations  Category:Stochastic differential equations     Kloeden & Platen, 1992 ↩    