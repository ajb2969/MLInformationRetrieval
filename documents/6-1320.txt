   L-notation      L-notation   ''L ''- notation is an asymptotic notation analogous to big-O notation , denoted as     L  n    [  α  ,  c  ]        subscript  L  n    α  c     L_{n}[\alpha,c]   for a bound variable    n   n   n    tending to infinity . Like big-O notation, it is usually used to roughly convey the computational complexity of a particular algorithm .  It is defined as         L  n    [  α  ,  c  ]    =   e    (   c  +   o   (  1  )     )     (   ln  n   )   α     (   ln   ln  n    )    1  -  α       ,         subscript  L  n    α  c     superscript  e      c    o  1     superscript    n   α    superscript      n      1  α        L_{n}[\alpha,c]=e^{(c+o(1))(\ln n)^{\alpha}(\ln\ln n)^{1-\alpha}},     where c is a positive constant, and   α   α   \alpha   is a constant    0  ≤  α  ≤  1        0  α       1     0\leq\alpha\leq 1   .  L-notation is used mostly in computational number theory , to express the complexity of algorithms for difficult number theory problems, e.g. sieves for integer factorization and methods for solving discrete logarithms . The benefit of this notation is that it simplifies the analysis of these algorithms. The    e   c    (   ln  n   )   α     (   ln   ln  n    )    1  -  α        superscript  e    c   superscript    n   α    superscript      n      1  α       e^{c(\ln n)^{\alpha}(\ln\ln n)^{1-\alpha}}   expresses the dominant term, and the    e   o   (  1  )     (   ln  n   )   α     (   ln   ln  n    )    1  -  α        superscript  e    o  1   superscript    n   α    superscript      n      1  α       e^{o(1)(\ln n)^{\alpha}(\ln\ln n)^{1-\alpha}}   takes care of everything smaller.  When   α   α   \alpha   is 0, then        L  n    [  α  ,  c  ]    =    L  n    [  0  ,  c  ]    =   e    (   c  +   o   (  1  )     )    ln   ln  n      =     (   ln  n   )    c  +   o   (  1  )                subscript  L  n    α  c       subscript  L  n    0  c          superscript  e      c    o  1        n            superscript    n     c    o  1        L_{n}[\alpha,c]=L_{n}[0,c]=e^{(c+o(1))\ln\ln n}=(\ln n)^{c+o(1)}\,     is a polynomial function of ln n ; when   α   α   \alpha   is 1 then        L  n    [  α  ,  c  ]    =    L  n    [  1  ,  c  ]    =   e    (   c  +   o   (  1  )     )    ln  n     =    n   c  +   o   (  1  )                subscript  L  n    α  c       subscript  L  n    1  c          superscript  e      c    o  1      n           superscript  n    c    o  1        L_{n}[\alpha,c]=L_{n}[1,c]=e^{(c+o(1))\ln n}=n^{c+o(1)}\,     is a fully exponential function of ln n (and thereby polynomial in n ).  If   α   α   \alpha   is between 0 and 1, the function is subexponential of ln n (and superpolynomial ).  Examples  Many general-purpose integer factorization algorithms have subexponential time complexities . The best is the general number field sieve , which has an expected running time of        L  n    [   1  /  3   ,  c  ]    =   e    (   c  +   o   (  1  )     )     (   ln  n   )    1  /  3      (   ln   ln  n    )    2  /  3             subscript  L  n      1  3   c     superscript  e      c    o  1     superscript    n     1  3     superscript      n      2  3        L_{n}[1/3,c]=e^{(c+o(1))(\ln n)^{1/3}(\ln\ln n)^{2/3}}     for    c  =    (   64  /  9   )    1  /  3    ≈  1.923        c   superscript    64  9     1  3         1.923     c=(64/9)^{1/3}\approx 1.923   . The best such algorithm prior to the number field sieve was the quadratic sieve which has running time         L  n    [   1  /  2   ,  1  ]    =   e    (   1  +   o   (  1  )     )     (   ln  n   )    1  /  2      (   ln   ln  n    )    1  /  2       .         subscript  L  n      1  2   1     superscript  e      1    o  1     superscript    n     1  2     superscript      n      1  2        L_{n}[1/2,1]=e^{(1+o(1))(\ln n)^{1/2}(\ln\ln n)^{1/2}}.\,     For the elliptic curve  discrete logarithm problem, the fastest general purpose algorithm is the baby-step giant-step algorithm, which has a running time on the order of the square-root of the group order n . In L -notation this would be         L  n    [  1  ,   1  /  2   ]    =   n    1  /  2   +   o   (  1  )       .         subscript  L  n    1    1  2      superscript  n      1  2     o  1       L_{n}[1,1/2]=n^{1/2+o(1)}.\,     The existence of the AKS primality test , which runs in polynomial time , means that the time complexity for primality testing is known to be at most        L  n    [  0  ,  c  ]    =     (   ln  n   )    c  +   o   (  1  )              subscript  L  n    0  c     superscript    n     c    o  1       L_{n}[0,c]=(\ln n)^{c+o(1)}\,     where c has been proven to be at most 6. 1  History  L-notation has been defined in various forms throughout the literature. The first use of it came from Carl Pomerance in his paper "Analysis and comparison of some integer factoring algorithms". 2 This form had only the   c   c   c   parameter: the   α   α   \alpha   in the formula was    1  /  2      1  2    1/2   for the algorithms he was analyzing. Pomerance had been using the letter   L   L   L   (or lower case   l   l   l   ) in this and previous papers for formulae that involved many logarithms.  The formula above involving two parameters was introduced by Arjen Lenstra and Hendrik Lenstra in their article on "Algorithms in Number Theory". 3 It was introduced in their analysis of a discrete logarithm algorithm of Coppersmith . This is the most commonly used form in the literature today.  The Handbook of Applied Cryptography defines the L-notation with a big   O   O   O   around the formula presented in this article. 4 This is not the standard definition. The big   O   O   O   would suggest that the running time is an upper bound. However, for the integer factoring and discrete logarithm algorithms that L-notation is commonly used for, the running time is not an upper bound, so this definition is not preferred.  References  "  Category:Asymptotic analysis  Category:Computational complexity theory     Hendirk W. Lenstra Jr. and Carl Pomerance, "Primality testing with Gaussian periods", preprint, 2011, http://www.math.dartmouth.edu/~carlp/aks041411.pdf . ↩  Carl Pomerance, "Analysis and comparison of some integer factoring algorithms", In Mathematisch Centrum Computational Methods in Number Theory, Part 1, pp. 89-139, 1982, http://www.math.dartmouth.edu/~carlp/PDF/analysiscomparison.pdf ↩  Arjen K. Lenstra and Hendrik W. Lenstra, Jr, "Algorithms in Number Theory", in Handbook of Theoretical Computer Science (vol. A): Algorithms and Complexity, 1991. ↩  Alfred J. Menezes, Paul C. van Oorschot and Scott A. Vanstone. Handbook of Applied Cryptography. CRC Press, 1996. ISBN 0-8493-8523-7. http://www.cacr.math.uwaterloo.ca/hac/ . ↩     