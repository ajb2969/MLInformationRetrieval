


Locality-sensitive hashing




Locality-sensitive hashing

Locality-sensitive hashing (LSH) reduces the dimensionality of high-dimensional data. LSH hashes input items so that similar items map to the same “buckets” with high probability (the number of buckets being much smaller than the universe of possible input items). LSH differs from conventional and cryptographic hash functions because it aims to maximize the probability of a “collision” for similar items.1 Locality-sensitive hashing has much in common with data clustering and nearest neighbor search.
Definition
An LSH family234

 
  is defined for a metric space

 
 , a threshold 
 
 
 
  and an approximation factor 
 
 
 
 . This family 
 
 
 
  is a family of functions 
 
 
 
  which map elements from the metric space to a bucket 
 
 
 
 . The LSH family satisfies the following conditions for any two points 
 
 
 
 , using a function 
 
 
 
  which is chosen uniformly at random:

if 
 
 
 
 , then 
 
 
 
  (i.e.,
 
 
 
  and 
 
 
 
  collide) with probability at least 
 
 
 
 ,
if 
 
 
 
 , then 
 
 
 
  with probability at most 
 
 
 
 .

A family is interesting when 
 
 
 
 . Such a family 
 
 
 
  is called 

 
 -sensitive.
Alternatively5 it is defined with respect to a universe of items 
 
 
 
  that have a similarity function 
 
 
 
 . An LSH scheme is a family of hash functions

 
  coupled with a probability distribution 
 
 
 
  over the functions such that a function 
 
 
 
  chosen according to 
 
 
 
  satisfies the property that 
 
 
 
  for any 
 
 
 
 .
Amplification
Given a 
 
 
 
 -sensitive family 
 
 
 
 , we can construct new families 
 
 
 
  by either the AND-construction or OR-construction of 
 
 
 
 .6
To create an AND-construction, we define a new family 
 
 
 
  of hash functions 
 
 
 
 , where each function 
 
 
 
  is constructed from 
 
 
 
  random functions 
 
 
 
  from 
 
 
 
 . We then say that for a hash function 
 
 
 
 , 
 
 
 
  if and only if all 
 
 
 
  for 
 
 
 
 . Since the members of 
 
 
 
  are independently chosen for any 
 
 
 
 , 
 
 
 
  is a 
 
 
 
 -sensitive family.
To create an OR-construction, we define a new family 
 
 
 
  of hash functions 
 
 
 
 , where each function 
 
 
 
  is constructed from 
 
 
 
  random functions 
 
 
 
  from 
 
 
 
 . We then say that for a hash function 
 
 
 
 , 
 
 
 
  if and only if 
 
 
 
  for one or more values of 
 
 
 
 . Since the members of 
 
 
 
  are independently chosen for any 
 
 
 
 , 
 
 
 
  is a 
 
 
 
 -sensitive family.
Applications
LSH has been applied to several problem domains including

Near-duplicate detection

.7

Hierarchical clustering

.

Genome-wide association study



Image similarity identification

VisualRank

Gene expression similarity identification
Audio similarity identification
Nearest neighbor search
Audio fingerprint



Digital video fingerprinting

Methods
Bit sampling for Hamming distance
One of the easiest ways to construct an LSH family is by bit sampling.8 This approach works for the Hamming distance over d-dimensional vectors 
 
 
 
 . Here, the family 
 
 
 
  of hash functions is simply the family of all the projections of points on one of the 
 
 
 
  coordinates, i.e., 
 
 
 
 , where 
 
 
 
  is the 
 
 
 
 th coordinate of 
 
 
 
 . A random function 
 
 
 
  from 
 
 
 
  simply selects a random bit from the input point. This family has the following parameters
 
 
 
 , 
 
 
 
 .
Min-wise independent permutations
Suppose 
 
 
 
  is composed of subsets of some ground set of enumerable items 
 
 
 
  and the similarity function of interest is the Jaccard index

 
 . If 
 
 
 
  is a permutation on the indices of 
 
 
 
 , for 
 
 
 
  let 
 
 
 
 . Each possible choice of 
 
 
 
  defines a single hash function 
 
 
 
  mapping input sets to elements of 
 
 
 
 .
Define the function family 
 
 
 
  to be the set of all such functions and let 
 
 
 
  be the uniform distribution. Given two sets 
 
 
 
  the event that 
 
 
 
  corresponds exactly to the event that the minimizer of 
 
 
 
  over 
 
 
 
  lies inside 
 
 
 
 . As 
 
 
 
  was chosen uniformly at random, 
 
 
 
  and 
 
 
 
  define an LSH scheme for the Jaccard index.
Because the symmetric group on n elements has size n!, choosing a truly random permutation from the full symmetric group is infeasible for even moderately sized n. Because of this fact, there has been significant work on finding a family of permutations that is "min-wise independent" - a permutation family for which each element of the domain has equal probability of being the minimum under a randomly chosen 
 
 
 
 . It has been established that a min-wise independent family of permutations is at least of size 
 
 
 
 .9 and that this bound is tight.10
Because min-wise independent families are too big for practical applications, two variant notions of min-wise independence are introduced: restricted min-wise independent permutations families, and approximate min-wise independent families. Restricted min-wise independence is the min-wise independence property restricted to certain sets of cardinality at most k.11 Approximate min-wise independence differs from the property by at most a fixed 
 
 
 
 .12
Open source methods
Nilsimsa Hash
Nilsimsa is an anti-spam focused locality-sensitive hashing algorithm.13 The goal of Nilsimsa is to generate a hash digest of an email message such that the digests of two similar messages are similar to each other. The paper suggests that the Nilsimsa satisfies three requirements:

The digest identifying each message should not vary significantly for changes that can be produced automatically.
The encoding must be robust against intentional attacks.
The encoding should support an extremely low risk of false positives.

TLSH
TLSH is locality-sensitive hashing algorithm designed for a range of security and digital forensic applications.14 The goal of TLSH is to generate a hash digest of document such that if two digests have a low distance between them, then it is likely that the messages are similar to each other.
Testing performed in the paper demonstrates that on a range of file types identified the Nilsimsa hash as having a significantly higher false positive rate when compared to other similarity digest schemes such as TLSH, Ssdeep and Sdhash.
An implementations of TLSH is available as open-source software.15
Random projection
(Figure)
For small angles (not too close to orthogonal), 
 
 
 
  is a pretty good approximation to 
 
 
 
 .

The random projection method of LSH16 (termed arccos by Andoni and Indyk 17) is designed to approximate the cosine distance between vectors. The basic idea of this technique is to choose a random hyperplane (defined by a normal unit vector 
 
 
 
 ) at the outset and use the hyperplane to hash input vectors.
Given an input vector 
 
 
 
  and a hyperplane defined by 
 
 
 
 , we let 
 
 
 
 . That is, 
 
 
 
  depending on which side of the hyperplane 
 
 
 
  lies.
Each possible choice of 
 
 
 
  defines a single function. Let 
 
 
 
  be the set of all such functions and let 
 
 
 
  be the uniform distribution once again. It is not difficult to prove that, for two vectors 
 
 
 
 , 
 
 
 
 , where 
 
 
 
  is the angle between 
 
 
 
  and 
 
 
 
 . 
 
 
 
  is closely related to 
 
 
 
 .
In this instance hashing produces only a single bit. Two vectors' bits match with probability proportional to the cosine of the angle between them.
Stable distributions
The hash function 18

 
  maps a d dimensional vector 
 
 
 
  onto a set of integers. Each hash function in the family is indexed by a choice of random 
 
 
 
  and 
 
 
 
  where 
 
 
 
  is a d dimensional vector with entries chosen independently from a stable distribution and 
 
 
 
  is a real number chosen uniformly from the range [0,r]. For a fixed 
 
 
 
  the hash function 
 
 
 
  is given by 
 
 
 
 .
Other construction methods for hash functions have been proposed to better fit the data. 19 In particular k-means hash functions are better in practice than projection-based hash functions, but without any theoretical guarantee.
LSH algorithm for nearest neighbor search
One of the main applications of LSH is to provide a method for efficient approximate nearest neighbor search algorithms. Consider an LSH family 
 
 
 
 . The algorithm has two main parameters: the width parameter 
 
 
 
  and the number of hash tables 
 
 
 
 .
In the first step, we define a new family 
 
 
 
  of hash functions 
 
 
 
 , where each function 
 
 
 
  is obtained by concatenating 
 
 
 
  functions 
 
 
 
  from 
 
 
 
 , i.e., 
 
 
 
 . In other words, a random hash function 
 
 
 
  is obtained by concatenating 
 
 
 
  randomly chosen hash functions from 
 
 
 
 . The algorithm then constructs 
 
 
 
  hash tables, each corresponding to a different randomly chosen hash function 
 
 
 
 .
In the preprocessing step we hash all 
 
 
 
  points from the data set 
 
 
 
  into each of the 
 
 
 
  hash tables. Given that the resulting hash tables have only 
 
 
 
  non-zero entries, one can reduce the amount of memory used per each hash table to 
 
 
 
  using standard hash functions.
Given a query point 
 
 
 
 , the algorithm iterates over the 
 
 
 
  hash functions 
 
 
 
 . For each 
 
 
 
  considered, it retrieves the data points that are hashed into the same bucket as 
 
 
 
 . The process is stopped as soon as a point within distance 
 
 
 
  from 
 
 
 
  is found.
Given the parameters 
 
 
 
  and 
 
 
 
 , the algorithm has the following performance guarantees:

preprocessing time
 
 
 
 , where 
 
 
 
  is the time to evaluate a function 
 
 
 
  on an input point 
 
 
 
 ;
space
 
 
 
 , plus the space for storing data points;
query time
 
 
 
 ;
the algorithm succeeds in finding a point within distance 
 
 
 
  from 
 
 
 
  (if there exists a point within distance 
 
 
 
 ) with probability at least 
 
 
 
 ;

For a fixed approximation ratio 
 
 
 
  and probabilities 
 
 
 
  and 
 
 
 
 , one can set 
 
 
 
  and 
 
 
 
 , where 
 
 
 
 . Then one obtains the following performance guarantees:

preprocessing time
 
 
 
 ;
space
 
 
 
 , plus the space for storing data points;
query time
 
 
 
 ;

See also

Bloom Filter
Curse of dimensionality
Feature hashing
Fourier-related transforms
Multilinear subspace learning
Principal component analysis
Random indexing20
Rolling hash
Singular value decomposition
Sparse distributed memory
Wavelet compression

References
Further reading

Samet, H. (2006) Foundations of Multidimensional and Metric Data Structures. Morgan Kaufmann. ISBN 0-12-369446-9

External links

Alex Andoni's LSH homepage
LSHKIT: A C++ Locality Sensitive Hashing Library
A Python Locality Sensitive Hashing library that optionally supports persistence via redis
Caltech Large Scale Image Search Toolbox: a Matlab toolbox implementing several LSH hash functions, in addition to Kd-Trees, Hierarchical K-Means, and Inverted File search algorithms.
Slash: A C++ LSH library, implementing Spherical LSH by Terasawa, K., Tanaka, Y
LSHBOX: An Open Source C++ Toolbox of Locality-Sensitive Hashing for Large Scale Image Retrieval, Also Support Python and MATLAB.
SRS: A C++ Implementation of An In-memory, Space-efficient Approximate Nearest Neighbor Query Processing Algorithm based on p-stable Random Projection

"
Category:Search algorithms Category:Classification algorithms Category:Dimension reduction Category:Hashing Category:Probabilistic data structures



↩

↩
↩
↩

.↩

↩
↩
↩
↩
↩
↩
↩

↩
↩
↩
Gorman, James, and James R. Curran. "Scaling distributional similarity to large corpora." Proceedings of the 21st International Conference on Computational Linguistics and the 44th annual meeting of the Association for Computational Linguistics. Association for Computational Linguistics, 2006.↩




