   Locality-sensitive hashing      Locality-sensitive hashing   Locality-sensitive hashing ( LSH ) reduces the dimensionality of high-dimensional data. LSH hashes input items so that similar items map to the same ‚Äúbuckets‚Äù with high probability (the number of buckets being much smaller than the universe of possible input items). LSH differs from conventional and cryptographic hash functions because it aims to maximize the probability of a ‚Äúcollision‚Äù for similar items. 1 Locality-sensitive hashing has much in common with data clustering and nearest neighbor search .  Definition  An LSH family 2 3 4    ‚Ñ±   ‚Ñ±   \mathcal{F}   is defined for a metric space     ‚Ñ≥  =   (  M  ,  d  )       ‚Ñ≥   M  d     \mathcal{M}=(M,d)   , a threshold    R  >  0      R  0    R>0   and an approximation factor    c  >  1      c  1    c>1   . This family   ‚Ñ±   ‚Ñ±   \mathcal{F}   is a family of functions    h  :   ‚Ñ≥  ‚Üí  S      normal-:  h   normal-‚Üí  ‚Ñ≥  S     h:{\mathcal{M}}\to S   which map elements from the metric space to a bucket    s  ‚àà  S      s  S    s\in S   . The LSH family satisfies the following conditions for any two points     p  ,  q   ‚àà  ‚Ñ≥       p  q   ‚Ñ≥    p,q\in{\mathcal{M}}   , using a function    h  ‚àà  ‚Ñ±      h  ‚Ñ±    h\in\mathcal{F}   which is chosen uniformly at random:   if     d   (  p  ,  q  )    ‚â§  R        d   p  q    R    d(p,q)\leq R   , then     h   (  p  )    =   h   (  q  )          h  p     h  q     h(p)=h(q)   (i.e.,   p   p   p   and   q   q   q   collide) with probability at least    P  1     subscript  P  1    P_{1}   ,  if     d   (  p  ,  q  )    ‚â•   c  R         d   p  q      c  R     d(p,q)\geq cR   , then     h   (  p  )    =   h   (  q  )          h  p     h  q     h(p)=h(q)   with probability at most    P  2     subscript  P  2    P_{2}   .   A family is interesting when     P  1   >   P  2        subscript  P  1    subscript  P  2     P_{1}>P_{2}   . Such a family   ‚Ñ±   ‚Ñ±   \mathcal{F}   is called     (  R  ,   c  R   ,   P  1   ,   P  2   )     R    c  R    subscript  P  1    subscript  P  2     (R,cR,P_{1},P_{2})   -sensitive .  Alternatively 5 it is defined with respect to a universe of items   U   U   U   that have a similarity function    œï  :    U  √ó  U   ‚Üí   [  0  ,  1  ]       normal-:  œï   normal-‚Üí    U  U    0  1      \phi:U\times U\to[0,1]   . An LSH scheme is a family of hash functions    H   H   H   coupled with a probability distribution   D   D   D   over the functions such that a function    h  ‚àà  H      h  H    h\in H   chosen according to   D   D   D   satisfies the property that    P   r   h  ‚àà  H     [  h   (  a  )   =  h   (  b  )   ]   =  œï   (  a  ,  b  )      fragments  P   subscript  r    h  H     fragments  normal-[  h   fragments  normal-(  a  normal-)    h   fragments  normal-(  b  normal-)   normal-]    œï   fragments  normal-(  a  normal-,  b  normal-)     Pr_{h\in H}[h(a)=h(b)]=\phi(a,b)   for any     a  ,  b   ‚àà  U       a  b   U    a,b\in U   .  Amplification  Given a    (   d  1   ,   d  2   ,   p  1   ,   p  2   )      subscript  d  1    subscript  d  2    subscript  p  1    subscript  p  2     (d_{1},d_{2},p_{1},p_{2})   -sensitive family   ‚Ñ±   ‚Ñ±   \mathcal{F}   , we can construct new families   ùí¢   ùí¢   \mathcal{G}   by either the AND-construction or OR-construction of   ‚Ñ±   ‚Ñ±   \mathcal{F}   . 6  To create an AND-construction, we define a new family   ùí¢   ùí¢   \mathcal{G}   of hash functions   g   g   g   , where each function   g   g   g   is constructed from   k   k   k   random functions     h  1   ,  ‚Ä¶  ,   h  k       subscript  h  1   normal-‚Ä¶   subscript  h  k     h_{1},...,h_{k}   from   ‚Ñ±   ‚Ñ±   \mathcal{F}   . We then say that for a hash function    g  ‚àà  ùí¢      g  ùí¢    g\in\mathcal{G}   ,     g   (  x  )    =   g   (  y  )          g  x     g  y     g(x)=g(y)   if and only if all      h  i    (  x  )    =    h  i    (  y  )           subscript  h  i   x      subscript  h  i   y     h_{i}(x)=h_{i}(y)   for    i  =   1  ,  2  ,  ‚Ä¶  ,  k       i   1  2  normal-‚Ä¶  k     i=1,2,...,k   . Since the members of   ‚Ñ±   ‚Ñ±   \mathcal{F}   are independently chosen for any    g  ‚àà  ùí¢      g  ùí¢    g\in\mathcal{G}   ,   ùí¢   ùí¢   \mathcal{G}   is a    (   d  1   ,   d  2   ,   p  1  k   ,   p  2  k   )      subscript  d  1    subscript  d  2    superscript   subscript  p  1   k    superscript   subscript  p  2   k     (d_{1},d_{2},p_{1}^{k},p_{2}^{k})   -sensitive family.  To create an OR-construction, we define a new family   ùí¢   ùí¢   \mathcal{G}   of hash functions   g   g   g   , where each function   g   g   g   is constructed from   k   k   k   random functions     h  1   ,  ‚Ä¶  ,   h  k       subscript  h  1   normal-‚Ä¶   subscript  h  k     h_{1},...,h_{k}   from   ‚Ñ±   ‚Ñ±   \mathcal{F}   . We then say that for a hash function    g  ‚àà  ùí¢      g  ùí¢    g\in\mathcal{G}   ,     g   (  x  )    =   g   (  y  )          g  x     g  y     g(x)=g(y)   if and only if      h  i    (  x  )    =    h  i    (  y  )           subscript  h  i   x      subscript  h  i   y     h_{i}(x)=h_{i}(y)   for one or more values of   i   i   i   . Since the members of   ‚Ñ±   ‚Ñ±   \mathcal{F}   are independently chosen for any    g  ‚àà  ùí¢      g  ùí¢    g\in\mathcal{G}   ,   ùí¢   ùí¢   \mathcal{G}   is a    (   d  1   ,   d  2   ,   1  -    (   1  -   p  1    )   k    ,   1  -    (   1  -   p  2    )   k    )      subscript  d  1    subscript  d  2     1   superscript    1   subscript  p  1    k      1   superscript    1   subscript  p  2    k      (d_{1},d_{2},1-(1-p_{1})^{k},1-(1-p_{2})^{k})   -sensitive family.  Applications  LSH has been applied to several problem domains including   Near-duplicate detection   . 7   Hierarchical clustering   .   Genome-wide association study     Image similarity identification   VisualRank   Gene expression similarity identification  Audio similarity identification  Nearest neighbor search  Audio fingerprint     Digital video fingerprinting   Methods  Bit sampling for Hamming distance  One of the easiest ways to construct an LSH family is by bit sampling. 8 This approach works for the Hamming distance over d-dimensional vectors     {  0  ,  1  }   d     superscript   0  1   d    \{0,1\}^{d}   . Here, the family   ‚Ñ±   ‚Ñ±   \mathcal{F}   of hash functions is simply the family of all the projections of points on one of the   d   d   d   coordinates, i.e.,    ‚Ñ±  =   {  h  :    {  0  ,  1  }   d   ‚Üí   {  0  ,  1  }   ‚à£  h   (  x  )   =   x  i   for some  i  ‚àà   {  1  ,  ‚Ä¶  ,  d  }   }      fragments  F    fragments  normal-{  h  normal-:   superscript   fragments  normal-{  0  normal-,  1  normal-}   d   normal-‚Üí   fragments  normal-{  0  normal-,  1  normal-}   normal-‚à£  h   fragments  normal-(  x  normal-)     subscript  x  i   for some  i    fragments  normal-{  1  normal-,  normal-‚Ä¶  normal-,  d  normal-}   normal-}     {\mathcal{F}}=\{h:\{0,1\}^{d}\to\{0,1\}\mid h(x)=x_{i}\text{ for some }i\in\{1%
 ,...,d\}\}   , where    x  i     subscript  x  i    x_{i}   is the   i   i   i   th coordinate of   x   x   x   . A random function   h   h   h   from   ‚Ñ±   ‚Ñ±   {\mathcal{F}}   simply selects a random bit from the input point. This family has the following parameters     P  1   =   1  -   R  /  d         subscript  P  1     1    R  d      P_{1}=1-R/d   ,     P  2   =   1  -    c  R   /  d         subscript  P  2     1      c  R   d      P_{2}=1-cR/d   .  Min-wise independent permutations  Suppose   U   U   U   is composed of subsets of some ground set of enumerable items   S   S   S   and the similarity function of interest is the Jaccard index    J   J   J   . If   œÄ   œÄ   \pi   is a permutation on the indices of   S   S   S   , for    A  ‚äÜ  S      A  S    A\subseteq S   let     h   (  A  )    =    min   a  ‚àà  A     {   œÄ   (  a  )    }          h  A     subscript     a  A      œÄ  a      h(A)=\min_{a\in A}\{\pi(a)\}   . Each possible choice of   œÄ   œÄ   \pi   defines a single hash function   h   h   h   mapping input sets to elements of   S   S   S   .  Define the function family   H   H   H   to be the set of all such functions and let   D   D   D   be the uniform distribution. Given two sets     A  ,  B   ‚äÜ  S       A  B   S    A,B\subseteq S   the event that     h   (  A  )    =   h   (  B  )          h  A     h  B     h(A)=h(B)   corresponds exactly to the event that the minimizer of   œÄ   œÄ   \pi   over    A   ‚ãÉ  B       A    B     A\bigcup B   lies inside    A   ‚ãÇ  B       A    B     A\bigcap B   . As   h   h   h   was chosen uniformly at random,    P  r   [  h   (  A  )   =  h   (  B  )   ]   =  J   (  A  ,  B  )      fragments  P  r   fragments  normal-[  h   fragments  normal-(  A  normal-)    h   fragments  normal-(  B  normal-)   normal-]    J   fragments  normal-(  A  normal-,  B  normal-)     Pr[h(A)=h(B)]=J(A,B)\,   and    (  H  ,  D  )     H  D    (H,D)\,   define an LSH scheme for the Jaccard index.  Because the symmetric group on n elements has size n!, choosing a truly random permutation from the full symmetric group is infeasible for even moderately sized n. Because of this fact, there has been significant work on finding a family of permutations that is "min-wise independent" - a permutation family for which each element of the domain has equal probability of being the minimum under a randomly chosen   œÄ   œÄ   \pi   . It has been established that a min-wise independent family of permutations is at least of size     l  c  m   (  1  ,  2  ,  ‚Ä¶  ,  n  )    ‚â•   e   n  -   o   (  n  )            l  c  m   1  2  normal-‚Ä¶  n     superscript  e    n    o  n       lcm(1,2,...,n)\geq e^{n-o(n)}   . 9 and that this bound is tight. 10  Because min-wise independent families are too big for practical applications, two variant notions of min-wise independence are introduced: restricted min-wise independent permutations families, and approximate min-wise independent families. Restricted min-wise independence is the min-wise independence property restricted to certain sets of cardinality at most k. 11 Approximate min-wise independence differs from the property by at most a fixed   œµ   œµ   \epsilon   . 12  Open source methods  Nilsimsa Hash  Nilsimsa is an anti-spam focused locality-sensitive hashing algorithm. 13 The goal of Nilsimsa is to generate a hash digest of an email message such that the digests of two similar messages are similar to each other. The paper suggests that the Nilsimsa satisfies three requirements:   The digest identifying each message should not vary significantly for changes that can be produced automatically.  The encoding must be robust against intentional attacks.  The encoding should support an extremely low risk of false positives.   TLSH  TLSH is locality-sensitive hashing algorithm designed for a range of security and digital forensic applications. 14 The goal of TLSH is to generate a hash digest of document such that if two digests have a low distance between them, then it is likely that the messages are similar to each other.  Testing performed in the paper demonstrates that on a range of file types identified the Nilsimsa hash as having a significantly higher false positive rate when compared to other similarity digest schemes such as TLSH, Ssdeep and Sdhash.  An implementations of TLSH is available as open-source software . 15  Random projection  (Figure)  For small angles (not too close to orthogonal),    1  -   Œ∏  œÄ       1    Œ∏  œÄ     1-\frac{\theta}{\pi}   is a pretty good approximation to    cos   (  Œ∏  )       Œ∏    \cos(\theta)   .   The random projection method of LSH 16 (termed arccos by Andoni and Indyk 17 ) is designed to approximate the cosine distance between vectors. The basic idea of this technique is to choose a random hyperplane (defined by a normal unit vector   r   r   r   ) at the outset and use the hyperplane to hash input vectors.  Given an input vector   v   v   v   and a hyperplane defined by   r   r   r   , we let     h   (  v  )    =   s  g  n   (   v  ‚ãÖ  r   )          h  v     s  g  n   normal-‚ãÖ  v  r      h(v)=sgn(v\cdot r)   . That is,     h   (  v  )    =   ¬±  1         h  v    plus-or-minus  1     h(v)=\pm 1   depending on which side of the hyperplane   v   v   v   lies.  Each possible choice of   r   r   r   defines a single function. Let   H   H   H   be the set of all such functions and let   D   D   D   be the uniform distribution once again. It is not difficult to prove that, for two vectors    u  ,  v     u  v    u,v   ,    P  r   [  h   (  u  )   =  h   (  v  )   ]   =  1  -    Œ∏   (  u  ,  v  )    œÄ      fragments  P  r   fragments  normal-[  h   fragments  normal-(  u  normal-)    h   fragments  normal-(  v  normal-)   normal-]    1       Œ∏   u  v    œÄ     Pr[h(u)=h(v)]=1-\frac{\theta(u,v)}{\pi}   , where    Œ∏   (  u  ,  v  )       Œ∏   u  v     \theta(u,v)   is the angle between   u   u   u   and   v   v   v   .    1  -    Œ∏   (  u  ,  v  )    œÄ       1      Œ∏   u  v    œÄ     1-\frac{\theta(u,v)}{\pi}   is closely related to    cos   (   Œ∏   (  u  ,  v  )    )         Œ∏   u  v      \cos(\theta(u,v))   .  In this instance hashing produces only a single bit. Two vectors' bits match with probability proportional to the cosine of the angle between them.  Stable distributions  The hash function 18       h   ùêö  ,  b     (  ùùä  )    :    ‚Ñõ  d   ‚Üí  ùí©      normal-:     subscript  h   ùêö  b    ùùä    normal-‚Üí   superscript  ‚Ñõ  d   ùí©     h_{\mathbf{a},b}(\boldsymbol{\upsilon}):\mathcal{R}^{d}\to\mathcal{N}   maps a d dimensional vector   ùùä   ùùä   \boldsymbol{\upsilon}   onto a set of integers. Each hash function in the family is indexed by a choice of random   ùêö   ùêö   \mathbf{a}   and   b   b   b   where   ùêö   ùêö   \mathbf{a}   is a d dimensional vector with entries chosen independently from a stable distribution and   b   b   b   is a real number chosen uniformly from the range [0,r]. For a fixed    ùêö  ,  b     ùêö  b    \mathbf{a},b   the hash function    h   ùêö  ,  b      subscript  h   ùêö  b     h_{\mathbf{a},b}   is given by      h   ùêö  ,  b     (  ùùä  )    =   ‚åä     ùêö  ‚ãÖ  ùùä   +  b   r   ‚åã          subscript  h   ùêö  b    ùùä          normal-‚ãÖ  ùêö  ùùä   b   r      h_{\mathbf{a},b}(\boldsymbol{\upsilon})=\left\lfloor\frac{\mathbf{a}\cdot%
 \boldsymbol{\upsilon}+b}{r}\right\rfloor   .  Other construction methods for hash functions have been proposed to better fit the data. 19 In particular k-means hash functions are better in practice than projection-based hash functions, but without any theoretical guarantee.  LSH algorithm for nearest neighbor search  One of the main applications of LSH is to provide a method for efficient approximate nearest neighbor search algorithms. Consider an LSH family   ‚Ñ±   ‚Ñ±   \mathcal{F}   . The algorithm has two main parameters: the width parameter   k   k   k   and the number of hash tables   L   L   L   .  In the first step, we define a new family   ùí¢   ùí¢   \mathcal{G}   of hash functions   g   g   g   , where each function   g   g   g   is obtained by concatenating   k   k   k   functions     h  1   ,  ‚Ä¶  ,   h  k       subscript  h  1   normal-‚Ä¶   subscript  h  k     h_{1},...,h_{k}   from   ‚Ñ±   ‚Ñ±   \mathcal{F}   , i.e.,     g   (  p  )    =   [    h  1    (  p  )    ,  ‚Ä¶  ,    h  k    (  p  )    ]         g  p       subscript  h  1   p   normal-‚Ä¶     subscript  h  k   p      g(p)=[h_{1}(p),...,h_{k}(p)]   . In other words, a random hash function   g   g   g   is obtained by concatenating   k   k   k   randomly chosen hash functions from   ‚Ñ±   ‚Ñ±   \mathcal{F}   . The algorithm then constructs   L   L   L   hash tables, each corresponding to a different randomly chosen hash function   g   g   g   .  In the preprocessing step we hash all   n   n   n   points from the data set   S   S   S   into each of the   L   L   L   hash tables. Given that the resulting hash tables have only   n   n   n   non-zero entries, one can reduce the amount of memory used per each hash table to    O   (  n  )       O  n    O(n)   using standard hash functions .  Given a query point   q   q   q   , the algorithm iterates over the   L   L   L   hash functions   g   g   g   . For each   g   g   g   considered, it retrieves the data points that are hashed into the same bucket as   q   q   q   . The process is stopped as soon as a point within distance    c  R      c  R    cR   from   q   q   q   is found.  Given the parameters   k   k   k   and   L   L   L   , the algorithm has the following performance guarantees:   preprocessing time    O   (   n  L  k  t   )       O    n  L  k  t     O(nLkt)   , where   t   t   t   is the time to evaluate a function    h  ‚àà  ‚Ñ±      h  ‚Ñ±    h\in\mathcal{F}   on an input point   p   p   p   ;  space    O   (   n  L   )       O    n  L     O(nL)   , plus the space for storing data points;  query time    O   (   L   (    k  t   +   d  n   P  2  k     )    )       O    L      k  t     d  n   superscript   subscript  P  2   k        O(L(kt+dnP_{2}^{k}))   ;  the algorithm succeeds in finding a point within distance    c  R      c  R    cR   from   q   q   q   (if there exists a point within distance   R   R   R   ) with probability at least    1  -    (   1  -   P  1  k    )   L       1   superscript    1   superscript   subscript  P  1   k    L     1-(1-P_{1}^{k})^{L}   ;   For a fixed approximation ratio    c  =   1  +  œµ       c    1  œµ     c=1+\epsilon   and probabilities    P  1     subscript  P  1    P_{1}   and    P  2     subscript  P  2    P_{2}   , one can set    k  =    log  n    log   1  /   P  2          k      n       1   subscript  P  2        k={\log n\over\log 1/P_{2}}   and    L  =   n  œÅ       L   superscript  n  œÅ     L=n^{\rho}   , where    œÅ  =    log   P  1     log   P  2         œÅ       subscript  P  1       subscript  P  2       \rho={\log P_{1}\over\log P_{2}}   . Then one obtains the following performance guarantees:   preprocessing time    O   (    n   1  +  œÅ    k  t   )       O     superscript  n    1  œÅ    k  t     O(n^{1+\rho}kt)   ;  space    O   (   n   1  +  œÅ    )       O   superscript  n    1  œÅ      O(n^{1+\rho})   , plus the space for storing data points;  query time    O   (    n  œÅ    (    k  t   +  d   )    )       O     superscript  n  œÅ       k  t   d      O(n^{\rho}(kt+d))   ;   See also   Bloom Filter  Curse of dimensionality  Feature hashing  Fourier-related transforms  Multilinear subspace learning  Principal component analysis  Random indexing 20  Rolling hash  Singular value decomposition  Sparse distributed memory  Wavelet compression   References  Further reading   Samet, H. (2006) Foundations of Multidimensional and Metric Data Structures . Morgan Kaufmann. ISBN 0-12-369446-9   External links   Alex Andoni's LSH homepage  LSHKIT: A C++ Locality Sensitive Hashing Library  A Python Locality Sensitive Hashing library that optionally supports persistence via redis  Caltech Large Scale Image Search Toolbox : a Matlab toolbox implementing several LSH hash functions, in addition to Kd-Trees, Hierarchical K-Means, and Inverted File search algorithms.  Slash: A C++ LSH library, implementing Spherical LSH by Terasawa, K., Tanaka, Y  LSHBOX: An Open Source C++ Toolbox of Locality-Sensitive Hashing for Large Scale Image Retrieval, Also Support Python and MATLAB.  SRS: A C++ Implementation of An In-memory, Space-efficient Approximate Nearest Neighbor Query Processing Algorithm based on p-stable Random Projection   "  Category:Search algorithms  Category:Classification algorithms  Category:Dimension reduction  Category:Hashing  Category:Probabilistic data structures     ‚Ü©   ‚Ü©  ‚Ü©  ‚Ü©   . ‚Ü©   ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©   ‚Ü©  ‚Ü©  ‚Ü©  Gorman, James, and James R. Curran. "Scaling distributional similarity to large corpora." Proceedings of the 21st International Conference on Computational Linguistics and the 44th annual meeting of the Association for Computational Linguistics. Association for Computational Linguistics, 2006. ‚Ü©     