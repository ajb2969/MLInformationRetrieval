   Arrival theorem      Arrival theorem   In queueing theory , a discipline within the mathematical theory of probability , the arrival theorem 1 (also referred to as the random observer property , ROP or job observer property 2 ) states that "upon arrival at a station, a job observes the system as if in steady state at an arbitrary instant for the system without that job." 3  The arrival theorem always holds in open product-form networks with unbounded queues at each node, but it also holds in more general networks. A necessary and sufficient condition for the arrival theorem to be satisfied in product-form networks is given in terms of Palm probabilities in Boucherie & Dijk, 1997. 4 A similar result also holds in some closed networks. Examples of product-form networks where the arrival theorem does not hold include reversible Kingman networks 5 6 and networks with a delay protocol. 7  Mitrani offers the intuition that "The state of node i as seen by an incoming job has a different distribution from the state seen by a random observer. For instance, an incoming job can never see all 'k jobs present at node i , because it itself cannot be among the jobs already present." 8  Theorem for arrivals governed by a Poisson process  For Poisson processes the property is often referred to as the PASTA property (Poisson Arrivals See Time Averages) and states that the probability of the state as seen by an outside random observer is the same as the probability of the state seen by an arriving customer. 9 The property also holds for the case of a doubly stochastic Poisson process where the rate parameter is allowed to vary depending on the state. 10  Theorem for Jackson networks  In an open Jackson network with m queues, write    𝐧  =   (   n  1   ,   n  2   ,  …  ,   n  m   )       𝐧    subscript  n  1    subscript  n  2   normal-…   subscript  n  m      \scriptstyle{\mathbf{n}=(n_{1},n_{2},\ldots,n_{m})}   for the state of the network. Suppose    π   (  𝐧  )       π  𝐧    \scriptstyle{\pi(\mathbf{n})}   is the equilibrium probability that the network is in state   𝐧   𝐧   \scriptstyle{\mathbf{n}}   . Then the probability that the network is in state   𝐧   𝐧   \scriptstyle{\mathbf{n}}   immediately before an arrival to any node is also    π   (  𝐧  )       π  𝐧    \scriptstyle{\pi(\mathbf{n})}   .  Note that this theorem does not follow from Jackson's theorem , where the steady state in continuous time is considered. Here we are concerned with particular points in time, namely arrival times. 11 This theorem first published by Sevcik and Mitrani in 1981. 12  Theorem for Gordon–Newell networks  In a closed Gordon–Newell network with m queues, write    𝐧  =   (   n  1   ,   n  2   ,  …  ,   n  m   )       𝐧    subscript  n  1    subscript  n  2   normal-…   subscript  n  m      \scriptstyle{\mathbf{n}=(n_{1},n_{2},\ldots,n_{m})}   for the state of the network. For a customer in transit to state i , let     α  i    (   𝐧  -   𝐞  i    )        subscript  α  i     𝐧   subscript  𝐞  i      \scriptstyle{\alpha_{i}(\mathbf{n}-\mathbf{e}_{i})}   denote the probability that immediately before arrival the customer 'sees' the state of the system to be        𝐧  -   𝐞  i    =   (   n  1   ,   n  2   ,  …  ,    n  i   -  1   ,  …  ,   n  m   )    .        𝐧   subscript  𝐞  i      subscript  n  1    subscript  n  2   normal-…     subscript  n  i   1   normal-…   subscript  n  m      \mathbf{n}-\mathbf{e}_{i}=(n_{1},n_{2},\ldots,n_{i}-1,\ldots,n_{m}).\,     This probability,     α  i    (   𝐧  -   𝐞  i    )        subscript  α  i     𝐧   subscript  𝐞  i      \scriptstyle{\alpha_{i}(\mathbf{n}-\mathbf{e}_{i})}   , is the same as the steady state probability for state    𝐧  -   𝐞  i       𝐧   subscript  𝐞  i     \scriptstyle{\mathbf{n}-\mathbf{e}_{i}}   for a network of the same type with one customer less . 13 It was published independently by Sevcik and Mitrani, 14 and Reiser and Lavenberg, 15 where the result was used to develop mean value analysis .  Notes  "  Category:Queueing theory  Category:Stochastic processes  Category:Probability theorems     ↩  ↩  ↩   ↩  ↩   ↩  ↩  ↩  ↩   ↩  ↩  ↩     