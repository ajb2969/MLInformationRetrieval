   Backpropagation through time      Backpropagation through time   Backpropagation through time (BPTT) is a gradient -based technique for training certain types of recurrent neural networks . It can be used to train Elman networks . The algorithm was independently derived by numerous researchers 1 2 3  Algorithm  (Figure)  thump|500px|BPTT unfolds a recurrent neural network through time.   To train a recurrent neural network using BPTT, some training data is needed. This data should be an ordered sequence of input-output pairs,     ⟨   𝐚  0   ,   𝐲  0   ⟩   ,   ⟨   𝐚  1   ,   𝐲  1   ⟩   ,   ⟨   𝐚  2   ,   𝐲  2   ⟩   ,  …  ,   ⟨   𝐚   n  -  1    ,   𝐲   n  -  1    ⟩        subscript  𝐚  0    subscript  𝐲  0      subscript  𝐚  1    subscript  𝐲  1      subscript  𝐚  2    subscript  𝐲  2    normal-…    subscript  𝐚    n  1     subscript  𝐲    n  1       \langle\mathbf{a}_{0},\mathbf{y}_{0}\rangle,\langle\mathbf{a}_{1},\mathbf{y}_{%
 1}\rangle,\langle\mathbf{a}_{2},\mathbf{y}_{2}\rangle,...,\langle\mathbf{a}_{n%
 -1},\mathbf{y}_{n-1}\rangle   . Also, an initial value must be specified for    𝐱  0     subscript  𝐱  0    \mathbf{x}_{0}   . Typically, the vector with zero-magnitude is used for this purpose.  BPTT begins by unfolding a recurrent neural network through time as shown in this figure. This recurrent neural network contains two feed-forward neural networks, f and g . When the network is unfolded through time, the unfolded network contains k instances of f and one instance of g . In the example shown, the network has been unfolded to a depth of k =3.  Training then proceeds in a manner similar to training a feed-forward neural network with backpropagation , except that each epoch must run through the observations,    𝐲  t     subscript  𝐲  t    \mathbf{y}_{t}   , in sequential order. Each training pattern consists of    ⟨   𝐱  t   ,   𝐚  t   ,   𝐚   t  +  1    ,   𝐚   t  +  2    ,  …  ,   𝐚    t  +  k   -  1    ,   𝐲   t  +  k    ⟩      subscript  𝐱  t    subscript  𝐚  t    subscript  𝐚    t  1     subscript  𝐚    t  2    normal-…   subscript  𝐚      t  k   1     subscript  𝐲    t  k      \langle\mathbf{x}_{t},\mathbf{a}_{t},\mathbf{a}_{t+1},\mathbf{a}_{t+2},...,%
 \mathbf{a}_{t+k-1},\mathbf{y}_{t+k}\rangle   . (All of the actions for k time-steps are needed because the unfolded network contains inputs at each unfolded level.) Typically, backpropagation is applied in an online manner to update the weights as each training pattern is presented.  After each pattern is presented, and the weights have been updated, the weights in each instance of f (     f  1   ,   f  2   ,  …  ,   f  k       subscript  f  1    subscript  f  2   normal-…   subscript  f  k     f_{1},f_{2},...,f_{k}   ) are averaged together so that they all have the same weights. Also,    𝐱   t  +  1      subscript  𝐱    t  1     \mathbf{x}_{t+1}   is calculated as     𝐱   t  +  1    =   f   (   𝐱  t   ,   𝐚  t   )         subscript  𝐱    t  1      f    subscript  𝐱  t    subscript  𝐚  t       \mathbf{x}_{t+1}=f(\mathbf{x}_{t},\mathbf{a}_{t})   , which provides the information necessary so that the algorithm can move on to the next time-step, t+1 .  Pseudo-code  Pseudo-code for BPTT:  Back_Propagation_Through_Time(a, y)   // a[t] is the input at time t. y[t] is the output
     Unfold the network to contain k instances of f
     do until stopping criteria is met:
         x = the zero-magnitude vector;// x is the current context
         for t from 0 to n - 1         // t is time. n is the length of the training sequence
             Set the network inputs to x, a[t], a[t+1], ..., a[t+k-1]
             p = forward-propagate the inputs over the whole unfolded network
             e = y[t+k] - p;           // error = target - prediction
             Back-propagate the error, e, back across the whole unfolded network
             Update all the weights in the network
             Average the weights in each instance of f together, so that each f is identical
             x = f(x);                 // compute the context for the next time-step  Advantages  BPTT tends to be significantly faster for training recurrent neural networks than general-purpose optimization techniques such as evolutionary optimization. 4  Disadvantages  BPTT has difficulty with local optima. With recurrent neural networks, local optima is a much more significant problem than it is with feed-forward neural networks. 5 The recurrent feedback in such networks tends to create chaotic responses in the error surface which cause local optima to occur frequently, and in very poor locations on the error surface.  See also   Backpropagation through structure   References  "  Category:Artificial neural networks     ↩  ↩  ↩  ↩  ↩     