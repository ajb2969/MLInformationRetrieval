   Ordered dithering      Ordered dithering  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */      Ordered dithering is an image dithering algorithm. It is commonly used by programs that need to provide continuous image of higher colors on a display of less color depth. For example, Microsoft Windows uses it in 16-color graphics modes. It is easily distinguished by its noticeable crosshatch patterns.  The algorithm achieves dithering by applying a threshold map on the pixels displayed, causing some of the pixels to be rendered at a different color, depending on how far in between the color is of available color entries.  Different sizes of threshold maps exist:           1  5    [     1    3      4    2     ]         1  5     1  3    4  2      \frac{\displaystyle 1}{\displaystyle 5}\begin{bmatrix}1&3\\
 4&2\\
 \end{bmatrix}          1  10    [     3    7    4      6    1    9      2    8    5     ]         1  10     3  7  4    6  1  9    2  8  5      \frac{\displaystyle 1}{\displaystyle 10}\begin{bmatrix}3&7&4\\
 6&1&9\\
 2&8&5\\
 \end{bmatrix}          1  17    [     1    9    3    11      13    5    15    7      4    12    2    10      16    8    14    6     ]         1  17     1  9  3  11    13  5  15  7    4  12  2  10    16  8  14  6      \frac{\displaystyle 1}{\displaystyle 17}\begin{bmatrix}1&9&3&11\\
 13&5&15&7\\
 4&12&2&10\\
 16&8&14&6\\
 \end{bmatrix}           1  65    [     1    49    13    61    4    52    16    64      33    17    45    29    36    20    48    32      9    57    5    53    12    60    8    56      41    25    37    21    44    28    40    24      3    51    15    63    2    50    14    62      35    19    47    31    34    18    46    30      11    59    7    55    10    58    6    54      43    27    39    23    42    26    38    22     ]         1  65     1  49  13  61  4  52  16  64    33  17  45  29  36  20  48  32    9  57  5  53  12  60  8  56    41  25  37  21  44  28  40  24    3  51  15  63  2  50  14  62    35  19  47  31  34  18  46  30    11  59  7  55  10  58  6  54    43  27  39  23  42  26  38  22      \frac{\displaystyle 1}{\displaystyle 65}\begin{bmatrix}1&49&13&61&4&52&16&64\\
 33&17&45&29&36&20&48&32\\
 9&57&5&53&12&60&8&56\\
 41&25&37&21&44&28&40&24\\
 3&51&15&63&2&50&14&62\\
 35&19&47&31&34&18&46&30\\
 11&59&7&55&10&58&6&54\\
 43&27&39&23&42&26&38&22\\
 \end{bmatrix}        The map may be rotated or mirrored without affecting the power of the algorithm. This threshold map is also known as an index matrix or Bayer matrix . 1  Arbitrary size threshold maps can be devised with a simple rule: First fill each slot with a successive integer starting from 1. Then reorder them such that the average distance between two successive numbers in the map is as large as possible, ensuring that the table "wraps" around at edges.  The algorithm renders the image normally, but for each pixel, it adds a value from the threshold map, causing the pixel's value to be quantized one step higher if it exceeds the threshold. For example, in monochrome rendering, if the value of the pixel (scaled into the 0-9 range if using a 3x3 matrix) is less than the number in the corresponding cell of the matrix, plot that pixel black, otherwise, plot it white.  (Figure)  A color scale shown undithered and dithered. The palette has 8 red tones, 8 green tones, and their intersections for a total of 64 colors, whereas the original image has 140 in both directions for a total of 19600 colors.   In pseudocode :   foreach y foreach x
        oldpixel := pixel[x][y] + (pixel[x][y] * threshold_map_4x4[x mod 4 ][y mod 4 ])
        newpixel := find_closest_palette_color(oldpixel)
        pixel[x][y] := newpixel  The values read from the threshold map should scale into the same range as is the minimal difference between distinct colors in the target palette.  Because the algorithm operates on single pixels and has no conditional statements, it is very fast and suitable for real-time transformations. Additionally, because the location of the dithering patterns stays always the same relative to the display frame, it is less prone to jitter than error-diffusion methods, making it suitable for animations. Because the patterns are more repetitive than error-diffusion method, an image with ordered dithering compresses better. Ordered dithering is more suitable for line-art graphics as it will result in straighter lines and fewer anomalies.  The size of the map selected should be equal to or larger than the ratio of source colors to target colors. For example, when quantizing a 24bpp image to 15bpp (256 colors per channel to 32 colors per channel), the smallest map one would choose would be 4x2, for the ratio of 8 (256:32). This allows expressing each distinct tone of the input with different dithering patterns.  Notes    References   Ordered Dithering (Graphics course project, Visgraf lab, Brazil)  Dithering algorithms (Lee Daniel Crocker, Paul Boulay and Mike Morra)  Arbitrary-palette positional dithering algorithm (Joel Yliluoma)   External links   Matlab implementation of various dithering methods   "  Category:Image processing  Category:Articles with example pseudocode     â†©    