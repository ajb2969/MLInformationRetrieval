


GOST (block cipher)




GOST (block cipher)

The GOST block cipher, defined in the standard GOST 28147-89, is a Soviet and Russian government standard symmetric key block cipher. Also based on this block cipher is the GOST hash function.
Developed in the 1970s, the standard had been marked "Top Secret" and then downgraded to "Secret" in 1990. Shortly after the dissolution of the USSR, it was declassified and it was released to the public in 1994. GOST 28147 was a Soviet alternative to the United States standard algorithm, DES.1 Thus, the two are very similar in structure.
The algorithm
GOST has a 64-bit block size and a key length of 256 bits. Its S-boxes can be secret, and they contain about 354 (log2(16!8)) bits of secret information, so the effective key size can be increased to 610 bits; however, a chosen-key attack can recover the contents of the S-Boxes in approximately 232 encryptions.{{ cite journal
|last=Saarinen
|first=Markku-Juhani
|title=A chosen key attack against the secret S-boxes of GOST
|year=1998
|url=http://citeseer.ist.psu.edu/rd/96002585%2C277448%2C1%2C0.25%2CDownload/http://citeseer.ist.psu.edu/compress/0/papers/cs/13215/http:zSzzSzwww.jyu.fizSz~mjoszSzgost_cka.ps.gz/saarinen98chosen.ps
|quote=We show that a simple "black box" chosen-key attack against GOST can recover secret S-boxes with approximately 2^32 encryptions}}

GOST is a Feistel network of 32 rounds. Its round function is very simple: add a 32-bit subkey modulo 232, put the result through a layer of S-boxes, and rotate that result left by 11 bits. The result of that is the output of the round function. In the diagram to the right, one line represents 32 bits.
The subkeys are chosen in a pre-specified order. The key schedule is very simple: break the 256-bit key into eight 32-bit subkeys, and each subkey is used four times in the algorithm; the first 24 rounds use the key words in order, the last 8 rounds use them in reverse order.
The S-boxes accept a four-bit input and produce a four-bit output. The S-box substitution in the round function consists of eight 4 × 4 S-boxes. The S-boxes are implementation-dependent – parties that want to secure their communications using GOST must be using the same S-boxes. For extra security, the S-boxes can be kept secret. In the original standard where GOST was specified, no S-boxes were given, but they were to be supplied somehow. This led to speculation that organizations the government wished to spy on were given weak S-boxes. One GOST chip manufacturer reported that he generated S-boxes himself using a pseudorandom number generator.2
For example, the Central Bank of Russian Federation uses the following S-boxes:







S-Box



1

4 10 9 2 13 8 0 14 6 11 1 12 7 15 5 3



2

14 11 4 12 6 13 15 10 2 3 8 1 0 7 5 9



3

5 8 1 13 10 3 4 2 14 15 12 7 6 0 9 11



4

7 13 10 1 0 8 9 15 14 4 6 12 11 2 5 3



5

6 12 7 1 5 15 13 8 4 10 9 14 0 3 11 2



6

4 11 10 0 7 2 1 13 3 6 8 5 9 12 15 14



7

13 11 4 1 3 15 5 9 0 10 14 7 6 8 2 12



8

1 15 13 0 5 7 10 4 9 2 3 14 6 11 8 12



Cryptanalysis of GOST
Compared to DES, GOST has a very simple round function. However, the designers of GOST attempted to offset the simplicity of the round function by specifying the algorithm with 32 rounds and secret S-boxes.
Another concern is that the avalanche effect is slower to occur in GOST than in DES. This is because of GOST's lack of an expansion permutation in the round function, as well as its use of a rotation instead of a permutation. Again, this is offset by GOST's increased number of rounds.
There is not much published cryptanalysis of GOST, but a cursory glance says that it seems secure.34 The large number of rounds and secret S-boxes makes both linear and differential cryptanalysis difficult. Its avalanche effect may be slower to occur, but it can propagate over 32 rounds very effectively.
However, GOST is not fully defined by its standard: It does not specify the S-boxes (replacement tables). On the one hand, this can be additional secure information (in addition to key). On the other hand, the following problems arise:

different algorithm implementations can use different replacement tables, and thus, can be incompatible to each other
possibility of deliberate weak replacement table usage
possibility (standard does not forbid it) to use replacement tables in which nodes are not commutation, that may lead to extreme security downfall

Despite its apparently strong construction, GOST is vulnerable to generic attacks based on its short (64-bit) block size, and should therefore never be used in contexts where more than 232 blocks could be encrypted with the same key.
Since 2007, several attacks were developed against GOST implementations with reduced number of rounds and/or keys with additional special properties.56
In 2011 several authors discovered more significant flaws in GOST cipher, being able to attack full 32-round GOST with arbitrary keys for the first time. It has been even called "a deeply flawed cipher" by Nicolas Courtois.7 First attacks were able to reduce time complexity from 
 
 
 
  to 
 
 
 
  at the cost of huge memory requirements,8 and soon they were improved up to 
 
 
 
  time complexity (at the cost of 
 
 
 
  memory and 
 
 
 
  data).9
As of December 2012 the best known attack on GOST (
 
 
 
 ) is on par with the best known attack (
 
 
 
 , based on another weakness noted by Nicolas Courtois) on widely used Advanced Encryption Standard.10
GOST has been submitted to ISO standardization in 2010.
See also

GOST standards

References
Further reading



Alex Biryukov, David Wagner, Advanced Slide Attacks, EUROCRYPT 2000, LNCS, pp 589–606, 2000.

External links

Description, texts of the standard, online GOST encrypt and decrypt tools
SCAN's entry for GOST
An open source implementation of PKCS#11 software device with Russian GOST cryptography standards capabilities

"
Category:Feistel ciphers Category:GOST standards

















