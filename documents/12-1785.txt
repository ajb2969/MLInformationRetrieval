   Computing the permanent      Computing the permanent   In mathematics , the computation of the permanent of a matrix is a problem that is known to be more difficult than the computation of the determinant of a matrix despite the apparent similarity of the definitions.  The permanent is defined similarly to the determinant, as a sum of products of sets of matrix entries that lie in distinct rows and columns. However, where the determinant weights each of these products with a ±1 sign based on the parity of the set , the permanent weights them all with a +1 sign.  While the determinant can be computed in polynomial time by Gaussian elimination , the permanent cannot. In computational complexity theory , a theorem of Valiant states that computing permanents is #P-hard , and even #P-complete for matrices in which all entries are 0 or 1. This puts the computation of the permanent in a class of problems believed to be even more difficult to compute than NP . It is known that computing the permanent is impossible for logspace-uniform ACC 0 circuits.  The development of both exact and approximate algorithms for computing the permanent of a matrix is an active area of research.  Definition and naive algorithm  The permanent of an n -by- n matrix A = ( a i,j ) is defined as        perm   (  A  )    =    ∑   σ  ∈   S  n       ∏   i  =  1   n    a   i  ,   σ   (  i  )         .       perm  A     subscript     σ   subscript  S  n       superscript   subscript  product    i  1    n    subscript  a   i    σ  i         \operatorname{perm}(A)=\sum_{\sigma\in S_{n}}\prod_{i=1}^{n}a_{i,\sigma(i)}.     The sum here extends over all elements σ of the symmetric group  S n , i.e. over all permutations of the numbers 1, 2, ..., n . This formula differs from the corresponding formula for the determinant only in that, in the determinant, each product is multiplied by the sign of the permutation σ while in this formula each product is unsigned. The formula may be directly translated into an algorithm that naively expands the formula, summing over all permutations and within the sum multiplying out each matrix entry. This requires n!  n arithmetic operations.  Ryser formula  The best known 1 general exact algorithm is due to . Ryser’s method is based on an inclusion–exclusion formula that can be given 2 as follows: Let    A  k     subscript  A  k    A_{k}   be obtained from A by deleting k columns, let    P   (   A  k   )       P   subscript  A  k     P(A_{k})   be the product of the row-sums of    A  k     subscript  A  k    A_{k}   , and let    Σ  k     subscript  normal-Σ  k    \Sigma_{k}   be the sum of the values of    P   (   A  k   )       P   subscript  A  k     P(A_{k})   over all possible    A  k     subscript  A  k    A_{k}   . Then        perm   (  A  )    =    ∑   k  =  0    n  -  1       (   -  1   )   k    Σ  k      .       perm  A     superscript   subscript     k  0      n  1       superscript    1   k    subscript  normal-Σ  k       \operatorname{perm}(A)=\sum_{k=0}^{n-1}(-1)^{k}\Sigma_{k}.     It may be rewritten in terms of the matrix entries as follows 3        perm   (  A  )    =     (   -  1   )   n     ∑   S  ⊆   {  1  ,  …  ,  n  }        (   -  1   )    |  S  |      ∏   i  =  1   n     ∑   j  ∈  S     a   i  j          .       perm  A      superscript    1   n     subscript     S   1  normal-…  n        superscript    1     S      superscript   subscript  product    i  1    n     subscript     j  S     subscript  a    i  j           \operatorname{perm}(A)=(-1)^{n}\sum_{S\subseteq\{1,\dots,n\}}(-1)^{|S|}\prod_{%
 i=1}^{n}\sum_{j\in S}a_{ij}.     Ryser’s formula can be evaluated using    O   (    2  n    n  2    )       O     superscript  2  n    superscript  n  2      O(2^{n}n^{2})   arithmetic operations, or    O   (    2  n   n   )       O     superscript  2  n   n     O(2^{n}n)   by processing the sets   S   S   S   in Gray code order.  Balasubramanian-Bax/Franklin-Glynn formula  Another formula that appears to be as fast as Ryser's (or perhaps even twice as fast) is to be found in the two Ph.D. theses; see , ; also . The methods to find the formula are quite different, being related to the combinatorics of the Muir algebra, and to finite difference theory respectively. Another way, connected with invariant theory is via the polarization identity for a symmetric tensor . The formula generalizes to infinitely many others, as found by all these authors, although it is not clear if they are any faster than the basic one. See .  The simplest known formula of this type (when the characteristic of the field is not two) is        perm   (  A  )    =    [    ∑  δ     (    ∏   k  =  1   m    δ  k    )     ∏   j  =  1   m     ∑   i  =  1   m     δ  i    a   i  j         ]   /   2   m  -  1      ,       perm  A      delimited-[]    subscript   δ       superscript   subscript  product    k  1    m    subscript  δ  k      superscript   subscript  product    j  1    m     superscript   subscript     i  1    m      subscript  δ  i    subscript  a    i  j           superscript  2    m  1       \operatorname{perm}(A)=\left[\sum_{\delta}\left(\prod_{k=1}^{m}\delta_{k}%
 \right)\prod_{j=1}^{m}\sum_{i=1}^{m}\delta_{i}a_{ij}\right]/2^{m-1},   where the outer sum is over all    2   m  -  1      superscript  2    m  1     2^{m-1}   vectors    δ  =   (   δ  1   =  1  ,   δ  2   ,  …  ,   δ  m   )   ∈    {  ±  1  }   m      fragments  δ    fragments  normal-(   subscript  δ  1    1  normal-,   subscript  δ  2   normal-,  normal-…  normal-,   subscript  δ  m   normal-)     superscript   fragments  normal-{  plus-or-minus  1  normal-}   m     \delta=(\delta_{1}=1,\delta_{2},\dots,\delta_{m})\in\{\pm 1\}^{m}   .  Special cases  Planar and K 3,3 -free  The number of perfect matchings in a bipartite graph is counted by the permanent of the graph's biadjacency matrix , and the permanent of any 0-1 matrix can be interpreted in this way as the number of perfect matchings in a graph. For planar graphs (regardless of bipartiteness), the FKT algorithm computes the number of perfect matchings in polynomial time by changing the signs of a carefully chosen subset of the entries in the Tutte matrix of the graph, so that the Pfaffian of the resulting skew-symmetric matrix (the square root of its determinant ) is the number of perfect matchings. This technique can be generalized to graphs that contain no subgraph homeomorphic to the complete bipartite graph  K 3,3 . 4  George Pólya had asked the question 5 of when it is possible to change the signs of some of the entries of a 01 matrix A so that the determinant of the new matrix is the permanent of A. Not all 01 matrices are "convertible" in this manner; in fact it is known () that there is no linear map   T   T   T   such that      per  T    (  A  )    =   det  A          per  T   A     A     \operatorname{per}\,T(A)=\det A   for all    n  ×  n      n  n    n\times n   matrices   A   A   A   . The characterization of "convertible" matrices was given by  who showed that such matrices are precisely those that are the biadjacency matrix of bipartite graphs that have a Pfaffian orientation : an orientation of the edges such that for every even cycle   C   C   C   for which    G  ∖  C      G  C    G\setminus C   has a perfect matching, there are an odd number of edges directed along C (and thus an odd number with the opposite orientation). It was also shown that these graphs are exactly those that do not contain a subgraph homeomorphic to    K   3  ,  3      subscript  K   3  3     K_{3,3}   , as above.  Computation modulo a number  Modulo 2, the permanent is the same as the determinant, as      (   -  1   )   ≡   1     (   mod  2   )     .        1    annotated  1   pmod  2      (-1)\equiv 1\;\;(\mathop{{\rm mod}}2).   It can also be computed modulo    2  k     superscript  2  k    2^{k}   in time    O   (   n    4  k   -  3    )       O   superscript  n      4  k   3      O(n^{4k-3})   for    k  ≥  2      k  2    k\geq 2   . However, it is UP-hard to compute the permanent modulo any number that is not a power of 2.  There are various formulae given by  for the computation modulo a prime   p   p   p   . Firstly there is one using symbolic calculations with partial derivatives.  Secondly, for    p  =  3      p  3    p=3   there is the following formula (Grigoriy Kogan, 1996) using the determinants of the principal submatrices of the matrix:         perm   (  A  )    =     (   -  1   )   m    Σ   U  ⊆   {  1  ,  …  ,  m  }      det   (   A  U   )      .   det   (   A   U  ¯    )     ,     formulae-sequence     perm  A      superscript    1   m    subscript  normal-Σ    U   1  normal-…  m        subscript  A  U         subscript  A   normal-¯  U       \operatorname{perm}(A)=(-1)^{m}\Sigma_{U\subseteq\{1,\dots,m\}}\det(A_{U}).%
 \det(A_{\bar{U}}),   where    A  U     subscript  A  U    A_{U}   is the principal submatrix of   A   A   A   induced by the rows and columns of   A   A   A   indexed by   U   U   U   , and    U  ¯     normal-¯  U    \bar{U}   is the complement of   U   U   U   in     {  1  ,  …  ,  m  }   .     1  normal-…  m    \{1,\dots,m\}.     (The determinant of an empty submatrix is defined to be 1).  This formula implies the following identities over fields of Characteristic 3 (Grigoriy Kogan, 1996):  for any invertible   A   A   A           perm   (   A   -  1    )     det    (  A  )   2     =   perm   (  A  )           perm   superscript  A    1        superscript  A  2      perm  A     \operatorname{perm}(A^{-1})\det(A)^{2}=\operatorname{perm}(A)   ; for any unitary   U   U   U   , i.e. a square matrix   U   U   U   such that      U  T   U   =   I          superscript  U  T   U   I    U^{T}U=I\,   ,      perm    (  U  )   2   =  det   (  U  +  V  )   det   (  U  )      fragments  perm   superscript   fragments  normal-(  U  normal-)   2      fragments  normal-(  U   V  normal-)     fragments  normal-(  U  normal-)     \operatorname{perm}(U)^{2}=\det(U+V)\det(U)   where   V   V   V   is the matrix whose entries are the cubes of the corresponding entries of   U   U   U   .  Approximate computation  When the entries of A are nonnegative, the permanent can be computed approximately in probabilistic polynomial time, up to an error of ε M , where M is the value of the permanent and ε > 0 is arbitrary. In other words, there exists a fully polynomial-time randomized approximation scheme (FPRAS) ().  The most difficult step in the computation is the construction of an algorithm to sample almost uniformly from the set of all perfect matchings in a given bipartite graph: in other words, a fully polynomial almost uniform sampler (FPAUS). This can be done using a Markov chain Monte Carlo algorithm that uses a Metropolis rule to define and run a Markov chain whose distribution is close to uniform, and whose mixing time is polynomial.  It is possible to approximately count the number of perfect matchings in a graph via the self-reducibility of the permanent, by using the FPAUS in combination with a well-known reduction from sampling to counting due to . Let    M   (  G  )       M  G    M(G)   denote the number of perfect matchings in   G   G   G   . Roughly, for any particular edge   e   e   e   in   G   G   G   , by sampling many matchings in   G   G   G   and counting how many of them are matchings in    G  ∖  e      G  e    G\setminus e   , one can obtain an estimate of the ratio    ρ  =    M   (  G  )     M   (   G  ∖  e   )         ρ      M  G     M    G  e       \rho=\frac{M(G)}{M(G\setminus e)}   . The number    M   (  G  )       M  G    M(G)   is then    ρ  M   (   G  ∖  e   )       ρ  M    G  e     \rho M(G\setminus e)   , where    M   (   G  ∖  e   )       M    G  e     M(G\setminus e)   can be approximated by applying the same method recursively.  Notes  References                                        "  Category:Computational complexity theory  Category:Linear algebra  Category:Matrix theory  Category:Permutations  Category:Computational problems     As of 2008, see ↩  [ http://books.google.com/books?id=5l5ps2JkyT0C&pg; ;=PA108&dq;=permanent+ryser&lr;=#PPA99,M1 p. 99] ↩  ↩  , ↩  , ↩     