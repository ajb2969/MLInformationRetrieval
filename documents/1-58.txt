   Amdahl's law      Amdahl's law   (Figure)  The speedup of a program using multiple processors in parallel computing is limited by the sequential fraction of the program. For example, if 95% of the program can be parallelized, the theoretical maximum speedup using parallel computing would be 20× as shown in the diagram.   Amdahl's law , also known as Amdahl's argument , 1 is used to find the maximum expected improvement to an overall system when only part of the system is improved. It is often used in parallel computing to predict the theoretical maximum speedup using multiple processors. The law is named after computer architect  Gene Amdahl , and was presented at the AFIPS Spring Joint Computer Conference in 1967.  The speedup of a program using multiple processors in parallel computing is limited by the time needed for the sequential fraction of the program. For example, if a program needs 20 hours using a single processor core, and a particular portion of the program which takes one hour to execute cannot be parallelized, while the remaining 19 hours (95%) of execution time can be parallelized, then regardless of how many processors are devoted to a parallelized execution of this program, the minimum execution time cannot be less than that critical one hour. Hence, the theoretical speedup is limited to at most 20×.  Definition  Given:       n  ∈  ℕ      n  ℕ    n\in\mathbb{N}   , the number of threads of execution ,      B  ∈   [  0  ,  1  ]       B   0  1     B\in[0,1]   , the fraction of the algorithm that is strictly serial,   The time    T   (  n  )       T  n    T\left(n\right)   an algorithm takes to finish when being executed on   n   n   n   thread(s) of execution corresponds to:       T   (  n  )    =   T   (  1  )    (   B  +    1  n    (   1  -  B   )     )          T  n     T  1    B      1  n     1  B        T(n)=T(1)\left(B+\frac{1}{n}\left(1-B\right)\right)     Therefore, the theoretical speedup    S   (  n  )       S  n    S(n)   that can be had by executing a given algorithm on a system capable of executing   n   n   n   threads of execution is:       S   (  n  )    =    T   (  1  )     T   (  n  )     =    T   (  1  )     T   (  1  )    (   B  +    1  n    (   1  -  B   )     )     =   1   B  +    1  n    (   1  -  B   )              S  n       T  1     T  n             T  1     T  1    B      1  n     1  B              1    B      1  n     1  B         S(n)=\frac{T\left(1\right)}{T\left(n\right)}=\frac{T\left(1\right)}{T\left(1%
 \right)\left(B+\frac{1}{n}\left(1-B\right)\right)}=\frac{1}{B+\frac{1}{n}\left%
 (1-B\right)}     Description  Amdahl's law is a model for the expected speedup and the relationship between parallelized implementations of an algorithm and its sequential implementations, under the assumption that the problem size remains the same when parallelized. For example, if for a given problem size a parallelized implementation of an algorithm can run 12% of the algorithm's operations arbitrarily quickly (while the remaining 88% of the operations are not parallelizable), Amdahl's law states that the maximum speedup of the parallelized version is  times as fast as the non-parallelized implementation.  More technically, the law is concerned with the speedup achievable from an improvement to a computation that affects a proportion P of that computation where the improvement has a speedup of S . (For example, if 30% of the computation may be the subject of a speed up, P will be 0.3; if the improvement makes the portion affected twice as fast, S will be 2.) Amdahl's law states that the overall speedup of applying the improvement will be:       1    (   1  -  P   )   +   P  S     =   1    (   1  -  0.3   )   +   0.3  2     =  1.1765          1      1  P     P  S       1      1  0.3     0.3  2          1.1765     \frac{1}{(1-P)+\frac{P}{S}}=\frac{1}{(1-0.3)+\frac{0.3}{2}}=1.1765     To see how this formula was derived, assume that the running time of the old computation was 1, for some unit of time. The running time of the new computation will be the length of time the unimproved fraction takes (which is 1 − P ), plus the length of time the improved fraction takes. The length of time for the improved part of the computation is the length of the improved part's former running time divided by the speedup, making the length of time of the improved part P / S . The final speedup is computed by dividing the old running time by the new running time, which is what the above formula does.  Here's another example. We are given a sequential task which is split into four consecutive parts: P1, P2, P3 and P4 with the percentages of runtime being 11%, 18%, 23% and 48% respectively. Then we are told that P1 is not sped up, so S1 = 1, while P2 is sped up 5×, P3 is sped up 20×, and P4 is sped up 1.6×. By using the formula P1/S1 + P2/S2 + P3/S3 + P4/S4, we find the new sequential running time is:        0.11  1   +   0.18  5   +   0.23  20   +   0.48  1.6    =  0.4575.          0.11  1     0.18  5     0.23  20     0.48  1.6    0.4575.    \frac{0.11}{1}+\frac{0.18}{5}+\frac{0.23}{20}+\frac{0.48}{1.6}=0.4575.     or a little less than    1  /  2      1  2    {1}/{2}   the original running time. Using the formula , the overall speed boost is 1 / 0.4575 = 2.186, or a little more than double the original speed. Notice how the 20× and 5× speedup don't have much effect on the overall speed when P1 (11%) is not sped up, and P4 (48%) is sped up only 1.6 times.  Parallelization  In the case of parallelization, Amdahl's law states that if P is the proportion of a program that can be made parallel (i.e., benefit from parallelization), and (1 − P ) is the proportion that cannot be parallelized (remains serial), then the maximum speedup that can be achieved by using N processors is       S   (  N  )    =   1    (   1  -  P   )   +   P  N           S  N     1      1  P     P  N       S(N)=\frac{1}{(1-P)+\frac{P}{N}}   .  In the limit, as N tends to infinity , the maximum speedup tends to 1 / (1 − P ). In practice, performance to price ratio falls rapidly as N is increased once there is even a small component of (1 − P ).  As an example, if P is 90%, then (1 − P ) is 10%, and the problem can be sped up by a maximum of a factor of 10, no matter how large the value of N used. For this reason, parallel computing is only useful for either small numbers of processors , or problems with very high values of P : so-called embarrassingly parallel problems. A great part of the craft of parallel programming consists of attempting to reduce the component (1 – P ) to the smallest possible value.  P can be estimated by using the measured speedup ( SU ) on a specific number of processors ( NP ) using       P  estimated   =     1   S  U    -  1     1   N  P    -  1         subscript  P  estimated         1    S  U    1       1    N  P    1      P_{\text{estimated}}=\frac{\frac{1}{SU}-1}{\frac{1}{NP}-1}   .  P estimated in this way can then be used in Amdahl's law to predict speedup for a different number of processors.  Relation to law of diminishing returns  Amdahl's law is often conflated with the law of diminishing returns , whereas only a special case of applying Amdahl's law demonstrates 'law of diminishing returns'. If one picks optimally (in terms of the achieved speed-up) what to improve, then one will see monotonically decreasing improvements as one improves. If, however, one picks non-optimally, after improving a sub-optimal component and moving on to improve a more optimal component, one can see an increase in return. Note that it is often rational to improve a system in an order that is "non-optimal" in this sense, given that some improvements are more difficult or consuming of development time than others.  Amdahl's law does represent the law of diminishing returns if you are considering what sort of return you get by adding more processors to a machine, if you are running a fixed-size computation that will use all available processors to their capacity. Each new processor you add to the system will add less usable power than the previous one. Each time you double the number of processors the speedup ratio will diminish, as the total throughput heads toward the limit of    1  /   (    1   -  P   )       1    1  P     \scriptstyle 1/(1\,-\,P)   .  This analysis neglects other potential bottlenecks such as memory bandwidth and I/O bandwidth, if they do not scale with the number of processors; however, taking into account such bottlenecks would tend to further demonstrate the diminishing returns of only adding processors.  Speedup in a sequential program  The maximum speedup in an improved sequential program, where some part was sped up   p   p   p   times is limited by inequality      maximum speedup  ≤   p   1  +   f  ⋅   (   p  -  1   )          maximum speedup    p    1   normal-⋅  f    p  1        \text{maximum speedup }\leq\frac{p}{1+f\cdot(p-1)}     where   f   f   \scriptstyle f   (     0   <   f   <  1        0  f       1     \scriptstyle 0\;<\;f\;<\;1   ) is the fraction of time (before the improvement) spent in the part that was not improved. For example (see picture on right):   If part B is made five times faster (     p   =  5      p  5    \scriptstyle p\;=\;5   ),      t  A    =  3       subscript  t  A   3    \scriptstyle t_{A}\;=\;3   ,      t  B    =  1       subscript  t  B   1    \scriptstyle t_{B}\;=\;1   , and     f   =    t  A   /   (     t  A    +   t  B    )    =  0.75        f     subscript  t  A      subscript  t  A    subscript  t  B          0.75     \scriptstyle f\;=\;t_{A}/(t_{A}\,+\,t_{B})\;=\;0.75   , then     maximum speedup  ≤   5   1  +   0.75  ⋅   (   5  -  1   )      =  1.25        maximum speedup    5    1   normal-⋅  0.75    5  1           1.25     \text{maximum speedup }\leq\frac{5}{1+0.75\cdot(5-1)}=1.25     If part A is made to run twice as fast (     p   =  2      p  2    \scriptstyle p\;=\;2   ),      t  B    =  1       subscript  t  B   1    \scriptstyle t_{B}\;=\;1   ,      t  A    =  3       subscript  t  A   3    \scriptstyle t_{A}\;=\;3   , and     f   =    t  B   /   (     t  A    +   t  B    )    =  0.25        f     subscript  t  B      subscript  t  A    subscript  t  B          0.25     \scriptstyle f\;=\;t_{B}/(t_{A}\,+\,t_{B})\;=\;0.25   , then     maximum speedup  ≤   2   1  +   0.25  ⋅   (   2  -  1   )      =  1.60        maximum speedup    2    1   normal-⋅  0.25    2  1           1.60     \text{maximum speedup }\leq\frac{2}{1+0.25\cdot(2-1)}=1.60      Therefore, making A twice as fast is better than making B five times faster. The percentage improvement in speed can be calculated as      percentage improvement  =    (   1  -   1  speedup factor    )   ⋅  100       percentage improvement   normal-⋅    1    1  speedup factor    100     \text{percentage improvement}=\left(1-\frac{1}{\text{speedup factor}}\right)%
 \cdot 100      Improving part A by a factor of two will increase overall program speed by a factor of 1.6, which makes it 37.5% faster than the original computation.  However, improving part B by a factor of five, which presumably requires more effort, will only achieve an overall speedup factor of 1.25, which makes it 20% faster.   Limitations  Amdahl's law only applies to cases where the problem size is fixed. In practice, as more computing resources become available, they tend to get used on larger problems (larger datasets), and the time spent in the parallelizable part often grows much faster than the inherently sequential work. In this case, Gustafson's law gives a more realistic assessment of parallel performance. 2  See also   Critical path method  Karp–Flatt metric  Moore's law   Notes  References     Further reading     External links   Cases where Amdahl's law is inapplicable  Oral history interview with Gene M. Amdahl  Charles Babbage Institute , University of Minnesota. Amdahl discusses his graduate work at the University of Wisconsin and his design of WISC . Discusses his role in the design of several computers for IBM including the STRETCH , IBM 701 , and IBM 704 . He discusses his work with Nathaniel Rochester and IBM's management of the design process. Mentions work with Ramo-Wooldridge , Aeronutronic , and Computer Sciences Corporation  A simple interactive Amdahl's Law calculator  "Amdahl's Law" by Joel F. Klein, Wolfram Demonstrations Project , 2007.  Amdahl's Law in the Multicore Era  Blog Post: "What the $#@! is Parallelism, Anyhow?"  Amdahl's Law applied to OS system calls on multicore CPU  Evaluation of the Intel Core i7 Turbo Boost feature , by James Charles, Preet Jassi, Ananth Narayan S, Abbas Sadat and Alexandra Fedorova  Calculation of the acceleration of parallel programs as a function of the number of threads , by George Popov, Valeri Mladenov and Nikos Mastorakis  Blog: measurement and visualization of parallelism , by Stefan Ruppert   "  Category:Analysis of parallel algorithms  Category:Programming rules of thumb     ↩  ↩     