


LOOP (programming language)




LOOP (programming language)

LOOP is a pedagogical programming language designed by Uwe Schöning, along with GOTO and WHILE. The only operations supported in the language are assignment, addition and looping.
The key property of the LOOP language is that the functions it can compute are exactly the primitive recursive functions.1
Features
Each primitive recursive function is LOOP-computable and vice versa.2
In contrast to GOTO programs and WHILE programs, LOOP programs always terminate.3 Therefore, the set of functions computable by LOOP-programs is a proper subset of computable functions (and thus a subset of the computable by WHILE and GOTO program functions).4
An example of a total computable function that is not LOOP computable is the Ackermann function.5
Formal definition
Syntax
LOOP-programs consist of the symbols LOOP, DO, END, :=, +, - and ; as well as any number of variables and constants. LOOP-programs have the following syntax in modified Backus-Naur Form:


 
  Here, 
 
 
 
  are variable names and 
 
 
 
 
  are constants.
Semantics
If P is a LOOP program, P is equivalent to a function 
 
 
 
 . The variables 
 
 
 
  through 
 
 
 
  in a LOOP program correspond to the arguments of the function 
 
 
 
 , and are initialized before program execution with the appropriate values. All other variables are given the initial value zero. The variable 
 
 
 
 
  corresponds to the value that 
 
 
 
  takes when given the argument values from 
 
 
 
  through 
 
 
 
 .
A statement of the form
x0 := x1 + c
means the value of the constant 
 
 
 
  is added to the value of the variable 
 
 
 
 
 , and the result is set as the value of the variable 
 
 
 
 . 
 
 
 
  can have the value zero, which allows the value of one variable to be assigned to another variable:
x0 := x1 + 0
A statement of the form
x0 := x1 - c
means the value of the constant 
 
 
 
 is subtracted from the value of the variable 
 
 
 
 , and the result is set as the value of the variable 
 
 
 
 
 . Negative numbers aren't allowed, and are replaced by zeros.
Variables are allowed to be simultaneously on the left and right side of an assignment. A statement of the form:
x1: = x1 + c
for example, adds the value of the constant 
 
 
 
  to the variable 
 
 
 
 .
A statement of the form
P1; P2
represents the sequential execution of sub-programs 
 
 
 
  and 
 
 
 
 , in that order.
A statement of the form
LOOP x DO P END
means the repeated execution of the partial program 
 
 
 
 
  a total of 
 
 
 
  times, where the value that 
 
 
 
  has at the beginning of the execution of the statement is used. Even if 
 
 
 
  changes the value of 
 
 
 
 , it won't affect how many times 
 
 
 
 
  is executed in the loop. If 
 
 
 
  has the value zero, then 
 
 
 
  is not executed inside the LOOP statement. This allows for branches in LOOP programs, where the conditional execution of a partial program depends on whether a variable has value zero or one.
Example Programs
Addition
In the following program, the variable 
 
 
 
  is set to the sum of the variables 
 
 
 
  and 
 
 
 
 
 .
x0 := x1 + 0;
LOOP x2 DO
   x0 := x0 + 1
END





 
  is first assigned the value of 
 
 
 
 . Then, 
 
 
 
  is incremented a total of 
 
 
 
  times by the LOOP statement. This program can be used as a subroutine in other LOOP programs. The LOOP syntax can be extended with the following statement, equivalent to calling the above as a subroutine:
x0 := x1 + x2
Multiplication
The following LOOP program sets the value of the variable 
 
 
 
 
  to the product of the variables 
 
 
 
  and 
 
 
 
 .
LOOP x1 
  x0 := x0 + x2
END
This multiplication program uses the syntax introduced by the addition subroutine from the previous example. The multiplication is performed here by adding the value of 
 
 
 
  a total of 
 
 
 
  times, storing results in 
 
 
 
 
 .
See also

μ-recursive function

Notes and references


External links

Loop, Goto & While

"
Category:Computability theory












