   LOOP (programming language)      LOOP (programming language)   LOOP is a pedagogical programming language designed by Uwe Schöning , along with GOTO and WHILE . The only operations supported in the language are assignment, addition and looping.  The key property of the LOOP language is that the functions it can compute are exactly the primitive recursive functions . 1  Features  Each primitive recursive function is LOOP-computable and vice versa. 2  In contrast to GOTO programs and WHILE programs, LOOP programs always terminate . 3 Therefore, the set of functions computable by LOOP-programs is a proper subset of computable functions (and thus a subset of the computable by WHILE and GOTO program functions). 4  An example of a total computable function that is not LOOP computable is the Ackermann function . 5  Formal definition  Syntax  LOOP-programs consist of the symbols LOOP , DO , END , := , + , - and ; as well as any number of variables and constants. LOOP-programs have the following syntax in modified Backus-Naur Form :        P      :  =       x  i   :=    x  j   +  c         |      x  i   :=    x  j   -  c         |     P  ;  P        |      LOOP     x  i     DO    P   END         P   normal-:  absent     assign   subscript  x  i      subscript  x  j   c       missing-subexpression   normal-|   assign   subscript  x  i      subscript  x  j   c       missing-subexpression   normal-|   P  P      missing-subexpression   normal-|    LOOP   subscript  x  i   DO  P  END      \begin{array}[]{lrl}P&:=&x_{i}:=x_{j}+c\\
 &|&x_{i}:=x_{j}-c\\
 &|&PP\\
 &|&\mathrm{LOOP}\,x_{i}\,\mathrm{DO}\,P\,\mathrm{END}\end{array}   Here,     V  a  r   :=   {   x  0   ,   x  1   ,  …  }      assign    V  a  r     subscript  x  0    subscript  x  1   normal-…     Var:=\{x_{0},x_{1},...\}   are variable names and    c  ∈  ℕ      c  ℕ    c\in\mathbb{N}   are constants.  Semantics  If P is a LOOP program, P is equivalent to a function    f  :    ℕ  k   →  ℕ      normal-:  f   normal-→   superscript  ℕ  k   ℕ     f:\mathbb{N}^{k}\rightarrow\mathbb{N}   . The variables    x  1     subscript  x  1    x_{1}   through    x  k     subscript  x  k    x_{k}   in a LOOP program correspond to the arguments of the function   f   f   f   , and are initialized before program execution with the appropriate values. All other variables are given the initial value zero. The variable    x  0     subscript  x  0    x_{0}   corresponds to the value that   f   f   f   takes when given the argument values from    x  1     subscript  x  1    x_{1}   through    x  k     subscript  x  k    x_{k}   .  A statement of the form  x 0 := x 1 + c  means the value of the constant   c   c   c   is added to the value of the variable    x  1     subscript  x  1    x_{1}   , and the result is set as the value of the variable    x  0     subscript  x  0    x_{0}   .   c   c   c   can have the value zero, which allows the value of one variable to be assigned to another variable:  x 0 := x 1 + 0  A statement of the form  x 0 := x 1 - c  means the value of the constant   c   c   c   is subtracted from the value of the variable    x  1     subscript  x  1    x_{1}   , and the result is set as the value of the variable    x  0     subscript  x  0    x_{0}   . Negative numbers aren't allowed, and are replaced by zeros.  Variables are allowed to be simultaneously on the left and right side of an assignment. A statement of the form:  x 1 : = x 1 + c  for example, adds the value of the constant   c   c   c   to the variable    x  1     subscript  x  1    x_{1}   .  A statement of the form  P 1 ; P 2  represents the sequential execution of sub-programs    P  1     subscript  P  1    P_{1}   and    P  2     subscript  P  2    P_{2}   , in that order.  A statement of the form  LOOP x DO P END  means the repeated execution of the partial program   P   P   P   a total of   x   x   x   times, where the value that   x   x   x   has at the beginning of the execution of the statement is used. Even if   P   P   P   changes the value of   x   x   x   , it won't affect how many times   P   P   P   is executed in the loop. If   x   x   x   has the value zero, then   P   P   P   is not executed inside the LOOP statement. This allows for branches in LOOP programs, where the conditional execution of a partial program depends on whether a variable has value zero or one.  Example Programs  Addition  In the following program, the variable    x  0     subscript  x  0    x_{0}   is set to the sum of the variables    x  1     subscript  x  1    x_{1}   and    x  2     subscript  x  2    x_{2}   .  x 0 := x 1 + 0;  LOOP x 2 DO  x 0 := x 0 + 1  END         x  0     subscript  x  0    x_{0}   is first assigned the value of    x  1     subscript  x  1    x_{1}   . Then,    x  0     subscript  x  0    x_{0}   is incremented a total of    x  2     subscript  x  2    x_{2}   times by the LOOP statement. This program can be used as a subroutine in other LOOP programs. The LOOP syntax can be extended with the following statement, equivalent to calling the above as a subroutine:  x 0 := x 1 + x 2  Multiplication  The following LOOP program sets the value of the variable    x  0     subscript  x  0    x_{0}   to the product of the variables    x  1     subscript  x  1    x_{1}   and    x  2     subscript  x  2    x_{2}   .  LOOP x 1   x 0 := x 0 + x 2  END  This multiplication program uses the syntax introduced by the addition subroutine from the previous example. The multiplication is performed here by adding the value of    x  2     subscript  x  2    x_{2}   a total of    x  1     subscript  x  1    x_{1}   times, storing results in    x  0     subscript  x  0    x_{0}   .  See also   μ-recursive function   Notes and references    External links   Loop, Goto & While   "  Category:Computability theory     ↩  ↩  ↩  ↩  ↩     