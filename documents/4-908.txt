   Set cover problem      Set cover problem   The set cover problem is a classical question in combinatorics , computer science and complexity theory . It is one of Karp's 21 NP-complete problems shown to be NP-complete in 1972.  It is a problem "whose study has led to the development of fundamental techniques for the entire field" of approximation algorithms . 1  Given a set of elements    {  1  ,  2  ,  …  ,  m  }     1  2  normal-…  m    \{1,2,...,m\}   (called the universe) and a set   S   S   S   of   n   n   n   sets whose union equals the universe, the set cover problem is to identify the smallest subset of   S   S   S   whose union equals the universe. For example, consider the universe    U  =   {  1  ,  2  ,  3  ,  4  ,  5  }       U   1  2  3  4  5     U=\{1,2,3,4,5\}   and the set of sets    S  =   {   {  1  ,  2  ,  3  }   ,   {  2  ,  4  }   ,   {  3  ,  4  }   ,   {  4  ,  5  }   }       S    1  2  3    2  4    3  4    4  5      S=\{\{1,2,3\},\{2,4\},\{3,4\},\{4,5\}\}   . Clearly the union of   S   S   S   is   U   U   U   . However, we can cover all of the elements with the following, smaller number of sets    {   {  1  ,  2  ,  3  }   ,   {  4  ,  5  }   }      1  2  3    4  5     \{\{1,2,3\},\{4,5\}\}   .  More formally, given a universe   𝒰   𝒰   \mathcal{U}   and a family   𝒮   𝒮   \mathcal{S}   of subsets of   𝒰   𝒰   \mathcal{U}   , a cover is a subfamily    𝒞  ⊆  𝒮      𝒞  𝒮    \mathcal{C}\subseteq\mathcal{S}   of sets whose union is   𝒰   𝒰   \mathcal{U}   . In the set covering decision problem , the input is a pair    (  𝒰  ,  𝒮  )     𝒰  𝒮    (\mathcal{U},\mathcal{S})   and an integer   k   k   k   ; the question is whether there is a set covering of size   k   k   k   or less. In the set covering optimization problem , the input is a pair    (  𝒰  ,  𝒮  )     𝒰  𝒮    (\mathcal{U},\mathcal{S})   , and the task is to find a set covering that uses the fewest sets.  The decision version of set covering is NP-complete , and the optimization version of set cover is NP-hard .  If each set is assigned a cost, it becomes a weighted set cover problem.  Integer linear program formulation  The minimum set cover problem can be formulated as the following integer linear program (ILP). 2      minimize        ∑   S  ∈  𝒮     x  S       subscript     S  𝒮     subscript  x  S     \sum_{S\in\mathcal{S}}x_{S}       (minimize the number of sets)     subject to         ∑   S  :   e  ∈  S      x  S    ⩾  1        subscript    normal-:  S    e  S      subscript  x  S    1    \sum_{S\colon e\in S}x_{S}\geqslant 1      for all    e  ∈  𝒰      e  𝒰    e\in\mathcal{U}      (cover every element of the universe)           x  S   ∈   {  0  ,  1  }        subscript  x  S    0  1     x_{S}\in\{0,1\}      for all    S  ∈  𝒮      S  𝒮    S\in\mathcal{S}   .   (every set is either in the set cover or not)     This ILP belongs to the more general class of ILPs for covering problems . The integrality gap of this ILP is at most    log  n      n    \scriptstyle\log n   , so its relaxation gives a factor-    log  n      n    \scriptstyle\log n    approximation algorithm for the minimum set cover problem (where   n   n   \scriptstyle n   is the size of the universe). 3  Hitting set formulation  Set covering is equivalent to the hitting set problem . It is easy to see this by observing that an instance of set covering can be viewed as an arbitrary bipartite graph , with sets represented by vertices on the left, the universe represented by vertices on the right, and edges representing the inclusion of elements in sets. The task is then to find a minimum cardinality subset of left-vertices which covers all of the right-vertices. In the Hitting set problem, the objective is to cover the left-vertices using a minimum subset of the right vertices. Converting from one problem to the other is therefore achieved by interchanging the two sets of vertices.  Greedy algorithm  There is a greedy algorithm for polynomial time approximation of set covering that chooses sets according to one rule: at each stage, choose the set that contains the largest number of uncovered elements. It can be shown 4 that this algorithm achieves an approximation ratio of    H   (  s  )       H  s    H(s)   , where   s   s   s   is the size of the set to be covered,    H   (  n  )       H  n    H(n)   is the   n   n   n   -th harmonic number :       H   (  n  )    =    ∑   k  =  1   n    1  k    ≤    ln  n   +  1           H  n     superscript   subscript     k  1    n     1  k             n   1      H(n)=\sum_{k=1}^{n}\frac{1}{k}\leq\ln{n}+1     This greedy algorithm actually achieves an approximation ratio of    H   (   s  ′   )       H   superscript  s  normal-′     H(s^{\prime})   where    s  ′     superscript  s  normal-′    s^{\prime}   is the maximum cardinality set of   S   S   S   . For δ-dense instances, there exists, however, a    c   ln  m       c    m     c\ln{m}   -approximation algorithm for every    c  >  0      c  0    c>0   . 5  There is a standard example on which the greedy algorithm achieves an approximation ratio of      log  2    (  n  )    /  2        subscript   2   n   2    \log_{2}(n)/2   . The universe consists of    n  =    2   (   k  +  1   )    -  2       n     superscript  2    k  1    2     n=2^{(k+1)}-2   elements. The set system consists of   k   k   k   pairwise disjoint sets     S  1   ,  …  ,   S  k       subscript  S  1   normal-…   subscript  S  k     S_{1},\ldots,S_{k}   with sizes    2  ,  4  ,  8  ,  …  ,   2  k      2  4  8  normal-…   superscript  2  k     2,4,8,\ldots,2^{k}   respectively, as well as two additional disjoint sets     T  0   ,   T  1       subscript  T  0    subscript  T  1     T_{0},T_{1}   , each of which contains half of the elements from each    S  i     subscript  S  i    S_{i}   . On this input, the greedy algorithm takes the sets     S  k   ,  …  ,   S  1       subscript  S  k   normal-…   subscript  S  1     S_{k},\ldots,S_{1}   , in that order, while the optimal solution consists only of    T  0     subscript  T  0    T_{0}   and    T  1     subscript  T  1    T_{1}   . An example of such an input for    k  =  3      k  3    k=3   is pictured on the right.  Inapproximability results show that the greedy algorithm is essentially the best-possible polynomial time approximation algorithm for set cover (see Inapproximability results below), under plausible complexity assumptions.  Low-frequency systems  If each element occurs in at most f sets, then a solution can be found in polynomial time that approximates the optimum to within a factor of f using LP relaxation . 6  Inapproximability results  When   n   n   n   refers to the size of the universe,  showed that set covering cannot be approximated in polynomial time to within a factor of      1  2     log  2   n    ≈   0.72   ln  n            1  2     subscript   2   n      0.72    n      \tfrac{1}{2}\log_{2}{n}\approx 0.72\ln{n}   , unless NP has quasi-polynomial time algorithms. Feige (1998) improved this lower bound to     (   1  -   o   (  1  )     )   ⋅   ln  n      normal-⋅    1    o  1      n     \bigl(1-o(1)\bigr)\cdot\ln{n}   under the same assumptions, which essentially matches the approximation ratio achieved by the greedy algorithm.  established a lower bound of    c  ⋅   ln  n      normal-⋅  c    n     c\cdot\ln{n}   , where   c   c   c   is a certain constant, under the weaker assumption that P    ≠     \not=    NP . A similar result with a higher value of   c   c   c   was recently proved by .  showed optimal inapproximability by proving that it cannot be approximated to     (   1  -   o   (  1  )     )   ⋅   ln  n      normal-⋅    1    o  1      n     \bigl(1-o(1)\bigr)\cdot\ln{n}   unless P    =     =    NP .  Related problems   Hitting set is an equivalent reformulation of Set Cover.  Vertex cover is a special case of Hitting Set.  Edge cover is a special case of Set Cover.  Set packing is the dual problem of Set Cover.  Maximum coverage problem is to choose at most k sets to cover as many elements as possible.  Dominating set is the problem of selecting a set of vertices (the dominating set) in a graph such that all other vertices are adjacent to at least one vertex in the dominating set. The Dominating set problem was shown to be NP complete through a reduction from Set cover.  Exact cover problem is to choose a set cover with no element included in more than one covering set.  Closest pair of points problem  Nearest neighbor search   Notes  References    .    .    .   .   .        External links   Benchmarks with Hidden Optimum Solutions for Set Covering, Set Packing and Winner Determination  A compendium of NP optimization problems - Minimum Set Cover   "  Category:Set families  Category:NP-complete problems     ↩  ↩  ↩  Chvatal, V. A Greedy Heuristic for the Set-Covering Problem . Mathematics of Operations Research Vol. 4, No. 3 (Aug., 1979), pp. 233-235 ↩  ↩  ↩     