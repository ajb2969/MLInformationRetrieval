   Optimal binary search tree      Optimal binary search tree   In computer science , an optimal binary search tree (BST) , sometimes called a weight-balanced binary tree , 1 is a binary search tree which provides the smallest possible search time (or expected search time ) for a given sequence of accesses (or access probabilities). Optimal BSTs are generally divided into two types: static and dynamic.  In the static optimality problem, the tree cannot be modified after it has been constructed. In this case, there exists some particular layout of the nodes of the tree which provides the smallest expected search time for the given access probabilities. Various algorithms exist to construct or approximate the statically optimal tree given the information on the access probabilities of the elements.  In the dynamic optimality problem, the tree can be modified at any time, typically by permitting tree rotations . The tree is considered to have a cursor starting at the root which it can move or use to perform modifications. In this case, there exists some minimal-cost sequence of these operations which causes the cursor to visit every node in the target access sequence in order. The splay tree is conjectured to have a constant competitive ratio compared to the dynamically optimal tree in all cases, though this has not yet been proven.  Static optimality  Definition  In the static optimality problem as defined by Knuth , 2 we are given a set of   n   n   n   ordered elements and a set of     2  n   +  1        2  n   1    2n+1   probabilities. We will denote the elements    a  1     subscript  a  1    a_{1}   through    a  n     subscript  a  n    a_{n}   and the probabilities    A  1     subscript  A  1    A_{1}   through    A  n     subscript  A  n    A_{n}   and    B  0     subscript  B  0    B_{0}   through    B  n     subscript  B  n    B_{n}   .    A  i     subscript  A  i    A_{i}   is the probability of a search being done for element    a  i     subscript  a  i    a_{i}   . For    1  ≤  i  <  n        1  i       n     1\leq i   ,    B  i     subscript  B  i    B_{i}   is the probability of a search being done for an element between    a  i     subscript  a  i    a_{i}   and    a   i  +  1      subscript  a    i  1     a_{i+1}   ,    B  0     subscript  B  0    B_{0}   is the probability of a search being done for an element strictly less than    a  0     subscript  a  0    a_{0}   , and    B  n     subscript  B  n    B_{n}   is the probability of a search being done for an element strictly greater than    a  n     subscript  a  n    a_{n}   . These     2  n   +  1        2  n   1    2n+1   probabilities cover all possible searches, and therefore add up to one.  The static optimality problem is the optimization problem of finding the binary search tree that minimizes the expected search time, given the     2  n   +  1        2  n   1    2n+1   probabilities. As the number of possible trees on a set of   n   n   n   elements is     (       2  n       n      )    1   n  +  1         binomial    2  n   n     1    n  1      {2n\choose n}\frac{1}{n+1}   , 3 which is exponential in   n   n   n   , brute-force search is not usually a feasible solution.  Knuth's dynamic programming algorithm  In 1971, Knuth published a relatively straightforward dynamic programming algorithm capable of constructing the statically optimal tree in only O(n 2 ) time. 4 Knuth's primary insight was that the static optimality problem exhibits optimal substructure ; that is, if a certain tree is statically optimal for a given probability distribution, then its left and right subtrees must also be statically optimal for their appropriate subsets of the distribution.  To see this, consider what Knuth calls the "weighted path length" of a tree. The weighted path length of a tree on n elements is the sum of the lengths of all 2n+1 possible search paths, weighted by their respective probabilities. The tree with the minimal weighted path length is, by definition, statically optimal.  But weighted path lengths have an interesting property. Let P be the weighted path length of a binary tree, P L be the weighted path length of its left subtree, and P R be the weighted path length of its right subtree. Also let W be the sum of all the probabilities in the tree. Observe that when either subtree is attached to the root, the depth of each of its elements (and thus each of its search paths) is increased by one. Also observe that the root itself has a depth of one. This means that the difference in weighted path length between a tree and its two subtrees is exactly the sum of every single probability in the tree, leading to the following recurrence:      P  =    P  L   +   P  R   +  W       P     subscript  P  L    subscript  P  R   W     P=P_{L}+P_{R}+W     This recurrence leads to a natural dynamic programming solution. Let    P   i  j      subscript  P    i  j     P_{ij}   be the weighted path length of the statically optimal search tree for all values between a i and a j+1 , let    W   i  j      subscript  W    i  j     W_{ij}   be the total weight of that tree, and let    R   i  j      subscript  R    i  j     R_{ij}   be the index of its root. The algorithm can be built using the following formulas:       (   1  /   log  3    )   H        1    3    H    (1/\log 3)H     where H is the entropy of the probability distribution. Since no optimal binary search tree can ever do better than a weighted path length of      O   (    log   log  n     OPT   (  X  )     )       O        n     OPT  X      O(\log\log n\operatorname{OPT}(X))     this approximation is very close. 5  Dynamic optimality  Definition  There are several different definitions of dynamic optimality, all of which are effectively equivalent to within a constant factor in terms of running-time. 6 The problem was first introduced implicitly by Sleator and Tarjan in their paper on splay trees , 7 but Demaine et al. give a very good formal statement of it. 8  In the dynamic optimality problem, we are given a sequence of accesses x 1 , ..., x m on the keys 1, ..., n. For each access, we are given a pointer to the root of our BST and can use the pointer to perform any of the following operations:   Move the pointer to the left child of the current node.  Move the pointer to the right child of the current node.  Move the pointer to the parent of the current node.  Perform a single rotation on the current node and its parent.   Our BST algorithm can perform any sequence of the above operations as long as the pointer eventually ends up on the node containing the target value x i . The time it takes a given dynamic BST algorithm to perform a sequence of accesses is equivalent to the total number of such operations performed during that sequence. Given any sequence of accesses on any set of elements, there is some BST algorithm which performs all accesses using the fewest total operations.  This model defines the fastest possible tree for a given sequence of accesses, but calculating the optimal tree in this sense therefore requires foreknowledge of exactly what the access sequence will be. If we let OPT(X) be the number of operations performed by the strictly optimal tree for an access sequence X, we can say that a tree is dynamically optimal as long as, for any X, it performs X in time O(OPT(X)) (that is, it has a constant competitive ratio ). 9  There are several data structures conjectured to have this property, but none proven. It is an open problem whether there exists a dynamically optimal data structure in this model.  Splay trees  The splay tree is a data structure invented in 1985 by Daniel Sleator and Robert Tarjan which is conjectured to be dynamically optimal in the required sense. That is, a splay tree is believed to perform any sufficiently long access sequence X in time O(OPT(X)). 10  Tango trees  The tango tree is a data structure proposed in 2004 by Demaine et al. which has been proven to perform any sufficiently-long access sequence X in time    log   log  n         n     \log\log n   . While this is not dynamically optimal, the competitive ratio of $\log\log n$ is still very small for reasonable values of n. 11  Other results  In 2013, John Iacono published a paper which uses the geometry of binary search trees to provide an algorithm which is dynamically optimal if any binary search tree algorithm is dynamically optimal. 12  See also   Trees  Splay tree  Tango tree  Geometry of binary search trees  List of data structures   Notes  "  Category:Binary trees  Category:Search trees     ↩  ↩     ↩  ↩      ↩     