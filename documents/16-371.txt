   Module:Rfx/doc      Module:Rfx/doc  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     This is a library for getting information about individual requests for adminship (RfA) and requests for bureaucratship (RfB) pages on the English Wikipedia. It is not meant to be used directly from wiki pages, but rather to be used by other Lua modules.  Creating new objects  First of all, the library must be loaded, like this:  local rfx =  require (  'Module:Rfx'  )  Once the library is loaded, you can make a new rfx object using rfx.new() .  (see below ).  rfx.new() is used like this:  local myRfx = rfx . new ( pagename )  The pagename variable should be the name of a valid RfA or RfB page, for example:  local exampleRfa = rfx . new (  'Wikipedia:Requests for adminship/Example'  )  If pagename is not specified, or the page is not a subpage of Wikipedia:Requests for adminship or Wikipedia:Requests for bureaucratship , then rfx.new will return nil .  Methods and properties  Once you have created a new rfx object, there are a number of methods and properties that you can use. They are all read-only.   Properties    type : the type of the rfx. This is either " rfa " or " rfb ".  supports : the number of supports in the RfX. nil if the supports could not be processed.  opposes : the number of opposes in the RfX. nil if the opposes could not be processed.  neutrals : the number of neutrals in the RfX. nil if the neutrals could not be processed.  percent : the support percentage. Calculated by     supports   supports  +  opposes    Ã—  100        supports    supports  opposes    100    \frac{\text{supports}}{\text{supports}+\text{opposes}}\times 100   and rounded to the nearest integer. nil if it could not be processed.  endTime : the end time of the RfX. This is a string value taken from the RfX page. nil if it could not be found.  user : the username of the RfX candidate. nil if it could not be found.    Methods   Methods must be called with the colon syntax:  local titleObject = exampleRfa:getTitleObject ()   getTitleObject() : gets the title object for the RfX page. See the reference manual for details on how to use title objects.  getSupportUsers() : gets an array containing the usernames that supported the RfX. If any usernames could not be processed, the text "Error parsing signature" is used instead, along with the text of the comment in question. N.b. this technique relies on the text of comment text being unique - if it is not unique then dupesExist() will treat the identical comments as duplicate votes. If the page content could not be parsed at all, this method returns nil .  getOpposeUsers() : gets an array containing the usernames that opposed the RfX. Functions similarly to getSupportUsers() .  getNeutralUsers() : gets an array containing the usernames that were neutral at the RfX. Functions similarly to getSupportUsers() .  dupesExist() : returns a boolean indicating whether there were any duplicate votes at the RfX. Returns nil if the vote tables couldn't be processed.  getSecondsLeft() : returns the number of seconds left before the RfX is due to close. Once it is due to close, shows zero. If the ending time cannot be found, returns nil .  getTimeLeft() : returns a string showing the time left before the RfX is due to close. The string is in the format " x days, y hours ".  getReport() : returns a URI object for X!'s RfA Analysis tool at Wikimedia Labs, preloaded with the RfX page.  getStatus() : returns a string showing the current status of the RfX. This can be "successful", "unsuccessful", "open", or "pending closure". Returns nil if the status could not be determined.   You can compare rfx objects with the == operator. This will return true only if the two objects point to the same page. tostring( rfx ) will return prefixedTitle from the RfX page's title object (see the reference manual ).  Expensive functions  This module makes use of the title:getContent method to fetch RfX page sources. This method will be called for each RfX page being looked up, so each use of rfx.new will count as an expensive function call . Please be aware that the library may fail for scripts which create many different RfX objects. (The current limit for the English Wikipedia is 500 expensive function calls per page.) Also, each RfX page that is looked up will count as a transclusion in Special:WhatLinksHere ."  