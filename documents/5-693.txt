   Linear complementarity problem      Linear complementarity problem   In mathematical optimization theory , the linear complementarity problem (LCP) arises frequently in computational mechanics and encompasses the well-known quadratic programming as a special case. It was proposed by Cottle and Dantzig   Formulation  Given a real matrix M and vector q , the linear complementarity problem seeks vectors z and w which satisfy the following constraints:       w  =    M  z   +   q        w      M  z   q     {w}={Mz}+{q}\,          w  ≥  0   ,   z  ≥   0       formulae-sequence    w  0     z  0     {w}\geq 0,{z}\geq 0\,   (that is, each component of these two vectors is non-negative)        w  i    z  i    =   0          subscript  w  i    subscript  z  i    0    {w}_{i}{z}_{i}=0\,   for all i. (The complementarity condition)   A sufficient condition for existence and uniqueness of a solution to this problem is that M be symmetric  positive-definite .  The vector    w    w   {w}\,   is a slack variable , 1 and so is generally discarded after    z    z   {z}\,   is found. As such, the problem can also be formulated as:         M  z   +  q   ≥   0           M  z   q   0    {Mz}+{q}\geq{0}\,         z  ≥   0       z  0    {z}\geq{0}\,           z  T    (    M  z   +  q   )    =   0          superscript  z  normal-T       M  z   q    0    {z}^{\mathrm{T}}({Mz}+{q})=0\,   (the complementarity condition)   Convex quadratic-minimization: Minimum conditions  Finding a solution to the linear complementarity problem is associated with minimizing the quadratic function       f   (  z  )    =    z  T    (    M  z   +  q   )          f  z      superscript  z  normal-T       M  z   q      f({z})={z}^{\mathrm{T}}({Mz}+{q})\,     subject to the constraints        M  z   +  q   ≥   0           M  z   q   0    {Mz}+{q}\geq{0}\,         z  ≥   0       z  0    {z}\geq{0}\,     These constraints ensure that f is always non-negative. The minimum of f is 0 at z if and only if z solves the linear complementarity problem.  If M is positive definite , any algorithm for solving (strictly) convex QPs can solve the LCP. Specially designed basis-exchange pivoting algorithms, such as Lemke's algorithm and a variant of the simplex algorithm of Dantzig have been used for decades. Besides having polynomial time complexity, interior-point methods are also effective in practice.  Also, a quadratic-programming problem stated as minimize     f   (  x  )    =     c  T   x   +    1  2    x  T   Q   x           f  x        superscript  c  T   x       1  2    superscript  x  T   Q  x      f({x})={c}^{T}{x}+\frac{1}{2}{x}^{T}{Qx}\,   subject to     A  x   ≥   b         A  x   b    {Ax}\geq{b}\,   as well as    x  ≥   0       x  0    {x}\geq{0}\,   with Q symmetric  is the same as solving the LCP with       q  =   [     c       -  b      ]       q   delimited-[]    c      b        {q}=\left[\begin{array}[]{c}{c}\\
 -{b}\end{array}\right]\,         M  =   [     Q     -   A  T        A    0     ]       M   delimited-[]    Q     superscript  A  T      A  0       {M}=\left[\begin{array}[]{cc}{Q}&-{A}^{T}\\
 {A}&0\end{array}\right]\,      This is because the Karush–Kuhn–Tucker conditions of the QP problem can be written as:       v  =     Q  x   -    A  T   λ    +   c        v        Q  x      superscript  A  T   λ    c     {v}={Q}{x}-{A}^{T}{\lambda}+{c}\,           s  =    A  x   -   b        s      A  x   b     {s}={A}{x}-{b}\,            x  ,  λ  ,  v  ,  s   ≥   0        x  λ  v  s   0    {x},{\lambda},{v},{s}\geq{0}\,              x  T   v   +    λ  T   s    =   0            superscript  x  T   v      superscript  λ  T   s    0    {x}^{T}{v}+{\lambda}^{T}{s}={0}\,      ...being    v    v   {v}\,   the Lagrange multipliers on the non-negativity constraints,    λ    λ   {\lambda}\,   the multipliers on the inequality constraints, and    s    s   {s}\,   the slack variables for the inequality constraints. The fourth condition derives from the complementarity of each group of variables (    x  ,   s      x  s    {x},{s}\,   ) with its set of KKT vectors (optimal Lagrange multipliers) being (    v  ,   λ      v  λ    {v},{\lambda}\,   ).  In that case,      z  =   [     x      λ     ]       z   delimited-[]    x    λ       {z}=\left[\begin{array}[]{c}{x}\\
 {\lambda}\end{array}\right]\,         w  =   [     v      s     ]       w   delimited-[]    v    s       {w}=\left[\begin{array}[]{c}{v}\\
 {s}\end{array}\right]\,     If the non-negativity constraint on the    x    x   {x}\,   is relaxed, the dimensionality of the LCP problem can be reduced to the number of the inequalities, as long as    Q    Q   {Q}\,   is non-singular (which is guaranteed if it is positive definite ). The multipliers    v    v   {v}\,   are no longer present, and the first KKT conditions can be rewritten as:        Q  x   =     A  T   λ   -   c          Q  x        superscript  A  T   λ   c     {Q}{x}={A}^{T}{\lambda}-{c}\,      or:      x  =    Q   -  1     (     A  T   λ   -  c   )        x     superscript  Q    1         superscript  A  T   λ   c      {x}={Q}^{-1}({A}^{T}{\lambda}-{c})\,     pre-multiplying the two sides by    A    A   {A}\,   and subtracting    b    b   {b}\,   we obtain:        A  x   -  b   =    A   Q   -  1     (     A  T   λ   -  c   )    -   b            A  x   b       A   superscript  Q    1         superscript  A  T   λ   c    b     {A}{x}-{b}={A}{Q}^{-1}({A}^{T}{\lambda}-{c})-{b}\,     The left side, due to the second KKT condition, is    s    s   {s}\,   . Substituting and reordering:      s  =     (   A   Q   -  1     A  T    )   λ   +   (    -   A   Q   -  1    c    -  b   )        s        A   superscript  Q    1     superscript  A  T    λ         A   superscript  Q    1    c    b      {s}=({A}{Q}^{-1}{A}^{T}){\lambda}+(-{A}{Q}^{-1}{c}-{b})\,     Calling now     M     =    def      (   A   Q   -  1     A  T    )       M    def  absent       A   superscript  Q    1     superscript  A  T      {M}\,\overset{\underset{\mathrm{def}}{}}{=}\,({A}{Q}^{-1}{A}^{T})\,   and     q     =    def      (    -   A   Q   -  1    c    -  b   )       q    def  absent           A   superscript  Q    1    c    b     {q}\,\overset{\underset{\mathrm{def}}{}}{=}\,(-{A}{Q}^{-1}{c}-{b})\,   we have an LCP, due to the relation of complementarity between the slack variables    s    s   {s}\,   and their Lagrange multipliers    λ    λ   {\lambda}\,   . Once we solve it, we may obtain the value of    x    x   {x}\,   from    λ    λ   {\lambda}\,   through the first KKT condition.  Finally, it is also possible to handle additional equality constraints:        A   e  q    x   =    b   e  q            subscript  A    e  q    x    subscript  b    e  q      {A}_{eq}{x}={b}_{eq}\,     This introduces a vector of Lagrange multipliers    μ    μ   {\mu}\,   , with the same dimension as     b   e  q       subscript  b    e  q     {b}_{eq}\,   .  It is easy to verify that the    M    M   {M}\,   and    q    q   {q}\,   for the LCP system    s  =    M  λ   +   q        s      M  λ   q     {s}={M}{\lambda}+{q}\,   are now expressed as:       M     =    def      (    [     A    0     ]     [     Q     A   e  q   T        -   A   e  q       0     ]    -  1     [      A  T        0      ]    )       M    def  absent        delimited-[]    A  0      superscript   delimited-[]    Q   superscript   subscript  A    e  q    T        subscript  A    e  q     0       1     delimited-[]     superscript  A  T    missing-subexpression     0   missing-subexpression         {M}~{}\overset{\underset{\mathrm{def}}{}}{=}~{}\left(\left[\begin{array}[]{cc}%
 {A}&{0}\end{array}\right]\left[\begin{array}[]{cc}{Q}&{A}_{eq}^{T}\\
 -{A}_{eq}&{0}\end{array}\right]^{-1}\left[\begin{array}[]{cc}{A}^{T}\\
 {0}\end{array}\right]\right)\,          q     =    def      (    -    [     A    0     ]     [     Q     A   e  q   T        -   A   e  q       0     ]    -  1     [     c       b   e  q       ]     -  b   )       q    def  absent            delimited-[]    A  0      superscript   delimited-[]    Q   superscript   subscript  A    e  q    T        subscript  A    e  q     0       1     delimited-[]    c     subscript  b    e  q         b     {q}~{}\overset{\underset{\mathrm{def}}{}}{=}~{}\left(-\left[\begin{array}[]{cc%
 }{A}&{0}\end{array}\right]\left[\begin{array}[]{cc}{Q}&{A}_{eq}^{T}\\
 -{A}_{eq}&{0}\end{array}\right]^{-1}\left[\begin{array}[]{c}{c}\\
 {b}_{eq}\end{array}\right]-{b}\right)\,     From    λ    λ   {\lambda}\,   we can now recover the values of both    x    x   {x}\,   and the Lagrange multiplier of equalities    μ    μ   {\mu}\,   :       [     x      μ     ]   =     [     Q     A   e  q   T        -   A   e  q       0     ]    -  1     [        A  T   λ   -  c        -   b   e  q        ]         delimited-[]    x    μ        superscript   delimited-[]    Q   superscript   subscript  A    e  q    T        subscript  A    e  q     0       1     delimited-[]         superscript  A  T   λ   c        subscript  b    e  q           \left[\begin{array}[]{c}{x}\\
 {\mu}\end{array}\right]=\left[\begin{array}[]{cc}{Q}&{A}_{eq}^{T}\\
 -{A}_{eq}&{0}\end{array}\right]^{-1}\left[\begin{array}[]{c}{A}^{T}{\lambda}-{%
 c}\\
 -{b}_{eq}\end{array}\right]\,     In fact, most QP solvers work on the LCP formulation, including the interior point method , principal / complementarity pivoting, and active set methods. 2 3 LCP problems can be solved also by the criss-cross algorithm , 4 5 6 7 conversely, for linear complementarity problems, the criss-cross algorithm terminates finitely only if the matrix is a sufficient matrix. 8 9 A sufficient matrix is a generalization both of a positive-definite matrix and of a P-matrix , whose principal minors are each positive. 10 11 12 Such LCPs can be solved when they are formulated abstractly using oriented-matroid theory. 13 14 15  See also   Complementarity theory  Physics engine Impulse/constraint type physics engines for games use this approach.  Contact dynamics Contact dynamics with the nonsmooth approach   Notes  References            Further reading   R. W. Cottle and G. B. Dantzig . Complementary pivot theory of mathematical programming. Linear Algebra and its Applications , 1:103-125, 1968.    External links   LCPSolve — A simple procedure in GAUSS to solve a linear complementarity problem  LCPSolve.py — A Python/NumPy implementation of LCPSolve is part of OpenOpt since its release 0.32  Siconos /Numerics open-source GPL implementation in C of Lemke's algorithm and other methods to solve LCPs and MLCPs   "  Category:Linear algebra  Category:Mathematical optimization     . ↩  ↩  ↩  ↩  ↩  ↩  ↩      ↩  ↩  : ↩  ↩     