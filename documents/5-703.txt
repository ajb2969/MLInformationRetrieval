   Kraft's inequality      Kraft's inequality   In coding theory , Kraft's inequality , named after Leon Kraft , gives a sufficient condition for the existence of a prefix code 1 and necessary condition for the existence of a uniquely decodable code for a given set of codeword lengths. Its applications to prefix codes and trees often find use in computer science and information theory .  More specifically, Kraft's inequality limits the lengths of codewords in a prefix code : if one takes an exponential of the length of each valid codeword, the resulting set of values must look like a probability mass function , that is, it must have total measure less than or equal to one. Kraft's inequality can be thought of in terms of a constrained budget to be spent on codewords, with shorter codewords being more expensive.   If Kraft's inequality holds with strict inequality, the code has some redundancy .  If Kraft's inequality holds with equality, the code in question is a complete code.  If Kraft's inequality does not hold, the code is not uniquely decodable .   Kraft's inequality was published by . However, Kraft's paper discusses only prefix codes, and attributes the analysis leading to the inequality to Raymond Redheffer . The inequality is sometimes also called the Kraft–McMillan theorem after the independent discovery of the result by ; McMillan proves the result for the general case of uniquely decodable codes, and attributes the version for prefix codes to a spoken observation in 1955 by Joseph Leo Doob .  Examples  Binary trees  (Figure)  9, 14, 19, 67 and 76 are leaf nodes at depths of 3, 3, 3, 3 and 2, respectively.   Any binary tree can be viewed as defining a prefix code for the leaves of the tree. Kraft's inequality states that        ∑   ℓ  ∈  leaves     2   -   depth   (  ℓ  )       ≤  1.        subscript     normal-ℓ  leaves     superscript  2      depth  normal-ℓ      1.    \sum_{\ell\in\mathrm{leaves}}2^{-\mathrm{depth}(\ell)}\leq 1.     Here the sum is taken over the leaves of the tree, i.e. the nodes without any children. The depth is the distance to the root node. In the tree to the right, this sum is        1  4   +   4   (   1  8   )     =   3  4   ≤  1.            1  4     4    1  8       3  4        1.     \frac{1}{4}+4\left(\frac{1}{8}\right)=\frac{3}{4}\leq 1.     Chaitin's constant  In algorithmic information theory , Chaitin's constant is defined as       Ω  =    ∑   p  ∈  P     2   -   |  p  |       .      normal-Ω    subscript     p  P     superscript  2      p        \Omega=\sum_{p\in P}2^{-|p|}.     This is an infinite sum , which has one summand for every syntactically correct program that halts. | p | stands for the length of the bit string of p . The programs are required to be prefix-free in the sense that no summand has a prefix representing a syntactically valid program that halts. Hence the bit strings are prefix codes, and Kraft's inequality gives that    Ω  ≤  1      normal-Ω  1    \Omega\leq 1   .  Formal statement  Let each source symbol from the alphabet      S  =   {   s  1   ,   s  2   ,  …  ,    s  n    }       S    subscript  s  1    subscript  s  2   normal-…   subscript  s  n      S=\{\,s_{1},s_{2},\ldots,s_{n}\,\}\,     be encoded into a uniquely decodable code over an alphabet of size   r   r   r   with codeword lengths        ℓ  1   ,   ℓ  2   ,  …  ,   ℓ  n    .      subscript  normal-ℓ  1    subscript  normal-ℓ  2   normal-…   subscript  normal-ℓ  n     \ell_{1},\ell_{2},\ldots,\ell_{n}.\,     Then        ∑   i  =  1   n     (   1  r   )    ℓ  i     ≤  1.        superscript   subscript     i  1    n    superscript    1  r    subscript  normal-ℓ  i     1.    \sum_{i=1}^{n}\left(\frac{1}{r}\right)^{\ell_{i}}\leq 1.     Conversely, for a given set of natural numbers     ℓ  1   ,   ℓ  2   ,  …  ,    ℓ  n        subscript  normal-ℓ  1    subscript  normal-ℓ  2   normal-…   subscript  normal-ℓ  n     \ell_{1},\ell_{2},\ldots,\ell_{n}\,   satisfying the above inequality, there exists a uniquely decodable code over an alphabet of size   r   r   r   with those codeword lengths.  A commonly occurring special case of a uniquely decodable code is a prefix code . Kraft's inequality therefore also holds for any prefix code .  Proof  Proof for prefix codes  upright=1.5|thumb|Example for binary tree. Red nodes represent a prefix tree. The method for calculating the number of descendant leaf nodes in the full tree is shown. Suppose that     ℓ  1   ≤   ℓ  2   ≤  …  ≤   ℓ  n          subscript  normal-ℓ  1    subscript  normal-ℓ  2        normal-…        subscript  normal-ℓ  n      \ell_{1}\leq\ell_{2}\leq...\leq\ell_{n}   . Let   A   A   A   be the full   r   r   r   -ary tree of depth    ℓ  n     subscript  normal-ℓ  n    \ell_{n}   . Every word of length    ℓ  ≤   ℓ  n       normal-ℓ   subscript  normal-ℓ  n     \ell\leq\ell_{n}   over an   r   r   r   -ary alphabet corresponds to a node in this tree at depth   ℓ   normal-ℓ   \ell   . The   i   i   i   th word in the prefix code corresponds to a node    v  i     subscript  v  i    v_{i}   ; let    A  i     subscript  A  i    A_{i}   be the set of all leaf nodes in the subtree of   A   A   A   rooted at    v  i     subscript  v  i    v_{i}   . Clearly        |   A  i   |   =   r    ℓ  n   -   ℓ  i      .         subscript  A  i     superscript  r     subscript  normal-ℓ  n    subscript  normal-ℓ  i       |A_{i}|=r^{\ell_{n}-\ell_{i}}.   Since the code is a prefix code,         A  i   ∩   A  j    =  ∅   ,   i  ≠  j      formulae-sequence       subscript  A  i    subscript  A  j        i  j     A_{i}\cap A_{j}=\varnothing,\quad i\neq j   .  Thus, given that the total number of nodes at depth    ℓ  n     subscript  normal-ℓ  n    \ell_{n}   is    r   ℓ  n      superscript  r   subscript  normal-ℓ  n     r^{\ell_{n}}   ,       |    ⋃   i  =  1   n    A  i    |   =    ∑   i  =  1   n    r    ℓ  n   -   ℓ  i      ≤   r   ℓ  n              superscript   subscript     i  1    n    subscript  A  i       superscript   subscript     i  1    n    superscript  r     subscript  normal-ℓ  n    subscript  normal-ℓ  i            superscript  r   subscript  normal-ℓ  n       |\bigcup_{i=1}^{n}A_{i}|=\sum_{i=1}^{n}r^{\ell_{n}-\ell_{i}}\leq r^{\ell_{n}}     from which the result follows.  Conversely, given any ordered sequence of   n   n   n   natural numbers,       ℓ  1   ≤   ℓ  2   ≤  …  ≤   ℓ  n          subscript  normal-ℓ  1    subscript  normal-ℓ  2        normal-…        subscript  normal-ℓ  n      \ell_{1}\leq\ell_{2}\leq\dots\leq\ell_{n}     satisfying the Kraft inequality, one can construct a prefix code with codeword lengths equal to    ℓ  i     subscript  normal-ℓ  i    \ell_{i}   by pruning subtrees from a full   r   r   r   -ary tree of depth    ℓ  n     subscript  normal-ℓ  n    \ell_{n}   . First choose any node from the full tree at depth    ℓ  1     subscript  normal-ℓ  1    \ell_{1}   and remove all of its descendants. This removes    r   -   ℓ  1       superscript  r     subscript  normal-ℓ  1      r^{-\ell_{1}}   fraction of the nodes from the full tree from being considered for the rest of the remaining codewords. The next iteration removes    r   -   ℓ  2       superscript  r     subscript  normal-ℓ  2      r^{-\ell_{2}}   fraction of the full tree for total of     r   -   ℓ  1     +   r   -   ℓ  2          superscript  r     subscript  normal-ℓ  1      superscript  r     subscript  normal-ℓ  2       r^{-\ell_{1}}+r^{-\ell_{2}}   . After   m   m   m   iterations,       ∑   i  =  1   m    r   -   ℓ  i         superscript   subscript     i  1    m    superscript  r     subscript  normal-ℓ  i       \sum_{i=1}^{m}r^{-\ell_{i}}     fraction of the full tree nodes are removed from consideration for any remaining codewords. But, by the assumption, this sum is less than 1 for all   n   n   n   can be constructed for all     ∑   r   -   l  i      =   ∑   P   (   E  i   )     =   P   (   ∪   E  i    )    ≤  1.           superscript  r      l  i          P   subscript  E  i            P     subscript  E  i          1.     \sum r^{-li}=\sum P(E_{i})=P(\cup E_{i})\leq 1.   source symbols.  Probabilistic Proof for prefix codes  Generate a sequence of symbols from the r character alphabet, independently and uniformly at random. Define E i to be the event that codeword i is a prefix of this sequence. Because we have a prefix code, these events are mutually exclusive. Therefore,       F   (  x  )    =    ∑   i  =  1   n    x   -   |   s  i   |      =    ∑   ℓ  =  min   max      p  ℓ     x   -  ℓ              F  x     superscript   subscript     i  1    n    superscript  x       subscript  s  i              superscript   subscript     normal-ℓ          subscript  p  normal-ℓ    superscript  x    normal-ℓ         F(x)=\sum_{i=1}^{n}x^{-|s_{i}|}=\sum_{\ell=\min}^{\max}p_{\ell}\,x^{-\ell}     The proof of the converse half of the result is given above.  Proof of the general case  Consider the generating function in inverse of x for the code S      p  ℓ     subscript  p  normal-ℓ    p_{\ell}     in which    x   -  ℓ      superscript  x    normal-ℓ     x^{-\ell}   —the coefficient in front of   ℓ   normal-ℓ   \ell   —is the number of distinct codewords of length     s   i  1     s   i  2    …   s   i  m         subscript  s   subscript  i  1     subscript  s   subscript  i  2    normal-…   subscript  s   subscript  i  m      s_{i_{1}}s_{i_{2}}\dots s_{i_{m}}   . Here min is the length of the shortest codeword in S , and max is the length of the longest codeword in S .  Consider all m -powers  S m , in the form of words     i  1   ,   i  2   ,  …  ,   i  m       subscript  i  1    subscript  i  2   normal-…   subscript  i  m     i_{1},i_{2},\dots,i_{m}   , where      s   i  1     s   i  2    …   s   i  m     =    s   j  1     s   j  2    …   s   j  m            subscript  s   subscript  i  1     subscript  s   subscript  i  2    normal-…   subscript  s   subscript  i  m        subscript  s   subscript  j  1     subscript  s   subscript  j  2    normal-…   subscript  s   subscript  j  m       s_{i_{1}}s_{i_{2}}\dots s_{i_{m}}=s_{j_{1}}s_{j_{2}}\dots s_{j_{m}}   are indices between 1 and n . Note that, since S was assumed to uniquely decodable,      i  1   =   j  1    ,     i  2   =    j  2   ,  …    ,    i  m   =   j  m        formulae-sequence     subscript  i  1    subscript  j  1     formulae-sequence     subscript  i  2     subscript  j  2   normal-…       subscript  i  m    subscript  j  m       i_{1}=j_{1},i_{2}=j_{2},\dots,i_{m}=j_{m}   implies    G   (  x  )       G  x    G(x)   . Because of this property, one can compute the generating function    S  m     superscript  S  m    S^{m}   for    F   (  x  )       F  x    F(x)   from the generating function     G   (  x  )    =    (   F   (  x  )    )   m   =    (    ∑   i  =  1   n    x   -   |   s  i   |      )   m   =           G  x    superscript    F  x   m         superscript    superscript   subscript     i  1    n    superscript  x       subscript  s  i       m        absent     G(x)=\left(F(x)\right)^{m}=\left(\sum_{i=1}^{n}x^{-|s_{i}|}\right)^{m}=   as       =    ∑    i  1   =  1   n     ∑    i  2   =  1   n    ⋯    ∑    i  m   =  1   n    x   -   (    |   s   i  1    |   +   |   s   i  2    |   +  ⋯  +   |   s   i  m    |    )         =         absent    superscript   subscript      subscript  i  1   1    n     superscript   subscript      subscript  i  2   1    n     normal-⋯    superscript   subscript      subscript  i  m   1    n    superscript  x         subscript  s   subscript  i  1        subscript  s   subscript  i  2     normal-⋯     subscript  s   subscript  i  m                 absent     =\sum_{i_{1}=1}^{n}\sum_{i_{2}=1}^{n}\cdots\sum_{i_{m}=1}^{n}x^{-\left(|s_{i_{%
 1}}|+|s_{i_{2}}|+\cdots+|s_{i_{m}}|\right)}=           =    ∑    i  1   =  1   n     ∑    i  2   =  1   n    ⋯    ∑    i  m   =  1   n    x   -   |    s   i  1     s   i  2    ⋯   s   i  m     |         =    ∑   ℓ  =   m  ⋅  min     m  ⋅  max       q  ℓ      x   -  ℓ        .        absent    superscript   subscript      subscript  i  1   1    n     superscript   subscript      subscript  i  2   1    n     normal-⋯    superscript   subscript      subscript  i  m   1    n    superscript  x         subscript  s   subscript  i  1     subscript  s   subscript  i  2    normal-⋯   subscript  s   subscript  i  m                   superscript   subscript     normal-ℓ   normal-⋅  m       normal-⋅  m        subscript  q  normal-ℓ    superscript  x    normal-ℓ         =\sum_{i_{1}=1}^{n}\sum_{i_{2}=1}^{n}\cdots\sum_{i_{m}=1}^{n}x^{-|s_{i_{1}}s_{%
 i_{2}}\cdots s_{i_{m}}|}=\sum_{\ell=m\cdot\min}^{m\cdot\max}q_{\ell}\,x^{-\ell%
 }\;.         q  ℓ     subscript  q  normal-ℓ    q_{\ell}     Here, similarly as before,    x   -  ℓ      superscript  x    normal-ℓ     x^{-\ell}   —the coefficient in front of    G   (  x  )       G  x    G(x)   in   ℓ   normal-ℓ   \ell   —is the number of words of length    S  m     superscript  S  m    S^{m}   in    q  ℓ     subscript  q  normal-ℓ    q_{\ell}   . Clearly,    r  ℓ     superscript  r  normal-ℓ    r^{\ell}   cannot exceed       (   F   (  x  )    )   m   ≤    ∑   ℓ  =   m  ⋅  min     m  ⋅  max       r  ℓ      x   -  ℓ        .       superscript    F  x   m     superscript   subscript     normal-ℓ   normal-⋅  m       normal-⋅  m        superscript  r  normal-ℓ    superscript  x    normal-ℓ        \left(F(x)\right)^{m}\leq\sum_{\ell=m\cdot\min}^{m\cdot\max}r^{\ell}\,x^{-\ell%
 }\;.   . Hence for any positive x        (   F   (  r  )    )   m   ≤    m  ⋅   (   max  -  min   )    +  1        superscript    F  r   m      normal-⋅  m        1     \left(F(r)\right)^{m}\leq m\cdot(\max-\min)+1     Substituting the value x = r we have     m   m   m   for any positive integer   m   m   m   . The left side of the inequality grows exponentially in   m   m   m   and the right side only linearly. The only possibility for the inequality to be valid for all     F   (  r  )    ≤  1        F  r   1    F(r)\leq 1   is that    F   (  x  )       F  x    F(x)   . Looking back on the definition of      ∑   i  =  1   n    r   -   ℓ  i      =    ∑   i  =  1   n    r   -   |   s  i   |      =   F   (  r  )    ≤  1 .          superscript   subscript     i  1    n    superscript  r     subscript  normal-ℓ  i        superscript   subscript     i  1    n    superscript  r       subscript  s  i              F  r        1 .     \sum_{i=1}^{n}r^{-\ell_{i}}=\sum_{i=1}^{n}r^{-|s_{i}|}=F(r)\leq 1\;.   we finally get the inequality.     n   n   n     Alternative construction for the converse  Given a sequence of     ℓ  1   ≤   ℓ  2   ≤  …  ≤   ℓ  n          subscript  normal-ℓ  1    subscript  normal-ℓ  2        normal-…        subscript  normal-ℓ  n      \ell_{1}\leq\ell_{2}\leq\dots\leq\ell_{n}   natural numbers,        ∑   j  =  1    i  -  1     r   -   l  j      .      superscript   subscript     j  1      i  1     superscript  r     subscript  l  j       \sum_{j=1}^{i-1}r^{-l_{j}}.     satisfying the Kraft inequality, we can construct a prefix code as follows. Define the i th codeword, C i , to be the first l i digits after the radix point (e.g. decimal point) in the base r representation of  $\sum_{j = 1}^{i - 1} r^{-l_j}.$  Note that by Kraft's inequality, this sum is never more than 1. Hence the codewords capture the entire value of the sum. Therefore, for j > i , the first l i digits of C j form a larger number than C i , so the code is prefix free.  See also Canonical Huffman code .  Notes  References    .     .   External links   Kraft's inequality (NIST)   "  Category:Coding theory  Category:Inequalities         