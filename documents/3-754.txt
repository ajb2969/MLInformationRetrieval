   Rewriting      Rewriting   In mathematics , computer science , and logic , rewriting covers a wide range of (potentially non-deterministic ) methods of replacing subterms of a formula with other terms. What is considered are rewriting systems (also known as rewrite systems or reduction systems ). In their most basic form, they consist of a set of objects, plus relations on how to transform those objects.  Rewriting can be non-deterministic . One rule to rewrite a term could be applied in many different ways to that term, or more than one rule could be applicable. Rewriting systems then do not provide an algorithm for changing one term to another, but a set of possible rule applications. When combined with an appropriate algorithm, however, rewrite systems can be viewed as computer programs , and several declarative programming languages are based on term rewriting.  Intuitive examples  Logic  In logic , the procedure for obtaining the conjunctive normal form (CNF) of a formula can be conveniently written as a rewriting system. The rules of such a system would be:       ¬  ¬  A   →  A     normal-→      A   A    \neg\neg A\to A   ( double negative elimination )       ¬   (   A  ∧  B   )    →    ¬  A   ∨   ¬  B       normal-→      A  B         A      B      \neg(A\land B)\to\neg A\lor\neg B   ( De Morgan's laws )       ¬   (   A  ∨  B   )    →    ¬  A   ∧   ¬  B       normal-→      A  B         A      B      \neg(A\lor B)\to\neg A\land\neg B           (   A  ∧  B   )   ∨  C   →    (   A  ∨  C   )   ∧   (   B  ∨  C   )       normal-→      A  B   C       A  C     B  C      (A\land B)\lor C\to(A\lor C)\land(B\lor C)   ( Distributivity )       A  ∨   (   B  ∧  C   )    →    (   A  ∨  B   )   ∧   (   A  ∨  C   )       normal-→    A    B  C        A  B     A  C      A\lor(B\land C)\to(A\lor B)\land(A\lor C)   , where the symbol (   →   normal-→   \to   ) indicates that an expression matching the left hand side of the rule can be rewritten to one formed by the right hand side. In this system, we can perform a rewrite from left to right only when the logical interpretation of the left hand side is equivalent to that of the right.  Linguistics  In linguistics , rewrite rules , also called phrase structure rules , are used in some systems of generative grammar , as a means of generating the grammatically correct sentences of a language. Such a rule typically takes the form A → X, where A is a syntactic category label, such as noun phrase or sentence , and X is a sequence of such labels and/or morphemes , expressing the fact that A can be replaced by X in generating the constituent structure of a sentence. For example, the rule S → NP VP means that a sentence can consist of a noun phrase followed by a verb phrase ; further rules will specify what sub-constituents a noun phrase and a verb phrase can consist of, and so on.  Abstract rewriting systems  From the above examples, it's clear that we can think of rewriting systems in an abstract manner. We need to specify a set of objects and the rules that can be applied to transform them. The most general (unidimensional) setting of this notion is called an abstract reduction system , (abbreviated ARS ), although more recently authors use abstract rewriting system as well. 1 (The preference for the word "reduction" here instead of "rewriting" constitutes a departure from the uniform use of "rewriting" in the names of systems that are particularizations of ARS. Because the word "reduction" does not appear in the names of more specialized systems, in older texts reduction system is a synonym for ARS). 2  An ARS is simply a set A , whose elements are usually called objects, together with a binary relation on A , traditionally denoted by →, and called the reduction relation , rewrite relation 3 or just reduction . 4 This (entrenched) terminology using "reduction" is a little misleading, because the relation is not necessarily reducing some measure of the objects; this will become more apparent when we discuss string rewriting systems further in this article.  Example 1 . Suppose the set of objects is T = { a , b , c } and the binary relation is given by the rules a → b , b → a , a → c , and b → c . Observe that these rules can be applied to both a and b in any fashion to get the term c . Such a property is clearly an important one. Note also, that c is, in a sense, a "simplest" term in the system, since nothing can be applied to c to transform it any further. This example leads us to define some important notions in the general setting of an ARS. First we need some basic notions and notations. 5       →  *     superscript  normal-→     \stackrel{*}{\rightarrow}   is the transitive closure of    →  ∪  =     normal-→      \rightarrow\cup=   , where = is the identity relation , i.e.    →  *     superscript  normal-→     \stackrel{*}{\rightarrow}   is the smallest preorder ( reflexive and transitive relation) containing   →   normal-→   \rightarrow   . It is also called the reflexive transitive closure of   →   normal-→   \rightarrow   .     ↔   normal-↔   \leftrightarrow   is    →  ∪   →   -  1       normal-→    superscript  normal-→    1      \rightarrow\cup\rightarrow^{-1}   , that is the union of the relation → with its inverse relation , also known as the symmetric closure of   →   normal-→   \rightarrow   .      ↔  *     superscript  normal-↔     \stackrel{*}{\leftrightarrow}   is the transitive closure of    ↔  ∪  =     normal-↔      \leftrightarrow\cup=   , that is    ↔  *     superscript  normal-↔     \stackrel{*}{\leftrightarrow}   is the smallest equivalence relation containing   →   normal-→   \rightarrow   . It is also known as the reflexive transitive symmetric closure of   →   normal-→   \rightarrow   .   Normal forms, joinability and the word problem  An object x in A is called reducible if there exists some other y in A such that    x  →  y     normal-→  x  y    x\rightarrow y   ; otherwise it is called irreducible or a normal form . An object y is called a normal form of x if    x   →  *   y      superscript  normal-→    x  y    x\stackrel{*}{\rightarrow}y   , and y is irreducible. If x has a unique normal form, then this is usually denoted with    x  ↓      normal-↓  x  absent    x\downarrow   . In example 1 above, c is a normal form, and    c  =  a  ↓  =  b  ↓     fragments  c   a  normal-↓   b  normal-↓    c=a\downarrow=b\downarrow   . If every object has at least one normal form, the ARS is called normalizing .  A related, but weaker notion than the existence of normal forms is that of two objects being joinable : x and y are said to be joinable if there exists some z with the property that    x   →  *   z   ←  *   y        superscript  normal-→    x  z     superscript  normal-←      y     x\stackrel{*}{\rightarrow}z\stackrel{*}{\leftarrow}y   . From this definition, it's apparent one may define the joinability relation as     →  *   ∘   ←  *       superscript  normal-→      superscript  normal-←      \stackrel{*}{\rightarrow}\circ\stackrel{*}{\leftarrow}   , where   ∘     \circ   is the composition of relations . Joinability is usually denoted, somewhat confusingly, also with   ↓   normal-↓   \downarrow   , but in this notation the down arrow is a binary relation, i.e. we write    ↓   x  ,  y      normal-↓  x  y    x\mathbin{\downarrow}y   if x and y are joinable.  One of the important problems that may be formulated in an ARS is the word problem : given x and y , are they equivalent under    ↔  *     superscript  normal-↔     \stackrel{*}{\leftrightarrow}   ? This is a very general setting for formulating the word problem for the presentation of an algebraic structure . For instance, the word problem for groups is a particular case of an ARS word problem. Central to an "easy" solution for the word problem is the existence of unique normal forms: in this case if two objects have the same normal form, then they are equivalent under    ↔  *     superscript  normal-↔     \stackrel{*}{\leftrightarrow}   . The word problem for an ARS is undecidable in general.  The Church–Rosser property and confluence  An ARS is said to possess the Church–Rosser property if and only if    x   ↔  *   y      superscript  normal-↔    x  y    x\stackrel{*}{\leftrightarrow}y   implies    ↓   x  ,  y      normal-↓  x  y    x\mathbin{\downarrow}y   . In words, the Church–Rosser property means that any two equivalent objects are joinable. Alonzo Church and J. Barkley Rosser proved in 1936 that lambda calculus has this property; 6 hence the name of the property. 7 (The fact that lambda calculus has this property is also known as the Church–Rosser theorem .) In an ARS with the Church–Rosser property the word problem may be reduced to the search for a common successor. In a Church–Rosser system, an object has at most one normal form; that is the normal form of an object is unique if it exists, but it may well not exist.  Several different properties are equivalent to the Church–Rosser property, but may be simpler to check in some particular setting. In particular, confluence is equivalent to Church–Rosser. An ARS    (  A  ,  →  )     A  normal-→    (A,\rightarrow)   is said:   confluent if for all w , x , and y in A ,    x   ←  *   w   →  *   y        superscript  normal-←    x  w     superscript  normal-→      y     x\stackrel{*}{\leftarrow}w\stackrel{*}{\rightarrow}y   implies    ↓   x  ,  y      normal-↓  x  y    x\mathbin{\downarrow}y   . Roughly speaking, confluence says that no matter how two paths diverge from a common ancestor ( w ), the paths are joining at some common successor. This notion may be refined as property of a particular object w , and the system called confluent if all its elements are confluent.  locally confluent if for all w , x , and y in A ,    x  ←  w  →  y       normal-←  x  w    normal-→    y     x\leftarrow w\rightarrow y   implies    ↓   x  ,  y      normal-↓  x  y    x\mathbin{\downarrow}y   . This property is sometimes called weak confluence .   Theorem. For an ARS the following conditions are equivalent: (i) it has the Church–Rosser property, (ii) it is confluent. 8  Corollary . 9 In a confluent ARS if    x   ↔  *   y      superscript  normal-↔    x  y    x\stackrel{*}{\leftrightarrow}y   then   If both x and y are normal forms, then x = y .  If y is a normal form, then    x   →  *   y      superscript  normal-→    x  y    x\stackrel{*}{\rightarrow}y      Because of these equivalences, a fair bit of variation in definitions is encountered in the literature. For instance, in Bezem et al. 2003 the Church–Rosser property and confluence are defined to be synonymous and identical to the definition of confluence presented here; Church–Rosser as defined here remains unnamed, but is given as an equivalent property; this departure from other texts is deliberate. 10 Because of the above corollary, in a confluent ARS one may define a normal form y of x as an irreducible y with the property that    x   ↔  *   y      superscript  normal-↔    x  y    x\stackrel{*}{\leftrightarrow}y   . This definition, found in Book and Otto, is equivalent to common one given here in a confluent system, but it is more inclusive 11 more in a non-confluent ARS.  Local confluence on the other hand is not equivalent with the other notions of confluence given in this section, but it is strictly weaker than confluence. The relation     a  →  b   ,    b  →  a   ,    a  →  c   ,   b  →  d        formulae-sequence   normal-→  a  b    formulae-sequence   normal-→  b  a    formulae-sequence   normal-→  a  c    normal-→  b  d       a\rightarrow b,\;b\rightarrow a,\;a\rightarrow c,\;b\rightarrow d   is locally confluent, but not confluent, as   c   c   c   and   d   d   d   are equivalent, but not joinable. 12  Termination and convergence  An abstract rewriting system is said to be terminating or noetherian if there is no infinite chain     x  0   →   x  1   →   x  2   →  ⋯       normal-→   subscript  x  0    subscript  x  1     normal-→     subscript  x  2     normal-→    normal-⋯     x_{0}\rightarrow x_{1}\rightarrow x_{2}\rightarrow\cdots   . In a terminating ARS, every object has at least one normal form, thus it is normalizing. The converse is not true. In example 1 for instance, there is an infinite rewriting chain, namely    a  →  b  →  a  →  b  →  ⋯       normal-→  a  b    normal-→    a    normal-→    b    normal-→    normal-⋯     a\rightarrow b\rightarrow a\rightarrow b\rightarrow\cdots   , even though the system is normalizing. A confluent and terminating ARS is called convergent . In a convergent ARS, every object has a unique normal form.  Theorem ( Newman's Lemma ): A terminating ARS is confluent if and only if it is locally confluent.  String rewriting systems  A string rewriting system (SRS), also known as semi-Thue system , exploits the free monoid structure of the strings (words) over an alphabet to extend a rewriting relation,   R   R   R   to all strings in the alphabet that contain left- and respectively right-hand sides of some rules as substrings . Formally a semi-Thue systems is a tuple     (  Σ  ,  R  )     normal-Σ  R    (\Sigma,R)   where   Σ   normal-Σ   \Sigma   is a (usually finite) alphabet, and   R   R   R   is a binary relation between some (fixed) strings in the alphabet, called rewrite rules . The one-step rewriting relation relation    →  R     subscript  normal-→  R    \rightarrow_{R}   induced by   R   R   R   on    Σ  *     superscript  normal-Σ     \Sigma^{*}   is defined as: for any strings   s   s   s   and   t   t   t   in    Σ  *     superscript  normal-Σ     \Sigma^{*}       s   →  R   t      subscript  normal-→  R   s  t    s\rightarrow_{R}t   if and only if there exist   x   x   x   ,   y   y   y   ,   u   u   u   ,   v   v   v   in    Σ  *     superscript  normal-Σ     \Sigma^{*}   such that    s  =   x  u  y       s    x  u  y     s=xuy   ,    t  =   x  v  y       t    x  v  y     t=xvy   , and    u  R  v      u  R  v    uRv   . Since    →  R     subscript  normal-→  R    \rightarrow_{R}   is a relation on    Σ  *     superscript  normal-Σ     \Sigma^{*}   , the pair    (   Σ  *   ,   →  R   )      superscript  normal-Σ     subscript  normal-→  R     (\Sigma^{*},\rightarrow_{R})   fits the definition of an abstract rewriting system. Obviously   R   R   R   is subset of    →  R     subscript  normal-→  R    \rightarrow_{R}   . If the relation   R   R   R   is symmetric , then the system is called a Thue system .  In a SRS, the reduction relation      →  *   R     subscript   superscript  normal-→    R    \stackrel{*}{\rightarrow}_{R}   is compatible with the monoid operation, meaning that    x    →  *   R   y      subscript   superscript  normal-→    R   x  y    x\stackrel{*}{\rightarrow}_{R}y   implies     u  x  v     →  *   R    u  y  v       subscript   superscript  normal-→    R     u  x  v     u  y  v     uxv\stackrel{*}{\rightarrow}_{R}uyv   for all strings   x   x   x   ,   y   y   y   ,   u   u   u   ,   v   v   v   in    Σ  *     superscript  normal-Σ     \Sigma^{*}   . Similarly, the reflexive transitive symmetric closure of    →  R     subscript  normal-→  R    \rightarrow_{R}   , denoted     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   , is a congruence , meaning it is an equivalence relation (by definition) and it is also compatible with string concatenation. The relation     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   is called the Thue congruence generated by   R   R   R   . In a Thue system, i.e. if   R   R   R   is symmetric, the rewrite relation     →  *   R     subscript   superscript  normal-→    R    \stackrel{*}{\rightarrow}_{R}   coincides with the Thue congruence     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   .  The notion of a semi-Thue system essentially coincides with the presentation of a monoid . Since     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   is a congruence, we can define the factor monoid      ℳ  R   =   Σ  *   /    ↔  *   R      fragments   subscript  ℳ  R     superscript  normal-Σ      subscript   superscript  normal-↔    R     \mathcal{M}_{R}=\Sigma^{*}/\stackrel{*}{\leftrightarrow}_{R}   of the free monoid    Σ  *     superscript  normal-Σ     \Sigma^{*}   by the Thue congruence in the usual manner . If a monoid   ℳ   ℳ   \mathcal{M}   is isomorphic with    ℳ  R     subscript  ℳ  R    \mathcal{M}_{R}   , then the semi-Thue system    (  Σ  ,  R  )     normal-Σ  R    (\Sigma,R)   is called a monoid presentation of   ℳ   ℳ   \mathcal{M}   .  We immediately get some very useful connections with other areas of algebra. For example, the alphabet { a , b } with the rules { ab → ε, ba → ε }, where ε is the empty string , is a presentation of the free group on one generator. If instead the rules are just { ab → ε }, then we obtain a presentation of the bicyclic monoid . Thus semi-Thue systems constitute a natural framework for solving the word problem for monoids and groups. In fact, every monoid has a presentation of the form    (  Σ  ,  R  )     normal-Σ  R    (\Sigma,R)   , i.e. it may be always be presented by a semi-Thue system, possibly over an infinite alphabet.  The word problem for a semi-Thue system is undecidable in general; this result is sometimes known as the Post-Markov theorem . 13  Term rewriting systems  A term rewriting system (TRS) is a rewriting system where the objects are terms , or expressions with nested sub-expressions. For example, the system shown under Logic above is a term rewriting system. The terms in this system are composed of binary operators    (  ∨  )      (\vee)   and    (  ∧  )      (\wedge)   and the unary operator    (  ¬  )      (\neg)   . Also present in the rules are variables , these each represent any possible term (though a single variable always represents the same term throughout a single rule).  In contrast to string rewriting systems, whose objects are flat sequences of symbols, the objects a term rewriting system works on, i.e. the terms, form a term algebra . A term can be visualized as a tree of symbols, the set of admitted symbols being fixed by a given signature .  Formal definition  A term rewriting rule is a pair of terms, commonly written as    l  ⟶  r     normal-⟶  l  r    l\longrightarrow r   , to indicate that the left hand side   l   l   l   can be replaced by the right hand side   r   r   r   . A term rewriting system is a set   R   R   R   of such rules. A rule    l  ⟶  r     normal-⟶  l  r    l\longrightarrow r   can be applied to a term   s   s   s   if the left term   l   l   l    matches some subterm of   s   s   s   , that is, if      s  |   p   =   l  σ        evaluated-at  s  p     l  σ     s\mid_{p}=l\sigma    14 for some position    p   p   p   in   s   s   s   and some substitution    σ   σ   \sigma   . The result term   t   t   t   of this rule application is then obtained as    t  =   s    [   r  σ   ]   p        t    s   subscript   delimited-[]    r  σ    p      t=s[r\sigma]_{p}   ; 15 see picture 1. In this case,   s   s   s   is said to be rewritten in one step , or rewritten directly , to   t   t   t   by the system   R   R   R   , formally denoted as    s   ⟶  R   t      subscript  normal-⟶  R   s  t    s\longrightarrow_{R}t   , or as    s   ⟶  R   t      superscript  normal-⟶  R   s  t    s\stackrel{R}{\longrightarrow}t   by some authors. If a term    t  1     subscript  t  1    t_{1}   can be rewritten in several steps into a term    t  n     subscript  t  n    t_{n}   , that is, if     t  1    ⟶  R    t  2    ⟶  R   …   ⟶  R    t  n         subscript  normal-⟶  R    subscript  t  1    subscript  t  2      subscript  normal-⟶  R     normal-…     subscript  normal-⟶  R      subscript  t  n      t_{1}\longrightarrow_{R}t_{2}\longrightarrow_{R}\ldots\longrightarrow_{R}t_{n}   , the term    t  1     subscript  t  1    t_{1}   is said to be rewritten to    t  n     subscript  t  n    t_{n}   , formally denoted as     t  1    ⟶  R  +    t  n       superscript   subscript  normal-⟶  R      subscript  t  1    subscript  t  n     t_{1}\longrightarrow_{R}^{+}t_{n}   . In other words, the relation    ⟶  R  +     superscript   subscript  normal-⟶  R      \longrightarrow_{R}^{+}   is the transitive closure of the relation    ⟶  R     subscript  normal-⟶  R    \longrightarrow_{R}   ; often, also the notation    ⟶  R  *     superscript   subscript  normal-⟶  R      \longrightarrow_{R}^{*}   is used to denote the reflexive-transitive closure of    ⟶  R     subscript  normal-⟶  R    \longrightarrow_{R}   , that is,    s   ⟶  R  *   t      superscript   subscript  normal-⟶  R     s  t    s\longrightarrow_{R}^{*}t   if    s  =  t      s  t    s=t   or    s   ⟶  R  +   t      superscript   subscript  normal-⟶  R     s  t    s\longrightarrow_{R}^{+}t   . 16 A term rewriting given by a set   R   R   R   of rules can be viewed as an abstract rewriting system as defined above , with terms as its objects and    ⟶  R     subscript  normal-⟶  R    \longrightarrow_{R}   as its rewrite relation.  For example,     x  *   (   y  *  z   )    ⟶    (   x  *  y   )   *  z      normal-⟶    x    y  z        x  y   z     x*(y*z)\longrightarrow(x*y)*z   is a rewrite rule, commonly used to establish a normal form with respect to the associativity of   *     *   . That rule can be applied at the numerator in the term     a  *   (    (   a  +  1   )   *   (   a  +  2   )    )     1  *   (   2  *  3   )          a      a  1     a  2       1    2  3      \frac{a*((a+1)*(a+2))}{1*(2*3)}   with the matching substitution    {    x  ↦  a   ,    y  ↦   a  +  1    ,   z  ↦   a  +  2      }      formulae-sequence   maps-to  x  a    formulae-sequence   maps-to  y    a  1     maps-to  z    a  2        \{x\mapsto a,\;y\mapsto a+1,\;z\mapsto a+2\}   , see picture 2. 17 Applying that substitution to the rule's right hand side yields the term     (   a  *   (   a  +  1   )    )   *   (   a  +  2   )         a    a  1      a  2     (a*(a+1))*(a+2)   , and replacing the numerator by that term yields      (   a  *   (   a  +  1   )    )   *   (   a  +  2   )     1  *   (   2  *  3   )            a    a  1      a  2      1    2  3      \frac{(a*(a+1))*(a+2)}{1*(2*3)}   , which is the result term of applying the rewrite rule. Altogether, applying the rewrite rule has achieved what is called " applying the associativity law for   *     *   to     a  *   (    (   a  +  1   )   *   (   a  +  2   )    )     1  *   (   2  *  3   )          a      a  1     a  2       1    2  3      \frac{a*((a+1)*(a+2))}{1*(2*3)}    " in elementary algebra. Alternatively, the rule could have been applied to the denominator of the original term, yielding     a  *   (    (   a  +  1   )   *   (   a  +  2   )    )      (   1  *  2   )   *  3         a      a  1     a  2         1  2   3     \frac{a*((a+1)*(a+2))}{(1*2)*3}   .  Termination  Beyond section Termination and convergence , additional subtleties are to be considered for term rewriting systems.  Termination even of a system consisting of one rule with a linear left hand side is undecidable. 18 Termination is also undecidable for systems using only unary function symbols; however, it is decidable for finite ground systems. 19  The following term rewrite system is normalizing, 20 but not terminating, 21 and not confluent:   f ( x , x ) → g ( x ),  f ( x , g ( x )) → b ,  h ( c , x ) → f ( h ( x , c ), h ( x , x )). 22    The following two examples of terminating term rewrite systems are due to Toyama: 23       f   (  0  ,  1  ,  x  )    →   f   (  x  ,  x  ,  x  )       normal-→    f   0  1  x      f   x  x  x      f(0,1,x)\rightarrow f(x,x,x)   and       g   (  x  ,  y  )    →  x     normal-→    g   x  y    x    g(x,y)\rightarrow x   ,       g   (  x  ,  y  )    →  y     normal-→    g   x  y    y    g(x,y)\rightarrow y   . Their union is a non-terminating system, since     f   (   g   (  0  ,  1  )    ,   g   (  0  ,  1  )    ,   g   (  0  ,  1  )    )    →   f   (  0  ,   g   (  0  ,  1  )    ,   g   (  0  ,  1  )    )    →   f   (  0  ,  1  ,   g   (  0  ,  1  )    )    →   f   (   g   (  0  ,  1  )    ,   g   (  0  ,  1  )    ,   g   (  0  ,  1  )    )    →  …       normal-→    f     g   0  1      g   0  1      g   0  1        f   0    g   0  1      g   0  1        normal-→      f   0  1    g   0  1        normal-→      f     g   0  1      g   0  1      g   0  1        normal-→    normal-…     f(g(0,1),g(0,1),g(0,1))\rightarrow f(0,g(0,1),g(0,1))\rightarrow f(0,1,g(0,1))%
 \rightarrow f(g(0,1),g(0,1),g(0,1))\rightarrow\ldots   . This result disproves a conjecture of Dershowitz , 24 who claimed that the union of two terminating term rewrite systems    R  1     subscript  R  1    R_{1}   and    R  2     subscript  R  2    R_{2}   is again terminating if all left hand sides of    R  1     subscript  R  1    R_{1}   and right hand sides of    R  2     subscript  R  2    R_{2}   are linear , and there are no " overlaps " between left hand sides of    R  1     subscript  R  1    R_{1}   and right hand sides of    R  2     subscript  R  2    R_{2}   . All these properties are satisfied by Toyama's examples.  See Rewrite order and Path ordering (term rewriting) for ordering relations used in termination proofs for term rewriting systems.  Graph rewriting systems  A generalization of term rewrite systems are graph rewrite systems , operating on graphs instead of ( ground -) terms / their corresponding tree representation.  Trace rewriting systems  Trace theory provides a means for discussing multiprocessing in more formal terms, such as via the trace monoid and the history monoid . Rewriting can be performed in trace systems as well.  Philosophy  Rewriting systems can be seen as programs that infer end-effects from a list of cause-effect relationships. In this way, rewriting systems can be considered to be automated causality provers.  See also   Rewrite rule 25  Critical pair (logic)  Knuth–Bendix completion algorithm  L-systems specify rewriting that is done in parallel.  Referential transparency in computer science  Regulated rewriting  Rho calculus   Notes  References  Further reading    316 pages. A textbook suitable for undergraduates.  Marc Bezem , Jan Willem Klop , Roel de Vrijer ("Terese"), Term Rewriting Systems ("TeReSe"), Cambridge University Press, 2003, ISBN 0-521-39115-6. This is the most recent comprehensive monograph. It uses however a fair deal of non-yet-standard notations and definitions. For instance the Church-Rosser property is defined to be identical with confluence.  Nachum Dershowitz and Jean-Pierre Jouannaud  "Rewrite Systems" , Chapter 6 in Jan van Leeuwen (Ed.), Handbook of Theoretical Computer Science , Volume B: Formal Models and Semantics. , Elsevier and MIT Press, 1990, ISBN 0-444-88074-7, pp. 243–320. The preprint of this chapter is freely available from the authors, but it misses the figures.  Nachum Dershowitz and David Plaisted . "Rewriting" , Chapter 9 in John Alan Robinson and Andrei Voronkov (Eds.), Handbook of Automated Reasoning , Volume 1 .  Gérard Huet et Derek Oppen, Equations and Rewrite Rules, A Survey (1980) Stanford Verification Group, Report N° 15 Computer Science Department Report N° STAN-CS-80-785  Jan Willem Klop . "Term Rewriting Systems", Chapter 1 in Samson Abramsky , Dov M. Gabbay and Tom Maibaum (Eds.), Handbook of Logic in Computer Science , Volume 2: Background: Computational Structures .  David Plaisted. "Equational reasoning and term rewriting systems" , in Dov M. Gabbay , C. J. Hogger and John Alan Robinson (Eds.), Handbook of Logic in Artificial Intelligence and Logic Programming , Volume 1 .  Jürgen Avenhaus and Klaus Madlener. "Term rewriting and equational reasoning". In Ranan B. Banerji (Ed.), Formal Techniques in Artificial Intelligence: A Sourcebook , Elsevier (1990).    String rewriting    Ronald V. Book and Friedrich Otto, String-Rewriting Systems , Springer (1993).  Benjamin Benninghofen, Susanne Kemmerich and Michael M. Richter , Systems of Reductions . LNCS  277 , Springer-Verlag (1987).    Other    Martin Davis , Ron Sigal , Elaine J. Weyuker , (1994) Computability, Complexity, and Languages: Fundamentals of Theoretical Computer Science – 2nd edition , Academic Press, ISBN 0-12-206382-1.   External links   The Rewriting Home Page  IFIP Working Group 1.6  Researchers in rewriting by Aart Middeldorp , University of Innsbruck  Termination Portal   "  Category:Formal languages  Category:Logic in computer science  Category:Mathematical logic  Category:Rewriting systems     Bezem et al., p. 7, ↩  Book and Otto, p. 10 ↩  Bezem et al., p. 7 ↩   Baader and Nipkow, pp. 8-9 ↩  Alonzo Church and J. Barkley Rosser. Some properties of conversion. Trans. AMS, 39:472-482, 1936 ↩  Baader and Nipkow, p. 9 ↩  Baader and Nipkow, p. 11 ↩  Baader and Nipkow, p. 12 ↩  Bezem et al., p.11 ↩  i.e. it considers more objects as a normal form of x than our definition ↩  ↩  Martin Davis et al. 1994, p. 178 ↩  here,     s  |   p     evaluated-at  s  p    s\mid_{p}   denotes the subterm of   s   s   s   rooted at position   p   p   p   , while    l  σ      l  σ    l\sigma   denotes the result of applying the substitution    σ   σ   \sigma   to the term   l   l   l    ↩  here,    s    [   r  σ   ]   p       s   subscript   delimited-[]    r  σ    p     s[r\sigma]_{p}   denotes the result of replacing the subterm at position   p   p   p   in   s   s   s   by the term    r  σ      r  σ    r\sigma    ↩  ; here: Sect.2.3 ↩  since applying that substitution to the rule's left hand side    x  *   (   y  *  z   )       x    y  z     x*(y*z)   yields the numerator    a  *   (    (   a  +  1   )   *   (   a  +  2   )    )       a      a  1     a  2      a*((a+1)*(a+2))    ↩  ↩  ↩  i.e. for each term, some normal form exists, e.g. h ( c , c ) has the normal forms b and g ( b ), since h ( c , c ) → f ( h ( c , c ), h ( c , c )) → f ( h ( c , c ), f ( h ( c , c ), h ( c , c ))) → f ( h ( c , c ), g ( h ( c , c ))) → b , and h ( c , c ) → f ( h ( c , c ), h ( c , c )) → g ( h ( c , c ), h ( c , c )) → ... → g ( b ); neither b nor g ( b ) can be rewritten any further, therefore the system is not confluent ↩  i.e. there are infinite derivations, e.g. h ( c , c ) → f ( h ( c , c ), h ( c , c )) → f ( f ( h ( c , c ), h ( c , c )) , h ( c , c )) → f ( f ( f ( h ( c , c ), h ( c , c )), h ( c , c )) , h ( c , c )) → ... ↩  Here: Example 3.3 ↩  ↩  ; here: p.210 ↩  About the "rewrite rule" notion in linguistics , corresponding to a production rule of a context-free grammar . The derivation relation of such a grammar constitutes an abstract rewriting system in the above sense. ↩     