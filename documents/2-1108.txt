   Lagrange polynomial      Lagrange polynomial   In numerical analysis , Lagrange polynomials are used for polynomial interpolation . For a given set of distinct points    x  j     subscript  x  j    x_{j}   and numbers    y  j     subscript  y  j    y_{j}   , the Lagrange polynomial is the polynomial of the least degree that at each point    x  j     subscript  x  j    x_{j}   assumes the corresponding value    y  j     subscript  y  j    y_{j}   (i.e. the functions coincide at each point). The interpolating polynomial of the least degree is unique, however, and it is therefore more appropriate to speak of "the Lagrange form" of that unique polynomial rather than "the Lagrange interpolation polynomial", since the same polynomial can be arrived at through multiple methods. Although named after Joseph Louis Lagrange , who published it in 1795, it was first discovered in 1779 by Edward Waring and it is also an easy consequence of a formula published in 1783 by Leonhard Euler . 1  Lagrange interpolation is susceptible to Runge's phenomenon , and the fact that changing the interpolation points requires recalculating the entire interpolant can make Newton polynomials easier to use. Lagrange polynomials are used in the Newton–Cotes method of numerical integration and in Shamir's secret sharing scheme in cryptography.  (Figure)  This image shows, for four points ( (−9, 5) , (−4, 2) , (−1, −2) , (7, 9) ), the (cubic) interpolation polynomial L ( x ) (in black), which is the sum of the scaled basis polynomials y 0 ℓ 0 ( x ) , y 1 ℓ 1 ( x ) , y 2 ℓ 2 ( x ) and y 3 ℓ 3 ( x ) . The interpolation polynomial passes through all four control points, and each scaled basis polynomial passes through its respective control point and is 0 where x corresponds to the other three control points.   Definition  Given a set of k + 1 data points       (   x  0   ,   y  0   )   ,  …  ,   (   x  j   ,   y  j   )   ,  …  ,   (   x  k   ,   y  k   )        subscript  x  0    subscript  y  0    normal-…    subscript  x  j    subscript  y  j    normal-…    subscript  x  k    subscript  y  k      (x_{0},y_{0}),\ldots,(x_{j},y_{j}),\ldots,(x_{k},y_{k})   where no two    x  j     subscript  x  j    x_{j}   are the same, the interpolation polynomial in the Lagrange form is a linear combination       L   (  x  )    :=    ∑   j  =  0   k     y  j    ℓ  j    (  x  )        assign    L  x     superscript   subscript     j  0    k      subscript  y  j    subscript  normal-ℓ  j   x      L(x):=\sum_{j=0}^{k}y_{j}\ell_{j}(x)   of Lagrange basis polynomials         ℓ  j    (  x  )    :=    ∏      0  ≤  m  ≤  k        m  ≠  j         x  -   x  m      x  j   -   x  m      =     (   x  -   x  0    )    (    x  j   -   x  0    )    ⋯    (   x  -   x   j  -  1     )    (    x  j   -   x   j  -  1     )      (   x  -   x   j  +  1     )    (    x  j   -   x   j  +  1     )    ⋯    (   x  -   x  k    )    (    x  j   -   x  k    )      ,       assign     subscript  normal-ℓ  j   x     subscript  product        0  m       k        m  j          x   subscript  x  m       subscript  x  j    subscript  x  m                 x   subscript  x  0       subscript  x  j    subscript  x  0     normal-⋯      x   subscript  x    j  1        subscript  x  j    subscript  x    j  1          x   subscript  x    j  1        subscript  x  j    subscript  x    j  1      normal-⋯      x   subscript  x  k       subscript  x  j    subscript  x  k         \ell_{j}(x):=\prod_{\begin{smallmatrix}0\leq m\leq k\\
 m\neq j\end{smallmatrix}}\frac{x-x_{m}}{x_{j}-x_{m}}=\frac{(x-x_{0})}{(x_{j}-x%
 _{0})}\cdots\frac{(x-x_{j-1})}{(x_{j}-x_{j-1})}\frac{(x-x_{j+1})}{(x_{j}-x_{j+%
 1})}\cdots\frac{(x-x_{k})}{(x_{j}-x_{k})},     where    0  ≤  j  ≤  k        0  j       k     0\leq j\leq k   . Note how, given the initial assumption that no two    x  i     subscript  x  i    x_{i}   are the same,      x  j   -   x  m    ≠  0         subscript  x  j    subscript  x  m    0    x_{j}-x_{m}\neq 0   , so this expression is always well-defined. The reason pairs     x  i   =   x  j        subscript  x  i    subscript  x  j     x_{i}=x_{j}   with     y  i   ≠   y  j        subscript  y  i    subscript  y  j     y_{i}\neq y_{j}   are not allowed is that no interpolation function   L   L   L   such that     y  i   =   L   (   x  i   )         subscript  y  i     L   subscript  x  i      y_{i}=L(x_{i})   would exist; a function can only get one value for each argument    x  i     subscript  x  i    x_{i}   . On the other hand, if also     y  i   =   y  j        subscript  y  i    subscript  y  j     y_{i}=y_{j}   , then those two points would actually be one single point.  For all    i  ≠  j      i  j    i\neq j   ,     ℓ  j    (  x  )        subscript  normal-ℓ  j   x    \ell_{j}(x)   includes the term    (   x  -   x  i    )      x   subscript  x  i     (x-x_{i})   in the numerator, so the whole product will be zero at    x  =   x  i       x   subscript  x  i     x=x_{i}   :        ℓ   j  ≠  i     (   x  i   )    =    ∏   m  ≠  j       x  i   -   x  m      x  j   -   x  m      =     (    x  i   -   x  0    )    (    x  j   -   x  0    )    ⋯    (    x  i   -   x  i    )    (    x  j   -   x  i    )    ⋯    (    x  i   -   x  k    )    (    x  j   -   x  k    )     =  0.           subscript  normal-ℓ    j  i     subscript  x  i      subscript  product    m  j         subscript  x  i    subscript  x  m       subscript  x  j    subscript  x  m                  subscript  x  i    subscript  x  0       subscript  x  j    subscript  x  0     normal-⋯       subscript  x  i    subscript  x  i       subscript  x  j    subscript  x  i     normal-⋯       subscript  x  i    subscript  x  k       subscript  x  j    subscript  x  k           0.     \ell_{j\neq i}(x_{i})=\prod_{m\neq j}\frac{x_{i}-x_{m}}{x_{j}-x_{m}}=\frac{(x_%
 {i}-x_{0})}{(x_{j}-x_{0})}\cdots\frac{(x_{i}-x_{i})}{(x_{j}-x_{i})}\cdots\frac%
 {(x_{i}-x_{k})}{(x_{j}-x_{k})}=0.     On the other hand,        ℓ  i    (   x  i   )    :=    ∏   m  ≠  i       x  i   -   x  m      x  i   -   x  m      =  1       assign     subscript  normal-ℓ  i    subscript  x  i      subscript  product    m  i         subscript  x  i    subscript  x  m       subscript  x  i    subscript  x  m           1     \ell_{i}(x_{i}):=\prod_{m\neq i}\frac{x_{i}-x_{m}}{x_{i}-x_{m}}=1     In other words, all basis polynomials are zero at    x  =   x  i       x   subscript  x  i     x=x_{i}   , except     ℓ  i    (  x  )        subscript  normal-ℓ  i   x    \ell_{i}(x)   , for which it holds that      ℓ  i    (   x  i   )    =  1         subscript  normal-ℓ  i    subscript  x  i    1    \ell_{i}(x_{i})=1   , because it lacks the    (   x  -   x  i    )      x   subscript  x  i     (x-x_{i})   term.  It follows that      y  i    ℓ  i    (   x  i   )    =   y  i          subscript  y  i    subscript  normal-ℓ  i    subscript  x  i     subscript  y  i     y_{i}\ell_{i}(x_{i})=y_{i}   , so at each point    x  i     subscript  x  i    x_{i}   ,     L   (   x  i   )    =    y  i   +  0  +  0  +  …  +  0   =   y  i           L   subscript  x  i       subscript  y  i   0  0  normal-…  0         subscript  y  i      L(x_{i})=y_{i}+0+0+\dots+0=y_{i}   , showing that   L   L   L   interpolates the function exactly.  Proof  The function L ( x ) being sought is a polynomial in   x   x   x   of the least degree that interpolates the given data set; that is, assumes value    y  j     subscript  y  j    y_{j}   at the corresponding    x  j     subscript  x  j    x_{j}   for all data points   j   j   j   :        L   (   x  j   )    =   y  j     j  =   0  ,  …  ,  k       formulae-sequence      L   subscript  x  j     subscript  y  j      j   0  normal-…  k      L(x_{j})=y_{j}\qquad j=0,\ldots,k     Observe that:   In     ℓ  j    (  x  )        subscript  normal-ℓ  j   x    \ell_{j}(x)   there are k factors in the product and each factor contains one x , so L ( x ) (which is a sum of these k -degree polynomials) must also be a k -degree polynomial.  \ell_j(x_i)   \prod_{m  0,\, m\neq j}^{k} \frac{x_i-x_m}{x_j-x_m}  We consider what happens when this product is expanded. Because the product skips    m  =  j      m  j    m=j   , if    i  =  j      i  j    i=j   then all terms are       x  j   -   x  m      x  j   -   x  m     =  1           subscript  x  j    subscript  x  m       subscript  x  j    subscript  x  m     1    \frac{x_{j}-x_{m}}{x_{j}-x_{m}}=1   (except where     x  j   =   x  m        subscript  x  j    subscript  x  m     x_{j}=x_{m}   , but that case is impossible, as pointed out in the definition section—in that term,    m  =  j      m  j    m=j   , and since    m  ≠  j      m  j    m\neq j   ,    i  ≠  j      i  j    i\neq j   , contrary to    i  =  j      i  j    i=j   ). Also if    i  ≠  j      i  j    i\neq j   then since    m  ≠  j      m  j    m\neq j   does not preclude it, one term in the product will be for    m  =  i      m  i    m=i   , i.e.       x  i   -   x  i      x  j   -   x  i     =  0           subscript  x  i    subscript  x  i       subscript  x  j    subscript  x  i     0    \frac{x_{i}-x_{i}}{x_{j}-x_{i}}=0   , zeroing the entire product. So   \ell_j(x_i)   = \delta_{ji} = \begin{cases}  1, & \text{if } j=i \\ 0, & \text{if } j \ne i \end{cases}  where    δ   i  j      subscript  δ    i  j     \delta_{ij}   is the Kronecker delta . So:        L   (   x  i   )    =    ∑   j  =  0   k     y  j    ℓ  j    (   x  i   )     =    ∑   j  =  0   k     y  j    δ   j  i      =   y  i    .          L   subscript  x  i      superscript   subscript     j  0    k      subscript  y  j    subscript  normal-ℓ  j    subscript  x  i            superscript   subscript     j  0    k      subscript  y  j    subscript  δ    j  i            subscript  y  i      L(x_{i})=\sum_{j=0}^{k}y_{j}\ell_{j}(x_{i})=\sum_{j=0}^{k}y_{j}\delta_{ji}=y_{%
 i}.     Thus the function L ( x ) is a polynomial with degree at most k and where     L   (   x  i   )    =   y  i         L   subscript  x  i     subscript  y  i     L(x_{i})=y_{i}   .  Additionally, the interpolating polynomial is unique, as shown by the unisolvence theorem at polynomial interpolation article.  Main idea  Solving an interpolation problem leads to a problem in linear algebra amounting to inversion of a matrix. Using a standard monomial basis for our interpolation polynomial ∑ j {{=}}0 k  x j m j }} , we must invert the Vandermonde matrix  to solve  y i }} for the coefficients of    L   (  x  )       L  x    L(x)   . By choosing a better basis, the Lagrange basis, ∑ j {{=}}0 k  l j (x) y j }} , we merely get the identity matrix , δ ij , which is its own inverse: the Lagrange basis automatically inverts the analog of the Vandermonde matrix.  This construction is analogous to the Chinese Remainder Theorem . Instead of checking for remainders of integers modulo prime numbers, we are checking for remainders of polynomials when divided by linears.  Examples  Example 1  We wish to interpolate ƒ ( x ) = x 2 over the range 1 ≤ x ≤ 3, given these three points:      x  0     subscript  x  0    \displaystyle x_{0}     The interpolating polynomial is:      L   (  x  )       L  x    \displaystyle L(x)     Example 2  We wish to interpolate ƒ ( x ) = x 3 over the range 1 ≤ x ≤ 3, given these three points:           x  0   =   1        subscript  x  0   1    x_{0}=1\,           f   (   x  0   )    =   1         f   subscript  x  0    1    f(x_{0})=1\,             x  1   =   2        subscript  x  1   2    x_{1}=2\,           f   (   x  1   )    =   8         f   subscript  x  1    8    f(x_{1})=8\,             x  2   =   3        subscript  x  2   3    x_{2}=3\,           f   (   x  2   )    =   27         f   subscript  x  2    27    f(x_{2})=27\,        The interpolating polynomial is:      L   (  x  )       L  x    \displaystyle L(x)     Notes  The Lagrange form of the interpolation polynomial shows the linear character of polynomial interpolation and the uniqueness of the interpolation polynomial. Therefore, it is preferred in proofs and theoretical arguments. Uniqueness can also be seen from the invertibility of the Vandermonde matrix, due to the non-vanishing of the Vandermonde determinant .  But, as can be seen from the construction, each time a node x k changes, all Lagrange basis polynomials have to be recalculated. A better form of the interpolation polynomial for practical (or computational) purposes is the barycentric form of the Lagrange interpolation (see below) or Newton polynomials .  Lagrange and other interpolation at equally spaced points, as in the example above, yield a polynomial oscillating above and below the true function. This behaviour tends to grow with the number of points, leading to a divergence known as Runge's phenomenon ; the problem may be eliminated by choosing interpolation points at Chebyshev nodes . 2  The Lagrange basis polynomials can be used in numerical integration to derive the Newton–Cotes formulas .  Barycentric interpolation  Using       ℓ   (  x  )    =    (   x  -   x  0    )    (   x  -   x  1    )   ⋯   (   x  -   x  k    )          normal-ℓ  x       x   subscript  x  0      x   subscript  x  1    normal-⋯    x   subscript  x  k       \ell(x)=(x-x_{0})(x-x_{1})\cdots(x-x_{k})           ℓ  ′    (   x  j   )    =      d  ℓ   (  x  )     d  x    |    x  =   x  j     =    ∏    i  =  0   ,   i  ≠  j    k    (    x  j   -   x  i    )             superscript  normal-ℓ  normal-′    subscript  x  j     evaluated-at      normal-d  normal-ℓ  x     normal-d  x      x   subscript  x  j            superscript   subscript  product   formulae-sequence    i  0     i  j     k      subscript  x  j    subscript  x  i        \ell^{\prime}(x_{j})=\frac{\mathrm{d}\ell(x)}{\mathrm{d}x}\Big|_{x=x_{j}}=%
 \prod_{i=0,i\neq j}^{k}(x_{j}-x_{i})     we can rewrite the Lagrange basis polynomials as        ℓ  j    (  x  )    =    ℓ   (  x  )      ℓ  ′    (   x  j   )    (   x  -   x  j    )            subscript  normal-ℓ  j   x       normal-ℓ  x      superscript  normal-ℓ  normal-′    subscript  x  j     x   subscript  x  j        \ell_{j}(x)=\frac{\ell(x)}{\ell^{\prime}(x_{j})(x-x_{j})}   or, by defining the barycentric weights 3       w  j   =   1    ℓ  ′    (   x  j   )          subscript  w  j     1     superscript  normal-ℓ  normal-′    subscript  x  j       w_{j}=\frac{1}{\ell^{\prime}(x_{j})}     we can simply write        ℓ  j    (  x  )    =   ℓ   (  x  )     w  j    x  -   x  j             subscript  normal-ℓ  j   x     normal-ℓ  x     subscript  w  j     x   subscript  x  j        \ell_{j}(x)=\ell(x)\frac{w_{j}}{x-x_{j}}     which is commonly referred to as the first form of the barycentric interpolation formula.  The advantage of this representation is that the interpolation polynomial may now be evaluated as       L   (  x  )    =   ℓ   (  x  )     ∑   j  =  0   k      w  j    x  -   x  j      y  j            L  x     normal-ℓ  x    superscript   subscript     j  0    k        subscript  w  j     x   subscript  x  j      subscript  y  j        L(x)=\ell(x)\sum_{j=0}^{k}\frac{w_{j}}{x-x_{j}}y_{j}     which, if the weights    w  j     subscript  w  j    w_{j}   have been pre-computed, requires only    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   operations (evaluating    ℓ   (  x  )       normal-ℓ  x    \ell(x)   and the weights     w  j   /   (   x  -   x  j    )        subscript  w  j     x   subscript  x  j      w_{j}/(x-x_{j})   ) as opposed to    𝒪   (   n  2   )       𝒪   superscript  n  2     \mathcal{O}(n^{2})   for evaluating the Lagrange basis polynomials     ℓ  j    (  x  )        subscript  normal-ℓ  j   x    \ell_{j}(x)   individually.  The barycentric interpolation formula can also easily be updated to incorporate a new node    x   k  +  1      subscript  x    k  1     x_{k+1}   by dividing each of the    w  j     subscript  w  j    w_{j}   ,    j  =   0  …  k       j    0  normal-…  k     j=0\dots k   by    (    x  j   -   x   k  +  1     )       subscript  x  j    subscript  x    k  1      (x_{j}-x_{k+1})   and constructing the new    w   k  +  1      subscript  w    k  1     w_{k+1}   as above.  We can further simplify the first form by first considering the barycentric interpolation of the constant function     g   (  x  )    ≡  1        g  x   1    g(x)\equiv 1   :        g   (  x  )    =   ℓ   (  x  )     ∑   j  =  0   k     w  j    x  -   x  j        .        g  x     normal-ℓ  x    superscript   subscript     j  0    k      subscript  w  j     x   subscript  x  j         g(x)=\ell(x)\sum_{j=0}^{k}\frac{w_{j}}{x-x_{j}}.     Dividing    L   (  x  )       L  x    L(x)   by    g   (  x  )       g  x    g(x)   does not modify the interpolation, yet yields       L   (  x  )    =     ∑   j  =  0   k      w  j    x  -   x  j      y  j       ∑   j  =  0   k     w  j    x  -   x  j             L  x       superscript   subscript     j  0    k        subscript  w  j     x   subscript  x  j      subscript  y  j       superscript   subscript     j  0    k      subscript  w  j     x   subscript  x  j         L(x)=\frac{\sum_{j=0}^{k}\frac{w_{j}}{x-x_{j}}y_{j}}{\sum_{j=0}^{k}\frac{w_{j}%
 }{x-x_{j}}}     which is referred to as the second form or true form of the barycentric interpolation formula. This second form has the advantage that    ℓ   (  x  )       normal-ℓ  x    \ell(x)   need not be evaluated for each evaluation of    L   (  x  )       L  x    L(x)   .  Finite fields  The Lagrange polynomial can also be computed in finite fields . This has applications in cryptography , such as in Shamir's Secret Sharing scheme.  See also   Neville's algorithm  Newton form of the interpolation polynomial  Bernstein form of the interpolation polynomial  Carlson's theorem  Lebesgue constant (interpolation)  The Chebfun system  Table of Newtonian series  Frobenius covariant  Sylvester's formula   References  External links    ALGLIB has an implementations in C++ / C# / VBA / Pascal.  GSL has a polynomial interpolation code in C  SO has a MATLAB example that demonstrates the algorithm and recreates the first image in this article  Lagrange Method of Interpolation — Notes, PPT, Mathcad, Mathematica, MATLAB, Maple at Holistic Numerical Methods Institute  Lagrange interpolation polynomial on www.math-linux.com     Module for Lagrange Polynomials by John H. Mathews  Dynamic Lagrange interpolation with JSXGraph  Numerical computing with functions: The Chebfun Project  Excel Worksheet Function for Bicubic Lagrange Interpolation  Lagrange polynomials in Python   he:אינטרפולציה#צורת לגראנז' "  Category:Interpolation  Category:Polynomials  Category:Articles containing proofs     . ↩  . ↩  ↩     