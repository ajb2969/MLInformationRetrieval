   Tinkerbell map      Tinkerbell map  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     The Tinkerbell map is a discrete-time dynamical system given by:       x   n  +  1    =     x  n  2   -   y  n  2    +   a   x  n    +   b    y  n           subscript  x    n  1         superscript   subscript  x  n   2    superscript   subscript  y  n   2      a   subscript  x  n      b   subscript  y  n       x_{n+1}=x_{n}^{2}-y_{n}^{2}+ax_{n}+by_{n}\,          y   n  +  1    =    2   x  n    y  n    +   c   x  n    +   d    y  n           subscript  y    n  1        2   subscript  x  n    subscript  y  n      c   subscript  x  n      d   subscript  y  n       y_{n+1}=2x_{n}y_{n}+cx_{n}+dy_{n}\,     Some commonly used values of a, b, c, and d are        a  =  0.9   ,    b  =   -  0.6013    ,    c  =  2.0   ,   d  =  0.50        formulae-sequence    a  0.9    formulae-sequence    b    0.6013     formulae-sequence    c  2.0     d  0.50       a=0.9,b=-0.6013,c=2.0,d=0.50          a  =  0.3   ,    b  =  0.6000   ,    c  =  2.0   ,   d  =  0.27        formulae-sequence    a  0.3    formulae-sequence    b  0.6000    formulae-sequence    c  2.0     d  0.27       a=0.3,b=0.6000,c=2.0,d=0.27      Like all chaotic maps, the Tinkerbell Map has also been shown to have periods; after a certain number of mapping iterations any given point shown in the map to the right will find itself once again at its starting location.  The origin of the name is uncertain; however, the graphical picture of the system (as shown to the right) shows a similarity to the movement of Tinker Bell over Cinderella Castle , as shown at the beginning of all films produced by Disney.  Source code  The Java source code that was used to generate the Tinkerbell Map displayed above:  import java.io.*;  public  class TinkerBellMap { public  static  void  main (String[] args) throws Exception {
     FileWriter fstream = new FileWriter( "TinkerBellMapOutput.txt" );
     BufferedWriter out = new BufferedWriter(fstream); int time = 0 , iterations = 50000 ; double x = - 0.72 , y = - 0.64 ; double a = 0.9 , b = - 0.6013 , c = 2.0 , d = 0.5 ; while (time < iterations) { double oldX = x;
       x = Math. pow (x, 2 )-Math. pow (y, 2 )+a*x+b*y;
       y = 2 *oldX*y+c*oldX+d*y;
       out. write (x+ " " +y+ " \n " ); //writing data to a txt file to be read by Mathematica time++;
     }
   }
 }  See also   List of chaotic maps   References   C.L. Bremer & D.T. Kaplan, Markov Chain Monte Carlo Estimation of Nonlinear Dynamics from Time Series  K.T. Alligood, T.D. Sauer & J.A. Yorke, Chaos: An Introduction to Dynamical Systems , Berlin: Springer-Verlag, 1996.  P.E. McSharry & P.R.C. Ruffino, Asymptotic angular stability in non-linear systems: rotation numbers and winding numbers  R.L. Davidchack, Y.-C. Lai, A. Klebanoff & E.M. Bollt, Towards complete detection of unstable periodic orbits in chaotic systems  B. R. Hunt, Judy A. Kennedy, Tien-Yien Li, Helena E. Nusse, "SLYRB measures: natural invariant measures for chaotic systems"  A. Goldsztejn, W. Hayes, P. Collins "Tinkerbell is Chaotic" SIAM J. Applied Dynamical Systems 10, n.4 1480-1501, 2011   "  Category:Chaotic maps  