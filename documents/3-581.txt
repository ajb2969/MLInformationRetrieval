   Graham scan      Graham scan   Graham's scan is a method of computing the convex hull of a finite set of points in the plane with time complexity  O ( n log n ). It is named after Ronald Graham , who published the original algorithm in 1972. 1 The algorithm finds all vertices of the convex hull ordered along its boundary.  Algorithm  The first step in this algorithm is to find the point with the lowest y-coordinate. If the lowest y-coordinate exists in more than one point in the set, the point with the lowest x-coordinate out of the candidates should be chosen. Call this point P . This step takes O ( n ), where n is the number of points in question.  Next, the set of points must be sorted in increasing order of the angle they and the point P make with the x-axis. Any general-purpose sorting algorithm is appropriate for this, for example heapsort (which is O( n log n )).  Sorting in order of angle does not require computing the angle. It is possible to use any function of the angle which is monotonic in the interval     [  0  ,  π  )     0  π    [0,\pi)   . The cosine is easily computed using the dot product , or the slope of the line may be used, or the comparison function used by the sorting algorithm can use the sign of the cross product to determine relative angles.  The algorithm proceeds by considering each of the points in the sorted array in sequence. For each point, it is determined whether moving from the two previously considered points to this point is a "left turn" or a "right turn". If it is a "right turn", this means that the second-to-last point is not part of the convex hull and should be removed from consideration. This process is continued for as long as the set of the last three points is a "right turn". As soon as a "left turn" is encountered, the algorithm moves on to the next point in the sorted array. (If at any stage the three points are collinear, one may opt either to discard or to report it, since in some applications it is required to find all points on the boundary of the convex hull.)  Again, determining whether three points constitute a "left turn" or a "right turn" does not require computing the actual angle between the two line segments, and can actually be achieved with simple arithmetic only. For three points     P  1   =   (   x  1   ,   y  1   )        subscript  P  1     subscript  x  1    subscript  y  1      P_{1}=(x_{1},y_{1})   ,     P  2   =   (   x  2   ,   y  2   )        subscript  P  2     subscript  x  2    subscript  y  2      P_{2}=(x_{2},y_{2})   and     P  3   =   (   x  3   ,   y  3   )        subscript  P  3     subscript  x  3    subscript  y  3      P_{3}=(x_{3},y_{3})   , simply compute the z -coordinate of the cross product of the two vectors       P  1    P  2    →     normal-→     subscript  P  1    subscript  P  2      \overrightarrow{P_{1}P_{2}}   and      P  1    P  3    →     normal-→     subscript  P  1    subscript  P  3      \overrightarrow{P_{1}P_{3}}   , which is given by the expression      (    x  2   -   x  1    )    (    y  3   -   y  1    )    -    (    y  2   -   y  1    )    (    x  3   -   x  1    )             subscript  x  2    subscript  x  1       subscript  y  3    subscript  y  1          subscript  y  2    subscript  y  1       subscript  x  3    subscript  x  1       (x_{2}-x_{1})(y_{3}-y_{1})-(y_{2}-y_{1})(x_{3}-x_{1})   . If the result is 0, the points are collinear; if it is positive, the three points constitute a "left turn" or counter-clockwise orientiation, otherwise a "right turn" or clockwise orientation (for counter-clockwise numbered points).  This process will eventually return to the point at which it started, at which point the algorithm is completed and the stack now contains the points on the convex hull in counterclockwise order.  Time complexity  Sorting the points has time complexity O( n log n ). While it may seem that the time complexity of the loop is O( n 2 ), because for each point it goes back to check if any of the previous points make a "right turn", it is actually O( n ), because each point is considered at most twice in some sense. Each point can appear only once as a point    (   x  2   ,   y  2   )      subscript  x  2    subscript  y  2     (x_{2},y_{2})   in a "left turn" (because the algorithm advances to the next point    (   x  3   ,   y  3   )      subscript  x  3    subscript  y  3     (x_{3},y_{3})   after that), and as a point    (   x  2   ,   y  2   )      subscript  x  2    subscript  y  2     (x_{2},y_{2})   in a "right turn" (because the point    (   x  2   ,   y  2   )      subscript  x  2    subscript  y  2     (x_{2},y_{2})   is removed). The overall time complexity is therefore O( n log n ), since the time to sort dominates the time to actually compute the convex hull.  Pseudocode  First, define  # Three  points  are  a  counter-clockwise  turn  if  ccw  >  0,  clockwise  if  # ''ccw points .  let N           = number of points  let points[N+1] = the array of points  swap points[1] with the point with the lowest y-coordinate  sort points by polar angle with points[1]   # We  want  points[0]  to  be  a  sentinel  point  that  will  stop  the  loop.  let points[0] = points[N]   # M  will  denote  the  number  of  points  on  the  convex  hull.  let M = 1  for i = 2 to N:  # Find  next  valid  point  on  convex  hull.   while  ccw (points[M-1], points[M], points[i]) 1:  M -= 1  # All  points  are  collinear   else  if i == N:   break   else  i += 1   # Update  M  and  swap  points[i]  to  the  correct  place.  M += 1   swap points[M] with points[i]  This pseudocode is adapted from Sedgewick and Wayne's Algorithms, 4th edition .  The check inside the while statement is necessary to avoid the case when all points in the set are collinear.  Notes  The same basic idea works also if the input is sorted on x-coordinate instead of angle, and the hull is computed in two steps producing the upper and the lower parts of the hull respectively. This modification was devised by A. M. Andrew 2 and is known as Andrew's Monotone Chain Algorithm. It has the same basic properties as Graham's scan but eschews costly comparisons between polar angles. 3  The stack technique used in Graham's scan is very similar to that for the all nearest smaller values problem, and parallel algorithms for all nearest smaller values may also be used (like Graham's scan) to compute convex hulls of sorted sequences of points efficiently. 4  References     "  Category:Articles with example pseudocode  Category:Convex hull algorithms     Graham, R.L. (1972). An Efficient Algorithm for Determining the Convex Hull of a Finite Planar Set . Information Processing Letters 1, 132-133 ↩  ↩  ↩  . ↩     