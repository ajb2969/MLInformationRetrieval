


Graph isomorphism problem




Graph isomorphism problem

The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic.
Besides its practical importance, the graph isomorphism problem is a curiosity in computational complexity theory as it is one of a very small number of problems belonging to NP neither known to be solvable in polynomial time nor NP-complete: it is one of only 12 such problems listed by , and one of only two of that list whose complexity remains unresolved (the other being integer factorization).1  the best algorithm  has run time 2O(√(n log n)) for graphs with n vertices.
It is known that the graph isomorphism problem is in the low hierarchy of class NP, which implies that it is not NP-complete unless the polynomial time hierarchy collapses to its second level.
At the same time, isomorphism for many special classes of graphs can be solved in polynomial time, and in practice graph isomorphism can often be solved efficiently.
This problem is a special case of the subgraph isomorphism problem, which is known to be NP-complete. It is also known to be a special case of the non-abelian hidden subgroup problem over the symmetric group.
State of the art
The best current theoretical algorithm is due to , and is based on the earlier work by  combined with a subfactorial algorithm due to . The algorithm relies on the classification of finite simple groups. Without CFSG, a slightly weaker bound 2O(√n log2 n) was obtained first for strongly regular graphs by , and then extended to general graphs by . Improvement of the exponent √n is a major open problem; for strongly regular graphs this was done by . For hypergraphs of bounded rank, a subexponential upper bound matching the case of graphs, was obtained by .
On a side note, the graph isomorphism problem is computationally equivalent to the problem of computing the automorphism group of a graph, and is weaker than the permutation group isomorphism problem, and the permutation group intersection problem. For the latter two problems,  obtained complexity bounds similar to that for graph isomorphism.
There are several competing practical algorithms for graph isomorphism, due to , , , etc. While they seem to perform well on random graphs, a major drawback of these algorithms is their exponential time performance in the worst case.
Solved special cases
A number of important special cases of the graph isomorphism problem have efficient, polynomial-time solutions:

Trees.
Planar graphs. (In fact, planar graph isomorphism is in log space, a class contained in P.)
Interval graphs.
Permutation graphs.
Bounded-parameter graphs
 
Graphs of bounded treewidth.
Graphs of bounded genus.2 (Note: planar graphs are graphs of genus 0)
Graphs of bounded degree.
Graphs with bounded eigenvalue multiplicity.
k-Contractible graphs (a generalization of bounded degree and bounded genus).
Color-preserving isomorphism of colored graphs with bounded color multiplicity (i.e., at most k vertices have the same color for a fixed k) is in class NC, which is a subclass of P.


Complexity class GI
Since the graph isomorphism problem is neither known to be NP-complete nor to be tractable, researchers have sought to gain insight into the problem by defining a new class GI, the set of problems with a polynomial-time Turing reduction to the graph isomorphism problem.3 If in fact the graph isomorphism problem is solvable in polynomial time, GI would equal P.
As is common for complexity classes within the polynomial time hierarchy, a problem is called GI-hard if there is a polynomial-time Turing reduction from any problem in GI to that problem, i.e., a polynomial-time solution to a GI-hard problem would yield a polynomial-time solution to the graph isomorphism problem (and so all problems in GI). A problem 
 
 
 
  is called complete for GI, or GI-complete, if it is both GI-hard and a polynomial-time solution to the GI problem would yield a polynomial-time solution to 
 
 
 
 
 .
The graph isomorphism problem is contained in both NP and co-AM. GI is contained in and low for Parity P, as well as contained in the potentially much smaller class SPP.4 That it lies in Parity P means that the graph isomorphism problem is no harder than determining whether a polynomial-time nondeterministic Turing machine has an even or odd number of accepting paths. GI is also contained in and low for ZPPNP. This essentially means that an efficient Las Vegas algorithm with access to an NP oracle can solve graph isomorphism so easily that it gains no power from being given the ability to do so in constant time.
GI-complete and GI-hard problems
Isomorphism of other objects
There are a number of classes of mathematical objects for which the problem of isomorphism is a GI-complete problem. A number of them are graphs endowed with additional properties or restrictions:5

digraphs6
labelled graphs, with the proviso that an isomorphism is not required to preserve the labels,7 but only the equivalence relation consisting of pairs of vertices with the same label
"polarized graphs" (made of a complete graph Km and an empty graph Kn plus some edges connecting the two; their isomorphism must preserve the partition)8
2-colored graphs9
explicitly given finite structures10
multigraphs11
hypergraphs12
finite automata13
Markov Decision Processes
commutative class 3 nilpotent (i.e., xyz = 0 for every elements x, y, z) semigroups14
finite rank associative algebras over a fixed algebraically closed field with zero squared radical and commutative factor over the radical.15
context-free grammars16
balanced incomplete block designs17
Recognizing combinatorial isomorphism of convex polytopes represented by vertex-facet incidences.18

GI-complete classes of graphs
A class of graphs is called GI-complete if recognition of isomorphism for graphs from this subclass is a GI-complete problem. The following classes are GI-complete:19

connected graphs20
graphs of diameter 2 and radius 121
directed acyclic graphs22
regular graphs23
bipartite graphs without non-trivial strongly regular subgraphs24
bipartite Eulerian graphs25
bipartite regular graphs26
line graphs27
split graphs
chordal graphs28
regular self-complementary graphs29
polytopal graphs of general, simple, and simplicial convex polytopes in arbitrary dimensions.

Many classes of digraphs are also GI-complete.
Other GI-complete problems
There are other nontrivial GI-complete problems in addition to isomorphism problems.

The recognition of self-complementarity of a graph or digraph.
A clique problem for a class of so-called M-graphs. It is shown that finding an isomorphism for n-vertex graphs is equivalent to finding an n-clique in an M-graph of size n2. This fact is interesting because the problem of finding an (n − ε)-clique in a M-graph of size n2 is NP-complete for arbitrarily small positive ε.
The problem of homeomorphism of 2-complexes.

GI-hard problems

The problem of counting the number of isomorphisms between two graphs is polynomial-time equivalent to the problem of telling whether even one exists.30
The problem of deciding whether two convex polytopes given by either the V-description or H-description are projectively or affinely isomorphic. The latter means existence of a projective or affine map between the spaces that contain the two polytopes (not necessarily of the same dimension) which induces a bijection between the polytopes.

Program checking
have shown a program checker for graph isomorphism. Suppose P is a claimed polynomial-time procedure that checks if two graphs are isomorphic, but it is not trusted. To check if G and H are isomorphic:

Ask P whether G and H are isomorphic.
 
If the answer is "yes':
 
Attempt to construct an isomorphism using P as subroutine. Mark a vertex u in G and v in H, and modify the graphs to make them distinctive (with a small local change). Ask P if the modified graphs are isomorphic. If no, change v to a different vertex. Continue searching.
Either the isomorphism will be found (and can be verified), or P will contradict itself.

If the answer is "no":
 
Perform the following 100 times. Choose randomly G or H, and randomly permute its vertices. Ask P if the graph is isomorphic to G and H. (As in AM protocol for graph nonisomorphism).
If any of the tests are failed, judge P as invalid program. Otherwise, answer "no".



This procedure is polynomial-time and gives the correct answer if P is a correct program for graph isomorphism. If P is not a correct program, but answers correctly on G and H, the checker will either give the correct answer, or detect invalid behaviour of P. If P is not a correct program, and answers incorrectly on G and H, the checker will detect invalid behaviour of P with high probability, or answer wrong with probability 2−100.
Notably, P is used only as a blackbox.
Applications
In cheminformatics and in mathematical chemistry, graph isomorphism testing is used to identify a chemical compound within a chemical database. Also, in organic mathematical chemistry graph isomorphism testing is useful for generation of molecular graphs and for computer synthesis.
Chemical database search is an example of graphical data mining, where the graph canonization approach is often used. In particular, a number of identifiers for chemical substances, such as SMILES and InChI, designed to provide a standard and human-readable way to encode molecular information and to facilitate the search for such information in databases and on the web, use canonization step in their computation, which is essentially the canonization of the graph which represents the molecule.
In electronic design automation graph isomorphism is the basis of the Layout Versus Schematic (LVS) circuit design step, which is a verification whether the electric circuits represented by a circuit schematic and an integrated circuit layout are the same.
See also

Graph automorphism problem
Graph canonization

Notes
References


.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

. English translation in Journal of Mathematical Sciences 22 (3): 1285–1289, 1983.

.

.

.

.

.

.

.

.

.

.

.

. Full paper in Information and Control 56 (1–2): 1–20, 1983.

.

.

.

.


also Journal of Computer and System Sciences 37: 312–323, 1988.


.

.

.

Surveys and monographs


.

.

. (Translated from Zapiski Nauchnykh Seminarov Leningradskogo Otdeleniya Matematicheskogo Instituta im. V. A. Steklova AN SSSR (Records of Seminars of the Leningrad Department of Steklov Institute of Mathematics of the USSR Academy of Sciences), Vol. 118, pp. 83–158, 1982.)

. (A brief survey of open questions related to the isomorphism problem for graphs, rings and groups.)

. (From the book cover: The books focuses on the issue of the computational complexity of the problem and presents several recent results that provide a better understanding of the relative position of the problem in the class NP as well as in other complexity classes.)

. (This 24th edition of the Column discusses the state of the art for the open problems from the book Computers and Intractability and previous columns, in particular, for Graph Isomorphism.)

.

Software

Graph Isomorphism, review of implementations, The Stony Brook Algorithm Repository.

"
Category:Graph algorithms Category:Morphisms Category:Computational problems in graph theory Category:Unsolved problems in computer science



The latest one resolved was minimum-weight triangulation, proved to be NP-complete in 2006. See .↩
; .↩
; .↩
; ↩
↩












; .↩











; .↩




