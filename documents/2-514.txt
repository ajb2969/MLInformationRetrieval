   Linear interpolation      Linear interpolation  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In mathematics, linear interpolation is a method of curve fitting using linear polynomials .  Linear interpolation between two known points  If the two known points are given by the coordinates    (   x  0   ,   y  0   )      subscript  x  0    subscript  y  0     (x_{0},y_{0})   and    (   x  1   ,   y  1   )      subscript  x  1    subscript  y  1     (x_{1},y_{1})   , the linear interpolant is the straight line between these points. For a value x in the interval    (   x  0   ,   x  1   )      subscript  x  0    subscript  x  1     (x_{0},x_{1})   , the value y along the straight line is given from the equation        y  -   y  0     x  -   x  0     =     y  1   -   y  0      x  1   -   x  0             y   subscript  y  0      x   subscript  x  0          subscript  y  1    subscript  y  0       subscript  x  1    subscript  x  0       \frac{y-y_{0}}{x-x_{0}}=\frac{y_{1}-y_{0}}{x_{1}-x_{0}}     which can be derived geometrically from the figure on the right. It is a special case of polynomial interpolation with n = 1.  Solving this equation for y , which is the unknown value at x , gives      y  =    y  0   +    (    y  1   -   y  0    )     x  -   x  0      x  1   -   x  0           y     subscript  y  0        subscript  y  1    subscript  y  0        x   subscript  x  0       subscript  x  1    subscript  x  0         y=y_{0}+(y_{1}-y_{0})\frac{x-x_{0}}{x_{1}-x_{0}}     which is the formula for linear interpolation in the interval    (   x  0   ,   x  1   )      subscript  x  0    subscript  x  1     (x_{0},x_{1})   . Outside this interval, the formula is identical to linear extrapolation .  This formula can also be understood as a weighted average. The weights are inversely related to the distance from the end points to the unknown point; the closer point has more influence than the farther point. Thus, the weights are     x  -   x  0      x  1   -   x  0          x   subscript  x  0       subscript  x  1    subscript  x  0      \frac{x-x_{0}}{x_{1}-x_{0}}   and      x  1   -  x     x  1   -   x  0           subscript  x  1   x      subscript  x  1    subscript  x  0      \frac{x_{1}-x}{x_{1}-x_{0}}   , which are normalized distances between the unknown point and each of the end points.  Interpolation of a data set  Linear interpolation on a set of data points (x 0 , y 0 ), (x 1 , y 1 ), ..., (x n , y n ) is defined as the concatenation of linear interpolants between each pair of data points. This results in a continuous curve , with a discontinuous derivative (in general), thus of differentiability class     C  0     superscript  C  0    C^{0}   .  Linear interpolation as approximation  Linear interpolation is often used to approximate a value of some function  f using two known values of that function at other points. The error of this approximation is defined as       R  T   =    f   (  x  )    -   p   (  x  )          subscript  R  T       f  x     p  x      R_{T}=f(x)-p(x)\,\!     where p denotes the linear interpolation polynomial defined above        p   (  x  )    =    f   (   x  0   )    +      f   (   x  1   )    -   f   (   x  0   )       x  1   -   x  0      (   x  -   x  0    )      .        p  x       f   subscript  x  0            f   subscript  x  1      f   subscript  x  0        subscript  x  1    subscript  x  0       x   subscript  x  0        p(x)=f(x_{0})+\frac{f(x_{1})-f(x_{0})}{x_{1}-x_{0}}(x-x_{0}).\,\!     It can be proven using Rolle's theorem that if f has a continuous second derivative, the error is bounded by        |   R  T   |   ≤      (    x  1   -   x  0    )   2   8     max    x  0   ≤  x  ≤   x  1      |    f  ′′    (  x  )    |      .         subscript  R  T         superscript     subscript  x  1    subscript  x  0    2   8     subscript        subscript  x  0   x        subscript  x  1           superscript  f  ′′   x        |R_{T}|\leq\frac{(x_{1}-x_{0})^{2}}{8}\max_{x_{0}\leq x\leq x_{1}}|f^{\prime%
 \prime}(x)|.\,\!     As you see, the approximation between two points on a given function gets worse with the second derivative of the function that is approximated. This is intuitively correct as well: the "curvier" the function is, the worse the approximations made with simple linear interpolation.  Applications  Linear interpolation is often used to fill the gaps in a table. Suppose that one has a table listing the population of some country in 1970, 1980, 1990 and 2000, and that one wanted to estimate the population in 1994. Linear interpolation is an easy way to do this.  The basic operation of linear interpolation between two values is commonly used in computer graphics . In that field's jargon it is sometimes called a lerp . The term can be used as a verb or noun for the operation. e.g. " Bresenham's algorithm lerps incrementally between the two endpoints of the line."  Lerp operations are built into the hardware of all modern computer graphics processors. They are often used as building blocks for more complex operations: for example, a bilinear interpolation can be accomplished in three lerps. Because this operation is cheap, it's also a good way to implement accurate lookup tables with quick lookup for smooth functions without having too many table entries.  Extensions  Accuracy  If a C 0 function is insufficient, for example if the process that has produced the data points is known be smoother than C 0 , it is common to replace linear interpolation with spline interpolation , or even polynomial interpolation in some cases.  Multivariate  Linear interpolation as described here is for data points in one spatial dimension. For two spatial dimensions, the extension of linear interpolation is called bilinear interpolation , and in three dimensions, trilinear interpolation . Notice, though, that these interpolants are no longer linear functions of the spatial coordinates, rather products of linear functions; this is illustrated by the clearly non-linear example of bilinear interpolation in the figure below. Other extensions of linear interpolation can be applied to other kinds of mesh such as triangular and tetrahedral meshes, including Bézier surfaces . These may be defined as indeed higher-dimensional piecewise linear function (see second figure below).    History  Linear interpolation has been used since antiquity for filling the gaps in tables, often with astronomical data. It is believed that it was used by Babylonian astronomers and mathematicians in Seleucid  Mesopotamia (last three centuries BC), and by the Greek astronomer and mathematician , Hipparchus (2nd century BC). A description of linear interpolation can be found in the Almagest (2nd century AD) by Ptolemy .  Programming language support  Many libraries and shading languages have a 'lerp' helper-function, returning an interpolation between two inputs (v0,v1) for a parameter (t) in the closed unit interval [0,1]:  // Imprecise method which does not guarantee v = v1 when t = 1,  // due to floating-point arithmetic error.  float lerp( float v0, float v1, float t) { return v0 + t*(v1-v0);
 } // Precise method which guarantees v = v1 when t = 1.  float lerp( float v0, float v1, float t) { return ( 1 -t)*v0 + t*v1;
 }  This function is used for alpha blending (the parameter 't' is the 'alpha value'), and the formula may be extended to blend multiple components of a vector (such as spatial x,y,z axes, or r,g,b colour components) in parallel.  See also   Bilinear interpolation  Spline interpolation  Polynomial interpolation  de Casteljau's algorithm  First-order hold  Bézier curve   References    .   External links   Equations of the Straight Line at cut-the-knot  Implementing linear interpolation in Microsoft Excel    See OrangeOwlSolutions for CUDA implementations of linear interpolation.  APLJaK Linear Interpolation Calculator one of many calculators available.   de:Interpolation (Mathematik)#Lineare Interpolation "  Category:Interpolation  