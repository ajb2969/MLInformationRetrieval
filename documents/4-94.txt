


Richardson extrapolation




Richardson extrapolation

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In numerical analysis, Richardson extrapolation is a sequence acceleration method, used to improve the rate of convergence of a sequence. It is named after Lewis Fry Richardson, who introduced the technique in the early 20th century.12 In the words of Birkhoff and Rota, "... its usefulness for practical computations can hardly be overestimated."3
Practical applications of Richardson extrapolation include Romberg integration, which applies Richardson extrapolation to the trapezoid rule, and the Bulirschâ€“Stoer algorithm for solving ordinary differential equations.
Example of Richardson extrapolation
Suppose that we wish to approximate $A^*$, and we have a method $A(h)$ that depends on a small parameter $h$, so that
$A(h) = A^\ast + C h^n + o(h^{n+1})\;$
Define a new method
$R(h,k) := \frac{ k^n A(h) - A(k\,h)}{k^n-1}$
Then
$R(h, k) = \frac{ k^n ( A^* + C h^n + o(h^{n+1}) ) - ( A^* + C k^n h^n + o(h^{n+1}) ) }{ k^n - 1} = A^* + o(h^{n+1}).$ $R(h,k)$ is called the Richardson extrapolation of A(h), and has a higher-order error estimate $o(h^{n+1})$ compared to $A(h)$.
Very often, it is much easier to obtain a given precision by using R(h) rather than A(h') with a much smaller '' h' '', which can cause problems due to limited precision (rounding errors) and/or due to the increasing number of calculations needed (see examples below).
General formula
Let A(h) be an approximation of A that depends on a positive step size h with an error formula of the form
$$A - A(h) = a_0h^{k_0} + a_1h^{k_1} + a_2h^{k_2} + \cdots$$ where the ai are unknown constants and the ki are known constants such that hki > hki+1.
The exact value sought can be given by
$$A = A(h) + a_0h^{k_0} + a_1h^{k_1} + a_2h^{k_2} + \cdots$$ which can be simplified with Big O notation to be
$$A = A(h)+ a_0h^{k_0} + O(h^{k_1}).  \,\!$$
Using the step sizes h and h / t for some t, the two formulas for A are:
$$A = A(h)+ a_0h^{k_0} + O(h^{k_1})  \,\!$$
$$A = A\!\left(\frac{h}{t}\right) + a_0\left(\frac{h}{t}\right)^{k_0} + O(h^{k_1}) .$$
Multiplying the second equation by tk0 and subtracting the first equation gives
$$(t^{k_0}-1)A = t^{k_0}A\left(\frac{h}{t}\right) - A(h) + O(h^{k_1})$$ which can be solved for A to give
$$A = \frac{t^{k_0}A\left(\frac{h}{t}\right) - A(h)}{t^{k_0}-1} + O(h^{k_1}) .$$
By this process, we have achieved a better approximation of A by subtracting the largest term in the error which was O(hk0). This process can be repeated to remove more error terms to get even better approximations.
A general recurrence relation can be defined for the approximations by
$$A_{i+1}(h) = \frac{t^{k_i}A_i\left(\frac{h}{t}\right) - A_i(h)}{t^{k_i}-1}$$ such that
$$A = A_{i+1}(h) + O(h^{k_{i+1}})$$ with $A_0=A(h)$.
The Richardson extrapolation can be considered as a linear sequence transformation.
Additionally, the general formula can be used to estimate k0 when neither its value nor A is known a priori. Such a technique can be useful for quantifying an unknown rate of convergence. Given approximations of A from three distinct step sizes h, h / t, and h / s, the exact relationship
$$A=\frac{t^{k_0}A\left(\frac{h}{t}\right) - A(h)}{t^{k_0}-1} + O(h^{k_1}) = \frac{s^{k_0}A\left(\frac{h}{s}\right) - A(h)}{s^{k_0}-1} + O(h^{k_1})$$ yields an approximate relationship
$$A\left(\frac{h}{t}\right) + \frac{A\left(\frac{h}{t}\right) - A(h)}{t^{k_0}-1} \approx A\left(\frac{h}{s}\right) +\frac{A\left(\frac{h}{s}\right) - A(h)}{s^{k_0}-1}$$ which can be solved numerically to estimate k0.
Example
Using Taylor's theorem about h=0,
$$f(x+h) = f(x) + f'(x)h + \frac{f''(x)}{2}h^2 + \cdots$$ the derivative of f(x) is given by
$$f'(x) = \frac{f(x+h) - f(x)}{h} - \frac{f''(x)}{2}h + \cdots.$$
If the initial approximations of the derivative are chosen to be
$$A_0(h) = \frac{f(x+h) - f(x)}{h}$$ then ki = i+1.
For t = 2, the first formula extrapolated for A would be
$$A = 2A_0\!\left(\frac{h}{2}\right) - A_0(h) + O(h^2) .$$
For the new approximation
$$A_1(h) = 2A_0\!\left(\frac{h}{2}\right) - A_0(h)$$ we can extrapolate again to obtain
$$A = \frac{4A_1\!\left(\frac{h}{2}\right) - A_1(h)}{3} + O(h^3) .$$
Example pseudocode code for Richardson extrapolation
The following pseudocode in MATLAB style demonstrates Richardson extrapolation to help solve the ODE $y'(t) = -y^2$, $y(0) = 1$ with the Trapezoidal method. In this example we half the step size $h$ each iteration and so in the discussion above we'd have that $t = 2$. The error of the Trapezoidal method can be expressed in terms of odd powers so that the error over multiple steps can be expressed in even powers and so we take powers of $4 = 2^2 = t^2$ in the pseudocode. We want to find the value of $y(5)$, which has the exact solution of $\frac{1}{5 + 1} = \frac{1}{6} = 0.1666...$ since the exact solution of the ODE is $y(t) = \frac{1}{1 + t}$. This pseudocode assumes that a function called Trapezoidal(f, tStart, tEnd, h, y0) exists which performs the trapezoidal method on the function f, with starting point y0 and tStart, step size h, and attempts to computes y(tEnd)
Starting with too small an initial step size can potentially introduce error into the final solution. Although there are methods designed to help pick the best initial step size, one option is to start with a large step size and then to allow the Richardson extrapolation to reduce the step size each iteration until the error reaches the desired tolerance.
tStart = 0          %Starting time
 tEnd = 5            %Ending time
 f = -y^2            %The derivative of y, so y' = f(t, y(t)) = -y^2
                     % The solution to this ODE is y = 1/(1 + t)
 y0 = 1              %The initial position (i.e. y0 = y(tStart) = y(0) = 1)
 tolerance = 10^-11  %10 digit accuracy is desired
 
 maxRows = 20                %Don't allow the iteration to continue indefinitely
 initialH = tStart - tEnd    %Pick an initial step size
 haveWeFoundSolution = false %Were we able to find the solution to the desired tolerance? not yet.
 
 h = initialH
 
 %Create a 2D matrix of size maxRows by maxRows to hold the Richardson extrapolates
 %Note that this will be a lower triangular matrix and that at most two rows are actually
 % needed at any time in the compuation.
 A = zeroMatrix(maxRows, maxRows)
 
 %Compute the top left element of the matrix
 A(1, 1) = Trapezoidal(f, tStart, tEnd, h, y0)
 
 %Each row of the matrix requires one call to Trapezoidal
 %This loops starts by filling the second row of the matrix, since the first row was computed above
 for i = 1 : maxRows - 1 %Starting at i = 1, iterate at most maxRows - 1 times
     h = h/2             %Half the previous value of h since this is the start of a new row
     
     %Call the Trapezoidal function with this new smaller step size
     A(i + 1, 1) = Trapezoidal(f, tStart, tEnd, h, y0)
     
     for j = 1 : i         %Go across the row until the diagonal is reached
         %Use the last value computed (i.e. A(i + 1, j)) and the element from the
         % row above it (i.e. A(i, j)) to compute the next Richardson extrapolate
      
         A(i + 1, j + 1) = ((4^j).*A(i + 1, j) - A(i, j))/(4^j - 1);
     end
     
     %After leaving the above inner loop, the diagonal element of row i + 1 has been computed
     % This diagonal element is the last Richardson extrapolate to be computed  
     %The difference between this extrapolate and the last extrapolate of row i is a good
     % indication of the error
     if(absoluteValue(A(i + 1, i + 1) - A(i, i)) < tolerance)   %If the result is within tolerance
         print("y(5) = ", A(i + 1, i + 1))                      %Display the result of the Richardson extrapolation
         haveWeFoundSolution = true
         break                                                  %Done, so leave the loop
     end
 end
 
 if(haveWeFoundSolution == false)   %If we weren't able to find a solution to within the desired tolerance
     print("Warning: Not able to find solution to within the desired tolerance of ", tolerance);
     print("The last computed extrapolate was ", A(maxRows, maxRows))
 end
See also

Aitken's delta-squared process
Takebe Kenko
Richardson iteration

References



Extrapolation Methods. Theory and Practice by C. Brezinski and M. Redivo Zaglia, North-Holland, 1991.

External links

Module for Richardson's Extrapolation, fullerton.edu
Fundamental Methods of Numerical Extrapolation With Applications, mit.edu
Richardson-Extrapolation
Richardson extrapolation on a website of Robert Israel (University of British Columbia)

"
Category:Numerical analysis Category:Asymptotic analysis Category:Articles with example MATLAB/Octave code





Page 126 of 




