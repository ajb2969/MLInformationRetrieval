   Option type      Option type  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In programming languages (especially functional programming languages) and type theory , an option type or maybe type is a polymorphic type that represents encapsulation of an optional value; e.g. it is used as the return type of functions which may or may not return a meaningful value when they are applied. It consists of either an empty constructor (called None or Nothing ), or a constructor encapsulating the original data type A (written Just A or Some A). Outside of functional programming, these are known as nullable types .   In the Haskell language, the option type (called Maybe ) is defined as data Maybe a = Nothing | Just a .  In the Idris language, the option type is also defined as data Maybe a = Nothing | Just a .  In the Agda language, the option type is called Maybe with variants nothing and just a .  In the Coq language, the option type is defined as Inductive option (A:Type) : Type := | Some : A -> option A | None : option A. .  In the OCaml language, the option type is defined as type 'a option = None | Some of 'a .  In the Scala language, the option type is defined as parameterized abstract class '.. Option[A] = if (x == null) None else Some(x).. .  In the Standard ML language, the option type is defined as datatype 'a option = NONE | SOME of 'a .  In the Rust language, it is defined as enum Option { None, Some(T) } .  In the Swift language, it is defined as enum Optional { case None, Some(T) } but is generally written as T? and is initialized with either a value or nil .  In the Java language since version 8, the option type is defined as parameterized final class Optional .  In the C++ language proposed extensions, the option type is defined as the template class template class optional .   In type theory , it may be written as     A  ?   =   A  +  1        superscript  A  normal-?     A  1     A^{?}=A+1   .  In languages that have tagged unions , as in most functional programming languages, option types can be expressed as the tagged union of a unit type plus the encapsulated type.  In the Curry-Howard correspondence , option types are related to the annihilation law for ∨: x∨1=1.  An option type can also be seen as a collection containing either a single element or zero elements.  The option monad  The option type is a monad under the following functions:      return  :   A  →   A  ?   =  a  ↦    Just   a       normal-:  return     normal-→  A   superscript  A  normal-?        a    maps-to      Just  a       \text{return}\colon A\to A^{?}=a\mapsto\text{Just}\,a         bind  :   A  ?   →   (  A  →   B  ?   )   →   B  ?   =  a  ↦  f  ↦   {     Nothing       if   a   =  Nothing         f    a  ′         if   a   =    Just    a  ′            fragments  bind  normal-:   superscript  A  normal-?   normal-→   fragments  normal-(  A  normal-→   superscript  B  normal-?   normal-)   normal-→   superscript  B  normal-?    a  maps-to  f  maps-to   cases  Nothing      if  a   Nothing     f   superscript  a  normal-′        if  a     Just   superscript  a  normal-′        \text{bind}\colon A^{?}\to(A\to B^{?})\to B^{?}=a\mapsto f\mapsto\begin{cases}%
 \text{Nothing}&\text{if}\ a=\text{Nothing}\\
 f\,a^{\prime}&\text{if}\ a=\text{Just}\,a^{\prime}\end{cases}   We may also describe the option monad in terms of functions return , fmap and join , where the latter two are given by:      fmap  :   (  A  →  B  )   →   A  ?   →   B  ?   =  f  ↦  a  ↦   {     Nothing       if   a   =  Nothing         Just    f    a  ′         if   a   =    Just    a  ′            fragments  fmap  normal-:   fragments  normal-(  A  normal-→  B  normal-)   normal-→   superscript  A  normal-?   normal-→   superscript  B  normal-?    f  maps-to  a  maps-to   cases  Nothing      if  a   Nothing     Just  f   superscript  a  normal-′        if  a     Just   superscript  a  normal-′        \text{fmap}\colon(A\to B)\to A^{?}\to B^{?}=f\mapsto a\mapsto\begin{cases}%
 \text{Nothing}&\text{if}\ a=\text{Nothing}\\
 \text{Just}\,f\,a^{\prime}&\text{if}\ a=\text{Just}\,a^{\prime}\end{cases}         join  :    A   ?   ?   →   A  ?   =  a  ↦   {     Nothing       if   a   =  Nothing       Nothing       if   a   =    Just   Nothing          Just    a  ′         if   a   =    Just    Just    a  ′             normal-:  join     normal-→   superscript   superscript  A  normal-?   normal-?    superscript  A  normal-?        a    maps-to     cases  Nothing      if  a   Nothing   Nothing      if  a     Just  Nothing      Just   superscript  a  normal-′        if  a     Just  Just   superscript  a  normal-′          \text{join}\colon{A^{?}}^{?}\to A^{?}=a\mapsto\begin{cases}\text{Nothing}&%
 \text{if}\ a=\text{Nothing}\\
 \text{Nothing}&\text{if}\ a=\text{Just}\,\text{Nothing}\\
 \text{Just}\,a^{\prime}&\text{if}\ a=\text{Just}\,\text{Just}\,a^{\prime}\end{cases}     The option monad is an additive monad: it has Nothing as a zero constructor and the following function as a monadic sum:      mplus  :    A  ?   →   A  ?   →   A  ?   =   a  1   ↦   a  2   ↦   {     Nothing       if    a  1    =   Nothing  and   a  2    =  Nothing         Just    a  2  ′         if    a  1    =   Nothing  and   a  2    =    Just    a  2  ′           Just    a  1  ′         if    a  1    =    Just    a  1  ′             normal-:  mplus     normal-→   superscript  A  normal-?    superscript  A  normal-?     normal-→     superscript  A  normal-?         subscript  a  1     maps-to     subscript  a  2     maps-to     cases  Nothing        if   subscript  a  1      Nothing  italic- and   subscript  a  2         Nothing      Just   subscript   superscript  a  normal-′   2          if   subscript  a  1      Nothing  italic- and   subscript  a  2           Just   subscript   superscript  a  normal-′   2        Just   subscript   superscript  a  normal-′   1        if   subscript  a  1      Just   subscript   superscript  a  normal-′   1          \text{mplus}\colon A^{?}\to A^{?}\to A^{?}=a_{1}\mapsto a_{2}\mapsto\begin{%
 cases}\text{Nothing}&\text{if}\ a_{1}=\text{Nothing}\and a_{2}=\text{Nothing}%
 \\
 \text{Just}\,a^{\prime}_{2}&\text{if}\ a_{1}=\text{Nothing}\and a_{2}=\text{%
 Just}\,a^{\prime}_{2}\\
 \text{Just}\,a^{\prime}_{1}&\text{if}\ a_{1}=\text{Just}\,a^{\prime}_{1}\end{cases}     In fact, the resulting structure is an idempotent  monoid .  Examples  Scala  Scala implements Option as a parameterized type, so a variable can be an Option, accessed as follows: 1  // Defining variables that are Options of type Int  val res1: Option[Int] = Some( 42 ) val res2: Option[Int] = None // sample 1 :  This function uses pattern matching to deconstruct Options  def  compute (opt: Option[Int]) = opt match { case None => "No value"  case Some(x) => "The value is: " + x
 } // sample 2 :  This function uses monad method  def  compute (opt: Option[Int]) = opt. fold ( "No Value" )(v => "The value is:" + v ) println ( compute (res1)) // The value is: 42  println ( compute (res2)) // No value  There are two main ways to use an Option value. The first one, not the best, is the pattern matching as in the first example. The second one, the best practice, is the monad method as in the second example. In this way, the program is safe as it cannot generate any exception or error (e.g. by trying to obtain the value of an Option variable that is equal to None ). Therefore, it essentially works as a type-safe alternative to the null value.  F#   (* This function uses pattern matching to deconstruct Options *)  let compute = function | None -> "No value" | Some x -> sprintf "The value is: %d" x
 
 printfn "%s" (compute <| Some  42 ) (* The value is: 42 *) printfn "%s" (compute None ) (* No value         *)  Haskell  -- This function uses pattern matching to deconstruct Maybes  compute ::  Maybe  Int  ->  String compute Nothing  =  "No value" compute ( Just x) =  "The value is: "  ++ show x main ::  IO ()
 main =  do print $ compute ( Just  42 ) -- The value is: 42 print $ compute Nothing  -- No value  Swift  func compute(x: Int?) -> String {
   // This function uses optional binding to deconstruct optionals
   if let y = x {
     return "The value is: \(y)"
   } else {
     return "No value"
   }
 }
 
 print(compute(42)) // The value is: 42
 print(compute(nil)) // No value  func compute(x: Int?) -> String {
   // This function explicitly unwraps an optional after comparing to nil
   return nil == x ? "No value" : "The value is: \(x!)"
 }
 
 print(compute(42)) // The value is: 42
 print(compute(nil)) // No value  func compute(x: Int?) -> String {
   // This function uses pattern matching to deconstruct optionals
   switch x {
   case .None: 
     return "No value"
   case .Some(let y): 
     return "The value is: \(y)"
   }
 }
 
 print(compute(42)) // The value is: 42
 print(compute(nil)) // No value  Rust  In Rust you can use either pattern matching or optional binding to deconstruct the Option type:  fn main() {
     // This function uses pattern matching to deconstruct optionals
     fn compute(x: Option ) -> String {
         match x {
             Some(a) => format!("The value is: {}", a),
             None    => format!("No value")
         }
     }
 
     println!("{}", compute(Some(42))); // The value is: 42
     println!("{}", compute(None)); // No value
 }  fn main() {
     // This function uses optional binding to deconstruct optionals
     fn compute(x: Option ) -> String {
         if let Some(a) = x {
             format!("The value is: {}", a)
         } else {
             format!("No value")
         }
     }
 
     println!("{}", compute(Some(42))); // The value is: 42
     println!("{}", compute(None)); // No value
 }  See also   Tagged union  Nullable type  Null Object pattern  Sentinel value   References    "  Category:Functional programming  Category:Data types  Category:Type theory     ↩    