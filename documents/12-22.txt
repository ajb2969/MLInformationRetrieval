


Lehmer random number generator




Lehmer random number generator

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



The Lehmer random number generator1 (named after D. H. Lehmer), sometimes also referred to as the Park–Miller random number generator (after Stephen K. Park and Keith W. Miller), is a variant of linear congruential generator (LCG) that operates in multiplicative group of integers modulo n. A general formula of a random number generator (RNG) of this type is:



where the modulus n is a prime number or a power of a prime number, the multiplier g is an element of high multiplicative order modulo n (e.g., a primitive root modulo n), and the seed X

 
  is co-prime to n.
Parameters in common use
In 1988, Park and Miller2 suggested a Lehmer RNG with particular parameters n = 2
 
 
 
  − 1 = 2,147,483,647 (a Mersenne prime M

 
 ) and g = 7
 
 
 
  = 16,807 (a primitive root modulo M

 
 ), now known as MINSTD. Although MINSTD was later criticized by Marsaglia and Sullivan (1993),3 it is still in use today (in particular, in CarbonLib and C++11's minstd_rand0). Park, Miller and Stockmeyer responded to the criticism (1993),4 saying:

Given the dynamic nature of the area, it is difficult for nonspecialists to make decisions about what generator to use. "Give me something I can understand, implement and port... it needn't be state-of-the-art, just make sure it's reasonably good and efficient." Our article and the associated minimal standard generator was an attempt to respond to this request. Five years later, we see no need to alter our response other than to suggest the use of the multiplier a = 48271 in place of 16807.

This revised constant is used in C++11's minstd_rand random number generator.
The Sinclair ZX81 and its successors use the Lehmer RNG with parameters n = 2
 
 
 
  + 1 = 65,537 (a Fermat prime F

 
 ) and g = 75 (a primitive root modulo F

 
 ). 5 The CRAY random number generator RANF is a Lehmer RNG with n = 2
 
 
 
  and g = 44,485,709,377,909.6 The GNU Scientific Library includes several random number generators of the Lehmer form, including MINSTD, RANF, and the infamous IBM random number generator RANDU.7
Relation to LCG
While the Lehmer RNG can be viewed as a particular case of the linear congruential generator with , it is a special case that implies certain restrictions and properties. In particular, for the Lehmer RNG, the initial seed X

 
  must be coprime to the modulus n that is not required for LCGs in general. The choice of the modulus n and the multiplier g is also more restrictive for the Lehmer RNG. In contrast to LCG, the maximum period of the Lehmer RNG equals n−1 and it is such when n is prime and g is a primitive root modulo n.
On the other hand, the discrete logarithms (to base g or any primitive root modulo n) of X
 
 
 in 
 
 
 
  represent linear congruential sequence modulo Euler totient

 
 .
Sample C99 code
Using C code, the Park-Miller Lehmer generator can be written as follows.
uint32_t lcg_parkmiller(uint32_t a)
 {
     return ((uint64_t)a * 48271UL) % 2147483647UL;
 }
This function's output can be fed back to its input to generate pseudorandom numbers, as long as the caller is careful to begin with any number except zero. As the product of two 32 bit integers may overflow, the cast to uint64_t is necessary.
Another popular pair of Lehmer generator parameters uses the prime modulus 232-5:
uint32_t lcg_rand(uint32_t a)
 {
     return ((uint64_t)a * 279470273UL) % 4294967291UL;
 }
Many other Lehmer generators and primes have good properties.8
References


(journal version: Annals of the Computation Laboratory of Harvard University, Vol. 26 (1951)).

Steve Park, Random Number Generators
Park–Miller–Carta Pseudo-Random Number Generator

"
Category:Pseudorandom number generators Category:Modular arithmetic



↩
↩
↩
↩
 (Note the ZX81 manual incorrectly states that 65537 is a Mersenne prime that equals 216-1. The ZX Spectrum manual fixed that and correctly states that it is a Fermat prime that equals 216+1.)↩
GNU Scientific Library: Other random number generators↩

↩



