


Initial algebra




Initial algebra

In mathematics, an initial algebra is an initial object in the category of F-algebras for a given endofunctor F. The initiality provides a general framework for induction and recursion.
For instance, consider the endofunctor 1+(-) on the category of sets, where 1 is the one-point set, the terminal object in the category. An algebra for this endofunctor is a set X (called the carrier of the algebra) together with a point  and a function . The set of natural numbers is the carrier of the initial such algebra: the point is zero and the function is the successor map.
For a second example, consider the endofunctor 1+N×(-) on the category of sets, where N is the set of natural numbers. An algebra for this endofunctor is a set X together with a point  and a function . The set of finite lists of natural numbers is the initial such algebra. The point is the empty list, and the function is cons, taking a number and a finite list, and returning a new finite list with the number at the head.
Final coalgebra
Dually, a final coalgebra is a terminal object in the category of F-coalgebras. The finality provides a general framework for coinduction and corecursion.
For example, using the same functor 1+(-) as before, a coalgebra is a set 
 
 
 
  together with a truth-valued test function 
 
 
 
  and a partial function

 
  whose domain is formed by those 
 
 
 
  for which 
 
 
 
 . The set 
 
 
 
  consisting of the natural numbers extended with a new element 
 
 
 
  is the carrier of the final coalgebra in the category, where 
 
 
 
  is the test for zero
 
 
 
  and 
 
 
 
 , and 
 
 
 
  is the predecessor function (the inverse of the successor function) on the positive naturals, but acts like the identity on the new element 
 
 

 
 , 
 
 
 
 .
For a second example, consider the same functor 
 
 
 
  as before. In this case the carrier of the final coalgebra consists of all lists of natural numbers, finite as well as infinite. The operations are a test function testing whether a list is empty, and a deconstruction function defined on nonempty lists returning a pair consisting of the head and the tail of the input list.
Theorems

Initial algebras are minimal (i.e., have no proper subalgebra1)
Final coalgebras are simple (i.e., have no proper quotients2).3

Example
Consider the endofunctor 
 
 
 
  sending 
 
 
 
  to 
 
 
 
 . Then the set 
 
 
 
  of natural numbers together with the functions 
 
 
 
 , where 
 
 
 
  and 
 
 
 
  are the obvious functions suggested by their names, is an initial 
 
 
 
 -algebra. The initiality (the universal property for this case) is not hard to establish; the unique homomorphism to an arbitrary 
 
 
 
 -algebra 
 
 
 
 , for 
 
 
 
  an element of 
 
 
 
  and 
 
 
 
  a function on 
 
 
 
 , is the function sending the natural number 
 
 
 
  to 
 
 
 
 , that is, 
 
 
 
 , the 
 
 
 
 -fold application of 
 
 
 
  to 
 
 
 
 .
Use in Computer Science
Various finite data structures used in programming, such as lists and trees, can be obtained as initial algebras of specific endofunctors. While there may be several initial algebras for a given endofunctor, they are unique up to isomorphism, which informally means that the "observable" properties of a data structure can be adequately captured by defining it as an initial algebra.
To obtain the type

 
  of lists whose elements are members of set 
 
 
 
 , consider that the list-forming operations are:








Combined into one function, they give:



 
 ,

which makes this an 
 
 
 
 -algebra for the endofunctor 
 
 
 
  sending 
 
 
 
  to 
 
 
 
 . It is, in fact, the initial 
 
 
 
 -algebra. Initiality is established by the function known as foldr in functional programming languages such as Haskell and ML.
Likewise, binary trees with elements at the leaves can be obtained as the initial algebra



 
 .

Types obtained this way are known as algebraic data types.
Types defined by using least fixed point construct with functor 
 
 
 
  can be regarded as an initial F-algebra, provided that parametricity holds for the type.4
In a dual way, similar relationship exists between notions of greatest fixed point and terminal F-coalgebra, with applications to coinductive types. These can be used for allowing potentially infinite objects while maintaining strong normalization property.5 In the strongly normalizing Charity programming language (i.e. each program terminates), coinductive data types can be used achieving surprising results, e.g. defining lookup constructs to implement such “strong” functions like the Ackermann function.6
See also

Algebraic data type
Catamorphism
Anamorphism

Notes


External links

Categorical programming with inductive and coinductive types by Varmo Vene
Philip Wadler: Recursive types for free! University of Glasgow, July 1998. Draft.
Initial Algebra and Final Coalgebra Semantics for Concurrency by J.J.M.M. Rutten and D. Turi
Initiality and finality from CLiki

"
Category:Category theory Category:Functional programming Category:Type theory




Induction and Co-induction from CLiki↩
Initiality and finality from CLiki↩
Philip Wadler: Recursive types for free! University of Glasgow, July 1998. Draft.↩

Robin Cockett: Charitable Thoughts (ps and ps.gz)↩




