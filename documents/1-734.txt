   Newton's method      Newton's method  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In numerical analysis , Newton's method (also known as the Newton–Raphson method ), named after Isaac Newton and Joseph Raphson , is a method for finding successively better approximations to the roots (or zeroes) of a real -valued function .      x  :    f   (  x  )    =  0 .      normal-:  x      f  x   0 .     x:f(x)=0\,.     The Newton–Raphson method in one variable is implemented as follows:  Given a function ƒ defined over the reals x , and its derivative  ƒ ', we begin with a first guess x 0 for a root of the function f . Provided the function satisfies all the assumptions made in the derivation of the formula, a better approximation x 1 is        x  1   =    x  0   -     f   (   x  0   )      f  ′    (   x  0   )        .       subscript  x  1      subscript  x  0       f   subscript  x  0       superscript  f  normal-′    subscript  x  0        x_{1}=x_{0}-\frac{f(x_{0})}{f^{\prime}(x_{0})}\,.     Geometrically, ( x 1 , 0) is the intersection with the x -axis of the tangent to the graph of f at ( x 0 , f ( x 0 )).  The process is repeated as       x   n  +  1    =    x  n   -     f   (   x  n   )      f  ′    (   x  n   )            subscript  x    n  1       subscript  x  n       f   subscript  x  n       superscript  f  normal-′    subscript  x  n        x_{n+1}=x_{n}-\frac{f(x_{n})}{f^{\prime}(x_{n})}\,     until a sufficiently accurate value is reached.  This algorithm is first in the class of Householder's methods , succeeded by Halley's method . The method can also be extended to complex functions and to systems of equations.  Description  (Figure)  alt Illustration of Newton's method|thumb|right|300px|The function ƒ is shown in blue and the tangent line is in red. We see that x n +1 is a better approximation than x n for the root x of the function f .   The idea of the method is as follows: one starts with an initial guess which is reasonably close to the true root, then the function is approximated by its tangent line (which can be computed using the tools of calculus ), and one computes the x -intercept of this tangent line (which is easily done with elementary algebra). This x -intercept will typically be a better approximation to the function's root than the original guess, and the method can be iterated .  Suppose ƒ : [ a , b ] → R is a differentiable function defined on the interval [ a , b ] with values in the real numbers  R . The formula for converging on the root can be easily derived. Suppose we have some current approximation x n . Then we can derive the formula for a better approximation, x n +1 by referring to the diagram on the right. The equation of the tangent line to the curve y = ƒ ( x ) at the point x=x n is       y  =     f  ′    (   x  n   )    (   x  -   x  n    )    +   f   (   x  n   )      ,      y       superscript  f  normal-′    subscript  x  n     x   subscript  x  n       f   subscript  x  n       y=f^{\prime}(x_{n})\,(x-x_{n})+f(x_{n}),     where, ƒ ' denotes the derivative of the function ƒ .  The x -intercept of this line (the value of x such that y =0) is then used as the next approximation to the root, x n +1 . In other words, setting y to zero and x to x n +1 gives       0  =     f  ′    (   x  n   )    (    x   n  +  1    -   x  n    )    +   f   (   x  n   )      .      0       superscript  f  normal-′    subscript  x  n      subscript  x    n  1     subscript  x  n       f   subscript  x  n       0=f^{\prime}(x_{n})\,(x_{n+1}-x_{n})+f(x_{n}).     Solving for x n +1 gives        x   n  +  1    =    x  n   -    f   (   x  n   )      f  ′    (   x  n   )       .       subscript  x    n  1       subscript  x  n       f   subscript  x  n       superscript  f  normal-′    subscript  x  n        x_{n+1}=x_{n}-\frac{f(x_{n})}{f^{\prime}(x_{n})}.\,\!     We start the process off with some arbitrary initial value x 0 . (The closer to the zero, the better. But, in the absence of any intuition about where the zero might lie, a "guess and check" method might narrow the possibilities to a reasonably small interval by appealing to the intermediate value theorem .) The method will usually converge, provided this initial guess is close enough to the unknown zero, and that ƒ '( x 0 ) ≠ 0. Furthermore, for a zero of multiplicity 1, the convergence is at least quadratic (see rate of convergence ) in a neighbourhood of the zero, which intuitively means that the number of correct digits roughly at least doubles in every step. More details can be found in the analysis section below.  The Householder's methods are similar but have higher order for even faster convergence. However, the extra computations required for each step can slow down the overall performance relative to Newton's method, particularly if f or its derivatives are computationally expensive to evaluate.  History  The name "Newton's method" is derived from Isaac Newton 's description of a special case of the method in De analysi per aequationes numero terminorum infinitas (written in 1669, published in 1711 by William Jones ) and in De metodis fluxionum et serierum infinitarum (written in 1671, translated and published as Method of Fluxions in 1736 by John Colson ). However, his method differs substantially from the modern method given above: Newton applies the method only to polynomials. He does not compute the successive approximations    x  n     subscript  x  n    x_{n}   , but computes a sequence of polynomials, and only at the end arrives at an approximation for the root x . Finally, Newton views the method as purely algebraic and makes no mention of the connection with calculus. Newton may have derived his method from a similar but less precise method by Vieta . The essence of Vieta's method can be found in the work of the Persian mathematician  Sharaf al-Din al-Tusi , while his successor Jamshīd al-Kāshī used a form of Newton's method to solve      x  P   -  N   =  0         superscript  x  P   N   0    x^{P}-N=0   to find roots of N (Ypma 1995). A special case of Newton's method for calculating square roots was known much earlier and is often called the Babylonian method .  Newton's method was used by 17th-century Japanese mathematician Seki Kōwa to solve single-variable equations, though the connection with calculus was missing.  Newton's method was first published in 1685 in A Treatise of Algebra both Historical and Practical by John Wallis . In 1690, Joseph Raphson published a simplified description in Analysis aequationum universalis . Raphson again viewed Newton's method purely as an algebraic method and restricted its use to polynomials, but he describes the method in terms of the successive approximations x n instead of the more complicated sequence of polynomials used by Newton. Finally, in 1740, Thomas Simpson described Newton's method as an iterative method for solving general nonlinear equations using calculus, essentially giving the description above. In the same publication, Simpson also gives the generalization to systems of two equations and notes that Newton's method can be used for solving optimization problems by setting the gradient to zero.  Arthur Cayley in 1879 in The Newton-Fourier imaginary problem was the first to notice the difficulties in generalizing Newton's method to complex roots of polynomials with degree greater than 2 and complex initial values. This opened the way to the study of the theory of iterations of rational functions.  Practical considerations  Newton's method is an extremely powerful technique—in general the convergence is quadratic: as the method converges on the root, the difference between the root and the approximation is squared (the number of accurate digits roughly doubles) at each step. However, there are some difficulties with the method.  Difficulty in calculating derivative of a function  Newton's method requires that the derivative be calculated directly. An analytical expression for the derivative may not be easily obtainable and could be expensive to evaluate. In these situations, it may be appropriate to approximate the derivative by using the slope of a line through two nearby points on the function. Using this approximation would result in something like the secant method whose convergence is slower than that of Newton's method.  Failure of the method to converge to the root  It is important to review the proof of quadratic convergence of Newton's Method before implementing it. Specifically, one should review the assumptions made in the proof. For situations where the method fails to converge , it is because the assumptions made in this proof are not met.  Overshoot  If the first derivative is not well behaved in the neighborhood of a particular root, the method may overshoot, and diverge from that root. An example of a function with one root, for which the derivative is not well behaved in the neighborhood of the root, is        f   (  x  )    =    |  x  |   a    ,   0  <  a  <    1  2        formulae-sequence      f  x    superscript    x   a        0  a         1  2       f(x)=|x|^{a},\quad 0     for which the root will be overshot and the sequence of   x   x   x   will diverge. For    a  =   1  /  2       a    1  2     a=1/2   , the root will still be overshot, but the sequence will oscillate between two values. For    a  ≥  1      a  normal-≥  1    a≥1     In some cases, Newton's method can be stabilized by using successive over-relaxation , or the speed of convergence can be increased by using the same method.  Stationary point  If a stationary point of the function is encountered, the derivative is zero and the method will terminate due to division by zero .  Poor initial estimate  A large error in the initial estimate can contribute to non-convergence of the algorithm.  Mitigation of non-convergence  In a robust implementation of Newton's method, it is common to place limits on the number of iterations, bound the solution to an interval known to contain the root, and combine the method with a more robust root finding method.  Slow convergence for roots of multiplicity > 1  If the root being sought has multiplicity greater than one, the convergence rate is merely linear (errors reduced by a constant factor at each step) unless special steps are taken. When there are two or more roots that are close together then it may take many iterations before the iterates get close enough to one of them for the quadratic convergence to be apparent. However, if the multiplicity      x   n  +  1    =    x  n   -   m    f   (   x  n   )      f  ′    (   x  n   )        .       subscript  x    n  1       subscript  x  n     m      f   subscript  x  n       superscript  f  normal-′    subscript  x  n         x_{n+1}=x_{n}-m\frac{f(x_{n})}{f^{\prime}(x_{n})}.\,\!   of the root is known, one can use the following modified algorithm that preserves the quadratic convergence rate:     m   m   m    1  This is equivalent to using successive over-relaxation . On the other hand, if the multiplicity   m   m   m   of the root is not known, it is possible to estimate      Δ   x   i  +  1     =       f  ′′    (  α  )     2   f  ′    (  α  )       (   Δ   x  i    )   2    +   O     [   Δ   x  i    ]   3       ,        normal-Δ   subscript  x    i  1              superscript  f  ′′   α     2   superscript  f  normal-′   α     superscript    normal-Δ   subscript  x  i    2      O   superscript   delimited-[]    normal-Δ   subscript  x  i     3       \Delta x_{i+1}=\frac{f^{\prime\prime}(\alpha)}{2f^{\prime}(\alpha)}(\Delta x_{%
 i})^{2}+O[\Delta x_{i}]^{3}\,,   after carrying out one or two iterations, and then use that value to increase the rate of convergence.  Analysis  Suppose that the function ƒ has a zero at α, i.e., ƒ (α) = 0, and ƒ is differentiable in a neighborhood of α.  If f is continuously differentiable and its derivative is nonzero at α, then there exists a neighborhood of α such that for all starting values x 0 in that neighborhood, the sequence { x n } will converge to α. 2  If the function is continuously differentiable and its derivative is not 0 at α and it has a second derivative at α then the convergence is quadratic or faster. If the second derivative is not 0 at α then the convergence is merely quadratic. If the third derivative exists and is bounded in a neighborhood of α, then:        Δ   x  i    ≜    x  i   -   α     .     normal-≜    normal-Δ   subscript  x  i       subscript  x  i   α     \Delta x_{i}\triangleq x_{i}-\alpha\,.     where     f  ′   ≠   0        superscript  f  normal-′   0    f^{\prime}\neq 0\!     If the derivative is 0 at α, then the convergence is usually only linear. Specifically, if ƒ is twice continuously differentiable, ƒ '( α ) = 0 and ƒ ''( α ) ≠ 0, then there exists a neighborhood of α such that for all starting values x 0 in that neighborhood, the sequence of iterates converges linearly, with rate log 10 2 (Süli & Mayers, Exercise 1.6). Alternatively if ƒ '( α ) = 0 and ƒ '( x ) ≠ 0 for x ≠ α, x in a neighborhood  U of α, α being a zero of multiplicity  r , and if ƒ ∈ C r ( U ) then there exists a neighborhood of α such that for all starting values x 0 in that neighborhood, the sequence of iterates converges linearly.  However, even linear convergence is not guaranteed in pathological situations.  In practice these results are local, and the neighborhood of convergence is not known in advance. But there are also some results on global convergence: for instance, given a right neighborhood U + of α, if f is twice differentiable in U + and if     f  ⋅   f  ′′    >   0        normal-⋅  f   superscript  f  ′′    0    f\cdot f^{\prime\prime}>0\!   ,     α  .     α   \alpha\,.   in U + , then, for each x 0 in U + the sequence x k is monotonically decreasing to α.  Proof of quadratic convergence for Newton's iterative method  According to Taylor's theorem , any function f ( x ) which has a continuous second derivative can be represented by an expansion about a point that is close to a root of f(x). Suppose this root is      R  1   =    1   2  !     f  ′′    (   ξ  n   )      (   α  -   x  n    )   2      ,       subscript  R  1       1    2     superscript  f  ′′    subscript  ξ  n    superscript    α   subscript  x  n    2      R_{1}=\frac{1}{2!}f^{\prime\prime}(\xi_{n})(\alpha-x_{n})^{2}\,,   Then the expansion of f(α) about x n is:  where the Lagrange form of the Taylor series expansion remainder is       α  .     α   \alpha\,.     where ξ n is in between x n and    α    α   \alpha\,     Since     f  ′    (   x  n   )        superscript  f  normal-′    subscript  x  n     f^{\prime}(x_{n})\,   is the root, () becomes:  Dividing equation () by        α  -   x   n  +  1     ⏟    ϵ   n  +  1     =     -    f  ′′    (   ξ  n   )      2   f  ′    (   x  n   )        (     α  -   x  n    ⏟    ϵ  n    )   2      .       subscript   normal-⏟    α   subscript  x    n  1       subscript  ϵ    n  1              superscript  f  ′′    subscript  ξ  n       2   superscript  f  normal-′    subscript  x  n      superscript   subscript   normal-⏟    α   subscript  x  n      subscript  ϵ  n    2      \underbrace{\alpha-x_{n+1}}_{\epsilon_{n+1}}=\frac{-f^{\prime\prime}(\xi_{n})}%
 {2f^{\prime}(x_{n})}(\underbrace{\alpha-x_{n}}_{\epsilon_{n}})^{2}\,.   and rearranging gives  Remembering that x n +1 is defined by  one finds that          f  ′    (  x  )    ≠  0   ;    ∀  x   ∈   I  , where  I  is the interval   [   α  -  r   ,   α  +  r   ]   for some  r   ≥   |   (   α  -   x  0    )   |     ;     formulae-sequence       superscript  f  normal-′   x   0        for-all  x     I  , where  I  is the interval     α  r     α  r    for some  r            α   subscript  x  0         f^{\prime}(x)\neq 0;\forall x\in I\text{, where }I\text{ is the interval }[%
 \alpha-r,\alpha+r]\text{ for some }r\geq\left|(\alpha-x_{0})\right|;\,     That is,  Taking absolute value of both sides gives \right| = \frac {\left| f^{\prime\prime} (\xi_n) \right| }{2 \left| f^\prime(x_n) \right|} \, {\epsilon_n}^2 \,  | 6 }}  Equation () shows that the rate of convergence is quadratic if the following conditions are satisfied:           f  ′′    (  x  )   is finite   ,   ∀  x    ∈  I   ;          superscript  f  ′′   x  is finite    for-all  x    I    f^{\prime\prime}(x)\text{ is finite },\forall x\in I;\,          x  0      subscript  x  0    x_{0}\,         α    α   \alpha\,    sufficiently close to the root     |   ϵ   n  +  1    |   ≤   M    ϵ  n    2            subscript  ϵ    n  1       M   superscript   subscript  ϵ  n   2      \left|{\epsilon_{n+1}}\right|\leq M{{\epsilon}_{n}}^{2}\,      The term sufficiently close in this context means the following:  (a) Taylor approximation is accurate enough such that we can ignore higher order terms,  (b)     ϵ  n    2      superscript   subscript  ϵ  n   2    {\epsilon_{n}}^{2}\,     Finally, () can be expressed in the following way:      I    I   I\,   where M is the supremum of the variable coefficient of     M  =    sup   x  ∈  I      1  2    |     f  ′′    (  x  )      f  ′    (  x  )     |      .      M    subscript  supremum    x  I        1  2          superscript  f  ′′   x      superscript  f  normal-′   x         M=\sup_{x\in I}\frac{1}{2}\left|{\frac{f^{\prime\prime}(x)}{f^{\prime}(x)}}%
 \right|.\,   on the interval     x  0      subscript  x  0    x_{0}\,   defined in the condition 1, that is:       M   |   ϵ  0   |    <   1.         M     subscript  ϵ  0     1.    M\left|\epsilon_{0}\right|<1.\,     The initial point     f   (  x  )    =     x  3   -   2   x  2    -   11  x    +  12         f  x        superscript  x  3     2   superscript  x  2      11  x    12     f(x)=x^{3}-2x^{2}-11x+12   has to be chosen such that conditions 1 through 3 are satisfied, where the third condition requires that   ∞     \infty     Basins of attraction  The basins of attraction —the regions of the real number line such that within each region iteration from any point leads to one particular root—can be infinite in number and arbitrarily small. For example, 3 for the function    -  ∞         -\infty   , the following initial conditions are in successive basins of attraction:   2.35287527 converges to 4;  2.35284172 converges to −3;  2.35283735 converges to 4;  2.352836327 converges to −3;  2.352836323 converges to 1.   Failure analysis  Newton's method is only guaranteed to converge if certain conditions are satisfied. If the assumptions made in the proof of quadratic convergence are met, the method will converge. For the following subsections, failure of the method to converge indicates that the assumptions made in the proof were not met.  Bad starting points  In some cases the conditions on the function that are necessary for convergence are satisfied, but the point chosen as the initial point is not in the interval where the method converges. This can happen, for example, if the function whose root is sought approaches zero asymptotically as x goes to      f   (  x  )    =   1  -   x  2     .        f  x     1   superscript  x  2      f(x)=1-x^{2}.\!   or      x  1   =    x  0   -    f   (   x  0   )      f  ′    (   x  0   )      =   0  -   1  0     .         subscript  x  1      subscript  x  0       f   subscript  x  0       superscript  f  normal-′    subscript  x  0             0    1  0       x_{1}=x_{0}-\frac{f(x_{0})}{f^{\prime}(x_{0})}=0-\frac{1}{0}.   . In such cases a different method, such as bisection , should be used to obtain a better estimate for the zero to use as an initial point.  Iteration point is stationary  Consider the function:       f   (  x  )    =     x  3   -   2  x    +   2          f  x        superscript  x  3     2  x    2     f(x)=x^{3}-2x+2\!     It has a maximum at x = 0 and solutions of f ( x ) = 0 at x = ±1. If we start iterating from the stationary point  x 0 = 0 (where the derivative is zero), x 1 will be undefined, since the tangent at (0,1) is parallel to the x -axis:        f   (  x  )    =   x  3    .        f  x      3   x     f(x)=\sqrt[3]{x}.     The same issue occurs if, instead of the starting point, any iteration point is stationary. Even if the derivative is small but not zero, the next iteration will be a far worse approximation.  Starting point enters a cycle  For some functions, some starting points may enter an infinite cycle, preventing convergence. Let        x   n  +  1    =    x  n   -    f   (   x  n   )      f  ′    (   x  n   )      =    x  n   -    x  n     1  3       1  3     x  n      1  3   -  1       =    x  n   -    3    x  n     =   -    2    x  n      .         subscript  x    n  1       subscript  x  n       f   subscript  x  n       superscript  f  normal-′    subscript  x  n              subscript  x  n      superscript   subscript  x  n     1  3        1  3    superscript   subscript  x  n       1  3   1               subscript  x  n     3   subscript  x  n              2   subscript  x  n        x_{n+1}=x_{n}-\frac{f(x_{n})}{f^{\prime}(x_{n})}=x_{n}-\frac{{x_{n}}^{\frac{1}%
 {3}}}{\frac{1}{3}\,{x_{n}}^{\frac{1}{3}-1}}=x_{n}-3\,x_{n}=-2\,x_{n}.     and take 0 as the starting point. The first iteration produces 1 and the second iteration returns to 0 so the sequence will alternate between the two without converging to a root. In fact, this 2-cycle is stable: there are neighborhoods around 0 and around 1 from which all points iterate asymptotically to the 2-cycle (and hence not to the root of the function). In general, the behavior of the sequence can be very complex (see Newton fractal ).  Derivative issues  If the function is not continuously differentiable in a neighborhood of the root then it is possible that Newton's method will always diverge and fail, unless the solution is guessed on the first try.  Derivative does not exist at root  A simple example of a function where Newton's method diverges is the cube root, which is continuous and infinitely differentiable, except for x = 0, where its derivative is undefined (this, however, does not affect the algorithm, since it will never require the derivative if the solution is already found):       f   (  x  )    =    |  x  |   α         f  x    superscript    x   α     f(x)=|x|^{\alpha}     For any iteration point x n , the next iteration point will be:      0  <  α  <   1  2         0  α         1  2      0<\alpha<\tfrac{1}{2}     The algorithm overshoots the solution and lands on the other side of the y -axis, farther away than it initially was; applying Newton's method actually doubles the distances from the solution at each iteration.  In fact, the iterations diverge to infinity for every    α  =   1  2       α    1  2     \alpha=\tfrac{1}{2}   , where     f   (  x  )    =   {     0       if  x   =  0   ,        x  +    x  2    sin   (    2  x    )          if  x   ≠  0.             f  x    cases  0      if  x   0     x     superscript  x  2       2  x          if  x   0.      f(x)=\begin{cases}0&\text{if }x=0,\\
 x+x^{2}\sin\left(\frac{2}{x}\right)&\text{if }x\neq 0.\end{cases}   . In the limiting case of      f  ′    (  x  )    =   {     1       if  x   =  0   ,         1  +    2    x    sin   (    2  x    )      -    2    cos   (    2  x    )          if  x   ≠  0.              superscript  f  normal-′   x    cases  1      if  x   0       1    2  x      2  x        2      2  x          if  x   0.      f^{\prime}(x)=\begin{cases}1&\text{if }x=0,\\
 1+2\,x\,\sin\left(\frac{2}{x}\right)-2\,\cos\left(\frac{2}{x}\right)&\text{if %
 }x\neq 0.\end{cases}   (square root), the iterations will alternate indefinitely between points x 0 and − x 0 , so they do not converge in this case either.  Discontinuous derivative  If the derivative is not continuous at the root, then convergence may fail to occur in any neighborhood of the root. Consider the function       f   (  x  )    =    x  2          f  x    superscript  x  2     f(x)=x^{2}\!     Its derivative is:        f  ′    (  x  )    =   2   x           superscript  f  normal-′   x     2  x     f^{\prime}(x)=2x\!     Within any neighborhood of the root, this derivative keeps changing sign as x approaches 0 from the right (or from the left) while f ( x ) ≥ x − x 2 > 0 for 0 '( x ) is unbounded near the root, and Newton's method will diverge almost everywhere in any neighborhood of it, even though:   the function is differentiable (and thus continuous) everywhere;  the derivative at the root is nonzero;  f is infinitely differentiable except at the root; and  the derivative is bounded in a neighborhood of the root (unlike f ( x )/ f '( x )).   Non-quadratic convergence  In some cases the iterates converge but do not converge as quickly as promised. In these cases simpler methods converge just as quickly as Newton's method.  Zero derivative  If the first derivative is zero at the root, then convergence will not be quadratic. Indeed, let       x  -     f   (  x  )    /   f  ′     (  x  )     =   x  /   2          x        f  x    superscript  f  normal-′    x      x  2     x-f(x)/f^{\prime}(x)=x/2\!     then     f   (  x  )    =     x  2    (   x  -  1000   )    +   1.          f  x        superscript  x  2     x  1000    1.     f(x)=x^{2}(x-1000)+1.\!   and consequently      f   (  x  )    =   x  +   x   4  3      .        f  x     x   superscript  x    4  3       f(x)=x+x^{\frac{4}{3}}.\!   . So convergence is not quadratic, even though the function is infinitely differentiable everywhere.  Similar problems occur even when the root is only "nearly" double. For example, let         f  ′    (  x  )    =   1  +    4  3    x   1  3       .         superscript  f  normal-′   x     1      4  3    superscript  x    1  3        f^{\prime}(x)=1+\frac{4}{3}x^{\frac{1}{3}}.\!     Then the first few iterates starting at x 0 = 1 are 1, 0.500250376, 0.251062828, 0.127507934, 0.067671976, 0.041224176, 0.032741218, 0.031642362; it takes six iterations to reach a point where the convergence appears to be quadratic.  No second derivative  If there is no second derivative at the root, then convergence may fail to be quadratic. Indeed, let        f  ′′    (  x  )    =    4  9     x   -   2  3              superscript  f  ′′   x       4  9    superscript  x      2  3        f^{\prime\prime}(x)=\frac{4}{9}x^{-\frac{2}{3}}\!   Then      x  =   0       x  0    x=0\!   And       x  n      subscript  x  n    x_{n}\!   except when     x   n  +  1    =    x  n   -    f   (   x  n   )      f  ′    (   x  n   )      =      1  3    x  n     4  3      (   1  +    4  3    x  n     1  3      )            subscript  x    n  1       subscript  x  n       f   subscript  x  n       superscript  f  normal-′    subscript  x  n                 1  3    superscript   subscript  x  n     4  3       1      4  3    superscript   subscript  x  n     1  3          x_{n+1}=x_{n}-\frac{f(x_{n})}{f^{\prime}(x_{n})}=\frac{\frac{1}{3}{x_{n}}^{%
 \frac{4}{3}}}{(1+\frac{4}{3}{x_{n}}^{\frac{1}{3}})}\!   where it is undefined. Given     x  n      subscript  x  n    x_{n}\!   ,      f    f   f\!     which has approximately 4/3 times as many bits of precision as     x  2   +  1       superscript  x  2   1    x^{2}+1   has. This is less than the 2 times as many which would be required for quadratic convergence. So the convergence of Newton's method (in this case) is not quadratic, even though: the function is continuously differentiable everywhere; the derivative is not zero at the root; and      J  F    (   x  n   )    (    x   n  +  1    -   x  n    )    =   -   F   (   x  n   )            subscript  J  F    subscript  x  n      subscript  x    n  1     subscript  x  n         F   subscript  x  n       J_{F}(x_{n})(x_{n+1}-x_{n})=-F(x_{n})\,\!   is infinitely differentiable except at the desired root.  Generalizations  Complex functions  thumb|Basins of attraction for x 5 - 1 = 0; darker means more iterations to converge. When dealing with complex functions , Newton's method can be directly applied to find their zeroes. Each zero has a basin of attraction in the complex plane, the set of all starting values that cause the method to converge to that particular zero. These sets can be mapped as in the image shown. For many complex functions, the boundaries of the basins of attraction are fractals .  In some cases there are regions in the complex plane which are not in any of these basins of attraction, meaning the iterates do not converge. For example, 4 if one uses a real initial condition to seek a root of      X   n  +  1    =    X  n   -     [    F  ′    (   X  n   )    ]    -  1    F   (   X  n   )      ,       subscript  X    n  1       subscript  X  n      superscript   delimited-[]     superscript  F  normal-′    subscript  X  n       1    F   subscript  X  n       X_{n+1}=X_{n}-[F^{\prime}(X_{n})]^{-1}F(X_{n}),\,   , all subsequent iterates will be real numbers and so the iterations cannot converge to either root, since both roots are non-real. In this case almost all real initial conditions lead to chaotic behavior , while some initial conditions iterate either to infinity or to repeating cycles of any finite length.  Curt McMullen has shown that for any possible purely iterative algorithm similar to Newton's Method, the algorithm will diverge on some open regions of the complex plane when applied to some polynomial of degree d ≥ 4. However, McMullen gave a generally convergent algorithm for polynomials of degree d = 3. 5  Nonlinear systems of equations  k variables, k functions  One may also use Newton's method to solve systems of k (non-linear) equations, which amounts to finding the zeroes of continuously differentiable functions F : R k  →  R k . In the formulation given above, one then has to left multiply with the inverse of the k -by- k  Jacobian matrix  J F ( x n ) instead of dividing by f '( x n ).  Rather than actually computing the inverse of this matrix, one can save time by solving the system of linear equations       F  ′    (   X  n   )        superscript  F  normal-′    subscript  X  n     F^{\prime}(X_{n})     for the unknown x n +1 − x n .  k variables, m equations, with m > k  The k-dimensional Newton's method can be used to solve systems of >k (non-linear) equations as well if the algorithm uses the generalized inverse of the non-square Jacobian matrix J + = ((J T J) −1 )J T instead of the inverse of J. If the nonlinear system has no solution, the method attempts to find a solution in the non-linear least squares sense. See Gauss–Newton algorithm for more information.  Nonlinear equations in a Banach space  Another generalization is Newton's method to find a root of a functional  F defined in a Banach space . In this case the formulation is      X  n     subscript  X  n    X_{n}     where    X  n     subscript  X  n    X_{n}   is the Fréchet derivative computed at    f   (  x  )       f  x    f(x)   . One needs the Fréchet derivative to be boundedly invertible at each    [  a  ,  b  ]     a  b    [a,b]   in order for the method to be applicable. A condition for existence of and convergence to a root is given by the Newton–Kantorovich theorem .  Nonlinear equations over p -adic numbers  In p -adic analysis, the standard method to show a polynomial equation in one variable has a p -adic root is Hensel's lemma , which uses the recursion from Newton's method on the p -adic numbers. Because of the more stable behavior of addition and multiplication in the p -adic numbers compared to the real numbers (specifically, the unit ball in the p -adics is a ring), convergence in Hensel's lemma can be guaranteed under much simpler hypotheses than in the classical Newton's method on the real line.  Newton-Fourier method  The Newton-Fourier method is Joseph Fourier 's extension of Newton's method to provide bounds on the absolute error of the root approximation, while still providing quadratic convergence.  Assume that   f   f   f   is twice continuously differentiable on      f  ′    (  x  )    f  ′′    (  x  )    ≠  0         superscript  f  normal-′   x   superscript  f  ′′   x   0    f^{\prime}(x)f^{\prime\prime}(x)\neq 0   and that     f   (  a  )    <  0        f  a   0    f(a)<0   contains a root in this interval. Assume that     f   (  b  )    >  0        f  b   0    f(b)>0   on this interval (this is the case for instance if      f  ′    (  x  )    >  0         superscript  f  normal-′   x   0    f^{\prime}(x)>0   ,      f  ′′    (  x  )    >  0         superscript  f  ′′   x   0    f^{\prime\prime}(x)>0   , and   α   α   \alpha   , and    f   (  x  )       f  x    f(x)   on this interval). This guarantees that there is a unique root on this interval, call it    -   f   (  x  )          f  x     -f(x)   . If it is concave down instead of concave up then replace     x  0   =  b       subscript  x  0   b    x_{0}=b   by     z  0   =  a       subscript  z  0   a    z_{0}=a   since they have the same roots.  Let    x  n     subscript  x  n    x_{n}   be the right endpoint of the interval and let     x   n  +  1    =    x  n   -    f   (   x  n   )      f  ′    (   x  n   )           subscript  x    n  1       subscript  x  n       f   subscript  x  n       superscript  f  normal-′    subscript  x  n        x_{n+1}=x_{n}-\frac{f(x_{n})}{f^{\prime}(x_{n})}   be the left endpoint of the interval. Given     z   n  +  1    =    z  n   -    f   (   z  n   )      f  ′    (   x  n   )           subscript  z    n  1       subscript  z  n       f   subscript  z  n       superscript  f  normal-′    subscript  x  n        z_{n+1}=z_{n}-\frac{f(z_{n})}{f^{\prime}(x_{n})}   , define     f  ′    (   x  n   )        superscript  f  normal-′    subscript  x  n     f^{\prime}(x_{n})   , which is just Newton's method as before. Then define     f  ′    (   z  n   )        superscript  f  normal-′    subscript  z  n     f^{\prime}(z_{n})   and note that the denominator has    x  n     subscript  x  n    x_{n}   and not    z  n     subscript  z  n    z_{n}   . The iterates      lim   n  →  ∞       x   n  +  1    -   z   n  +  1       (    x  n   -   z  n    )   2     =     f  ′′    (  α  )     2   f  ′    (  α  )           subscript    normal-→  n          subscript  x    n  1     subscript  z    n  1      superscript     subscript  x  n    subscript  z  n    2          superscript  f  ′′   α     2   superscript  f  normal-′   α      \lim_{n\to\infty}\frac{x_{n+1}-z_{n+1}}{(x_{n}-z_{n})^{2}}=\frac{f^{\prime%
 \prime}(\alpha)}{2f^{\prime}(\alpha)}   will be strictly decreasing to the root while the iterates    x  n     subscript  x  n    x_{n}   will be strictly increasing to the root. Also,    z  n     subscript  z  n    z_{n}   so that distance between      x   n  +  1    =    x  n   -     f  ′    (   x  n   )      f  ′′    (   x  n   )       .       subscript  x    n  1       subscript  x  n        superscript  f  normal-′    subscript  x  n       superscript  f  ′′    subscript  x  n        x_{n+1}=x_{n}-\frac{f^{\prime}(x_{n})}{f^{\prime\prime}(x_{n})}.\,\!   and     f   (  x  )    =   a  -   1  x          f  x     a    1  x      f(x)=a-\frac{1}{x}   decreases quadratically.  Quasi-Newton methods  When the Jacobian is unavailable or too expensive to compute at every iteration, a Quasi-Newton method can be used.  Applications  Minimization and maximization problems  Newton's method can be used to find a minimum or maximum of a function. The derivative is zero at a minimum or maximum, so minima and maxima can be found by applying Newton's method to the derivative. The iteration becomes:      x   n  +  1      subscript  x    n  1     \displaystyle x_{n+1}     Multiplicative inverses of numbers and power series  An important application is Newton–Raphson division , which can be used to quickly find the reciprocal of a number, using only multiplication and subtraction.  Finding the reciprocal of a amounts to finding the root of the function        g   (  x  )    =   h   (  x  )     ,        g  x     h  x     g(x)=h(x),\,\!   Newton's iteration is        f   (  x  )    =    g   (  x  )    -   h   (  x  )      .        f  x       g  x     h  x      f(x)=g(x)-h(x).\,\!   Therefore, Newton's iteration needs only two multiplications and one subtraction.  This method is also very efficient to compute the multiplicative inverse of a power series .  Solving transcendental equations  Many transcendental equations can be solved using Newton's method. Given the equation        x   2   =  612       superscript  x  2   612    \,x^{2}=612   with g(x) and/or h(x) a transcendental function , one writes        f    (  x  )    =    x  2   -  612         f  x      superscript  x  2   612     \,f(x)=x^{2}-612   The values of x that solves the original equation are then the roots of f(x) , which may be found via Newton's method.  Examples  Square root of a number  Consider the problem of finding the square root of a number. Newton's method is one of many methods of computing square roots .  For example, if one wishes to find the square root of 612, this is equivalent to finding the solution to         f  ′    (  x  )    =   2  x    .         superscript  f  normal-′   x     2  x     f^{\prime}(x)=2x.\,     The function to use in Newton's method is then,         x  1     =      x  0   -    f   (   x  0   )      f  ′    (   x  0   )        =     10  -     10  2   -  612    2  ⋅  10       =    35.6       x  2     =      x  1   -    f   (   x  1   )      f  ′    (   x  1   )        =     35.6  -     35.6  2   -  612    2  ⋅  35.6       =      2  ¯   6.395505617978  …        x  3     =    ⋮    =    ⋮    =      24.7  ¯   90635492455  …        x  4     =    ⋮    =    ⋮    =      24.7386  ¯   88294075  …        x  5     =    ⋮    =    ⋮    =      24.7386337537  ¯   67  …          subscript  x  1       subscript  x  0       f   subscript  x  0       superscript  f  normal-′    subscript  x  0         10       superscript  10  2   612    normal-⋅  2  10      35.6     subscript  x  2       subscript  x  1       f   subscript  x  1       superscript  f  normal-′    subscript  x  1         35.6       superscript  35.6  2   612    normal-⋅  2  35.6         normal-¯  2   6.395505617978  normal-…      subscript  x  3    normal-⋮   normal-⋮      normal-¯  24.7   90635492455  normal-…      subscript  x  4    normal-⋮   normal-⋮      normal-¯  24.7386   88294075  normal-…      subscript  x  5    normal-⋮   normal-⋮      normal-¯  24.7386337537   67  normal-…      \begin{matrix}x_{1}&=&x_{0}-\dfrac{f(x_{0})}{f^{\prime}(x_{0})}&=&10-\dfrac{10%
 ^{2}-612}{2\cdot 10}&=&35.6\\
 x_{2}&=&x_{1}-\dfrac{f(x_{1})}{f^{\prime}(x_{1})}&=&35.6-\dfrac{35.6^{2}-612}{%
 2\cdot 35.6}&=&\underline{2}6.395505617978\dots\\
 x_{3}&=&\vdots&=&\vdots&=&\underline{24.7}90635492455\dots\\
 x_{4}&=&\vdots&=&\vdots&=&\underline{24.7386}88294075\dots\\
 x_{5}&=&\vdots&=&\vdots&=&\underline{24.7386337537}67\dots\end{matrix}     with derivative,         x  1     =      x  0   -    f   (   x  0   )      f  ′    (   x  0   )        =     0.5  -     cos   (  0.5  )    -    (  0.5  )   3      -   sin   (  0.5  )     -   3    (  0.5  )   2         =    1.112141637097       x  2     =      x  1   -    f   (   x  1   )      f  ′    (   x  1   )        =    ⋮    =      0.  ¯   909672693736        x  3     =    ⋮    =    ⋮    =      0.86  ¯   7263818209        x  4     =    ⋮    =    ⋮    =      0.86547  ¯   7135298        x  5     =    ⋮    =    ⋮    =      0.8654740331  ¯   11        x  6     =    ⋮    =    ⋮    =     0.865474033102  ¯          subscript  x  1       subscript  x  0       f   subscript  x  0       superscript  f  normal-′    subscript  x  0         0.5        0.5    superscript  0.5  3          0.5      3   superscript  0.5  2        1.112141637097     subscript  x  2       subscript  x  1       f   subscript  x  1       superscript  f  normal-′    subscript  x  1       normal-⋮      normal-¯  0.   909672693736      subscript  x  3    normal-⋮   normal-⋮      normal-¯  0.86   7263818209      subscript  x  4    normal-⋮   normal-⋮      normal-¯  0.86547   7135298      subscript  x  5    normal-⋮   normal-⋮      normal-¯  0.8654740331   11      subscript  x  6    normal-⋮   normal-⋮    normal-¯  0.865474033102      \begin{matrix}x_{1}&=&x_{0}-\dfrac{f(x_{0})}{f^{\prime}(x_{0})}&=&0.5-\dfrac{%
 \cos(0.5)-(0.5)^{3}}{-\sin(0.5)-3(0.5)^{2}}&=&1.112141637097\\
 x_{2}&=&x_{1}-\dfrac{f(x_{1})}{f^{\prime}(x_{1})}&=&\vdots&=&\underline{0.}909%
 672693736\\
 x_{3}&=&\vdots&=&\vdots&=&\underline{0.86}7263818209\\
 x_{4}&=&\vdots&=&\vdots&=&\underline{0.86547}7135298\\
 x_{5}&=&\vdots&=&\vdots&=&\underline{0.8654740331}11\\
 x_{6}&=&\vdots&=&\vdots&=&\underline{0.865474033102}\end{matrix}     With an initial guess of 10, the sequence given by Newton's method is       x  0   =  1       subscript  x  0   1    x_{0}=1     where the correct digits are underlined. With only a few iterations one can obtain a solution accurate to many decimal places.  === Solution of cos( x ) = x 3 === Consider the problem of finding the positive number x with cos( x ) = x 3 . We can rephrase that as finding the zero of f ( x ) = cos( x ) − x 3 . We have f '( x ) = −sin( x ) − 3 x 2 . Since cos( x ) ≤ 1 for all x and x 3 > 1 for x > 1, we know that our solution lies between 0 and 1. We try a starting value of x 0 = 0.5. (Note that a starting value of 0 will lead to an undefined result, showing the importance of using a starting point that is close to the solution.)       f   (  x  )    =    x  2   -  2         f  x      superscript  x  2   2     f(x)=x^{2}-2     The correct digits are underlined in the above example. In particular, x 6 is correct to the number of decimal places given. We see that the number of correct digits after the decimal point increases from 2 (for x 3 ) to 5 and 10, illustrating the quadratic convergence.  Pseudocode  The following is an example of using the Newton's Method to help find a root of a function f which has derivative fprime .  The initial guess will be      f  ′    (  x  )    =   2  x          superscript  f  normal-′   x     2  x     f^{\prime}(x)=2x   and the function will be      f  ′    (   x  n   )    ≈  0         superscript  f  normal-′    subscript  x  n    0    f^{\prime}(x_{n})\approx 0   so that $f'(x) = 2x$ .  Each new iterative of Newton's method will be denoted by x1 . We will check during the computation whether the denominator ( yprime ) becomes too small (smaller than epsilon ), which would be the case if $f'(x_n) \approx 0$ , since otherwise a large amount of error could be introduced.  %These choices depend on the problem being solved x0 = 1  %The initial value f = @(x) x^ 2 - 2  %The function whose root we are trying to find fprime = @(x) 2 *x %The derivative of f(x) tolerance = 10 ^(- 7 ) %7 digit accuracy is desired epsilon = 10 ^(- 14 ) %Don't want to divide by a number smaller than this maxIterations = 20  %Don't allow the iterations to continue indefinitely haveWeFoundSolution = false %Have not converged to a solution yet for i = 1 : maxIterations 
 
     y = f(x0)
     yprime = fprime(x0)
 
     if(abs(yprime) < epsilon) %Don't want to divide by too small of a number  % denominator is too small break; %Leave the loop end
 
     x1 = x0 - y/yprime %Do Newton's computation if(abs(x1 - x0)/abs(x1) < tolerance) %If the result is within the desired tolerance haveWeFoundSolution = true
         break; %Done, so leave the loop end
 
     x0 = x1 %Update x0 to start the process again end
 
 if (haveWeFoundSolution)
    ... % x1 is a solution within tolerance and maximum number of iterations else 
    ... % did not converge end  See also   Aitken's delta-squared process  Bisection method  Euler method  Fast inverse square root  Fisher scoring  Gradient descent  Integer square root  Laguerre's method  Leonid Kantorovich , who initiated the convergence analysis of Newton's method in Banach spaces.  Methods of computing square roots  Newton's method in optimization  Richardson extrapolation  Root-finding algorithm  Secant method  Steffensen's method  Subgradient method   References    External links       Kendall E. Atkinson, An Introduction to Numerical Analysis , (1989) John Wiley & Sons, Inc, ISBN 0-471-62489-6  Tjalling J. Ypma, Historical development of the Newton-Raphson method, SIAM Review  37 (4), 531–551, 1995. .   P. Deuflhard, Newton Methods for Nonlinear Problems. Affine Invariance and Adaptive Algorithms. Springer Series in Computational Mathematics, Vol. 35. Springer, Berlin, 2004. ISBN 3-540-21099-7.  C. T. Kelley, Solving Nonlinear Equations with Newton's Method , no 1 in Fundamentals of Algorithms, SIAM, 2003. ISBN 0-89871-546-6.  J. M. Ortega, W. C. Rheinboldt, Iterative Solution of Nonlinear Equations in Several Variables. Classics in Applied Mathematics, SIAM, 2000. ISBN 0-89871-461-3.   . See especially Sections 9.4 , 9.6 , and 9.7 .  Endre Süli and David Mayers, An Introduction to Numerical Analysis , Cambridge University Press, 2003. ISBN 0-521-00794-1.   .   "  Category:Optimization algorithms and methods  Category:Root-finding algorithms     ↩  . ↩  Dence, Thomas, "Cubics, chaos and Newton's method", Mathematical Gazette 81, November 1997, 403-408. ↩  Strang, Gilbert, "A chaotic search for i ", ' ' The College Mathematics Journal 22, January 1991, pp. 3-12 (esp. p. 6). ↩  McMullen, Curt, "Families of rational maps and iterative root-finding algorithms", Ann. of Math. (2) 125 (1987), no. 3, 467–493. ↩    