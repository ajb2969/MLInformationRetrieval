   Rotation formalisms in three dimensions      Rotation formalisms in three dimensions   In geometry , various formalisms exist to express a rotation in three dimensions as a mathematical transformation . In physics, this concept is applied to classical mechanics where rotational (or angular) kinematics is the science of quantitative description of a purely rotational motion . The orientation of an object at a given instant is described with the same tools, as it is defined as an imaginary rotation from a reference placement in space, rather than an actually observed rotation from a previous placement in space.  According to Euler's rotation theorem the rotation of a rigid body (or three-dimensional coordinate system with the fixed origin ) is described by a single rotation about some axis. Such a rotation may be uniquely described by a minimum of three real parameters. However, for various reasons, there are several ways to represent it. Many of these representations use more than the necessary minimum of three parameters, although each of them still has only three degrees of freedom .  An example where rotation representation is used is in computer vision , where an automated observer needs to track a target. Let's consider a rigid body, with three orthogonal unit vectors fixed to its body (representing the three axes of the object's local coordinate system ). The basic problem is to specify the orientation of these three unit vectors , and hence the rigid body, with respect to the observer's coordinate system, regarded as a reference placement in space.  Rotations and motions  Rotation formalisms are focused on proper ( orientation-preserving ) motions of the Euclidean space with one fixed point , that a rotation refers to. Although physical motions with a fixed point are an important case (such as ones described in the center-of-mass frame , or motions of a joint ), this approach creates a knowledge about all motions. Any proper motion of the Euclidean space decomposes to a rotation around the origin and a translation . Whichever the order of their composition will be, the "pure" rotation component wouldn't change, uniquely determined by the complete motion.  One can also understand "pure" rotations as linear maps in a vector space equipped with Euclidean structure, not as maps of points of a corresponding affine space . In other words, a rotation formalism captures only the rotational part of a motion, that contains three degrees of freedom, and ignores the translational part, that contains another three.  Formalism alternatives  Rotation matrix  The above-mentioned triad of unit vectors is also called a basis . Specifying the coordinates ( components ) of vectors of this basis in its current (rotated) position, in terms of the reference (non-rotated) coordinate axes, will completely describe the rotation. The three unit vectors,    𝐮  ^     normal-^  𝐮    \scriptstyle\hat{\mathbf{u}}   ,    𝐯  ^     normal-^  𝐯    \scriptstyle\hat{\mathbf{v}}   and    𝐰  ^     normal-^  𝐰    \scriptstyle\hat{\mathbf{w}}   , that form the rotated basis each consist of 3 coordinates, yielding a total of 9 parameters.  These parameters can be written as the elements of a  matrix A , called a rotation matrix . Typically, the coordinates of each of these vectors are arranged along a column of the matrix (however, beware that an alternative definition of rotation matrix exists and is widely used, where the vectors coordinates defined above are arranged by rows 1 )      𝐀  =   [       𝐮  ^   x       𝐯  ^   x       𝐰  ^   x         𝐮  ^   y       𝐯  ^   y       𝐰  ^   y         𝐮  ^   z       𝐯  ^   z       𝐰  ^   z      ]       𝐀   delimited-[]     subscript   normal-^  𝐮   x    subscript   normal-^  𝐯   x    subscript   normal-^  𝐰   x      subscript   normal-^  𝐮   y    subscript   normal-^  𝐯   y    subscript   normal-^  𝐰   y      subscript   normal-^  𝐮   z    subscript   normal-^  𝐯   z    subscript   normal-^  𝐰   z        \mathbf{A}=\left[{\begin{array}[]{ccc}\hat{\mathbf{u}}_{x}&\hat{\mathbf{v}}_{x%
 }&\hat{\mathbf{w}}_{x}\\
 \hat{\mathbf{u}}_{y}&\hat{\mathbf{v}}_{y}&\hat{\mathbf{w}}_{y}\\
 \hat{\mathbf{u}}_{z}&\hat{\mathbf{v}}_{z}&\hat{\mathbf{w}}_{z}\\
 \end{array}}\right]     The elements of the rotation matrix are not all independent—as Euler's rotation theorem dictates, the rotation matrix has only three degrees of freedom.  The rotation matrix has the following properties:   A is a real, orthogonal matrix , hence each of its rows or columns represents a unit vector .  The eigenvalues of A are          {  1  ,   e   ±   i  θ     }   =   {  1  ,    cos   (  θ  )    +   i   sin   (  θ  )      ,    cos   (  θ  )    -   i   sin   (  θ  )      }        1   superscript  e   plus-or-minus    i  θ       1      θ     i    θ         θ     i    θ        \{1,e^{\pm i\theta}\}=\{1,\ \cos(\theta)+i\sin(\theta),\ \cos(\theta)-i\sin(%
 \theta)\}       where i is the standard imaginary unit with the property i 2 = −1    The determinant of A is +1, equivalent to the product of its eigenvalues.  The trace of A is     1   +   2   cos   (  θ  )         1    2    θ      \scriptstyle 1\,+\,2\cos(\theta)   , equivalent to the sum of its eigenvalues.   The angle   θ   θ   \scriptstyle\theta   which appears in the eigenvalue expression corresponds to the angle of the Euler axis and angle representation. The eigenvector corresponding to the eigenvalue of 1 is the accompanying Euler axis, since the axis is the only (nonzero) vector which remains unchanged by left-multiplying (rotating) it with the rotation matrix.  The above properties are equivalent to:       |   𝐮  ^   |   =   |   𝐯  ^   |          normal-^  𝐮       normal-^  𝐯      \displaystyle|\hat{\mathbf{u}}|=|\hat{\mathbf{v}}|   which is another way of stating that    (   𝐮  ^   ,   𝐯  ^   ,   𝐰  ^   )      normal-^  𝐮    normal-^  𝐯    normal-^  𝐰     (\hat{\mathbf{u}},\,\hat{\mathbf{v}},\,\hat{\mathbf{w}})   form a 3D orthonormal basis . These statements comprise a total of 6 conditions (the cross product contains 3), leaving the rotation matrix with just 3 degrees of freedom, as required.  Two successive rotations represented by matrices    𝐀  1     subscript  𝐀  1    \scriptstyle\mathbf{A}_{1}   and    𝐀  2     subscript  𝐀  2    \scriptstyle\mathbf{A}_{2}   are easily combined as elements of a group,        𝐀  total    =    𝐀  2    𝐀  1         subscript  𝐀  total      subscript  𝐀  2    subscript  𝐀  1      \scriptstyle\mathbf{A}_{\text{total}}\;=\;\mathbf{A}_{2}\mathbf{A}_{1}   (Note the order, since the vector being rotated is multiplied from the right). The ease by which vectors can be rotated using a rotation matrix, as well as the ease of combining successive rotations, make the rotation matrix a useful and popular way to represent rotations, even though it is less concise than other representations.  Euler axis and angle (rotation vector)  From Euler's rotation theorem we know that any rotation can be expressed as a single rotation about some axis. The axis is the unit vector (unique except for sign) which remains unchanged by the rotation. The magnitude of the angle is also unique, with its sign being determined by the sign of the rotation axis.  The axis can be represented as a three-dimensional unit vector       𝐞  ^    =    [     e  x      e  y     e  z    ]   T        normal-^  𝐞    superscript   delimited-[]     subscript  e  x    subscript  e  y    subscript  e  z     normal-T     \scriptstyle\hat{\mathbf{e}}\;=\;[e_{x}\ e_{y}\ e_{z}]^{\mathrm{T}}   , and the angle by a scalar   θ   θ   \scriptstyle\theta   .  Since the axis is normalized, it has only two degrees of freedom . The angle adds the third degree of freedom to this rotation representation.  One may wish to express rotation as a rotation vector , or Euler vector , an un-normalized three-dimensional vector the direction of which specifies the axis, and the length of which is θ ,       𝐫  =   θ    𝐞  ^      .      𝐫    θ   normal-^  𝐞      \mathbf{r}=\theta\hat{\mathbf{e}}~{}.     The rotation vector is in some contexts useful, as it represents a three-dimensional rotation with only three scalar values (its components), representing the three degrees of freedom. This is also true for representations based on sequences of three Euler angles (see below).  If the rotation angle   θ   θ   \scriptstyle\theta   is zero, the axis is not uniquely defined. Combining two successive rotations, each represented by an Euler axis and angle, is not straightforward, and in fact does not satisfy the law of vector addition, which shows that finite rotations are not really vectors at all. It is best to employ the rotation matrix or quaternion notation, calculate the product, and then convert back to Euler axis and angle.  Euler rotations  The idea behind Euler rotations is to split the complete rotation of the coordinate system into three simpler constitutive rotations, called Precession , Nutation , and intrinsic rotation , being each one of them an increment on one of the Euler angles . Notice that the outer matrix will represent a rotation around one of the axes of the reference frame, and the inner matrix represents a rotation around one of the moving frame axis. The middle matrix represent a rotation around an intermediate axis called line of nodes .  Unfortunately, the definition of Euler angles is not unique and in the literature many different conventions are used. These conventions depend on the axes about which the rotations are carried out, and their sequence (since rotations are not commutative ).  The convention being used is usually indicated by specifying the axes about which the consecutive rotations (before being composed) take place, referring to them by index (1, 2, 3) or letter (X, Y, Z). The engineering and robotics communities typically use 3-1-3 Euler angles. Notice that after composing the independent rotations, they do not rotate about their axis anymore. The most external matrix rotates the other two, leaving the second rotation matrix over the line of nodes, and the third one in a frame comoving with the body. There are  = 27 possible combinations of three basic rotations but only  = 12 of them can be used for representing arbitrary 3D rotations as Euler angles. These 12 combinations avoid consecutive rotations around the same axis (such as XXY) which would reduce the degrees of freedom that can be represented.  Therefore Euler angles are never expressed in terms of the external frame, or in terms of the co-moving rotated body frame, but in a mixture. Other conventions (e.g., rotation matrix or quaternions ) are used to avoid this problem.  In aviation orientation of the aircraft is usually expressed as intrinsic  Tait-Bryan angles following z-y’-x″ convention, which are called heading , elevation and bank , or yaw , pitch and roll .  Quaternions  Quaternions , that form a four-dimensional vector space , have proven very useful in representing rotations due to several advantages above the other representations mentioned in this article.  A quaternion representation of rotation is written as a versor (normalized quaternion)       𝐪  ^   =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r    =    [     q  i      q  j      q  k     q  r    ]   T          normal-^  𝐪       𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r          superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k    subscript  q  r     normal-T      \hat{\mathbf{q}}=\mathbf{i}q_{i}+\mathbf{j}q_{j}+\mathbf{k}q_{k}+q_{r}=[q_{i}%
 \ q_{j}\ q_{k}\ q_{r}]^{\mathrm{T}}     The above definition stores quaternion as an array following the convention used in (Wertz 1980) and (Markley 2003). An alternative definition used for example in (Coutsias 1999) and (Schmidt 2001) defines the "scalar" term as the first quaternion element, with the other elements shifted down one position.  In terms of the Euler axis       𝐞  ^   =    [     e  x      e  y     e  z    ]   T        normal-^  𝐞    superscript   delimited-[]     subscript  e  x    subscript  e  y    subscript  e  z     normal-T     \hat{\mathbf{e}}=[e_{x}\ e_{y}\ e_{z}]^{\mathrm{T}}     and angle     θ   θ   \theta     this versor's components are expressed as follows:      q  i     subscript  q  i    \displaystyle q_{i}     Inspection shows that the quaternion parametrization obeys the following constraint:        q  i  2   +   q  j  2   +   q  k  2   +   q  r  2    =  1         superscript   subscript  q  i   2    superscript   subscript  q  j   2    superscript   subscript  q  k   2    superscript   subscript  q  r   2    1    q_{i}^{2}+q_{j}^{2}+q_{k}^{2}+q_{r}^{2}=1     The last term (in our definition) is often called the scalar term, which has its origin in quaternions when understood as the mathematical extension of the complex numbers, written as      a  +   b  i   +   c  j   +   d  k       a    b  i     c  j     d  k     a+bi+cj+dk   with     {  a  ,  b  ,  c  ,  d  }   ∈  ℝ       a  b  c  d   ℝ    \{a,b,c,d\}\in\mathbb{R}     and where    {  i  ,  j  ,  k  }     i  j  k    \scriptstyle\{i,\,j,\,k\}   are the hypercomplex numbers satisfying         i  2     =     j  2     =     k  2     =     -  1        i  j     =     -   j  i      =    k         j  k     =     -   k  j      =    i         k  i     =     -   i  k      =    j           superscript  i  2     superscript  j  2     superscript  k  2      1       i  j        j  i     k   missing-subexpression    missing-subexpression       j  k        k  j     i   missing-subexpression    missing-subexpression       k  i        i  k     j   missing-subexpression    missing-subexpression      \begin{array}[]{lclrlcl}i^{2}&=&j^{2}&=&k^{2}&=&-1\\
 ij&=&-ji&=&k&&\\
 jk&=&-kj&=&i&&\\
 ki&=&-ik&=&j&&\end{array}     Quaternion multiplication, that is used to specify a composite rotation, is performed in the same manner as multiplication of complex numbers , except that the order of elements must be taken into account, since multiplication is not commutative. In matrix notation we can write quaternion multiplication as        𝐪  ~   ⊗  𝐪   =    [      q  r      q  k      -   q  j       q  i        -   q  k       q  r      q  i      q  j        q  j      -   q  i       q  r      q  k        -   q  i       -   q  j       -   q  k       q  r      ]    [       q  ~   i         q  ~   j         q  ~   k         q  ~   r      ]    =    [       q  ~   r      -    q  ~   k        q  ~   j       q  ~   i         q  ~   k       q  ~   r      -    q  ~   i        q  ~   j        -    q  ~   j        q  ~   i       q  ~   r       q  ~   k        -    q  ~   i       -    q  ~   j       -    q  ~   k        q  ~   r      ]    [      q  i        q  j        q  k        q  r      ]           tensor-product   normal-~  𝐪   𝐪      delimited-[]     subscript  q  r    subscript  q  k      subscript  q  j     subscript  q  i        subscript  q  k     subscript  q  r    subscript  q  i    subscript  q  j      subscript  q  j      subscript  q  i     subscript  q  r    subscript  q  k        subscript  q  i       subscript  q  j       subscript  q  k     subscript  q  r       delimited-[]     subscript   normal-~  q   i      subscript   normal-~  q   j      subscript   normal-~  q   k      subscript   normal-~  q   r               delimited-[]     subscript   normal-~  q   r      subscript   normal-~  q   k     subscript   normal-~  q   j    subscript   normal-~  q   i      subscript   normal-~  q   k    subscript   normal-~  q   r      subscript   normal-~  q   i     subscript   normal-~  q   j        subscript   normal-~  q   j     subscript   normal-~  q   i    subscript   normal-~  q   r    subscript   normal-~  q   k        subscript   normal-~  q   i       subscript   normal-~  q   j       subscript   normal-~  q   k     subscript   normal-~  q   r       delimited-[]     subscript  q  i      subscript  q  j      subscript  q  k      subscript  q  r          \tilde{\mathbf{q}}\otimes\mathbf{q}=\left[{\begin{array}[]{rrrr}q_{r}&q_{k}&-q%
 _{j}&q_{i}\\
 -q_{k}&q_{r}&q_{i}&q_{j}\\
 q_{j}&-q_{i}&q_{r}&q_{k}\\
 -q_{i}&-q_{j}&-q_{k}&q_{r}\end{array}}\right]\left[{\begin{array}[]{c}\tilde{q%
 }_{i}\\
 \tilde{q}_{j}\\
 \tilde{q}_{k}\\
 \tilde{q}_{r}\end{array}}\right]=\left[{\begin{array}[]{rrrr}\tilde{q}_{r}&-%
 \tilde{q}_{k}&\tilde{q}_{j}&\tilde{q}_{i}\\
 \tilde{q}_{k}&\tilde{q}_{r}&-\tilde{q}_{i}&\tilde{q}_{j}\\
 -\tilde{q}_{j}&\tilde{q}_{i}&\tilde{q}_{r}&\tilde{q}_{k}\\
 -\tilde{q}_{i}&-\tilde{q}_{j}&-\tilde{q}_{k}&\tilde{q}_{r}\end{array}}\right]%
 \left[{\begin{array}[]{c}q_{i}\\
 q_{j}\\
 q_{k}\\
 q_{r}\end{array}}\right]     Combining two consecutive quaternion rotations is therefore just as simple as using the rotation matrix. Remember that two successive rotation matrices,    𝐀  1     subscript  𝐀  1    \scriptstyle\mathbf{A}_{1}   followed by    𝐀  2     subscript  𝐀  2    \scriptstyle\mathbf{A}_{2}   , are combined as follows:       𝐀  3   =    𝐀  2    𝐀  1         subscript  𝐀  3      subscript  𝐀  2    subscript  𝐀  1      \mathbf{A}_{3}=\mathbf{A}_{2}\mathbf{A}_{1}     We can represent this with quaternion parameters in a similarly concise way:       𝐪  3   =    𝐪  2   ⊗   𝐪  1         subscript  𝐪  3    tensor-product   subscript  𝐪  2    subscript  𝐪  1      \mathbf{q}_{3}=\mathbf{q}_{2}\otimes\mathbf{q}_{1}     Quaternions are a very popular parametrization due to the following properties:   More compact than the matrix representation and less susceptible to round-off errors  The quaternion elements vary continuously over the unit sphere in    ℝ  4     superscript  ℝ  4    \scriptstyle\mathbb{R}^{4}   , (denoted by    S  3     superscript  S  3    \scriptstyle S^{3}   ) as the orientation changes, avoiding discontinuous jumps (inherent to three-dimensional parameterizations)  Expression of the rotation matrix in terms of quaternion parameters involves no trigonometric functions  It is simple to combine two individual rotations represented as quaternions using a quaternion product   Like rotation matrices, quaternions must sometimes be re-normalized due to rounding errors, to make sure that they correspond to valid rotations. The computational cost of re-normalizing a quaternion, however, is much less than for normalizing a  matrix.  Rodrigues parameters and Gibbs representation  Rodrigues parameters can be expressed in terms of Euler axis and angle as follows, 2      𝐫  =    𝐞  ^   θ       𝐫     normal-^  𝐞   θ     \mathbf{r}=\hat{\mathbf{e}}\theta     This has a discontinuity at 180° (π radians): each vector, r , with a norm of   π   π   π   radians represent the same rotation as − r .  Similarly, the Gibbs representation can be expressed as follows,      𝐠  =    𝐞  ^    tan   (   θ  2   )         𝐠     normal-^  𝐞       θ  2       \mathbf{g}=\hat{\mathbf{e}}\tan\left(\frac{\theta}{2}\right)   A rotation g followed by a rotation f in the Gibbs representation has the form        (  𝐠  ,  𝐟  )   =      𝐠  +  𝐟   -   𝐟  ×  𝐠     1  -   𝐠  ⋅  𝐟       .       𝐠  𝐟         𝐠  𝐟     𝐟  𝐠      1   normal-⋅  𝐠  𝐟       (\mathbf{g},\mathbf{f})=\frac{\mathbf{g}+\mathbf{f}-\mathbf{f}\times\mathbf{g}%
 }{1-\mathbf{g}\cdot\mathbf{f}}~{}.     The Gibbs vector has the advantage (or disadvantage, depending on context) that 180° rotations cannot be represented in it. (Even using floating point numbers that include infinity, rotation direction cannot be well-defined; for example, naively a 180° rotation about the axis (1, 1, 0) would be    (  ∞  ,  ∞  ,  0  )       0    \scriptstyle(\infty,\,\infty,\,0)   , which is the same representation as 180° rotation about (1, 0.0001, 0).)  Modified Rodrigues parameters (MRPs) can be expressed in terms of Euler axis and angle by       𝐩  =    𝐞  ^    tan   (   θ  4   )      .      𝐩     normal-^  𝐞       θ  4       \mathbf{p}=\hat{\mathbf{e}}\tan\left(\frac{\theta}{4}\right)~{}.     The modified Rodrigues parameterization shares many characteristics with the rotation vector parametrization, including the occurrence of discontinuous jumps in the parameter space when incrementing the rotation.  Cayley–Klein parameters  See definition at Wolfram Mathworld .  Higher-dimensional analogues  Conversion formulae between formalisms  Rotation matrix ↔ Euler angles  The Euler angles    (  ϕ  ,  θ  ,  ψ  )     ϕ  θ  ψ    \scriptstyle(\phi,\,\theta,\,\psi)   can be extracted from the rotation matrix   𝐀   𝐀   \scriptstyle\mathbf{A}   by inspecting the rotation matrix in analytical form.  Rotation matrix → Euler angles (z-x-z extrinsic)  Using the x-convention, the 3-1-3 extrinsic Euler angles   ϕ   ϕ   \scriptstyle\phi   ,   θ   θ   \scriptstyle\theta   and   ψ   ψ   \scriptstyle\psi   (around the   Z   Z   \scriptstyle Z   ,   X   X   \scriptstyle X   and again the   Z   Z   \scriptstyle Z   -axis) can be obtained as follows:     ϕ   ϕ   \displaystyle\phi     Note that    arctan2   (  a  ,  b  )      arctan2  a  b    \scriptstyle\operatorname{arctan2}(a,\,b)   is equivalent to    arctan   (   a  /  b   )         a  b     \scriptstyle\arctan(a/b)   where it also takes into account the quadrant that the point    (  a  ,  b  )     a  b    \scriptstyle(a,\,b)   is in; see atan2 .  When implementing the conversion, one has to take into account several situations: 3   There are generally two solutions in (−π, π] 3 interval. The above formula works only when   θ   θ   \theta   is from the interval [0, π) 3 .  For special case      A  33    =  0       subscript  A  33   0    \scriptstyle A_{33}\;=\;0   ,    ϕ  ,  ψ     ϕ  ψ    \scriptstyle\phi,\,\psi   shall be derived from     A  11   ,   A  12       subscript  A  11    subscript  A  12     \scriptstyle A_{11},\,A_{12}   .  There is infinitely many but countably many solutions outside of interval (−π, π] 3 .  Whether all mathematical solutions apply for given application depends on the situation.   Euler angles (x-y-z extrinsic) → Rotation matrix  The rotation matrix   𝐀   𝐀   \scriptstyle\mathbf{A}   is generated from the 1-2-3 extrinsic Euler angles by multiplying the three matrices generated by rotations about the axes.      𝐀  =    𝐀  3    𝐀  2    𝐀  1    =    𝐀  Z    𝐀  Y    𝐀  X          𝐀     subscript  𝐀  3    subscript  𝐀  2    subscript  𝐀  1            subscript  𝐀  Z    subscript  𝐀  Y    subscript  𝐀  X       \mathbf{A}=\mathbf{A}_{3}\mathbf{A}_{2}\mathbf{A}_{1}=\mathbf{A}_{Z}\mathbf{A}%
 _{Y}\mathbf{A}_{X}     The axes of the rotation depend on the specific convention being used. For the x -convention the rotations are about the   X   X   \scriptstyle X   ,   Y   Y   \scriptstyle Y   and   Z   Z   \scriptstyle Z   axes with angles   ϕ   ϕ   \scriptstyle\phi   ,   θ   θ   \scriptstyle\theta   and   ψ   ψ   \scriptstyle\psi   , the individual matrices are as follows:      𝐀  X     subscript  𝐀  X    \displaystyle\mathbf{A}_{X}     This yields        𝐀    =     [       cos  θ    cos  ψ         cos  ϕ    sin  ψ    +    sin  ϕ    sin  θ    cos  ψ          sin  ϕ    sin  ψ    -    cos  ϕ    sin  θ    cos  ψ          -    cos  θ    sin  ψ          cos  ϕ    cos  ψ    -    sin  ϕ    sin  θ    sin  ψ          sin  ϕ    cos  ψ    +    cos  ϕ    sin  θ    sin  ψ          sin  θ      -    sin  ϕ    cos  θ         cos  ϕ    cos  θ       ]         𝐀         θ     ψ          ϕ     ψ        ϕ     θ     ψ           ϕ     ψ        ϕ     θ     ψ             θ     ψ           ϕ     ψ        ϕ     θ     ψ           ϕ     ψ        ϕ     θ     ψ         θ         ϕ     θ         ϕ     θ         \begin{array}[]{lcl}\mathbf{A}&=&\begin{bmatrix}\cos\theta\cos\psi&\cos\phi%
 \sin\psi+\sin\phi\sin\theta\cos\psi&\sin\phi\sin\psi-\cos\phi\sin\theta\cos%
 \psi\\
 -\cos\theta\sin\psi&\cos\phi\cos\psi-\sin\phi\sin\theta\sin\psi&\sin\phi\cos%
 \psi+\cos\phi\sin\theta\sin\psi\\
 \sin\theta&-\sin\phi\cos\theta&\cos\phi\cos\theta\\
 \end{bmatrix}\end{array}   Note: This is valid for a right-hand system, which is the convention used in almost all engineering and physics disciplines.  Rotation matrix ↔ Euler axis/angle  If the Euler angle   θ   θ   \scriptstyle\theta   is not a multiple of   π   π   \scriptstyle\pi   , the Euler axis      𝐞  ^    =    [     e  1      e  2     e  3    ]   T        normal-^  𝐞    superscript   delimited-[]     subscript  e  1    subscript  e  2    subscript  e  3     normal-T     \scriptstyle\hat{\mathbf{e}}\;=\;[e_{1}\ e_{2}\ e_{3}]^{\mathrm{T}}   and angle   θ   θ   \scriptstyle\theta   can be computed from the elements of the rotation matrix   𝐀   𝐀   \scriptstyle\mathbf{A}   as follows:     θ   θ   \displaystyle\theta     Alternatively, the following method can be used:  Eigen-decomposition of the rotation matrix yields the eigenvalues 1, and     cos  θ   ±   i   sin  θ       plus-or-minus    θ     i    θ      \scriptstyle\cos\theta\pm i\sin\theta   . The Euler axis is the eigenvector corresponding to the eigenvalue of 1, and the   θ   θ   \scriptstyle\theta   can be computed from the remaining eigenvalues.  The Euler axis can be also found using Singular Value Decomposition since it is the normalized vector spanning the null-space of the matrix     I   -  A      I  A    \scriptstyle I\,-\,A   .  To convert the other way the rotation matrix corresponding to an Euler axis      𝐞  ^    =    [     e  1      e  2     e  3    ]   T        normal-^  𝐞    superscript   delimited-[]     subscript  e  1    subscript  e  2    subscript  e  3     normal-T     \scriptstyle\hat{\mathbf{e}}\;=\;[e_{1}\ e_{2}\ e_{3}]^{\mathrm{T}}   and angle   θ   θ   \scriptstyle\theta   can be computed according to the Rodrigues' rotation formula (with appropriate modification) as follows:      𝐀  =     𝐈  3    cos  θ    +    (   1  -   cos  θ    )    𝐞  ^     𝐞  ^   T    +     [   𝐞  ^   ]   ×    sin  θ         𝐀       subscript  𝐈  3     θ        1    θ     normal-^  𝐞    superscript   normal-^  𝐞   normal-T       subscript   delimited-[]   normal-^  𝐞        θ       \mathbf{A}=\mathbf{I}_{3}\cos\theta+(1-\cos\theta)\hat{\mathbf{e}}\hat{\mathbf%
 {e}}^{\mathrm{T}}+[\hat{\mathbf{e}}]_{\times}\sin\theta     with    𝐈  3     subscript  𝐈  3    \scriptstyle\mathbf{I}_{3}   the identity matrix , and        [   𝐞  ^   ]   ×   =   [     0     -   e  3       e  2        e  3     0     -   e  1         -   e  2       e  1     0     ]        subscript   delimited-[]   normal-^  𝐞       delimited-[]    0     subscript  e  3     subscript  e  2      subscript  e  3   0     subscript  e  1         subscript  e  2     subscript  e  1   0       [\hat{\mathbf{e}}]_{\times}=\left[\begin{array}[]{ccc}0&-e_{3}&e_{2}\\
 e_{3}&0&-e_{1}\\
 -e_{2}&e_{1}&0\end{array}\right]     is the cross-product matrix .  This expands to...       A  11   =     (   1  -   cos  θ    )    e  1  2    +   cos  θ         subscript  A  11         1    θ     superscript   subscript  e  1   2      θ      A_{11}=(1-\cos\theta)e_{1}^{2}+\cos\theta          A  12   =     (   1  -   cos  θ    )    e  1    e  2    -    e  3    sin  θ          subscript  A  12         1    θ     subscript  e  1    subscript  e  2       subscript  e  3     θ       A_{12}=(1-\cos\theta)e_{1}e_{2}-e_{3}\sin\theta          A  13   =     (   1  -   cos  θ    )    e  1    e  3    +    e  2    sin  θ          subscript  A  13         1    θ     subscript  e  1    subscript  e  3       subscript  e  2     θ       A_{13}=(1-\cos\theta)e_{1}e_{3}+e_{2}\sin\theta          A  21   =     (   1  -   cos  θ    )    e  2    e  1    +    e  3    sin  θ          subscript  A  21         1    θ     subscript  e  2    subscript  e  1       subscript  e  3     θ       A_{21}=(1-\cos\theta)e_{2}e_{1}+e_{3}\sin\theta          A  22   =     (   1  -   cos  θ    )    e  2  2    +   cos  θ         subscript  A  22         1    θ     superscript   subscript  e  2   2      θ      A_{22}=(1-\cos\theta)e_{2}^{2}+\cos\theta          A  23   =     (   1  -   cos  θ    )    e  2    e  3    -    e  1    sin  θ          subscript  A  23         1    θ     subscript  e  2    subscript  e  3       subscript  e  1     θ       A_{23}=(1-\cos\theta)e_{2}e_{3}-e_{1}\sin\theta          A  31   =     (   1  -   cos  θ    )    e  3    e  1    -    e  2    sin  θ          subscript  A  31         1    θ     subscript  e  3    subscript  e  1       subscript  e  2     θ       A_{31}=(1-\cos\theta)e_{3}e_{1}-e_{2}\sin\theta          A  32   =     (   1  -   cos  θ    )    e  3    e  2    +    e  1    sin  θ          subscript  A  32         1    θ     subscript  e  3    subscript  e  2       subscript  e  1     θ       A_{32}=(1-\cos\theta)e_{3}e_{2}+e_{1}\sin\theta          A  33   =     (   1  -   cos  θ    )    e  3  2    +   cos  θ         subscript  A  33         1    θ     superscript   subscript  e  3   2      θ      A_{33}=(1-\cos\theta)e_{3}^{2}+\cos\theta     Rotation matrix ↔ quaternion  When computing a quaternion from the rotation matrix there is a sign ambiguity, since   𝐪   𝐪   \scriptstyle\mathbf{q}   and    -  𝐪      𝐪    \scriptstyle-\mathbf{q}   represent the same rotation.  One way of computing the quaternion     𝐪   =    [     q  i      q  j      q  k     q  r    ]   T   =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r          𝐪   superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k    subscript  q  r     normal-T            𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r       \scriptstyle\mathbf{q}\;=\;[q_{i}\ q_{j}\ q_{k}\ q_{r}]^{\mathrm{T}}=\mathbf{i%
 }q_{i}+\mathbf{j}q_{j}+\mathbf{k}q_{k}+q_{r}   from the rotation matrix   𝐀   𝐀   \scriptstyle\mathbf{A}   is as follows:      q  r     subscript  q  r    \displaystyle q_{r}     There are three other mathematically equivalent ways to compute   𝐪   𝐪   \scriptstyle\mathbf{q}   . Numerical inaccuracy can be reduced by avoiding situations in which the denominator is close to zero. One of the other three methods looks as follows: 4      q  i     subscript  q  i    \displaystyle q_{i}     The rotation matrix corresponding to the quaternion     𝐪   =    [     q  i      q  j      q  k     q  r    ]   T   =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r          𝐪   superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k    subscript  q  r     normal-T            𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r       \scriptstyle\mathbf{q}\;=\;[q_{i}\ q_{j}\ q_{k}\ q_{r}]^{\mathrm{T}}=\mathbf{i%
 }q_{i}+\mathbf{j}q_{j}+\mathbf{k}q_{k}+q_{r}   can be computed as follows:      𝐀  =      (    q  r  2   -     𝐪  ˇ   T    𝐪  ˇ     )    𝐈  3    +   2   𝐪  ˇ     𝐪  ˇ   T     -   2   q  r   𝒬        𝐀           superscript   subscript  q  r   2      superscript   normal-ˇ  𝐪   normal-T    normal-ˇ  𝐪      subscript  𝐈  3      2   normal-ˇ  𝐪    superscript   normal-ˇ  𝐪   normal-T       2   subscript  q  r   𝒬      \mathbf{A}=(q_{r}^{2}-\check{\mathbf{q}}^{\mathrm{T}}\check{\mathbf{q}})%
 \mathbf{I}_{3}+2\check{\mathbf{q}}\check{\mathbf{q}}^{\mathrm{T}}-2q_{r}%
 \mathbf{\mathcal{Q}}     with    𝐈  3     subscript  𝐈  3    \scriptstyle\mathbf{I}_{3}   the  identity matrix, and        𝐪  ˇ   =   [      q  i        q  j        q  k      ]    ,   𝒬  =   [     0     -   q  k       q  j        q  k     0     -   q  i         -   q  j       q  i     0     ]       formulae-sequence     normal-ˇ  𝐪    delimited-[]     subscript  q  i      subscript  q  j      subscript  q  k         𝒬   delimited-[]    0     subscript  q  k     subscript  q  j      subscript  q  k   0     subscript  q  i         subscript  q  j     subscript  q  i   0        \check{\mathbf{q}}=\left[\begin{array}[]{c}q_{i}\\
 q_{j}\\
 q_{k}\end{array}\right],\ \ \ \mathbf{\mathcal{Q}}=\left[\begin{array}[]{ccc}0%
 &-q_{k}&q_{j}\\
 q_{k}&0&-q_{i}\\
 -q_{j}&q_{i}&0\end{array}\right]     which gives      𝐀  =   [      1  -   2   q  j  2    -   2   q  k  2        2   (     q  i    q  j    +    q  k    q  r     )       2   (     q  i    q  k    -    q  j    q  r     )         2   (     q  i    q  j    -    q  k    q  r     )       1  -   2   q  i  2    -   2   q  k  2        2   (     q  i    q  r    +    q  j    q  k     )         2   (     q  i    q  k    +    q  j    q  r     )       2   (     q  j    q  k    -    q  i    q  r     )       1  -   2   q  i  2    -   2   q  j  2        ]       𝐀   delimited-[]      1    2   superscript   subscript  q  j   2      2   superscript   subscript  q  k   2       2       subscript  q  i    subscript  q  j       subscript  q  k    subscript  q  r        2       subscript  q  i    subscript  q  k       subscript  q  j    subscript  q  r          2       subscript  q  i    subscript  q  j       subscript  q  k    subscript  q  r        1    2   superscript   subscript  q  i   2      2   superscript   subscript  q  k   2       2       subscript  q  i    subscript  q  r       subscript  q  j    subscript  q  k          2       subscript  q  i    subscript  q  k       subscript  q  j    subscript  q  r        2       subscript  q  j    subscript  q  k       subscript  q  i    subscript  q  r        1    2   superscript   subscript  q  i   2      2   superscript   subscript  q  j   2          \mathbf{A}=\left[\begin{array}[]{ccc}1-2q_{j}^{2}-2q_{k}^{2}&2(q_{i}q_{j}+q_{k%
 }q_{r})&2(q_{i}q_{k}-q_{j}q_{r})\\
 2(q_{i}q_{j}-q_{k}q_{r})&1-2q_{i}^{2}-2q_{k}^{2}&2(q_{i}q_{r}+q_{j}q_{k})\\
 2(q_{i}q_{k}+q_{j}q_{r})&2(q_{j}q_{k}-q_{i}q_{r})&1-2q_{i}^{2}-2q_{j}^{2}\end{%
 array}\right]     or equivalently      𝐀  =   [       -  1   +   2   q  i  2    +   2   q  r  2        2   (     q  i    q  j    +    q  k    q  r     )       2   (     q  i    q  k    -    q  j    q  r     )         2   (   q  i    q  j   -   q  k    q  r         -  1   +   2   q  j  2    +   2   q  r  2        2   (     q  i    q  r    +    q  j    q  k     )         2   (     q  i    q  k    +    q  j    q  r     )       2   (     q  j    q  k    -    q  i    q  r     )        -  1   +   2   q  k  2    +   2   q  r  2        ]       𝐀   delimited-[]        1     2   superscript   subscript  q  i   2      2   superscript   subscript  q  r   2       2       subscript  q  i    subscript  q  j       subscript  q  k    subscript  q  r        2       subscript  q  i    subscript  q  k       subscript  q  j    subscript  q  r         fragments  2   fragments  normal-(   subscript  q  i    subscript  q  j     subscript  q  k    subscript  q  r         1     2   superscript   subscript  q  j   2      2   superscript   subscript  q  r   2       2       subscript  q  i    subscript  q  r       subscript  q  j    subscript  q  k          2       subscript  q  i    subscript  q  k       subscript  q  j    subscript  q  r        2       subscript  q  j    subscript  q  k       subscript  q  i    subscript  q  r          1     2   superscript   subscript  q  k   2      2   superscript   subscript  q  r   2          \mathbf{A}=\left[\begin{array}[]{ccc}-1+2q_{i}^{2}+2q_{r}^{2}&2(q_{i}q_{j}+q_{%
 k}q_{r})&2(q_{i}q_{k}-q_{j}q_{r})\\
 2(q_{i}q_{j}-q_{k}q_{r}&-1+2q_{j}^{2}+2q_{r}^{2}&2(q_{i}q_{r}+q_{j}q_{k})\\
 2(q_{i}q_{k}+q_{j}q_{r})&2(q_{j}q_{k}-q_{i}q_{r})&-1+2q_{k}^{2}+2q_{r}^{2}\end%
 {array}\right]     Euler angles ↔ Quaternion  Euler angles (z-x-z extrinsic) → Quaternion  We will consider the x-convention 3-1-3 extrinsic Euler Angles for the following algorithm. The terms of the algorithm depend on the convention used.  We can compute the quaternion    𝐪  =    [     q  i      q  j      q  k     q  r    ]   T   =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r          𝐪   superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k    subscript  q  r     normal-T            𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r       \scriptstyle\mathbf{q}=[q_{i}\ q_{j}\ q_{k}\ q_{r}]^{\mathrm{T}}=\mathbf{i}q_{%
 i}+\mathbf{j}q_{j}+\mathbf{k}q_{k}+q_{r}   from the Euler angles    (  ϕ  ,  θ  ,  ψ  )     ϕ  θ  ψ    \scriptstyle(\phi,\,\theta,\,\psi)   as follows:      q  i     subscript  q  i    \displaystyle q_{i}     Euler angles (z-y’-x″ intrinsic) → Quaternion  Quaternion equivalent to yaw (   ψ   ψ   \psi   ), pitch (   θ   θ   \theta   ) and roll (   ϕ   ϕ   \phi   ) angles or intrinsic  Tait-Bryan angles following z-y’-x″ convention, can be computed by      q  i     subscript  q  i    \displaystyle q_{i}     Quaternion → Euler angles (z-x-z extrinsic)  Given the rotation quaternion    𝐪  =    [     q  i      q  j      q  k     q  r    ]   T   =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r          𝐪   superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k    subscript  q  r     normal-T            𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r       \scriptstyle\mathbf{q}=[q_{i}\ q_{j}\ q_{k}\ q_{r}]^{\mathrm{T}}=\mathbf{i}q_{%
 i}+\mathbf{j}q_{j}+\mathbf{k}q_{k}+q_{r}   , the x-convention 3-1-3 extrinsic Euler Angles     (  ϕ  ,  θ  ,  ψ  )     ϕ  θ  ψ    \scriptstyle(\phi,\,\theta,\,\psi)   can be computed by     ϕ   ϕ   \displaystyle\phi     Quaternion → Euler angles (z-y’-x″ intrinsic)  Given the rotation quaternion    𝐪  =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r        𝐪      𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r      \scriptstyle\mathbf{q}=\mathbf{i}q_{i}+\mathbf{j}q_{j}+\mathbf{k}q_{k}+q_{r}   , yaw , pitch and roll angles or intrinsic  Tait-Bryan angles following z-y’-x″ convention, can be computed by      y  a  w      y  a  w    \displaystyle yaw     Euler axis/angle ↔ quaternion  Given the Euler axis    𝐞  ^     normal-^  𝐞    \scriptstyle\hat{\mathbf{e}}   and angle   θ   θ   \scriptstyle\theta   , the quaternion      𝐪  =    [     q  i      q  j      q  k     q  r    ]   T   =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r          𝐪   superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k    subscript  q  r     normal-T            𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r       \mathbf{q}=[q_{i}\ q_{j}\ q_{k}\ q_{r}]^{\mathrm{T}}=\mathbf{i}q_{i}+\mathbf{j%
 }q_{j}+\mathbf{k}q_{k}+q_{r}     can be computed by      q  i     subscript  q  i    \displaystyle q_{i}     Given the rotation quaternion     𝐪   =    [     q  i      q  j      q  k     q  r    ]   T   =    𝐢   q  i    +   𝐣   q  j    +   𝐤   q  k    +   q  r          𝐪   superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k    subscript  q  r     normal-T            𝐢   subscript  q  i      𝐣   subscript  q  j      𝐤   subscript  q  k     subscript  q  r       \scriptstyle\mathbf{q}\;=\;[q_{i}\ q_{j}\ q_{k}\ q_{r}]^{\mathrm{T}}=\mathbf{i%
 }q_{i}+\mathbf{j}q_{j}+\mathbf{k}q_{k}+q_{r}   , define      𝐪  ˇ    =    [     q  i      q  j     q  k    ]   T        normal-ˇ  𝐪    superscript   delimited-[]     subscript  q  i    subscript  q  j    subscript  q  k     normal-T     \scriptstyle\check{\mathbf{q}}\;=\;[q_{i}\ q_{j}\ q_{k}]^{\mathrm{T}}   . Then the Euler axis    𝐞  ^     normal-^  𝐞    \scriptstyle\hat{\mathbf{e}}   and angle   θ   θ   \scriptstyle\theta   can be computed by      𝐞  ^     normal-^  𝐞    \displaystyle\hat{\mathbf{e}}     Conversion formulae for derivatives  Rotation matrix ↔ angular velocities  The angular velocity vector     ω   =   (   ω  x   ,   ω  y   ,   ω  z   )       ω    subscript  ω  x    subscript  ω  y    subscript  ω  z      \scriptstyle\mathbf{\omega}\;=\;(\omega_{x},\,\omega_{y},\,\omega_{z})   can be extracted from the derivative of the rotation matrix      d  𝐀    d  t          d  𝐀     d  t     \scriptstyle\frac{d\mathbf{A}}{dt}   by the following relation:        [  ω  ]   ×   =   [     0     -   ω  z       ω  y        ω  z     0     -   ω  x         -   ω  y       ω  x     0     ]   =     d  𝐀    d  t     𝐀  T           subscript   delimited-[]  ω      delimited-[]    0     subscript  ω  z     subscript  ω  y      subscript  ω  z   0     subscript  ω  x         subscript  ω  y     subscript  ω  x   0                d  𝐀     d  t     superscript  𝐀  normal-T       [\mathbf{\omega}]_{\times}=\left[\begin{array}[]{ccc}0&-\omega_{z}&\omega_{y}%
 \\
 \omega_{z}&0&-\omega_{x}\\
 -\omega_{y}&\omega_{x}&0\end{array}\right]=\frac{d\mathbf{A}}{dt}\mathbf{A}^{%
 \mathrm{T}}     The derivation is adapted from 5 as follows:  For any vector    r  0     subscript  r  0    \scriptstyle r_{0}   consider     r   (  t  )    =   𝐀   (  t  )    r  0          r  t     𝐀  t   subscript  r  0      \scriptstyle r(t)\;=\;\mathbf{A}(t)r_{0}   and differentiate it:        d  r    d  t    =     d  𝐀    d  t     r  0    =     d  𝐀    d  t     𝐀  T    (  t  )   r   (  t  )              d  r     d  t          d  𝐀     d  t     subscript  r  0               d  𝐀     d  t     superscript  𝐀  normal-T   t  r  t      \frac{dr}{dt}=\frac{d\mathbf{A}}{dt}r_{0}=\frac{d\mathbf{A}}{dt}\mathbf{A}^{%
 \mathrm{T}}(t)r(t)     The derivative of a vector is the linear velocity of its tip. Since A is a rotation matrix, by definition the length of    r   (  t  )       r  t    \scriptstyle r(t)   is always equal to the length of    r  0     subscript  r  0    \scriptstyle r_{0}   , and hence it does not change with time. Thus, when    r   (  t  )       r  t    \scriptstyle r(t)   rotates, its tip moves along a circle, and the linear velocity of its tip is tangential to the circle; i.e., always perpendicular to    r   (  t  )       r  t    \scriptstyle r(t)   . In this specific case, the relationship between the linear velocity vector and the angular velocity vector is        d  r    d  t    =     ω   (  t  )    ×  r    (  t  )    =     [  ω  ]   ×   r   (  t  )              d  r     d  t          ω  t   r   t           subscript   delimited-[]  ω     r  t      \frac{dr}{dt}=\mathbf{\omega}(t)\times r(t)=[\mathbf{\omega}]_{\times}r(t)   (see circular motion and Cross product ).  By the transitivity of the above-mentioned equations,         d  𝐀    d  t     𝐀  T    (  t  )   r   (  t  )    =     [  ω  ]   ×   r   (  t  )              d  𝐀     d  t     superscript  𝐀  normal-T   t  r  t      subscript   delimited-[]  ω     r  t     \frac{d\mathbf{A}}{dt}\mathbf{A}^{\mathrm{T}}(t)r(t)=[\mathbf{\omega}]_{\times%
 }r(t)     which implies ( Q.E.D. ),         d  𝐀    d  t     𝐀  T    (  t  )    =    [  ω  ]   ×             d  𝐀     d  t     superscript  𝐀  normal-T   t    subscript   delimited-[]  ω       \frac{d\mathbf{A}}{dt}\mathbf{A}^{\mathrm{T}}(t)=[\mathbf{\omega}]_{\times}     Quaternion ↔ angular velocities  The angular velocity vector     ω   =   (   ω  x   ,   ω  y   ,   ω  z   )       ω    subscript  ω  x    subscript  ω  y    subscript  ω  z      \scriptstyle\mathbf{\omega}\;=\;(\omega_{x},\,\omega_{y},\,\omega_{z})   can be obtained from the derivative of the quaternion      d  𝐪    d  t          d  𝐪     d  t     \scriptstyle\frac{d\mathbf{q}}{dt}   as follows: 6       [     0       ω  x        ω  y        ω  z      ]   =    2    d  𝐪    d  t     ⊗   𝐪  ~         delimited-[]    0     subscript  ω  x      subscript  ω  y      subscript  ω  z       tensor-product    2      d  𝐪     d  t      normal-~  𝐪      \left[{\begin{array}[]{c}0\\
 \omega_{x}\\
 \omega_{y}\\
 \omega_{z}\end{array}}\right]=2\frac{d\mathbf{q}}{dt}\otimes\tilde{\mathbf{q}}   where    𝐪  ~     normal-~  𝐪    \tilde{\mathbf{q}}   is the inverse of   𝐪   𝐪   \mathbf{q}   .  Conversely, the derivative of the quaternion is        d  𝐪    d  t    =     1  2    [     0       ω  x        ω  y        ω  z      ]    ⊗  𝐪           d  𝐪     d  t     tensor-product      1  2    delimited-[]    0     subscript  ω  x      subscript  ω  y      subscript  ω  z       𝐪     \frac{d\mathbf{q}}{dt}=\frac{1}{2}\left[{\begin{array}[]{c}0\\
 \omega_{x}\\
 \omega_{y}\\
 \omega_{z}\end{array}}\right]\otimes\mathbf{q}     Rotors in a geometric algebra  The formalism of geometric algebra (GA) provides an extension and interpretation of the quaternion method. Central to GA is the geometric product of vectors, an extension of the traditional inner and cross products , given by       a  b   =     a  ⋅  b   +  a   ∧  b         a  b        normal-⋅  a  b   a   b     ab=a\cdot b+a\wedge b     where the symbol   ∧     \scriptstyle\wedge   denotes the outer product . This product of vectors    a  ,  b     a  b    \scriptstyle a,\,b   produces two terms: a scalar part from the inner product and a bivector part from the outer product. This bivector describes the plane perpendicular to what the cross product of the vectors would return.  Bivectors in GA have some unusual properties compared to vectors. Under the geometric product, bivectors have negative square: the bivector     x  ^    y  ^        normal-^  x    normal-^  y     \scriptstyle\hat{x}\hat{y}   describes the    x  y      x  y    \scriptstyle xy   -plane. Its square is       (    x  ^    y  ^    )   2    =    x  ^    y  ^    x  ^    y  ^         superscript     normal-^  x    normal-^  y    2      normal-^  x    normal-^  y    normal-^  x    normal-^  y      \scriptstyle(\hat{x}\hat{y})^{2}\;=\;\hat{x}\hat{y}\hat{x}\hat{y}   . Because the unit basis vectors are orthogonal to each other, the geometric product reduces to the antisymmetric outer product –    x  ^     normal-^  x    \scriptstyle\hat{x}   and    y  ^     normal-^  y    \scriptstyle\hat{y}   can be swapped freely at the cost of a factor of −1. The square reduces to     -    x  ^    x  ^    y  ^     y  ^      =   -  1            normal-^  x    normal-^  x    normal-^  y    normal-^  y       1     \scriptstyle-\hat{x}\hat{x}\hat{y}\hat{y}\;=\;-1   since the basis vectors themselves square to +1.  This result holds generally for all bivectors, and as a result the bivector plays a role similar to the imaginary unit . Geometric algebra uses bivectors in its analogue to the quaternion, the rotor, given by     R   =   exp   (     -    B  ^   θ    2    )    =    cos     θ  2      -    B  ^    sin    θ  2             R           normal-^  B   θ    2               θ  2       normal-^  B       θ  2         \scriptstyle R\;=\;\exp\left(\frac{-\hat{B}\theta}{2}\right)\;=\;\cos\frac{%
 \theta}{2}\,-\,\hat{B}\sin\frac{\theta}{2}   , where    B  ^     normal-^  B    \scriptstyle\hat{B}   is a unit bivector that describes the plane of rotation . Because    B  ^     normal-^  B    \scriptstyle\hat{B}   squares to −1, the power series expansion of   R   R   \scriptstyle R   generates the trigonometric functions . The rotation formula that maps a vector   a   a   \scriptstyle a   to a rotated vector   b   b   \scriptstyle b   is then      b  =   R  a   R  †        b    R  a   superscript  R  normal-†      b=RaR^{\dagger}     where      R  †    =   exp   (     1  2     B  ^   θ   )    =    cos     1  2     θ     +    B  ^    sin     1  2    θ             superscript  R  normal-†         1  2    normal-^  B   θ                 1  2   θ       normal-^  B         1  2   θ         \scriptstyle R^{\dagger}\;=\;\exp\left(\frac{1}{2}\hat{B}\theta\right)\;=\;%
 \cos\frac{1}{2}\theta\,+\,\hat{B}\sin\frac{1}{2}\theta   is the reverse of   R   R   \scriptstyle R   (reversing the order of the vectors in   B   B   \scriptstyle B   is equivalent to changing its sign).  Example. A rotation about the axis      v  ^    =     1   3      (     x  ^    +    y  ^    +   z  ^    )         normal-^  v       1    3       normal-^  x    normal-^  y    normal-^  z       \scriptstyle\hat{v}\;=\;\frac{1}{\sqrt{3}}(\hat{x}\,+\,\hat{y}\,+\,\hat{z})   can be accomplished by converting    v  ^     normal-^  v    \scriptstyle\hat{v}   to its dual bivector,      B  ^    =    x  ^    y  ^    z  ^     v  ^     =   i   v  ^           normal-^  B      normal-^  x    normal-^  y    normal-^  z    normal-^  v           i   normal-^  v       \scriptstyle\hat{B}\;=\;\hat{x}\hat{y}\hat{z}\hat{v}\;=\;i\hat{v}   , where     i   =    x  ^    y  ^    z  ^        i     normal-^  x    normal-^  y    normal-^  z      \scriptstyle i\;=\;\hat{x}\hat{y}\hat{z}   is the unit volume element, the only trivector (pseudoscalar) in three-dimensional space. The result is      B  ^    =     1   3      (     y  ^     z  ^     +    z  ^     x  ^     +    x  ^    y  ^     )         normal-^  B       1    3         normal-^  y    normal-^  z       normal-^  z    normal-^  x       normal-^  x    normal-^  y        \scriptstyle\hat{B}\;=\;\frac{1}{\sqrt{3}}(\hat{y}\hat{z}\,+\,\hat{z}\hat{x}\,%
 +\,\hat{x}\hat{y})   . In three-dimensional space, however, it is often simpler to leave the expression for      B  ^    =   i   v  ^         normal-^  B     i   normal-^  v      \scriptstyle\hat{B}\;=\;i\hat{v}   , using the fact that   i   i   \scriptstyle i   commutes with all objects in 3D and also squares to −1. A rotation of the    x  ^     normal-^  x    \scriptstyle\hat{x}   vector in this plane by an angle   θ   θ   \scriptstyle\theta   is then        x  ^   ′   =   R   x  ^    R  †    =    e   -   i   v  ^    θ  2       x  ^    e   i   v  ^    θ  2      =     x  ^     cos  2    θ  2     +   i   (     x  ^    v  ^    -    v  ^    x  ^     )    cos   θ  2     sin   θ  2     +    v  ^    x  ^    v  ^     sin  2    θ  2             superscript   normal-^  x   normal-′     R   normal-^  x    superscript  R  normal-†            superscript  e      i   normal-^  v     θ  2       normal-^  x    superscript  e    i   normal-^  v     θ  2                normal-^  x     superscript   2     θ  2       i       normal-^  x    normal-^  v       normal-^  v    normal-^  x         θ  2        θ  2        normal-^  v    normal-^  x    normal-^  v     superscript   2     θ  2         \hat{x}^{\prime}=R\hat{x}R^{\dagger}=e^{-i\hat{v}\frac{\theta}{2}}\hat{x}e^{i%
 \hat{v}\frac{\theta}{2}}=\hat{x}\cos^{2}\frac{\theta}{2}+i(\hat{x}\hat{v}-\hat%
 {v}\hat{x})\cos\frac{\theta}{2}\sin\frac{\theta}{2}+\hat{v}\hat{x}\hat{v}\sin^%
 {2}\frac{\theta}{2}     Recognizing that     i   (     x  ^     v  ^     -    v  ^    x  ^     )    =   2  i   (     x  ^    ∧   v  ^    )          i       normal-^  x    normal-^  v       normal-^  v    normal-^  x        2  i     normal-^  x    normal-^  v       \scriptstyle i(\hat{x}\hat{v}\,-\,\hat{v}\hat{x})\;=\;2i(\hat{x}\,\wedge\,\hat%
 {v})   and that    -    v  ^    x  ^    v  ^           normal-^  v    normal-^  x    normal-^  v      \scriptstyle-\hat{v}\hat{x}\hat{v}   is the reflection of    x  ^     normal-^  x    \scriptstyle\hat{x}   about the plane perpendicular to    v  ^     normal-^  v    \scriptstyle\hat{v}   gives a geometric interpretation to the rotation operation: the rotation preserves the components that are parallel to    v  ^     normal-^  v    \scriptstyle\hat{v}   and changes only those that are perpendicular. The terms are then computed:       v  ^    x  ^    v  ^        normal-^  v    normal-^  x    normal-^  v     \displaystyle\hat{v}\hat{x}\hat{v}     The result of the rotation is then        x  ^   ′   =     x  ^    (     cos  2    θ  2    -    1  3     sin  2    θ  2      )    +    2  3    y  ^    sin   θ  2     (    sin   θ  2    +    3    cos   θ  2      )    +    2  3    z  ^    sin   θ  2     (    sin   θ  2    -    3    cos   θ  2      )          superscript   normal-^  x   normal-′        normal-^  x       superscript   2     θ  2        1  3     superscript   2     θ  2           2  3    normal-^  y       θ  2          θ  2        3       θ  2           2  3    normal-^  z       θ  2          θ  2        3       θ  2          \hat{x}^{\prime}=\hat{x}\left(\cos^{2}\frac{\theta}{2}-\frac{1}{3}\sin^{2}%
 \frac{\theta}{2}\right)+\frac{2}{3}\hat{y}\sin\frac{\theta}{2}\left(\sin\frac{%
 \theta}{2}+\sqrt{3}\cos\frac{\theta}{2}\right)+\frac{2}{3}\hat{z}\sin\frac{%
 \theta}{2}\left(\sin\frac{\theta}{2}-\sqrt{3}\cos\frac{\theta}{2}\right)     A simple check on this result is the angle     θ   =     2  3    π       θ      2  3   π     \scriptstyle\theta\;=\;\frac{2}{3}\pi   . Such a rotation should map the    x  ^     normal-^  x    \scriptstyle\hat{x}   to    y  ^     normal-^  y    \scriptstyle\hat{y}   . Indeed, the rotation reduces to       x  ^   ′     superscript   normal-^  x   normal-′    \displaystyle\hat{x}^{\prime}     exactly as expected. This rotation formula is valid not only for vectors but for any multivector . In addition, when Euler angles are used, the complexity of the operation is much reduced. Compounded rotations come from multiplying the rotors, so the total rotor from Euler angles is      R  =    R   γ  ′     R   β  ′     R  α    =    exp   (    -   i    z  ^   ′   γ    2   )     exp   (    -   i    x  ^   ′   β    2   )     exp   (    -   i   z  ^   α    2   )           R     subscript  R   superscript  γ  normal-′     subscript  R   superscript  β  normal-′     subscript  R  α                   i   superscript   normal-^  z   normal-′   γ    2            i   superscript   normal-^  x   normal-′   β    2            i   normal-^  z   α    2        R=R_{\gamma^{\prime}}R_{\beta^{\prime}}R_{\alpha}=\exp\left(\frac{-i\hat{z}^{%
 \prime}\gamma}{2}\right)\exp\left(\frac{-i\hat{x}^{\prime}\beta}{2}\right)\exp%
 \left(\frac{-i\hat{z}\alpha}{2}\right)     but       x  ^   ′    =    R  α    x  ^    R  α  †         superscript   normal-^  x   normal-′      subscript  R  α    normal-^  x    superscript   subscript  R  α   normal-†      \scriptstyle\hat{x}^{\prime}\;=\;R_{\alpha}\hat{x}R_{\alpha}^{\dagger}   and       z  ^   ′    =    R   β  ′     z  ^    R   β  ′   †         superscript   normal-^  z   normal-′      subscript  R   superscript  β  normal-′     normal-^  z    superscript   subscript  R   superscript  β  normal-′    normal-†      \scriptstyle\hat{z}^{\prime}\;=\;R_{\beta^{\prime}}\hat{z}R_{\beta^{\prime}}^{\dagger}   . These rotors come back out of the exponentials like so:       R   β  ′    =    cos   β  2    -   i   R  α    x  ^    R  α  †    sin   β  2      =    R  α    R  β    R  α  †           subscript  R   superscript  β  normal-′          β  2      i   subscript  R  α    normal-^  x    superscript   subscript  R  α   normal-†       β  2              subscript  R  α    subscript  R  β    superscript   subscript  R  α   normal-†       R_{\beta^{\prime}}=\cos\frac{\beta}{2}-iR_{\alpha}\hat{x}R_{\alpha}^{\dagger}%
 \sin\frac{\beta}{2}=R_{\alpha}R_{\beta}R_{\alpha}^{\dagger}     where    R  β     subscript  R  β    \scriptstyle R_{\beta}   refers to rotation in the original coordinates. Similarly for the   γ   γ   \scriptstyle\gamma   rotation,      R   γ  ′     =    R   β  ′     R  γ     R   β  ′   †     =    R  α    R  β    R  α  †    R  γ    R  α    R  β  †    R  α  †           subscript  R   superscript  γ  normal-′       subscript  R   superscript  β  normal-′     subscript  R  γ    superscript   subscript  R   superscript  β  normal-′    normal-†            subscript  R  α    subscript  R  β    superscript   subscript  R  α   normal-†    subscript  R  γ    subscript  R  α    superscript   subscript  R  β   normal-†    superscript   subscript  R  α   normal-†       \scriptstyle R_{\gamma^{\prime}}\;=\;R_{\beta^{\prime}}R_{\gamma}R_{\beta^{%
 \prime}}^{\dagger}\;=\;R_{\alpha}R_{\beta}R_{\alpha}^{\dagger}R_{\gamma}R_{%
 \alpha}R_{\beta}^{\dagger}R_{\alpha}^{\dagger}   . Noting that    R  γ     subscript  R  γ    \scriptstyle R_{\gamma}   and    R  α     subscript  R  α    \scriptstyle R_{\alpha}   commute (rotations in the same plane must commute), and the total rotor becomes      R  =    R  α    R  β    R  γ        R     subscript  R  α    subscript  R  β    subscript  R  γ      R=R_{\alpha}R_{\beta}R_{\gamma}     Thus, the compounded rotations of Euler angles become a series of equivalent rotations in the original fixed frame.  While rotors in geometric algebra work almost identically to quaternions in three dimensions, the power of this formalism is its generality: this method is appropriate and valid in spaces with any number of dimensions. In 3D, rotations have three degrees of freedom, a degree for each linearly independent plane (bivector) the rotation can take place in. It has been known that pairs of quaternions can be used to generate rotations in 4D, yielding six degrees of freedom, and the geometric algebra approach verifies this result: in 4D, there are six linearly independent bivectors that can be used as the generators of rotations.  See also   Euler filter  Orientation (geometry)  Rotation around a fixed axis  Three-dimensional rotation operator   References   Evangelos A. Coutsias and Louis Romero, (1999) The Quaternions with an application to Rigid Body Dynamics , Department of Mathematics and Statistics, University of New Mexico .  F. Landis Markley, (2003) Attitude Error Representations for Kalman Filtering , Journal of Guidance, Control and Dynamics.  H. Goldstein, (1980) Classical Mechanics , 2nd. ed., Addison–Wesley. ISBN 0-201-02918-9  James R. Wertz, (1980) Spacecraft Attitude Determination and Control , D. Reidel Publishing Company. ISBN 90-277-1204-2  J. Schmidt and H. Niemann, (2001) Using Quaternions for Parametrizing 3-D Rotations in Unconstrained Nonlinear Optimization , Vision, Modeling and Visualization (VMV01).  Lev D. Landau and E. M. Lifshitz, (1976) Mechanics , 3rd. ed., Pergamon Press . ISBN 0-08-021022-8 (hardcover) and ISBN 0-08-029141-4 (softcover).  Klumpp, A. R., Singularity-Free Extraction of a Quaternion from a Direction-Cosine Matrix , Journal of Spacecraft and Rockets, vol. 13, Dec. 1976, p. 754, 755.  C. Doran and A. Lasenby, (2003) Geometric Algebra for Physicists , Cambridge University Press. ISBN 978-0-521-71595-9   External links   EuclideanSpace has a wealth of information on rotation representation  Q36. How do I generate a rotation matrix from Euler angles? and Q37. How do I convert a rotation matrix to Euler angles? — The Matrix and Quaternions FAQ  Imaginary numbers are not Real – the Geometric Algebra of Spacetime – Section "Rotations and Geometric Algebra" derives and applies the rotor description of rotations  Starlino's DCM Tutorial – Direction cosine matrix theory tutorial and applications. Space orientation estimation algorithm using accelerometer, gyroscope and magnetometer IMU devices. Using complimentary filter (popular alternative to Kalman filter) with DCM matrix.   "  Category:Rotation  Category:Orientation (geometry)    Category:Euclidean symmetries     Rotation Matrix, http://mathworld.wolfram.com/RotationMatrix.html ↩  cf. J Willard Gibbs (1884). Elements of Vector Analysis , New Haven, p. 67 ↩  Direct and inverse kinematics lecture notes, page 5 ↩  ↩  1 Physics - Mark Ioffe - W(t) in terms of matrices ↩  2 Physics - Kinematics - Angular Velocity ↩     