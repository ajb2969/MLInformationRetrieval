


Naive Bayes spam filtering




Naive Bayes spam filtering

Naive Bayes classifiers are a popular statistical technique of e-mail filtering. They typically use bag of words features to identify spam e-mail, an approach commonly used in text classification.
Naive Bayes classifiers work by correlating the use of tokens (typically words, or sometimes other things), with spam and non-spam e-mails and then using Bayesian inference to calculate a probability that an email is or is not spam.
Naive Bayes spam filtering is a baseline technique for dealing with spam that can tailor itself to the email needs of individual users and give low false positive spam detection rates that are generally acceptable to users. It is one of the oldest ways of doing spam filtering, with roots in the 1990s.
History
The first known mail-filtering program to use a naive Bayes classifier was Jason Rennie's ifile program, released in 1996. The program was used to sort mail into folders.1 The first scholarly publication on Bayesian spam filtering was by Sahami et al. in 1998.2 That work was soon thereafter deployed in commercial spam filters. However, in 2002 Paul Graham greatly decreased the false positive rate, so that it could be used on its own as a single spam filter.34
Variants of the basic technique have been implemented in a number of research works and commercial software products.5 Many modern mail clients implement Bayesian spam filtering. Users can also install separate email filtering programs. Server-side email filters, such as CRM114, DSPAM, SpamAssassin,6 SpamBayes,7 Bogofilter and ASSP, make use of Bayesian spam filtering techniques, and the functionality is sometimes embedded within mail server software itself.
Process
Particular words have particular probabilities of occurring in spam email and in legitimate email. For instance, most email users will frequently encounter the word "Viagra" in spam email, but will seldom see it in other email. The filter doesn't know these probabilities in advance, and must first be trained so it can build them up. To train the filter, the user must manually indicate whether a new email is spam or not. For all words in each training email, the filter will adjust the probabilities that each word will appear in spam or legitimate email in its database. For instance, Bayesian spam filters will typically have learned a very high spam probability for the words "Viagra" and "refinance", but a very low spam probability for words seen only in legitimate email, such as the names of friends and family members.
After training, the word probabilities (also known as likelihood functions) are used to compute the probability that an email with a particular set of words in it belongs to either category. Each word in the email contributes to the email's spam probability, or only the most interesting words. This contribution is called the posterior probability and is computed using Bayes' theorem. Then, the email's spam probability is computed over all words in the email, and if the total exceeds a certain threshold (say 95%), the filter will mark the email as a spam.
As in any other spam filtering technique, email marked as spam can then be automatically moved to a "Junk" email folder, or even deleted outright. Some software implement quarantine mechanisms that define a time frame during which the user is allowed to review the software's decision.
The initial training can usually be refined when wrong judgements from the software are identified (false positives or false negatives). That allows the software to dynamically adapt to the ever evolving nature of spam.
Some spam filters combine the results of both Bayesian spam filtering and other heuristics (pre-defined rules about the contents, looking at the message's envelope, etc.), resulting in even higher filtering accuracy, sometimes at the cost of adaptiveness.
Mathematical foundation
Bayesian email filters utilize Bayes' theorem. Bayes' theorem is used several times in the context of spam:

a first time, to compute the probability that the message is spam, knowing that a given word appears in this message;
a second time, to compute the probability that the message is spam, taking into consideration all of its words (or a relevant subset of them);
sometimes a third time, to deal with rare words.

Computing the probability that a message containing a given word is spam
Let's suppose the suspected message contains the word "replica". Most people who are used to receiving e-mail know that this message is likely to be spam, more precisely a proposal to sell counterfeit copies of well-known brands of watches. The spam detection software, however, does not "know" such facts; all it can do is compute probabilities.
The formula used by the software to determine that is derived from Bayes' theorem



where:



 
  is the probability that a message is a spam, knowing that the word "replica" is in it;


 
  is the overall probability that any given message is spam;


 
  is the probability that the word "replica" appears in spam messages;


 
  is the overall probability that any given message is not spam (is "ham");


 
  is the probability that the word "replica" appears in ham messages.

(For a full demonstration, see Bayes' theorem#Extended form.)
The spamicity of a word
Recent statistics8 show that the current probability of any message being spam is 80%, at the very least:



However, most bayesian spam detection software makes the assumption that there is no a priori reason for any incoming message to be spam rather than ham, and considers both cases to have equal probabilities of 50%:



The filters that use this hypothesis are said to be "not biased", meaning that they have no prejudice regarding the incoming email. This assumption permits simplifying the general formula to:



This is functionally equivalent to asking, "what percentage of occurrences of the word "replica" appear in spam messages?"
This quantity is called "spamicity" (or "spaminess") of the word "replica", and can be computed. The number 
 
 
 
  used in this formula is approximated to the frequency of messages containing "replica" in the messages identified as spam during the learning phase. Similarly, 
 
 
 
  is approximated to the frequency of messages containing "replica" in the messages identified as ham during the learning phase. For these approximations to make sense, the set of learned messages needs to be big and representative enough. It is also advisable that the learned set of messages conforms to the 50% hypothesis about repartition between spam and ham, i.e. that the datasets of spam and ham are of same size.9
Of course, determining whether a message is spam or ham based only on the presence of the word "replica" is error-prone, which is why bayesian spam software tries to consider several words and combine their spamicities to determine a message's overall probability of being spam.
Combining individual probabilities
Most bayesian spam filtering algorithms are based on formulas that are strictly valid (from a probabilistic standpoint) only if the words present in the message are independent events. This condition is not generally satisfied (for example, in natural languages like English the probability of finding an adjective is affected by the probability of having a noun), but it is a useful idealization, especially since the statistical correlations between individual words are usually not known. On this basis, one can derive the following formula from Bayes' theorem:10



where:



 
  is the probability that the suspect message is spam;


 
  is the probability 
 
 
 
  that it is a spam knowing it contains a first word (for example "replica");


 
  is the probability 
 
 
 
  that it is a spam knowing it contains a second word (for example "watches");
etc...


 
  is the probability 
 
 
 
  that it is a spam knowing it contains an Nth word (for example "home").

This is the formula referenced by Paul Graham in his 2002 article. Some early commentators stated that "Graham pulled his formulas out of thin air",11 but Graham had actually referenced his source,12 which included a detailed explanation of the formula, and the idealizations on which it is based.
Spam filtering software based on this formula is sometimes referred to as a naive Bayes classifier. The result p is typically compared to a given threshold to decide whether the message is spam or not. If p is lower than the threshold, the message is considered as likely ham, otherwise it is considered as likely spam.
Other expression of the formula for combining individual probabilities
Usually p is not directly computed using the above formula due to floating-point underflow. Instead, p can be computed in the log domain by rewriting the original equation as follows:



Taking logs on both sides:



Let 
 
 
 
 . Therefore,



Hence the alternate formula for computing the combined probability:



Dealing with rare words
In the case a word has never been met during the learning phase, both the numerator and the denominator are equal to zero, both in the general formula and in the spamicity formula. The software can decide to discard such words for which there is no information available.
More generally, the words that were encountered only a few times during the learning phase cause a problem, because it would be an error to trust blindly the information they provide. A simple solution is to simply avoid taking such unreliable words into account as well.
Applying again Bayes' theorem, and assuming the classification between spam and ham of the emails containing a given word ("replica") is a random variable with beta distribution, some programs decide to use a corrected probability:



where:



 
  is the corrected probability for the message to be spam, knowing that it contains a given word ;


 
  is the strength we give to background information about incoming spam ;


 
  is the probability of any incoming message to be spam ;


 
  is the number of occurrences of this word during the learning phase ;


 
  is the spamicity of this word.

(Demonstration:13)
This corrected probability is used instead of the spamicity in the combining formula.


 
  can again be taken equal to 0.5, to avoid being too suspicious about incoming email. 3 is a good value for s, meaning that the learned corpus must contain more than 3 messages with that word to put more confidence in the spamicity value than in the default value.
This formula can be extended to the case where n is equal to zero (and where the spamicity is not defined), and evaluates in this case to 
 
 
 
 .
Other heuristics
"Neutral" words like "the", "a", "some", or "is" (in English), or their equivalents in other languages, can be ignored. More generally, some bayesian filtering filters simply ignore all the words which have a spamicity next to 0.5, as they contribute little to a good decision. The words taken into consideration are those whose spamicity is next to 0.0 (distinctive signs of legitimate messages), or next to 1.0 (distinctive signs of spam). A method can be for example to keep only those ten words, in the examined message, which have the greatest absolute value |0.5 − pI|.
Some software products take into account the fact that a given word appears several times in the examined message,14 others don't.
Some software products use patterns (sequences of words) instead of isolated natural languages words.15 For example, with a "context window" of four words, they compute the spamicity of "Viagra is good for", instead of computing the spamicities of "Viagra", "is", "good", and "for". This method gives more sensitivity to context and eliminates the Bayesian noise better, at the expense of a bigger database.
Mixed methods
There are other ways of combining individual probabilities for different words than using the "naive" approach. These methods differ from it on the assumptions they make on the statistical properties of the input data. These different hypotheses result in radically different formulas for combining the individual probabilities.
For example, assuming the individual probabilities follow a chi-squared distribution with 2N degrees of freedom, one could use the formula:



where C−1 is the inverse of the chi-squared function.
Individual probabilities can be combined with the techniques of the Markovian discrimination too.
Discussion
Advantages
One of the main advantages of Bayesian spam filtering is that it can be trained on a per-user basis.
The spam that a user receives is often related to the online user's activities. For example, a user may have been subscribed to an online newsletter that the user considers to be spam. This online newsletter is likely to contain words that are common to all newsletters, such as the name of the newsletter and its originating email address. A Bayesian spam filter will eventually assign a higher probability based on the user's specific patterns.
The legitimate e-mails a user receives will tend to be different. For example, in a corporate environment, the company name and the names of clients or customers will be mentioned often. The filter will assign a lower spam probability to emails containing those names.
The word probabilities are unique to each user and can evolve over time with corrective training whenever the filter incorrectly classifies an email. As a result, Bayesian spam filtering accuracy after training is often superior to pre-defined rules.
It can perform particularly well in avoiding false positives, where legitimate email is incorrectly classified as spam. For example, if the email contains the word "Nigeria", which is frequently used in Advance fee fraud spam, a pre-defined rules filter might reject it outright. A Bayesian filter would mark the word "Nigeria" as a probable spam word, but would take into account other important words that usually indicate legitimate e-mail. For example, the name of a spouse may strongly indicate the e-mail is not spam, which could overcome the use of the word "Nigeria."
Disadvantages
Depending on the implementation, Bayesian spam filtering may be susceptible to Bayesian poisoning, a technique used by spammers in an attempt to degrade the effectiveness of spam filters that rely on Bayesian filtering. A spammer practicing Bayesian poisoning will send out emails with large amounts of legitimate text (gathered from legitimate news or literary sources). Spammer tactics include insertion of random innocuous words that are not normally associated with spam, thereby decreasing the email's spam score, making it more likely to slip past a Bayesian spam filter. However with (for example) Paul Graham's scheme only the most significant probabilities are used, so that padding the text out with non-spam-related words does not affect the detection probability significantly.
Words that normally appear in large quantities in spam may also be transformed by spammers. For example, «Viagra» would be replaced with «Viaagra» or «V!agra» in the spam message. The recipient of the message can still read the changed words, but each of these words is met more rarely by the Bayesian filter, which hinders its learning process. As a general rule, this spamming technique does not work very well, because the derived words end up recognized by the filter just like the normal ones.16
Another technique used to try to defeat Bayesian spam filters is to replace text with pictures, either directly included or linked. The whole text of the message, or some part of it, is replaced with a picture where the same text is "drawn". The spam filter is usually unable to analyze this picture, which would contain the sensitive words like «Viagra». However, since many mail clients disable the display of linked pictures for security reasons, the spammer sending links to distant pictures might reach fewer targets. Also, a picture's size in bytes is bigger than the equivalent text's size, so the spammer needs more bandwidth to send messages directly including pictures. Some filters are more inclined to decide that a message is spam if it has mostly graphical contents. Finally, a probably more efficient solution has been proposed by Google and is used by its Gmail email system, performing an OCR (Optical Character Recognition) to every mid to large size image, analyzing the text inside.17
General applications of Bayesian filtering
While Bayesian filtering is used widely to identify spam email, the technique can classify (or "cluster") almost any sort of data. It has uses in science, medicine, and engineering. One example is a general purpose classification program called AutoClass which was originally used to classify stars according to spectral characteristics that were otherwise too subtle to notice.
See also

Bayesian poisoning
Bayesian programming
Bayesian inference
Bayes's theorem
Email filtering
Markovian discrimination
Naive Bayes classifier
Recursive Bayesian estimation
Anti-spam techniques

References


External links

Guide to Bayesian spam filters: part 1, part 2.
Gary Robinson's spam blog

"
Category:Estimation theory Category:Spam filtering



↩
↩
Paul Graham (2003), Better Bayesian filtering↩
Brian Livingston (2002), Paul Graham provides stunning answer to spam e-mails↩
↩
↩
↩
↩
Process Software, Introduction to Bayesian Filtering↩
 at MathPages↩
http://mail.python.org/pipermail/python-dev/2002-August/028216.html Tim Peter's comment on the algorithm used by Graham↩
↩
↩
↩
↩
Paul Graham (2002), A Plan for Spam↩
↩




