


Software development effort estimation




Software development effort estimation

Software development effort estimation is the process of predicting the most realistic amount of effort (expressed in terms of person-hours or money) required to develop or maintain software based on incomplete, uncertain and noisy input. Effort estimates may be used as input to project plans, iteration plans, budgets, investment analyses, pricing processes and bidding rounds.1
State-of-practice
Published surveys on estimation practice suggest that expert estimation is the dominant strategy when estimating software development effort.2
Typically, effort estimates are over-optimistic and there is a strong over-confidence in their accuracy. The mean effort overrun seems to be about 30% and not decreasing over time. For a review of effort estimation error surveys, see.3 However, the measurement of estimation error is not unproblematic, see Assessing and interpreting the accuracy of effort estimates. The strong over-confidence in the accuracy of the effort estimates is illustrated by the finding that, on average, if a software professional is 90% confident or “almost sure” to include the actual effort in a minimum-maximum interval, the observed frequency of including the actual effort is only 60-70%.4
Currently the term “effort estimate” is used to denote as different concepts as most likely use of effort (modal value), the effort that corresponds to a probability of 50% of not exceeding (median), the planned effort, the budgeted effort or the effort used to propose a bid or price to the client. This is believed to be unfortunate, because communication problems may occur and because the concepts serve different goals.56
History
Software researchers and practitioners have been addressing the problems of effort estimation for software development projects since at least the 1960s; see, e.g., work by Farr 7 and Nelson.8
Most of the research has focused on the construction of formal software effort estimation models. The early models were typically based on regression analysis or mathematically derived from theories from other domains. Since then a high number of model building approaches have been evaluated, such as approaches founded on case-based reasoning, classification and regression trees, simulation, neural networks, Bayesian statistics, lexical analysis of requirement specifications, genetic programming, linear programming, economic production models, soft computing, fuzzy logic modeling, statistical bootstrapping, and combinations of two or more of these models. The perhaps most common estimation methods today are the parametric estimation models COCOMO, SEER-SEM and SLIM. They have their basis in estimation research conducted in the 1970s and 1980s and are since then updated with new calibration data, with the last major release being COCOMO II in the year 2000. The estimation approaches based on functionality-based size measures, e.g., function points, is also based on research conducted in the 1970s and 1980s, but are re-calibrated with modified size measures and different counting approaches, such as the “use case points” 9 in the 1990s and COSMIC in the 2000s.
Estimation approaches
There are many ways of categorizing estimation approaches, see for example.1011 The top level categories are the following:

Expert estimation: The quantification step, i.e., the step where the estimate is produced based on judgmental processes.12
Formal estimation model: The quantification step is based on mechanical processes, e.g., the use of a formula derived from historical data.
Combination-based estimation: The quantification step is based on a judgmental and mechanical combination of estimates from different sources.

Below are examples of estimation approaches within each category.



Estimation approach
Category
Examples of support of implementation of estimation approach




Analogy-based estimation
Formal estimation model
ANGEL, Weighted Micro Function Points


WBS-based (bottom up) estimation
Expert estimation
Project management software, company specific activity templates


Parametric models
Formal estimation model
COCOMO, SLIM, SEER-SEM, TruePlanning for Software


Size-based estimation models13
Formal estimation model
Function Point Analysis,14 Use Case Analysis, SSU (Software Size Unit), Story points-based estimation in Agile software development


Group estimation
Expert estimation
Planning poker, Wideband Delphi


Mechanical combination
Combination-based estimation
Average of an analogy-based and a Work breakdown structure-based effort estimate


Judgmental combination
Combination-based estimation
Expert judgment based on estimates from a parametric model and group estimation



Selection of estimation approaches
The evidence on differences in estimation accuracy of different estimation approaches and models suggest that there is no “best approach” and that the relative accuracy of one approach or model in comparison to another depends strongly on the context .15 This implies that different organizations benefit from different estimation approaches. Findings, summarized in,16 that may support the selection of estimation approach based on the expected accuracy of an approach include:

Expert estimation is on average at least as accurate as model-based effort estimation. In particular, situations with unstable relationships and information of high importance not included in the model may suggest use of expert estimation. This assumes, of course, that experts with relevant experience are available.
Formal estimation models not tailored to a particular organization’s own context, may be very inaccurate. Use of own historical data is consequently crucial if one cannot be sure that the estimation model’s core relationships (e.g., formula parameters) are based on similar project contexts.
Formal estimation models may be particularly useful in situations where the model is tailored to the organization’s context (either through use of own historical data or that the model is derived from similar projects and contexts), and it is likely that the experts’ estimates will be subject to a strong degree of wishful thinking.

The most robust finding, in many forecasting domains, is that combination of estimates from independent sources, preferable applying different approaches, will on average improve the estimation accuracy.171819
In addition, other factors such as ease of understanding and communicating the results of an approach, ease of use of an approach, cost of introduction of an approach should be considered in a selection process.
Assessing the accuracy of estimates
The most common measure of the average estimation accuracy is the MMRE (Mean Magnitude of Relative Error), where the MRE of each estimate is defined as:
MRE = $\frac{|\text{actual effort} - \text{estimated effort}|}\text{actual effort}$
This measure has been criticized 20 21 22 and there are several alternative measures, such as more symmetric measures 23 , Weighted Mean of Quartiles of relative errors (WMQ) 24 and Mean Variation from Estimate (MVFE).25
A high estimation error cannot automatically be interpreted as an indicator of low estimation ability. Alternative, competing or complementing, reasons include low cost control of project, high complexity of development work, and more delivered functionality than originally estimated. A framework for improved use and interpretation of estimation error measurement is included in.26
Psychological issues
There are many psychological factors potentially explaining the strong tendency towards over-optimistic effort estimates that need to be dealt with to increase accuracy of effort estimates. These factors are essential even when using formal estimation models, because much of the input to these models is judgment-based. Factors that have been demonstrated to be important are: Wishful thinking, anchoring, planning fallacy and cognitive dissonance. A discussion on these and other factors can be found in work by Jørgensen and Grimstad.27

It's easy to estimate what you know.
It's hard to estimate what you know you don't know. (known unknowns)
It's very hard to estimate things that you don't know you don't know. (unknown unknowns)

Humor
The chronic underestimation of development effort has led to the coinage and popularity of numerous humorous adages, such as ironically referring to a task as a "small matter of programming" (when much effort is likely required), and citing laws about underestimation:

Ninety-ninety rule:



Hofstadter's law:


See also

Cost estimation in software engineering
Cost overrun
Function points
Proxy-based estimating
Putnam model
Comparison of development estimation software
Cone of uncertainty
Software metric

References
External links

Murali Chemuturi, .. "Mastering Software Estimation: Best Practices, Tools and Techniques for Software Project Estimators", [http://www.jrosspub.com/Engine/Shopping/catalog.asp?store=12&category;=418&itempage=1&item=14193&itemonly=1 J.Ross Publishing, USA].
Industry Productivity data for Input into Software Development Estimates and guidance and tools for Estimation - International Software Benchmarking Standards Group: http://www.isbsg.org
Free first-order benchmarking utility from Software Benchmarking Organization: http://www.sw-benchmarking.org/report.php
General forecasting principles: http://www.forecastingprinciples.com
Project estimation tools: http://www.projectmanagementguides.com/TOOLS/project_estimation_tools.html
Mike Cohn's Estimating With Use Case Points from article from Methods & Tools: http://www.methodsandtools.com/archive/archive.php?id=25
Resources on Software Estimation from Steve McConnell: http://www.construx.com/Page.aspx?nid=297
Resources on Software Estimation from Dan Galorath: http://www.galorath.com/wp/
Estimation in Software Development (article): http://www.targetprocess.com/articles/estimates-software-development.html

"
Category:Software project management



http://www.infoq.com/articles/software-development-effort-estimation



Edwards, J.S. Moores, T.T. (1994), "A conflict between the use of estimating and planning tools in the management of information systems.". European Journal of Information Systems 3(2): 139-147.
Goodwin, P. (1998). Enhancing judgmental sales forecasting: The role of laboratory research. Forecasting with judgment. G. Wright and P. Goodwin. New York, John Wiley & Sons: 91-112. Hi

Nelson, E. A. (1966). Management Handbook for the Estimation of Computer Programming Costs. AD-A648750, Systems Development Corp.

Briand, L. C. and I. Wieczorek (2002). Resource estimation in software engineering. Encyclopedia of software engineering. J. J. Marcinak. New York, John Wiley & Sons: 1160-1196.

http://www.oxagile.com/services/custom-software-design-and-development/
Hill Peter (ISBSG) - Estimation Workbook 2 - published by International Software Benchmarking Standards Group ISBSG - Estimation and Benchmarking Resource Centre
Morris Pam — Overview of Function Point Analysis Total Metrics - Function Point Resource Centre

















