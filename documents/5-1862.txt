


Ease (programming language)




Ease (programming language)

Ease is a general purpose parallel programming language, designed by Steven Ericsson-Zenith of Yale University. It combines the process constructs of CSP with logically shared data structures called contexts. Contexts are parallel data types that are constructed by processes and provide a way for processes to interact.
The language includes two process constructors.
A cooperation includes an explicit barrier synchronization and is written:








If one process finishes before the other then it will wait until the other processes are finished.
A subordination creates a process that shares the contexts that are in scope when created and finishes when complete (it does not wait for other processes) and is written:








Subordinate processes stop if they attempt to interact with a context that has completed because the parent process has stopped. This enables speculative processes to be created that will finish if their result is not needed.
Powerful replication syntax allows multiple processes to be created. For example








creates n synchronized processes each with a local constant i.
Processes cannot share local variables and cooperate in the construction of shared contexts. Certain context types, called resources, ensure call-reply semantics.
There are four functions upon contexts:

read ( context, variable ), copies a value from the shared context to the variable.
write ( context, expression ), copies the value of expression to the shared context.
put ( context, name ), moves the value bound to name to the shared context. The value of name is subsequently undefined.
get ( context, name ), moves a value from context and binds it to name. The value is removed from the context.

Context types are Singletons, Bags or Streams and can be subscripted arrays.
Ease has a semiotic definition. This means that it takes into account the effect the language has on the programmer and how they develop algorithms. The language was designed to ease the development of parallel programs.
References
Steven Ericsson-Zenith, "Process Interaction Models" (The Ease Language Specification)
John Redman, An Implementation of the Ease Programming Language, University of Western Australia, 1991
T.H. MacKenzie, T.I. Dix, "A distributed memory multiprocessor implementation of C-with-Ease," IEEE International Conference on Parallel and Distributed Systems, 2002
T.H. MacKenzie, T.I. Dix, "Object-Oriented Ease-Based Parallel Primitives in C++," icpads, p. 623, 1998 International Conference on Parallel and Distributed Systems (ICPADS'98), 1998
"
Category:Concurrent programming languages Category:Concurrency control


