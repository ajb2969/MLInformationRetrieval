   Hyperelliptic curve cryptography      Hyperelliptic curve cryptography   Hyperelliptic curve cryptography is similar to elliptic curve cryptography (ECC) insofar as the Jacobian of a hyperelliptic curve is an Abelian group on which to do arithmetic, just as we use the group of points on an elliptic curve in ECC.  Definition  An (imaginary) hyperelliptic curve of genus    g   g   g   over a field   K   K   K   is given by the equation    C  :     y  2   +   h   (  x  )   y    =   f   (  x  )    ‚àà   K   [  x  ,  y  ]        normal-:  C         superscript  y  2     h  x  y      f  x          K   x  y        C:y^{2}+h(x)y=f(x)\in K[x,y]   where     h   (  x  )    ‚àà   K   [  x  ]          h  x     K   delimited-[]  x      h(x)\in K[x]   is a polynomial of degree not larger than   g   g   g   and     f   (  x  )    ‚àà   K   [  x  ]          f  x     K   delimited-[]  x      f(x)\in K[x]   is a monic polynomial of degree     2  g   +  1        2  g   1    2g+1   . From this definition it follows that elliptic curves are hyperelliptic curves of genus 1. In hyperelliptic curve cryptography   K   K   K   is often a finite field . The Jacobian of   C   C   C   , denoted    J   (  C  )       J  C    J(C)   , is a quotient group , thus the elements of the Jacobian are not points, they are equivalence classes of divisors of degree 0 under the relation of linear equivalence . This agrees with the elliptic curve case, because it can be shown that the Jacobian of an elliptic curve is isomorphic with the group of points on the elliptic curve. 1 The use of hyperelliptic curves in cryptography came about in 1989 from Neal Koblitz . Although introduced only 3 years after ECC, not many cryptosystems implement hyperelliptic curves because the implementation of the arithmetic isn't as efficient as with cryptosystems based on elliptic curves or factoring ( RSA ). The efficiency of implementing the arithmetic depends on the underlying finite field   K   K   K   , in practice it turns out that finite fields of characteristic 2 are a good choice for hardware implementations while software is usually faster in odd characteristic. 2  The Jacobian on a hyperelliptic curve is an Abelian group and as such it can serve as group for the discrete logarithm problem (DLP). In short, suppose we have an Abelian group   G   G   G   and   g   g   g   an element of   G   G   G   , the DLP on   G   G   G   entails finding the integer   a   a   a   given two elements of   G   G   G   , namely   g   g   g   and    g  a     superscript  g  a    g^{a}   . The first type of group used was the multiplicative group of a finite field, later also Jacobians of (hyper)elliptic curves were used. If the hyperelliptic curve is chosen with care, then Pollard's rho method is the most efficient way to solve DLP. This means that, if the Jacobian has   n   n   n   elements, that the running time is exponential in    log   (  n  )       n    \log(n)   . This makes is possible to use Jacobians of a fairly small order , thus making the system more efficient. But if the hyperelliptic curve is chosen poorly, the DLP will become quite easy to solve. In this case there are known attacks which are more efficient than generic discrete logarithm solvers 3 or even subexponential. 4 Hence these hyperelliptic curves must be avoided. Considering various attacks on DLP, it is possible to list the features of hyperelliptic curves that should be avoided.  Attacks against the DLP  All generic attacks on the discrete logarithm problem in finite abelian groups such as the Pohlig‚ÄìHellman algorithm and Pollard's rho method can be used to attack the DLP in the Jacobian of hyperelliptic curves. The Pohlig-Hellman attack reduces the difficulty of the DLP by looking at the order of the group we are working with. Suppose the group   G   G   G   that is used has    n  =    p  1   r  1    ‚ãØ   p  k   r  k         n     superscript   subscript  p  1    subscript  r  1    normal-‚ãØ   superscript   subscript  p  k    subscript  r  k       n=p_{1}^{r_{1}}\cdots p_{k}^{r_{k}}   elements, where     p  1   r  1    ‚ãØ   p  k   r  k         superscript   subscript  p  1    subscript  r  1    normal-‚ãØ   superscript   subscript  p  k    subscript  r  k      p_{1}^{r_{1}}\cdots p_{k}^{r_{k}}   is the prime factorization of   n   n   n   . Pohlig-Hellman reduces the DLP in   G   G   G   to DLPs in subgroups of order    p  i     subscript  p  i    p_{i}   for    i  =   1  ,  ‚Ä¶  ,  k       i   1  normal-‚Ä¶  k     i=1,...,k   . So for   p   p   p   the largest prime divisor of   n   n   n   , the DLP in   G   G   G   is just as hard to solve as the DLP in the subgroup of order   p   p   p   . Therefore we would like to choose   G   G   G   such that the largest prime divisor   p   p   p   of     #  G   =  n        normal-#  G   n    \#G=n   is almost equal to   n   n   n   itself. Requiring     n  p   ‚â§  4        n  p   4    \frac{n}{p}\leq 4   usually suffices.  The index calculus algorithm is another algorithm that can be used to solve DLP under some circumstances. For Jacobians of (hyper)elliptic curves there exists an index calculus attack on DLP. If the genus of the curve becomes too high, the attack will be more efficient than Pollard's rho. Today it is known that even a genus of    g  =  3      g  3    g=3   cannot assure security. 5 Hence we are left with elliptic curves and hyperelliptic curves of genus 2.  Another restriction on the hyperelliptic curves we can use comes from the Menezes-Okamoto-Vanstone-attack / Frey-R√ºck-attack. The first, often called MOV for short, was developed in 1993, the second came about in 1994. Consider a (hyper)elliptic curve   C   C   C   over a finite field    ùîΩ  q     subscript  ùîΩ  q    \mathbb{F}_{q}   where   q   q   q   is the power of a prime number. Suppose the Jacobian of the curve has   n   n   n   elements and   p   p   p   is the largest prime divisor of   n   n   n   . For   k   k   k   the smallest positive integer such that    p  |   q  k   -  1     fragments  p  normal-|   superscript  q  k    1    p|q^{k}-1   there exists a computable injective  group homomorphism from the subgroup of    J   (  C  )       J  C    J(C)   of order   p   p   p   to    ùîΩ   q  k   *     superscript   subscript  ùîΩ   superscript  q  k       \mathbb{F}_{q^{k}}^{*}   . If   k   k   k   is small, we can solve DLP in    J   (  C  )       J  C    J(C)   by using the index calculus attack in    ùîΩ   q  k   *     superscript   subscript  ùîΩ   superscript  q  k       \mathbb{F}_{q^{k}}^{*}   . For arbitrary curves   k   k   k   is very large (around the size of    q  g     superscript  q  g    q^{g}   ); so even though the index calculus attack is quite fast for multiplicative groups of finite fields this attack is not a threat for most curves. The injective function used in this attack is a pairing and there are some applications in cryptography that make use of them. In such applications it is important to balance the hardness of the DLP in    J   (  C  )       J  C    J(C)   and    ùîΩ   q  k   *     superscript   subscript  ùîΩ   superscript  q  k       \mathbb{F}_{q^{k}}^{*}   ; depending on the security level values of   k   k   k   between 6 and 12 are useful. The subgroup of    ùîΩ   q  k   *     superscript   subscript  ùîΩ   superscript  q  k       \mathbb{F}_{q^{k}}^{*}   is a torus . There exists some independent usage in torus based cryptography .  We also have a problem, if   p   p   p   , the largest prime divisor of the order of the Jacobian, is equal to the characteristic of     ùîΩ  q   .     subscript  ùîΩ  q    \mathbb{F}_{q}.   By a different injective map we could then consider the DLP in the additive group    ùîΩ  q     subscript  ùîΩ  q    \mathbb{F}_{q}   instead of DLP on the Jacobian. However, DLP in this additive group is trivial to solve, as can easily be seen. So also these curves, called anomalous curves, are not to be used in DLP.  Order of the Jacobian  Hence, in order to choose a good curve and a good underlying finite field, it is important to know the order of the Jacobian. Consider a hyperelliptic curve   C   C   C   of genus   g   g   g   over the field    ùîΩ  q     subscript  ùîΩ  q    \mathbb{F}_{q}   where   q   q   q   is the power of a prime number and define    C  k     subscript  C  k    C_{k}   as   C   C   C   but now over the field    ùîΩ   q  k      subscript  ùîΩ   superscript  q  k     \mathbb{F}_{q^{k}}   . It can be shown 6 that the order of the Jacobian of    C  k     subscript  C  k    C_{k}   lies in the interval    [    (     q   k   -  1   )    2  g    ,    (     q   k   +  1   )    2  g    ]      superscript     superscript    q   k   1     2  g     superscript     superscript    q   k   1     2  g      [(\sqrt{q}^{k}-1)^{2g},(\sqrt{q}^{k}+1)^{2g}]   , called the Hasse-Weil interval. But there is more, we can compute the order using the zeta-function on hyperelliptic curves. Let    A  k     subscript  A  k    A_{k}   be the number of points on    C  k     subscript  C  k    C_{k}   . Then we define the zeta-function of    C  =   C  1       C   subscript  C  1     C=C_{1}   as      Z  C    (  t  )    =   exp   (    ‚àë   i  =  1   ‚àû     A  i     t  i   i     )           subscript  Z  C   t       superscript   subscript     i  1         subscript  A  i      superscript  t  i   i        Z_{C}(t)=\exp(\sum_{i=1}^{\infty}{A_{i}\frac{t^{i}}{i}})   . For this zeta-function it can be shown 7 that      Z  C    (  t  )    =    P   (  t  )      (   1  -  t   )    (   1  -   q  t    )            subscript  Z  C   t       P  t       1  t     1    q  t        Z_{C}(t)=\frac{P(t)}{(1-t)(1-qt)}   where    P   (  t  )       P  t    P(t)   is a polynomial of degree    2  g      2  g    2g   with coefficients in   ‚Ñ§   ‚Ñ§   \mathbb{Z}   . Furthermore    P   (  t  )       P  t    P(t)   factors as     P   (  t  )    =    ‚àè   i  =  1   g     (   1  -    a  i   t    )    (   1  -     a  i   ¬Ø   t    )           P  t     superscript   subscript  product    i  1    g       1     subscript  a  i   t      1     normal-¬Ø   subscript  a  i    t        P(t)=\prod_{i=1}^{g}{(1-a_{i}t)(1-\bar{a_{i}}t)}   where     a  i   ‚àà  ‚ÑÇ       subscript  a  i   ‚ÑÇ    a_{i}\in\mathbb{C}   for all    i  =   1  ,  ‚Ä¶  ,  g       i   1  normal-‚Ä¶  g     i=1,...,g   . Here    a  ¬Ø     normal-¬Ø  a    \bar{a}   denotes the complex conjugate of   a   a   a   . Finally we have that the order of    J   (   C  k   )       J   subscript  C  k     J(C_{k})   equals     ‚àè   i  =  1   g     |   1  -   a  i  k    |   2       superscript   subscript  product    i  1    g    superscript      1   superscript   subscript  a  i   k     2     \prod_{i=1}^{g}{|1-a_{i}^{k}|^{2}}   . Hence orders of Jacobians can be found by computing the roots of    P   (  t  )       P  t    P(t)   .  References  External links   Colm √ì h√âigeartaigh Implementation of some hyperelliptic curves algorithms using MIRACL   "  Category:Public-key cryptography  Category:Elliptic curve cryptography     ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  Jasper Scholten and Frederik Vercauteren, An Introduction to Elliptic and Hyperelliptic Curve Cryptography and the NTRU Cryptosystem , section 4 ‚Ü©  Alfred J. Menezes, Yi-Hong Wu, Robert J. Zuccherato, An elementary introduction to hyperelliptic curves , page 30 ‚Ü©  Alfred J. Menezes, Yi-Hong Wu, Robert J. Zuccherato, An elementary introduction to hyperelliptic curves , page 29 ‚Ü©     