   Truth function      Truth function   In mathematical logic , a truth function is a function from a set of truth values to truth values. Classically the domain and range of a truth function are { truth , falsehood }, but they may have any number of truth values, including an infinity of these.  A logical connective is truth-functional if the truth-value of a compound sentence is a function of the truth-value of its sub-sentences. A class of connectives is truth-functional if each of its members is. For example, the connective " and " is truth-functional since a sentence like " Apples are fruits and carrots are vegetables " is true if, and only if each of its sub-sentences " apples are fruits " and " carrots are vegetables " is true, and it is false otherwise. Some connectives of a natural language, such as English, are not truth-functional.  Connectives of the form "x believes that ..." are typical examples of connectives that are not truth-functional. If e.g. Mary mistakenly believes that Al Gore was President of the USA on April 20, 2000, but she does not believe that the moon is made of green cheese, then the sentence   " Mary believes that Al Gore was President of the USA on April 20, 2000 "   is true while   " Mary believes that the moon is made of green cheese "   is false. In both cases, each component sentence (i.e. " Al Gore was president of the USA on April 20, 2000 " and " the moon is made of green cheese ") is false, but each compound sentence formed by prefixing the phrase " Mary believes that " differs in truth-value. That is, the truth-value of a sentence of the form " Mary believes that... " is not determined solely by the truth-value of its component sentence, and hence the (unary) connective (or simply operator since it is unary) is non-truth-functional.  The class of classical logic connectives (e.g. & , → ) used in the construction of formulas is truth-functional. Their values for various truth-values as argument are usually given by truth tables . Truth-functional propositional calculus is a formal system whose formulas may be interpreted as either true or false.  Table of binary truth functions  In two-valued logic, there are sixteen possible truth functions, also called Boolean functions , of two inputs P and Q . Any of these functions corresponds to a truth table of a certain logical connective in classical logic, including several degenerate cases such as a function not depending on one or both of its arguments. Truth and falsehood is denoted as 1 and 0 in the following truth tables, respectively, for sake of brevity.       {{logicalconnective   main=Contradiction|also=/ False   notation=   ⊥   bottom   \bot    "bottom"   equivalents= P    ∧     \wedge   ¬ P O pq   truthtable-00=0   truthtable-01=0   truthtable-10=0   truthtable-11=0   image=Venn0000.svg }}   {{logicalconnective   main=Tautology (logic)|also=/ True   title=Tautology   notation=   ⊤   top   \top    "top"   equivalents= P    ∨     \vee   ¬ P V pq   truthtable-00=1   truthtable-01=1   truthtable-10=1   truthtable-11=1   image=Venn1111.svg }}     {{logicalconnective   main=Proposition   title=Proposition P   notation= P   equivalents= p I pq   truthtable-00=0   truthtable-01=0   truthtable-10=1   truthtable-11=1   image=Venn0101.svg }}   {{logicalconnective   main=Negation   title=Negation of P   notation=¬ P ~ P   equivalents=N p F pq   truthtable-00=1   truthtable-01=1   truthtable-10=0   truthtable-11=0     {{logicalconnective   main=Proposition   title=Proposition Q   notation= Q   equivalents= q H pq   truthtable-00=0   truthtable-01=1   truthtable-10=0   truthtable-11=1   image=Venn0011.svg }}   {{logicalconnective   main=Negation   title=Negation of Q   notation=¬ Q ~ Q   equivalents=N q G pq   truthtable-00=1   truthtable-01=0   truthtable-10=1   truthtable-11=0     {{logicalconnective   main=Logical conjunction   title=Conjunction   notation= P    ∧     \wedge    Q  P & Q  P  ·  Q  P AND Q   equivalents= P    ↛   ↛   \not\rightarrow   ¬ Q ¬ P    ↚   ↚   \not\leftarrow    Q ¬ P    ↓   normal-↓   \downarrow   ¬ Q K pq   truthtable-00=0   truthtable-01=0   truthtable-10=0   truthtable-11=1   image=Venn0001.svg }}   {{logicalconnective   main=Sheffer stroke   title=Alternative denial   notation= P ↑ Q  P | Q  P NAND Q   equivalents= P → ¬ Q ¬ P ← Q ¬ P ¬ Q D pq   truthtable-00=1   truthtable-01=1   truthtable-10=1   truthtable-11=0     {{logicalconnective   main=Logical disjunction   title=Disjunction   notation= P  Q  P OR Q   equivalents= P    ←   normal-←   \leftarrow   ¬ Q ¬ P → Q ¬ P ↑ ¬ Q ¬(¬ P    ∧     \wedge   ¬ Q ) A pq   truthtable-00=0   truthtable-01=1   truthtable-10=1   truthtable-11=1   image=Venn0111.svg }}   {{logicalconnective   main=Logical NOR   title=Joint denial   notation= P ↓ Q  P NOR Q   equivalents= P    ↚   ↚   \not\leftarrow   ¬ Q ¬ P    ↛   ↛   \not\rightarrow    Q ¬ P    ∧     \wedge   ¬ Q X pq   truthtable-00=1   truthtable-01=0   truthtable-10=0   truthtable-11=0     {{logicalconnective   main=Material nonimplication   title=Material nonimplication   notation= P    ↛   ↛   \not\rightarrow    Q  P    ⊅   not-superset-of   \not\supset    Q   equivalents= P    ∧     \wedge   ¬ Q ¬ P ↓ Q ¬ P    ↚   ↚   \not\leftarrow   ¬ Q L pq   truthtable-00=0   truthtable-01=0   truthtable-10=1   truthtable-11=0   image=Venn0100.svg }}   {{logicalconnective   main=Material conditional   title=Material implication   notation= P → Q  P    ⊃   superset-of   \supset    Q   equivalents= P ↑ ¬ Q ¬ P  Q ¬ P ← ¬ Q C pq   truthtable-00=1   truthtable-01=1   truthtable-10=0   truthtable-11=1     {{logicalconnective   main=Converse nonimplication   title=Converse nonimplication   notation= P    ↚   ↚   \not\leftarrow    Q  P    ⊄   not-subset-of   \not\subset    Q   equivalents= P ↓ ¬ Q ¬ P    ∧     \wedge    Q ¬ P    ↛   ↛   \not\rightarrow   ¬ Q M pq   truthtable-00=0   truthtable-01=1   truthtable-10=0   truthtable-11=0   image=Venn0010.svg }}   {{logicalconnective   main=Converse implication   title=Converse implication   notation= P    ←   normal-←   \leftarrow    Q  P    ⊂     \subset    Q   equivalents= P ¬ Q ¬ P ↑ Q ¬ P → ¬ Q B pq   truthtable-00=1   truthtable-01=0   truthtable-10=1   truthtable-11=1     {{logicalconnective   main=Exclusive or   title=Exclusive disjunction   notation= P    ↮   ↮   \not\leftrightarrow    Q  P    ≢   not-equivalent-to   \not\equiv    Q  P    ⊕   direct-sum   \oplus    Q  P XOR Q   equivalents= P ¬ Q ¬ P  Q ¬ P    ↮   ↮   \not\leftrightarrow   ¬ Q J pq   truthtable-00=0   truthtable-01=1   truthtable-10=1   truthtable-11=0   image=Venn0110.svg }}   {{logicalconnective   main=Logical biconditional   title=Biconditional   notation= P  Q  P ≡ Q  P XNOR Q  P IFF Q   equivalents= P    ↮   ↮   \not\leftrightarrow   ¬ Q ¬ P    ↮   ↮   \not\leftrightarrow    Q ¬ P ¬ Q E pq   truthtable-00=1   truthtable-01=0   truthtable-10=0   truthtable-11=1       Functional completeness  Because a function may be expressed as a composition , a truth-functional logical calculus does not need to have dedicated symbols for all of the above-mentioned functions to be functionally complete . This is expressed in a propositional calculus as logical equivalence of certain compound statements. For example, classical logic has    ¬  P  ∨  Q      normal-¬  P  normal-∨  Q    ¬P∨Q   equivalent to    P  →  Q      P  normal-→  Q    P→Q   . The conditional operator "→" is therefore not necessary for a classical-based logical system if "¬" (not) and "∨" (or) are already in use.  A minimal set of operators that can express every statement expressible in the propositional calculus is called a minimal functionally complete set . A minimally complete set of operators is achieved by NAND alone {↑} and NOR alone {↓}.  The following are the minimal functionally complete sets of operators whose arities do not exceed 2: 1   One element: {↑}, {↓}. Two elements: {   ∨     \vee   , ¬}, {   ∧     \wedge   , ¬}, {→, ¬}, {←, ¬}, {→,   ⊥   bottom   \bot   }, {←,   ⊥   bottom   \bot   }, {→,   ↮   ↮   \not\leftrightarrow   }, {←,   ↮   ↮   \not\leftrightarrow   }, {→,   ↛   ↛   \not\to   }, {→,   ↚   ↚   \not\leftarrow   }, {←,   ↛   ↛   \not\to   }, {←,   ↚   ↚   \not\leftarrow   }, {   ↛   ↛   \not\to   , ¬}, {   ↚   ↚   \not\leftarrow   , ¬}, {   ↛   ↛   \not\to   ,   ⊤   top   \top   }, {   ↚   ↚   \not\leftarrow   ,   ⊤   top   \top   }, {   ↛   ↛   \not\to   ,   ↔   normal-↔   \leftrightarrow   }, {   ↚   ↚   \not\leftarrow   ,   ↔   normal-↔   \leftrightarrow   }. Three elements: {   ∨     \lor   ,   ↔   normal-↔   \leftrightarrow   ,   ⊥   bottom   \bot   }, {   ∨     \lor   ,   ↔   normal-↔   \leftrightarrow   ,   ↮   ↮   \not\leftrightarrow   }, {   ∨     \lor   ,   ↮   ↮   \not\leftrightarrow   ,   ⊤   top   \top   }, {   ∧     \land   ,   ↔   normal-↔   \leftrightarrow   ,   ⊥   bottom   \bot   }, {   ∧     \land   ,   ↔   normal-↔   \leftrightarrow   ,   ↮   ↮   \not\leftrightarrow   }, {   ∧     \land   ,   ↮   ↮   \not\leftrightarrow   ,   ⊤   top   \top   }.   Algebraic properties  Some truth functions possess properties which may be expressed in the theorems containing the corresponding connective. Some of those properties that a binary truth function (or a corresponding logical connective) may have are:   Associativity : Within an expression containing two or more of the same associative connectives in a row, the order of the operations does not matter as long as the sequence of the operands is not changed.  Commutativity : The operands of the connective may be swapped without affecting the truth-value of the expression.  Distributivity : A connective denoted by · distributes over another connective denoted by +, if a · ( b + c ) = ( a · b ) + ( a · c ) for all operands a , b , c .  Idempotence : Whenever the operands of the operation are the same, the connective gives the operand as the result. In other words, the operation is both truth-preserving and falsehood-preserving (see below).  Absorption : A pair of connectives   ∧     \land   ,   ∨     \lor   satisfies the absorption law if     a  ∧   (   a  ∨  b   )    =  a        a    a  b    a    a\land(a\lor b)=a   for all operands a , b .   A set of truth functions is functionally complete if and only if for each of the following five properties it contains at least one member lacking it:   monotonic : If f ( a 1 , ..., a n ) ≤ f ( b 1 , ..., b n ) for all a 1 , ..., a n , b 1 , ..., b n ∈ {0,1} such that a 1 ≤ b 1 , a 2 ≤ b 2 , ..., a n ≤ b n . E.g.,   ∨     \vee   ,   ∧     \wedge   ,   ⊤   top   \top   ,   ⊥   bottom   \bot   .  affine : Each variable always makes a difference in the truth-value of the operation or it never makes a difference. E.g.,   ¬     \neg   ,   ↔   normal-↔   \leftrightarrow   ,   ↮   ↮   \not\leftrightarrow   ,   ⊤   top   \top   ,   ⊥   bottom   \bot   .  self dual : To read the truth-value assignments for the operation from top to bottom on its truth table is the same as taking the complement of reading it from bottom to top; in other words, f (¬ a 1 , ..., ¬ a n ) = ¬ f ( a 1 , ..., a n ). E.g.,   ¬     \neg   .  truth-preserving : The interpretation under which all variables are assigned a truth value of 'true' produces a truth value of 'true' as a result of these operations. E.g.,   ∨     \vee   ,   ∧     \wedge   ,   ⊤   top   \top   ,   →   normal-→   \rightarrow   ,   ↔   normal-↔   \leftrightarrow   , ⊂. (see validity )  falsehood-preserving : The interpretation under which all variables are assigned a truth value of 'false' produces a truth value of 'false' as a result of these operations. E.g.,   ∨     \vee   ,   ∧     \wedge   ,   ↮   ↮   \not\leftrightarrow   ,   ⊥   bottom   \bot   , ⊄, ⊅. (see validity )   Arity  A concrete function may be also referred to as an operator . In two-valued logic there are 2 nullary operators (constants), 4 unary operators , 16 binary operators , 256 ternary operators , and    2   2  n      superscript  2   superscript  2  n     2^{2^{n}}    n -ary operators. In three-valued logic there are 3 nullary operators (constants), 27 unary operators , 19683 binary operators , 7625597484987 ternary operators , and    3   3  n      superscript  3   superscript  3  n     3^{3^{n}}    n -ary operators. In k -valued logic, there are k nullary operators,    k  k     superscript  k  k    k^{k}   unary operators,    k   k  2      superscript  k   superscript  k  2     k^{k^{2}}   binary operators,    k   k  3      superscript  k   superscript  k  3     k^{k^{3}}   ternary operators, and    k   k  n      superscript  k   superscript  k  n     k^{k^{n}}    n -ary operators. An n -ary operator in k -valued logic is a function from     ℤ  k  n   →   ℤ  k      normal-→   superscript   subscript  ℤ  k   n    subscript  ℤ  k     \mathbb{Z}_{k}^{n}\to\mathbb{Z}_{k}   . Therefore the number of such operators is      |   ℤ  k   |    |   ℤ  k  n   |    =   k   k  n         superscript     subscript  ℤ  k       superscript   subscript  ℤ  k   n      superscript  k   superscript  k  n      |\mathbb{Z}_{k}|^{|\mathbb{Z}_{k}^{n}|}=k^{k^{n}}   , which is how the above numbers were derived.  However, some of the operators of a particular arity are actually degenerate forms that perform a lower-arity operation on some of the inputs and ignores the rest of the inputs. Out of the 256 ternary boolean operators cited above,       (      3      2      )   ⋅  16   -    (      3      1      )   ⋅  4    +    (      3      0      )   ⋅  2          normal-⋅   binomial  3  2   16    normal-⋅   binomial  3  1   4     normal-⋅   binomial  3  0   2     {\left({{3}\atop{2}}\right)}\cdot 16-{\left({{3}\atop{1}}\right)}\cdot 4+{%
 \left({{3}\atop{0}}\right)}\cdot 2   of them are such degenerate forms of binary or lower-arity operators, using the inclusion-exclusion principle . The ternary operator     f   (  x  ,  y  ,  z  )    =   ¬  x         f   x  y  z       x     f(x,y,z)=\lnot x   is one such operator which is actually a unary operator applied to one input, and ignoring the other two inputs.  "Not" is a unary operator , it takes a single term (¬ P ). The rest are binary operators , taking two terms to make a compound statement ( P    ∧     \wedge    Q , P    ∨     \vee    Q , P → Q , P ↔ Q ).  The set of logical operators    Ω    normal-Ω   \Omega\!   may be partitioned into disjoint subsets as follows:         Ω  =    Ω  0   ∪   Ω  1   ∪  …  ∪   Ω  j   ∪  …  ∪    Ω  m      .      normal-Ω     subscript  normal-Ω  0    subscript  normal-Ω  1   normal-…   subscript  normal-Ω  j   normal-…   subscript  normal-Ω  m      \Omega=\Omega_{0}\cup\Omega_{1}\cup\ldots\cup\Omega_{j}\cup\ldots\cup\Omega_{m%
 }\,.        In this partition,     Ω  j      subscript  normal-Ω  j    \Omega_{j}\!   is the set of operator symbols of arity     j    j   j\!   .  In the more familiar propositional calculi,    Ω    normal-Ω   \Omega\!   is typically partitioned as follows:    nullary operators     Ω  0   =   {  ⊥  ,  ⊤  }        subscript  normal-Ω  0    bottom  top     \Omega_{0}=\{\bot,\top\}\,          unary operators     Ω  1   =   {  ¬  }        subscript  normal-Ω  1        \Omega_{1}=\{\lnot\}\,          binary operators     Ω  2   ⊆   {  ∧  ,  ∨  ,  →  ,  ↔  }        subscript  normal-Ω  2      normal-→  normal-↔     \Omega_{2}\subseteq\{\land,\lor,\rightarrow,\leftrightarrow\}\,        Principle of compositionality  Instead of using truth tables , logical connective symbols can be interpreted by means of an interpretation function and a functionally complete set of truth-functions (Gamut 1991), as detailed by the principle of compositionality of meaning. Let I be an interpretation function, let Φ , Ψ be any two sentences and let the truth function f nand be defined as:   f nand (T,T)=F; f nand (T,F)= f nand (F,T)= f nand (F,F)=T   Then, for convenience, f not , f or  f and and so on are defined by means of f nand :   f not ( x )= f nand ( x , x )  f or ( x , y )= f nand ( f not ( x ), f not ( y ))  f and ( x , y )= f not ( f nand ( x , y ))   or, alternatively f not , f or  f and and so on are defined directly:   f not (T)=F; f not (F)=T;  f or (T,T)= f or (T,F)= f or (F,T)=T; f or (F,F)=F  f and (T,T)=T; f and (T,F)= f and (F,T)= f and (F,F)=F   Then   I (~)= I ()= f not  I (&)= I (^)= I ()= f and  I ( v )= I ()= f or  I (~ Φ )= I ( Φ )= I ()( I ( Φ ))= f not ( I ( Φ ))  I ( Φ Ψ ) = I ()( I ( Φ ), I ( Ψ ))= f and ( I ( Φ ), I ( Ψ ))   etc.  Thus if S is a sentence that is a string of symbols consisting of logical symbols v 1 ... v n representing logical connectives, and non-logical symbols c 1 ... c n , then if and only if I ( v 1 )... I ( v n ) have been provided interpreting v 1 to v n by means of f nand (or any other set of functional complete truth-functions) then the truth-value of I(s) is determined entirely by the truth-values of c 1 ... c n , i.e. of I ( c 1 )... I ( c n ). In other words, as expected and required, S is true or false only under an interpretation of all its non-logical symbols.  Computer science  Logical operators are implemented as logic gates in digital circuits . Practically all digital circuits (the major exception is DRAM ) are built up from NAND , NOR , NOT , and transmission gates . NAND and NOR gates with 3 or more inputs rather than the usual 2 inputs are fairly common, although they are logically equivalent to a cascade of 2-input gates. All other operators are implemented by breaking them down into a logically equivalent combination of 2 or more of the above logic gates.  The "logical equivalence" of "NAND alone", "NOR alone", and "NOT and AND" is similar to Turing equivalence .  That fact that all truth functions can be expressed with NOR alone is demonstrated by the Apollo guidance computer .  Notes  See also   Bertrand Russell and Alfred North Whitehead ,  Principia Mathematica , 2nd edition.  Ludwig Wittgenstein ,  Tractatus Logico-Philosophicus , Proposition 5.101.  Bitwise operation  Binary function  Boolean domain  Boolean function  Boolean logic  Boolean-valued function    List of Boolean algebra topics  Logical connective  Logical constant  Modal operator  Propositional calculus  Truth-functional propositional logic  Truth table  Truth values   References     Further reading   Józef Maria Bocheński (1959), A Précis of Mathematical Logic , translated from the French and German versions by Otto Bird, Dordrecht, South Holland: D. Reidel.  Alonzo Church (1944), Introduction to Mathematical Logic , Princeton, NJ: Princeton University Press. See the Introduction for a history of the truth function concept.   "  Category:Mathematical logic  Function     Wernick, William (1942) "Complete Sets of Logical Functions," Transactions of the American Mathematical Society 51 : 117–32. In his list on the last page of the article, Wernick does not distinguish between ← and →, or between   ↚   ↚   \not\leftarrow   and   ↛   ↛   \not\rightarrow   . ↩     