


Rotating calipers




Rotating calipers

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In computational geometry, rotating calipers is the method that has been found useful in solving number of problems.
The method is so named because the idea is analogous to rotating a spring-loaded vernier caliper around the outside of a convex polygon.1 Every time one blade of the caliper lies flat against an edge of the polygon, it forms an antipodal pair with the point or edge touching the opposite blade. The complete "rotation" of the caliper around the polygon detects all antipodal pairs.
History
Rotating calipers method was first used in the dissertation of the Michael Shamos in 1978.2 The algorithm in that dissertation uses this method for generating all antipodal pairs of points on a convex polygon for computing the diameter of a convex polygon in 
 
 
 
  time. Godfried Toussaint coined the phrase "rotating calipers" and also demonstrated that the method was applicable in solving many computational geometry problems involving wide range of areas.3
(Figure)
Rotating calipers, finding a bridge between two convex polygons

Shamos's algorithm
Shamos gave following algorithm in his dissertation (pp 77-82) for the rotating calipers method that generated all anti-podal pairs of vertices on convex polygon:4
/* p[] is in standard form, ie, counter clockwise order, 
      distinct vertices, no collinear vertices.
    ANGLE(M,nJ is a procedure that returns the clockwise angle 
      swept out by a ray as it rotates from a position parallel 
      to the directed segment Pm,Pm+1 to a position parallel to Pn,Pn+1
    We assume all indices are reduced to mod N (so that N+1 = 1).
 */
 GetAllAntiPodalPairs(p[1..n])
   //Find first anti-podal pair by locating vertex opposite P1
   i = 1
   j = 2
   while (angle(i, j) < pi
     j++
   yield i,j
 
   /* Now proceed around the polygon taking account of
      possibly parallel edges. Line L passes through
      Pi, Pi+1 and M passes through Pj, Pj+1
   */  
 
   //Loop on j until all of P has been scanned
   current = i  
   while j <> n
     if angle(current, i+1) <= angle(current, j+1)
       j++
       current = j
     else
       i++
       current = i
     yield i,j
 
     //Now take care of parallel edges
     if angle(current, i+1) = angle(current, j+1)
       yield i+1, j
       yield i, j+1
       yield i+1, j+1
       if current = i
         j++
       else
         i++
Another version of this algorithm appeared in the text by Preparata and Shamos in 1985 that avoided calculation of angles:5
GetAllAntiPodalPairs(p[1..n])
   i0 = n
   i = 1
   j = i+1
   while (Area(i,i+1,j+1) > Area(i,i+1,i))
     j = j+1
     j0 = j
     while (j <> i0)
       i = i+1
       yield i,j
       while (Area(i,i+1,j+1) > Area(i,i+1,j)
         j=j+1
         if ((i,j) <> (j0,i0))
               yield i,j
         else 
               return
       if (Area(j,i+1,j+1) = Area(i,i+1,j))
         if ((i,j) <> (j0,i0))
           yield i,j+1
         else 
           yield i+1,j
Using monotone chain algorithm
This method has several advantages including that it avoids calculation of area or angles as well as sorting by polar angles. The method is based on finding convex hull using Monotone chain method devised by A.M. Andrew6 which returns upper and lower portions of hull separately that then can be used naturally for rotating callipers analogy.7
/* All indices starts from 1.         
    dir(p,q,r) returns +ve number if p-q-r segments are clockwise,
      -ve number if they are anti clockwise and 0 if collinear.
      it can be defined as (q.y-p.y)(r.x-p.x) - (q.x-p.x)(r.y-p.y)
 */     
 GetAllAntiPodalPairs(p[1..n])
   //Obtain upper and lower parts of polygon
   p’ = Sort p lexographically (i.e. first by x then by y)
   U, L = create new stacks of points
   for k = 1 to n
     while U.size > 1 and dir(U[k-1], U[k], p’[k]) <= 0
       U.pop()
     while L.size > 1 and dir(L[k-1], L[k], p’[k]) >= 0
       L.pop()
     U.append(p’[k])
     L.append(p’[k])
     
   //Now we have U and L, apply rotating callipers
   i = 1
   j = L.size
   while i < U.size or j > 1
     yield U[i], L[j]
     
     //if i or j made it all the way through
     //advance other size
     if i = U.size
       j = j - 1
     else if j = 1
       i = i + 1
     else if (U[i+1].y - U[i].y) * (L[j].x - L[j-1].x)
          > (U[i+1].x - U[i].x) * (L[j].y - L[j-1].y)
       i = i + 1
     else
       j = j - 1
Applications
Toussaint8 and Pirzadeh9 describes various applications of rotating calipers method.
Distances

Diameter (maximum width) of a convex polygon1011
Width (minimum width) of a convex polygon12
Maximum distance between two convex polygons1314
Minimum distance between two convex polygons15
WIdest empty (or separating) strip between two convex polygons (a simplified low-dimensional variant of a problem arising in support vector machine based machine learning)
Grenander distance between two convex polygons16
Optimal strip separation (used in medical imaging and solid modeling)17

Bounding boxes

Minimum area oriented bounding box
Minimum perimeter oriented bounding box

Triangulations

Onion triangulations
Spiral triangulations
Quadrangulation
Nice triangulation
Art gallery problem
Wedge placement optimization problem18

Multi-Polygon operations

Union of two convex polygons
Common tangents to two convex polygons
Intersection of two convex polygons19
Critical support lines of two convex polygons
Vector sums (or Minkowski sum) of two convex polygons20
Convex hull of two convex polygons

Traversals

Shortest transversals2122
Thinnest-strip transversals23

Others

Non parametric decision rules for machine learned classification24
Aperture angle optimizations for visibility problems in computer vision25
Finding longest cells in millions of biological cells26
Comparing precision of two people at firing range
Classify sections of brain from scan images

Minimum width of a convex polygon
 ARRAY points := {P1, P2, ..., PN};
 
 points.delete(middle vertices of any collinear sequence of three points);
  
 REAL p_a := index of vertex with minimum y-coordinate;
 REAL p_b := index of vertex with maximum y-coordinate;
 
 REAL rotated_angle := 0;
 REAL min_width := INFINITY;
 
 VECTOR caliper_a(1,0);    // Caliper A points along the positive x-axis
 VECTOR caliper_b(-1,0);   // Caliper B points along the negative x-axis
 
 WHILE rotated_angle 
See also

Convex polygon
Convex hull
Smallest enclosing box
:es:Rotating calipers

"
Category:Geometric algorithms Category:Convex geometry



"Rotating Calipers" at Toussaint's home page








Binay K. Bhattacharya and Godfried T. Toussaint, "Fast algorithms for computing the diameter of a finite planar set," The Visual Computer, Vol. 3, No. 6, May 1988, pp.379–388.
Binay K. Bhattacharya and Godfried T. Toussaint, "A counter example to a diameter algorithm for convex polygons," IEEE Trans. Pattern Analysis and Machine Intelligence, Vol. PAMI-4, No. 3, May 1982, pp. 306–309.
Michael E. Houle and Godfried T. Toussaint, “Computing the width of a set,” IEEE Transactions Pattern Analysis & Machine Intelligence, Vol. 10, no. 5, September 1988, pp. 761–765.
Godfried T. Toussaint and Jim A. McAlear, "A simple O(n log n) algorithm for finding the maximum distance between two finite planar sets," Pattern Recognition Letters, Vol. 1, 1982, pp. 21–24.
Binay K. Bhattacharya and Godfried T. Toussaint, "Efficient algorithms for computing the maximum distance between two finite planar sets," Journal of Algorithms, vol. 14, 1983, pp. 121–136.
Godfried T. Toussaint and Binay K. Bhattacharya, "Optimal algorithms for computing the minimum distance between two finite planar sets," Pattern Recognition Letters, vol. 2, December, 1983, pp. 79–82.



Godfried T. Toussaint, "A simple linear algorithm for intersecting convex polygons, The Visual Computer, Vol. 1, 1985, pp. 118–123.
Tomas Lozano-Perez, "Spatial planning: A conﬁguration space approach," IEEE Transactions on Computers, Vol. 32, No. 2, 1983, pp. 108–120.
Binay K. Bhattacharya and Godfried T. Toussaint, "Computing shortest transversals," Computing, vol. 46, 1991, pp. 93–119.
Binay K. Bhattacharya, Jurek Czyzowicz, Peter Egyed, Ivan Stojmenovic, Godfried T. Toussaint, and Jorje Urrutia, "Computing shortest transversals of sets," International Journal of Computational Geometry and Applications, Vol. 2, No. 4, December 1992, pp. 417–436.
Jean-Marc Robert and Godfried T. Toussaint, "Linear approximation of simple objects," Computational Geometry: Theory and Applications, Vol. 4, 1994, pp. 27–52.






