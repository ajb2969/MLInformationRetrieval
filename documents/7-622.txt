   Tonelli–Shanks algorithm      Tonelli–Shanks algorithm   The Tonelli–Shanks  algorithm (referred to by Shanks as the RESSOL algorithm) is used within modular arithmetic to solve a congruence of the form       x  2   ≡   n     (   mod  p   )         superscript  x  2    annotated  n   pmod  p      x^{2}\equiv n\;\;(\mathop{{\rm mod}}p)     where n is a quadratic residue (mod p ), and p is an odd prime .  Tonelli–Shanks cannot be used for composite moduli; finding square roots modulo composite numbers is a computational problem equivalent to integer factorization . 1  An equivalent, but slightly more redundant version of this algorithm was developed by Alberto Tonelli in 1891. The version discussed here was developed independently by Daniel Shanks in 1973, who explained:   "My tardiness in learning of these historical references was because I had lent Volume 1 of Dickson's  History to a friend and it was never returned." 2   The algorithm  (Note: All   ≡     \equiv   are taken to mean    (   mod  p   )     pmod  p    \;\;(\mathop{{\rm mod}}p)   , unless indicated otherwise).  Inputs : p , an odd prime. n , an integer which is a quadratic residue (mod p ), meaning that the Legendre symbol      (   n  p   )   =  1        n  p   1    \bigl(\tfrac{n}{p}\bigr)=1   .  Outputs : R , an integer satisfying     R  2   ≡  n       superscript  R  2   n    R^{2}\equiv n   .   Factor out powers of 2 from p − 1, defining Q and S as     p  -  1   =   Q   2  S          p  1     Q   superscript  2  S      p-1=Q2^{S}   with Q odd. Note that if    S  =  1      S  1    S=1   , i.e.     p  ≡   3     (   mod  4   )        p   annotated  3   pmod  4      p\equiv 3\;\;(\mathop{{\rm mod}}4)   , then solutions are given directly by    R  ≡   ±   n    p  +  1   4         R   plus-or-minus   superscript  n      p  1   4       R\equiv\pm n^{\frac{p+1}{4}}   .  Select a z such that the Legendre symbol      (   z  p   )   =   -  1         z  p     1     \bigl(\tfrac{z}{p}\bigr)=-1   (that is, z should be a quadratic non-residue modulo p ), and set    c  ≡   z  Q       c   superscript  z  Q     c\equiv z^{Q}   .  Let      R  ≡   n    Q  +  1   2     ,    t  ≡   n  Q    ,   M  =  S     .     formulae-sequence    R   superscript  n      Q  1   2      formulae-sequence    t   superscript  n  Q      M  S      R\equiv n^{\frac{Q+1}{2}},t\equiv n^{Q},M=S.     Loop:  If    t  ≡  1      t  1    t\equiv 1   , return R .  Otherwise, find the lowest i ,    0  <  i  <  M        0  i       M     0   , such that     t   2  i    ≡  1       superscript  t   superscript  2  i    1    t^{2^{i}}\equiv 1   ; e.g. via repeated squaring.  Let    b  ≡   c   2   M  -  i  -  1         b   superscript  c   superscript  2    M  i  1       b\equiv c^{2^{M-i-1}}   , and set     R  ≡   R  b    ,    t  ≡   t   b  2     ,   c  ≡   b  2        formulae-sequence    R    R  b     formulae-sequence    t    t   superscript  b  2       c   superscript  b  2       R\equiv Rb,\;t\equiv tb^{2},c\equiv b^{2}   and    M  =  i      M  i    M=\;i   .    Once you have solved the congruence with R the second solution is p − R .  Example  Solving the congruence     x  2   ≡   10     (   mod  13   )         superscript  x  2    annotated  10   pmod  13      x^{2}\equiv 10\;\;(\mathop{{\rm mod}}13)   . It is clear that   13   13   13   is odd, and since     10    13  -  1   2    =   10  6   ≡   1     (   mod  13   )           superscript  10      13  1   2     superscript  10  6         annotated  1   pmod  13       10^{\frac{13-1}{2}}=10^{6}\equiv 1\;\;(\mathop{{\rm mod}}13)   , 10 is a quadratic residue (by Euler's criterion ).   Step 1: Observe     p  -  1   =  12  =   3  ⋅   2  2            p  1   12        normal-⋅  3   superscript  2  2       p-1=12=3\cdot 2^{2}   so    Q  =  3      Q  3    Q=3   ,    S  =  2      S  2    S=2   .    Step 2: Take    z  =  2      z  2    z=2   as the quadratic nonresidue (2 is a quadratic nonresidue since     2    13  -  1   2    =    -  1      (   mod  13   )         superscript  2      13  1   2     annotated    1    pmod  13      2^{\frac{13-1}{2}}=-1\;\;(\mathop{{\rm mod}}13)   (again, Euler's criterion)). Set     c  =   2  3   ≡   8     (   mod  13   )     .        c   superscript  2  3         annotated  8   pmod  13       c=2^{3}\equiv 8\;\;(\mathop{{\rm mod}}13).       Step 3     R  =   10  2   ≡   -  4    ,   t  ≡   10  3   ≡    -  1      (   mod  13   )     ,   M  =  2.      formulae-sequence      R   superscript  10  2          4         t   superscript  10  3         annotated    1    pmod  13        M  2.     R=10^{2}\equiv-4,\;t\equiv 10^{3}\equiv-1\;\;(\mathop{{\rm mod}}13),M=2.       Step 4: Now we start the loop    t  ≢   1     (   mod  13   )       not-equivalent-to  t   annotated  1   pmod  13      t\not\equiv 1\;\;(\mathop{{\rm mod}}13)   so    0  <  i  <  2        0  i       2     0   ; i.e.     i  =  1.      i  1.    i=\;1.     Let    b  ≡   8   2   2  -  1  -  1     ≡   8     (   mod  13   )          b   superscript  8   superscript  2    2  1  1           annotated  8   pmod  13       b\equiv 8^{2^{2-1-1}}\equiv 8\;\;(\mathop{{\rm mod}}13)   , so     b  2   ≡   8  2   ≡    -  1      (   mod  13   )           superscript  b  2    superscript  8  2         annotated    1    pmod  13       b^{2}\equiv 8^{2}\equiv-1\;\;(\mathop{{\rm mod}}13)   .  Set    R  =   -   4  ⋅  8    ≡   7     (   mod  13   )          R     normal-⋅  4  8          annotated  7   pmod  13       R=-4\cdot 8\equiv 7\;\;(\mathop{{\rm mod}}13)   . Set    t  ≡  -  1  ⋅  -  1  ≡  1   (   mod  13   )      fragments  t    1  normal-⋅   1   1   pmod  13     t\equiv-1\cdot-1\equiv 1\;\;(\mathop{{\rm mod}}13)   , and    M  =  1.      M  1.    M=\;1.     We restart the loop, and since    t  ≡   1     (   mod  13   )        t   annotated  1   pmod  13      t\equiv 1\;\;(\mathop{{\rm mod}}13)   we are done, returning     R  ≡   7     (   mod  13   )     .      R   annotated  7   pmod  13      R\equiv 7\;\;(\mathop{{\rm mod}}13).       Indeed, observe that     7  2   =  49  ≡   10     (   mod  13   )           superscript  7  2   49        annotated  10   pmod  13       7^{2}=49\equiv 10\;\;(\mathop{{\rm mod}}13)   and naturally also      (   -  7   )   2   ≡   6  2   ≡   10     (   mod  13   )           superscript    7   2    superscript  6  2         annotated  10   pmod  13       (-7)^{2}\equiv 6^{2}\equiv 10\;\;(\mathop{{\rm mod}}13)   . So the algorithm yields two solutions to our congruence.  Proof  First write     p  -  1   =   Q   2  S          p  1     Q   superscript  2  S      p-1=Q2^{S}   . Now write    r  ≡    n    Q  +  1   2       (   mod  p   )        r   annotated   superscript  n      Q  1   2     pmod  p      r\equiv n^{\frac{Q+1}{2}}\;\;(\mathop{{\rm mod}}p)   and    t  ≡    n  Q      (   mod  p   )        t   annotated   superscript  n  Q    pmod  p      t\equiv n^{Q}\;\;(\mathop{{\rm mod}}p)   , observing that     r  2   ≡    n  t      (   mod  p   )         superscript  r  2    annotated    n  t    pmod  p      r^{2}\equiv nt\;\;(\mathop{{\rm mod}}p)   . This latter congruence will be true after every iteration of the algorithm's main loop. If at any point,    t  ≡   1     (   mod  p   )        t   annotated  1   pmod  p      t\equiv 1\;\;(\mathop{{\rm mod}}p)   then     r  2   ≡   n     (   mod  p   )         superscript  r  2    annotated  n   pmod  p      r^{2}\equiv n\;\;(\mathop{{\rm mod}}p)   and the algorithm terminates with    R  ≡    ±  r      (   mod  p   )        R   annotated   plus-or-minus  r    pmod  p      R\equiv\pm r\;\;(\mathop{{\rm mod}}p)   .  If    t  ≢   1     (   mod  p   )       not-equivalent-to  t   annotated  1   pmod  p      t\not\equiv 1\;\;(\mathop{{\rm mod}}p)   , then consider   z   z   z   , a quadratic non-residue of   p   p   p   . Let    c  ≡    z  Q      (   mod  p   )        c   annotated   superscript  z  Q    pmod  p      c\equiv z^{Q}\;\;(\mathop{{\rm mod}}p)   . Then     c   2  S    ≡    (   z  Q   )    2  S    ≡   z    2  S   Q    ≡   z   p  -  1    ≡   1     (   mod  p   )           superscript  c   superscript  2  S     superscript   superscript  z  Q    superscript  2  S          superscript  z     superscript  2  S   Q          superscript  z    p  1          annotated  1   pmod  p       c^{2^{S}}\equiv(z^{Q})^{2^{S}}\equiv z^{2^{S}Q}\equiv z^{p-1}\equiv 1\;\;(%
 \mathop{{\rm mod}}p)   and     c   2   S  -  1     ≡   z    p  -  1   2    ≡    -  1      (   mod  p   )           superscript  c   superscript  2    S  1      superscript  z      p  1   2          annotated    1    pmod  p       c^{2^{S-1}}\equiv z^{\frac{p-1}{2}}\equiv-1\;\;(\mathop{{\rm mod}}p)   , which shows that the order of   c   c   c   is    2  S     superscript  2  S    2^{S}   .  Similarly we have     t   2  S    ≡   1     (   mod  p   )         superscript  t   superscript  2  S     annotated  1   pmod  p      t^{2^{S}}\equiv 1\;\;(\mathop{{\rm mod}}p)   , so the order of   t   t   t   divides    2  S     superscript  2  S    2^{S}   . Suppose the order of   t   t   t   is    2   S  ′      superscript  2   superscript  S  normal-′     2^{S^{\prime}}   . Since   n   n   n   is a square modulo   p   p   p   ,    t  ≡    n  Q      (   mod  p   )        t   annotated   superscript  n  Q    pmod  p      t\equiv n^{Q}\;\;(\mathop{{\rm mod}}p)   is also a square, and hence     S  ′   ≤   S  -  1        superscript  S  normal-′     S  1     S^{\prime}\leq S-1   .  Now we set    b  ≡    c   2   S  -   S  ′   -  1        (   mod  p   )        b   annotated   superscript  c   superscript  2    S   superscript  S  normal-′   1      pmod  p      b\equiv c^{2^{S-S^{\prime}-1}}\;\;(\mathop{{\rm mod}}p)   and with this     r  ′   ≡    b  r      (   mod  p   )         superscript  r  normal-′    annotated    b  r    pmod  p      r^{\prime}\equiv br\;\;(\mathop{{\rm mod}}p)   ,     c  ′   ≡    b  2      (   mod  p   )         superscript  c  normal-′    annotated   superscript  b  2    pmod  p      c^{\prime}\equiv b^{2}\;\;(\mathop{{\rm mod}}p)   and     t  ′   ≡     c  ′   t      (   mod  p   )         superscript  t  normal-′    annotated     superscript  c  normal-′   t    pmod  p      t^{\prime}\equiv c^{\prime}t\;\;(\mathop{{\rm mod}}p)   . As before,     r   ′  2    ≡    n   t  ′       (   mod  p   )         superscript  r   normal-′  2     annotated    n   superscript  t  normal-′     pmod  p      r^{\prime 2}\equiv nt^{\prime}\;\;(\mathop{{\rm mod}}p)   holds; however with this construction both   t   t   t   and    c  ′     superscript  c  normal-′    c^{\prime}   have order    2   S  ′      superscript  2   superscript  S  normal-′     2^{S^{\prime}}   . This implies that    t  ′     superscript  t  normal-′    t^{\prime}   has order    2   S  ′′      superscript  2   superscript  S  ′′     2^{S^{\prime\prime}}   with     S  ′′   <   S  ′        superscript  S  ′′    superscript  S  normal-′     S^{\prime\prime}   .  If     S  ′′   =  0       superscript  S  ′′   0    S^{\prime\prime}=0   then     t  ′   ≡   1     (   mod  p   )         superscript  t  normal-′    annotated  1   pmod  p      t^{\prime}\equiv 1\;\;(\mathop{{\rm mod}}p)   , and the algorithm stops, returning    R  ≡    ±   r  ′       (   mod  p   )        R   annotated   plus-or-minus   superscript  r  normal-′     pmod  p      R\equiv\pm r^{\prime}\;\;(\mathop{{\rm mod}}p)   . Else, we restart the loop with analogous definitions of    b  ′     superscript  b  normal-′    b^{\prime}   ,    r  ′′     superscript  r  ′′    r^{\prime\prime}   ,    c  ′′     superscript  c  ′′    c^{\prime\prime}   and    t  ′′     superscript  t  ′′    t^{\prime\prime}   until we arrive at an    S    (  j  )   ′      superscript  S   superscript  j  normal-′     S^{(j)^{\prime}}   that equals 0. Since the sequence of S is strictly decreasing the algorithm terminates.  Speed of the algorithm  The Tonelli–Shanks algorithm requires (on average over all possible input (quadratic residues and quadratic nonresidues))        2  m   +   2  k   +    S   (   S  -  1   )    4   +   1   2   S  -  1      -  9          2  m     2  k       S    S  1    4     1   superscript  2    S  1      9    2m+2k+\frac{S(S-1)}{4}+\frac{1}{2^{S-1}}-9     modular multiplications, where   m   m   m   is the number of digits in the binary representation of   p   p   p   and   k   k   k   is the number of ones in the binary representation of   p   p   p   . If the required quadratic nonresidue   z   z   z   is to be found by checking if a randomly taken number   y   y   y   is a quadratic nonresidue, it requires (on average)   2   2   2   computations of the Legendre symbol. 3 The average of two computations of the Legendre symbol are explained as follows   y   y   y   is a quadratic residue with chance       p  +  1   2   p   =    1  +   1  p    2             p  1   2   p       1    1  p    2     \frac{\frac{p+1}{2}}{p}=\frac{1+\frac{1}{p}}{2}   , which is smaller than   1   1   1   but     ≥   1  2       absent    1  2     \geq\frac{1}{2}   , so we will on average need to check if a   y   y   y   is a quadratic residue two times.  This shows essentially that the Tonelli–Shanks algorithm works very well if the modulus   p   p   p   is random, that is, if   S   S   S   is not particularly large with respect to the number of digits in the binary representation of   p   p   p   . As written above, Cipolla's algorithm works better than Tonelli–Shanks if (and only if)     S   (   S  -  1   )    >    8  m   +  20         S    S  1        8  m   20     S(S-1)>8m+20   . However, if one instead uses Sutherland's algorithm to perform the discrete logarithm computation in the 2-Sylow subgroup of    𝔽  p     subscript  𝔽  p    \mathbb{F}_{p}   , one may replace    S   (   S  -  1   )       S    S  1     S(S-1)   with an expression that is asymptotically bounded by    O   (   S   log   S  /   log   log  S       )       O    S      S      S         O(S\log S/\log\log S)   . 4 Explicitly, one computes   e   e   e   such that     c  e   ≡   n  Q        superscript  c  e    superscript  n  Q     c^{e}\equiv n^{Q}   and then    R  ≡    c   -   e  /  2      n    (   Q  +  1   )   /  2         R     superscript  c      e  2      superscript  n      Q  1   2       R\equiv c^{-e/2}n^{(Q+1)/2}   satisfies     R  2   ≡  n       superscript  R  2   n    R^{2}\equiv n   (note that   e   e   e   is a multiple of 2 because   n   n   n   is a quadratic residue).  The algorithm requires us to find a quadratic nonresidue   z   z   z   . There is no known deterministic algorithm that runs in polynomial time for finding such a   z   z   z   . However, if the generalized Riemann hypothesis is true, there exists a quadratic nonresidue    z  <   2    ln  2   p        z    2    superscript   2   p      z<2\ln^{2}{p}   , 5 making it possible to check every   z   z   z   up to that limit and find a suitable   z   z   z   within polynomial time . Keep in mind, however, that this is a worst-case scenario; in general,   z   z   z   is found in on average 2 trials as stated above.  Uses  The Tonelli–Shanks algorithm can (naturally) be used for any process in which square roots modulo a prime are necessary. For example, it can be used for finding points on elliptic curves . It is also useful for the computations in the Rabin cryptosystem .  Generalizations  Tonelli–Shanks can be generalized to any cyclic group (instead of     ℤ  /  p    ℤ  *         ℤ  p    superscript  ℤ      \mathbb{Z}/p\mathbb{Z}^{*}   ) and to k th roots for arbitrary integer k , in particular to taking the k th root of an element of a finite field . 6  If many square-roots must be done in the same cyclic group and S is not too large, a table of square-roots of the elements of 2-power order can be prepared in advance and the algorithm simplified and sped up as follows.   Factor out powers of 2 from p − 1, defining Q and S as     p  -  1   =   Q   2  S          p  1     Q   superscript  2  S      p-1=Q2^{S}   with Q odd.  Let     R  ≡   n    Q  +  1   2     ,   t  ≡   n  Q   ≡    R  2   /  n       formulae-sequence    R   superscript  n      Q  1   2         t   superscript  n  Q           superscript  R  2   n       R\equiv n^{\frac{Q+1}{2}},t\equiv n^{Q}\equiv R^{2}/n     Find   b   b   b   from the table such that     b  2   ≡  t       superscript  b  2   t    b^{2}\equiv t   and set    R  ≡   R  /  b       R    R  b     R\equiv R/b     return R .   Notes  References     Pages 110–115 describe the algorithm and explain the group theory behind it.   Daniel Shanks. Five Number Theoretic Algorithms. Proceedings of the Second Manitoba Conference on Numerical Mathematics. Pp. 51–70. 1973.  Alberto Tonelli, Bemerkung über die Auflösung quadratischer Congruenzen. Nachrichten von der Königlichen Gesellschaft der Wissenschaften und der Georg-Augusts-Universität zu Göttingen. Pp. 344–346. 1891. 1  Gagan Tara Nanda - Mathematics 115: The RESSOL Algorithm 2   External links   Implementation in C# http://shankstonelli.blogspot.com/2010/12/shanks-tonelli-algorithm-in-c.html  Implementation in Python http://eli.thegreenplace.net/2009/03/07/computing-modular-square-roots-in-python   ru:Алгоритм Шенкса "  Category:Modular arithmetic  Category:Number theoretic algorithms  Category:Articles containing proofs     Oded Goldreich, Computational complexity: a conceptual perspective , Cambridge University Press, 2008, p. 588. ↩  Daniel Shanks. Five Number-theoretic Algorithms. Proceedings of the Second Manitoba Conference on Numerical Mathematics. Pp. 51–70. 1973. ↩  Gonzalo Tornaria - Square roots modulo p, page 2 http://www.springerlink.com/content/xgxe68edy03la96p/fulltext.pdf ↩  ↩  ↩  Adleman, L. M., K. Manders, and G. Miller: 1977, `On taking roots in finite fields'. In: 18th IEEE Symposium on Foundations of Computer Science. pp. 175-177 ↩     