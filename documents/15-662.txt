   Polynomial kernel      Polynomial kernel   In machine learning , the polynomial kernel is a kernel function commonly used with support vector machines (SVMs) and other kernelized models, that represents the similarity of vectors (training samples) in a feature space over polynomials of the original variables, allowing learning of non-linear models.  Intuitively, the polynomial kernel looks not only at the given features of input samples to determine their similarity, but also combinations of these. In the context of regression analysis , such combinations are known as interaction features. The (implicit) feature space of a polynomial kernel is equivalent to that of polynomial regression , but without the combinatorial blowup in the number of parameters to be learned. When the input features are binary-valued (booleans), then the features correspond to logical conjunctions of input features. 1  Definition  For degree-   d   d   d   polynomials, the polynomial kernel is defined as 2       K   (  x  ,  y  )    =    (     x  ùñ≥   y   +  c   )   d         K   x  y     superscript       superscript  x  ùñ≥   y   c   d     K(x,y)=(x^{\mathsf{T}}y+c)^{d}     where   x   x   x   and   y   y   y   are vectors in the input space , i.e. vectors of features computed from training or test samples and    c  ‚â•  0      c  normal-‚â•  0    c‚â•0   is a free parameter trading off the influence of higher-order versus lower-order terms in the polynomial. When    c  =  0      c  0    c=0   , the kernel is called homogeneous. 3 (A further generalized polykernel divides by a user-specified scalar parameter   a   a   a   .)  As a kernel,   K   K   K   corresponds to an inner product in a feature space based on some mapping   œÜ   œÜ   œÜ   :       K   (  x  ,  y  )    =   ‚ü®   œÜ   (  x  )    ,   œÜ   (  y  )    ‚ü©         K   x  y       œÜ  x     œÜ  y      K(x,y)=\langle\varphi(x),\varphi(y)\rangle     The nature of   œÜ   œÜ   œÜ   can be seen from an example. Let    d  =  2      d  2    d=2   , so we get the special case of the quadratic kernel. After using the multinomial theorem (twice‚Äîthe outermost application is the binomial theorem ) and regrouping,       K   (  x  ,  y  )    =    (     ‚àë   i  =  1   n     x  i    y  i     +  c   )   2   =     ‚àë   i  =  1   n     (   x  i  2   )    (   y  i  2   )     +    ‚àë   i  =  2   n     ‚àë   j  =  1    i  -  1      (    2    x  i    x  j    )    (    2    y  i    y  j    )      +    ‚àë   i  =  1   n     (     2  c     x  i    )    (     2  c     y  i    )     +   c  2            K   x  y     superscript      superscript   subscript     i  1    n      subscript  x  i    subscript  y  i     c   2            superscript   subscript     i  1    n      superscript   subscript  x  i   2    superscript   subscript  y  i   2       superscript   subscript     i  2    n     superscript   subscript     j  1      i  1          2    subscript  x  i    subscript  x  j        2    subscript  y  i    subscript  y  j         superscript   subscript     i  1    n           2  c     subscript  x  i          2  c     subscript  y  i       superscript  c  2       K(x,y)=\left(\sum_{i=1}^{n}x_{i}y_{i}+c\right)^{2}=\sum_{i=1}^{n}\left(x_{i}^{%
 2}\right)\left(y_{i}^{2}\right)+\sum_{i=2}^{n}\sum_{j=1}^{i-1}\left(\sqrt{2}x_%
 {i}x_{j}\right)\left(\sqrt{2}y_{i}y_{j}\right)+\sum_{i=1}^{n}\left(\sqrt{2c}x_%
 {i}\right)\left(\sqrt{2c}y_{i}\right)+c^{2}     From this it follows that the feature map is given by:       œÜ   (  x  )    =   ‚ü®   x  n  2   ,  ‚Ä¶  ,   x  1  2   ,    2    x  n    x   n  -  1     ,  ‚Ä¶  ,    2    x  n    x  1    ,    2    x   n  -  1     x   n  -  2     ,  ‚Ä¶  ,    2    x   n  -  1     x  1    ,  ‚Ä¶  ,    2    x  2    x  1    ,     2  c     x  n    ,  ‚Ä¶  ,     2  c     x  1    ,  c  ‚ü©         œÜ  x     superscript   subscript  x  n   2   normal-‚Ä¶   superscript   subscript  x  1   2       2    subscript  x  n    subscript  x    n  1     normal-‚Ä¶      2    subscript  x  n    subscript  x  1        2    subscript  x    n  1     subscript  x    n  2     normal-‚Ä¶      2    subscript  x    n  1     subscript  x  1    normal-‚Ä¶      2    subscript  x  2    subscript  x  1          2  c     subscript  x  n    normal-‚Ä¶        2  c     subscript  x  1    c     \varphi(x)=\langle x_{n}^{2},\ldots,x_{1}^{2},\sqrt{2}x_{n}x_{n-1},\ldots,%
 \sqrt{2}x_{n}x_{1},\sqrt{2}x_{n-1}x_{n-2},\ldots,\sqrt{2}x_{n-1}x_{1},\ldots,%
 \sqrt{2}x_{2}x_{1},\sqrt{2c}x_{n},\ldots,\sqrt{2c}x_{1},c\rangle     Practical use  Although the RBF kernel is more popular in SVM classification than the polynomial kernel, the latter is quite popular in natural language processing (NLP). 4 The most common degree is    d  =  2      d  2    d=2   (quadratic), since larger degrees tend to overfit on NLP problems.  Various ways of computing the polynomial kernel (both exact and approximate) have been devised as alternatives to the usual non-linear SVM training algorithms, including:   full expansion of the kernel prior to training/testing with a linear SVM, i.e. full computation of the mapping   œÜ   œÜ   œÜ   as in polynomial regression;  basket mining (using a variant of the apriori algorithm ) for the most commonly occurring feature conjunctions in a training set to produce an approximate expansion; 5  inverted indexing of support vectors.   One problem with the polynomial kernel is that it may suffer from numerical instability : when , ( x T y + c ) d }} tends to zero with increasing   d   d   d   , whereas when ,    K   (  x  ,  y  )       K   x  y     K(x,y)   tends to infinity. 6  References    "  Category:Kernel methods for machine learning     Yoav Goldberg and Michael Elhadad (2008). splitSVM: Fast, Space-Efficient, non-Heuristic, Polynomial Kernel Computation for NLP Applications. Proc. ACL-08: HLT. ‚Ü©  http://www.cs.tufts.edu/~roni/Teaching/CLT/LN/lecture18.pdf ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©     