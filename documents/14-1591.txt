


Restricted Boltzmann machine




Restricted Boltzmann machine

 A restricted Boltzmann machine (RBM) is a generative stochastic artificial neural network that can learn a probability distribution over its set of inputs. RBMs were initially invented under the name Harmonium by Paul Smolensky in 1986,1 but only rose to prominence after Geoffrey Hinton and collaborators invented fast learning algorithms for them in the mid-2000s. RBMs have found applications in dimensionality reduction,2 classification,3 collaborative filtering,4 feature learning5 and topic modelling.6 They can be trained in either supervised or unsupervised ways, depending on the task.
As their name implies, RBMs are a variant of Boltzmann machines, with the restriction that their neurons must form a bipartite graph: a pair of nodes from each of the two groups of units, commonly referred to as the "visible" and "hidden" units respectively, may have a symmetric connection between them, and there are no connections between nodes within a group. By contrast, "unrestricted" Boltzmann machines may have connections between hidden units. This restriction allows for more efficient training algorithms than are available for the general class of Boltzmann machines, in particular the gradient-based contrastive divergence algorithm.7
Restricted Boltzmann machines can also be used in deep learning networks. In particular, deep belief networks can be formed by "stacking" RBMs and optionally fine-tuning the resulting deep network with gradient descent and backpropagation.8
Structure
The standard type of RBM has binary-valued (Boolean/Bernoulli) hidden and visible units, and consists of a matrix of weights 
 
 
 
  (size m×n) associated with the connection between hidden unit 
 
 
 
  and visible unit 
 
 
 
 , as well as bias weights (offsets) 
 
 
 
  for the visible units and 
 
 
 
  for the hidden units. Given these, the energy of a configuration (pair of boolean vectors) 
 
 
 
  is defined as



or, in matrix notation,



This energy function is analogous to that of a Hopfield network. As in general Boltzmann machines, probability distributions over hidden and/or visible vectors are defined in terms of the energy function:9



where 
 
 
 
  is a partition function defined as the sum of 
 
 
 
  over all possible configurations (in other words, just a normalizing constant to ensure the probability distribution sums to 1). Similarly, the (marginal) probability of a visible (input) vector of booleans is the sum over all possible hidden layer configurations:10



Since the RBM has the shape of a bipartite graph, with no intra-layer connections, the hidden unit activations are mutually independent given the visible unit activations and conversely, the visible unit activations are mutually independent given the hidden unit activations.11 That is, for 
 
 
 
  visible units and 
 
 
 
  hidden units, the conditional probability of a configuration of the visible units 
 
 
 
 , given a configuration of the hidden units 
 
 
 
 , is


 
 .
Conversely, the conditional probability of 
 
 
 
  given 
 
 
 
  is


 
 .
The individual activation probabilities are given by


 
  and 
 
 

where 
 
 
 
  denotes the logistic sigmoid.
The visible units of RBM can be multinomial, although the hidden units are Bernoulli. In this case, the logistic function for visible units is replaced by the Softmax function



where K is the number of discrete values that the visible values have. They are applied in Topic Modeling,12 and RecSys.13
Relation to other models
Restricted Boltzmann machines are a special case of Boltzmann machines and Markov random fields.1415 Their graphical model corresponds to that of factor analysis.16
Training algorithm
Restricted Boltzmann machines are trained to maximize the product of probabilities assigned to some training set 
 
 
 
  (a matrix, each row of which is treated as a visible vector 
 
 
 
 ),



or equivalently, to maximize the expected log probability of 
 
 
 
 :1718



The algorithm most often used to train RBMs, that is, to optimize the weight vector 
 
 
 
 , is the contrastive divergence (CD) algorithm due to Hinton, originally developed to train PoE (product of experts) models.19 20 The algorithm performs Gibbs sampling and is used inside a gradient descent procedure (similar to the way backpropagation is used inside such a procedure when training feedforward neural nets) to compute weight update.
The basic, single-step contrastive divergence (CD-1) procedure for a single sample can be summarized as follows:

Take a training sample 
 
 
 
 , compute the probabilities of the hidden units and sample a hidden activation vector 
 
 
 
  from this probability distribution.
Compute the outer product of 
 
 
 
  and 
 
 
 
  and call this the positive gradient.
From 
 
 
 
 , sample a reconstruction 
 
 
 
  of the visible units, then resample the hidden activations 
 
 
 
  from this. (Gibbs sampling step)
Compute the outer product of 
 
 
 
  and 
 
 
 
  and call this the negative gradient.
Let the weight update to 
 
 
 
  be the positive gradient minus the negative gradient, times some learning rate
 
 
 
 .

The update rule for the biases 
 
 
 
 , 
 
 
 
  is defined analogously.
A Practical Guide to Training RBMs written by Hinton can be found in his homepage.21
A restricted/layered Boltzmann machine (RBM) has either bit or scalar node values, an array for each layer, and between those are scalar values potentially for every pair of nodes one from each layer and an adjacent layer. It is run and trained using "weighted coin flips" of a chance calculated at each individual node. Those chances are the logistic sigmoid of the sum of scalar weights of whichever pairs of nodes are on at the time, divided by temperature which decreases in each round of Simulated annealing as potentially all the data is trained in again. If either node in a pair is off, that weight is not counted. To run it, you go up and down the layers, updating the chances and weighted coin flips, until it converges to the coins in lowest layer (visible nodes) staying mostly a certain way. To train it, it is the same shape as running it except you observe the weights of the pairs that are on, the first time up you add the learning rate between those pairs, then go back down and up again and that time subtract the learning rate. As Geoffrey Hinton explained it, the first time up is to learn the data, and the second time up is to unlearn whatever its earlier reaction was to the data.
See also

Autoencoder
Deep learning
Helmholtz machine
Hopfield network

References
External links

Introduction to Restricted Boltzmann Machines. Edwin Chen's blog, July 18, 2011.
A Beginner's Guide to Restricted Boltzmann Machines. Deeplearning4j Documentation
Understanding RBMs. Deeplearning4j Documentation, August 4, 2015.

"
Category:Artificial neural networks Category:Stochastic models



↩
↩
↩
↩
↩
Ruslan Salakhutdinov and Geoffrey Hinton (2010). Replicated softmax: an undirected topic model. Neural Information Processing Systems 23.↩
Miguel Á. Carreira-Perpiñán and Geoffrey Hinton (2005). On contrastive divergence learning. Artificial Intelligence and Statistics.↩
↩
Geoffrey Hinton (2010). A Practical Guide to Training Restricted Boltzmann Machines. UTML TR 2010–003, University of Toronto.↩




↩
Asja Fischer and Christian Igel. Training Restricted Boltzmann Machines: An Introduction. Pattern Recognition 47, pp. 25-39, 2014↩
↩


Geoffrey Hinton (1999). Products of Experts. ICANN 1999.↩
↩





