   Doubling-oriented Doche–Icart–Kohel curve      Doubling-oriented Doche–Icart–Kohel curve   (Figure)  A Doubling-oriented Doche-Icart-Kohel curve of equation     y  2   =    x  3   -   x  2   -   16  x         superscript  y  2      superscript  x  3    superscript  x  2     16  x      y^{2}=x^{3}-x^{2}-16x      In mathematics , the doubling-oriented Doche–Icart–Kohel curve is a form in which an elliptic curve can be written. It is a special case of Weierstrass form and it is also important in elliptic-curve cryptography because the doubling speeds up considerably (computing as composition of 2- isogeny and its dual ). It has been introduced by Christophe Doche, Thomas Icart, and David R. Kohel in 1  Definition  Let   K   K   K   be a field and let    a  ∈  K      a  K    a\in K   . Then, the Doubling-oriented Doche–Icart–Kohel curve with parameter  a in affine coordinates is represented by:       y  2   =    x  3   +   a   x  2    +   16  a  x         superscript  y  2      superscript  x  3     a   superscript  x  2      16  a  x      y^{2}=x^{3}+ax^{2}+16ax     Equivalently, in projective coordinates :        Z   Y  2    =    X  3   +   a  Z   X  2    +   16  a  X   Z  2      ,        Z   superscript  Y  2       superscript  X  3     a  Z   superscript  X  2      16  a  X   superscript  Z  2       ZY^{2}=X^{3}+aZX^{2}+16aXZ^{2},     with    x  =   X  Z       x    X  Z     x=\frac{X}{Z}   and    y  =   Y  Z       y    Y  Z     y=\frac{Y}{Z}   .  Notice that, since this curve is a special case of Weierstrass form , transformations to the most common form of elliptic curve (Weierstrass form) are not needed.  Group law  It is interesting to analyze the group law in elliptic curve cryptography , defining the addition and doubling formulas, because these formulas are necessary to compute multiples of points [n]P (see Exponentiation by squaring ). In general, the group law is defined in the following way: if three points lies in the same line then they sum up to zero. So, by this property, the group laws are different for every curve shape.  In this case, since these curves are special cases of Weierstrass curves, the addition is just the standard addition on Weierstrass curves. On the other hand, to double a point, the standard doubling formula can be used, but it would not be so fast. In this case, the neutral element is    θ  =   (  0  :  1  :  0  )      fragments  θ    fragments  normal-(  0  normal-:  1  normal-:  0  normal-)     \theta=(0:1:0)   (in projective coordinates), for which    θ  =   -  θ       θ    θ     \theta=-\theta   . Then, if    P  =   (  x  ,  y  )       P   x  y     P=(x,y)   is a non-trivial element (     P  !   =  O        P   O    P!=O   ), then the inverse of this point (by addition) is –P=(x,-y).  Addition  In this case, affine coordinates will be used to define the addition formula:  (x 1 ,y 1 )+(x 2 ,y 2 )=(x 3 ,y 3 ) where  x 3 = (-x 1 3 +(x 2 -a)x 1 2 +(x 2 2 +2ax 2 )x 1 +(y 1 2 -2y 2 y 1 +(-x 2 3 -ax 2 2 +y 2 2 )))/(x 1 2 -2x 2 x 1 +x 2 2 )  y 3 = ((-y 1 +2y 2 )x 1 3 +(-ay 1 +(-3y 2 x 2 +ay 2 ))x 1 2 +((3x 2 2 +2ax 2 )y 1 -2ay 2 x 2 )x 1 +(y 1 3 -3y 2 y 1 2 +(-2x 2 3 -ax 2 2 +3y 2 2 )y 1 +(y 2 x 2 3 +ay 2 x 2 2 -y 2 3 )))/(-x 1 3 +3x 2 x 1 2 -3x 2 2 x 1 +x 2 3 )  Doubling  2(x 1 ,y 1 )=(x 3 ,y 3 )  x 3 = 1/(4y 1 2 )x 1 4 -8a/y 1 2 x 1 2 +64a2/y 1 2  y 3 = 1/(8y 1 3 )x 1 6 +((-a 2 +40a)/(4y 1 3 ))x 1 4 +((ay 1 2 +(16a 3 -640a 2 ))/(4y 1 3 ))x 1 2 +((-4a 2 y 1 2 -512a 3 )/y 1 3 )  Algorithms and examples  Addition  The fastest addition is the following one (comparing with the results given in: http://hyperelliptic.org/EFD/g1p/index.html ), and the cost that it takes is 4 multiplications, 4 squaring and 10 addition.  A = Y 2 -Y 1  AA = A 2  B = X 2 -X 1  CC = B 2  F = X 1 CC  Z 3 = 2CC  D = X 2 Z 3  ZZ 3 = Z 3 2  X 3 = 2(AA-F)-aZ 3 -D  Y 3 = ((A+B) 2 -AA-CC)(D-X 3 )-Y 2 ZZ 3  Example  Let    K  =  ℚ      K  ℚ    K=\mathbb{Q}   . Let P=(X 1 ,Y 1 )=(2,1), Q=(X 2 ,Y 2 )=(1,-1) and a=1, then  A=2  AA=4  B=1  CC=1  F=2  ' Z 3 =4 '  D=4  ZZ 3 =16  ' X 3 =-4 '  '''Y 3 =336 '''  Thus, P+Q=(-4:336:4)  Doubling  The following algorithm is the fastest one (see the following link to compare: http://hyperelliptic.org/EFD/g1p/index.html ), and the cost that it takes is 1 multiplication, 5 squaring and 7 additions.  A = X 1 2  B = A-a16  C = a 2 A  YY = Y 1 2  YY 2 = 2YY  Z 3 = 2YY 2  X 3 = B 2  V = (Y 1 +B)2-YY-X 3  Y 3 = V(X 3 +64C+a(YY 2 -C))  ZZ 3 = Z 3 2  Example  Let    K  =  ℚ      K  ℚ    K=\mathbb{Q}   and a=1. Let P=(-1,2), then Q=[2]P=(x3,y3) is given by:  A=1  B=-15  C=2  YY=4  YY 2 =8  Z 3 =16  X 3 =225  V=27  Y 3 =9693  ZZ 3 =256  Thus, Q=(225:9693:16).  Extended coordinates  The addition and doubling computations should be as fast as possible, so it is more convenient to use the following representation of the coordinates:      x  ,  y     x  y    x,y   are represented by    X  ,  Y  ,  Z  ,   Z  Z      X  Y  Z    Z  Z     X,Y,Z,ZZ   satisfying the following equations:      x  =   X  Z       x    X  Z     x=\frac{X}{Z}       y  =   Y   Z  Z        y    Y    Z  Z      y=\frac{Y}{ZZ}        Z  Z   =   Z  2         Z  Z    superscript  Z  2     ZZ=Z^{2}     Then, the Doubling-oriented Doche–Icart–Kohel curve is given by the following equation:       Y  2   =    Z   X  3    +   a   Z  2    X  2    +   16  a   Z  3   X         superscript  Y  2       Z   superscript  X  3      a   superscript  Z  2    superscript  X  2      16  a   superscript  Z  3   X      Y^{2}=ZX^{3}+aZ^{2}X^{2}+16aZ^{3}X   .  In this case,    P  =   (  X  :  Y  :  Z  :  Z  Z  )      fragments  P    fragments  normal-(  X  normal-:  Y  normal-:  Z  normal-:  Z  Z  normal-)     P=(X:Y:Z:ZZ)   is a general point with inverse    -  P  =   (  X  :  -  Y  :  Z  :  Z  Z  )      fragments   P    fragments  normal-(  X  normal-:   Y  normal-:  Z  normal-:  Z  Z  normal-)     -P=(X:-Y:Z:ZZ)   . Furthermore, the points over the curve satisfy     (  X  :  Y  :  Z  :   Z  2   )   =   (  λ  X  :   λ  2   Y  :  λ  Z  :   λ  2    Z  2   )      fragments   fragments  normal-(  X  normal-:  Y  normal-:  Z  normal-:   superscript  Z  2   normal-)     fragments  normal-(  λ  X  normal-:   superscript  λ  2   Y  normal-:  λ  Z  normal-:   superscript  λ  2    superscript  Z  2   normal-)     (X:Y:Z:Z^{2})=(\lambda X:\lambda^{2}Y:\lambda Z:\lambda^{2}Z^{2})   for all   λ   λ   \lambda   nonzero.  Faster doubling formulas for these curves and mixed-addition formulas were introduced by Doche, Icart and Kohel; but nowadays, these formulas are improved by Daniel J. Bernstein and Tanja Lange (see below the link of EFD).  Internal Link  For more informations about the running-time required in a specific case, see Table of costs of operations in elliptic curves  External links   http://hyperelliptic.org/EFD/g1p/index.html   Notes  References       http://www.hyperelliptic.org/EFD/g1p/auto-2dik.html   "  Category:Elliptic curves  Category:Elliptic curve cryptography     Christophe Doche, Thomas Icart, and David R. Kohel, Efficient Scalar Multiplication by Isogeny Decompositions ↩     