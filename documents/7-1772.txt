   PostBQP      PostBQP   In computational complexity theory , PostBQP is a complexity class consisting of all of the computational problems solvable in polynomial time on a quantum Turing machine with postselection and bounded error (in the sense that the algorithm is correct at least 2/3 of the time on all inputs).  Postselection is not considered to be a feature that a realistic computer (even a quantum one) would possess, but nevertheless postselecting machines are interesting from a theoretical perspective.  Removing either one of the two main features (quantumness, postselection) from PostBQP gives the following two complexity classes, both of which are subsets of PostBQP :   BQP is the same as PostBQP except without postselection  BPP path is the same as PostBPP except that instead of quantum, the algorithm is a classical randomized algorithm (with postselection) 1   The addition of postselection seems to make quantum Turing machines much more powerful: Scott Aaronson proved 2 3  PostBQP is equal to PP , a class which is believed to be relatively powerful, whereas BQP is not known even to contain the seemingly smaller class NP . Using similar techniques, Aaronson also proved that small changes to the laws of quantum computing would have significant effects. As specific examples, under either of the two following changes, the "new" version of BQP would equal PP :   if we broadened the definition of 'quantum gate' to include not just unitary operations but linear operations, or  if the probability of measuring a basis state    |  x  ⟩     ket  x    |x\rangle   was proportional to     |   α  x   |   p     superscript     subscript  α  x    p    |\alpha_{x}|^{p}   instead of     |   α  x   |   2     superscript     subscript  α  x    2    |\alpha_{x}|^{2}   for any even integer p > 2 .   Basic properties  In order to describe some of the properties of PostBQP we fix a formal way of describing quantum postselection. Define a quantum algorithm to be a family of quantum circuits (specifically, a uniform circuit family ). We designate one qubit as the postselection qubit P and another as the output qubit Q . Then PostBQP is defined by postselecting upon the event that the postselection qubit is |1>. Explicitly, a language L is in PostBQP if there is a quantum algorithm A so that after running A on input x and measuring the two qubits P and Q ,   P = 1 with nonzero probability  if the input x is in L then Pr[ Q = 1| P = 1] ≥ 2/3  if the input x is not in L then Pr[ Q = 0| P = 1] ≥ 2/3.   One can show that allowing a single postselection step at the end of the algorithm (as described above) or allowing intermediate postselection steps during the algorithm are equivalent. 4 5  Here are three basic properties of PostBQP (which also hold for BQP via similar proofs):  1. PostBQP is closed under complement . Given a language L in PostBQP and a corresponding deciding circuit family, create a new circuit family by flipping the output qubit after measurement, then the new circuit family proves the complement of L is in PostBQP .  2. You can do probability amplification in PostBQP . The definition of PostBQP is not changed if we replace the 2/3 value in its definition by any other constant strictly between 1/2 and 1. As an example, given a PostBQP algorithm A with success probability 2/3, we can construct another algorithm which runs three independent copies of A , outputs a postselection bit equal to the conjunction of the three "inner" ones, and outputs an output bit equal to the majority of the three "inner" ones; the new algorithm will be correct with conditional probability       (   2  /  3   )   3   +   3   (   1  /  3   )     (   2  /  3   )   2     =   20  /  27          superscript    2  3   3     3    1  3    superscript    2  3   2       20  27     (2/3)^{3}+3(1/3)(2/3)^{2}=20/27   , greater than the original 2/3.  3. PostBQP is closed under intersection . Suppose we have PostBQP circuit families for two languages L1 and L2 , with respective postselection qubits and output qubits P1, P2, Q1, Q2 . We may assume by probability amplification that both circuit families have success probability at least 5/6. Then we create a composite algorithm where the circuits for L1 and L2 are run independently, and we set P to the conjunction of P1 and P2 , and Q to the conjunction of Q1 and Q2 . It is not hard to see by a union bound that this composite algorithm correctly decides membership in     L  1   ∩   L  2         L  1     L  2     L1\cap L2   with (conditional) probability at least 2/3.  More generally, combinations of these ideas show that PostBQP is closed under union and BQP truth-table reductions.  ==PostBQP = PP==  Scott Aaronson showed 6 that the complexity classes PostBQP (postselected bounded error quantum polynomial time) and PP (probabilistic polynomial time) are equal. The result was significant because this quantum computation reformulation of PP gave new insight and simpler proofs of properties of PP .  The usual definition of a PostBQP circuit family is one with two outbit qubits P (postselection) and Q (output) with a single measurement of P and Q at the end such that the probability of measuring P = 1 has nonzero probability, the conditional probability Pr[ Q = 1| P = 1] ≥ 2/3 if the input x is in the language, and Pr[ Q = 0| P = 1] ≥ 2/3 if the input x is not in the language. For technical reasons we tweak the definition of PostBQP as follows: we require that Pr[ P = 1] ≥ 2 − n c for some constant c depending on the circuit family. Note this choice does not affect the basic properties of PostBQP , and also it can be shown that any computation consisting of typical gates (e.g. Hadamard, Toffoli) has this property whenever Pr[ P = 1] > 0.  Proving PostBQP ⊆ PP  Suppose we are given a PostBQP family of circuits to decide a language L . We assume without loss of generality (e.g. see the inessential properties of quantum computers ) that all gates have transition matrices that are represented with real numbers, at the expense of adding one more qubit.  Let   Ψ   normal-Ψ   \Psi   denote the final quantum state of the circuit before the postselecting measurement is made. The overall goal of the proof is to construct a PP algorithm to decide L . More specifically it suffices to have L correctly compare the squared amplitude of   Ψ   normal-Ψ   \Psi   in the states with Q = 1, P = 1 to the squared amplitude of   Ψ   normal-Ψ   \Psi   in the states with Q = 0, P = 1 to determine which is bigger. The key insight is that the comparison of these amplitudes can be transformed into comparing the acceptance probability of a PP machine with 1/2.  Matrix view of PostBQP algorithms  Let n denote the input size, B = B ( n ) denote the total number of qubits in the circuit (inputs, ancillary, output and postselection qubits), and G = G ( n ) denote the total number of gates. Represent the i th gate by its transition matrix A i (a real unitary     2  B   ×   2  B        superscript  2  B    superscript  2  B     2^{B}\times 2^{B}   matrix) and let the initial state be | x > (padded with zeroes). Then    Ψ  =    A  G    A   G  -  1    ⋯   A  2    A  1    |  x  ⟩        normal-Ψ     superscript  A  G    superscript  A    G  1    normal-⋯   superscript  A  2    superscript  A  1    ket  x      \Psi=A^{G}A^{G-1}\cdots A^{2}A^{1}|x\rangle   . Define S 1 (resp. S 0 ) to be the set of basis states corresponding to P = 1, Q = 1 (resp. P = 1, Q = 0) and define the probabilities       π  1   :=  Pr   [  P  =  1  ,  Q  =  1  ]   =   ∑   ω  ∈   S  1      Ψ  ω  2      fragments   subscript  π  1   assign  Pr   fragments  normal-[  P   1  normal-,  Q   1  normal-]     subscript     ω   subscript  S  1      subscript   superscript  normal-Ψ  2   ω     \pi_{1}:=\text{Pr}[P=1,Q=1]=\sum_{\omega\in S_{1}}\Psi^{2}_{\omega}          π  0   :=  Pr   [  P  =  1  ,  Q  =  0  ]   =   ∑   ω  ∈   S  0      Ψ  ω  2   .     fragments   subscript  π  0   assign  Pr   fragments  normal-[  P   1  normal-,  Q   0  normal-]     subscript     ω   subscript  S  0      subscript   superscript  normal-Ψ  2   ω   normal-.    \pi_{0}:=\text{Pr}[P=1,Q=0]=\sum_{\omega\in S_{0}}\Psi^{2}_{\omega}.     The definition of PostBQP ensures that either     π  1   ≥   2   π  0         subscript  π  1     2   subscript  π  0      \pi_{1}\geq 2\pi_{0}   or     π  0   ≥   2   π  1         subscript  π  0     2   subscript  π  1      \pi_{0}\geq 2\pi_{1}   according to whether x is in L or not.  Our PP machine will compare    π  1     subscript  π  1    \pi_{1}   and    π  0     subscript  π  0    \pi_{0}   . In order to do this, we expand the definition of matrix multiplication:         Ψ  ω   =    ∑    α  1   ,  …  ,   α  G       A   ω  ,   α  G    G    A    α  G   ,   α   G  -  1      G  -  1    ⋯   A    α  3   ,   α  2    2    A    α  2   ,   α  1    1    x   α  1           subscript  normal-Ψ  ω     subscript     subscript  α  1   normal-…   subscript  α  G        subscript   superscript  A  G    ω   subscript  α  G      subscript   superscript  A    G  1      subscript  α  G    subscript  α    G  1      normal-⋯   subscript   superscript  A  2     subscript  α  3    subscript  α  2      subscript   superscript  A  1     subscript  α  2    subscript  α  1      subscript  x   subscript  α  1        \Psi_{\omega}=\sum_{\alpha_{1},\ldots,\alpha_{G}}A^{G}_{\omega,\alpha_{G}}A^{G%
 -1}_{\alpha_{G},\alpha_{G-1}}\cdots A^{2}_{\alpha_{3},\alpha_{2}}A^{1}_{\alpha%
 _{2},\alpha_{1}}x_{\alpha_{1}}        where the sum is taken over all lists of G basis vectors    α  i     subscript  α  i    \alpha_{i}   . Now    π  1     subscript  π  1    \pi_{1}   and    π  0     subscript  π  0    \pi_{0}   can be expressed as a sum of pairwise products of these terms. Intuitively, we want to design a machine whose acceptance probability is something like     1  2    (    1  +   π  1    -   π  0    )         1  2       1   subscript  π  1     subscript  π  0      \frac{1}{2}(1+\pi_{1}-\pi_{0})   , since then    x  ∈  L      x  L    x\in L   would imply that the acceptance probability is      1  2    (    1  +   π  1    -   π  0    )    >   1  /  2           1  2       1   subscript  π  1     subscript  π  0       1  2     \frac{1}{2}(1+\pi_{1}-\pi_{0})>1/2   , while    x  ∉  L      x  L    x\not\in L   would imply that the acceptance probability is      1  2    (    1  +   π  1    -   π  0    )    <   1  /  2           1  2       1   subscript  π  1     subscript  π  0       1  2     \frac{1}{2}(1+\pi_{1}-\pi_{0})<1/2   .  Technicality: we may assume entries of the transition matrices A i are rationals with denominator    2   f   (  n  )       superscript  2    f  n     2^{f(n)}   for some polynomial f(n) .  The definition of PostBQP tells us that     π  1   ≥    2  3    (    π  0   +   π  1    )         subscript  π  1       2  3      subscript  π  0    subscript  π  1       \pi_{1}\geq\frac{2}{3}(\pi_{0}+\pi_{1})   if x is in L , and that otherwise     π  0   ≥    2  3    (    π  0   +   π  1    )         subscript  π  0       2  3      subscript  π  0    subscript  π  1       \pi_{0}\geq\frac{2}{3}(\pi_{0}+\pi_{1})   . Let us replace all entries of A by the nearest fraction with denominator    2   f   (  n  )       superscript  2    f  n     2^{f(n)}   for a large polynomial f(n) that we presently describe. What will be used later is that the new    π   π   \pi   values satisfy     π  1   >    1  2    (    π  0   +   π  1    )         subscript  π  1       1  2      subscript  π  0    subscript  π  1       \pi_{1}>\frac{1}{2}(\pi_{0}+\pi_{1})   if x is in L , and     π  0   >    1  2    (    π  0   +   π  1    )         subscript  π  0       1  2      subscript  π  0    subscript  π  1       \pi_{0}>\frac{1}{2}(\pi_{0}+\pi_{1})   if x is not in L . Using the earlier technical assumption and by analyzing how the 1-norm of the computational state changes, this is seen to be satisfied if        (   1  +    2   -   f   (  n  )       2  B     )   G   -  1   <    1  6    2   -   n  c       ,         superscript    1     superscript  2      f  n      superscript  2  B     G   1       1  6    superscript  2     superscript  n  c        (1+2^{-f(n)}2^{B})^{G}-1<\frac{1}{6}2^{-n^{c}},   thus clearly there is a large enough f that is polynomial in n .  Constructing the PP machine  Now we provide the detailed implementation of our PP machine. Let   α   α   \alpha   denote the sequence     {   α  i   }    i  =  1   G     superscript   subscript    subscript  α  i      i  1    G    \{\alpha_{i}\}_{i=1}^{G}   and define the shorthand notation         Π   (  A  ,  ω  ,  α  ,  x  )    :=    A   ω  ,   α  G    G    A    α  G   ,   α   G  -  1      G  -  1    ⋯   A    α  3   ,   α  2    2    A    α  2   ,   α  1    1    x   α  1        assign    normal-Π   A  ω  α  x       subscript   superscript  A  G    ω   subscript  α  G      subscript   superscript  A    G  1      subscript  α  G    subscript  α    G  1      normal-⋯   subscript   superscript  A  2     subscript  α  3    subscript  α  2      subscript   superscript  A  1     subscript  α  2    subscript  α  1      subscript  x   subscript  α  1       \Pi(A,\omega,\alpha,x):=A^{G}_{\omega,\alpha_{G}}A^{G-1}_{\alpha_{G},\alpha_{G%
 -1}}\cdots A^{2}_{\alpha_{3},\alpha_{2}}A^{1}_{\alpha_{2},\alpha_{1}}x_{\alpha%
 _{1}}   ,     then           π  1   -   π  0    =     ∑   ω  ∈   S  1       ∑   α  ,   α  ′      Π   (  A  ,  ω  ,  α  ,  x  )   Π   (  A  ,  ω  ,   α  ′   ,  x  )      -    ∑   ω  ∈   S  0       ∑   α  ,   α  ′      Π   (  A  ,  ω  ,  α  ,  x  )   Π   (  A  ,  ω  ,   α  ′   ,  x  )        .         subscript  π  1    subscript  π  0        subscript     ω   subscript  S  1       subscript    α   superscript  α  normal-′       normal-Π   A  ω  α  x   normal-Π   A  ω   superscript  α  normal-′   x        subscript     ω   subscript  S  0       subscript    α   superscript  α  normal-′       normal-Π   A  ω  α  x   normal-Π   A  ω   superscript  α  normal-′   x         \pi_{1}-\pi_{0}=\sum_{\omega\in S_{1}}\sum_{\alpha,\alpha^{\prime}}\Pi(A,%
 \omega,\alpha,x)\Pi(A,\omega,\alpha^{\prime},x)-\sum_{\omega\in S_{0}}\sum_{%
 \alpha,\alpha^{\prime}}\Pi(A,\omega,\alpha,x)\Pi(A,\omega,\alpha^{\prime},x).        We define our PP machine to   pick a basis state   ω   ω   \omega   uniformly at random  if    ω  ∉    S  0   ∪   S  1        ω     subscript  S  0    subscript  S  1      \omega\not\in S_{0}\cup S_{1}   then STOP and accept with probability 1/2, reject with probability 1/2  pick two sequences    α  ,   α  ′      α   superscript  α  normal-′     \alpha,\alpha^{\prime}   of G basis states uniformly at random  compute    X  =   Π   (  A  ,  ω  ,  α  ,  x  )   Π   (  A  ,  ω  ,   α  ′   ,  x  )        X    normal-Π   A  ω  α  x   normal-Π   A  ω   superscript  α  normal-′   x      X=\Pi(A,\omega,\alpha,x)\Pi(A,\omega,\alpha^{\prime},x)   (which is a fraction with denominator    2   2  f   (  n  )   G   (  n  )       superscript  2    2  f  n  G  n     2^{2f(n)G(n)}   such that     -  1   ≤  X  ≤  1          1   X       1     -1\leq X\leq 1   )  if    ω  ∈   S  1       ω   subscript  S  1     \omega\in S_{1}   then accept with probability     1  +  X   2        1  X   2    \frac{1+X}{2}   and reject with probability     1  -  X   2        1  X   2    \frac{1-X}{2}   (which takes at most 2f(n)G(n)+1 coin flips)  otherwise (then    ω  ∈   S  0       ω   subscript  S  0     \omega\in S_{0}   ) accept with probability     1  -  X   2        1  X   2    \frac{1-X}{2}   and reject with probability     1  +  X   2        1  X   2    \frac{1+X}{2}   (which again takes at most 2f(n)G(n)+1 coin flips)   Then it is straightforward to compute that this machine accepts with probability      1  2   +    (    π  1   -   π  0    )   /   (   2   1  +   B   (  n  )    +   2  B   (  n  )   G   (  n  )      )     ,        1  2        subscript  π  1    subscript  π  0     superscript  2    1    B  n     2  B  n  G  n        \frac{1}{2}+(\pi_{1}-\pi_{0})/(2^{1+B(n)+2B(n)G(n)}),   so this is a PP machine for the language L , as needed.  Proving PP ⊆ PostBQP  Suppose we have a PP machine with time complexity T:=T(n) on input x of length n := |x| . Thus the machine flips a coin at most T times during the computation. We can thus view the machine as a deterministic function f (implemented, e.g. by a classical circuit) which takes two inputs ( x, r ) where r , a binary string of length T , represents the results of the random coin flips that are performed by the computation, and the output of f is 1 (accept) or 0 (reject). The definition of PP tells us that         x  ∈  L   ⇔    #   {   r  ∈    {  0  ,  1  }   T    ∣    f   (  x  ,  r  )    =  1   }    ≥   2   T  -  1        normal-⇔    x  L       normal-#   conditional-set    r   superscript   0  1   T        f   x  r    1      superscript  2    T  1       x\in L\Leftrightarrow\#\{r\in\{0,1\}^{T}\mid f(x,r)=1\}\geq 2^{T-1}        Thus, we want a PostBQP algorithm that can determine whether the above statement is true.  Define s to be the number of random strings which lead to acceptance,        s  :=   #   {   r  ∈    {  0  ,  1  }   T    ∣    f   (  x  ,  r  )    =  1   }       assign  s    normal-#   conditional-set    r   superscript   0  1   T        f   x  r    1       s:=\#\{r\in\{0,1\}^{T}\mid f(x,r)=1\}        and so     2  T   -  s       superscript  2  T   s    2^{T}-s   is the number of rejected strings. It is straightforward to argue that without loss of generality,    s  ∉   {  0  ,    2  T   /  2   ,   2  T   }       s   0     superscript  2  T   2    superscript  2  T      s\not\in\{0,2^{T}/2,2^{T}\}   ; for details, see a similar without loss of generality assumption in the proof that PP is closed under complementation .  Aaronson's algorithm  Aaronson's algorithm for solving this problem is as follows. For simplicity, we will write all quantum states as unnormalized. First, we prepare the state     ∑   x  ∈    {  0  ,  1  }   T       |  x  ⟩    |   f   (  x  )    ⟩        subscript     x   superscript   0  1   T        ket  x    ket    f  x       \sum_{x\in\{0,1\}^{T}}|x\rangle|f(x)\rangle   . Second, we apply Hadamard gates to the first register (each of the first T qubits), measure the first register and postselect on it being the all-zero string. It is easy to verify that this leaves the last register (the last qubit) in the residual state          |  ψ  ⟩   :=     (    2  T   -  s   )    |  0  ⟩    +   s   |  1  ⟩      .     assign   ket  ψ          superscript  2  T   s    ket  0      s   ket  1       |\psi\rangle:=(2^{T}-s)|0\rangle+s|1\rangle.        Where H denotes the Hadamard gate, we compute the state         H   |  ψ  ⟩    =    (     2  T    |  0  ⟩    +    (    2  T   -   2  s    )    |  1  ⟩     )   /   2          H   ket  ψ           superscript  2  T    ket  0         superscript  2  T     2  s     ket  1       2      H|\psi\rangle=(2^{T}|0\rangle+(2^{T}-2s)|1\rangle)/\sqrt{2}   .     Where    α  ,  β     α  β    \alpha,\beta   are positive real numbers to be chosen later with      α  2   +   β  2    =  1         superscript  α  2    superscript  β  2    1    \alpha^{2}+\beta^{2}=1   , we compute the state     α   |  0  ⟩    |  ψ  ⟩    +   β   |  1  ⟩    |   H  ψ   ⟩          α   ket  0    ket  ψ      β   ket  1    ket    H  ψ       \alpha|0\rangle|\psi\rangle+\beta|1\rangle|H\psi\rangle   and measure the second qubit, postselecting on its value being equal to 1, which leaves the first qubit in a residual state depending on    β  /  α      β  α    \beta/\alpha   which we denote         |   ϕ   β  /  α    ⟩   :=    α  s   |  0  ⟩    +    β   2     (    2  T   -   2  s    )    |  1  ⟩        assign   ket   subscript  ϕ    β  α         α  s   ket  0        β    2       superscript  2  T     2  s     ket  1       |\phi_{\beta/\alpha}\rangle:=\alpha s|0\rangle+\frac{\beta}{\sqrt{2}}(2^{T}-2s%
 )|1\rangle   .     Visualizing the possible states of a qubit as a circle, we see that if    s  >   2   T  -  1        s   superscript  2    T  1      s>2^{T-1}   , (i.e. if    x  ∈  L      x  L    x\in L   ) then    ϕ   β  /  α      subscript  ϕ    β  α     \phi_{\beta/\alpha}   lies in the open quadrant     Q   a  c  c    :=   (   -   |  1  ⟩    ,   |  0  ⟩   )      assign   subscript  Q    a  c  c        ket  1     ket  0      Q_{acc}:=(-|1\rangle,|0\rangle)   while if    s  <   2   T  -  1        s   superscript  2    T  1      s<2^{T-1}   , (i.e. if    x  ∉  L      x  L    x\not\in L   ) then    ϕ   β  /  α      subscript  ϕ    β  α     \phi_{\beta/\alpha}   lies in the open quadrant     Q   r  e  j    :=   (   |  0  ⟩   ,   |  1  ⟩   )      assign   subscript  Q    r  e  j      ket  0    ket  1      Q_{rej}:=(|0\rangle,|1\rangle)   . In fact for any fixed x (and its corresponding s ), as we vary the ratio    β  /  α      β  α    \beta/\alpha   in    (  0  ,  ∞  )     0     (0,\infty)   , note that the image of    |   ϕ   β  /  α    ⟩     ket   subscript  ϕ    β  α      |\phi_{\beta/\alpha}\rangle   is precisely the corresponding open quadrant. In the rest of the proof, we make precise the idea that we can distinguish between these two quadrants.  Analysis  Let     |  +  ⟩   =    (    |  1  ⟩   +   |  0  ⟩    )   /   2         ket         ket  1    ket  0      2      |+\rangle=(|1\rangle+|0\rangle)/\sqrt{2}   , which is the center of    Q   r  e  j      subscript  Q    r  e  j     Q_{rej}   , and let    |  -  ⟩     ket     |-\rangle   be orthogonal to    |  +  ⟩     ket     |+\rangle   . Any qubit in    Q   a  c  c      subscript  Q    a  c  c     Q_{acc}   , when measured in the basis    {   |  +  ⟩   ,   |  -  ⟩   }      ket     ket      \{|+\rangle,|-\rangle\}   , gives the value    |  +  ⟩     ket     |+\rangle   less than 1/2 of the time. On the other hand, if    x  ∉  L      x  L    x\not\in L   and we had picked     β  /  α   =   r  *   :=     2   s   /   (    2  T   -   2  s    )            β  α    superscript  r      assign          2   s      superscript  2  T     2  s        \beta/\alpha=r^{*}:=\sqrt{2}s/(2^{T}-2s)   then measuring    |   ϕ   β  /  α    ⟩     ket   subscript  ϕ    β  α      |\phi_{\beta/\alpha}\rangle   in the basis    {   |  +  ⟩   ,   |  -  ⟩   }      ket     ket      \{|+\rangle,|-\rangle\}   would give the value    |  +  ⟩     ket     |+\rangle   all of the time. Since we don't know s we also don't know the precise value of r* , but we can try several (polynomially many) different values for    β  /  α      β  α    \beta/\alpha   in hopes of getting one that is "near" r* .  Specifically, note     2   -  T    <  r  *  <   2  T      fragments   superscript  2    T     r     superscript  2  T     2^{-T}   and let us successively set    β  /  α      β  α    \beta/\alpha   to every value of the form    2  i     superscript  2  i    2^{i}   for     -  T   ≤  i  ≤  T          T   i       T     -T\leq i\leq T   . Then elementary calculations show that for one of these values of i , the probability that the measurement of    |   ϕ   2  i    ⟩     ket   subscript  ϕ   superscript  2  i      |\phi_{2^{i}}\rangle   in the basis    {   |  +  ⟩   ,   |  -  ⟩   }      ket     ket      \{|+\rangle,|-\rangle\}   yields    |  +  ⟩     ket     |+\rangle   is at least      (   3  +   2   2     )   /  6   ≈  0.971.          3    2    2     6   0.971.    (3+2\sqrt{2})/6\approx 0.971.     Overall, the PostBQP algorithm is as follows. Let k be any constant strictly between 1/2 and     (   3  +   2   2     )   /  6        3    2    2     6    (3+2\sqrt{2})/6   . We do the following experiment for each     -  T   ≤  i  ≤  T          T   i       T     -T\leq i\leq T   : construct and measure    |   ϕ   2  i    ⟩     ket   subscript  ϕ   superscript  2  i      |\phi_{2^{i}}\rangle   in the basis    {   |  +  ⟩   ,   |  -  ⟩   }      ket     ket      \{|+\rangle,|-\rangle\}   a total of    C   log  T       C    T     C\log T   times where C is a constant. If the proportion of    |  +  ⟩     ket     |+\rangle   measurements is greater than k , then reject. If we don't reject for any i , accept. Chernoff bounds then show that for a sufficiently large universal constant C , we correctly classify x with probability at least 2/3.  Note that this algorithm satisfies the technical assumption that the overall postselection probability is not too small: each individual measurement of    |   ϕ   2  i    ⟩     ket   subscript  ϕ   superscript  2  i      |\phi_{2^{i}}\rangle   has postselection probability    1  /   2   O   (  T  )         1   superscript  2    O  T      1/2^{O(T)}   and so the overall probability is    1  /   2   O   (    T  2    log  T    )         1   superscript  2    O     superscript  T  2     T        1/2^{O(T^{2}\log T)}   .  Implications   See Quantum computation reformulation of PP   References    "  Category:Articles containing proofs  Category:Quantum complexity theory  Category:Probabilistic complexity classes     ↩  . Preprint available at 1 ↩  ↩   ↩  ↩     