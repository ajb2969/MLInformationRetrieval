   Adder–subtractor      Adder–subtractor   In digital circuits , an adder–subtractor is a circuit that is capable of adding or subtracting numbers (in particular, binary ). Below is a circuit that does adding or subtracting'' depending on a control signal. It is also possible to construct a circuit that performs both addition and subtraction at the same time.  Construction  (Figure)  A 4-bit ripple-carry adder–subtractor based on a 4-bit adder that performs two's complement on   A   A   A   when    D  =  1      D  1    D=1   to yield    S  =   B  -  A       S    B  A     S=B-A      Having an n -bit adder for   A   A   A   and   B   B   B   , then    S  =   A  +  B       S    A  B     S=A+B   . Then, assume the numbers are in two's complement . Then to perform    B  -  A      B  A    B-A   , two's complement theory says to invert each bit with a NOT gate then add one. This yields    S  =   B  +   A  ¯   +  1       S    B   normal-¯  A   1     S=B+\overline{A}+1   , which is easy to do with a slightly modified adder.  By preceding each   A   A   A   input bit on the adder with a 2-to-1 multiplexer where:   Input 0 (    I  0     subscript  I  0    I_{0}   ) is straight through (    A  i     subscript  A  i    A_{i}   )  Input 1 (    I  1     subscript  I  1    I_{1}   ) is negated (     A  i   ¯     normal-¯   subscript  A  i     \overline{A_{i}}   )   that has control input   D   D   D   and the initial carry connect is also connected to   D   D   D   then:   When    D  =  0      D  0    D=0   the modified adder performs addition  When    D  =  1      D  1    D=1   the modified adder performs subtraction   This works because when    D  =  1      D  1    D=1   the   A   A   A   input to the adder is really    A  ¯     normal-¯  A    \overline{A}   and the carry in is   1   1   1   . Adding   B   B   B   to    A  ¯     normal-¯  A    \overline{A}   and   1   1   1   yields the desired subtraction of    B  -  A      B  A    B-A   .  A way you can mark number   A   A   A   as positive or negative without using a multiplexer on each bit is to use a XOR (Exclusive OR) gate to precede each bit instead.   First input to the XOR gate is the actual input bit  Second input to the XOR gate for each is the Control input   D   D   D      This produces the same Truth table for the bit arriving at the adder as the multiplexer solution does. As when    D  =  0      D  0    D=0   the XOR Gate output will be what the input bit is set to. and when    D  =  1      D  1    D=1   it will effectively invert the input bit  Role in the arithmetic logic unit  Adders are a part of the core of an arithmetic logic unit (ALU). The control unit decides which operations an ALU should perform (based on the op code being executed) and sets the ALU operation. The   D   D   D   input to the adder–subtractor above would be one such control line from the control unit.  The adder–subtractor above could easily be extended to include more functions. For example, a 2-to-1 multiplexer could be introduced on each    B  i     subscript  B  i    B_{i}   that would switch between zero and    B  i     subscript  B  i    B_{i}   ; this could be used (in conjunction with    D  =  1      D  1    D=1   ) to yield the two's complement of   A   A   A   since     -  A   =    A  ¯   +  1         A      normal-¯  A   1     -A=\overline{A}+1   .  A further step would be to change the 2-to-1 mux on   A   A   A   to a 4-to-1 with the third input being zero, then replicating this on    B  i     subscript  B  i    B_{i}   thus yielding the following output functions:      0   0    (with the both    A  i     subscript  A  i    A_{i}   and    B  i     subscript  B  i    B_{i}   input set to zero and    D  =  0      D  0    D=0   )     1   1   1   (with the both    A  i     subscript  A  i    A_{i}   and    B  i     subscript  B  i    B_{i}   input set to zero and    D  =  1      D  1    D=1   )     A   A   A   (with the    B  i     subscript  B  i    B_{i}   input set to zero)     B   B   B   (with the    A  i     subscript  A  i    A_{i}   input set to zero)      A  +  1      A  1    A+1   (with the    B  i     subscript  B  i    B_{i}   input set to zero and    D  =  1      D  1    D=1   )      B  +  1      B  1    B+1   (with the    A  i     subscript  A  i    A_{i}   input set to zero and    D  =  1      D  1    D=1   )      A  +  B      A  B    A+B         A  -  B      A  B    A-B         B  -  A      B  A    B-A         A  ¯     normal-¯  A    \overline{A}   (with    A  i     subscript  A  i    A_{i}   set to invert;    B  i     subscript  B  i    B_{i}   set to zero; and    D  =  0      D  0    D=0   )      -  A      A    -A   (with    A  i     subscript  A  i    A_{i}   set to invert;    B  i     subscript  B  i    B_{i}   set to zero; and    D  =  1      D  1    D=1   )      B  ¯     normal-¯  B    \overline{B}   (with    B  i     subscript  B  i    B_{i}   set to invert;    A  i     subscript  A  i    A_{i}   set to zero; and    D  =  0      D  0    D=0   )      -  B      B    -B   (with    B  i     subscript  B  i    B_{i}   set to invert;    A  i     subscript  A  i    A_{i}   set to zero; and    D  =  1      D  1    D=1   )   By adding more logic in front of the adder, a single adder can be converted into much more than just an adder—an ALU.  See also   Adder (electronics)  Carry-lookahead adder  Carry-save adder  Adding machine  Subtractor   "  Category:Telecommunications equipment  Category:Binary arithmetic  Category:Adders (electronics)   