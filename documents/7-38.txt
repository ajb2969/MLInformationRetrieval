   (SAT, ε-UNSAT)      (SAT, ε-UNSAT)   In computational complexity theory , (SAT, ε-UNSAT) is a language that is used in the proof of the PCP theorem , which relates the language NP to probabilistically checkable proof systems.  For a given 3-CNF formula, Φ, and a constant, ε L \in \mbox{PCP}(O(\log n),O(1)), then    L  ≤   (  SAT  ,   ϵ  -  UNSAT   )       L   SAT    ϵ  UNSAT      L\leq(\mbox{SAT},\epsilon-\mbox{UNSAT})   . (See PCP theorem for more information) Let each bit in the proof y be     y  1   ,   y  2   ,  …  ,   y  m       subscript  y  1    subscript  y  2   normal-…   subscript  y  m     y_{1},y_{2},\ldots,y_{m}   .  First, it is necessary to encode when the verifier accepts in 3CNF clauses    ϕ  =    ⋀  r    ϕ  r        ϕ    subscript   r    subscript  ϕ  r      \phi=\bigwedge_{r}\phi_{r}   . Next, for each random string r , construct a sub-formula    ϕ  r     subscript  ϕ  r    \phi_{r}   . For a fixed r , its possible to determine all the variables queried, Enumerate each random string r , and add a clause     ϕ  r   =    f  r    (   y   i  1    ,   y   i  2    ,  …  ,   y   i  q    )         subscript  ϕ  r      subscript  f  r     subscript  y   subscript  i  1     subscript  y   subscript  i  2    normal-…   subscript  y   subscript  i  q        \phi_{r}=f_{r}(y_{i_{1}},y_{i_{2}},\ldots,y_{i_{q}})   , where    f  r     subscript  f  r    f_{r}   is true if and only if the PCP system accepts on reading the given random bits r . There are at most    2  q     superscript  2  q    2^{q}   SAT clauses. After these clauses are converted into 3CNF clauses, there are at most    q   2  q       q   superscript  2  q     q2^{q}   clauses.  If    x  ∈  L      x  L    x\in L   , then there is a proof y such that is accepted for every random string r . Therefore    ϕ   (   y  1   ,   y  2   ,  …  ,   y  m   )       ϕ    subscript  y  1    subscript  y  2   normal-…   subscript  y  m      \phi(y_{1},y_{2},\ldots,y_{m})   is satisfiable. If    x  ∉  L      x  L    x\notin L   , then for every assignment to     y  1   ,   y  2   ,  …  ,   y  m       subscript  y  1    subscript  y  2   normal-…   subscript  y  m     y_{1},y_{2},\ldots,y_{m}   the corresponding proof causes the verifier to reject for half of the random strings r . For each r that is rejected one of the clauses in    f  r     subscript  f  r    f_{r}   fails. Therefore at least    ϵ  =   1   2  q   2  q         ϵ    1    2  q   superscript  2  q       \epsilon=\frac{1}{2q2^{q}}   fraction of the clauses fail.  Therefore    L  ≤   (  SAT  ,   ϵ  -  UNSAT   )       L   SAT    ϵ  UNSAT      L\leq(\mbox{SAT},\epsilon-\mbox{UNSAT})   .  For     (   S  A  T   ,   ϵ  -   U  N  S  A  T    )   ∈   P  C  P   (   O   (   log  n   )    ,   O   (  1  )    )           S  A  T     ϵ    U  N  S  A  T       P  C  P     O    n      O  1       (SAT,\epsilon-UNSAT)\in PCP(O(\log n),O(1))   , let the proof that the PCP system reads be a satisfying assignment for the input 3-CNF , Φ. The system chooses    O   (   1  /  ϵ   )       O    1  ϵ     O(1/\epsilon)   clauses of the proof to check if they are truly satisfied. Note that only    log  n      n    \log n   random bits are needed to choose one of   n   n   n   clauses, and thus only     O   (   log   n  /  ϵ    )    =   O   (   log  n   )          O      n  ϵ       O    n      O(\log n/\epsilon)=O(\log n)   total random bits are needed. (Remember that ε is a constant.) For each clause to be checked, only 3 bits need to be read, and thus only     O   (   3  /  ϵ   )    =   O   (  1  )          O    3  ϵ      O  1     O(3/\epsilon)=O(1)   (a constant number) of bits from the proof need to be read. The system rejects if any of the clauses are not satisfied. If Φ is satisfiable, then there exists a proof (a truly satisfying assignment) that the system will always accept. If Φ is not in (SAT, ε-UNSAT), this means that an ε fraction of the clauses is not satisfiable. The probability that this system will accept in this case is      (   1  -  ϵ   )    1  /  ϵ    ≤   1  /  e   <   1  /  2          superscript    1  ϵ     1  ϵ      1  e          1  2      (1-\epsilon)^{1/\epsilon}\leq 1/e<1/2   . Therefore,     (   S  A  T   ,   ϵ  -   U  N  S  A  T    )   ∈   P  C  P   (   O   (   log  n   )    ,   O   (  1  )    )           S  A  T     ϵ    U  N  S  A  T       P  C  P     O    n      O  1       (SAT,\epsilon-UNSAT)\in PCP(O(\log n),O(1))   .  (SAT, ε-UNSAT) is an NP-hard language. As part of the proof of the PCP theorem , (SAT, ε-UNSAT) has also been shown to be in PCP(O(log n), O(1)).  "  Category:NP-complete problems   