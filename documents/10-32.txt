   Regulated rewriting      Regulated rewriting   Regulated rewriting is a specific area of formal languages studying grammatical systems which are able to take some kind of control over the production applied in a derivation step. For this reason, the grammatical systems studied in Regulated Rewriting theory are also called "Grammars with Controlled Derivations". Among such grammars can be noticed:  Matrix Grammars  Basic concepts  Definition A Matrix Grammar,    M  G      M  G    MG   , is a four-tuple    G  =   (  N  ,  T  ,  M  ,  S  )       G   N  T  M  S     G=(N,T,M,S)   where 1.-   N   N   N   is an alphabet of non-terminal symbols 2.-   T   T   T   is an alphabet of terminal symbols disjoint with   N   N   N    3.-    M  =    m  1   ,   m  2   ,  …  ,   m  n        M    subscript  m  1    subscript  m  2   normal-…   subscript  m  n      M={m_{1},m_{2},...,m_{n}}   is a finite set of matrices, which are non-empty sequences     m  i   =   [   p   i  1    ,  …  ,   p   i   k   (  i  )      ]        subscript  m  i     subscript  p   subscript  i  1    normal-…   subscript  p   subscript  i    k  i        m_{i}=[p_{i_{1}},...,p_{i_{k(i)}}]   , with     k   (  i  )    ≥  1        k  i   1    k(i)\geq 1   , and    1  ≤  i  ≤  n        1  i       n     1\leq i\leq n   , where each      p   i  j    1   ≤  j  ≤   k   (  i  )             subscript  p   subscript  i  j    1   j         k  i      p_{i_{j}}1\leq j\leq k(i)   , is an ordered pair     p   i  j    =   (  L  ,  R  )        subscript  p   subscript  i  j     L  R     p_{i_{j}}=(L,R)   being     L  ∈     (   N  ∪  T   )   *   N    (   N  ∪  T   )   *     ,   R  ∈    (   N  ∪  T   )   *       formulae-sequence    L     superscript    N  T     N   superscript    N  T         R   superscript    N  T        L\in(N\cup T)^{*}N(N\cup T)^{*},R\in(N\cup T)^{*}   these pairs are called "productions", and are denoted    L  →  R     normal-→  L  R    L\rightarrow R   . In these conditions the matrices can be written down as     m  i   =   [   L   i  1    →   R   i  1    ,  …  ,   L   i   k   (  i  )      →   R   i   k   (  i  )      ]      fragments   subscript  m  i     fragments  normal-[   subscript  L   subscript  i  1    normal-→   subscript  R   subscript  i  1    normal-,  normal-…  normal-,   subscript  L   subscript  i    k  i     normal-→   subscript  R   subscript  i    k  i     normal-]     m_{i}=[L_{i_{1}}\rightarrow R_{i_{1}},...,L_{i_{k(i)}}\rightarrow R_{i_{k(i)}}]    4.- S is the start symbol  Definition Let     M  G   =   (  N  ,  T  ,  M  ,  S  )         M  G    N  T  M  S     MG=(N,T,M,S)   be a matrix grammar and let   P   P   P   the collection of all productions on matrices of    M  G      M  G    MG   . We said that    M  G      M  G    MG   is of type i according to Chomsky's hierarchy with    i  =   0  ,  1  ,  2  ,  3       i   0  1  2  3     i=0,1,2,3   , or "increasing length" or "linear" or "without   λ   λ   \lambda   -productions" if and only if the grammar    G  =   (  N  ,  T  ,  P  ,  S  )       G   N  T  P  S     G=(N,T,P,S)   has the corresponding property.  The classic example   Note: taken from Abraham 1965, with change of nonterminals names    The context-sensitive language     L   (  G  )    =   {    a  n    b  n    c  n    :   n  ≥  1   }         L  G    conditional-set     superscript  a  n    superscript  b  n    superscript  c  n      n  1      L(G)=\{a^{n}b^{n}c^{n}:n\geq 1\}   is generated by the    C  F  M  G      C  F  M  G    CFMG       G  =   (  N  ,  T  ,  M  ,  S  )       G   N  T  M  S     G=(N,T,M,S)   where    N  =   {  S  ,  A  ,  B  ,  C  }       N   S  A  B  C     N=\{S,A,B,C\}   is the non-terminal set,    T  =   {  a  ,  b  ,  c  }       T   a  b  c     T=\{a,b,c\}   is the terminal set, and the set of matrices is defined as    M  :      normal-:  M  absent    M:       [   S  →   a  b  c    ]     delimited-[]   normal-→  S    a  b  c      \left[S\rightarrow abc\right]   ,    [   S  →   a  A  b  B  c  C    ]     delimited-[]   normal-→  S    a  A  b  B  c  C      \left[S\rightarrow aAbBcC\right]   ,    [    A  →   a  A    ,    B  →   b  B    ,   C  →   c  C      ]     delimited-[]   formulae-sequence   normal-→  A    a  A     formulae-sequence   normal-→  B    b  B     normal-→  C    c  C        \left[A\rightarrow aA,B\rightarrow bB,C\rightarrow cC\right]   ,    [    A  →  a   ,    B  →  b   ,   C  →  c     ]     delimited-[]   formulae-sequence   normal-→  A  a    formulae-sequence   normal-→  B  b    normal-→  C  c       \left[A\rightarrow a,B\rightarrow b,C\rightarrow c\right]   .  Time Variant Grammars  Basic concepts  Definition A Time Variant Grammar is a pair    (  G  ,  v  )     G  v    (G,v)   where    G  =   (  N  ,  T  ,  P  ,  S  )       G   N  T  P  S     G=(N,T,P,S)   is a grammar and    v  :   ℕ  →   2  P       normal-:  v   normal-→  ℕ   superscript  2  P      v:\mathbb{N}\rightarrow 2^{P}   is a function from the set of natural numbers to the class of subsets of the set of productions.  Programmed Grammars  Basic concepts  Definition  A Programmed Grammar is a pair    (  G  ,  s  )     G  s    (G,s)   where    G  =   (  N  ,  T  ,  P  ,  S  )       G   N  T  P  S     G=(N,T,P,S)   is a grammar and     s  ,  f   :   P  →   2  P       normal-:   s  f    normal-→  P   superscript  2  P      s,f:P\rightarrow 2^{P}   are the success and fail functions from the set of productions to the class of subsets of the set of productions.  Grammars with regular control language  Basic concepts  Definition A Grammar With Regular Control Language,    G  W  R  C  L      G  W  R  C  L    GWRCL   , is a pair    (  G  ,  e  )     G  e    (G,e)   where    G  =   (  N  ,  T  ,  P  ,  S  )       G   N  T  P  S     G=(N,T,P,S)   is a grammar and   e   e   e   is a regular expression over the alphabet of the set of productions.  A naive example  Consider the CFG    G  =   (  N  ,  T  ,  P  ,  S  )       G   N  T  P  S     G=(N,T,P,S)   where    N  =   {  S  ,  A  ,  B  ,  C  }       N   S  A  B  C     N=\{S,A,B,C\}   is the non-terminal set,    T  =   {  a  ,  b  ,  c  }       T   a  b  c     T=\{a,b,c\}   is the terminal set, and the productions set is defined as    P  =   {   p  0   ,   p  1   ,   p  2   ,   p  3   ,   p  4   ,   p  5   ,   p  6   }       P    subscript  p  0    subscript  p  1    subscript  p  2    subscript  p  3    subscript  p  4    subscript  p  5    subscript  p  6      P=\{p_{0},p_{1},p_{2},p_{3},p_{4},p_{5},p_{6}\}   being     p  0   =  S  →   A  B  C          subscript  p  0   S    normal-→      A  B  C      p_{0}=S\rightarrow ABC        p  1   =  A  →   a  A          subscript  p  1   A    normal-→      a  A      p_{1}=A\rightarrow aA   ,     p  2   =  B  →   b  B          subscript  p  2   B    normal-→      b  B      p_{2}=B\rightarrow bB   ,     p  3   =  C  →   c  C          subscript  p  3   C    normal-→      c  C      p_{3}=C\rightarrow cC        p  4   =  A  →  a         subscript  p  4   A    normal-→    a     p_{4}=A\rightarrow a   ,     p  5   =  B  →  b         subscript  p  5   B    normal-→    b     p_{5}=B\rightarrow b   , and     p  6   =  C  →  c         subscript  p  6   C    normal-→    c     p_{6}=C\rightarrow c   . Clearly,     L   (  G  )    =   {    a  *    b  *    c  *    }         L  G       superscript  a     superscript  b     superscript  c        L(G)=\{a^{*}b^{*}c^{*}\}   . Now, considering the productions set   P   P   P   as an alphabet (since it is a finite set), define the regular expression over   P   P   P   :    e  =    p  0     (    p  1    p  2    p  3    )   *    (    p  4    p  5    p  6    )        e     subscript  p  0    superscript     subscript  p  1    subscript  p  2    subscript  p  3         subscript  p  4    subscript  p  5    subscript  p  6       e=p_{0}(p_{1}p_{2}p_{3})^{*}(p_{4}p_{5}p_{6})   .  Combining the CFG grammar   G   G   G   and the regular expression   e   e   e   , we obtain the CFGWRCL     (  G  ,  e  )   =   (  G  ,    p  0     (    p  1    p  2    p  3    )   *    (    p  4    p  5    p  6    )    )        G  e    G     subscript  p  0    superscript     subscript  p  1    subscript  p  2    subscript  p  3         subscript  p  4    subscript  p  5    subscript  p  6        (G,e)=(G,p_{0}(p_{1}p_{2}p_{3})^{*}(p_{4}p_{5}p_{6}))   which generates the language     L   (  G  )    =   {    a  n    b  n    c  n    :   n  ≥  1   }         L  G    conditional-set     superscript  a  n    superscript  b  n    superscript  c  n      n  1      L(G)=\{a^{n}b^{n}c^{n}:n\geq 1\}   .  Besides there are other grammars with regulated rewriting, the four cited above are good examples of how to extend context-free grammars with some kind of control mechanism to obtain a Turing machine powerful grammatical device.  Sources  [1] Salomaa, Arto (1973) Formal languages Academic Press, ACM monograph series  [2] Rozenberg, G.; Salomaa, A. (eds.) 1997 Handbook of formal languages Berlin; New York : Springer ISBN 3-540-61486-9 (set) (3540604200 : v. 1; 3540606483 : v. 2; 3540606491: v. 3)  [3] Dassow, Jurgen; Paun, G. 1990 Regulated Rewriting in Formal Language Theory ISBN 0387514147. Springer-Verlag New York, Inc. Secaucus, NJ, USA Pages: 308. Medium: Hardcover.  [4] Dassow, Jurgen; von-Guericke, Otto Grammars with Regulated Rewriting Available at: 1 and 2 ( 3 )  [5] Abraham, S. 1965. "Some questions of language theory", Proceedings of the 1965 International Conference On Computational Linguistics , pp 1 – 11, Bonn, Germany Available at: 4  "  Category:Formal languages  Category:Formal methods   