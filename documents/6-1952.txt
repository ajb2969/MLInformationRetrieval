


Bidirectional search




Bidirectional search

Bidirectional search is a graph search algorithm that finds a shortest path from an initial vertex to a goal vertex in a directed graph. It runs two simultaneous searches: one forward from the initial state, and one backward from the goal, stopping when the two meet in the middle. The reason for this approach is that in many cases it is faster: for instance, in a simplified model of search problem complexity in which both searches expand a tree with branching factor b, and the distance from start to goal is d, each of the two searches has complexity O(bd/2) (in Big O notation), and the sum of these two search times is much less than the O(bd) complexity that would result from a single search from the beginning to the goal.
As in A* search, bi-directional search can be guided by a heuristic estimate of the remaining distance to the goal (in the forward tree) or from the start (in the backward tree).
was the first one to design and implement a bi-directional heuristic search algorithm. Andrew Goldberg and others explained the correct termination conditions for the bidirectional version of Dijkstraâ€™s Algorithm.1
Description
A Bidirectional Heuristic Search is a state space search from some state 
 
 
 
  to another state 
 
 
 
 , searching from 
 
 
 
  to 
 
 
 
  and from 
 
 
 
  to 
 
 
 
  simultaneously (or quasi-simultaneously if done on a sequential machine). It returns a valid list of operators that if applied to 
 
 
 
  will give us 
 
 
 
 .
While it may seem as though the operators have to be invertible for the reverse search, it is only necessary to be able to find, given any node 
 
 
 
 , the set of parent nodes of 
 
 
 
  such that there exists some valid operator from each of the parent nodes to 
 
 
 
 . This has often been likened to a one-way street in the route-finding domain: it is not necessary to be able to travel down both directions, but it is necessary when standing at the end of the street to determine the beginning of the street as a possible route.
Similarly, for those edges that have inverse arcs (i.e. arcs going in both directions) it is not necessary that each direction be of equal cost. The reverse search will always use the inverse cost (i.e. the cost of the arc in the forward direction). More formally, if 
 
 
 
  is a node with parent 
 
 
 
 , then 
 
 
 
 , defined as being the cost from 
 
 
 
  to 
 
 
 
 .(Auer Kaindl 2004)
Terminology and notation



 
  : the  branching factor of a search tree

 
  : the cost associated with moving from node 
 
 
 
  to node 
 
 


 
  : the cost from the root to the node 
 
 


 
  : the heuristic estimate of the distance between the node 
 
 
 
  and the goal

 
  : the start state

 
  : the goal state (sometimes 
 
 
 
 , not to be confused with the function)

 
  : the current search direction. By convention, 
 
 
 
  is equal to 1 for the forward direction and 2 for the backward direction (Kwa 1989)

 
  : the opposite search direction (i.e. 
 
 
 
 )

 
  : the search tree in direction d. If 
 
 
 
 , the root is 
 
 
 
 , if 
 
 
 
 , the root is 
 
 


 
  : the leaves of 
 
 
 
  (sometimes referred to as 
 
 
 
 ). It is from this set that a node is chosen for expansion. In bidirectional search, these are sometimes called the search 'frontiers' or 'wavefronts', referring to how they appear when a search is represented graphically. In this metaphor, a 'collision' occurs when, during the expansion phase, a node from one wavefront is found to have successors in the opposing wavefront.

 
  : the non-leaf nodes of 
 
 
 
 . This set contains the nodes already visited by the search

Approaches for Bidirectional Heuristic Search
Bidirectional algorithms can be broadly split into three categories: Front-to-Front, Front-to-Back (or Front-to-End), and Perimeter Search (Kaindl Kainz 1997). These differ by the function used to calculate the heuristic.
Front-to-Back
Front-to-Back algorithms calculate the 
 
 
 
  value of a node 
 
 
 
  by using the heuristic estimate between 
 
 
 
  and the root of the opposite search tree, 
 
 
 
  or 
 
 
 
 .
Front-to-Back is the most actively researched of the three categories. The current best algorithm (at least in the Fifteen puzzle domain) is the BiMAX-BS*F algorithm, created by Auer and Kaindl (Auer, Kaindl 2004).
Front-to-Front
Front-to-Front algorithms calculate the 
 
 
 
  value of a node 
 
 
 
  by using the heuristic estimate between 
 
 
 
  and some subset of 
 
 
 
 . The canonical example is that of the BHFFA (Bidirectional Heuristic Front-to-Front Algorithm) (de Champeaux 1977/1983), where the 
 
 
 
  function is defined as the minimum of all heuristic estimates between the current node and the nodes on the opposing front. Or, formally:



where 
 
 
 
  returns an admissible (i.e. not overestimating) heuristic estimate of the distance between nodes 
 
 
 
  and 
 
 
 
 .
Front-to-Front suffers from being excessively computationally demanding. Every time a node 
 
 
 
  is put into the open list, its 
 
 
 
  value must be calculated. This involves calculating a heuristic estimate from 
 
 
 
  to every node in the opposing 
 
 
 
  set, as described above. The 
 
 
 
  sets increase in size exponentially for all domains with 
 
 
 
 .
References


.

.

.

.

"
Category:Graph algorithms Category:Search algorithms



Efficient Point-to-Point Shortest Path Algorithms




