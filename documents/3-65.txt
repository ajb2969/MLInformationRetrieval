   C standard library      C standard library   The C standard library is the standard library for the C programming language , as specified in the ANSI C standard. 1 It was developed at the same time as the C POSIX library , which is a superset of it. 2 3 Since ANSI C was adopted by the International Organization for Standardization , 4 the C standard library is also called the ISO C library .  The C standard library provides macros, type definitions, and functions for tasks like string handling, mathematical computations, input/output processing, memory allocation and several other operating system services.  Application programming interface  Header files  The application programming interface (API) of the C standard library is declared in a number of header files . Each header file contains one or more function declarations, data type definitions, and macros.  After a long period of stability, three new header files ( iso646.h , wchar.h , and wctype.h ) were added with Normative Addendum 1 (NA1), an addition to the C Standard ratified in 1995. Six more header files ( complex.h , fenv.h , inttypes.h , stdbool.h , stdint.h , and tgmath.h ) were added with C99 , a revision to the C Standard published in 1999, and five more files ( stdalign.h , stdatomic.h , stdnoreturn.h , threads.h , and uchar.h ) with C11 in 2011. In total, there are now 29 header files:      Name   From   Description       [[assert.h| ]]    Contains the assert macro, used to assist with detecting logical errors and other types of bug in debugging versions of a program.     [[complex.h| ]]   C99   A set of functions for manipulating complex numbers .     [[ctype.h| ]]    Defines set of functions used to classify characters by their types or to convert between upper and lower case in a way that is independent of the used character set (typically ASCII or one of its extensions, although implementations utilizing EBCDIC are also known).     [[errno.h| ]]    For testing error codes reported by library functions.     [[fenv.h| ]]   C99   Defines a set of functions for controlling floating-point environment.     [[float.h| ]]    Defines macro constants specifying the implementation-specific properties of the floating-point library.     [[inttypes.h| ]]   C99   Defines exact width integer types .     [[iso646.h| ]]   NA1   Defines several macros that implement alternative ways to express several standard tokens. For programming in ISO 646 variant character sets.     [[limits.h| ]]    Defines macro constants specifying the implementation-specific properties of the integer types.        Defines localization functions .     [[math.h| ]]    Defines common mathematical functions .     [[setjmp.h| ]]    Declares the macros setjmp and longjmp , which are used for non-local exits.     [[signal.h| ]]    Defines signal handling functions .       C11   For querying and specifying the alignment of objects.     [[stdarg.h| ]]    For accessing a varying number of arguments passed to functions.       C11   For atomic operations on data shared between threads.     [[stdbool.h| ]]   C99   Defines a boolean data type .     [[stddef.h| ]]    Defines several useful types and macros .     [[stdint.h| ]]   C99   Defines exact width integer types .     [[stdio.h| ]]    Defines core input and output functions        Defines numeric conversion functions , pseudo-random numbers generation functions , memory allocation , process control functions       C11   For specifying non-returning functions.     [[string.h| ]]    Defines string handling functions .     [[tgmath.h| ]]   C99   Defines type-generic mathematical functions .       C11   Defines functions for managing multiple Threads as well as mutexes and condition variables .     [[time.h| ]]    Defines date and time handling functions       C11   Types and functions for manipulating Unicode characters.     [[wchar.h| ]]   NA1   Defines wide string handling functions .     [[wctype.h| ]]   NA1   Defines set of functions used to classify wide characters by their types or to convert between upper and lower case     Three of the header files ( complex.h , stdatomic.h , and threads.h ) are conditional features that implementations are not required to support.  The POSIX standard added several nonstandard C headers for Unix-specific functionality. Many have found their way to other architectures. Examples include unistd.h and signal.h . A number of other groups are using other nonstandard headers - most flavors of Linux have alloca.h and HP OpenVMS has the va_count() function.  Documentation  On Unix-like systems, the authoritative documentation of the actually implemented API is provided in the form of man pages . On most systems, man pages on standard library functions are in section 3; section 7 may contain some more generic pages on underlying concepts (e.g. man 7 math_error in Linux ).  Implementations  Unix-like systems typically have a C library in shared library form, but the header files (and compiler toolchain) may be absent from an installation so C development may not be possible. The C library is considered part of the operating system on Unix-like systems. The C functions, including the ISO C standard ones, are widely used by programs, and are regarded as if they were not only an implementation of something in the C language, but also de facto part of the operating system interface. Unix-like operating systems generally cannot function if the C library is erased.  On Microsoft Windows, the core system dynamic libraries ( DLLs ) provide an implementation of the C standard library for the Microsoft Visual C++ compiler v6.0; the C standard library for newer versions of the Microsoft Visual C++ compiler is provided by each compiler individually, as well as redistributable packages. Compiled applications written in C are either statically linked with a C library, or linked to a dynamic version of the library that is shipped with these applications, rather than relied upon to be present on the targeted systems. Functions in a compiler's C library are not regarded as interfaces to Microsoft Windows.  Many other implementations exist, provided with both various operating systems and C compilers. Some of the popular implementations are the following:   BSD libc , implementations distributed under BSD operating systems.  GNU C Library (glibc), used in Linux , GNU Hurd and GNU/kFreeBSD .  Microsoft C Run-time Library , part of Microsoft Visual C++  dietlibc , an alternative small implementation of the C standard library (MMU-less)  μClibc , a C standard library for embedded μClinux systems (MMU-less)  Newlib , a C standard library for embedded systems (MMU-less) 5  klibc , primarily for booting Linux systems.  musl , another lightweight C standard library implementation for Linux systems 6  Bionic , originally developed by Google for the Android embedded system operating system, derived from BSD libc.   Compiler built-in functions  Some compilers (for example, GCC 7 ) provide built-in versions of many of the functions in the C standard library; that is, the implementations of the functions are written into the compiled object file , and the program calls the built-in versions instead of the functions in the C library shared object file. This reduces function call overhead, especially if function calls are replaced with inline variants, and allows other forms of optimization (as the compiler knows the control-flow characteristics of the built-in variants), but may cause confusion when debugging (for example, the built-in versions cannot be replaced with instrumented variants).  However, the built-in functions must behave like ordinary functions in accordance with ISO C. The main implication is that the program must be able to create a pointer to these functions by taking their address, and invoke the function by means of that pointer. If two pointers to the same function are derived in two different translation units in the program, these two pointers must compare equal; that is, the address comes by resolving the name of the function, which has external (program-wide) linkage.  Linking, libm  Under Linux and FreeBSD, 8 the mathematical functions (as declared in math.h ) are bundled separately in the mathematical library libm . If any of them are used, the linker must be given the directive -lm .  Detection  According to the C standard the macro __STDC_HOSTED__ shall be defined to 1 if the implementation is hosted. A hosted implementation has all the headers specified by the C standard. An implementation can also be freestanding which means that these headers will not be present. If an implementation is freestanding , it shall define __STDC_HOSTED__ to 0 .  Concepts, problems and workarounds  Buffer overflow vulnerabilities  Some functions in the C standard library have been notorious for having buffer overflow vulnerabilities and generally encouraging buggy programming ever since their adoption. 9 The most criticized items are:   string-manipulation routines , including strcpy() and strcat() , for lack of bounds checking and possible buffer overflows if the bounds aren't checked manually;  string routines in general, for side-effects , encouraging irresponsible buffer usage, not always guaranteeing valid null-terminated output, linear length calculation; 10  [[printf]]() family of routines, for spoiling the execution stack when the format string doesn't match the arguments given. This fundamental flaw created an entire class of attacks: format string attacks ;  [[gets()|gets]]() and [[scanf]]() family of I/O routines, for lack of (either any or easy) input length checking.   Except the extreme case with gets() , all the security vulnerabilities can be avoided by introducing auxiliary code to perform memory management, bounds checking, input checking, etc. This is often done in the form of wrappers that make standard library functions safer and easier to use. This dates back to as early as The Practice of Programming book by B. Kernighan and R. Pike where the authors commonly use wrappers that print error messages and quit the program if an error occurs.  The ISO C committee published Technical reports TR 24731-1 11 and is working on TR 24731-2 12 to propose adoption of some functions with bounds checking and automatic buffer allocation, correspondingly. The former has met severe criticism with some praise, 13 14 the latter received mixed responses. Despite this, TR 24731-1 has been implemented into Microsoft's C standard library and its compiler issues warnings when using old "insecure" functions.  Threading problems, vulnerability to race conditions  The [[mktemp]]() and [[strerror]]() routines are criticized for being thread unsafe and otherwise vulnerable to race conditions .  Error handling  The error handling of the functions in the C standard library is not consistent and sometimes confusing. This can be fairly well summarized by the Linux manual page math_error which says: 15   The current (version 2.8) situation under glibc is messy. Most (but not all)  functions raise exceptions on errors. Some also set errno. A few functions set  errno, but don't raise an exception. Very few functions do neither.   Standardization  The original C language provided no built-in functions such as I/O operations, unlike traditional languages such as COBOL and Fortran . Over time, user communities of C shared ideas and implementations of what is now called C standard libraries. Many of these ideas were incorporated eventually into the definition of the standardized C language.  Both Unix and C were created at AT&T;'s Bell Laboratories in the late 1960s and early 1970s. During the 1970s the C language became increasingly popular. Many universities and organizations began creating their own variants of the language for their own projects. By the beginning of the 1980s compatibility problems between the various C implementations became apparent. In 1983 the American National Standards Institute (ANSI) formed a committee to establish a standard specification of C known as " ANSI C ". This work culminated in the creation of the so-called C89 standard in 1989. Part of the resulting standard was a set of software libraries called the ANSI C standard library.  POSIX standard library  POSIX , as well as SUS , specify a number of routines that should be available over and above those in the basic C standard library. The POSIX specification includes header files for, among other uses, multi-threading , networking , and regular expressions . These are often implemented alongside the C standard library functionality, with varying degrees of closeness. For example, glibc implements functions such as [[fork (operating system)|fork]] within libc.so , but before NPTL was merged into glibc it constituted a separate library with its own linker flag argument. Often, this POSIX-specified functionality will be regarded as part of the library; the basic C library may be identified as the ANSI or ISO C library.  BSD libc  BSD libc is a superset of the POSIX standard library used by BSD  operating systems such as FreeBSD , NetBSD , OpenBSD and OS X . It first appeared in 4.4BSD , which was released in 1994. BSD libc has some extensions that are not defined in the original standard. Some of the extensions of BSD libc are:   sys/tree.h contains an implementation of Red-black tree and Splay tree . 16  sys/queue.h implementations of Linked list , queues , tail queue , etc. 17  fgetln() defined in stdio.h . This can be used to read a file line by line. 18  fts.h contains some functions to traverse a file hierarchy. 19  db.h some functions to connect to the Berkeley DB . 20  strlcat() and strlcpy() secure alternates for strncat() and strncpy() . 21  err.h contains some functions to print formatted error messages. 22  vis.h contains the vis() function. This function is used to display non-printable characters in a visual format. 23   The C standard library in other languages  Some languages include the functionality of the standard C library in their own libraries. The library may be adapted to better suit the language's structure, but the operational semantics are kept similar. The C++ language, for example, includes the functionality of the C standard library in the namespace  std (e.g., std::printf , std::atoi , std::feof ), in header files with similar names to the C ones ( cstdio , cmath , cstdlib , etc.). Other languages that take similar approaches are D and the main implementation of Python known as CPython . In Python 2, for example, the built-in file objects are defined as "implemented using C's stdio package", 24 so that the available operations (open, read, write, etc.) are expected to have the same behavior as the corresponding C functions.  Comparison to standard libraries of other languages  The C standard library is small compared to the standard libraries of some other languages. The C library provides a basic set of mathematical functions, string manipulation, type conversions, and file and console-based I/O. It does not include a standard set of " container types " like the C++  Standard Template Library , let alone the complete graphical user interface (GUI) toolkits, networking tools, and profusion of other functionality that Java and the .NET Framework provide as standard. The main advantage of the small standard library is that providing a working ISO C environment is much easier than it is with other languages, and consequently porting C to a new platform is comparatively easy.  See also   C++ standard library   References  Further reading     External links   The C Library Reference Guide  Handy list of which headers are in which standard  Microsoft C Run-Time Libraries on MSDN  NetBSD C libraries manual and full C library source  Manual pages for the original C standard libraries in Unix   "    Category:C (programming language)     ISO / IEC (1999). ISO/IEC 9899:1999(E): Programming Languages - C §7.19.1 para 1 ↩  ↩  ↩  ↩  ↩  ↩  Other built-in functions provided by GCC , GCC Manual ↩  ↩  Morris worm that takes advantage of the well-known vulnerability in gets() have been created as early as in 1988. ↩  in C standard library, string length calculation and looking for a string's end have linear time complexities and are inefficient when used on the same or related strings repeatedly ↩  ↩  ↩  Do you use the TR 24731 'safe' functions in your C code? - Stack overflow ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  Miller, Todd C. and Theo de Raadt. strlcpy and strlcat - consistent, safe, string copy and concatenation . Proceedings of the 1999 USENIX Annual Technical Conference, June 6–11, 1999, pp. 175–178. ↩  ↩  ↩  ↩     