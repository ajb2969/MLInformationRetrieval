   Multidelay block frequency domain adaptive filter      Multidelay block frequency domain adaptive filter   The Multidelay block frequency domain adaptive filter (MDF) algorithm is a block-based frequency domain implementation of the (normalised) Least mean squares filter (LMS) algorithm.  Introduction  The MDF algorithm is based on the fact that convolutions may be efficiently computed in the frequency domain (thanks to the Fast Fourier Transform ). However, the algorithm differs from the Fast LMS algorithm in that block size it uses may be smaller than the filter length. If both are equal, then MDF reduces to the FLMS algorithm.  The advantages of MDF over the (N)LMS algorithm are:   Lower algorithmic complexity  Partial de-correlation of the input (which 'may' lead to faster convergence)   Variable definitions  (Figure)  LMS filter   Let   N   N   N   be the length of the processing blocks,   K   K   K   be the number of blocks and   𝐅   𝐅   \mathbf{F}   denote the 2Nx2N Fourier transform matrix. The variables are defined as:        𝐞  ¯    (  ℓ  )    =   𝐅    [   𝟎   1  x  N    ,   e   (   ℓ  N   )    ,  …  ,   e   (    ℓ  N   -  N  -  1   )    ]   T           normal-¯  𝐞   normal-ℓ     𝐅   superscript    subscript  0    1  x  N      e    normal-ℓ  N    normal-…    e      normal-ℓ  N   N  1     T      \underline{\mathbf{e}}(\ell)=\mathbf{F}\left[\mathbf{0}_{1xN},e(\ell N),\dots,%
 e(\ell N-N-1)\right]^{T}            𝐱  ¯   k    (  ℓ  )    =   diag   {   𝐅    [   x   (    (    ℓ  -  k   +  1   )   N   )    ,  …  ,   x   (     (   ℓ  -  k  -  1   )   N   -  1   )    ]   T    }           subscript   normal-¯  𝐱   k   normal-ℓ     diag     𝐅   superscript     x        normal-ℓ  k   1   N    normal-…    x        normal-ℓ  k  1   N   1     T        \underline{\mathbf{x}}_{k}(\ell)=\mathrm{diag}\left\{\mathbf{F}\left[x((\ell-k%
 +1)N),\dots,x((\ell-k-1)N-1)\right]^{T}\right\}           𝐗  ¯    (  ℓ  )    =   [     𝐱  ¯   0    (  ℓ  )    ,     𝐱  ¯   1    (  ℓ  )    ,  …  ,     𝐱  ¯    K  -  1     (  ℓ  )    ]          normal-¯  𝐗   normal-ℓ       subscript   normal-¯  𝐱   0   normal-ℓ      subscript   normal-¯  𝐱   1   normal-ℓ   normal-…     subscript   normal-¯  𝐱     K  1    normal-ℓ      \underline{\mathbf{X}}(\ell)=\left[\underline{\mathbf{x}}_{0}(\ell),\underline%
 {\mathbf{x}}_{1}(\ell),\dots,\underline{\mathbf{x}}_{K-1}(\ell)\right]           𝐝  ¯    (  ℓ  )    =   𝐅    [   𝟎   1  x  N    ,   d   (   ℓ  N   )    ,  …  ,   d   (    ℓ  N   -  N  -  1   )    ]   T           normal-¯  𝐝   normal-ℓ     𝐅   superscript    subscript  0    1  x  N      d    normal-ℓ  N    normal-…    d      normal-ℓ  N   N  1     T      \underline{\mathbf{d}}(\ell)=\mathbf{F}\left[\mathbf{0}_{1xN},d(\ell N),\dots,%
 d(\ell N-N-1)\right]^{T}   With normalisation matrices    𝐆  1     subscript  𝐆  1    \mathbf{G}_{1}   and    𝐆  2     subscript  𝐆  2    \mathbf{G}_{2}   :       𝐆  1   =   𝐅   [      𝟎   N  x  N       𝟎   N  x  N         𝟎   N  x  N       𝐈   N  x  N       ]    𝐅   -  1          subscript  𝐆  1     𝐅     subscript  0    N  x  N     subscript  0    N  x  N       subscript  0    N  x  N     subscript  𝐈    N  x  N       superscript  𝐅    1       \mathbf{G}_{1}=\mathbf{F}\begin{bmatrix}\mathbf{0}_{NxN}&\mathbf{0}_{NxN}\\
 \mathbf{0}_{NxN}&\mathbf{I}_{NxN}\\
 \end{bmatrix}\mathbf{F}^{-1}           𝐆  ~   2   =   𝐅   [      𝐈   N  x  N       𝟎   N  x  N         𝟎   N  x  N       𝟎   N  x  N       ]    𝐅   -  1          subscript   normal-~  𝐆   2     𝐅     subscript  𝐈    N  x  N     subscript  0    N  x  N       subscript  0    N  x  N     subscript  0    N  x  N       superscript  𝐅    1       \tilde{\mathbf{G}}_{2}=\mathbf{F}\begin{bmatrix}\mathbf{I}_{NxN}&\mathbf{0}_{%
 NxN}\\
 \mathbf{0}_{NxN}&\mathbf{0}_{NxN}\\
 \end{bmatrix}\mathbf{F}^{-1}          𝐆  2   =   diag   {    𝐆  ~   2   ,    𝐆  ~   2   ,  …  ,    𝐆  ~   2   }         subscript  𝐆  2     diag    subscript   normal-~  𝐆   2    subscript   normal-~  𝐆   2   normal-…   subscript   normal-~  𝐆   2       \mathbf{G}_{2}=\mathrm{diag}\left\{\tilde{\mathbf{G}}_{2},\tilde{\mathbf{G}}_{%
 2},\dots,\tilde{\mathbf{G}}_{2}\right\}     In practice, when multiplying a column vector   𝐱   𝐱   \mathbf{x}   by    𝐆  1     subscript  𝐆  1    \mathbf{G}_{1}   , we take the inverse FFT of   𝐱   𝐱   \mathbf{x}   , set the first   N   N   N   values in the result to zero and then take the FFT. This is meant to remove the effects of the circular convolution.  Algorithm description  For each block, the MDF algorithm is computed as:        𝐲  ¯  ^    (  ℓ  )    =    𝐆  1    𝐗  ¯    (  ℓ  )    𝐡  ¯  ^    (   ℓ  -  1   )           normal-¯   normal-^  𝐲    normal-ℓ      subscript  𝐆  1    normal-¯  𝐗   normal-ℓ   normal-¯   normal-^  𝐡      normal-ℓ  1      \underline{\hat{\mathbf{y}}}(\ell)=\mathbf{G}_{1}\underline{\mathbf{X}}(\ell)%
 \underline{\hat{\mathbf{h}}}(\ell-1)           𝐞  ¯    (  ℓ  )    =     𝐝  ¯    (  ℓ  )    -    𝐲  ¯  ^    (  ℓ  )            normal-¯  𝐞   normal-ℓ        normal-¯  𝐝   normal-ℓ      normal-¯   normal-^  𝐲    normal-ℓ      \underline{\mathbf{e}}(\ell)=\underline{\mathbf{d}}(\ell)-\underline{\hat{%
 \mathbf{y}}}(\ell)          𝚽  𝐱𝐱   =    𝐗  ¯    (  ℓ  )    𝐗  ¯     (  ℓ  )   H         subscript  𝚽  𝐱𝐱      normal-¯  𝐗   normal-ℓ   normal-¯  𝐗    superscript  normal-ℓ  H      \mathbf{\Phi}_{\mathbf{xx}}=\underline{\mathbf{X}}(\ell)\underline{\mathbf{X}}%
 (\ell)^{H}           𝐡  ¯  ^    (  ℓ  )    =     𝐡  ¯  ^    (   ℓ  -  1   )    +   μ   𝐆  2    𝚽  𝐱𝐱   -  1     (  ℓ  )     𝐗  ¯   H    (  ℓ  )    𝐞  ¯    (  ℓ  )            normal-¯   normal-^  𝐡    normal-ℓ        normal-¯   normal-^  𝐡      normal-ℓ  1      μ   subscript  𝐆  2    superscript   subscript  𝚽  𝐱𝐱     1    normal-ℓ   superscript   normal-¯  𝐗   H   normal-ℓ   normal-¯  𝐞   normal-ℓ      \underline{\hat{\mathbf{h}}}(\ell)=\underline{\hat{\mathbf{h}}}(\ell-1)+\mu%
 \mathbf{G}_{2}\mathbf{\Phi}_{\mathbf{xx}}^{-1}(\ell)\underline{\mathbf{X}}^{H}%
 (\ell)\underline{\mathbf{e}}(\ell)     It is worth noting that, while the algorithm is more easily expressed in matrix form, the actual implementation requires no matrix multiplications. For instance the normalisation matrix computation     𝚽  𝐱𝐱   =    𝐗  ¯    (  ℓ  )    𝐗  ¯     (  ℓ  )   H         subscript  𝚽  𝐱𝐱      normal-¯  𝐗   normal-ℓ   normal-¯  𝐗    superscript  normal-ℓ  H      \mathbf{\Phi}_{\mathbf{xx}}=\underline{\mathbf{X}}(\ell)\underline{\mathbf{X}}%
 (\ell)^{H}   reduces to an element-wise vector multiplication because     𝐗  ¯    (  ℓ  )        normal-¯  𝐗   normal-ℓ    \underline{\mathbf{X}}(\ell)   is block-diagonal. The same goes for other multiplications.  References   J.-S. Soo and K. Pang, “Multidelay block frequency domain adaptive filter,” IEEE Transactions on Acoustics, Speech and Signal Processing , vol. 38, no. 2, pp. 373–376, 1990.  H. Buchner, J. Benesty, W. Kellermann, "An Extended Multidelay Filter: Fast Low-Delay Algorithms for Very High-Order Adaptive Systems". Proc. IEEE International Conference on Acoustics, Speech, and Signal Processing (ICASSP) , 2003.  A free implementation of the MDF algorithm is available in Speex ( main source file )   See also   Adaptive filter  Recursive least squares  For statistical techniques relevant to LMS filter see Least squares .   "  Category:Digital signal processing  Category:Filter theory   