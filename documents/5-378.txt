   Modulo operation      Modulo operation  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In computing , the modulo operation finds the remainder after division of one number by another (sometimes called modulus ).  Given two positive numbers,   a   a   a   (the dividend ) and   n   n   n   (the divisor ), a  modulo  n (abbreviated as a mod n ) is the remainder of the Euclidean division of a by n . For instance, the expression "5 mod 2" would evaluate to 1 because 5 divided by 2 leaves a quotient of 2 and a remainder of 1, while "9 mod 3" would evaluate to 0 because the division of 9 by 3 has a quotient of 3 and leaves a remainder of 0; there is nothing to subtract from 9 after multiplying 3 times 3. (Note that doing the division with a calculator will not show the result referred to here by this operation; the quotient will be expressed as a decimal fraction.)  Although typically performed with a and n both being integers, many computing systems allow other types of numeric operands. The range of numbers for an integer modulo of n is 0 to n − 1. ( n mod 1 is always 0; n mod 0 is undefined, possibly resulting in a "Division by zero" error in computer programming languages) See modular arithmetic for an older and related convention applied in number theory .  When either   a   a   a   or   n   n   n   is negative, the naive definition breaks down and programming languages differ in how these values are defined.  __TOC__  Remainder calculation for the modulo operation      Integer modulo operators in various programming languages     Language     ActionScript     Ada     rem     ASP     ALGOL-68     AMPL     APL     AppleScript     AWK     BASIC     bash     bash     bc     C (ISO 1990)     div     C++ (ISO 1998)     div     C (ISO 1999)     C++ (ISO 2011)     C#     CLARION     Clojure     COBOL     CoffeeScript     %%     ColdFusion     Common Lisp     rem     D     Dart     remainder()     Eiffel     Erlang     Euphoria     remainder     F#     FileMaker     Forth     Fortran     modulo     Frink     GML (Game Maker)     GDScript     Go     Haskell     rem     Haxe     J     Java     Math.floorMod     JavaScript     Julia     rem     LibreOffice     Lua 5     Lua 4     Liberty BASIC     MathCad     Maple     Mathematica     MATLAB     rem     Maxima     remainder     Maya Embedded Language     Microsoft Excel     Minitab     mksh     Modula-2     MUMPS     NASM  NASMX     %%     Oberon     OCaml     Occam     Pascal (Delphi)     Pascal (ISO-7185 and ISO-10206)     Perl     PHP     PIC Basic Pro     PL/I     PowerShell     Progress     Prolog (ISO 1995)     rem       Python     math.fmod     Racket     RealBasic     R     REXX     RPG     Ruby     remainder()     Scala     Scheme     remainder     Scheme R 6 RS     mod0     Seed7     rem     SenseTalk     rem     Smalltalk     rem:     SQL ( SQL:1999 )     Standard ML     Int.rem     Stata     Swift     Tcl     Torque Game Engine     Turing     Verilog (2001)     VHDL     rem     Visual Basic     x86 Assembly       Xbase++     Mod()     Z3 theorem prover         Floating-point modulo operators in various programming languages     Language     C (ISO 1990)     C (ISO 1999)     remainder     C++ (ISO 1998)     C++ (ISO 2011)     std::remainder     C#     Common Lisp     rem     D     Dart     remainder()     F#     Fortran     modulo     Go     Haskell (GHC)     Java     JavaScript     Microsoft Excel     OCaml     Perl     Perl6     PHP     Python     math.fmod     REXX     Ruby     remainder()     Scheme R 6 RS     flmod0     Standard ML     Swift     Xbase++     Mod()     In mathematics the result of the modulo operation is the remainder of the Euclidean division . However, other conventions are possible. Computers and calculators have various ways of storing and representing numbers; thus their definition of the modulo operation depends on the programming language and/or the underlying hardware .  In nearly all computing systems, the quotient    q   q   q   and the remainder   r   r   r   of   a   a   a   divided by   n   n   n   satisfy      However, this still leaves a sign ambiguity if the remainder is nonzero: there are two possible choices for the remainder, one negative and the other positive, and there are also two possible choices for the quotient. Usually, in number theory, the positive remainder is always chosen, but programming languages choose depending on the language and the signs of a and/or n . Pascal and Algol68 give a positive remainder (or 0) even for negative divisors, and some programming languages, such as C90, leave it up to the implementation when either of n or a is negative. See the table for details. a modulo 0 is undefined in the majority of systems, although some do define it to be a .  and ceil( a / n )}} respectively.  | IEEE 754 defines a remainder function where the quotient is rounded according to the round to nearest convention . Therefore, the sign of the remainder is chosen so as to be closest to zero .  }}  As described by Leijen,  Common pitfalls  When the result of a modulo operation has the sign of the dividend, it can sometimes lead to surprising mistakes:  For example, to test whether an integer is odd, one might be inclined to test whether the remainder by 2 is equal to 1:  bool is_odd( int n) { return n % 2 == 1 ;
 }  But in a language where modulo has the sign of the dividend, that is incorrect, because when n (the dividend) is negative and odd, n % 2 returns −1, and the function returns false.  One correct alternative is to test that it is not 0 (because remainder 0 is the same regardless of the signs):  bool is_odd( int n) { return n % 2 != 0 ;
 }  Or, by understanding in the first place that for any odd number, the modulo remainder may be either 1 or −1:  bool is_odd( int n) { return n % 2 == 1 || n % 2 == -1 ;
 }  Modulo operation expression  Some calculators have a mod() function button, and many programming languages have a mod() function or similar, expressed as mod( a ,'' n''), for example. Some also support expressions that use "%", "mod", or "Mod" as a modulo or remainder operator , such as   a % n    or   a mod n    or equivalent, for environments lacking a mod() function (note that 'int' inherently produces the floor value of a/n)   a - (n * int(a/n)) .   Performance issues  Modulo operations might be implemented such that a division with a remainder is calculated each time. For special cases, there are faster alternatives on some hardware. For example, the modulo of powers of 2 can alternatively be expressed as a bitwise AND operation:   x % 2 n == x & (2 n - 1) .   Examples (assuming x is a positive integer):   x % 2 == x & 1   x % 4 == x & 3   x % 8 == x & 7 .   In devices and software that implement bitwise operations more efficiently than modulo, these alternative forms can result in faster calculations. 1  Optimizing  compilers may recognize expressions of the form expression % constant where constant is a power of two and automatically implement them as expression & (constant-1) . This can allow the programmer to write clearer code without compromising performance. (Note: This will not work for the languages whose modulo have the sign of the dividend (including C), because if the dividend is negative, the modulo will be negative; however, expression & (constant-1) will always produce a positive result. So special treatment has to be made when the dividend can be negative.)  Equivalencies  Some modulo operations can be factored or expanded similar to other mathematical operations. This may be useful in cryptography proofs, such as the Diffie–Hellman key exchange .   Identity:        (    a   mod  n   )   mod  n   =    a   mod  n        modulo   modulo  a  n   n    modulo  a  n     (a\,\bmod\,n)\,\bmod\,n=a\,\bmod\,n            n  x    mod  n   =  0       modulo   superscript  n  x   n   0    n^{x}\,\bmod\,n=0   for all positive integer values of   x   x   x   .  If   n   n   n   is a prime number which is not a divisor of   b   b   b   , then      a    b   n  -  1      mod  n   =    a   mod  n        modulo    a   superscript  b    n  1     n    modulo  a  n     ab^{n-1}\,\bmod\,n=a\,\bmod\,n   , due to Fermat's little theorem .   Inverse:        (    (    -   a    mod  n   )   +   (    a   mod  n   )    )   mod  n   =  0       modulo     modulo    a   n    modulo  a  n    n   0    ((-a\,\bmod\,n)+(a\,\bmod\,n))\,\bmod\,n=0           b   -  1     mod  n     modulo   superscript  b    1    n    b^{-1}\,\bmod\,n   denotes the modular multiplicative inverse , which is defined if and only if   b   b   b   and   n   n   n   are relatively prime , which is the case when the left hand side is defined      (    (     b   -  1     mod  n   )    (    b   mod  n   )    )   mod  n   =  1       modulo     modulo   superscript  b    1    n    modulo  b  n    n   1    ((b^{-1}\,\bmod\,n)\,(b\,\bmod\,n))\,\bmod\,n=1   .   Distributive:        (   a  +  b   )   mod  n   =    (    (    a   mod  n   )   +   (    b   mod  n   )    )   mod  n        modulo    a  b   n    modulo     modulo  a  n    modulo  b  n    n     (a+b)\,\bmod\,n=((a\,\bmod\,n)+(b\,\bmod\,n))\,\bmod\,n           a   b    mod  n   =    (    (    a   mod  n   )    (    b   mod  n   )    )   mod  n        modulo    a  b   n    modulo     modulo  a  n    modulo  b  n    n     ab\,\bmod\,n=((a\,\bmod\,n)\,(b\,\bmod\,n))\,\bmod\,n      Division (definition)       a  b    mod  n   =    (    (    a   mod  n   )    (     b   -  1     mod  n   )    )   mod  n        modulo    a  b   n    modulo     modulo  a  n    modulo   superscript  b    1    n    n     \frac{a}{b}\,\bmod\,n=((a\,\bmod\,n)(b^{-1}\,\bmod\,n))\,\bmod\,n   , when the right hand side is defined. Not defined otherwise.  Inverse Multiplication      (    (    a   b    mod  n   )    (     b   -  1     mod  n   )    )   mod  n   =    a   mod  n        modulo     modulo    a  b   n    modulo   superscript  b    1    n    n    modulo  a  n     ((ab\,\bmod\,n)\,(b^{-1}\,\bmod\,n))\,\bmod\,n=a\,\bmod\,n      See also   Modulo (disambiguation) and modulo (jargon) – many uses of the word "modulo", all of which grew out of Carl F. Gauss 's introduction of modular arithmetic in 1801.  Modular exponentiation   Notes    Perl usually uses arithmetic modulo operator that is machine-independent. See the Perl documentation for exceptions and examples.   Mathematically, these two choices are but two of the infinite number of choices available for the inequality satisfied by a remainder .   Divisor must be positive, otherwise not defined.   As implemented in ACUCOBOL, Micro Focus COBOL, and possibly others.   References    de:Division mit Rest#Modulo "  Category:Computer arithmetic  Category:Articles with example C++ code  Category:Operators (programming)  Category:Modular arithmetic  Category:Binary operations     ↩    