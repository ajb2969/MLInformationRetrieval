   Count–min sketch      Count–min sketch  In [[computing]], the '''count–min sketch''' ('''CM sketch''') is a probabilistic  data structure that serves as a frequency table of events in a stream of data . It uses hash functions to map events to frequencies, but unlike a hash table uses only sub-linear space , at the expense of overcounting some events due to collisions . The count–min sketch was invented in 2003 by Graham Cormode and S. Muthu Muthukrishnan 1 and described by them in a 2005 paper. 2  Count–min sketches are somewhat similar to Bloom filters ; the main distinction is that Bloom filters represent sets, while CM sketches represent multisets . Spectral Bloom filters with multi-set policy are conceptually isomorphic to the count–min sketch. 3  Data structure  The goal of the basic version of the count–min sketch is to consume a stream of events, one at a time, and count the frequency of the different types of events in the stream. At any time, the sketch can be queried for the frequency of a particular event type   i   i   i   (    0  ≤  i  ≤  n      0  normal-≤  i  normal-≤  n    0≤i≤n   for some   n   n   n   ), and will return an estimate of this frequency that is within a certain distance of the true frequency, with a certain probability.  The actual sketch data structure is a two-dimensional array of   w   w   w   columns and   d   d   d   rows. The parameters   w   w   w   and   d   d   d   are fixed when the sketch is created, and determine the time and space needs and the probability of error when the sketch is queried for a frequency or inner product . Associated with each of the   d   d   d   rows is a separate hash function; the hash functions must be pairwise independent . The parameters   w   w   w   and   d   d   d   can be chosen by setting    w  =     ⌈  e   /  ε   ⌉       w        normal-⌈  e   ε   normal-⌉     w=⌈e/ε⌉   and    d  =     ⌈  l  n  1   /  δ   ⌉       d        normal-⌈  l  n  1   δ   normal-⌉     d=⌈ln1/δ⌉   , where the error in answering a query is within a factor of   ε   ε   ε   with probability   δ   δ   δ   .  When a new event of type   i   i   i   arrives we update as follows: for each row   j   j   j   of the table, apply the corresponding hash function to obtain a column index  h j ( i )}} . Then increment the value in row   j   j   j   , column   k   k   k   by one.  Several types of queries are possible on the stream.   The simplest is the point query , which asks for the count of an event type   i   i   i   . The estimated count is given by the least value in the table for   i   i   i   , namely      a  ^   i   =     min  j   count    [  j  ,    h  j    (  i  )    ]         subscript   normal-^  a   i       subscript   j   count    j     subscript  h  j   i       \hat{a}_{i}=\min_{j}\mathrm{count}[j,h_{j}(i)]   , where   count   count   \mathrm{count}   is the table.   This estimate has the guarantee that      a  ^   i   ≤    a  i   +   ϵ    ∑  j  n    |   a  j   |           subscript   normal-^  a   i      subscript  a  i     ϵ    superscript   subscript   j   n      subscript  a  j         \hat{a}_{i}\leq a_{i}+\epsilon\sum_{j}^{n}|a_{j}|   with probability    1  -  δ      1  δ    1-\delta   , where is the true frequency with which   i   i   i   occurred in the stream.   An inner product query asks for the inner product between the histograms represented by two count–min sketches,    count  a     subscript  count  a    \mathrm{count}_{a}   and    count  b     subscript  count  b    \mathrm{count}_{b}   .   Small modifications to the data structure can be used to sketch other different stream statistics.  Bias  One potential problem with count-min sketches is that they are biased estimators of the true frequency of events: they may overestimate, but never underestimate the true count in a point query. At least two suggested improvements to the sketch operations have been proposed to tackle this problem: 4   The count-mean-min sketch subtracts an estimate of the bias when doing a query, but is otherwise the same structure as a count-min sketch.  Conservative updating changes the update, but not the query algorithms. To count   c   c   c   instances of event type   i   i   i   , one first computes an estimate      a  ^   i   =     min  j   count    [  j  ,    h  j    (  i  )    ]         subscript   normal-^  a   i       subscript   j   count    j     subscript  h  j   i       \hat{a}_{i}=\min_{j}\mathrm{count}[j,h_{j}(i)]   , then updates     count   [  j  ,    h  j    (  i  )    ]    ←   max   {   count   [  j  ,    h  j    (  i  )    ]    ,     a  i   ^   +  c   }       normal-←    count   j     subscript  h  j   i         count   j     subscript  h  j   i        normal-^   subscript  a  i    c      \mathrm{count}[j,h_{j}(i)]\leftarrow\max\{\mathrm{count}[j,h_{j}(i)],\hat{a_{i%
 }}+c\}   for each row   j   j   j   .   External links   Powerpoint presentation on the algorithm  Count–min FAQ  C code by Cormode  Headers   See also   Bloom filter  Feature hashing  Locality-sensitive hashing  MinHash   Notes  References  "  Category:Hashing  Category:Probabilistic data structures     ↩  ↩  ↩  ↩     