


Calculus of constructions




Calculus of constructions

The Calculus of Constructions (CoC) is a type theory created by Thierry Coquand. It can serve as both a typed programming language and as constructive foundation for mathematics. For this second reason, the CoC and its variants have been the basis for Coq and other proof assistants.
Some of its variants include the calculus of inductive constructions (which adds inductive types), the calculus of (co)inductive constructions (which adds coinduction), and the predicative calculus of inductive constructions (which removes some impredicativity).
General traits
The CoC is a higher-order typed lambda calculus, initially developed by Thierry Coquand. It is well known for being at the top of Barendregt's lambda cube. It is possible within CoC to define functions from, say, integers to types, types to types as well as functions from integers to integers.
The CoC is strongly normalizing, although, by Gödel's incompleteness theorem, it is impossible to prove this property within the CoC since it implies inconsistency.
Usage
The CoC has developed alongside the Coq proof assistant. As features were added (or possible liabilities removed) to the theory, they became available in Coq.
Variants of the CoC are used in other proof assistants, such as Matita.
The basics of the calculus of constructions
The Calculus of Constructions can be considered an extension of the Curry–Howard isomorphism. The Curry–Howard isomorphism associates a term in the simply typed lambda calculus with each natural-deduction proof in intuitionistic propositional logic. The Calculus of Constructions extends this isomorphism to proofs in the full intuitionistic predicate calculus, which includes proofs of quantified statements (which we will also call "propositions").
Terms
A term in the calculus of constructions is constructed using the following rules:

T is a term (also called Type)
P is a term (also called Prop, the type of all propositions)
Variables (x, y, ...) are terms
If 
 
 
 
  and 
 
 
 
  are terms, then so are
 











The calculus of constructions has five kinds of objects:

proofs, which are terms whose types are propositions
propositions, which are also known as small types
predicates, which are functions that return propositions
large types, which are the types of predicates. (P is an example of a large type)
T itself, which is the type of large types.

Judgments
The calculus of constructions allows proving typing judgments:



Which can be read as the implication

If variables 
 
 
 
  have types 
 
 
 
 , then term 
 
 
 
  has type 
 
 
 
 .
 

The valid judgments for the calculus of constructions are derivable from a set of inference rules. In the following, we use 
 
 
 
  to mean a sequence of type assignments 
 
 
 
 , and we use K to mean either P or T. We shall write 
 
 
 
  to mean "
 
 
 
  has type 
 
 
 
 , and 
 
 
 
  has type 
 
 
 
 ". We shall write 
 
 
 
  to mean the result of substituting the term 
 
 
 
  for the variable 
 
 
 
  in the term 
 
 
 
 .
An inference rule is written in the form



which means

If 
 
 
 
  is a valid judgment, then so is 
 
 


Inference rules for the calculus of constructions
1. 
 
 

2. 
 
 

3. 
 
 

4. 
 
 

5. 
 
 

Defining logical operators
The calculus of constructions has very few basic operators: the only logical operator for forming propositions is 
 
 
 
 . However, this one operator is sufficient to define all the other logical operators:



Defining data types
The basic data types used in computer science can be defined within the Calculus of Constructions:

Booleans 
 
 

 Naturals :

(A \Rightarrow A) \Rightarrow (A \Rightarrow A)

Product 
 
 


 Disjoint union 
 
 



Note that Booleans and Naturals are defined in the same way as in Church encoding. However additional problems raise from propositional extensionality and proof irrelevance 1.
See also

Lambda calculus
Typed lambda calculus
Lambda cube
System F
Curry–Howard isomorphism
Intuitionistic logic
Intuitionistic type theory
Homotopy type theory

Theorists

Coquand, Thierry
Girard, Jean-Yves

References


Also available freely accessible online:  Note terminology is rather different. For instance, (
 
 
 
 ) is written [x : A] B.



— An application of the CoC

"
Category:Dependently typed programming Category:Lambda calculus Category:Type theory


