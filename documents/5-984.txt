


Gabor filter




Gabor filter

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



(Figure)
Right|Example of a two-dimensional Gabor filter

In image processing, a Gabor filter, named after Dennis Gabor, is a linear filter used for edge detection. Frequency and orientation representations of Gabor filters are similar to those of the human visual system, and they have been found to be particularly appropriate for texture representation and discrimination. In the spatial domain, a 2D Gabor filter is a Gaussian kernel function modulated by a sinusoidal plane wave.
Simple cells in the visual cortex of mammalian brains can be modeled by Gabor functions.12 Thus, image analysis with Gabor filters is thought to be similar to perception in the human visual system.
Definition
Its impulse response is defined by a sinusoidal wave (a plane wave for 2D Gabor filters) multiplied by a Gaussian function.3 Because of the multiplication-convolution property (Convolution theorem), the Fourier transform of a Gabor filter's impulse response is the convolution of the Fourier transform of the harmonic function and the Fourier transform of the Gaussian function. The filter has a real and an imaginary component representing orthogonal directions.4 The two components may be formed into a complex number or used individually.
Complex



Real



Imaginary



where



and



In this equation, 
 
 
 
  represents the wavelength of the sinusoidal factor, 
 
 
 
  represents the orientation of the normal to the parallel stripes of a Gabor function, 
 
 
 
  is the phase offset, 
 
 
 
  is the sigma/standard deviation of the Gaussian envelope and 
 
 
 
  is the spatial aspect ratio, and specifies the ellipticity of the support of the Gabor function.
Feature extraction
A set of Gabor filters with different frequencies and orientations may be helpful for extracting useful features from an image. Gabor filters have been widely used in pattern analysis applications.5 For example, it has been used to study the directionality distribution inside the porous spongy trabecular bone in the spine.6
Wavelet space
 Gabor filters are directly related to Gabor wavelets, since they can be designed for a number of dilations and rotations. However, in general, expansion is not applied for Gabor wavelets, since this requires computation of bi-orthogonal wavelets, which may be very time-consuming. Therefore, usually, a filter bank consisting of Gabor filters with various scales and rotations is created. The filters are convolved with the signal, resulting in a so-called Gabor space. This process is closely related to processes in the primary visual cortex.7 Jones and Palmer showed that the real part of the complex Gabor function is a good fit to the receptive field weight functions found in simple cells in a cat's striate cortex.8
The Gabor space is very useful in image processing applications such as optical character recognition, iris recognition and fingerprint recognition. Relations between activations for a specific spatial location are very distinctive between objects in an image. Furthermore, important activations can be extracted from the Gabor space in order to create a sparse object representation.
Example implementation
This is an example implementation in Python:
import numpy
 
 def gabor_fn(sigma,theta,Lambda,psi,gamma):
     sigma_x = sigma;
     sigma_y = float(sigma)/gamma;
     
     # Bounding box
     nstds = 3;
     xmax = max(abs(nstds*sigma_x*numpy.cos(theta)),abs(nstds*sigma_y*numpy.sin(theta)));
     xmax = numpy.ceil(max(1,xmax));
     ymax = max(abs(nstds*sigma_x*numpy.sin(theta)),abs(nstds*sigma_y*numpy.cos(theta)));
     ymax = numpy.ceil(max(1,ymax));
     xmin = -xmax; ymin = -ymax;
     (x,y) = numpy.meshgrid(numpy.arange(xmin,xmax+1),numpy.arange(ymin,ymax+1 ));
     (y,x) = numpy.meshgrid(numpy.arange(ymin,ymax+1),numpy.arange(xmin,xmax+1 ));
     
     # Rotation 
     x_theta=x*numpy.cos(theta)+y*numpy.sin(theta);
     y_theta=-x*numpy.sin(theta)+y*numpy.cos(theta);
     
     gb= numpy.exp(-.5*(x_theta**2/sigma_x**2+y_theta**2/sigma_y**2))*numpy.cos(2*numpy.pi/Lambda*x_theta+psi);
     return gb
This is an example implementation in MATLAB/Octave:
function gb=gabor_fn(sigma,theta,lambda,psi,gamma)
 
 sigma_x = sigma;
 sigma_y = sigma/gamma;
 
 % Bounding box
 nstds = 3;
 xmax = max(abs(nstds*sigma_x*cos(theta)),abs(nstds*sigma_y*sin(theta)));
 xmax = ceil(max(1,xmax));
 ymax = max(abs(nstds*sigma_x*sin(theta)),abs(nstds*sigma_y*cos(theta)));
 ymax = ceil(max(1,ymax));
 xmin = -xmax; ymin = -ymax;
 [x,y] = meshgrid(xmin:xmax,ymin:ymax);
 
 % Rotation 
 x_theta=x*cos(theta)+y*sin(theta);
 y_theta=-x*sin(theta)+y*cos(theta);
 
 gb= exp(-.5*(x_theta.^2/sigma_x^2+y_theta.^2/sigma_y^2)).*cos(2*pi/lambda*x_theta+psi);
MATLAB code for Gabor feature extraction from images can be found at http://www.mathworks.com/matlabcentral/fileexchange/44630 .
This is another example implementation in Haskell:
gabor λ θ ψ σ γ x y = exp ( (-0.5) * ((x2^2 + γ^2*y2^2) / (σ^2)) :+ 0) * exp ( 0 :+ (2*pi*(x2/λ+ψ)) )
     where x2 =  x * cos θ + y * sin θ
           y2 = -x * sin θ + y * cos θ
(Note: a :+ b should be read as a + i b)
See also

Gabor transform
Gabor atom

References


External links

MATLAB code for Gabor filters and Gabor feature extraction
3D Gabor demonstrated with Mathematica
python implementation of log-Gabors for still images

Further reading

Hans G. Feichtinger, Thomas Strohmer: "Gabor Analysis and Algorithms", Birkhäuser, 1998; ISBN 0-8176-3959-4
Karlheinz Gröchenig: "Foundations of Time-Frequency Analysis", Birkhäuser, 2001; ISBN 0-8176-4022-3
John Daugman: "Complete Discrete 2-D Gabor Transforms by Neural Networks for Image Analysis and Compression", IEEE Trans on Acoustics, Speech, and Signal Processing. Vol. 36. No. 7. July 1988, pp. 1169–1179



Steerable Pyramids:
 
Eero Simoncelli's page on Steerable Pyramids
R. Manduchi, P. Perona and D. Shy. Efficient Deformable Filter Banks (PDF) (Code)





"
Category:Linear filters Category:Articles with example MATLAB/Octave code




J. G. Daugman. Uncertainty relation for resolution in space, spatial frequency, and orientation optimized by two-dimensional visual cortical filters. Journal of the Optical Society of America A, 2(7):1160–1169, July 1985.

3D surface tracking and approximation using Gabor filters, Jesper Juul Henriksen, South Denmark University, March 28, 2007







