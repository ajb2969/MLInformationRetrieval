   Kernel (image processing)      Kernel (image processing)   In image processing , a kernel , convolution matrix , or mask is a small matrix useful for blurring, sharpening, embossing, edge-detection, and more. This is accomplished by means of convolution between a kernel and an image.  Details  Depending on the element values, a kernel can cause a wide range of effects.      Identity       [     0    0    0      0    1    0      0    0    0     ]      0  0  0    0  1  0    0  0  0     \begin{bmatrix}0&0&0\\
 0&1&0\\
 0&0&0\end{bmatrix}     (Figure)  Vd-Orig.png      Edge detection       [     1    0     -  1       0    0    0       -  1     0    1     ]      1  0    1     0  0  0      1   0  1     \begin{bmatrix}\ \ 1&0&-1\\
 \ \ 0&0&\ \ 0\\
 -1&0&\ \ 1\end{bmatrix}     (Figure)  Vd-Edge1.png          [     0    1    0      1     -  4     1      0    1    0     ]      0  1  0    1    4   1    0  1  0     \begin{bmatrix}0&\ \ 1&0\\
 1&-4&1\\
 0&\ \ 1&0\end{bmatrix}     (Figure)  Vd-Edge2.png          [      -  1      -  1      -  1        -  1     8     -  1        -  1      -  1      -  1      ]        1     1     1       1   8    1       1     1     1      \begin{bmatrix}-1&-1&-1\\
 -1&\ \ 8&-1\\
 -1&-1&-1\end{bmatrix}     (Figure)  Vd-Edge3.png      Sharpen       [     0     -  1     0       -  1     5     -  1       0     -  1     0     ]      0    1   0      1   5    1     0    1   0     \begin{bmatrix}\ \ 0&-1&\ \ 0\\
 -1&\ \ 5&-1\\
 \ \ 0&-1&\ \ 0\end{bmatrix}     (Figure)  Vd-Sharp.png      Box blur  ( normalized )        1  9    [     1    1    1      1    1    1      1    1    1     ]         1  9     1  1  1    1  1  1    1  1  1      \frac{1}{9}\begin{bmatrix}1&1&1\\
 1&1&1\\
 1&1&1\end{bmatrix}     (Figure)  Vd-Blur2.png      Gaussian blur  (approximation)        1  16    [     1    2    1      2    4    2      1    2    1     ]         1  16     1  2  1    2  4  2    1  2  1      \frac{1}{16}\begin{bmatrix}1&2&1\\
 2&4&2\\
 1&2&1\end{bmatrix}     (Figure)  Vd-Blur1.png      5×5 Unsharp  (with no image mask )         -  1   256    [     1    4    6    4    1      4    16    24    16    4      6    24     -  476     24    6      4    16    24    16    4      1    4    6    4    1     ]           1   256     1  4  6  4  1    4  16  24  16  4    6  24    476   24  6    4  16  24  16  4    1  4  6  4  1      \frac{-1}{256}\begin{bmatrix}1&4&\ \ 6&4&1\\
 4&16&\ \ 24&16&4\\
 6&24&-476&24&6\\
 4&16&\ \ 24&16&4\\
 1&4&\ \ 6&4&1\end{bmatrix}           The above are just a few examples of effects achievable by convolving kernels and images.  Origin  The origin is the position of the kernel which is above (conceptually) the current output pixel. This could be outside of the actual kernel, though usually it corresponds to one of the kernel elements. For a symmetric kernel, the origin is usually the center element.  Convolution  This is a form of mathematical convolution .  The values of a given pixel in the output image are calculated by multiplying each kernel value by the corresponding input image pixel values. This can be described algorithmically with the following pseudo-code:  for  each  image  row  in  input  image :   for  each  pixel  in  image  row :    set  accumulator to zero    for  each  kernel  row  in  kernel :   for  each  element  in  kernel  row :    if  element  position corresponding* to pixel  position  then   multiply  element  value corresponding* to pixel  value   add  result to accumulator   endif    set  output  image  pixel to accumulator   *corresponding input image pixels are found relative to the kernel's origin.   If kernel is symmetric then place the centre(origin) of kernel on the current pixel. Then kernel will be overlapped with neighbouring pixels too. Now multiply each kernel element with the pixel value it overlapped with and add all the obtained values. Resultant value will be the value for the current pixel that is overlapped with the centre of the kernel.  If the kernel is not symmetric, it has to be flipped both around its horizontal and vertical axis before calculating the convolution as above. 1  Edge Handling  (Figure)  Extend Edge-Handling   Kernel convolution usually requires values from pixels outside of the image boundaries. There are a variety of methods for handling image edges.   Extend  The nearest border pixels are conceptually extended as far as necessary to provide values for the convolution. Corner pixels are extended in 90° wedges. Other edge pixels are extended in lines.  Wrap  The image is conceptually wrapped (or tiled) and values are taken from the opposite edge or corner.  Crop  Any pixel in the output image which would require values from beyond the edge is skipped. This method can result in the output image being slightly smaller, with the edges having been cropped.   Normalization  Dividing each element in the kernel by the sum of all the absolute values of the elements in the kernel. Normalization ensures that the pixel values in the output image are of the same relative magnitude as those in the input image.  External links   vImage Programming Guide: Performing Convolution Operations  Image Processing using 2D-Convolution  GNU Image Manipulation Program - User Manual - 8.2. Convolution Matrix  Interactive Demonstration of 3x3 Convolution Kernels   References   Ludwig, Jamie (n.d.), "Image Convolution". Portland State University. http://web.pdx.edu/~jduh/courses/Archive/geog481w07/Students/Ludwig_ImageConvolution.pdf  Lecarme, Olivier; Delvare, Karine (January 2013). The Book of GIMP: A Complete Guide to Nearly Everything . No Starch Press, p. 429, ISBN 978-1593273835.  Gumster, Jason van; Shimonski, Robert (March 2012). GIMP Bible . Wiley, pp. 438–442, ISBN 978-0470523971.  Stockman, George C.; Shapiro, Linda G. (February 2001). Computer Vision . Prentice Hall, pp. 53–54, ISBN 978-0130307965.   "  Category:Image processing  Category:Feature detection (computer vision)     http://www.songho.ca/dsp/convolution/convolution2d_example.html ↩     