   Quantum phase estimation algorithm      Quantum phase estimation algorithm   In quantum computing , the quantum phase estimation algorithm is a quantum algorithm that finds many applications as a subroutine in other algorithms. The quantum phase estimation algorithm allows one to estimate the eigenphase of an eigenvector of a unitary gate, given access to a quantum state proportional to the eigenvector and a procedure to implement the unitary conditionally.  The Problem  Let U be a unitary operator that operates on m qubits. Then all of the eigenvalues of U have absolute value 1. Thus the spectrum of a unitary operator consists of phases    e   i  θ      superscript  e    i  θ     e^{i\theta}   . Given an eigenvector    |  ψ  ⟩     ket  ψ    \left|\psi\right\rangle   , such that     U   |  ψ  ⟩    =    e   i  θ     |  ψ  ⟩          U   ket  ψ       superscript  e    i  θ     ket  ψ      U\left|\psi\right\rangle=e^{i\theta}\left|\psi\right\rangle   , the objective is to estimate   θ   θ   \theta   . The phase estimation algorithm solves this problem.  The Algorithm  Suppose we wish to compute the phases to an accuracy of n bits. We achieve this by subjecting our eigenvector    |  ψ  ⟩     ket  ψ    \left|\psi\right\rangle   of   U   U   U   to a succession of n controlled operators, followed by the inverse of the quantum Fourier transform . The controlled operators are the powers of   U   U   U   from   U   U   U   to controlled    U   2   n  -  1       superscript  U   superscript  2    n  1      U^{2^{n-1}}   .  After putting the control lines into the Hadamard state, we have       1    2  n       ∑  x     |  x  ⟩   ⊗   |  ψ  ⟩           1     superscript  2  n       subscript   x    tensor-product   ket  x    ket  ψ       \frac{1}{\sqrt{2^{n}}}\sum_{x}\left|x\right\rangle\otimes\left|\psi\right\rangle   . After the controlled application of   U   U   U   , we have       1    2  n       ∑  x      e   i  x  θ     |  x  ⟩    ⊗   |  ψ  ⟩           1     superscript  2  n       subscript   x    tensor-product     superscript  e    i  x  θ     ket  x     ket  ψ       \frac{1}{\sqrt{2^{n}}}\sum_{x}e^{ix\theta}\left|x\right\rangle\otimes\left|%
 \psi\right\rangle   .  Applying the inverse of the quantum Fourier transform upon the n qubits yields        1   2  n      ∑  y     ∑  x      e   -     2  π  i  x   ⋅  y   /   2  n       e   i  x  θ     |  y  ⟩    ⊗   |  ψ  ⟩       =    1   2  n      ∑  y        e   i   2  n   θ    -  1     e   i   (   θ  -    2  π  y   /   2  n     )     -  1     |  y  ⟩    ⊗   |  ψ  ⟩              1   superscript  2  n      subscript   y     subscript   x    tensor-product     superscript  e       normal-⋅    2  π  i  x   y    superscript  2  n       superscript  e    i  x  θ     ket  y     ket  ψ           1   superscript  2  n      subscript   y    tensor-product         superscript  e    i   superscript  2  n   θ    1      superscript  e    i    θ      2  π  y    superscript  2  n       1     ket  y     ket  ψ        \frac{1}{2^{n}}\sum_{y}\sum_{x}e^{-2\pi ix\cdot y/2^{n}}e^{ix\theta}\left|y%
 \right\rangle\otimes\left|\psi\right\rangle=\frac{1}{2^{n}}\sum_{y}\frac{e^{i2%
 ^{n}\theta}-1}{e^{i\left(\theta-2\pi y/2^{n}\right)}-1}\left|y\right\rangle%
 \otimes\left|\psi\right\rangle   .  If the phase is exactly a    2  n     superscript  2  n    2^{n}   root of unity, the quantum Fourier transform will single out that phase in binary expansion. If not, there will be a probability distribution clustered around the correct phase.  If    |  ψ  ⟩     ket  ψ    \left|\psi\right\rangle   is really a superposition of eigenstates, there is a weighted probability distribution over the individual eigenstates, with the weight given by the Born probabilities . This is because eigenstates corresponding to different eigenvalues are orthogonal.  Note that this algorithm is only efficient if we can compute    U   2  n      superscript  U   superscript  2  n     U^{2^{n}}   in some time polynomial in   n   n   n   . There are unitary operators for which this is the case, and there are those for which this isn't. If we only have access to   U   U   U   as an oracle, then we need exponentially many calls to   U   U   U   to compute    U   2  n      superscript  U   superscript  2  n     U^{2^{n}}   .  See also   Shor's algorithm   References      "  Category:Quantum algorithms   