   Padding argument      Padding argument   In computational complexity theory , the padding argument is a tool to conditionally prove that if some complexity classes are equal, then some other bigger classes are also equal.  Example  The proof that P = NP implies EXP = NEXP uses "padding".    EXP  ⊆  NEXP      EXP  NEXP    \mathrm{EXP}\subseteq\mathrm{NEXP}   by definition, so it suffices to show    NEXP  ⊆  EXP      NEXP  EXP    \mathrm{NEXP}\subseteq\mathrm{EXP}   .  Let L be a language in NEXP. Since L is in NEXP, there is a non-deterministic Turing machine  M that decides L in time    2   n  c      superscript  2   superscript  n  c     2^{n^{c}}   for some constant c . Let        L  ′   =   {   x   1   2    |  x  |   c      ∣   x  ∈  L   }    ,       superscript  L  normal-′    conditional-set    x   superscript  1   superscript  2   superscript    x   c        x  L      L^{\prime}=\{x1^{2^{|x|^{c}}}\mid x\in L\},     where 1 is a symbol not occurring in L . First we show that    L  ′     superscript  L  normal-′    L^{\prime}   is in NP, then we will use the deterministic polynomial time machine given by P = NP to show that L is in EXP.      L  ′     superscript  L  normal-′    L^{\prime}   can be decided in non-deterministic polynomial time as follows. Given input    x  ′     superscript  x  normal-′    x^{\prime}   , verify that it has the form     x  ′   =   x   1   2    |  x  |   c           superscript  x  normal-′     x   superscript  1   superscript  2   superscript    x   c        x^{\prime}=x1^{2^{|x|^{c}}}   and reject if it does not. If it has the correct form, simulate M(x) . The simulation takes non-deterministic    2    |  x  |   c      superscript  2   superscript    x   c     2^{|x|^{c}}   time, which is polynomial in the size of the input,    x  ′     superscript  x  normal-′    x^{\prime}   . So,    L  ′     superscript  L  normal-′    L^{\prime}   is in NP. By the assumption P = NP, there is also a deterministic machine DM that decides    L  ′     superscript  L  normal-′    L^{\prime}   in polynomial time. We can then decide L in deterministic exponential time as follows. Given input   x   x   x   , simulate    D  M   (   x   1   2    |  x  |   c      )       D  M    x   superscript  1   superscript  2   superscript    x   c        DM(x1^{2^{|x|^{c}}})   . This takes only exponential time in the size of the input,   x   x   x   .  The    1  d     superscript  1  d    1^{d}   is called the "padding" of the language L . This type of argument is also sometimes used for space complexity classes, alternating classes, and bounded alternating classes.  References     "  *   