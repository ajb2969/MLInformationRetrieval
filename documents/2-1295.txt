   Longest common subsequence problem      Longest common subsequence problem   The longest common subsequence ( LCS ) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences). It differs from problems of finding common substrings : unlike substrings, subsequences are not required to occupy consecutive positions within the original sequences. The longest common subsequence problem is a classic computer science problem, the basis of data comparison programs such as the diff utility , and has applications in bioinformatics . It is also widely used by revision control systems such as Git for reconciling multiple changes made to a revision-controlled collection of files.  Complexity  For the general case of an arbitrary number of input sequences, the problem is NP-hard . 1 When the number of sequences is constant, the problem is solvable in polynomial time by dynamic programming (see Solution below). Assume you have   N   N   N   sequences of lengths     n  1   ,  …  ,   n  N       subscript  n  1   normal-…   subscript  n  N     n_{1},...,n_{N}   . A naive search would test each of the    2   n  1      superscript  2   subscript  n  1     2^{n_{1}}   subsequences of the first sequence to determine whether they are also subsequences of the remaining sequences; each subsequence may be tested in time linear in the lengths of the remaining sequences, so the time for this algorithm would be       O   (    2   n  1      ∑   i  >  1     n  i     )    .      O     superscript  2   subscript  n  1      subscript     i  1     subscript  n  i       O\left(2^{n_{1}}\sum_{i>1}n_{i}\right).     For the case of two sequences of n and m elements, the running time of the dynamic programming approach is O ( n × m ). For an arbitrary number of input sequences, the dynamic programming approach gives a solution in       O   (   N    ∏   i  =  1   N    n  i     )    .      O    N    superscript   subscript  product    i  1    N    subscript  n  i       O\left(N\prod_{i=1}^{N}n_{i}\right).     There exist methods with lower complexity, 2 which often depend on the length of the LCS, the size of the alphabet, or both.  Notice that the LCS is not necessarily unique; for example the LCS of "ABC" and "ACB" is both "AB" and "AC". Indeed the LCS problem is often defined to be finding all common subsequences of a maximum length. This problem inherently has higher complexity, as the number of such subsequences is exponential in the worst case, 3 even for only two input strings.  Solution for two sequences  The LCS problem has an optimal substructure : the problem can be broken down into smaller, simple "subproblems", which can be broken down into yet simpler subproblems, and so on, until, finally, the solution becomes trivial. The LCS problem also has overlapping subproblems : the solution to high-level subproblems often reuse lower level subproblems. Problems with these two properties—optimal substructure and overlapping subproblems—can be approached by a problem-solving technique called dynamic programming , in which subproblem solutions are memoized rather than computed over and over. The procedure requires memoization —saving the solutions to one level of subproblem in a table (analogous to writing them to a memo , hence the name) so that the solutions are available to the next level of subproblems. This method is illustrated here.  Prefixes  The subproblems become simpler as the sequences become shorter. Shorter sequences are conveniently described using the term prefix . A prefix of a sequence is the sequence with the end cut off. Let S be the sequence (AGCA). Then, the sequence (AG) is one of the prefixes of S . Prefixes are denoted with the name of the sequence, followed by a subscript to indicate how many characters the prefix contains. 4 The prefix (AG) is denoted S 2 , since it contains the first 2 elements of S . The possible prefixes of S are   S 1 = (A)  S 2 = (AG)  S 3 = (AGC)  S 4 = (AGCA).   The solution to the LCS problem for two arbitrary sequences, X and Y , amounts to construct some function, LCS ( X , Y ), that gives the longest subsequences common to X and Y . That function relies on the following two properties.  First property  Suppose that two sequences both end in the same element. To find their LCS, shorten each sequence by removing the last element, find the LCS of the shortened sequences, and to that LCS append the removed element.   For example, here are two sequences having the same last element: (BANANA) and (ATANA).  Remove the same last element. Repeat the procedure until you find no common last element. The removed sequence will be (ANA).  The sequences now under consideration: (BAN) and (AT)  The LCS of these last two sequences is, by inspection, (A).  Append the removed element, (ANA), giving (AANA), which, by inspection, is the LCS of the original sequences.   In general, for any sequences X and Y of length n and m , if we denote their elements x 1 to x n and y 1 to y m and their prefixes X 1 to X n-1 and Y 1 to Y m-1 , then we can say this:   If: x n = y m   then: LCS ( X n , Y m ) = LCS ( ''X n''-1 , ''Y m''-1 ) ^ x n    where the caret ^ indicates that the following element, x n , is appended to the sequence. Note that the LCS for X n and Y m involves determining the LCS of the shorter sequences, ''X n''-1 and ''Y m''-1 .  Second property  Suppose that the two sequences X and Y do not end in the same symbol. Then the LCS of X and Y is the longer of the two sequences LCS(X n ,Y m-1 ) and LCS(X n-1 ,Y m ).  To understand this property, consider the two following sequences :  sequence X: ABCDEFG (n elements) sequence Y: BCDGK (m elements)  The LCS of these two sequences either ends with a G (the last element of sequence X) or does not.  Case 1: the LCS ends with a G Then it cannot end with a K. Thus it does not hurt to remove the K from sequence Y: if K were in the LCS, it would be its last character; as a consequence K is not in the LCS. We can then write: LCS(X n ,Y m ) = LCS(X n , Y m-1 ).  Case 2: the LCS does not end with a G Then it does not hurt to remove the G from the sequence X (for the same reason as above). And then we can write: LCS(X n ,Y m ) = LCS(X n-1 , Y m ).  In any case, the LCS we are looking for is one of LCS(X n , Y m-1 ) or LCS(X n-1 , Y m ). Those two last LCS are both common subsequences to X and Y. LCS(X,Y) is the longest. Thus its value is the longest sequence of LCS(X n , Y m-1 ) and LCS(X n-1 , Y m ).  LCS function defined  Let two sequences be defined as follows: X = ( x 1 , x 2 ... x m ) and Y = ( y 1 , y 2 ... y n ). The prefixes of X are X 1, 2,...m ; the prefixes of Y are Y 1, 2,...n . Let LCS ( X i , Y j ) represent the set of longest common subsequence of prefixes X i and Y j . This set of sequences is given by the following.       L  C  S   (   X  i   ,   Y  j   )    =   {           if   i   =   0  or  j   =  0          L  C  S   (   X   i  -  1    ,   Y   j  -  1    )    ⌢   x  i        if   x  i    =   y  j         longest   (   L  C  S   (   X  i   ,   Y   j  -  1    )    ,   L  C  S   (   X   i  -  1    ,   Y  j   )    )        if   x  i    ≠   y  j              L  C  S    subscript  X  i    subscript  Y  j      cases  absent        if  i     0  or  j        0     normal-⌢     L  C  S    subscript  X    i  1     subscript  Y    j  1       subscript  x  i        if   subscript  x  i     subscript  y  j      longest     L  C  S    subscript  X  i    subscript  Y    j  1        L  C  S    subscript  X    i  1     subscript  Y  j           if   subscript  x  i     subscript  y  j       LCS\left(X_{i},Y_{j}\right)=\begin{cases}&\mbox{ if }\ i=0\mbox{ or }j=0\\
 \textrm{ }LCS\left(X_{i-1},Y_{j-1}\right)\frown x_{i}&\mbox{ if }x_{i}=y_{j}\\
 \mbox{longest}\left(LCS\left(X_{i},Y_{j-1}\right),LCS\left(X_{i-1},Y_{j}\right%
 )\right)&\mbox{ if }x_{i}\neq y_{j}\\
 \end{cases}     To find the longest subsequences common to X i and Y j , compare the elements x i and y j . If they are equal, then the sequence LCS ( X i -1 , Y j -1 ) is extended by that element, x i . If they are not equal, then the longer of the two sequences, LCS ( X i , Y j -1 ), and LCS ( X i -1 , Y j ), is retained. (If they are both the same length, but not identical, then both are retained.) Notice that the subscripts are reduced by 1 in these formulas. That can result in a subscript of 0. Since the sequence elements are defined to start at 1, it was necessary to add the requirement that the LCS is empty when a subscript is zero.  Worked example  The longest subsequence common to C = (AGCAT), and R = (GAC) will be found. Because the LCS function uses a "zeroth" element, it is convenient to define zero prefixes that are empty for these sequences: C 0 = Ø; and R 0 = Ø. All the prefixes are placed in a table with C in the first row (making it a c olumn header) and R in the first column (making it a r ow header).      LCS Strings        0     G     A     C       This table is used to store the LCS sequence for each step of the calculation. The second column and second row have been filled in with Ø, because when an empty sequence is compared with a non-empty sequence, the longest common subsequence is always an empty sequence.  LCS ( R 1 , C 1 ) is determined by comparing the first elements in each sequence. G and A are not the same, so this LCS gets (using the "second property") the longest of the two sequences, LCS ( R 1 , C 0 ) and LCS ( R 0 , C 1 ). According to the table, both of these are empty, so LCS ( R 1 , C 1 ) is also empty, as shown in the table below. The arrows indicate that the sequence comes from both the cell above, LCS ( R 0 , C 1 ) and the cell on the left, LCS ( R 1 , C 0 ).  LCS ( R 1 , C 2 ) is determined by comparing G and G. They match, so G is appended to the upper left sequence, LCS ( R 0 , C 1 ), which is (Ø), giving (ØG), which is (G).  For LCS ( R 1 , C 3 ), G and C do not match. The sequence above is empty; the one to the left contains one element, G. Selecting the longest of these, LCS ( R 1 , C 3 ) is (G). The arrow points to the left, since that is the longest of the two sequences.  LCS ( R 1 , C 4 ), likewise, is (G).  LCS ( R 1 , C 5 ), likewise, is (G).      "G" Row Completed        Ø     G     A     C       For LCS ( R 2 , C 1 ), A is compared with A. The two elements match, so A is appended to Ø, giving (A).  For LCS ( R 2 , C 2 ), A and G do not match, so the longest of LCS ( R 1 , C 2 ), which is (G), and LCS ( R 2 , C 1 ), which is (A), is used. In this case, they each contain one element, so this LCS is given two subsequences: (A) and (G).  For LCS ( R 2 , C 3 ), A does not match C. LCS ( R 2 , C 2 ) contains sequences (A) and (G); LCS( R 1 , C 3 ) is (G), which is already contained in LCS ( R 2 , C 2 ). The result is that LCS ( R 2 , C 3 ) also contains the two subsequences, (A) and (G).  For LCS ( R 2 , C 4 ), A matches A, which is appended to the upper left cell, giving (GA).  For LCS ( R 2 , C 5 ), A does not match T. Comparing the two sequences, (GA) and (G), the longest is (GA), so LCS ( R 2 , C 5 ) is (GA).      "G" & "A" Rows Completed        Ø     G     A     C       For LCS ( R 3 , C 1 ), C and A do not match, so LCS ( R 3 , C 1 ) gets the longest of the two sequences, (A).  For LCS ( R 3 , C 2 ), C and G do not match. Both LCS ( R 3 , C 1 ) and LCS ( R 2 , C 2 ) have one element. The result is that LCS ( R 3 , C 2 ) contains the two subsequences, (A) and (G).  For LCS ( R 3 , C 3 ), C and C match, so C is appended to LCS ( R 2 , C 2 ), which contains the two subsequences, (A) and (G), giving (AC) and (GC).  For LCS ( R 3 , C 4 ), C and A do not match. Combining LCS ( R 3 , C 3 ), which contains (AC) and (GC), and LCS ( R 2 , C 4 ), which contains (GA), gives a total of three sequences: (AC), (GC), and (GA).  Finally, for LCS ( R 3 , C 5 ), C and T do not match. The result is that LCS ( R 3 , C 5 ) also contains the three sequences, (AC), (GC), and (GA).      Completed LCS Table        Ø     G     A     C       The final result is that the last cell contains all the longest subsequences common to (AGCAT) and (GAC); these are (AC), (GC), and (GA). The table also shows the longest common subsequences for every possible pair of prefixes. For example, for (AGC) and (GA), the longest common subsequence are (A) and (G).  Traceback approach  Calculating the LCS of a row of the LCS table requires only the solutions to the current row and the previous row. Still, for long sequences, these sequences can get numerous and long, requiring a lot of storage space. Storage space can be saved by saving not the actual subsequences, but the length of the subsequence and the direction of the arrows, as in the table below.      Storing length, rather than sequences        Ø     G     A     C       The actual subsequences are deduced in a "traceback" procedure that follows the arrows backwards, starting from the last cell in the table. When the length decreases, the sequences must have had a common element. Several paths are possible when two arrows are shown in a cell. Below is the table for such an analysis, with numbers colored in cells where the length is about to decrease. The bold numbers trace out the sequence, (GA). 5      Traceback example        Ø     G     A     C       Relation to other problems  For two strings    X   1  …  m      subscript  X    1  normal-…  m     X_{1\dots m}   and    Y   1  …  n      subscript  Y    1  normal-…  n     Y_{1\dots n}   , the length of the shortest common supersequence is related to the length of the LCS by 6        |   S  C  S   (  X  ,  Y  )    |   =    n  +  m   -   |   L  C  S   (  X  ,  Y  )    |     .          S  C  S   X  Y         n  m       L  C  S   X  Y        \left|SCS(X,Y)\right|=n+m-\left|LCS(X,Y)\right|.     The edit distance when only insertion and deletion is allowed (no substitution), or when the cost of the substitution is the double of the cost of an insertion or deletion, is:         d  ′    (  X  ,  Y  )    =    n  +  m   -   2  ⋅   |   L  C  S   (  X  ,  Y  )    |      .         superscript  d  normal-′    X  Y        n  m    normal-⋅  2      L  C  S   X  Y         d^{\prime}(X,Y)=n+m-2\cdot\left|LCS(X,Y)\right|.     Code for the dynamic programming solution  Computing the length of the LCS  The function below takes as input sequences X[1..m] and Y[1..n] computes the LCS between X[1..i] and Y[1..j] for all 1 ≤ i ≤ m and 1 ≤ j ≤ n , and stores it in C[i,j] . C[m,n] will contain the length of the LCS of X and Y .  function LCSLength(X[1..m], Y[1..n])  C = array(0..m, 0..n)   for i := 0..m  C[i,0] = 0   for j := 0..n  C[0,j] = 0   for i := 1..m   for j := 1..n   if X[i] = Y[j]  C[i,j] := C[i-1,j-1] + 1   else  C[i,j] := max(C[i,j-1], C[i-1,j])   return C[m,n]  Alternatively, memoization could be used.  Reading out an LCS  The following function backtracks the choices taken when computing the C table. If the last characters in the prefixes are equal, they must be in an LCS. If not, check what gave the largest LCS of keeping    x  i     subscript  x  i    x_{i}   and    y  j     subscript  y  j    y_{j}   , and make the same choice. Just choose one if they were equally long. Call the function with i=m and j=n .  function backtrack(C[0..m,0..n], X[1..m], Y[1..n], i, j)   if i = 0 or j = 0   return ""  '''else if ''' X[i] = Y[j]   return backtrack(C, X, Y, i-1, j-1) + X[i]   else   if C[i,j-1] > C[i-1,j]   return backtrack(C, X, Y, i, j-1)   else   return backtrack(C, X, Y, i-1, j)  Reading out all LCSs  If choosing    x  i     subscript  x  i    x_{i}   and    y  j     subscript  y  j    y_{j}   would give an equally long result, read out both resulting subsequences. This is returned as a set by this function. Notice that this function is not polynomial, as it might branch in almost every step if the strings are similar.  function backtrackAll(C[0..m,0..n], X[1..m], Y[1..n], i, j)   if i = 0 or j = 0   return {""}   else  if X[i] = Y[j]   return {Z + X[i] for  all Z in backtrackAll(C, X, Y, i-1, j-1)}   else  R := {}   if C[i,j-1] ≥ C[i-1,j]  R := R ∪ backtrackAll(C, X, Y, i, j-1)   if C[i-1,j] ≥ C[i,j-1]  R := R ∪ backtrackAll(C, X, Y, i-1, j)   return R  Print the diff  This function will backtrack through the C matrix, and print the diff between the two sequences. Notice that you will get a different answer if you exchange ≥ and , with > and ≤ below.  function printDiff(C[0..m,0..n], X[1..m], Y[1..n], i, j)   if i > 0 and j > 0 and X[i] = Y[j]  printDiff(C, X, Y, i-1, j-1)  print "  " + X[i]   else  if j > 0 and (i = 0 or C[i,j-1] ≥ C[i-1,j])  printDiff(C, X, Y, i, j-1)  print "+ " + Y[j]   else  if i > 0 and (j = 0 or C[i,j-1] X be “ XMJYAUZ ” and    Y   Y   Y    be “ MZJAWXU ”. The longest common subsequence between    X   X   X    and    Y   Y   Y    is “ MJAU ”. The table C shown below, which is generated by the function LCSLength , shows the lengths of the longest common subsequences between prefixes of    X   X   X    and    Y   Y   Y    . The    i   i   i    th row and    j   j   j    th column shows the length of the LCS between     X   1..  i      subscript  X    1..  i     X_{1..i}    and     Y   1..  j      subscript  Y    1..  j     Y_{1..j}    .       0   1   2   3   4   5   6   7       Ø   M   Z   J   A   W   X   U     0   Ø   0   0   0   0   0   0   0     1   X   0   0   0   0   0   0   1     2   M   0   1   1   1   1   1   1     3   J   0   1   1   2   2   2   2     4   Y   0   1   1   2   2   2   2     5   A   0   1   1   2   3   3   3     6   U   0   1   1   2   3   3   3     7   Z   0   1   2   2   3   3   3     The highlighted numbers show the path the function backtrack would follow from the bottom right to the top left corner, when reading out an LCS. If the current symbols in   X   X   X   and   Y   Y   Y   are equal, they are part of the LCS, and we go both up and left (shown in bold ). If not, we go up or left, depending on which cell has a higher number. This corresponds to either taking the LCS between    X    1..  i   -  1      subscript  X      1..  i   1     X_{1..i-1}   and    Y   1..  j      subscript  Y    1..  j     Y_{1..j}   , or    X   1..  i      subscript  X    1..  i     X_{1..i}   and    Y    1..  j   -  1      subscript  Y      1..  j   1     Y_{1..j-1}   .  Code optimization  Several optimizations can be made to the algorithm above to speed it up for real-world cases.  Reduce the problem set  The C matrix in the naive algorithm grows quadratically with the lengths of the sequences. For two 100-item sequences, a 10,000-item matrix would be needed, and 10,000 comparisons would need to be done. In most real-world cases, especially source code diffs and patches, the beginnings and ends of files rarely change, and almost certainly not both at the same time. If only a few items have changed in the middle of the sequence, the beginning and end can be eliminated. This reduces not only the memory requirements for the matrix, but also the number of comparisons that must be done.  function LCS(X[1..m], Y[1..n])  start := 1  m_end := m  n_end := n   trim  off  the  matching  items  at  the  beginning   while start ≤ m_end and start ≤ n_end and X[start] = Y[start]  start := start + 1   trim  off  the  matching  items  at  the  end   while start ≤ m_end and start ≤ n_end and X[m_end] = Y[n_end]  m_end := m_end - 1  n_end := n_end - 1  C = array(start-1..m_end, start-1..n_end)   only  loop  over  the  items  that  have  changed   for i := start..m_end   for j := start..n_end   the  algorithm  continues  as  before  ...  In the best-case scenario, a sequence with no changes, this optimization would completely eliminate the need for the C matrix. In the worst-case scenario, a change to the very first and last items in the sequence, only two additional comparisons are performed.  Reduce the comparison time  Most of the time taken by the naive algorithm is spent performing comparisons between items in the sequences. For textual sequences such as source code, you want to view lines as the sequence elements instead of single characters. This can mean comparisons of relatively long strings for each step in the algorithm. Two optimizations can be made that can help to reduce the time these comparisons consume.  Reduce strings to hashes  A hash function or checksum can be used to reduce the size of the strings in the sequences. That is, for source code where the average line is 60 or more characters long, the hash or checksum for that line might be only 8 to 40 characters long. Additionally, the randomized nature of hashes and checksums would guarantee that comparisons would short-circuit faster, as lines of source code will rarely be changed at the beginning.  There are three primary drawbacks to this optimization. First, an amount of time needs to be spent beforehand to precompute the hashes for the two sequences. Second, additional memory needs to be allocated for the new hashed sequences. However, in comparison to the naive algorithm used here, both of these drawbacks are relatively minimal.  The third drawback is that of collisions . Since the checksum or hash is not guaranteed to be unique, there is a small chance that two different items could be reduced to the same hash. This is unlikely in source code, but it is possible. A cryptographic hash would therefore be far better suited for this optimization, as its entropy is going to be significantly greater than that of a simple checksum. However, the benefits may not be worth the setup and computational requirements of a cryptographic hash for small sequence lengths.  Reduce the required space  If only the length of the LCS is required, the matrix can be reduced to a    2  ×   min   (  n  ,  m  )        2    n  m     2\times\min(n,m)   matrix with ease, or to a     min   (  m  ,  n  )    +  1        m  n   1    \min(m,n)+1   vector (smarter) as the dynamic programming approach only needs the current and previous columns of the matrix. Hirschberg's algorithm allows the construction of the optimal sequence itself in the same quadratic time and linear space bounds. 7  Further optimized algorithms  Several algorithms exist that are worst-case faster than the presented dynamic programming approach. 8 For problems with a bounded alphabet size, the Method of Four Russians can be used to reduce the running time of the dynamic programming algorithm by a logarithmic factor. 9 For   r   r   r   (and    n  >  m      n  m    n>m   ), the number of matches between the two sequences, there is an algorithm that performs in    O   (    (   n  +  r   )    log   (  n  )     )       O      n  r     n      O((n+r)\log(n))   time. 10  Behavior on random strings  Beginning with , 11 a number of researchers have investigated the behavior of the longest common subsequence length when the two given strings are drawn randomly from the same alphabet. When the alphabet size is constant, the expected length of the LCS is proportional to the length of the two strings, and the constants of proportionality (depending on alphabet size) are known as the Chvátal–Sankoff constants . Their exact values are not known, but upper and lower bounds on their values have been proven, 12 and it is known that they grow inversely proportionally to the square root of the alphabet size. 13 Simplified mathematical models of the longest common subsequence problem have been shown to be controlled by the Tracy–Widom distribution . 14  See also   Longest increasing subsequence  Longest alternating subsequence  Levenshtein distance   References  External links   Dictionary of Algorithms and Data Structures: longest common subsequence  A collection of implementations of the longest common subsequence in many programming languages   "  Category:Problems on strings  Category:Combinatorics  Category:Dynamic programming  Category:Polynomial-time problems  Category:NP-complete problems     ↩  ↩  ↩  ↩  ↩   ↩  http://books.google.com/books?id=mFd_grFyiT4C&pg; ;=PA132&lpg;=PA132&dq;=hunt+szymanski+algorithm&source;=bl&ots;=sMc-HtvNTQ&sig;=FtrZ_b5JdJ25Ighwc1-XOfysaf8&hl;=en&sa;=X&ei;=-BU9VPK7OpS7ggT0gYEQ&ved;=0CDsQ6AEwAw#v=onepage&q;&f;=false ↩  . ↩  http://www.cs.bgu.ac.il/~dpaa111/wiki.files/HuntSzymanski.pdf ↩  . ↩  . ↩  . ↩  . ↩     