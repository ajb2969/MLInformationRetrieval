   Weight-balanced tree      Weight-balanced tree   In computer science , weight-balanced binary trees ( WBTs ) are a type of self-balancing binary search trees that can be used to implement dynamic sets , dictionaries (maps) and sequences. 1 These trees were introduced by Nievergelt and Reingold in the 1970s as trees of bounded balance , or BB[α] trees . 2 3 Their more common name is due to Knuth . 4  Like other self-balancing trees, WBTs store bookkeeping information pertaining to balance in their nodes and perform rotations to restore balance when it is disturbed by insertion or deletion operations. Specifically, each node stores the size of the subtree rooted at the node, and the sizes of left and right subtrees are kept within some factor of each other. Unlike the balance information in AVL trees (which store the height of subtrees) and red-black trees (which store a fictional "color" bit), the bookkeeping information in a WBT is an actually useful property for applications: the number of elements in a tree is equal to the size of its root, and the size information is exactly the information needed to implement the operations of an order statistic tree , viz., getting the   n   n   n   'th largest element in a set or determining an element's index in sorted order. 5  Weight-balanced trees are popular in the functional programming community and are used to implement sets and maps in MIT Scheme , SLIB and implementations of Haskell . 6 7  Description  A weight-balanced tree is a binary search tree that stores the sizes of subtrees in the nodes. That is, a node has fields   key , of any ordered type  value (optional, only for mappings)  left , right , pointer to node  size , of type integer.   By definition, the size of a leaf (typically represented by a  pointer) is zero. The size of an internal node is the sum of sizes of its two children, plus one (). Based on the size, one defines the weight as either equal to the size, or as .  Operations that modify the tree must make sure that the weight of the left and right subtrees of every node remain within some factor   α   α   α   of each other, using the same rebalancing operations used in AVL trees: rotations and double rotations. Formally, node balance is defined as follows:   A node is balanced if  and . 8    Lower values mean more balanced trees, but not all values of   α   α   α   are appropriate; Nievergelt and Reingold proved that      α  <   1  -   1   2         α    1    1    2       \alpha<1-\frac{1}{\sqrt{2}}     is a necessary condition for the balancing algorithm to work. Later work showed a lower bound of    2  /  11      2  11    {2}/{11}   for   α   α   α   , although it can be made arbitrarily small if a custom (and more complicated) rebalancing algorithm is used.  Applying balancing correctly guarantees a tree of   n   n   n   elements will have height      h  ≤    log   1   1  -  α     n   =     log  2   n     log  2    (   1   1  -  α    )     =   O   (   log  n   )          h    subscript     1    1  α     n            subscript   2   n     subscript   2     1    1  α             O    n       h\leq\log_{\frac{1}{1-\alpha}}n=\frac{\log_{2}n}{\log_{2}\left(\frac{1}{1-%
 \alpha}\right)}=O(\log n)     The number of balancing operations required in a sequence of   n   n   n   insertions and deletions is linear in   n   n   n   , i.e., constant in an amortized sense. 9  References  "  Category:Search trees     ↩  ↩  ↩  ↩  ↩  ↩   ↩  ↩     