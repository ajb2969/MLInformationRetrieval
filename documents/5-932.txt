   Fast wavelet transform      Fast wavelet transform   The Fast Wavelet Transform is a mathematical  algorithm designed to turn a waveform or signal in the time domain into a sequence of coefficients based on an orthogonal basis of small finite waves, or wavelets . The transform can be easily extended to multidimensional signals, such as images, where the time domain is replaced with the space domain.  It has as theoretical foundation the device of a finitely generated, orthogonal multiresolution analysis (MRA). In the terms given there, one selects a sampling scale J with sampling rate of 2 J per unit interval, and projects the given signal f onto the space    V  J     subscript  V  J    V_{J}   ; in theory by computing the scalar products        s  n   (  J  )    :=    2  J    ⟨   f   (  t  )    ,   ϕ   (     2  J   t   -  n   )    ⟩     ,     assign   subscript   superscript  s  J   n      superscript  2  J      f  t     ϕ       superscript  2  J   t   n        s^{(J)}_{n}:=2^{J}\langle f(t),\phi(2^{J}t-n)\rangle,     where   ϕ   ϕ   \phi   is the scaling function of the chosen wavelet transform; in practice by any suitable sampling procedure under the condition that the signal is highly oversampled, so        P  J    [  f  ]    (  x  )    :=    ∑   n  ∈   \Z        s  n   (  J  )     ϕ   (     2  J   x   -  n   )        assign     subscript  P  J    delimited-[]  f   x     subscript     n  \Z       subscript   superscript  s  J   n   ϕ       superscript  2  J   x   n       P_{J}[f](x):=\sum_{n\in\Z}s^{(J)}_{n}\,\phi(2^{J}x-n)   is the orthogonal projection or at least some good approximation of the original signal in    V  J     subscript  V  J    V_{J}   .  The MRA is characterised by its scaling sequence      a  =   (   a   -  N    ,  …  ,   a  0   ,  …  ,   a  N   )       a    subscript  a    N    normal-…   subscript  a  0   normal-…   subscript  a  N      a=(a_{-N},\dots,a_{0},\dots,a_{N})   or, as Z-transform ,     a   (  z  )    =    ∑   n  =   -  N    N     a  n    z   -  n            a  z     superscript   subscript     n    N     N      subscript  a  n    superscript  z    n        a(z)=\sum_{n=-N}^{N}a_{n}z^{-n}     and its wavelet sequence      b  =   (   b   -  N    ,  …  ,   b  0   ,  …  ,   b  N   )       b    subscript  b    N    normal-…   subscript  b  0   normal-…   subscript  b  N      b=(b_{-N},\dots,b_{0},\dots,b_{N})   or     b   (  z  )    =    ∑   n  =   -  N    N     b  n    z   -  n            b  z     superscript   subscript     n    N     N      subscript  b  n    superscript  z    n        b(z)=\sum_{n=-N}^{N}b_{n}z^{-n}     (some coefficients might be zero). Those allow to compute the wavelet coefficients    d  n   (  k  )      subscript   superscript  d  k   n    d^{(k)}_{n}   , at least some range k=M,...,J-1 , without having to approximate the integrals in the corresponding scalar products. Instead, one can directly, with the help of convolution and decimation operators, compute those coefficients from the first approximation    s   (  J  )      superscript  s  J    s^{(J)}   .  Forward DWT  One computes recursively , starting with the coefficient sequence    s   (  J  )      superscript  s  J    s^{(J)}   and counting down from k=J-1 to some ''M *  , h=b * ]]       s  n   (  k  )    :=    1  2     ∑   m  =   -  N    N     a  m    s    2  n   +  m    (   k  +  1   )          assign   subscript   superscript  s  k   n       1  2     superscript   subscript     m    N     N      subscript  a  m    subscript   superscript  s    k  1        2  n   m         s^{(k)}_{n}:=\frac{1}{2}\sum_{m=-N}^{N}a_{m}s^{(k+1)}_{2n+m}   or     s   (  k  )     (  z  )   :=   (  ↓  2  )    (   a  *    (  z  )   ⋅   s   (   k  +  1   )     (  z  )   )      fragments   superscript  s  k    fragments  normal-(  z  normal-)   assign   fragments  normal-(  normal-↓  2  normal-)    fragments  normal-(   superscript  a     fragments  normal-(  z  normal-)   normal-⋅   superscript  s    k  1     fragments  normal-(  z  normal-)   normal-)     s^{(k)}(z):=(\downarrow 2)(a^{*}(z)\cdot s^{(k+1)}(z))   and       d  n   (  k  )    :=    1  2     ∑   m  =   -  N    N     b  m    s    2  n   +  m    (   k  +  1   )          assign   subscript   superscript  d  k   n       1  2     superscript   subscript     m    N     N      subscript  b  m    subscript   superscript  s    k  1        2  n   m         d^{(k)}_{n}:=\frac{1}{2}\sum_{m=-N}^{N}b_{m}s^{(k+1)}_{2n+m}   or     d   (  k  )     (  z  )   :=   (  ↓  2  )    (   b  *    (  z  )   ⋅   s   (   k  +  1   )     (  z  )   )      fragments   superscript  d  k    fragments  normal-(  z  normal-)   assign   fragments  normal-(  normal-↓  2  normal-)    fragments  normal-(   superscript  b     fragments  normal-(  z  normal-)   normal-⋅   superscript  s    k  1     fragments  normal-(  z  normal-)   normal-)     d^{(k)}(z):=(\downarrow 2)(b^{*}(z)\cdot s^{(k+1)}(z))   ,  for k=J-1,J-2,...,M and all    n  ∈   \Z       n  \Z    n\in\Z   . In the Z-transform notation:  :* The downsampling operator     (    ↓  2   )     normal-↓  absent  2    (\downarrow 2)   reduces an infinite sequence, given by its Z-transform , which is simply a Laurent series , to the sequence of the coefficients with even indices,     (  ↓  2  )    (  c   (  z  )   )   =   ∑   k  ∈   \Z      c   2  k     z   -  k       fragments   fragments  normal-(  normal-↓  2  normal-)    fragments  normal-(  c   fragments  normal-(  z  normal-)   normal-)     subscript     k  \Z     subscript  c    2  k     superscript  z    k      (\downarrow 2)(c(z))=\sum_{k\in\Z}c_{2k}z^{-k}   .  :* The starred Laurent-polynomial     a  *    (  z  )        superscript  a    z    a^{*}(z)   denotes the adjoint filter, it has time-reversed adjoint coefficients,      a  *    (  z  )    =    ∑   n  =   -  N    N     a   -  n   *    z   -  n             superscript  a    z     superscript   subscript     n    N     N      superscript   subscript  a    n       superscript  z    n        a^{*}(z)=\sum_{n=-N}^{N}a_{-n}^{*}z^{-n}   . (The adjoint of a real number being the number itself, of a complex number its conjugate, of a real matrix the transposed matrix, of a complex matrix its hermitian adjoint).  :* Multiplication is polynomial multiplication, which is equivalent to the convolution of the coefficient sequences.  It follows that        P  k    [  f  ]    (  x  )    :=    ∑   n  ∈   \Z        s  n   (  k  )     ϕ   (     2  k   x   -  n   )        assign     subscript  P  k    delimited-[]  f   x     subscript     n  \Z       subscript   superscript  s  k   n   ϕ       superscript  2  k   x   n       P_{k}[f](x):=\sum_{n\in\Z}s^{(k)}_{n}\,\phi(2^{k}x-n)     is the orthogonal projection of the original signal f or at least of the first approximation     P  J    [  f  ]    (  x  )        subscript  P  J    delimited-[]  f   x    P_{J}[f](x)   onto the subspace     V  k     subscript  V  k    V_{k}   , that is, with sampling rate of 2 k per unit interval. The difference to the first approximation is given by        P  J    [  f  ]    (  x  )    =     P  k    [  f  ]    (  x  )    +    D  k    [  f  ]    (  x  )    +  …  +    D   J  -  1     [  f  ]    (  x  )            subscript  P  J    delimited-[]  f   x        subscript  P  k    delimited-[]  f   x      subscript  D  k    delimited-[]  f   x   normal-…     subscript  D    J  1     delimited-[]  f   x      P_{J}[f](x)=P_{k}[f](x)+D_{k}[f](x)+\dots+D_{J-1}[f](x)   ,  where the difference or detail signals are computed from the detail coefficients as        D  k    [  f  ]    (  x  )    :=    ∑   n  ∈   \Z        d  n   (  k  )     ψ   (     2  k   x   -  n   )        assign     subscript  D  k    delimited-[]  f   x     subscript     n  \Z       subscript   superscript  d  k   n   ψ       superscript  2  k   x   n       D_{k}[f](x):=\sum_{n\in\Z}d^{(k)}_{n}\,\psi(2^{k}x-n)   ,  with   ψ   ψ   \psi   denoting the mother wavelet of the wavelet transform.  Inverse DWT  Given the coefficient sequence    s   (  M  )      superscript  s  M    s^{(M)}   for some M  d^{(k)}, k=M,...,J-1 , one computes recursively       s  n   (   k  +  1   )    :=     ∑   k  =   -  N    N     a  k    s    2  n   -  k    (  k  )      +    ∑   k  =   -  N    N     b  k    d    2  n   -  k    (  k  )          assign   subscript   superscript  s    k  1    n       superscript   subscript     k    N     N      subscript  a  k    subscript   superscript  s  k       2  n   k        superscript   subscript     k    N     N      subscript  b  k    subscript   superscript  d  k       2  n   k         s^{(k+1)}_{n}:=\sum_{k=-N}^{N}a_{k}s^{(k)}_{2n-k}+\sum_{k=-N}^{N}b_{k}d^{(k)}_%
 {2n-k}   or     s   (   k  +  1   )     (  z  )   =  a   (  z  )   ⋅   (  ↑  2  )    (   s   (  k  )     (  z  )   )   +  b   (  z  )   ⋅   (  ↑  2  )    (   d   (  k  )     (  z  )   )      fragments   superscript  s    k  1     fragments  normal-(  z  normal-)    a   fragments  normal-(  z  normal-)   normal-⋅   fragments  normal-(  normal-↑  2  normal-)    fragments  normal-(   superscript  s  k    fragments  normal-(  z  normal-)   normal-)    b   fragments  normal-(  z  normal-)   normal-⋅   fragments  normal-(  normal-↑  2  normal-)    fragments  normal-(   superscript  d  k    fragments  normal-(  z  normal-)   normal-)     s^{(k+1)}(z)=a(z)\cdot(\uparrow 2)(s^{(k)}(z))+b(z)\cdot(\uparrow 2)(d^{(k)}(z))   for k=J-1,J-2,...,M and all    n  ∈   \Z       n  \Z    n\in\Z   . In the Z-transform notation:  :* The upsampling operator     (    ↑  2   )     normal-↑  absent  2    (\uparrow 2)   creates zero-filled holes inside a given sequence. That is, every second element of the resulting sequence is an element of the given sequence, every other second element is zero or     (  ↑  2  )    (  c   (  z  )   )   :=   ∑   n  ∈   \Z      c  n    z   -   2  n        fragments   fragments  normal-(  normal-↑  2  normal-)    fragments  normal-(  c   fragments  normal-(  z  normal-)   normal-)   assign   subscript     n  \Z     subscript  c  n    superscript  z      2  n       (\uparrow 2)(c(z)):=\sum_{n\in\Z}c_{n}z^{-2n}   . This linear operator is, in the Hilbert space      ℓ  2    (   \Z   ,   \R   )        superscript  normal-ℓ  2    \Z  \R     \ell^{2}(\Z,\R)   , the adjoint to the downsampling operator    (    ↓  2   )     normal-↓  absent  2    (\downarrow 2)   .  See also   Lifting scheme   References   A.N. Akansu Multiplierless Suboptimal PR-QMF Design Proc. SPIE 1818, Visual Communications and Image Processing, p. 723, November, 1992  A.N. Akansu Multiplierless 2-band Perfect Reconstruction Quadrature Mirror Filter (PR-QMF) Banks US Patent 5,420,891, 1995  A.N. Akansu Multiplierless PR Quadrature Mirror Filters for Subband Image Coding IEEE Trans. Image Processing, p. 1359, September 1996  M.J. Mohlenkamp, M.C. Pereyra Wavelets, Their Friends, and What They Can Do for You (2008 EMS) p. 38  B.B. Hubbard ''The World According to Wavelets: The Story of a Mathematical Technique in the Making (1998 Peters) p. 184  S.G. Mallat A Wavelet Tour of Signal Processing (1999 Academic Press) p. 255  A. Teolis Computational Signal Processing with Wavelets (1998 Birkhäuser) p. 116  Y. Nievergelt Wavelets Made Easy (1999 Springer) p. 95   Further reading  G. Beylkin, R. Coifman, V. Rokhlin, "Fast wavelet transforms and numerical algorithms" Comm. Pure Appl. Math. , 44 (1991) pp. 141–183  "  Category:Wavelets  Category:Discrete transforms   