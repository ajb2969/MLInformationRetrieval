


Dependent type




Dependent type

In computer science and logic, a dependent type is a type that depends on a value. It is an overlapping feature of type theory and type systems. In intuitionistic type theory, dependent types are used to encode logic's quantifiers like "for all" and "there exists". In functional programming languages like ATS, Agda, Idris and Epigram, dependent types prevent bugs by allowing very expressive types.
Two common examples of dependent types are dependent functions and dependent pairs. A dependent function's return type may depend on the value (not just type) of an argument. A function that takes a positive integer "n" may return an array of length "n". (Note that this is different from polymorphism where the type is an argument.) A dependent pair may have a second value that depends on the first. It can be used to encode a pair of integers where the second one is greater than the first.
Dependent types add complexity to a type system. Deciding the equality of dependent types in a program may require computations. If arbitrary values are allowed in dependent types, then deciding type equality may involve deciding whether two arbitrary programs produce the same result; hence type checking may become undecidable.
History
Dependent types were created to deepen the connection between programming and logic.
In 1934, Haskell Curry noticed that the types used in mathematical programming languages followed the same pattern as axioms in propositional logic. Going further, for every proof in the logic, there was a matching function (term) in the programming language. One of Curry's examples was the correspondence between simply typed lambda calculus and intuitionistic logic.1
Predicate logic is an extension of propositional logic, adding quantifiers. Howard and de Bruijn extended lambda calculus to match this more powerful logic by creating types for dependent functions, which correspond to "for all", and dependent pairs, which correspond to "there exists".2
(Because of this and other work by Howard, propositions-as-types is known as the Curry-Howard correspondence.)
Formal definition
Dependent types can be, very loosely speaking, imagined to be similar to the type of an indexed family of sets. More formally, given a type 
 
 
 
  in a universe of types 
 
 
 
 , one may have a family of types

 
  which assigns to each term 
 
 
 
  a type 
 
 
 
 . A function whose codomain varies depending on its argument is a dependent function, and the type of this function is called a dependent type, dependent product type or pi-type. For this example, the dependent type would be written as


 
  or as


 
  If B is a constant, the dependent type becomes an ordinary function 
 
 
 
 . That is, 
 
 
 
  is judgementally equal to the function type

 
 .
The name 'pi-type' comes from the idea that these may be viewed as a Cartesian product of types. Pi-types can also be understood as models of universal quantifiers.
For example, writing 
 
 
 
  for 
 
 
 
 -tuples of real numbers, then 
 
 
 
  would be the type of functions which, given a natural number n, return a tuple of real numbers of size n. The usual function space arises as a special case when the range type does not actually depend on the input, e.g.

 
  is the type of functions from natural numbers to the real numbers, which is written as 
 
 
 
  in the simply typed lambda calculus.
Polymorphic functions are an important example of dependent functions, that is, functions having dependent type. Given a type, these functions act on elements of that type (or on elements of a type constructed (derived, inherited) from that type). A polymorphic function returning elements of type C would have a polymorphic type written as



Dependent pair type
The opposite of the dependent type is the dependent pair type, dependent sum type or sigma-type. It is analogous to the coproduct or disjoint union. Sigma-types can also be understood as models of existential quantifiers. Notationally, it is written as


 
  The dependent pair type captures the idea of a pair, where the type of the second term is dependent on the first. Thus, if


 
  then 
 
 
 
  and 
 
 
 
 . If B is a constant, then the dependent pair type becomes (is judgementally equal to) the product type, that is, an ordinary Cartesian product 
 
 
 
 .
Example as existential quantification
Let 
 
 
 
  be sigma-type quantifying over type 
 
 
 
  with predicate 
 
 
 
 . There exists an 
 
 
 
  such that 
 
 
 
  holds if and only if

 
  is inhabited. For example, a is less than b iff there exists a natural number n and a proof that a+n=b.



Systems of the lambda cube
Henk Barendregt developed the lambda cube as a means of classifying type systems along three axes. The eight corners of the resulting cube-shaped diagram each correspond to a type system, with simply typed lambda calculus in the least expressive corner, and calculus of constructions in the most expressive. The three axes of the cube correspond to three different augmentations of the simply typed lambda calculus: the addition of dependent types, the addition of polymorphism, and the addition of higher kinded type constructors (functions from types to types, for example). The lambda cube is generalized further by pure type systems.
First order dependent type theory
The system 
 
 
 
  of pure first order dependent types, corresponding to the logical framework LF, is obtained by generalising the function space type of the simply typed lambda calculus to the dependent product type.
Second order dependent type theory
The system 
 
 
 
  of second order dependent types is obtained from 
 
 
 
  by allowing quantification over type constructors. In this theory the dependent product operator subsumes both the 
 
 
 
  operator of simply typed lambda calculus and the 
 
 
 
  binder of System F.
Higher order dependently typed polymorphic lambda calculus
The higher order system 
 
 
 
  extends 
 
 
 
  to all four forms of abstraction from the lambda cube: functions from terms to terms, types to types, terms to types and types to terms. The system corresponds to the Calculus of constructions whose derivative, the calculus of inductive constructions is the underlying system of the Coq proof assistant.
Simultaneous Programming language and Logic
The Curry–Howard correspondence implies that types can be constructed that express arbitrarily complex mathematical properties. If the user can supply a constructive proof that a type is inhabited (i.e., that a value of that type exists) then a compiler can check the proof and convert it into executable computer code that computes the value by carrying out the construction. The proof checking feature makes dependently typed languages closely related to proof assistants. The code-generation aspect provides a powerful approach to formal program verification and proof-carrying code, since the code is derived directly from a mechanically verified mathematical proof.
Comparison of languages with dependent types




Language

Actively developed

Paradigm

Tactics

Proof terms

Termination checking

Types can depend on

Universes

Proof irrelevance

Program extraction

Extraction erases irrelevant terms





Agda

3

Purely functional

Few/limited



Any term


Proof-irrelevant arguments (experimental)4


5



ATS

6

Functional / imperative

7










Cayenne


Purely functional




Any term







Coq

8

Purely functional




Any term







Dependent ML






Natural numbers







Guru

9

Purely functional10

11

12


Any term







Idris

13

Purely functional14

15



Any term




16



Matita

17

Purely functional




Any term







NuPRL


Purely functional




Any term







F*


Functional /imperative











PVS













Sage


Hybrid typechecking











Twelf


Logic programming




Any (LF) term







Xanadu

18

Imperative











See also

Typed lambda calculus

Footnotes


References
Further reading






Norell, Ulf. Towards a practical programming language based on dependent type theory. PhD thesis, Department of Computer Science and Engineering, Chalmers University of Technology, SE-412 96 Göteborg, Sweden, September 2007.
Oury, Nicolas and Swierstra, Wouter (2008). "The Power of Pi". Accepted for presentation at ICFP, 2008.
Norell, Ulf (2008). Dependently Typed Programming in Agda.

External

Dependently Typed Programming 2008
Dependently Typed Programming 2010
Dependently Typed Programming 2011
"Dependent type" at the Haskell Wiki







"
  Category:Type theory

























