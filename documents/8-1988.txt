


Polytope model




Polytope model

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



The polyhedral model (also called the polytope method) is a mathematical framework for loop nest optimization in program optimization. The polytope method treats each loop iteration within nested loops as lattice points inside mathematical objects called polytopes, performs affine transformations or more general non-affine transformations such as tiling on the polytopes, and then converts the transformed polytopes into equivalent, but optimized (depending on targeted optimization goal), loop nests through polyhedra scanning.
Detailed example
 The following C code implements a form of error-distribution dithering similar to Floydâ€“Steinberg dithering, but modified for pedagogical reasons. The two-dimensional array src contains h rows of w pixels, each pixel having a grayscale value between 0 and 255 inclusive. After the routine has finished, the output array dst will contain only pixels with value 0 or value 255. During the computation, each pixel's dithering error is collected by adding it back into the src array. (Notice that src and dst are both read and written during the computation; src is not read-only, and dst is not write-only.)
Each iteration of the inner loop modifies the values in src[i][j] based on the values of src[i-1][j], src[i][j-1], and src[i+1][j-1]. (The same dependencies apply to dst[i][j]. For the purposes of loop skewing, we can think of src[i][j] and dst[i][j] as the same element.) We can illustrate the dependencies of src[i][j] graphically, as in the diagram on the right.



 #define ERR(x,y) (dst[x][y] - src[x][y])
  void dither(unsigned char **src, unsigned char **dst, int w, int h)  
  {
      int i, j;
      for (j = 0; j < h; ++j) {
          for (i = 0; i < w; ++i) {
              int v = src[i][j];
              if (i > 0)
                v -= ERR(i - 1, j) /2;
              if (j > 0)
                v -= ERR(i, j - 1) / 4;
              if (j > 0 && i < w - 1)
                v -= ERR(i + 1, j - 1) / 4;
              dst[i][j] = (v < 128) ? 0 : 255;
              src[i][j] = (v < 0) ? 0 : (v < 255) ? v : 255;
          }
      }
  }



(Figure)
The dependencies of src, after loop skewing. The array elements will be processed in the order gray, red, green, blue, yellow...

Performing the affine transformation 
 
 
 
  on the original dependency diagram gives us a new diagram, which is shown in the next image. We can then rewrite the code to loop on p and t instead of i and j, obtaining the following "skewed" routine.



 void dither_skewed(unsigned char **src, unsigned char **dst, int w, int h)  
  {
      int t, p;
      for (t = 0; t < (w + (2 * h)); ++t) {
          int pmin = max(t % 2, t - (2 * h) + 2);
          int pmax = min(t, w - 1);
          for (p = pmin; p <= pmax; p += 2) {
              int i = p;
              int j = (t - p) / 2;
              int v = src[i][j];
              if (i > 0)
                v -= ERR(i - 1, j) / 2;
              if (j > 0)
                v -= ERR(i, j - 1) / 4;
              if (j > 0 && i < w - 1)
                v -= ERR(i + 1, j - 1) / 4;
              dst[i][j] = (v < 128) ? 0 : 255;
              src[i][j] = (v < 0) ? 0 : (v < 255) ? v : 255;
          }
      }
  }



See also

Frameworks supporting the polyhedral model
Loop nest optimization
Loop unrolling
Loop reversal
Loop tiling

External links and references

"The basic polytope method", tutorial by Martin Griebl containing diagrams of the pseudocode example above
"Framework for polyhedral model"
"Code Generation in the Polytope Model" (1998). Martin Griebl, Christian Lengauer, and Sabine Wetzel
"The CLooG Polyhedral Code Generator"
"CodeGen+: Z-polyhedra scanning"

"
Category:Compiler optimizations Category:Articles with example pseudocode Category:Articles with example C code

