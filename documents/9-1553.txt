   Edmonds' algorithm      Edmonds' algorithm   In graph theory , a branch of mathematics, Edmonds' algorithm or Chu–Liu/Edmonds' algorithm is an algorithm for finding a spanning  arborescence of minimum weight (sometimes called an optimum branching ). It is the directed analog of the minimum spanning tree problem. The algorithm was proposed independently first by Yoeng-jin Chu and Tseng-hong Liu (1965) and then by Jack Edmonds (1967).  Algorithm  Description  The algorithm takes as input a directed graph    D  =   ⟨  V  ,  E  ⟩       D   V  E     D=\langle V,E\rangle   where   V   V   V   is the set of nodes and   E   E   E   is the set of directed edges, a distinguished vertex    r  ∈  V      r  V    r\in V   called the root , and a real-valued weight    w   (  e  )       w  e    w(e)   for each edge    e  ∈  E      e  E    e\in E   . It returns a spanning arborescence   A   A   A   rooted at   r   r   r   of minimum weight, where the weight of an arborescence is defined to be the sum of its edge weights,     w   (  A  )    =    ∑   e  ∈  A     w   (  e  )           w  A     subscript     e  A      w  e      w(A)=\sum_{e\in A}{w(e)}   .  The algorithm has a recursive description. Let    f   (  D  ,  r  ,  w  )       f   D  r  w     f(D,r,w)   denote the function which returns a spanning arborescence rooted at   r   r   r   of minimum weight. We first remove any edge from   E   E   E   whose destination is   r   r   r   . We may also replace any set of parallel edges (edges between the same pair of vertices in the same direction) by a single edge with weight equal to the minimum of the weights of these parallel edges.  Now, for each node   v   v   v   other than the root, find the edge incoming to   v   v   v   of lowest weight (with ties broken arbitrarily). Denote the source of this edge by    π   (  v  )       π  v    \pi(v)   . If the set of edges    P  =   {   (   π   (  v  )    ,  v  )   ∣   v  ∈   V  ∖   {  r  }     }       P   conditional-set     π  v   v     v    V   r        P=\{(\pi(v),v)\mid v\in V\setminus\{r\}\}   does not contain any cycles, then     f   (  D  ,  r  ,  w  )    =  P        f   D  r  w    P    f(D,r,w)=P   .  Otherwise,   P   P   P   contains at least one cycle. Arbitrarily choose one of these cycles and call it   C   C   C   . We now define a new weighted directed graph     D  ′   =   ⟨   V  ′   ,   E  ′   ⟩        superscript  D  normal-′     superscript  V  normal-′    superscript  E  normal-′      D^{\prime}=\langle V^{\prime},E^{\prime}\rangle   in which the cycle   C   C   C   is "contracted" into one node as follows:  The nodes of    V  ′     superscript  V  normal-′    V^{\prime}   are the nodes of   V   V   V   not in   C   C   C   plus a new node denoted    v  C     subscript  v  C    v_{C}   .  If    (  u  ,  v  )     u  v    (u,v)   is an edge in   E   E   E   with    u  ∉  C      u  C    u\notin C   and    v  ∈  C      v  C    v\in C   , then include in    E  ′     superscript  E  normal-′    E^{\prime}   a new edge    e  =   (  u  ,   v  C   )       e   u   subscript  v  C      e=(u,v_{C})   , and define      w  ′    (  e  )    =    w   (  u  ,  v  )    -   w   (   π   (  v  )    ,  v  )            superscript  w  normal-′   e       w   u  v      w     π  v   v       w^{\prime}(e)=w(u,v)-w(\pi(v),v)   .  If    (  u  ,  v  )     u  v    (u,v)   is an edge in   E   E   E   with    u  ∈  C      u  C    u\in C   and    v  ∉  C      v  C    v\notin C   , then include in    E  ′     superscript  E  normal-′    E^{\prime}   a new edge    e  =   (   v  C   ,  v  )       e    subscript  v  C   v     e=(v_{C},v)   , and define      w  ′    (  e  )    =   w   (  u  ,  v  )           superscript  w  normal-′   e     w   u  v      w^{\prime}(e)=w(u,v)   .  If    (  u  ,  v  )     u  v    (u,v)   is an edge in   E   E   E   with    u  ∉  C      u  C    u\notin C   and    v  ∉  C      v  C    v\notin C   , then include in    E  ′     superscript  E  normal-′    E^{\prime}   a new edge    e  =   (  u  ,  v  )       e   u  v     e=(u,v)   , and define      w  ′    (  e  )    =   w   (  u  ,  v  )           superscript  w  normal-′   e     w   u  v      w^{\prime}(e)=w(u,v)   .  For each edge in    E  ′     superscript  E  normal-′    E^{\prime}   , we remember which edge in   E   E   E   it corresponds to.  Now find a minimum spanning arborescence    A  ′     superscript  A  normal-′    A^{\prime}   of    D  ′     superscript  D  normal-′    D^{\prime}   using a call to    f   (   D  ′   ,  r  ,   w  ′   )       f    superscript  D  normal-′   r   superscript  w  normal-′      f(D^{\prime},r,w^{\prime})   . Since    A  ′     superscript  A  normal-′    A^{\prime}   is a spanning arborescence, each vertex has exactly one incoming edge. Let    (  u  ,   v  C   )     u   subscript  v  C     (u,v_{C})   be the unique incoming edge to    v  C     subscript  v  C    v_{C}   in    A  ′     superscript  A  normal-′    A^{\prime}   . This edge corresponds to an edge     (  u  ,  v  )   ∈  E       u  v   E    (u,v)\in E   with    v  ∈  C      v  C    v\in C   . Remove the edge    (   π   (  v  )    ,  v  )       π  v   v    (\pi(v),v)   from   C   C   C   , breaking the cycle. Mark each remaining edge in   C   C   C   . For each edge in    A  ′     superscript  A  normal-′    A^{\prime}   , mark its corresponding edge in   E   E   E   . Now we define    f   (  D  ,  r  ,  w  )       f   D  r  w     f(D,r,w)   to be the set of marked edges, which form a minimum spanning arborescence.  Observe that    f   (  D  ,  r  ,  w  )       f   D  r  w     f(D,r,w)   is defined in terms of    f   (   D  ′   ,  r  ,   w  ′   )       f    superscript  D  normal-′   r   superscript  w  normal-′      f(D^{\prime},r,w^{\prime})   , with    D  ′     superscript  D  normal-′    D^{\prime}   having strictly fewer vertices than   D   D   D   . Finding    f   (  D  ,  r  ,  w  )       f   D  r  w     f(D,r,w)   for a single-vertex graph is trivial (it is just   D   D   D   itself), so the recursive algorithm is guaranteed to terminate.  Running time  The running time of this algorithm is    O   (   E  V   )       O    E  V     O(EV)   . A faster implementation of the algorithm due to Robert Tarjan runs in time    O   (   E   log  V    )       O    E    V      O(E\log V)   for sparse graphs and    O   (   V  2   )       O   superscript  V  2     O(V^{2})   for dense graphs. This is as fast as Prim's algorithm for an undirected minimum spanning tree. In 1986, Gabow, Galil, Spencer, and Tarjan produced a faster implementation, with running time    O   (   E  +   V   log  V     )       O    E    V    V       O(E+V\log V)   .  References          External links   Edmonds's algorithm ( edmonds-alg ) – An open source implementation of Edmonds's algorithm written in C++ and licensed under the MIT License . This source is using Tarjan's implementation for the dense graph.   "  Category:Graph algorithms   