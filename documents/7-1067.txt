


Tridiagonal matrix algorithm




Tridiagonal matrix algorithm

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In numerical linear algebra, the tridiagonal matrix algorithm, also known as the Thomas algorithm (named after Llewellyn Thomas), is a simplified form of Gaussian elimination that can be used to solve tridiagonal systems of equations. A tridiagonal system for n unknowns may be written as


 
  where 
 
 
 
  and 
 
 
 
 .



For such systems, the solution can be obtained in 
 
 
 
  operations instead of 
 
 
 
  required by Gaussian elimination. A first sweep eliminates the 
 
 
 
 's, and then an (abbreviated) backward substitution produces the solution. Examples of such matrices commonly arise from the discretization of 1D Poisson equation (e.g., the 1D diffusion problem) and natural cubic spline interpolation; similar systems of matrices arise in tight binding physics or nearest neighbor effects models.
Thomas' algorithm is not stable in general, but is so in several special cases, such as when the matrix is diagonally dominant or symmetric positive definite;12 for a more precise characterization of stability of Thomas' algorithm, see Higham Theorem 9.12.3 If stability is required in the general case, Gaussian elimination with partial pivoting (GEPP) is recommended instead.4
Method
The forward sweep consists of modifying the coefficients as follows, denoting the new modified coefficients with primes:



and



The solution is then obtained by back substitution:






Algorithm (programmatic)
The following is an example of the implementation of this algorithm in the C programming language.
/*
 * tridiagonal: Thomas' algorithm implementation
 *Inputs: a,b,c are L,D,U vectors respectively
 *        d is coefficient vector; is overwritten with solution vector
 *        len is length of b et d
 *Outputs: Returns 0 (if you want to signal an error at some point, return something else)
 *         As above, d is overwritten with answer vector.
 *         a,b also modified.
 *Note: For simplicity's sake b is overwritten with successive denominators (see Method above);
 *      it isn't hard to change this if you so wish
 *Note 2: We don't check for diagonal dominance, etc.; 
 *        this is not guaranteed stable
 */
 int tridiagonal (double *c, double *b, double *a, double *d, int len)
 {
     int i;
     
    /*Forward sweep*/
     *a /= *b;
     for(i=1;i-1;i++) *backward="" -="(d[i-1]*a[i-1]);" =="" =b[i];="" a[i]="" b[i]="" b[len-1]="" b[len-1];="" d[i]="" d[len-1]="" for(i="len-2;i" sweep*="" {="" }="">=0;i--)
     {
         d[i] -= (d[i+1]*c[i]);
         d[i] /= b[i];
     }
     return 0;
     
 }
 -1;i++)>
 Derivation
The derivation of the tridiagonal matrix algorithm involves manually performing some specialized Gaussian elimination in a generic manner.
Suppose that the unknowns are 
 
 
 
 , and that the equations to be solved are:



Consider modifying the second (
 
 
 
 ) equation with the first equation as follows:



which would give:






and the effect is that 
 
 
 
  has been eliminated from the second equation. Using a similar tactic with the modified second equation on the third equation yields:






This time 
 
 
 
  was eliminated. If this procedure is repeated until the 
 
 
 
  row; the (modified) 
 
 
 
  equation will involve only one unknown, 
 
 
 
 . This may be solved for and then used to solve the 
 
 
 
  equation, and so on until all of the unknowns are solved for.
Clearly, the coefficients on the modified equations get more and more complicated if stated explicitly. By examining the procedure, the modified coefficients (notated with tildes) may instead be defined recursively:





















To further hasten the solution process, 
 
 
 
  may be divided out (if there's no division by zero risk), the newer modified coefficients notated with a prime will be:


















This gives the following system with the same unknowns and coefficients defined in terms of the original ones above:



The last equation involves only one unknown. Solving it in turn reduces the next last equation to one unknown, so that this backward substitution can be used to find all of the unknowns:






Variants
In some situations, particularly those involving periodic boundary conditions, a slightly perturbed form of the tridiagonal system may need to be solved:



In this case, we can make use of the Sherman-Morrison formula to avoid the additional operations of Gaussian elimination and still use the Thomas algorithm. The method requires solving a modified non-cyclic version of the system for both the input and a sparse corrective vector, and then combining the solutions. This can be done efficiently if both solutions are computed at once, as the forward portion of the pure tridiagonal matrix algorithm can be shared.
In other situations, the system of equations may be block tridiagonal (see block matrix), with smaller submatrices arranged as the individual elements in the above matrix system(e.g., the 2D Poisson problem). Simplified forms of Gaussian elimination have been developed for these situations.
The textbook Numerical Mathematics by Quarteroni, Sacco and Saleri, lists a modified version of the algorithm which avoids some of the divisions (using instead multiplications), which is beneficial on some computer architectures.
References





External links

Example with VBA code

"
Category:Numerical linear algebra









