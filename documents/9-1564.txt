   Richard J. Lipton      Richard J. Lipton   Richard Jay "Dick" Lipton (born September 6, 1946) is an American  computer scientist who has worked in computer science theory , cryptography , and DNA computing . Lipton is Associate Dean of Research, Professor, and the Frederick G. Storey Chair in Computing in the College of Computing at the Georgia Institute of Technology .  Career  In 1968, Lipton received his undergraduate degree in mathematics from Case Western Reserve University . In 1973, he received his Ph.D. from Carnegie Mellon University ; his dissertation, supervised by David Parnas , is entitled On Synchronization Primitive Systems . After graduating, Lipton taught at Yale 1973–1978, at Berkeley 1978–1980, and then at Princeton 1980–2000. Since 2000, Lipton has been at Georgia Tech . While at Princeton, Lipton worked in the field of DNA computing . Since 1996, Lipton has been the chief consulting scientist at Telcordia .  Karp–Lipton theorem  In 1980, along with Richard M. Karp , Lipton proved that if SAT can be solved by Boolean circuits with a polynomial number of logic gates , then the polynomial hierarchy collapses to its second level. __NOTOC__  Parallel algorithms  Showing that a program P has some property is a simple process if the actions inside the program are uninterruptible. However, when the action is interruptible, Lipton showed that through a type of reduction and analysis, it can be shown that the reduced program has that property if and only if the original program has the property. 1 If the reduction is done by treating interruptible operations as one large uninterruptible action, even with these relaxed conditions properties can be proven for a program P. Thus, correctness proofs of a parallel system can often be greatly simplified.  Database security  Lipton studied and created database security models on how and when to restrict the queries made by users of a database such that private or secret information will not be leaked. 2 Even when the user is restricted to only read operations on a database, secure information could be at risk. For example, querying a database of campaign donations could allow the user to discover the individual donations to political candidates or organizations. If given access to averages of data and unrestricted query access, a user could exploit the properties of those averages to gain illicit information. These queries are considered to have large "overlap" creating the insecurity. By bounding the "overlap" and number of queries, a secure database can be achieved.  Online scheduling  Richard Lipton with Andrew Tomkins introduced a randomized online interval scheduling algorithm , the 2-size version being strongly competitive, and the k -size version achieving O(log    △   1  +  ϵ      superscript  normal-△    1  ϵ     \vartriangle^{1+\epsilon}   ), as well as demonstrating a theoretical lower-bound of O(log   △   normal-△   \vartriangle   ). 3 This algorithm uses a private-coin for randomization and a "virtual" choice to fool a medium adversary .  Being presented with an event the user must decide whether or not to include the event in the schedule. The 2-size virtual algorithm is described by how it reacts to 1-interval or k -intervals being presented by the adversary:   For a 1-interval, flip a fair coin *;Heads: Take the interval  *;Tails: "Virtually" take the interval, but do no work. Take no short interval for the next 1 unit of time.    For a k -interval, take whenever possible.   Again, this 2-size algorithm is shown to be strongly- competitive . The generalized k -size algorithm which is similar to the 2-size algorithm is then shown to be O(log    △   1  +  ϵ      superscript  normal-△    1  ϵ     \vartriangle^{1+\epsilon}   )-competitive.  Program checking  Lipton showed that randomized testing can be provably useful, given the problem satisfied certain properties. 4 Proving correctness of a program is one of the most important problems presented in computer science. Typically in randomized testing, in order to attain a 1/1000 chance of an error, 1000 tests must be run. However Lipton shows that if a problem has "easy" sub-parts, repeated black-box testing can attain c r error rate, with c a constant less than 1 and r being the number of tests. Therefore, the probability of error goes to zero exponentially fast as r grows.  This technique is useful to check the correctness of many types of problems.   Signal processing: fast Fourier transform (FFT) and other highly parallelizable functions are difficult to manually check results when written in code such as FORTRAN , so a way to quickly check correctness is greatly desired.  Functions over finite fields and the permanent: Suppose that    f   (   x  1   ,  …  ,   x  n   )       f    subscript  x  1   normal-…   subscript  x  n      f(x_{1},\dots,x_{n})   is a polynomial over a finite field of size q with . Then ƒ is randomly testable of order  over the function basis that includes just addition. Perhaps the most important application from this is the ability to efficiently check the correctness of the permanent . Cosmetically similar to the determinant, the permanent is very difficult to check correctness, but even this type of problem satisfies the constraints. This result even led to the breakthroughs of interactive proof systems Karloff-Nisan and Shamir, including the result .   Games with simple strategies  In the area of game theory , more specifically on non-cooperative game , Lipton together with E.Markakis and A.Mehta proved 5 the existence of epsilon-equilibrium strategies with support logarithmic in the number of pure strategy . Furthermore, the payoff of such strategies can epsilon-approximate the payoffs of exact Nash equilibrium . The limited size (logarithmic) of support provides a natural quasi-polynomial algorithm of computing an epsilon-equilibrium .  Query size estimation  Lipton and J.Naughton presented an adaptive random sampling algorithm for database querying 6 7 which is applicable to any query for which answer to the query can be partitioned into disjoint subsets. Compared with most sampling estimation algorithms that statically determines the number of samples needed, the algorithm they proposed decides the number of samples based on the size of samples and tends to keep the running time constant rather than the number of samples.  Formal verification of programs  DeMillo , Lipton and Perlis 8 criticized the idea of formal verification of programs and argued that   Formal verifications in computer science will not play the same key role as proofs do in mathematics.  Absence of continuity, the inevitability of change, and the complexity of specification of real programs will make formal verification of programs difficult to justify and manage.   Multi-party protocols  Chandra, Furst and Lipton 9 generalized the notion of two-party communication protocols to multi-party communication protocols. They proposed a model in which a collection of processes (    P  0     subscript  P  0    P_{0}   ,     P  1   ,  …  ,   P   k  -  1        subscript  P  1   normal-…   subscript  P    k  1      P_{1},\dots,P_{k-1}   ) have access to a set of integers (    a  0     subscript  a  0    a_{0}   ,    a  1     subscript  a  1    a_{1}   ,…    a   k  -  1      subscript  a    k  1     a_{k-1}   ) except one of them, so that    P  i     subscript  P  i    P_{i}   is denied access to    a  i     subscript  a  i    a_{i}   . These processes are allowed to communicate in order to arrive at a consensus on a predicate. They studied this model’s communication complexity, defined as the number of bits broadcast among all the processes. As an example, they studied the complexity of a k -party protocol for Exactly-N (do all    a  i     subscript  a  i    a_{i}   ’s sum up to N?), and obtained a lower bound using the tiling method. They further applied this model to study general branching programs and obtained a time lower bound for constant-space branching programs that compute Exactly-N.  Time/space SAT tradeoff  We have no way to prove that Boolean satisfiability problem (often abbreviated as SAT), which is NP-complete , requires exponential (or at least super-polynomial) time (this is the famous P versus NP problem ), or linear (or at least super-logarithmic) space to solve. However, in the context of space-time tradeoff , one can prove that SAT cannot be computed if we apply constraints to both time and space. L. Fortnow, Lipton, D. van Melkebeek, and A. Viglas 10 proved that SAT cannot be computed by a Turing machine that takes at most O(    n  1.1     superscript  n  1.1    n^{1.1}   ) steps and at most O(    n  0.1     superscript  n  0.1    n^{0.1}   ) cells of its read-write tapes.  Awards and honors   Guggenheim Fellow , 1981  Fellow of the Association for Computing Machinery , 1997  member of the National Academy of Engineering  Knuth Prize winner, 2014 11   See also   SL (complexity)  Take-grant protection model  Planar separator theorem   Notes    External links   His Personal Blog "Gödel`s Lost Letter and P=NP"   "  Category:American computer scientists  Category:Fellows of the Association for Computing Machinery  Category:Guggenheim Fellows  Category:Living people  Category:Carnegie Mellon University alumni  Category:Georgia Institute of Technology faculty  Category:Theoretical computer scientists  Category:1946 births  Category:20th-century mathematicians  Category:21st-century mathematicians  Category:Members of the United States National Academy of Engineering     Lipton, R (1975) "Reduction: a method of proving properties of parallel programs" , Communications of the ACM 18(12) ↩  Lipton, R (1979) "Secure databases: protection against user influence" , "ACM Transactions on Database Systems" 4(1) ↩  ↩  Lipton, R (1991) "New Directions in Testing", "DIMACS Distributed Computing and Cryptography" Vol. 2 page: 191 ↩  Richard Lipton , Evangelos Markakis, Aranyak Mehta (2007) "Playing Games with Simple Strategies", "EC '03: Proceedings of the 4th ACM conference on Electronic commerce", "ACM" ↩  Richard J. Lipton, Jeffrey F. Naughton (1990) "Query Size Estimation By Adaptive Sampling", "PODS '90: Proceedings of the ninth ACM SIGACT-SIGMOD-SIGART symposium on Principles of database systems" ↩  Richard J. Lipton, Jeffrey F. Naughton, Donovan A. Schneider (1990) "SIGMOD '90: Proceedings of the 1990 ACM SIGMOD international conference on Management of data " ↩  Richard A. DeMillo, Richard J. Lipton, Alan J. Perlis (1979) “Social processes and proofs of theorems and programs”, "Communications of the ACM , Volume 22 Issue 5" ↩  A. K. Chandra, M. L. Furst, and R. J. Lipton (1983) "Multi-Party Protocols", "In STOC, pages 94–99. ACM, 25–2" ↩  L. Fortnow, R. Lipton, D. van Melkebeek, and A. Viglas (2005) "Time-space lower bounds for satisfiability", "J. ACM, 52:835–865, 2005. Prelim version CCC ’2000" ↩  ↩     