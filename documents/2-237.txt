


RC5




RC5

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In cryptography, RC5 is a symmetric-key block cipher notable for its simplicity. Designed by Ronald Rivest in 1994,1 RC stands for "Rivest Cipher", or alternatively, "Ron's Code" (compare RC2 and RC4). The Advanced Encryption Standard (AES) candidate RC6 was based on RC5.
Description
Unlike many schemes, RC5 has a variable block size (32, 64 or 128 bits), key size (0 to 2040 bits) and number of rounds (0 to 255). The original suggested choice of parameters were a block size of 64 bits, a 128-bit key and 12 rounds.
A key feature of RC5 is the use of data-dependent rotations; one of the goals of RC5 was to prompt the study and evaluation of such operations as a cryptographic primitive. RC5 also consists of a number of modular additions and eXclusive OR (XOR)s. The general structure of the algorithm is a Feistel-like network. The encryption and decryption routines can be specified in a few lines of code. The key schedule, however, is more complex, expanding the key using an essentially one-way function with the binary expansions of both e and the golden ratio as sources of "nothing up my sleeve numbers". The tantalising simplicity of the algorithm together with the novelty of the data-dependent rotations has made RC5 an attractive object of study for cryptanalysts. The RC5 is basically denoted as RC5-w/r/b where w=word size in bits, r=number of rounds, b=number of 8-bit byte in the key.
Algorithm
RC5 encryption and decryption both expand the random key into 2(r+1) words that will be used sequentially (and only once each) during the encryption and decryption processes. All of the below comes from Rivest's revised paper on RC5.2
Key Expansion
The key expansion algorithm is illustrated below, first in pseudocode, then example C code copied directly from the reference paper's appendix.
Following the naming scheme of the paper, the following variable names are used:

b - The length of the key in bytes.
K - The key, considered as an array of bytes (using 0-based indexing).
w - The length of a word in bits. Typical values of this in RC5 are 16, 32, and 64. Note that a "block" is two words long.
u - The length of a word in bytes.
r - The number of rounds to use when encrypting data.
S - The expanded list of words derived from the key, of length 2(r+1), with each element being a word.
L - A convenience to encapsulate K as an array of word-sized values rather than byte-sized.
Pw - The first magic constant, defined as 
 
 
 
 , where Odd is the nearest odd integer (rounded up) for the given input, where e is the base of the natural logarithm, and w is defined above. For common values of w, the associated values of Pw are given here in hexadecimal:
 
For w = 16: 0xB7E1
For w = 32: 0xB7E15163
For w = 64: 0xB7E151628AED2A6D

Qw - The second magic constant, defined as 
 
 
 
 , where Odd is the nearest odd integer (rounded up) for the given input, where 
 
 
 
  is the golden ratio, and w is defined above. For common values of w, the associated values of Qw are given here in hexadecimal:
 
For w = 16: 0x9E37
For w = 32: 0x9E3779B9
For w = 64: 0x9E3779B97F4A7C15


# Break K into words
 # u = w / 8
 c = ceiling( max(b, 1) / u )
 # L is initially a c-length list of 0-valued w-length words
 for i = b-1 down to 0 do:
     L[i/u] = (L[i/u] << 8) + K[i]
      
 # Initialize key-independent pseudorandom S array
 # S is initially a t=2(r+1) length list of undefined w-length words
 S[0] = P_w
 for i = 1 to t-1 do:
     S[i] = S[i-1] + Q_w
     
 i = j = 0
 A = B = 0
 do 3 * max(t, c) times:
     A = S[i] = (S[i] + A + B) <<< 3
     B = L[j] = (L[j] + A + B) <<< (A + B)
     i = (i + 1) % t
     j = (j + 1) % c
 
 # return S
The example source code is provided from the appendix of Rivest's paper on RC5. The implementation is designed to work with w = 32, r = 12, and b = 16.
void RC5_SETUP(unsigned char *K)
 {
    // w = 32, r = 12, b = 16
    // c = max(1, ceil(8 * b/w))
    // t = 2 * (r+1)
    WORD i, j, k, u = w/8, A, B, L[c];
    
    for(i = b-1, L[c-1] = 0; i != -1; i--)
       L[i/u] = (L[i/u] << 8) + K[i];
    
    for(S[0] = P, i = 1; i < t; i++)
       S[i] = S[i-1] + Q;
    
    for(A = B = i = j = k = 0; k < 3 * t; k++, i = (i+1) % t, j = (j+1) % c)
    {
       A = S[i] = ROTL(S[i] + (A + B), 3);
       B = L[j] = ROTL(L[j] + (A + B), (A + B));
    }
 }
Encryption
Encryption involved several rounds of a simple function. 12 or 20 rounds seem to be recommended, depending on security needs and time considerations. Beyond the variables used above, the following variables are used in this algorithm:

A, B - The two words composing the block of plaintext to be encrypted.

A = A + S[0]
 B = B + S[1]
 for i = 1 to r do:
     A = ((A ^ B) <<< B) + S[2 * i]
     B = ((B ^ A) <<< A) + S[2 * i + 1]
 
 # The ciphertext block consists of the two-word wide block composed of A and B, in that order.
 return A, B
The example C code given by Rivest is this.
void RC5_ENCRYPT(WORD *pt, WORD *ct)
 {
    WORD i, A = pt[0] + S[0], B = pt[1] + S[1];
    
    for(i = 1; i <= r; i++)
    {
       A = ROTL(A ^ B, B) + S[2*i];
       B = ROTL(B ^ A, A) + S[2*i + 1];
    }
    ct[0] = A; ct[1] = B;
 }
Decryption
Decryption is a fairly straight-forward reversal of the encryption process. The below pseudocode shows the process.
for i = r down to 1 do:
     B = ((B - S[2 * i + 1]) >>> A) ^ A
     A = ((A - S[2 * i]) >>> B) ^ B
 B = B - S[1]
 A = A - S[0]
 
 return A, B
The example C code given by Rivest is this.
void RC5_DECRYPT(WORD *ct, WORD *pt)
 {
    WORD i, B=ct[1], A=ct[0];
    
    for(i = r; i > 0; i--)
    {
       B = ROTR(B - S[2*i + 1], A) ^ A;
       A = ROTR(A - S[2*i], B) ^ B;
    }
    
    pt[1] = B - S[1]; pt[0] = A - S[0];
 }
Cryptanalysis
12-round RC5 (with 64-bit blocks) is susceptible to a differential attack using 244 chosen plaintexts.3 18–20 rounds are suggested as sufficient protection.
RSA Security, which has a patent on the algorithm,4 offered a series of US$10,000 prizes for breaking ciphertexts encrypted with RC5, but these contests have been discontinued as of May 2007. A number of these challenge problems have been tackled using distributed computing, organised by Distributed.net. Distributed.net has brute-forced RC5 messages encrypted with 56-bit and 64-bit keys, and is working on cracking a 72-bit key; as of February 2014, 3.490% of the keyspace has been searched. At the current rate, it will take approximately 218 years to test every possible remaining key, and thus guarantee completion of the project.5 The task has inspired many new and novel developments in the field of cluster computing.6
See also

Madryga
Red Pike

References
External links

Rivests's revised paper describing the cipher
Rivest's original paper
SCAN's entry for the cipher
RSA Laboratories FAQ — What are RC5 and RC6?
Helger Lipmaa's links on RC5

"
Category:Broken block ciphers




http://people.csail.mit.edu/rivest/Rivest-rc5rev.pdf
Biryukov A. and Kushilevitz E. (1998). Improved Cryptanalysis of RC5. EUROCRYPT 1998.
Rivest, R. L, "Block Encryption Algorithm With Data Dependent Rotation", , issued on 3 March 1998.
1
2



