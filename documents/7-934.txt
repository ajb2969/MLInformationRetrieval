   XTR      XTR   In cryptography , XTR is an algorithm for public-key encryption . XTR stands for ‘ECSTR’, which is an abbreviation for Efficient and Compact Subgroup Trace Representation. It is a method to represent elements of a subgroup of a multiplicative group of a finite field . To do so, it uses the trace over    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   to represent elements of a subgroup of    G  F    (   p  6   )   *       G  F   superscript   superscript  p  6       GF(p^{6})^{*}   .  From a security point of view, XTR relies on the difficulty of solving Discrete Logarithm related problems in the full multiplicative group of a finite field. Unlike many cryptographic protocols that are based on the generator of the full multiplicative group of a finite field, XTR uses the generator   g   g   g   of a relatively small subgroup of some prime order   q   q   q   of a subgroup of    G  F    (   p  6   )   *       G  F   superscript   superscript  p  6       GF(p^{6})^{*}   . With the right choice of   q   q   q   , computing Discrete Logarithms in the group, generated by   g   g   g   , is, in general, as hard as it is in    G  F    (   p  6   )   *       G  F   superscript   superscript  p  6       GF(p^{6})^{*}   and thus cryptographic applications of XTR use    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   arithmetics while achieving full    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   security leading to substantial savings both in communication and computational overhead without compromising security. Some other advantages of XTR are its fast key generation, small key sizes and speed.  Fundamentals of XTR  XTR uses a subgroup , commonly referred to as XTR subgroup or just XTR group , of a subgroup called XTR supergroup , of the multiplicative group of a finite field     G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   with    p  6     superscript  p  6    p^{6}   elements. The XTR supergroup is of order      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   , where p is a prime such that a sufficiently large prime q divides      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   . The XTR subgroup has now order q and is, as a subgroup of    G  F    (   p  6   )   *       G  F   superscript   superscript  p  6       GF(p^{6})^{*}   , a cyclic group     ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   with generator  g . The following three paragraphs will describe how elements of the XTR supergroup can be represented using an element of    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   instead of an element of    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   and how arithmetic operations take place in    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   instead of in    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   .  Arithmetic operations in    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})     Let p be a prime such that p  2 mod 3 and p 2 - p + 1 has a sufficiently large prime factor q . Since p 2  1 mod 3 we see that p generates     (    ℤ  /  3   ℤ   )   *     superscript      ℤ  3   ℤ      (\mathbb{Z}/3\mathbb{Z})^{*}   and thus the third cyclotomic polynomial       Φ  3    (  x  )    =    x  2   +  x  +  1          subscript  normal-Φ  3   x      superscript  x  2   x  1     \Phi_{3}(x)=x^{2}+x+1   is irreducible over    G  F   (  p  )       G  F  p    GF(p)   . It follows that the roots    α   α   \alpha   and    α  p     superscript  α  p    \alpha^{p}   form an optimal normal basis for    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   over    G  F   (  p  )       G  F  p    GF(p)   and        G  F   (   p  2   )    ≅   {     x  1   α   +    x  2    α  p     :     x  1   ,   x  2    ∈   G  F   (  p  )     }    .        G  F   superscript  p  2     conditional-set       subscript  x  1   α      subscript  x  2    superscript  α  p         subscript  x  1    subscript  x  2      G  F  p       GF(p^{2})\cong\{x_{1}\alpha+x_{2}\alpha^{p}:x_{1},x_{2}\in GF(p)\}.   Considering that p  2 mod 3 we can reduce the exponents modulo 3 to get        G  F   (   p  2   )    ≅   {     y  1   α   +    y  2    α  2     :      α  2   +  α  +  1   =   0  ,   y  1     ,    y  2   ∈   G  F   (  p  )      }    .        G  F   superscript  p  2     conditional-set       subscript  y  1   α      subscript  y  2    superscript  α  2      formulae-sequence       superscript  α  2   α  1    0   subscript  y  1        subscript  y  2     G  F  p        GF(p^{2})\cong\{y_{1}\alpha+y_{2}\alpha^{2}:\alpha^{2}+\alpha+1=0,y_{1},y_{2}%
 \in GF(p)\}.     The cost of arithmetic operations is now given in the following Lemma labeled Lemma 2.21 in "An overview of the XTR public key system" : 1  Lemma   Computing x p is done without using multiplication  Computing x 2 takes two multiplications in    G  F   (  p  )       G  F  p    GF(p)     Computing xy takes three multiplications in    G  F   (  p  )       G  F  p    GF(p)     Computing xz-yz p takes four multiplications in    G  F   (  p  )       G  F  p    GF(p)   .   Traces over    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})     The trace in XTR is always considered over    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   . In other words, the conjugates of    h  ∈   G  F   (   p  6   )        h    G  F   superscript  p  6      h\in GF(p^{6})   over    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   are    h  ,   h   p  2       h   superscript  h   superscript  p  2      h,h^{p^{2}}   and    h   p  4      superscript  h   superscript  p  4     h^{p^{4}}   and the trace of   h   h   h   is their sum:        T  r   (  h  )    =   h  +   h   p  2    +   h   p  4      .        T  r  h     h   superscript  h   superscript  p  2     superscript  h   superscript  p  4       Tr(h)=h+h^{p^{2}}+h^{p^{4}}.   Note that     T  r   (  h  )    ∈   G  F   (   p  2   )          T  r  h     G  F   superscript  p  2      Tr(h)\in GF(p^{2})   since      T  r    (  h  )    p  2        T  r   superscript  h   superscript  p  2      \displaystyle Tr(h)^{p^{2}}     Consider now the generator   g   g   g   of the XTR subgroup of a prime order   q   q   q   . Remember that    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   is a subgroup of the XTR supergroup of order      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   , so    q  ∣   p  2   -  p  +  1     fragments  q  normal-∣   superscript  p  2    p   1    q\mid p^{2}-p+1   . In the following section we will see how to choose   p   p   p   and   q   q   q   , but for now it is sufficient to assume that    q  >  3      q  3    q>3   . To compute the trace of   g   g   g   note that modulo      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   we have       p  2   =   p  -  1        superscript  p  2     p  1     p^{2}=p-1   and       p  4   =    (   p  -  1   )   2   =     p  2   -   2  p    +  1   =   -  p          superscript  p  4    superscript    p  1   2             superscript  p  2     2  p    1          p      p^{4}=(p-1)^{2}=p^{2}-2p+1=-p   and thus      T  r   (  g  )       T  r  g    \displaystyle Tr(g)   Note also that the product of the conjugates of   g   g   g   equals   1   1   1   , i.e., that   g   g   g   has norm 1.  The crucial observation in XTR is that the minimal polynomial of   g   g   g   over    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})          (   x  -  g   )    (   x  -   g   p  -  1     )    (   x  -   g   -  p     )         x  g     x   superscript  g    p  1       x   superscript  g    p       (x-g)\!\ (x-g^{p-1})(x-g^{-p})   simplifies to         x  3   -   T  r   (  g  )    x  2     +   T  r    (  g  )   p   x    -  1           superscript  x  3     T  r  g   superscript  x  2       T  r   superscript  g  p   x    1    x^{3}-Tr(g)\!\ x^{2}+Tr(g)^{p}x-1   which is fully determined by    T  r   (  g  )       T  r  g    Tr(g)   . Consequently, conjugates of   g   g   g   , as roots of the minimal polynomial of   g   g   g   over    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   , are completely determined by the trace of   g   g   g   . The same is true for any power of   g   g   g   : conjugates of    g  n     superscript  g  n    g^{n}   are roots of polynomial         x  3   -   T  r   (   g  n   )    x  2     +   T  r    (   g  n   )   p   x    -  1           superscript  x  3     T  r   superscript  g  n    superscript  x  2       T  r   superscript   superscript  g  n   p   x    1    x^{3}-Tr(g^{n})\!\ x^{2}+Tr(g^{n})^{p}x-1   and this polynomial is completely determined by    T  r   (   g  n   )       T  r   superscript  g  n     Tr(g^{n})   .  The idea behind using traces is to replace     g  n   ∈   G  F   (   p  6   )         superscript  g  n     G  F   superscript  p  6      g^{n}\in GF(p^{6})   in cryptographic protocols, e.g. the Diffie-Hellman key exchange by     T  r   (   g  n   )    ∈   G  F   (   p  2   )          T  r   superscript  g  n      G  F   superscript  p  2      Tr(g^{n})\in GF(p^{2})   and thus obtaining a factor of 3 reduction in representation size. This is, however, only useful if there is a quick way to obtain    T  r   (   g  n   )       T  r   superscript  g  n     Tr(g^{n})   given    T  r   (  g  )       T  r  g    Tr(g)   . The next paragraph gives an algorithm for the efficient computation of    T  r   (   g  n   )       T  r   superscript  g  n     Tr(g^{n})   . In addition, computing    T  r   (   g  n   )       T  r   superscript  g  n     Tr(g^{n})   given    T  r   (  g  )       T  r  g    Tr(g)   turns out to be quicker than computing    g  n     superscript  g  n    g^{n}   given   g   g   g   . 2  Algorithm for the quick computation of    T  r   (   g  n   )       T  r   superscript  g  n     Tr(g^{n})   given    T  r   (  g  )       T  r  g    Tr(g)     A. Lenstra and E. Verheul give this algorithm in their paper titled The XTR public key system in. 3 All the definitions and lemmas necessary for the algorithm and the algorithm itself presented here, are taken from that paper.  Definition For c in    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   define        F   (  c  ,  X  )    =      X  3   -   c   X  2     +    c  p   X    -  1   ∈   G  F   (   p  2   )    [  X  ]     .          F   c  X           superscript  X  3     c   superscript  X  2        superscript  c  p   X    1          G  F   superscript  p  2    delimited-[]  X       F(c,X)=X^{3}-cX^{2}+c^{p}X-1\in GF(p^{2})[X].     Definition Let     h  0   ,   h  1   ,   h  2       subscript  h  0    subscript  h  1    subscript  h  2     h_{0},\!\ h_{1},h_{2}   denote the, not necessarily distinct, roots of    F   (  c  ,  X  )       F   c  X     F(c,X)   in    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   and let   n   n   n   be in   ℤ   ℤ   \mathbb{Z}   . Define        c  n   =    h  0  n   +   h  1  n   +   h  2  n     .       subscript  c  n      superscript   subscript  h  0   n    superscript   subscript  h  1   n    superscript   subscript  h  2   n      c_{n}=h_{0}^{n}+h_{1}^{n}+h_{2}^{n}.     Properties of    c  n     subscript  c  n    c_{n}   and    F   (  c  ,  X  )       F   c  X     F(c,X)          c  =   c  1       c   subscript  c  1     c=c_{1}          c   -  n    =   c   n  p    =   c  n  p          subscript  c    n     subscript  c    n  p          superscript   subscript  c  n   p      c_{-n}=c_{np}=c_{n}^{p}          c  n   ∈   G  F   (   p  2   )   for  n   ∈  ℤ         subscript  c  n     G  F   superscript  p  2   for  n        ℤ     c_{n}\in GF(p^{2})\text{ for }n\in\mathbb{Z}           c   u  +  v    =      c  u    c  v    -    c  v  p    c   u  -  v      +    c   u  -   2  v     for  u     ,   v  ∈  ℤ      formulae-sequence     subscript  c    u  v           subscript  c  u    subscript  c  v       superscript   subscript  c  v   p    subscript  c    u  v         subscript  c    u    2  v     for  u       v  ℤ     c_{u+v}=c_{u}c_{v}-c_{v}^{p}c_{u-v}+c_{u-2v}\text{ for }u,v\in\mathbb{Z}     Either all    h  j     subscript  h  j    h_{j}   have order dividing      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   and     >  3      absent  3    >3   or all    h  j     subscript  h  j    h_{j}   are in    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   . In particular,    F   (  c  ,  X  )       F   c  X     F(c,X)   is irreducible if and only if its roots have order diving      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   and     >  3      absent  3    >3   .      F   (  c  ,  X  )       F   c  X     F(c,X)   is reducible over    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   if and only if     c   p  +  1    ∈   G  F   (  p  )         subscript  c    p  1      G  F  p     c_{p+1}\in GF(p)      Lemma Let    c  ,   c   n  -  1    ,   c  n   ,   c   n  +  1       c   subscript  c    n  1     subscript  c  n    subscript  c    n  1      c,\!\ c_{n-1},c_{n},c_{n+1}   be given.   Computing     c   2  n    =    c  n  2   -   2   c  n  p          subscript  c    2  n       superscript   subscript  c  n   2     2   superscript   subscript  c  n   p       c_{2n}=c_{n}^{2}-2c_{n}^{p}   takes two multiplication in    G  F   (  p  )       G  F  p    GF(p)   .  Computing     c   n  +  2    =      c   n  +  1    ⋅  c   -    c  p   ⋅   c  n     +   c   n  -  1          subscript  c    n  2         normal-⋅   subscript  c    n  1    c    normal-⋅   superscript  c  p    subscript  c  n      subscript  c    n  1       c_{n+2}=c_{n+1}\cdot c-c^{p}\cdot c_{n}+c_{n-1}   takes four multiplication in    G  F   (  p  )       G  F  p    GF(p)   .  Computing     c    2  n   -  1    =      c   n  -  1    ⋅   c  n    -    c  p   ⋅   c  n  p     +   c   n  +  1   p         subscript  c      2  n   1         normal-⋅   subscript  c    n  1     subscript  c  n     normal-⋅   superscript  c  p    superscript   subscript  c  n   p      superscript   subscript  c    n  1    p      c_{2n-1}=c_{n-1}\cdot c_{n}-c^{p}\cdot c_{n}^{p}+c_{n+1}^{p}   takes four multiplication in    G  F   (  p  )       G  F  p    GF(p)   .  Computing     c    2  n   +  1    =      c   n  +  1    ⋅   c  n    -   c  ⋅   c  n  p     +   c   n  -  1   p         subscript  c      2  n   1         normal-⋅   subscript  c    n  1     subscript  c  n     normal-⋅  c   superscript   subscript  c  n   p      superscript   subscript  c    n  1    p      c_{2n+1}=c_{n+1}\cdot c_{n}-c\cdot c_{n}^{p}+c_{n-1}^{p}   takes four multiplication in    G  F   (  p  )       G  F  p    GF(p)   .   Definition Let      S  n    (  c  )    =   (   c   n  -  1    ,   c  n   ,   c   n  +  1    )   ∈   G  F    (   p  2   )   3             subscript  S  n   c     subscript  c    n  1     subscript  c  n    subscript  c    n  1            G  F   superscript   superscript  p  2   3       S_{n}(c)=(c_{n-1},c_{n},c_{n+1})\in GF(p^{2})^{3}   .  Algorithm 1 for computation of     S  n    (  c  )        subscript  S  n   c    S_{n}(c)   given   n   n   n   and   c   c   c      If    n  <  0      n  0    n<0   apply this algorithm to    -  n      n    -n   and   c   c   c   , and apply Property 2 to the resulting value.  If    n  =  0      n  0    n=0   , then      S  0    (  c  )    =   (   c  p   ,  3  ,  c  )          subscript  S  0   c     superscript  c  p   3  c     S_{0}(c)\!\ =(c^{p},3,c)   .  If    n  =  1      n  1    n=1   , then      S  1    (  c  )    =   (  3  ,  c  ,    c  2   -   2   c  p     )          subscript  S  1   c    3  c     superscript  c  2     2   superscript  c  p        S_{1}(c)\!\ =(3,c,c^{2}-2c^{p})   .  If    n  =  2      n  2    n=2   , use the computation of     c   n  +  2    =      c   n  +  1    ⋅  c   -    c  p   ⋅   c  n     +   c   n  -  1          subscript  c    n  2         normal-⋅   subscript  c    n  1    c    normal-⋅   superscript  c  p    subscript  c  n      subscript  c    n  1       c_{n+2}=c_{n+1}\cdot c-c^{p}\cdot c_{n}+c_{n-1}   and     S  1    (  c  )        subscript  S  1   c    S_{1}(c)   to find    c  3     subscript  c  3    c_{3}   and thereby     S  2    (  c  )        subscript  S  2   c    S_{2}(c)   .  If    n  >  2      n  2    n>2   , to compute     S  n    (  c  )        subscript  S  n   c    S_{n}(c)   define            S  ¯   i    (  c  )    =    S    2  i   +  1     (  c  )           subscript   normal-¯  S   i   c      subscript  S      2  i   1    c     \bar{S}_{i}(c)=S_{2i+1}(c)        and     m  ¯   =  n       normal-¯  m   n    \bar{m}=n   if n is odd and     m  ¯   =   n  -  1        normal-¯  m     n  1     \bar{m}=n-1   otherwise. Let      m  ¯   =    2  m   +  1    ,   k  =  1      formulae-sequence     normal-¯  m       2  m   1      k  1     \bar{m}=2m+1,k=1   and compute       S  ¯   k    (  c  )    =    S  3    (  c  )           subscript   normal-¯  S   k   c      subscript  S  3   c     \bar{S}_{k}(c)=S_{3}(c)   using the Lemma above and     S  2    (  c  )        subscript  S  2   c    S_{2}(c)   . Let further     m  =    ∑   j  =  0   r     m  j    2  j         m    superscript   subscript     j  0    r      subscript  m  j    superscript  2  j       m=\sum_{j=0}^{r}m_{j}2^{j}      with     m  j   ∈   0  ,  1        subscript  m  j    0  1     m_{j}\in{0,1}   and     m  r   =  1       subscript  m  r   1    m_{r}=1   . For    j  =    r  -  1   ,   r  -  2   ,  …  ,  0       j     r  1     r  2   normal-…  0     j=r-1,r-2,...,0   in succession, do the following:  If     m  j   =  0       subscript  m  j   0    m_{j}=0   , use      S  ¯   k    (  c  )        subscript   normal-¯  S   k   c    \bar{S}_{k}(c)   to compute      S  ¯    2  k     (  c  )        subscript   normal-¯  S     2  k    c    \bar{S}_{2k}(c)   .  If     m  j   =  1       subscript  m  j   1    m_{j}=1   , use      S  ¯   k    (  c  )        subscript   normal-¯  S   k   c    \bar{S}_{k}(c)   to compute      S  ¯     2  k   +  1     (  c  )        subscript   normal-¯  S       2  k   1    c    \bar{S}_{2k+1}(c)   .  Replace   k   k   k   by     2  k   +   m  j         2  k    subscript  m  j     2k+m_{j}   .       When these iterations finish,    k  =  m      k  m    k=m   and      S   m  ¯     (  c  )    =     S  ¯   m    (  c  )           subscript  S   normal-¯  m    c      subscript   normal-¯  S   m   c     S_{\bar{m}}(c)=\bar{S}_{m}(c)   . If n is even use     S   m  ¯     (  c  )        subscript  S   normal-¯  m    c    S_{\bar{m}}(c)   to compute      S  ¯    m  +  1     (  c  )        subscript   normal-¯  S     m  1    c    \bar{S}_{m+1}(c)   .  Parameter selection  Finite field and subgroup size selection  In order to take advantage of the above described representations of elements with their traces and furthermore ensure sufficient security, that will be discussed below , we need to find primes   p   p   p   and   q   q   q   , where   p   p   p   denotes the characteristic of the field    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   with    p  ≡    2   mod  3       p    2  mod  3     p\equiv 2\ \text{mod}\ 3   and   q   q   q   is the size of the subgroup, such that   q   q   q   divides      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   .  We denote with   P   P   P   and   Q   Q   Q   the sizes of   p   p   p   and   q   q   q   in bits. To achieve security comparable to 1024-bit RSA , we should choose    6  P      6  P    6P   about 1024, i.e.    P  ≈  170      P  170    P\approx 170   and   Q   Q   Q   can be around 160.  A first easy algorithm to compute such primes   p   p   p   and   q   q   q   is the next Algorithm A:  Algorithm A   Find    r  ∈  ℤ      r  ℤ    r\in\mathbb{Z}   such that    q  =     r  2   -  r   +  1       q       superscript  r  2   r   1     q=r^{2}-r+1   is a   Q   Q   Q   -bit prime.  Find    k  ∈  ℤ      k  ℤ    k\in\mathbb{Z}   such that    p  =   r  +   k  ⋅  q        p    r   normal-⋅  k  q      p=r+k\cdot q   is a   P   P   P   -bit prime with    p  ≡    2   mod  3       p    2  mod  3     p\equiv 2\ \text{mod}\ 3   .    Correctness of Algorithm A:     It remains to check that    q  ∣   p  2   -  p  +  1     fragments  q  normal-∣   superscript  p  2    p   1    q\mid p^{2}-p+1   because all the other necessary properties are obviously satisfied per definition of   p   p   p   and   q   q   q   . We easily see that       p  2   -  p   +  1   =      r  2   +   2  r  k  q   +    k  2    q  2     -  r  -   k  q    +  1   =     r  2   -  r   +  1  +   q   (     2  r  k   +    k  2   q    -  k   )     =   q   (    1  +   2  r  k   +    k  2   q    -  k   )               superscript  p  2   p   1          superscript  r  2     2  r  k  q      superscript  k  2    superscript  q  2     r    k  q    1             superscript  r  2   r   1    q        2  r  k      superscript  k  2   q    k            q      1    2  r  k      superscript  k  2   q    k       p^{2}-p+1=r^{2}+2rkq+k^{2}q^{2}-r-kq+1=r^{2}-r+1+q(2rk+k^{2}q-k)=q(1+2rk+k^{2}%
 q-k)   which implies that    q  ∣   p  2   -  p  +  1     fragments  q  normal-∣   superscript  p  2    p   1    q\mid p^{2}-p+1   .   Algorithm A is very fast and can be used to find primes   p   p   p   that satisfy a degree-two polynomial with small coefficients. Such   p   p   p   lead to fast arithmetic operations in    G  F   (  p  )       G  F  p    GF(p)   . In particular if the search for   k   k   k   is restricted to    k  =  1      k  1    k=1   , which means looking for an   r   r   r   such that both      r  2   -  r   +   1  and   r  2    +  1         superscript  r  2   r     1  and   superscript  r  2    1    r^{2}-r+1\text{ and }r^{2}+1   are prime and such that      r  2   +  1   ≡   2  mod  3          superscript  r  2   1     2  mod  3     r^{2}+1\equiv 2\text{ mod }3   , the primes   p   p   p   have this nice form. Note that in this case   r   r   r   must be even and    r  ≡   1  mod  4       r    1  mod  4     r\equiv 1\text{ mod }4   .  On the other hand such   p   p   p   may be undesirable from a security point of view because they may make an attack with the Discrete Logarithm variant of the Number Field Sieve easier.  The following Algorithm B doesn't have this disadvantage, but it also doesn't have the fast arithmetic modulo   p   p   p   Algorithm A has in that case.  Algorithm B   Select a   Q   Q   Q   -bit prime   q   q   q   so that    q  ≡    7   mod  12       q    7  mod  12     q\equiv 7\ \text{mod}\ 12   .  Find the roots    r  1     subscript  r  1    r_{1}   and    r  2     subscript  r  2    r_{2}   of      X  2   -  X   +    1    mod   q          superscript  X  2   X     1  mod  q     X^{2}-X+1\ \text{mod}\ q   .  Find a    k  ∈  ℤ      k  ℤ    k\in\mathbb{Z}   such that    p  =    r  i   +   k  ⋅  q        p     subscript  r  i    normal-⋅  k  q      p=r_{i}+k\cdot q   is a   P   P   P   -bit prime with    p  ≡    2   mod  3       p    2  mod  3     p\equiv 2\ \text{mod}\ 3   for    i  ∈   {  1  ,  2  }       i   1  2     i\in\{1,2\}       Correctness of Algorithm B:   Since we chose    q  ≡    7   mod  12       q    7  mod  12     q\equiv 7\ \text{mod}\ 12   it follows immediately that    q  ≡    1   mod  3       q    1  mod  3     q\equiv 1\ \text{mod}\ 3   (because    7  ≡    1   mod  3       7    1  mod  3     7\equiv 1\ \text{mod}\ 3   and    3  ∣  12     fragments  3  normal-∣  12    3\mid 12   ). From that and quadratic reciprocity we can deduce that    r  1     subscript  r  1    r_{1}   and    r  2     subscript  r  2    r_{2}   exist.  To check that    q  ∣   p  2   -  p  +  1     fragments  q  normal-∣   superscript  p  2    p   1    q\mid p^{2}-p+1   we consider again      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   for     r  i   ∈   {  1  ,  2  }        subscript  r  i    1  2     r_{i}\in\{1,2\}   and get that       p  2   -  p   +  1   =      r  i  2   +   2   r  i   k  q   +    k  2    q  2     -   r  i   -   k  q    +  1   =     r  i  2   -   r  i    +  1  +   q   (     2  r  k   +    k  2   q    -  k   )     =   q   (     2  r  k   +    k  2   q    -  k   )               superscript  p  2   p   1          superscript   subscript  r  i   2     2   subscript  r  i   k  q      superscript  k  2    superscript  q  2      subscript  r  i     k  q    1             superscript   subscript  r  i   2    subscript  r  i    1    q        2  r  k      superscript  k  2   q    k            q        2  r  k      superscript  k  2   q    k       p^{2}-p+1=r_{i}^{2}+2r_{i}kq+k^{2}q^{2}-r_{i}-kq+1=r_{i}^{2}-r_{i}+1+q(2rk+k^{%
 2}q-k)=q(2rk+k^{2}q-k)   , since    r  1     subscript  r  1    r_{1}   and    r  2     subscript  r  2    r_{2}   are roots of      X  2   -  X   +  1         superscript  X  2   X   1    X^{2}-X+1   and hence    q  ∣   p  2   -  p  +  1     fragments  q  normal-∣   superscript  p  2    p   1    q\mid p^{2}-p+1   .   Subgroup selection  In the last paragraph we have chosen the sizes   p   p   p   and   q   q   q   of the finite field    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   and the multiplicative subgroup of    G  F    (   p  6   )   *       G  F   superscript   superscript  p  6       GF(p^{6})^{*}   , now we have to find a subgroup    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   of    G   F     (   p  6   )   *       G  F   superscript   superscript  p  6       GF\!\ (p^{6})^{*}   for some    g  ∈   G  F   (   p  6   )        g    G  F   superscript  p  6      g\in GF(p^{6})   such that     ∣   ⟨  g  ⟩   ∣   =  q       delimited-∣∣   delimited-⟨⟩  g    q    \mid\!\!\langle g\rangle\!\!\mid=q   .  However, we do not need to find an explicit    g  ∈   G  F   (   p  6   )        g    G  F   superscript  p  6      g\in GF(p^{6})   , it suffices to find an element    c  ∈   G  F   (   p  2   )        c    G  F   superscript  p  2      c\in GF(p^{2})   such that    c  =   T  r   (  g  )        c    T  r  g     c=Tr(g)   for an element    g  ∈   G  F   (   p  6   )        g    G  F   superscript  p  6      g\in GF(p^{6})   of order   q   q   q   . But, given    T  r   (  g  )       T  r  g    Tr(g)   , a generator   g   g   g   of the XTR (sub)group can be found by determining any root of    F   (   T  r   (  g  )    ,  X  )       F     T  r  g   X     F(Tr(g),\ X)   which has been defined above . To find such a   c   c   c   we can take a look at property 5 of    F   (  c  ,  X  )       F   c  X     F(c,\ X)    here stating that the roots of    F   (  c  ,  X  )       F   c  X     F(c,\ X)   have an order dividing      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   if and only if    F   (  c  ,  X  )       F   c  X     F(c,\ X)   is irreducible . After finding such   c   c   c   we need to check if it really is of order   q   q   q   , but first we focus on how to select    c  ∈   G  F   (   p  2   )        c    G  F   superscript  p  2      c\in GF(p^{2})   such that    F   (  c  ,  X  )       F   c  X     F(c,\ X)   is irreducible.  An initial approach is to select    c  ∈     G  F   (   p  2   )    \  G   F   (  p  )        c     normal-\    G  F   superscript  p  2    G   F  p     c\in GF(p^{2})\backslash GF(p)   randomly which is justified by the next lemma.  Lemma:  For a randomly selected    c  ∈   G  F   (   p  2   )        c    G  F   superscript  p  2      c\in GF(p^{2})   the probability that     F   (  c  ,  X  )    =      X  3   -   c   X  2     +    c  p   X    -  1   ∈   G  F   (   p  2   )    [  X  ]            F   c  X           superscript  X  3     c   superscript  X  2        superscript  c  p   X    1          G  F   superscript  p  2    delimited-[]  X       F(c,\ X)=X^{3}-cX^{2}+c^{p}X-1\in GF(p^{2})[X]   is irreducible is about one third.  Now the basic algorithm to find a suitable    T  r   (  g  )       T  r  g    Tr(g)   is as follows:  Outline of the algorithm   Pick a random    c  ∈     G  F   (   p  2   )    \  G   F   (  p  )        c     normal-\    G  F   superscript  p  2    G   F  p     c\in GF(p^{2})\backslash GF(p)   .  If    F   (  c  ,  X  )       F   c  X     F(c,\ X)   is reducible, then return to Step 1.  Use Algorithm 1 to compute    d  =   c    (     p  2   -  p   +  1   )   /  q        d   subscript  c         superscript  p  2   p   1   q      d=c_{(p^{2}-p+1)/q}   .  If   d   d   d   is not of order   q   q   q   , return to Step 1.  Let     T  r   (  g  )    =  d        T  r  g   d    Tr(g)=d   .   It turns out that this algorithm indeed computes an element of    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   that equals    T  r   (  g  )       T  r  g    Tr(g)   for some    g  ∈   G  F   (   p  6   )        g    G  F   superscript  p  6      g\in GF(p^{6})   of order   q   q   q   .  More details to the algorithm, its correctness, runtime and the proof of the Lemma can be found in "An overview of the XTR public key system" in. 4  Cryptographic schemes  In this section it is explained how the concepts above using traces of elements can be applied to cryptography. In general, XTR can be used in any cryptosystem that relies on the (subgroup) Discrete Logarithm problem. Two important applications of XTR are the Diffie-Hellman key agreement and the ElGamal encryption . We will start first with Diffie-Hellman.  XTR-DH key agreement  We suppose that both Alice and Bob have access to the XTR public key data    (  p  ,  q  ,   T  r   (  g  )    )     p  q    T  r  g     \left(p,q,Tr(g)\right)   and intend to agree on a shared secret  key    K   K   K   . They can do this by using the following XTR version of the Diffie-Hellman key exchange:   Alice picks    a  ∈  ℤ      a  ℤ    a\in\mathbb{Z}   randomly with     T  r   (   g  a   )    ∈   G  F   (   p  2   )          T  r   superscript  g  a      G  F   superscript  p  2      Tr(g^{a})\in GF(p^{2})   and sends    T  r   (   g  a   )       T  r   superscript  g  a     Tr(g^{a})   to Bob.  Bob receives    b  ∈  ℤ      b  ℤ    b\in\mathbb{Z}   from Alice, selects at random     T  r   (   g  b   )    ∈   G  F   (   p  2   )          T  r   superscript  g  b      G  F   superscript  p  2      Tr(g^{b})\in GF(p^{2})   with    T  r   (   g  b   )       T  r   superscript  g  b     Tr(g^{b})   and sends      S  a    (   T  r   (   g  b   )    )    =   (   T  r   (   g    (   a  -  1   )   b    )    ,   T  r   (   g   a  b    )    ,   T  r   (   g    (   a  +  1   )   b    )    )   ∈   G  F    (   p  2   )   3             subscript  S  a     T  r   superscript  g  b        T  r   superscript  g      a  1   b       T  r   superscript  g    a  b       T  r   superscript  g      a  1   b             G  F   superscript   superscript  p  2   3       S_{a}(Tr(g^{b}))=\left(Tr(g^{(a-1)b}),Tr(g^{ab}),Tr(g^{(a+1)b})\right)\in GF(p%
 ^{2})^{3}   to Alice.  Alice receives   K   K   K   from Bob, computes with Algorithm 1     T  r   (   g   a  b    )    ∈   G  F   (   p  2   )          T  r   superscript  g    a  b       G  F   superscript  p  2      Tr(g^{ab})\in GF(p^{2})   and determines      S  b    (   T  r   (   g  a   )    )    =   (   T  r   (   g   a   (   b  -  1   )     )    ,   T  r   (   g   a  b    )    ,   T  r   (   g   a   (   b  +  1   )     )    )   ∈   G  F    (   p  2   )   3             subscript  S  b     T  r   superscript  g  a        T  r   superscript  g    a    b  1        T  r   superscript  g    a  b       T  r   superscript  g    a    b  1              G  F   superscript   superscript  p  2   3       S_{b}(Tr(g^{a}))=\left(Tr(g^{a(b-1)}),Tr(g^{ab}),Tr(g^{a(b+1)})\right)\in GF(p%
 ^{2})^{3}   based on   K   K   K   .  Bob analogously applies Algorithm 1 to compute     T  r   (   g   a  b    )    ∈   G  F   (   p  2   )          T  r   superscript  g    a  b       G  F   superscript  p  2      Tr(g^{ab})\in GF(p^{2})   and also determines    (  p  ,  q  ,   T  r   (  g  )    )     p  q    T  r  g     (p,q,Tr(g))   based on   k   k   k   .   XTR ElGamal encryption  For the ElGamal encryption we suppose now that Alice is the owner of the XTR public key data    T  r   (   g  k   )       T  r   superscript  g  k     Tr(g^{k})   and that she has selected a secret integer     (  p  ,  q  ,   T  r   (  g  )    ,   T  r   (   g  k   )    )     p  q    T  r  g     T  r   superscript  g  k      \left(p,q,Tr(g),Tr(g^{k})\right)   , computed   M   M   M   and published the result. Given Alice's XTR public key data    b  ∈  ℤ      b  ℤ    b\in\mathbb{Z}   , Bob can encrypt a message      S  b    (   T  r   (   g  k   )    )    =   (   T  r   (   g    (   b  -  1   )   k    )    ,   T  r   (   g   b  k    )    ,   T  r   (   g    (   b  +  1   )   k    )    )   ∈   G  F    (   p  2   )   3             subscript  S  b     T  r   superscript  g  k        T  r   superscript  g      b  1   k       T  r   superscript  g    b  k       T  r   superscript  g      b  1   k             G  F   superscript   superscript  p  2   3       S_{b}(Tr(g^{k}))=\left(Tr(g^{(b-1)k}),Tr(g^{bk}),Tr(g^{(b+1)k})\right)\in GF(p%
 ^{2})^{3}   , intended for Alice, using the following XTR version of the ElGamal encryption:   Bob selects randomly a   K   K   K   with     T  r   (   g   b  k    )    ∈   G  F   (   p  2   )          T  r   superscript  g    b  k       G  F   superscript  p  2      Tr(g^{bk})\in GF(p^{2})   .  Bob next applies Algorithm 1 to compute   K   K   K   .  Bob determines a symmetric encryption key   M   M   M   based on   E   E   E   .  Bob uses an agreed upon symmetric encryption method with key    (   T  r   (   g  b   )    ,  E  )       T  r   superscript  g  b    E    (Tr(g^{b}),\ E)   to encrypt his message    (   T  r   (   g  b   )    ,  E  )       T  r   superscript  g  b    E    (Tr(g^{b}),\ E)   , resulting in the encryption      S  k    (   T  r   (   g  b   )    )    =   (   T  r   (   g   b   (   k  -  1   )     )    ,   T  r   (   g   b  k    )    ,   T  r   (   g   b   (   k  +  1   )     )    )   ∈   G  F    (   p  2   )   3             subscript  S  k     T  r   superscript  g  b        T  r   superscript  g    b    k  1        T  r   superscript  g    b  k       T  r   superscript  g    b    k  1              G  F   superscript   superscript  p  2   3       S_{k}(Tr(g^{b}))=\left(Tr(g^{b(k-1)}),Tr(g^{bk}),Tr(g^{b(k+1)})\right)\in GF(p%
 ^{2})^{3}   .  Bob sends   K   K   K   to Alice.   Upon receipt of     T  r   (   g   b  k    )    ∈   G  F   (   p  2   )          T  r   superscript  g    b  k       G  F   superscript  p  2      Tr(g^{bk})\in GF(p^{2})   , Alice decrypts the message in the following way:   Alice computes   K   K   K   .  Alice determines the symmetric key   E   E   E   based on   M   M   M   .  Alice uses the agreed upon symmetric encryption method with key   K   K   K   to decrypt    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   , resulting in the original message     T  r   (  g  )    ∈   G  F   (   p  2   )    ∀  p    ∈   G  F    (   p  6   )   *            T  r  g     G  F   superscript  p  2    for-all  p           G  F   superscript   superscript  p  6         Tr(g)\in GF(p^{2})\ \forall p\in GF(p^{6})^{*}   .   The here described encryption scheme is based on a common hybrid version of the ElGamal encryption, where the secret key    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   is obtained by an asymmetric public key system and then the message is encrypted with a symmetric key encryption method Alice and Bob agreed to.  In the more traditional ElGamal encryption the message is restricted to the key space, which would here be     M   ′     superscript  M  normal-′    M\!\ ^{\prime}   , because   M   M   M   . The encryption in this case is the multiplication of the message with the key, which is an invertible operation in the key space    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   .  Concretely this means if Bob wants to encrypt a message   E   E   E   , first he has to convert it into an element    E  =   K  ⋅  M   ∈   G  F   (   p  2   )          E   normal-⋅  K  M          G  F   superscript  p  2       E=K\cdot M\in GF(p^{2})   of   E   E   E   and then compute the encrypted message   M   M   M   as    M  =   E  ⋅   K   -  1         M   normal-⋅  E   superscript  K    1       M=E\cdot K^{-1}   . Upon receipt of the encrypted message    K   -  1      superscript  K    1     K^{-1}   Alice can recover the original message   K   K   K   by computing    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   , where    G  F   (   p  t   )       G  F   superscript  p  t     GF\left(p^{t}\right)   is the inverse of    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   in   ω   ω   \omega   .  Security  In order to say something about the security properties of the above explained XTR encryption scheme, first it is important to check the security of the XTR group, which means how hard it is to solve the Discrete Logarithm problem there. The next part will then state the equivalency between the Discrete Logarithm problem in the XTR group and the XTR version of the discrete logarithm problem, using only the traces of elements.  Discrete logarithms in a general    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle     Let now      γ   x  y    given  γ   ,    γ  x   and   γ  y          superscript  γ    x  y    given  γ      superscript  γ  x   and   superscript  γ  y      \gamma^{xy}\text{ given }\gamma,\gamma^{x}\text{ and }\gamma^{y}   be a multiplicative group of order     D  H   (   γ  x   ,   γ  y   )    =   γ   x  y          D  H    superscript  γ  x    superscript  γ  y      superscript  γ    x  y      DH(\gamma^{x},\ \gamma^{y})=\gamma^{xy}   . The security of the Diffie-Hellman protocol in    c  =   D  H   (  a  ,  b  )        c    D  H   a  b      c=DH(a,b)   relies on the Diffie-Hellman (DH) problem of computing     a  ,  b  ,  c   ∈   ⟨  γ  ⟩        a  b  c    delimited-⟨⟩  γ     a,b,c\in\langle\gamma\rangle   . We write    x  =   D  L   (  a  )        x    D  L  a     x=DL(a)   . There are two other problems related to the DH problem. The first one is the Diffie-Hellman Decision (DHD) problem to determine if    a  =   γ  x   ∈    ⟨  γ  ⟩   with  0   ≤  x  <  ω        a   superscript  γ  x           delimited-⟨⟩  γ   with  0        x       ω     a=\gamma^{x}\in\langle\gamma\rangle\text{ with }0\leq x<\omega   for given    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   and the second one is the Discrete Logarithm (DL) problem to find   ω   ω   \omega   for a given    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   .  The DL problem is at least as difficult as the DH problem and it is generally assumed that if the DL problem in    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   is intractable, then so are the other two.  Given the prime factorization of   ω   ω   \omega   the DL problem in    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   can be reduced to the DL problem in all subgroups of   ω   ω   \omega   with prime order due to the Pohlig-Hellman algorithm . Hence    G  F    (   p  t   )   *       G  F   superscript   superscript  p  t       GF\left(p^{t}\right)^{*}   can safely be assumed to be prime.  For a subgroup    G  F   (   p  t   )       G  F   superscript  p  t     GF(p^{t})   of prime order    G  F   (  p  )       G  F  p    GF(p)   of the multiplicative group   t   t   t   of an extension field    𝒪   (   ω   )       𝒪    ω     \mathcal{O}(\sqrt{\omega})   of    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   for some    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   , there are now two possible ways to attack the system. One can either focus on the whole multiplicative group or on the subgroup. To attack the multiplicative group the best known method is the Discrete Logarithm variant of the Number Field Sieve or alternatively in the subgroup one can use one of several methods that take    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   operations in   ω   ω   \omega   , such as Pollard's rho method .  For both approaches the difficulty of the DL problem in    G  F   (   p  t   )       G  F   superscript  p  t     GF\left(p^{t}\right)   depends on the size of the minimal surrounding subfield of    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   and on the size of its prime order   ω   ω   \omega   . If    ⟨  γ  ⟩     delimited-⟨⟩  γ    \langle\gamma\rangle   itself is the minimal surrounding subfield of    G  F   (   p  t   )       G  F   superscript  p  t     GF\left(p^{t}\right)   and   p   p   p   is sufficiently large, then the DL problem in   q   q   q   is as hard as the general DL problem in    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   .  The XTR parameters are now chosen in such a way that    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   is not small,    q  ∣   p  2   -  p  +  1     fragments  q  normal-∣   superscript  p  2    p   1    q\mid p^{2}-p+1   is sufficiently large and      p  2   -  p   +  1         superscript  p  2   p   1    p^{2}-p+1   cannot be embedded in a true subfield of     ∣   G  F     (   p  6   )   *     ∣   =    p  6   -  1        delimited-∣∣    G  F   superscript   superscript  p  6          superscript  p  6   1     \mid\!GF(p^{6})^{*}\!\mid=p^{6}-1   , since      p  s   -   1  for  s    ∈   {  1  ,  2  ,  3  }          superscript  p  s     1  for  s     1  2  3     p^{s}-1\text{ for }s\in\{1,2,3\}   and    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   is a divisor of    G   F     (   p  s   )   *       G  F   superscript   superscript  p  s       GF\!\ (p^{s})^{*}   , but it does not divide    s  ∈   {  1  ,  2  ,  3  }       s   1  2  3     s\in\{1,2,3\}   and thus    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   cannot be a subgroup of    T  r   (   g   x  y    )       T  r   superscript  g    x  y      Tr(g^{xy})   for    T  r   (   g  x   )       T  r   superscript  g  x     Tr(g^{x})   . It follows that the DL problem in the XTR group may be assumed as hard as the DL problem in    T  r   (   g  y   )       T  r   superscript  g  y     Tr(g^{y})   .  Security of XTR  Cryptographic protocols that are based on Discrete Logarithms can use many different types of subgroups like groups of points of elliptic curves or subgroups of the multiplicative group of a finite field like the XTR group. As we have seen above the XTR versions of the Diffie-Hellman and ElGamal encryption protocol replace using elements of the XTR group by using their traces. This means that the security of the XTR versions of these encryption schemes is no longer based on the original DH, DHD or DL problems. Therefore the XTR versions of those problems need to be defined and we will see that they are equivalent (in the sense of the next definition) to the original problems.  Definitions:   We define the XTR-DH problem as the problem of computing     X  D  H   (   g  x   ,   g  y   )    =   g   x  y          X  D  H    superscript  g  x    superscript  g  y      superscript  g    x  y      XDH(g^{x},\ g^{y})=g^{xy}   given     X  D  H   (  a  ,  b  )    =  c        X  D  H   a  b    c    XDH(a,b)=c   and     a  ,  b  ,  c   ∈   T  r   (   ⟨  g  ⟩   )         a  b  c     T  r   delimited-⟨⟩  g      a,b,c\in Tr(\langle g\rangle)   and we write    a  ∈   T  r   (   ⟨  g  ⟩   )        a    T  r   delimited-⟨⟩  g      a\in Tr(\langle g\rangle)   .  The XTR-DHD problem is the problem of determining whether    x  =   X  D  L   (  a  )        x    X  D  L  a     x=XDL(a)   for   𝒜   𝒜   \mathcal{A}   .  Given   ℬ   ℬ   \mathcal{B}   , the XTR-DL problem is to find   𝒜   𝒜   \mathcal{A}   , i.e.   ℬ   ℬ   \mathcal{B}   .  '' We say that problem   ℬ   ℬ   \mathcal{B}   is (a,b)-equivalent to problem   𝒜   𝒜   \mathcal{A}   , if any instance of problem    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   (or    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   ) can be solved by at most a (or b) calls to an algorithm solving problem    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   (or    G  F   (   p  2   )       G  F   superscript  p  2     GF(p^{2})   ).''   After introducing the XTR versions of these problems the next theorem is an important result telling us the connection between the XTR and the non-XTR problems, which are in fact equivalent. This implies that the XTR representation of elements with their traces is, as can be seen above, faster by a factor of 3 than the usual representation without compromising security.  Theorem  The following equivalencies hold:   i. The XTR-DL problem is (1,1)-equivalent to the DL problem in    G  F   (   p  6   )       G  F   superscript  p  6     GF(p^{6})   .   ii. The XTR-DH problem is (1,2)-equivalent to the DH problem in    ⟨  g  ⟩     delimited-⟨⟩  g    \langle g\rangle   .   iii. The XTR-DHD problem is (3,2)-equivalent to the DHD problem in $\langle g\rangle$ .    This means that an algorithm solving either XTR-DL, XTR-DH or XTR-DHD with non-negligible probability can be transformed into an algorithm solving the corresponding non-XTR problem DL, DH or DHD with non-negligible probability and vice versa. In particular part ii. implies that determining the small XTR-DH key (being an element of $GF(p^2)$ ) is as hard as determining the whole DH key (being an element of $GF(p^6)$ ) in the representation group $\langle g \rangle$ .  References  "  Category:Asymmetric-key algorithms  Category:Finite fields     ↩   ↩      