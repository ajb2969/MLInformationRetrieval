


Hopcroft–Karp algorithm




Hopcroft–Karp algorithm

In computer science, the Hopcroft–Karp algorithm is an algorithm that takes as input a bipartite graph and produces as output a maximum cardinality matching – a set of as many edges as possible with the property that no two edges share an endpoint. It runs in $O(|E|\sqrt{|V|})$ time in the worst case, where $E$ is set of edges in the graph, and $V$ is set of vertices of the graph. In the case of dense graphs the time bound becomes $O(|V|^{2.5})$, and for random graphs it runs in near-linear time.
The algorithm was found by . As in previous methods for matching such as the Hungarian algorithm and the work of , the Hopcroft–Karp algorithm repeatedly increases the size of a partial matching by finding augmenting paths. However, instead of finding just a single augmenting path per iteration, the algorithm finds a maximal set of shortest augmenting paths. As a result only $O(\sqrt{n})$ iterations are needed. The same principle has also been used to develop more complicated algorithms for non-bipartite matching with the same asymptotic running time as the Hopcroft–Karp algorithm.
Augmenting paths
A vertex that is not the endpoint of an edge in some partial matching $M$ is called a free vertex. The basic concept that the algorithm relies on is that of an augmenting path, a path that starts at a free vertex, ends at a free vertex, and alternates between unmatched and matched edges within the path. Augmented path can have only two vertices (both free) and single unmatched edge between them. Note that except for the endpoints, all other vertices (if any) in augmented path must be non-free vertices.
If $M$ is a matching, and $P$ is an augmenting path relative to $M$, then the symmetric difference of the two sets of edges, $M \oplus P$, would form a matching with size $|M| + 1$. Thus, by finding augmenting paths, an algorithm may increase the size of the matching.
Conversely, suppose that a matching $M$ is not optimal, and let $P$ be the symmetric difference $M \oplus M^*$ where $M^*$ is an optimal matching. Then $P$ must form a collection of disjoint augmenting paths and cycles or paths in which matched and unmatched edges are of equal number; the difference in size between $M$ and $M^*$ is the number of augmenting paths in $P$. Thus, if no augmenting path can be found, an algorithm may safely terminate, since in this case $M$ must be optimal.
An augmenting path in a matching problem is closely related to the augmenting paths arising in maximum flow problems, paths along which one may increase the amount of flow between the terminals of the flow. It is possible to transform the bipartite matching problem into a maximum flow instance, such that the alternating paths of the matching problem become augmenting paths of the flow problem.1 In fact, a generalization of the technique used in Hopcroft–Karp algorithm to arbitrary flow networks is known as Dinic's algorithm.

Input: Bipartite graph $G(U \cup V, E)$

Output: Matching $M \subseteq E$

$M \leftarrow \empty$

repeat
$$\mathcal P \leftarrow \{P_1, P_2, \dots, P_k\}$$ maximal set of vertex-disjoint shortest augmenting paths
$$M \leftarrow M \oplus (P_1 \cup P_2 \cup \dots \cup P_k)$$

until $\mathcal P = \empty$


Algorithm
Let $U$ and $V$ be the two sets in the bipartition of $G$, and let the matching from $U$ to $V$ at any time be represented as the set $M$.
The algorithm is run in phases. Each phase consists of the following steps.

A breadth-first search partitions the vertices of the graph into layers. The free vertices in $U$ are used as the starting vertices of this search and form the first layer of the partitioning. At the first level of the search, there are only unmatched edges, since the free vertices in $U$ are by definition not adjacent to any matched edges. At subsequent levels of the search, the traversed edges are required to alternate between matched and unmatched. That is, when searching for successors from a vertex in $U$, only unmatched edges may be traversed, while from a vertex in $V$ only matched edges may be traversed. The search terminates at the first layer $k$ where one or more free vertices in $V$ are reached.
All free vertices in $V$ at layer $k$ are collected into a set $F$. That is, a vertex $v$ is put into $F$ if and only if it ends a shortest augmenting path.
The algorithm finds a maximal set of vertex disjoint augmenting paths of length $k$. This set may be computed by depth first search from $F$ to the free vertices in $U$, using the breadth first layering to guide the search: the depth first search is only allowed to follow edges that lead to an unused vertex in the previous layer, and paths in the depth first search tree must alternate between matched and unmatched edges. Once an augmenting path is found that involves one of the vertices in $F$, the depth first search is continued from the next starting vertex.
Every one of the paths found in this way is used to enlarge $M$.

The algorithm terminates when no more augmenting paths are found in the breadth first search part of one of the phases.
Analysis
Each phase consists of a single breadth first search and a single depth first search. Thus, a single phase may be implemented in linear time. Therefore, the first $\sqrt{|V|}$ phases, in a graph with $|V|$ vertices and $|E|$ edges, take time $O(|E|\sqrt{|V|})$.
It can be shown that each phase increases the length of the shortest augmenting path by at least one: the phase finds a maximal set of augmenting paths of the given length, so any remaining augmenting path must be longer. Therefore, once the initial $\sqrt{|V|}$ phases of the algorithm are complete, the shortest remaining augmenting path has at least $\sqrt{|V|}$ edges in it. However, the symmetric difference of the eventual optimal matching and of the partial matching M found by the initial phases forms a collection of vertex-disjoint augmenting paths and alternating cycles. If each of the paths in this collection has length at least $\sqrt{|V|}$, there can be at most $\sqrt{|V|}$ paths in the collection, and the size of the optimal matching can differ from the size of $M$ by at most $\sqrt{|V|}$ edges. Since each phase of the algorithm increases the size of the matching by at least one, there can be at most $\sqrt{|V|}$ additional phases before the algorithm terminates.
Since the algorithm performs a total of at most $2\sqrt{|V|}$ phases, it takes a total time of $O(|E|\sqrt{|V|})$ in the worst case.
In many instances, however, the time taken by the algorithm may be even faster than this worst case analysis indicates. For instance, in the average case for sparse bipartite random graphs,  (improving a previous result of ) showed that with high probability all non-optimal matchings have augmenting paths of logarithmic length. As a consequence, for these graphs, the Hopcroft–Karp algorithm takes $O(\log |V|)$ phases and $O(|E| \log |V|)$ total time.
Comparison with other bipartite matching algorithms
For sparse graphs, the Hopcroft–Karp algorithm continues to have the best known worst-case performance, but for dense graphs a more recent algorithm by  achieves a slightly better time bound, $O\left(n^{1.5}\sqrt{\frac{m}{\log n}}\right)$. Their algorithm is based on using a push-relabel maximum flow algorithm and then, when the matching created by this algorithm becomes close to optimum, switching to the Hopcroft–Karp method.
Several authors have performed experimental comparisons of bipartite matching algorithms. Their results in general tend to show that the Hopcroft–Karp method is not as good in practice as it is in theory: it is outperformed both by simpler breadth-first and depth-first strategies for finding augmenting paths, and by push-relabel techniques.2
Non-bipartite graphs
The same idea of finding a maximal set of shortest augmenting paths works also for finding maximum cardinality matchings in non-bipartite graphs, and for the same reasons the algorithms based on this idea take $O(\sqrt{|V|})$ phases. However, for non-bipartite graphs, the task of finding the augmenting paths within each phase is more difficult. Building on the work of several slower predecessors,  showed how to implement a phase in linear time, resulting in a non-bipartite matching algorithm with the same time bound as the Hopcroft–Karp algorithm for bipartite graphs. The Micali–Vazirani technique is complex, and its authors did not provide full proofs of their results; subsequently, a "clear exposition" was published by  and alternative methods were described by other authors.3 In 2012, Vazirani offerred a new simplified proof of the Micali-Vazirani algorithm.4
Pseudocode
/*
 G = U ∪ V ∪ {NIL}
 where U and V are partition of graph and NIL is a special null vertex
*/
  
function BFS ()
    for u in U
        if Pair_U[u] == NIL
            Dist[u] = 0
            Enqueue(Q,u)
        else
            Dist[u] = ∞
    Dist[NIL] = ∞
    while Empty(Q) == false
        u = Dequeue(Q)
        if Dist[u] \scriptstyle O\left(n^{1.5}\sqrt{\frac{m}{\log n}}\right)|journal=Information Processing Letters|volume=37|issue=4|pages=237–240|year=1991|doi=10.1016/0020-0190(91)90195-N}}.


.

.

. As cited by .

. As cited by .

.

.
.

.

.

.

. As cited by .

.

.

"
Category:Graph algorithms Category:Matching



, section 12.3, bipartite cardinality matching problem, pp. 469–470.↩
; ; ; .↩
 and .↩
↩




