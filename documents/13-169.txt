   Binary lambda calculus      Binary lambda calculus  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     Binary lambda calculus ( BLC ) is a technique for using the lambda calculus to study Kolmogorov complexity , by working with a standard binary encoding of lambda terms, and a designated universal machine . Binary lambda calculus is a new idea introduced by John Tromp in 2004. 1  Background  BLC is designed to provide a very simple and elegant concrete definition of descriptional complexity (Kolmogorov complexity).  Roughly speaking, the complexity of an object is the length of its shortest description.  To make this precise, we take descriptions to be bitstrings, and identify a description method with some computational device, or machine, that transforms descriptions into objects. Objects are usually also just bitstrings, but can have additional structure as well, e.g., pairs of strings.  Originally, Turing machines , the most well known formalism for computation, were used for this purpose. But they are somewhat lacking in ease of construction and composability. Another classical computational formalism, the Lambda calculus , offers distinct advantages in ease of use. The lambda calculus doesn't incorporate any notion of I/O though, so one needs to be designed.  Binary I/O  Adding a readbit primitive function to lambda calculus, as Chaitin did for LISP , would destroy its referential transparency , unless one distinguishes between an I/O action and its result, as Haskell does with its monadic I/O. But that requires a type system, an unnecessary complication.  Instead, BLC requires translating bitstrings into lambda terms, to which the machine (itself a lambda term) can be readily applied.  Bits 0 and 1 are translated into the standard lambda booleans  B 0 = True and B 1 = False:   True =     λ   x   λ  y   .  x     formulae-sequence    λ  x  λ  y   x    \lambda x\,\lambda y.\,x     False =     λ   x   λ  y   .  y     formulae-sequence    λ  x  λ  y   y    \lambda x\,\lambda y.\,y      which can be seen to directly implement the if-then-else operator.  Now consider the pairing function       ⟨  ,  ⟩   =  λ   x   λ   y   λ  z  .  z  x  y     fragments   fragments  normal-⟨  normal-,  normal-⟩    λ  x  λ  y  λ  z  normal-.  z  x  y    \langle,\rangle=\lambda x\,\lambda y\,\lambda z.\,zxy   applied to two terms M and N        ⟨  M  ,  N  ⟩   =   λ  z    .   z  M  N      formulae-sequence     M  N     λ  z      z  M  N     \langle M,N\rangle=\lambda z.\,zMN   . Applying this to a boolean yields the desired component of choice.  A string s = b 0 b 1 … b n−1 is represented by repeated pairing as      ⟨   B   b  0    ,   ⟨    B   b  1    …   ⟨   B   b   n  -  1     ,  z  ⟩   …   ⟩   ⟩      subscript  B   subscript  b  0     delimited-⟨⟩     subscript  B   subscript  b  1    normal-…    subscript  B   subscript  b    n  1     z   normal-…      \langle B_{b_{0}},\langle B_{b_{1}}\ldots\langle B_{b_{n-1}},z\rangle\ldots\rangle\rangle   which is denoted as    s  :  z     normal-:  s  z    s:z   .  The z appearing in the above expression requires some further explanation.  Delimited versus undelimited  Descriptional complexity actually comes in two distinct flavors, depending on whether the input is considered to be delimited.  Knowing the end of your input makes it easier to describe objects. For instance, you can just copy the whole input to output. This flavor is called plain or simple complexity.  But in a sense it is additional information. A file system for instance needs to separately store the length of files. The C language uses the null character to denote the end of a string, but this comes at the cost of not having that character available within strings.  The other flavor is called prefix complexity, named after prefix codes , where the machine needs to figure out, from the input read so far, whether it needs to read more bits. We say that the input is self-delimiting. This works better for communication channels, since one can send multiple descriptions, one after the other, and still tell them apart.  In the I/O model of BLC, the flavor is dictated by the choice of z . If we keep it as a free variable, and demand that it appears as part of the output, then the machine must be working in a self-delimiting manner. If on the other hand we use a lambda term specifically designed to be easy to distinguish from any pairing, then the input becomes delimited. BLC chooses False for this purpose but gives it the more descriptive alternative name of Nil . Dealing with lists that may be Nil is straightforward: since        ⟨  x  ,  y  ⟩    M   N   =    M    x    y   N          x  y   M  N     M  x  y  N     \langle x,y\rangle\ M\ N=M\ x\ y\ N   , and       N  i   l    M   N   =  N        N  i  l  M  N   N    Nil\ M\ N=N   one can write functions M and N to deal with the two cases, the only caveat being that N will be passed to M as its third argument.  Universality  We can find a description method U such that for any other description method D , there is a constant c (depending only on D ) such that no object takes more than c extra bits to describe with method U than with method D . And BLC is designed to make these constants relatively small. In fact the constant will be the length of a binary encoding of a D -interpreter written in BLC, and U will be a lambda term that parses this encoding and runs this decoded interpreter on the rest of the input. U won't even have to know whether the description is delimited or not; it works the same either way.  Having already solved the problem of translating bitstrings into lambda calculus, we now face the opposite problem: how to encode lambda terms into bitstrings?  Lambda encoding  First we need to write our lambda terms in a particular notation using what is known as De Bruijn indices . Our encoding is then defined recursively as follows        λ  M   ^   =   00   M  ^         normal-^    λ  M      00   normal-^  M      \widehat{\lambda M}=00\widehat{M}            M   N   ^   =   01   M  ^    N  ^         normal-^    M  N      01   normal-^  M    normal-^  N      \widehat{M\ N}=01\widehat{M}\widehat{N}          i  ^   =    1  i   0        normal-^  i      superscript  1  i   0     \widehat{i}=1^{i}0     For instance, the pairing function     λ  x  λ  y  λ  z   .   z  x  y      formulae-sequence    λ  x  λ  y  λ  z     z  x  y     \lambda x\lambda y\lambda z.zxy   is written    λ  λ  λ  .132      λ  λ  λ  .132    \lambda\lambda\lambda.132   in De Bruijn format, which has encoding   00 00 00 01 01 10 1110 110   00 00 00 01 01 10 1110 110   00\ 00\ 00\ 01\ 01\ 10\ 1110\ 110   .  A closed lambda term is one in which all variables are bound, i.e. without any free variables. In De Bruijn format, this means that an index i can only appear within at least i nested lambdas. The number of closed terms of size n bits is given by sequence  of the On-Line Encyclopedia of Integer Sequences .  The shortest possible closed term is the identity function      λ  1   ^   =  0010       normal-^    λ  1    0010    \widehat{\lambda 1}=0010   . In delimited mode, this machine just copies its input to its output.  So what is this universal machine  U ? Here it is, in De Bruijn format (all indices are single digit):       (  λ  11  )    (  λ  λ  λ  1   (  λ  λ  λ  λ  3   (  λ  5   (  3   (  λ  2   (  3   (  λ  λ  3   (  λ  123  )   )   )    (  4   (  λ  4   (  λ  31   (  21  )   )   )   )   )   )         fragments   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  λ  1   fragments  normal-(  λ  λ  λ  λ  3   fragments  normal-(  λ  5   fragments  normal-(  3   fragments  normal-(  λ  2   fragments  normal-(  3   fragments  normal-(  λ  λ  3   fragments  normal-(  λ  123  normal-)   normal-)   normal-)    fragments  normal-(  4   fragments  normal-(  λ  4   fragments  normal-(  λ  31   fragments  normal-(  21  normal-)   normal-)   normal-)   normal-)   normal-)   normal-)        (\lambda 11)(\lambda\lambda\lambda 1(\lambda\lambda\lambda\lambda 3(\lambda 5(%
 3(\lambda 2(3(\lambda\lambda 3(\lambda 123)))(4(\lambda 4(\lambda 31(21))))))            (  1   (  2   (  λ  12  )   )    (  λ  4   (  λ  4   (  λ  2   (  14  )   )   )   5  )   )   )   )    (  33  )   2  )  (  λ  1   (   (  λ  11  )    (  λ  11  )   )   )     fragments   fragments   fragments   fragments  normal-(  1   fragments  normal-(  2   fragments  normal-(  λ  12  normal-)   normal-)    fragments  normal-(  λ  4   fragments  normal-(  λ  4   fragments  normal-(  λ  2   fragments  normal-(  14  normal-)   normal-)   normal-)   5  normal-)   normal-)   normal-)   normal-)    fragments  normal-(  33  normal-)   2  normal-)  normal-(  λ  1   fragments  normal-(   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  11  normal-)   normal-)   normal-)    (1(2(\lambda 12))(\lambda 4(\lambda 4(\lambda 2(14)))5))))(33)2)(\lambda 1((%
 \lambda 11)(\lambda 11)))     This is in binary:   0101000110100000000101011000000000011110000101111110011110  0001011100111100000011110000101101101110011111000011111000  0101111010011101001011001110000110110000101111100001111100  0011100110111101111100111101110110000110010001101000011010  (only 232 bits (29 bytes) long)   A detailed analysis of machine U may be found in. 2  Complexity, concretely  In general, we can make complexity of an object conditional on several other objects that are provided as additional argument to the universal machine. Plain (or simple) complexity KS and prefix complexity KP are defined by      K  S   (  x  |   y  1   ,  …  ,   y  k   )   =  min   {  ℓ   (  p  )   |   U    (  p  :  N  i  l  )     y  1     …    y  k   =  x  }      fragments  K  S   fragments  normal-(  x  normal-|   subscript  y  1   normal-,  normal-…  normal-,   subscript  y  k   normal-)      fragments  normal-{  ℓ   fragments  normal-(  p  normal-)   normal-|  U   fragments  normal-(  p  normal-:  N  i  l  normal-)    subscript  y  1   normal-…   subscript  y  k    x  italic-  normal-}     KS(x|y_{1},\ldots,y_{k})=\min\{\ell(p)\ |\ U\ (p:Nil)\ y_{1}\ \ldots\ y_{k}=\ %
 \,x\ \ \ \ \}         K  P   (  x  |   y  1   ,  …  ,   y  k   )   =  min   {  ℓ   (  p  )   |   U    (  p  :  z  )     y  1     …    y  k   =   ⟨  x  ,  z  ⟩   }      fragments  K  P   fragments  normal-(  x  normal-|   subscript  y  1   normal-,  normal-…  normal-,   subscript  y  k   normal-)      fragments  normal-{  ℓ   fragments  normal-(  p  normal-)   normal-|  U   fragments  normal-(  p  normal-:  z   normal-)    subscript  y  1   normal-…   subscript  y  k     fragments  normal-⟨  x  normal-,  z  normal-⟩   normal-}     KP(x|y_{1},\ldots,y_{k})=\min\{\ell(p)\ |\ U\ (p:\ z\ \ )\ y_{1}\ \ldots\ y_{k%
 }=\langle x,z\rangle\}     Theorems, concretely  The identity program    λ  1      λ  1    \lambda 1   proves that       K  S   (  x  )    ≤    ℓ   (  x  )    +  4         K  S  x       normal-ℓ  x   4     KS(x)\leq\ell(x)+4     The program    λ  λ  1   (    (   λ  11   )    (   λ  λ  λ  λ  2   (  44  )    (   λ  λ  32   (   32   (   2   (   51   (  21  )    )    )    )    )    )    )    (   λ  λ  1   )    (   λ  λ  λ  1   (   λ  4   (   λ  4   (   λ  132   )    )    )    )    (   λ  λ  λ  1   (   3   (   λ  λ  1   )    )   2   )    (   λ  1   )   2      λ  λ  1      λ  11     λ  λ  λ  λ  2  44    λ  λ  32    32    2    51  21          λ  λ  1     λ  λ  λ  1    λ  4    λ  4    λ  132        λ  λ  λ  1    3    λ  λ  1    2     λ  1   2    \lambda\lambda 1((\lambda 11)(\lambda\lambda\lambda\lambda 2(44)(\lambda%
 \lambda 32(32(2(51(21)))))))(\lambda\lambda 1)(\lambda\lambda\lambda 1(\lambda
 4%
 (\lambda 4(\lambda 132))))(\lambda\lambda\lambda 1(3(\lambda\lambda 1))2)(%
 \lambda 1)2   proves that      K  P   (  x  |  ℓ   (  x  )   )   ≤  ℓ   (  x  )   +  188     fragments  K  P   fragments  normal-(  x  normal-|  ℓ   fragments  normal-(  x  normal-)   normal-)    ℓ   fragments  normal-(  x  normal-)    188    KP(x|\ell(x))\leq\ell(x)+188     The program       (  λ  11  )    (  λ  λ  λ  1   (  λ  1   (  3   (  λ  λ  1  )   )    (  44   (  λ  1   (  λ  λ  λ  1   (  λ  4   (  λ  λ  52   (  52   (  31   (  21  )   )   )   )   )   )   4   (  λ  1  )   )   )   )   )    (  λ  λ  λ  1   (  3   (   (  λ  11  )         fragments   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  λ  1   fragments  normal-(  λ  1   fragments  normal-(  3   fragments  normal-(  λ  λ  1  normal-)   normal-)    fragments  normal-(  44   fragments  normal-(  λ  1   fragments  normal-(  λ  λ  λ  1   fragments  normal-(  λ  4   fragments  normal-(  λ  λ  52   fragments  normal-(  52   fragments  normal-(  31   fragments  normal-(  21  normal-)   normal-)   normal-)   normal-)   normal-)   normal-)   4   fragments  normal-(  λ  1  normal-)   normal-)   normal-)   normal-)   normal-)    fragments  normal-(  λ  λ  λ  1   fragments  normal-(  3   fragments  normal-(   fragments  normal-(  λ  11  normal-)        (\lambda 11)(\lambda\lambda\lambda 1(\lambda 1(3(\lambda\lambda 1))(44(\lambda
 1%
 (\lambda\lambda\lambda 1(\lambda 4(\lambda\lambda 52(52(31(21))))))4(\lambda 1%
 )))))(\lambda\lambda\lambda 1(3((\lambda 11)          (  λ  λ  λ  λ  1   (  λ  55   (  λ  λ  356   (  λ  1   (  λ  λ  612  )   3  )   )    (  λ  λ  5   (  λ  143  )   )   )    (  31  )   )    (  λ  λ  1   (  λ  λ  2  )   2  )    (  λ  1  )   )    (  λ  λ  1  )   )   2  )     fragments   fragments   fragments   fragments  normal-(  λ  λ  λ  λ  1   fragments  normal-(  λ  55   fragments  normal-(  λ  λ  356   fragments  normal-(  λ  1   fragments  normal-(  λ  λ  612  normal-)   3  normal-)   normal-)    fragments  normal-(  λ  λ  5   fragments  normal-(  λ  143  normal-)   normal-)   normal-)    fragments  normal-(  31  normal-)   normal-)    fragments  normal-(  λ  λ  1   fragments  normal-(  λ  λ  2  normal-)   2  normal-)    fragments  normal-(  λ  1  normal-)   normal-)    fragments  normal-(  λ  λ  1  normal-)   normal-)   2  normal-)    (\lambda\lambda\lambda\lambda 1(\lambda 55(\lambda\lambda 356(\lambda 1(%
 \lambda\lambda 612)3))(\lambda\lambda 5(\lambda 143)))(31))(\lambda\lambda 1(%
 \lambda\lambda 2)2)(\lambda 1))(\lambda\lambda 1))2)     proves that       K  P   (  x  )    ≤    ℓ   (   x  ¯   )    +  338         K  P  x       normal-ℓ   normal-¯  x    338     KP(x)\leq\ell(\overline{x})+338   where    x  ¯     normal-¯  x    \overline{x}   is the Levenstein code for x defined by         0  ¯       =  0         n  +  1   ¯       =    1      ℓ   (  n  )    ¯    n           normal-¯  0     absent  0      normal-¯    n  1      absent    1   normal-¯    normal-ℓ  n    n       \begin{array}[]{ll}\overline{0}&=0\\
 \overline{n+1}&=1\ \overline{\ell(n)}\ n\\
 \end{array}   in which we identify numbers and bitstrings according to lexicographic order. This code has the nice property that for all k ,       ℓ   (   n  ¯   )    ≤    ℓ   (  n  )    +   ℓ   (   ℓ   (  n  )    )    +  ⋯  +    ℓ   k  -  1     (  n  )    +   O   (    ℓ  k    (  n  )    )           normal-ℓ   normal-¯  n        normal-ℓ  n     normal-ℓ    normal-ℓ  n    normal-⋯     superscript  normal-ℓ    k  1    n     O     superscript  normal-ℓ  k   n       \ell(\overline{n})\leq\ell(n)+\ell(\ell(n))+\cdots+\ell^{k-1}(n)+O(\ell^{k}(n))   Furthermore, it makes lexicographic order of delimited numbers coincide with numeric order.      Number   String   Delimited       0    0     1   0   10     2   1   110 0     3   00   110 1     4   01   1110 0 00     5   10   1110 0 01     6   11   1110 0 10     7   000   1110 0 11     8   001   1110 1 000     9   010   1110 1 001     Complexity of Sets  The complexity of a set of natural numbers is the complexity of its characteristic sequence, an infinite lambda term in the Infinitary Lambda Calculus .  The program      λ   (   λ  1   (   1   (    (   λ  11   )    (   λ  λ  λ  1   (   λ  λ  1   )    (    (   λ  441   (    (   λ  11   )    (   λ  2   (  11  )    )    )    )    (   λ  λ  λ  λ  13   (   2   (  64  )    )    )    )    )    (   λ  λ  λ  4   (  13  )    )    )    )    )    (   λ  λ  1   (   λ  λ  2   )   2   )       λ    λ  1    1      λ  11     λ  λ  λ  1    λ  λ  1       λ  441      λ  11     λ  2  11       λ  λ  λ  λ  13    2  64        λ  λ  λ  4  13        λ  λ  1    λ  λ  2   2     \lambda(\lambda 1(1((\lambda 11)(\lambda\lambda\lambda 1(\lambda\lambda 1)((%
 \lambda 441((\lambda 11)(\lambda 2(11))))(\lambda\lambda\lambda\lambda 13(2(64%
 )))))(\lambda\lambda\lambda 4(13)))))(\lambda\lambda 1(\lambda\lambda 2)2)     whose first 100 bits of output are     0011010100010100010100010000010100000100010100010000010000010100000100010100000100010000010000000100   0011010100010100010100010000010100000100010100010000010000010100000100010100000100010000010000000100   001101010001010001010001000001010000010001010001000001000001010000010001010000%
 0100010000010000000100     proves that       𝐾𝑆   (  𝑃𝑅𝐼𝑀𝐸𝑆  )    ≤  167        𝐾𝑆  𝑃𝑅𝐼𝑀𝐸𝑆   167    \mathit{KS}(\mathit{PRIMES})\leq 167   (a prime) while a simple variation proves       𝐾𝑃   (  𝑃𝑅𝐼𝑀𝐸𝑆  )    ≤  176        𝐾𝑃  𝑃𝑅𝐼𝑀𝐸𝑆   176    \mathit{KP}(\mathit{PRIMES})\leq 176     This is even shorter than Haskell's 23 byte long  nubBy((( > 1 ) . ) . gcd)[ 2 .. ]  Symmetry of information  The program      (  λ  1   (  λ  λ  2  )    (  λ  1   (  λ  λ  1  )   )    (  λ  λ  λ   (  λ  1   (  32  )    (  λ  λ  31   (  611   (  4   (   (  λ  11  )    (  λ  λ  λ  λ  λ  12   (  λ  1   (  λ  λ  1  )    (  λ  λ  λ  82  )    (  λ  λ  1  )    (  4   (  66  )    (  λ  4   (  λ  172  )   )   )   )   )   )   5  )          fragments  normal-(  λ  1   fragments  normal-(  λ  λ  2  normal-)    fragments  normal-(  λ  1   fragments  normal-(  λ  λ  1  normal-)   normal-)    fragments  normal-(  λ  λ  λ   fragments  normal-(  λ  1   fragments  normal-(  32  normal-)    fragments  normal-(  λ  λ  31   fragments  normal-(  611   fragments  normal-(  4   fragments  normal-(   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  λ  λ  λ  12   fragments  normal-(  λ  1   fragments  normal-(  λ  λ  1  normal-)    fragments  normal-(  λ  λ  λ  82  normal-)    fragments  normal-(  λ  λ  1  normal-)    fragments  normal-(  4   fragments  normal-(  66  normal-)    fragments  normal-(  λ  4   fragments  normal-(  λ  172  normal-)   normal-)   normal-)   normal-)   normal-)   normal-)   5  normal-)         (\lambda 1(\lambda\lambda 2)(\lambda 1(\lambda\lambda 1))(\lambda\lambda%
 \lambda(\lambda 1(32)(\lambda\lambda 31(611(4((\lambda 11)(\lambda\lambda%
 \lambda\lambda\lambda 12(\lambda 1(\lambda\lambda 1)(\lambda\lambda\lambda 82)%
 (\lambda\lambda 1)(4(66)(\lambda 4(\lambda 172))))))5)            (  λ  λ  1  )    (  λ  λ  λ  λ  1  )    (  λ  λ  2  )    (  λ  λ  1  )   )    (  λ  λ  λ  1   (  λ  164  )   2  )   )   )    (  4   (  λ  1  )    (  λ  1  )    (  λ  1  )   1  )   )    (  λ  1  )   )  (  λ  λ   (  λ  11  )    (  λ  λ  λ  λ  1   (  λ   (  λ  λ  λ  λ  3   (  λ  6   (  3   (  λ  2   (  3            fragments   fragments   fragments   fragments   fragments   fragments  normal-(  λ  λ  1  normal-)    fragments  normal-(  λ  λ  λ  λ  1  normal-)    fragments  normal-(  λ  λ  2  normal-)    fragments  normal-(  λ  λ  1  normal-)   normal-)    fragments  normal-(  λ  λ  λ  1   fragments  normal-(  λ  164  normal-)   2  normal-)   normal-)   normal-)    fragments  normal-(  4   fragments  normal-(  λ  1  normal-)    fragments  normal-(  λ  1  normal-)    fragments  normal-(  λ  1  normal-)   1  normal-)   normal-)    fragments  normal-(  λ  1  normal-)   normal-)  normal-(  λ  λ   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  λ  λ  1   fragments  normal-(  λ   fragments  normal-(  λ  λ  λ  λ  3   fragments  normal-(  λ  6   fragments  normal-(  3   fragments  normal-(  λ  2   fragments  normal-(  3           (\lambda\lambda 1)(\lambda\lambda\lambda\lambda 1)(\lambda\lambda 2)(\lambda%
 \lambda 1))(\lambda\lambda\lambda 1(\lambda 164)2)))(4(\lambda 1)(\lambda 1)(%
 \lambda 1)1))(\lambda 1))(\lambda\lambda(\lambda 11)(\lambda\lambda\lambda%
 \lambda 1(\lambda(\lambda\lambda\lambda\lambda 3(\lambda 6(3(\lambda 2(3               (  λ  14   (  λ  3   (  λ  123  )   )   )   )    (  4   (  λ  4   (  λ  14   (  31  )    (  21  )   )   )   )   )   )    (  1   (  2   (  λ  12  )   )    (  λ  λ  5   (  λ  5   (  λ  2   (  15  )   )   )   76  )   )    (  λ  6   (  λ  132  )   )   )   )    (  λ  4   (  λ  132  )   )   )    (  44  )   3  )   )     fragments   fragments   fragments   fragments   fragments   fragments   fragments   fragments   fragments  normal-(  λ  14   fragments  normal-(  λ  3   fragments  normal-(  λ  123  normal-)   normal-)   normal-)   normal-)    fragments  normal-(  4   fragments  normal-(  λ  4   fragments  normal-(  λ  14   fragments  normal-(  31  normal-)    fragments  normal-(  21  normal-)   normal-)   normal-)   normal-)   normal-)   normal-)    fragments  normal-(  1   fragments  normal-(  2   fragments  normal-(  λ  12  normal-)   normal-)    fragments  normal-(  λ  λ  5   fragments  normal-(  λ  5   fragments  normal-(  λ  2   fragments  normal-(  15  normal-)   normal-)   normal-)   76  normal-)   normal-)    fragments  normal-(  λ  6   fragments  normal-(  λ  132  normal-)   normal-)   normal-)   normal-)    fragments  normal-(  λ  4   fragments  normal-(  λ  132  normal-)   normal-)   normal-)    fragments  normal-(  44  normal-)   3  normal-)   normal-)    (\lambda 14(\lambda 3(\lambda 123))))(4(\lambda 4(\lambda 14(31)(21))))))(1(2(%
 \lambda 12))(\lambda\lambda 5(\lambda 5(\lambda 2(15)))76))(\lambda 6(\lambda 1%
 32))))(\lambda 4(\lambda 132)))(44)3))     proves that      K  P   (  x  ,  y  )   ≤  K  P   (  x  )   +  K  P   (  y  |   x  ∗   )   +  657     fragments  K  P   fragments  normal-(  x  normal-,  y  normal-)    K  P   fragments  normal-(  x  normal-)    K  P   fragments  normal-(  y  normal-|   superscript  x  normal-∗   normal-)    657    KP(x,y)\leq KP(x)+KP(y|x^{\ast})+657   where    x  ∗     superscript  x  normal-∗    x^{\ast}   is a shortest program for x .  This inequality is the easy half of an equality (up to a constant) known as Symmetry of information . Proving the converse      K  P   (  y  |   x  ∗   )   ≤  K  P   (  x  ,  y  )   -  K  P   (  x  )   +  O   (  1  )      fragments  K  P   fragments  normal-(  y  normal-|   superscript  x  normal-∗   normal-)    K  P   fragments  normal-(  x  normal-,  y  normal-)    K  P   fragments  normal-(  x  normal-)    O   fragments  normal-(  1  normal-)     KP(y|x^{\ast})\leq KP(x,y)-KP(x)+O(1)   involves simulating infinitely many programs in dovetailing fashion, seeing which ones halt and output the pair of x (for which a shortest program is given) and any y , and for each such program p , requesting a new codeword for y of length     ℓ   (  p  )    -   K  P   (  x  )          normal-ℓ  p     K  P  x     \ell(p)-KP(x)   . The Kraft inequality ensures that this infinite enumeration of requests can be fulfilled, and in fact codewords for y can be decoded on the fly, in tandem with the above enumeration. Details of this fundamental result by Chaitin can be found in. 3  A quine  The term    Q  =   λ  1   (    (   λ  11   )    (   λ  λ  λ  λ  λ  14   (   3   (  55  )   2   )    )    )   1       Q    λ  1      λ  11     λ  λ  λ  λ  λ  14    3  55  2     1     Q=\lambda 1((\lambda 11)(\lambda\lambda\lambda\lambda\lambda 14(3(55)2)))1   concatenates two copies of its input, proving that       K  S   (   x  x   )    ≤    ℓ   (  x  )    +  66         K  S    x  x        normal-ℓ  x   66     KS(xx)\leq\ell(x)+66   Applying it to its own encoding gives a 132 bit quine :      U   (   Q  ^    Q  ^   :  N  i  l  )   =   Q  ^    Q  ^      fragments  U   fragments  normal-(   normal-^  Q    normal-^  Q   normal-:  N  i  l  normal-)     normal-^  Q    normal-^  Q     U(\widehat{Q}\widehat{Q}:Nil)=\widehat{Q}\widehat{Q}     Compression  So far, we've seen surprisingly little in the way of actually compressing an object into a shorter description; in the last example, we were only breaking even. For     ℓ   (  x  )    >  66        normal-ℓ  x   66    \ell(x)>66   though, we do actually compress    x  x      x  x    xx   by     ℓ   (  x  )    -  66        normal-ℓ  x   66    \ell(x)-66   bits.  What could be the shortest program that produces a larger output? The following is a good candidate: the program     (   λ  1111   (   λ  λ  1   (   λ  λ  1   )   2   )    )    (   λ  λ  2   (  21  )    )         λ  1111    λ  λ  1    λ  λ  1   2      λ  λ  2  21     (\lambda 1111(\lambda\lambda 1(\lambda\lambda 1)2))(\lambda\lambda 2(21))   , of size 55 bits, uses Church numerals to output exactly     2   2   2  2     =  65536       superscript  2   superscript  2   superscript  2  2     65536    2^{2^{2^{2}}}=65536   ones. That beats both gzip and bzip2 , compressors that need 344 and 352 bits respectively, to describe the same output (as an 8192 byte file with a single letter name).  Halting probability  The halting probability of the prefix universal machine is defined as the probability it will output any term that has a closed normal form (this includes all translated strings):       Ω  λ   =    ∑   U   (  p  :  z  )   =   ⟨  x  ,  z  ⟩   ,  x  ∈  N  F     2   -   ℓ   (  p  )            subscript  normal-Ω  λ     subscript    fragments  U   fragments  normal-(  p  normal-:  z  normal-)     fragments  normal-⟨  x  normal-,  z  normal-⟩   normal-,  x   N  F     superscript  2      normal-ℓ  p        \Omega_{\lambda}=\sum_{U(p:z)=\langle x,z\rangle,\,x\in NF}2^{-\ell(p)}     With some effort, we can determine the first 4 bits of this particular number of wisdom:       Ω  λ   =   .0001   …  2         subscript  normal-Ω  λ     .0001   subscript  normal-…  2      \Omega_{\lambda}=.0001\ldots_{2}   where probability .0001 2 = 2 −4 is already contributed by programs 00100 and 00101 for terms True and False.  BLC8: byte sized I/O  While bit streams are nice in theory, they fare poorly in interfacing with the real world. The language BLC8 is a more practical variation on BLC in which programs operate on a stream of bytes, where each byte is represented as a delimited list of 8 bits in big-endian order.  BLC8 requires a more complicated universal machine:      U  8  =  λ  1   (   (  λ  11  )    (  λ   (  λ  λ  λ  1   (  λ  λ  λ  2   (  λ  λ  λ   (  λ  7   (  10   (  λ  5   (  2   (  λ  λ  3   (  λ  123  )   )   )    (  11   (  λ  3   (  λ  31   (  21  )   )   )   )   )   3  )            fragments  U  8   λ  1   fragments  normal-(   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ   fragments  normal-(  λ  λ  λ  1   fragments  normal-(  λ  λ  λ  2   fragments  normal-(  λ  λ  λ   fragments  normal-(  λ  7   fragments  normal-(  10   fragments  normal-(  λ  5   fragments  normal-(  2   fragments  normal-(  λ  λ  3   fragments  normal-(  λ  123  normal-)   normal-)   normal-)    fragments  normal-(  11   fragments  normal-(  λ  3   fragments  normal-(  λ  31   fragments  normal-(  21  normal-)   normal-)   normal-)   normal-)   normal-)   3  normal-)           U8=\lambda 1((\lambda 11)(\lambda(\lambda\lambda\lambda 1(\lambda\lambda%
 \lambda 2(\lambda\lambda\lambda(\lambda 7(10(\lambda 5(2(\lambda\lambda 3(%
 \lambda 123)))(11(\lambda 3(\lambda 31(21)))))3)             (  4   (  1   (  λ  15  )   3  )    (  10   (  λ  2   (  λ  2   (  16  )   )   )   6  )   )   )   8  )    (  λ  1   (  λ  87   (  λ  162  )   )   )   )    (  λ  1   (  43  )   )   )    (  11  )   )    (  λ  λ  2   (   (  λ  11  )    (  λ  11  )   )   )   )     fragments   fragments   fragments   fragments   fragments   fragments   fragments  normal-(  4   fragments  normal-(  1   fragments  normal-(  λ  15  normal-)   3  normal-)    fragments  normal-(  10   fragments  normal-(  λ  2   fragments  normal-(  λ  2   fragments  normal-(  16  normal-)   normal-)   normal-)   6  normal-)   normal-)   normal-)   8  normal-)    fragments  normal-(  λ  1   fragments  normal-(  λ  87   fragments  normal-(  λ  162  normal-)   normal-)   normal-)   normal-)    fragments  normal-(  λ  1   fragments  normal-(  43  normal-)   normal-)   normal-)    fragments  normal-(  11  normal-)   normal-)    fragments  normal-(  λ  λ  2   fragments  normal-(   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  11  normal-)   normal-)   normal-)   normal-)    (4(1(\lambda 15)3)(10(\lambda 2(\lambda 2(16)))6)))8)(\lambda 1(\lambda 87(%
 \lambda 162))))(\lambda 1(43)))(11))(\lambda\lambda 2((\lambda 11)(\lambda 11)%
 )))     The parser in U8 keeps track of both remaining bytes, and remaining bits in the current byte, discarding the latter when parsing is completed. Thus the size of U8, which is 355 bits as a BLC program, is 45 bytes in BLC8.  Brainfuck  The following BLC8 program       (  λ  11  )    (  λ   (  λ  λ  λ  1   (  λ   (  λ  2111   (  λ  λ  133   (  λ  λ  1   (  λ  λ   (  λ  7   (  1   (  3   (  λ  λ  λ  λ  λ   10  ¯    (  1   (  λ  6143  )   )    (  λ  15   (  65432  )   )   )    (  λ  λ  2   (   (  λ  11  )    (  λ  λ  λ  2                  fragments   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ   fragments  normal-(  λ  λ  λ  1   fragments  normal-(  λ   fragments  normal-(  λ  2111   fragments  normal-(  λ  λ  133   fragments  normal-(  λ  λ  1   fragments  normal-(  λ  λ   fragments  normal-(  λ  7   fragments  normal-(  1   fragments  normal-(  3   fragments  normal-(  λ  λ  λ  λ  λ   normal-¯  10    fragments  normal-(  1   fragments  normal-(  λ  6143  normal-)   normal-)    fragments  normal-(  λ  15   fragments  normal-(  65432  normal-)   normal-)   normal-)    fragments  normal-(  λ  λ  2   fragments  normal-(   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  λ  2                 (\lambda 11)(\lambda(\lambda\lambda\lambda 1(\lambda(\lambda 2111(\lambda%
 \lambda 133(\lambda\lambda 1(\lambda\lambda(\lambda 7(1(3(\lambda\lambda%
 \lambda\lambda\lambda\underline{10}(1(\lambda 6143))(\lambda 15(65432)))(%
 \lambda\lambda 2((\lambda 11)(\lambda\lambda\lambda 2            (  λ  λ  λ  662   (  λ  λ  6   (  λ  1   (  26  )   3  )    (   15  ¯    (  51   (  λ  1  )   )    (  5   (  λ  1  )   1  )   )   )   )    (  12   (  λ  λ  λ  312  )   )   )   1   (  λ  λ  2  )   )   )   )   )  (  3   (  1   (  λ  λ  λ  λ  9   (  1   (  λ  51   (  λ  154  )   )   )        fragments   fragments   fragments   fragments   fragments   fragments  normal-(  λ  λ  λ  662   fragments  normal-(  λ  λ  6   fragments  normal-(  λ  1   fragments  normal-(  26  normal-)   3  normal-)    fragments  normal-(   normal-¯  15    fragments  normal-(  51   fragments  normal-(  λ  1  normal-)   normal-)    fragments  normal-(  5   fragments  normal-(  λ  1  normal-)   1  normal-)   normal-)   normal-)   normal-)    fragments  normal-(  12   fragments  normal-(  λ  λ  λ  312  normal-)   normal-)   normal-)   1   fragments  normal-(  λ  λ  2  normal-)   normal-)   normal-)   normal-)   normal-)  normal-(  3   fragments  normal-(  1   fragments  normal-(  λ  λ  λ  λ  9   fragments  normal-(  1   fragments  normal-(  λ  51   fragments  normal-(  λ  154  normal-)   normal-)   normal-)       (\lambda\lambda\lambda 662(\lambda\lambda 6(\lambda 1(26)3)(\underline{15}(51(%
 \lambda 1))(5(\lambda 1)1))))(12(\lambda\lambda\lambda 312)))1(\lambda\lambda 2%
 )))))(3(1(\lambda\lambda\lambda\lambda 9(1(\lambda 51(\lambda 154)))           (  24   (  λ  142  )   )   )   )    (  5   (   11  ¯    (  λ  1  )   )    (   12  ¯    (  λ  2   (   (  λ  11  )    (  λ  λ  λ  1   (   (  λ  11  )    (  λ  λ  λ  2   (  1   (  33  )   )    (  λ  8   (  771  )   )   )   )   21  )   )   )   )   )   )   )  (  λ   12  ¯    (  λ   12  ¯    (  λ  3       fragments   fragments   fragments   fragments   fragments  normal-(  24   fragments  normal-(  λ  142  normal-)   normal-)   normal-)   normal-)    fragments  normal-(  5   fragments  normal-(   normal-¯  11    fragments  normal-(  λ  1  normal-)   normal-)    fragments  normal-(   normal-¯  12    fragments  normal-(  λ  2   fragments  normal-(   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  λ  1   fragments  normal-(   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  λ  2   fragments  normal-(  1   fragments  normal-(  33  normal-)   normal-)    fragments  normal-(  λ  8   fragments  normal-(  771  normal-)   normal-)   normal-)   normal-)   21  normal-)   normal-)   normal-)   normal-)   normal-)   normal-)   normal-)  normal-(  λ   normal-¯  12    fragments  normal-(  λ   normal-¯  12    fragments  normal-(  λ  3      (24(\lambda 142))))(5(\underline{11}(\lambda 1))(\underline{12}(\lambda 2((%
 \lambda 11)(\lambda\lambda\lambda 1((\lambda 11)(\lambda\lambda\lambda 2(1(33)%
 )(\lambda 8(771))))21)))))))(\lambda\underline{12}(\lambda\underline{12}(\lambda
 3                 (  21  )   )   )   )   )   )   )   )    (  λ  λ  1  )   )   )    (  11  )   )  (  λ   (  λ  11  )    (  λ  λ  1   (   (  λ  1   (  1   (  1   (  λ  λ  1   (  λ  λ  2  )   2  )   )   )   )    (  λ  λ  2   (  21  )   )    (  λ  λ  1  )   )    (  22  )   )    (  1   (  λ  λ  λ  λ  λ  λ  1  )   )   1  )     fragments   fragments   fragments   fragments   fragments   fragments   fragments   fragments   fragments   fragments   fragments  normal-(  21  normal-)   normal-)   normal-)   normal-)   normal-)   normal-)   normal-)   normal-)    fragments  normal-(  λ  λ  1  normal-)   normal-)   normal-)    fragments  normal-(  11  normal-)   normal-)  normal-(  λ   fragments  normal-(  λ  11  normal-)    fragments  normal-(  λ  λ  1   fragments  normal-(   fragments  normal-(  λ  1   fragments  normal-(  1   fragments  normal-(  1   fragments  normal-(  λ  λ  1   fragments  normal-(  λ  λ  2  normal-)   2  normal-)   normal-)   normal-)   normal-)    fragments  normal-(  λ  λ  2   fragments  normal-(  21  normal-)   normal-)    fragments  normal-(  λ  λ  1  normal-)   normal-)    fragments  normal-(  22  normal-)   normal-)    fragments  normal-(  1   fragments  normal-(  λ  λ  λ  λ  λ  λ  1  normal-)   normal-)   1  normal-)    (21))))))))(\lambda\lambda 1)))(11))(\lambda(\lambda 11)(\lambda\lambda 1((%
 \lambda 1(1(1(\lambda\lambda 1(\lambda\lambda 2)2))))(\lambda\lambda 2(21))(%
 \lambda\lambda 1))(22))(1(\lambda\lambda\lambda\lambda\lambda\lambda 1))1)     is an unbounded tape Brainfuck interpreter in 829 bits (under 104 bytes). The formatting obscures the occurrence of double digit indices: a 10 on line 1, a 15 on line 2, and an 11 and three 12s on line 3. These indices are marked with underlines to distinguish them from single digit indices.  This provides a nice example of the property that universal description methods differ by at most a constant in complexity. Writing a BLC8 interpreter in Brainfuck, which would provide a matching upper bound in the other direction, is left as an exercise for die-hard Brainfuck programmers.  The interpreter expects its input to consist of a Brainfuck program followed by a ] followed by the input for the Brainfuck program. The interpreter only looks at bits 0,1,4 of each character to determine which of ,-.+<>][ it is, so any characters other than those 8 should be stripped from a Brainfuck program. Consuming more input than is available results in an error (the non-list result     λ  x   .  x     formulae-sequence    λ  x   x    \lambda x.x   ).  This interpreter is a rough translation of the following version written in Haskell  import System.Environment (getArgs) import Control.Monad.State  import Control.Monad.Writer  import Control.Applicative  hiding ((<|>),many) import Text.ParserCombinators.Parsec putc =  do (     _,      _,b,      _) <- get; tell [b]
 getc =  do (  left,  right,_,b : input) <- get; put (  left,  right,     b,input)
 prev =  do (l : left,  right,b,  input) <- get; put (  left,b : right,     l,input)
 next =  do (  left,r : right,b,  input) <- get; put (b : left,  right,     r,input)
 decr =  do (  left,  right,b,  input) <- get; put (  left,  right,pred b,input)
 incr =  do (  left,  right,b,  input) <- get; put (  left,  right,succ b,input)
 loop body =  do (_,_,b,_) <- get; when (b /=  '\0' ) (body >> loop body)
 parseInstr = liftM loop (between (char '[' ) (char ']' ) parseInstrs) <|> prev <$ char '<'  <|> next <$ char '>'  <|> decr <$ char '-'  <|> incr <$ char '+'  <|> putc <$ char '.'  <|> getc <$ char ','  <|> return () <$ noneOf "]" parseInstrs = liftM sequence_ (many parseInstr)
 main =  do [name] <- getArgs
           source <- readFile name
           input <- getContents let init = ( "" , repeat '\0' , '\0' , input)
           putStrLn $ either show (execWriter . ( `evalStateT` init)) (parse parseInstrs name source)  See also   Binary combinatory logic   References    External links   John's Lambda Calculus and Combinatory Logic Playground  A Binary Lambda Calculus interpreter in C for the IOCCC  Counting Terms in the Binary Lambda Calculus   "  Category:Algorithmic information theory  Category:Lambda calculus     John Tromp, Binary Lambda Calculus and Combinatory Logic, in Randomness And Complexity, from Leibniz To Chaitin , ed. Cristian S. Calude, World Scientific Publishing Company, October 2008. (The last reference, to an initial Haskell implementation, is dated 2004) (pdf version) ↩   G J Chaitin, Algorithmic information theory , Volume I in Cambridge Tracts in Theoretical Computer Science, Cambridge University Press, October 1987, (pdf version) ↩    