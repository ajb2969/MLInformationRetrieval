   Kig (software)      Kig (software)  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     Kig is free and open-source  interactive geometry software , which is part of the KDE edutainment project . It has some facilities for scripting in Python , as well as the creating macros from existing constructions.  Import and export  Kig can import files made by DrGeo and Cabri Geometry as well as its own file format, which is XML -encoded. Kig can export figures in LaTeX format and as SVG (vector graphics) files.  Objects  Kig can handle any classical object of the dynamic geometry, but also:   The center of curvature and osculating circle of a curve;  The dilation , generic affinity , inversion , projective application , homography and harmonic homology ;  The hyperbola with given asymptotes ;  The Beziers curves (2nd and 3rd degree);  The polar line of a point and pole of a line with respect to a conic section ;  The asymptotes of a hyperbola ;  The cubic curve through 9 points;  The cubic curve with a double point through 6 points;  The cubic curve with a cusp through 4 points.   Scripting language  Inside the figure  Another object is available inside Kig, it is a Python language script. It can accept Kig objects as variables, and always return one object.  For example, if there is already a numeric object inside the figure, for example 3, the following Python object can yield its square (9):  def square( arg1 ): return DoubleObject( arg1.value() ** 2 )  The variables are always called arg1 , arg2 etc. in the order they are clicked upon. Here there is only one variable arg1 and its numerical value is obtained with arg1.value() .  If now one wants to implement the square of a complex number (represented by a point in the Argand diagram ), the object which has to be selected at the creation of the script must necessarily be a point, and the script is  def csquare( arg1 ):
         x = arg1.coordinate().x
         y = arg1.coordinate().y
         z = x * x - y * y
         y = 2 * x * y
         x = z return Point( Coordinate(x,y) )  The abscissa of the point representing the square of the complex number is     x  2   -   y  2        superscript  x  2    superscript  y  2     x^{2}-y^{2}   as can be seen by expanding      (   x  +   i  y    )   2   =     x  2   -   y  2    +   i   (   2  x  y   )          superscript    x    i  y    2        superscript  x  2    superscript  y  2      i    2  x  y       (x+iy)^{2}=x^{2}-y^{2}+i(2xy)   . Coordinate(x,y) creates a Python list made of the two coordinates of the new point. And Point creates the point which coordinates are precisely given by this list.  But a Python object inside a figure can only create one object and for more complex figures one has to build the figure with a script:  Figure created by a script  Kig comes up with a little program (written in Python) called pikyg.py which can   load a Python script, e.g. MyScript.py  build a Kig figure, described by this script  open Kig and display the figure.   For example, here is how a Sierpinski triangle can be made (as an IFS ) with pykig :  from random import  * kigdocument.hideobjects()
 A = Point( 0 , 2 )
 A.show()
 B = Point( - 2 , - 1 )
 B.show()
 C = Point( 2 , - 1 )
 C.show()
 M = Point(. 1 ,. 1 ) for i in  range ( 1 , 1000 ):
   d = randrange( 3 ) if d == 0 :
     s = Segment(A,M)
     M = s.midpoint() if d == 1 :
     s = Segment(B,M)
     M = s.midpoint() if d == 2 :
     s = Segment(C,M)
     M = s.midpoint()
   M.show()  References  External links    The Kig Handbook  Thomas G. Pfeiffer: Erstellen geometrischer Skizzen mit kig . Freies Magazin, December 2009 (German)  Mike Diehl: Teaching Math with the KDE Interactive Geometry Program . Linux Journal, 2009-09-19   "  Category:KDE Software Compilation  Category:KDE software  Category:KDE Education Project  Category:Software that uses Qt  Category:Free interactive geometry software  Category:Free educational software  