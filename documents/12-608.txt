   PROPT      PROPT  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     The PROPT 1  MATLAB  Optimal Control Software is a new generation platform for solving applied optimal control (with ODE or DAE formulation) and parameters estimation problems.  The platform was developed by MATLAB Programming Contest Winner, Per Rutquist in 2008. The most recent version has support for binary and integer variables as well as an automated scaling module.  Description  PROPT is a combined modeling , compilation and solver engine, built upon the TomSym modeling class, for generation of highly complex optimal control problems. PROPT uses a pseudospectral  Collocation method (with Gauss or Chebyshev points) for solving optimal control problems. This means that the solution takes the form of a Polynomial , and this polynomial satisfies the DAE and the path constraints at the collocation points.  In general PROPT has the following main functions:   Computation of the constant matrices used for the differentiation and integration of the polynomials used to approximate the solution to the Trajectory optimization problem.    Source transformation to turn user-supplied expressions into MATLAB code for the cost function   f   f   f   and constraint function   c   c   c   that are passed to a Nonlinear programming solver in TOMLAB . The source transformation package TomSym automatically generates first and second order derivatives.    Functionality for plotting and computing a variety of information for the solution to the problem.    Automatic detection of the following:  Linear and quadratic objective.  Simple bounds, linear and nonlinear constraints.  Non-optimized expressions.     Integrated support for non-smooth 2 (hybrid) optimal control problems.    Module for automatic scaling of difficult space related problem.    Support for binary and integer variables, controls or states.   Modeling  The PROPT system uses the TomSym symbolic source transformation engine to model optimal control problems. It is possible to define independent variables, dependent functions, scalars and constant parameters:  toms tf
  toms t
  p = tomPhase( 'p' , t, 0 , tf, 30 );
  x0 = {tf == 20 };
  cbox = { 10 <= tf <= 40 };
 
  toms z1
  cbox = {cbox; 0 <= z1 <= 500 };
  x0 = {x0; z1 == 0 };
 
  ki0 = [ 1e3 ; 1e7 ; 10 ; 1e-3 ];  States and controls  States and controls only differ in the sense that states need be continuous between phases.  tomStates x1
  x0 = {icollocate({x1 == 0 })};
 
  tomControls u1
  cbox = {- 2 <= collocate(u1) <= 1 };
  x0 = {x0; collocate(u1 == - 0.01 )};  Boundary, path, event and integral constraints  A variety of boundary, path, event and integral constraints are shown below:  cbnd = initial(x1 == 1 ); % Starting point for x1 cbnd = final(x1 == 1 ); % End point for x1 cbnd = final(x2 == 2 ); % End point for x2 pathc = collocate(x3 >= 0.5 ); % Path constraint for x3 intc  = {integrate(x2) == 1 }; % Integral constraint for x2 cbnd = final(x3 >= 0.5 ); % Final event constraint for x3 cbnd = initial(x1 <= 2.0 ); % Initial event constraint x1  Single-phase optimal control example  Van der Pol Oscillator  3  Minimize:         J   x  ,  t      =      x  3    (   t  f   )           subscript  J   x  t        subscript  x  3    subscript  t  f       \begin{matrix}J_{x,t}&=&x_{3}(t_{f})\\
 \end{matrix}     Subject to:      {        d   x  1     d  t    =      (   1  -   x  2  2    )   *   x  1    -   x  2    +  u            d   x  2     d  t    =   x  1            d   x  3     d  t    =    x  1  2   +   x  2  2   +   u  2            x   (   t  0   )    =   [  0 1 0  ]           t  f   =  5          -  0.3   ≤  u  ≤  1.0          cases        d   subscript  x  1      d  t            1   superscript   subscript  x  2   2     subscript  x  1     subscript  x  2    u    otherwise        d   subscript  x  2      d  t     subscript  x  1    otherwise        d   subscript  x  3      d  t       superscript   subscript  x  1   2    superscript   subscript  x  2   2    superscript  u  2     otherwise      x   subscript  t  0     delimited-[]  0 1 0    otherwise     subscript  t  f   5   otherwise        0.3   u       1.0    otherwise    \begin{cases}\frac{dx_{1}}{dt}=(1-x_{2}^{2})*x_{1}-x_{2}+u\\
 \frac{dx_{2}}{dt}=x_{1}\\
 \frac{dx_{3}}{dt}=x_{1}^{2}+x_{2}^{2}+u^{2}\\
 x(t_{0})=[0\ 1\ 0]\\
 t_{f}=5\\
 -0.3\leq u\leq 1.0\\
 \end{cases}     To solve the problem with PROPT the following code can be used (with 60 collocation points):  toms t
 p = tomPhase( 'p' , t, 0 , 5 , 60 );
 setPhase(p);
 
 tomStates x1 x2 x3
 tomControls u % Initial guess x0 = {icollocate({x1 == 0 ; x2 == 1 ; x3 == 0 })
     collocate(u == - 0.01 )}; % Box constraints cbox = {- 10 <= icollocate(x1) <= 10 - 10 <= icollocate(x2) <= 10 - 10 <= icollocate(x3) <= 10 - 0.3 <= collocate(u)   <= 1 }; % Boundary constraints cbnd = initial({x1 == 0 ; x2 == 1 ; x3 == 0 }); % ODEs and path constraints ceq = collocate({dot(x1) == ( 1 -x2.^ 2 ).*x1-x2+u
     dot(x2) == x1; dot(x3) == x1.^ 2 +x2.^ 2 +u.^ 2 }); % Objective objective = final(x3); % Solve the problem options = struct;
 options.name = 'Van Der Pol' ;
 solution = ezsolve(objective, {cbox, cbnd, ceq}, x0, options);  Multi-phase optimal control example  One-dimensional rocket  4 with free end time and undetermined phase shift  Minimize:         J   x  ,  t      =     t  C  u  t          subscript  J   x  t       t  C  u  t      \begin{matrix}J_{x,t}&=&tCut\\
 \end{matrix}     Subject to:      {        d   x  1     d  t    =   x  2            d   x  2     d  t    =  a  -   g    (  0  <  t  ≤  t  C  u  t  )            d   x  2     d  t    =  -   g    (  t  C  u  t  <  t  <   t  f   )           x   (   t  0   )    =   [  0 0  ]          g  =  1         a  =  2           x  1    (   t  f   )    =  100          cases        d   subscript  x  1      d  t     subscript  x  2    otherwise   fragments      d   subscript  x  2      d  t     a   g   fragments  normal-(  0   t   t  C  u  t  normal-)    otherwise   fragments      d   subscript  x  2      d  t      g   fragments  normal-(  t  C  u  t   t    subscript  t  f   normal-)    otherwise      x   subscript  t  0     delimited-[]  0 0    otherwise    g  1   otherwise    a  2   otherwise       subscript  x  1    subscript  t  f    100   otherwise    \begin{cases}\frac{dx_{1}}{dt}=x_{2}\\
 \frac{dx_{2}}{dt}=a-g\ (0     The problem is solved with PROPT by creating two phases and connecting them:  toms t
 toms tCut tp2
 p1 = tomPhase( 'p1' , t, 0 , tCut, 20 );
 p2 = tomPhase( 'p2' , t, tCut, tp2, 20 );
 
 tf = tCut+tp2;
 
 x1p1 = tomState(p1, 'x1p1' );
 x2p1 = tomState(p1, 'x2p1' );
 x1p2 = tomState(p2, 'x1p2' );
 x2p2 = tomState(p2, 'x2p2' ); % Initial guess x0 = {tCut== 10 tf== 15 icollocate(p1,{x1p1 == 50 *tCut/ 10 ;x2p1 == 0 ;})
     icollocate(p2,{x1p2 == 50 + 50 *t/ 100 ;x2p2 == 0 ;})}; % Box constraints cbox = { 1 <= tCut <= tf- 0.00001 tf <= 100  0 <= icollocate(p1,x1p1) 0 <= icollocate(p1,x2p1) 0 <= icollocate(p2,x1p2) 0 <= icollocate(p2,x2p2)}; % Boundary constraints cbnd = {initial(p1,{x1p1 == 0 ;x2p1 == 0 ;})
     final(p2,x1p2 == 100 )}; % ODEs and path constraints a = 2 ; g = 1 ;
 ceq = {collocate(p1,{
     dot(p1,x1p1) == x2p1
     dot(p1,x2p1) == a-g})
     collocate(p2,{
     dot(p2,x1p2) == x2p2
     dot(p2,x2p2) == -g})}; % Objective objective = tCut; % Link phase link = {final(p1,x1p1) == initial(p2,x1p2)
     final(p1,x2p1) == initial(p2,x2p2)}; %% Solve the problem options = struct;
 options.name = 'One Dim Rocket' ;
 constr = {cbox, cbnd, ceq, link};
 solution = ezsolve(objective, constr, x0, options);  Parameter estimation example  Parameter estimation problem  5  Minimize:         J  p     =      ∑   i  =   1  ,  2  ,  3  ,  5       (     x  1    (   t  i   )    -    x  1  m    (   t  i   )     )   2           subscript  J  p      subscript     i   1  2  3  5      superscript       subscript  x  1    subscript  t  i       superscript   subscript  x  1   m    subscript  t  i     2       \begin{matrix}J_{p}&=&\sum_{i=1,2,3,5}{(x_{1}(t_{i})-x_{1}^{m}(t_{i}))^{2}}\\
 \end{matrix}     Subject to:      {        d   x  1     d  t    =   x  2            d   x  2     d  t    =   1  -   2  *   x  2    -   x  1            x  0   =   [     p  1     p  2    ]           t  i   =   [  1 2 3 5  ]            x  1  m    (   t  i   )    =   [  0.264 0.594 0.801 0.959  ]           |   p   1  :  2    |   ≤  1.5          cases        d   subscript  x  1      d  t     subscript  x  2    otherwise        d   subscript  x  2      d  t      1    2   subscript  x  2     subscript  x  1     otherwise     subscript  x  0    delimited-[]     subscript  p  1    subscript  p  2      otherwise     subscript  t  i    delimited-[]  1 2 3 5    otherwise       superscript   subscript  x  1   m    subscript  t  i     delimited-[]  0.264 0.594 0.801 0.959    otherwise       subscript  p   normal-:  1  2     1.5   otherwise    \begin{cases}\frac{dx_{1}}{dt}=x_{2}\\
 \frac{dx_{2}}{dt}=1-2*x_{2}-x_{1}\\
 x_{0}=[p_{1}\ p_{2}]\\
 t_{i}=[1\ 2\ 3\ 5]\\
 x_{1}^{m}(t_{i})=[0.264\ 0.594\ 0.801\ 0.959]\\
 |p_{1:2}|<=1.5\\
 \end{cases}     In the code below the problem is solved with a fine grid (10 collocation points). This solution is subsequently fine-tuned using 40 collocation points:  toms t p1 p2
 x1meas = [ 0.264 ; 0.594 ; 0.801 ; 0.959 ];
 tmeas  = [ 1 ; 2 ; 3 ; 5 ]; % Box constraints cbox = {- 1.5 <= p1 <= 1.5 - 1.5 <= p2 <= 1.5 }; %% Solve the problem, using a successively larger number collocation points for n=[ 10  40 ]
     p = tomPhase( 'p' , t, 0 , 6 , n);
     setPhase(p);
     tomStates x1 x2 % Initial guess if n == 10 x0 = {p1 == 0 ; p2 == 0 };
     else
         x0 = {p1 == p1opt; p2 == p2opt
             icollocate({x1 == x1opt; x2 == x2opt})};
     end % Boundary constraints cbnd = initial({x1 == p1; x2 == p2}); % ODEs and path constraints x1err = sum((atPoints(tmeas,x1) - x1meas).^ 2 );
     ceq = collocate({dot(x1) == x2; dot(x2) == 1 - 2 *x2-x1}); % Objective objective = x1err; %% Solve the problem options = struct;
     options.name   = 'Parameter Estimation' ;
     options.solver = 'snopt' ;
     solution = ezsolve(objective, {cbox, cbnd, ceq}, x0, options); % Optimal x, p for starting point x1opt = subs(x1, solution);
     x2opt = subs(x2, solution);
     p1opt = subs(p1, solution);
     p2opt = subs(p2, solution);
 end  Optimal control problems supported   Aerodynamic trajectory control 6  Bang-bang control 7  Chemical engineering 8  Dynamic systems 9  General optimal control  Large-scale linear control 10  Multi-phase system control 11  Mechanical engineering design 12  Nondifferentiable control 13  Parameters estimation for dynamic systems 14  Singular control   References  External links   TOMLAB - Developer and distributor of the software.  TomSym - Source transformation engine used in software.  PROPT - Home page for PROPT.  SNOPT - Default solver used in PROPT.   "  Category:Numerical software  Category:Mathematical optimization software  Category:Optimal control     ↩  ↩  "Van Der Pol Oscillator - Matlab Solution", PROPT Home Page June, 2008. ↩  "One Dimensional Rocket Launch (2 Free Time)", PROPT Home Page June, 2008. ↩  "Matlab Dynamic Parameter Estimation with PROPT", PROPT Home Page June, 2008. ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩    