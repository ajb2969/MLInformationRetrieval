


CMA-ES




CMA-ES
'''CMA-ES''' stands fo
 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   


r Covariance Matrix Adaptation Evolution Strategy. Evolution strategies (ES) are stochastic, derivative-free methods for numerical optimization of non-linear or non-convex continuous optimization problems. They belong to the class of evolutionary algorithms and evolutionary computation. An evolutionary algorithm is broadly based on the principle of biological evolution, namely the repeated interplay of variation (via recombination and mutation) and selection: in each generation (iteration) new individuals (candidate solutions, denoted as 
 
 
 
 ) are generated by variation, usually in a stochastic way, of the current parental individuals. Then, some individuals are selected to become the parents in the next generation based on their fitness or objective function value 
 
 
 
 . Like this, over the generation sequence, individuals with better and better 
 
 
 
 -values are generated.
In an evolution strategy, new candidate solutions are sampled according to a multivariate normal distribution in the 
 
 
 
 . Recombination amounts to selecting a new mean value for the distribution. Mutation amounts to adding a random vector, a perturbation with zero mean. Pairwise dependencies between the variables in the distribution are represented by a covariance matrix. The covariance matrix adaptation (CMA) is a method to update the covariance matrix of this distribution. This is particularly useful, if the function 
 
 
 
  is ill-conditioned.
Adaptation of the covariance matrix amounts to learning a second order model of the underlying objective function similar to the approximation of the inverse Hessian matrix in the Quasi-Newton method in classical optimization. In contrast to most classical methods, fewer assumptions on the nature of the underlying objective function are made. Only the ranking between candidate solutions is exploited for learning the sample distribution and neither derivatives nor even the function values themselves are required by the method.
Principles
 Two main principles for the adaptation of parameters of the search distribution are exploited in the CMA-ES algorithm.
First, a maximum-likelihood principle, based on the idea to increase the probability of successful candidate solutions and search steps. The mean of the distribution is updated such that the likelihood of previously successful candidate solutions is maximized. The covariance matrix of the distribution is updated (incrementally) such that the likelihood of previously successful search steps is increased. Both updates can be interpreted as a natural gradient descent. Also, in consequence, the CMA conducts an iterated principal components analysis of successful search steps while retaining all principal axes. Estimation of distribution algorithms and the Cross-Entropy Method are based on very similar ideas, but estimate (non-incrementally) the covariance matrix by maximizing the likelihood of successful solution points instead of successful search steps.
Second, two paths of the time evolution of the distribution mean of the strategy are recorded, called search or evolution paths. These paths contain significant information about the correlation between consecutive steps. Specifically, if consecutive steps are taken in a similar direction, the evolution paths become long. The evolution paths are exploited in two ways. One path is used for the covariance matrix adaptation procedure in place of single successful search steps and facilitates a possibly much faster variance increase of favorable directions. The other path is used to conduct an additional step-size control. This step-size control aims to make consecutive movements of the distribution mean orthogonal in expectation. The step-size control effectively prevents premature convergence yet allowing fast convergence to an optimum.
Algorithm
In the following the most commonly used (μ/μw, λ)-CMA-ES is outlined, where in each iteration step a weighted combination of the μ best out of λ new candidate solutions is used to update the distribution parameters. The main loop consists of three main parts: 1) sampling of new solutions, 2) re-ordering of the sampled solutions based on their fitness, 3) update of the internal state variables based on the re-ordered samples. A pseudocode of the algorithm looks as follows.
 set 

  // number of samples per iteration, at least two, generally > 4
 initialize 

, 

, 

, 

, 

  // initialize state variables
 while not terminate  // iterate
    for 

 in 

  // sample 

 new solutions and evaluate them
       

 = sample_multivariate_normal(mean=

, covariance_matrix=

)
       

 = fitness(

)
    

 ← 

 with 

 = argsort(

, 

)  // sort solutions
    

 = 

  // we need later 

 and 




 
  ← update_m
 
 

 
  // move mean to better solutions
    

 ← update_ps

 

  // update isotropic evolution path
    

 ← update_pc

 

 

  // update anisotropic evolution path
    

 ← update_C

 

 

 

  // update covariance matrix
    

 ← update_sigma

 

  // update step-size using isotropic path length
 return 

 or 

 
The order of the five update assignments is relevant. In the following, the update equations for the five state variables are specified.
Given are the search space dimension 
 
 
 
  and the iteration step 
 
 
 
 . The five state variables are


 
 , the distribution mean and current favorite solution to the optimization problem,


 
 , the step-size,


 
 , a symmetric and positive definite

covariance matrix with 
 
 
 
  and


 
 , two evolution paths, initially set to the zero vector.
The iteration starts with sampling 
 
 
 
  candidate solutions 
 
 
 
  from a multivariate normal distribution

 
 , i.e. for 
 
 







\begin{align}
 x_i \ &\sim\ \mathcal{N}(m_k,\sigma_k^2 C_k)      
    \\&\sim\ m_k + \sigma_k\times\mathcal{N}(0,C_k) 
\end{align}
 
The second line suggests the interpretation as perturbation (mutation) of the current favorite solution vector 
 
 
 
  (the distribution mean vector). The candidate solutions 
 
 
 
  are evaluated on the objective function 
 
 
 
  to be minimized. Denoting the 
 
 
 
 -sorted candidate solutions as



the new mean value is computed as






\begin{align}
 m_{k+1} &= \sum_{i=1}^{\mu} w_i\, x_{i:\lambda} 
 \\ &= m_k + \sum_{i=1}^{\mu} w_i\, (x_{i:\lambda} - m_k) 
\end{align}
 
where the positive (recombination) weights 
 
 
 
  sum to one. Typically, 
 
 
 
  and the weights are chosen such that 
 
 
 
 . The only feedback used from the objective function here and in the following is an ordering of the sampled candidate solutions due to the indices 
 
 
 
 .
The step-size 
 
 
 
  is updated using cumulative step-size adaptation (CSA), sometimes also denoted as path length control. The evolution path (or search path) 
 
 
 
  is updated first.






 p_\sigma \gets \underbrace{(1-c_\sigma)}_{\!\!\!\!\!\text{discount factor}\!\!\!\!\!}\, p_\sigma 
   + \overbrace{\sqrt{1 - (1-c_\sigma)^2}}^{
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\text{complements for discounted variance}
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!} \underbrace{\sqrt{\mu_w} 
    \,C_k^{\;-1/2} \, \frac{\overbrace{m_{k+1} - m_k}^{\!\!\!\text{displacement of}\; m\!\!\!}}{\sigma_k}}_{\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
                     \text{distributed as}\; \mathcal{N}(0,I)\;\text{under neutral selection}
                     \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!}
 






 \sigma_{k+1} = \sigma_k \times \exp\bigg(\frac{c_\sigma}{d_\sigma}
                         \underbrace{\left(\frac{\|p_\sigma\|}{E\|\mathcal{N}(0,I)\|} - 1\right)}_{\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
   \text{unbiased about 0 under neutral selection}
   \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
}\bigg)
 
where


 
  is the backward time horizon for the evolution path 
 
 
 
  and larger than one,


 
  is the variance effective selection mass and 
 
 
 
  by definition of 
 
 
 
 ,


 
  is the unique symmetric square root of the inverse of 
 
 
 
 , and


 
  is the damping parameter usually close to one. For 
 
 
 
  or 
 
 
 
  the step-size remains unchanged.
The step-size 
 
 
 
  is increased if and only if 
 
 
 
  is larger than the expected value



and decreased if it is smaller. For this reason, the step-size update tends to make consecutive steps 

 
 -conjugate, in that after the adaptation has been successful 
 
 
 
 .1
Finally, the covariance matrix is updated, where again the respective evolution path is updated first.






 p_c \gets \underbrace{(1-c_c)}_{\!\!\!\!\!\text{discount factor}\!\!\!\!\!}\, 
           p_c + 
    \underbrace{\mathbf{1}_{[0,\alpha\sqrt{n}]}(\|p_\sigma\|)}_{\text{indicator function}} 
    \overbrace{\sqrt{1 - (1-c_c)^2}}^{
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\text{complements for discounted variance}
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!}
    \underbrace{\sqrt{\mu_w} 
    \, \frac{m_{k+1} - m_k}{\sigma_k}}_{\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
                     \text{distributed as}\; \mathcal{N}(0,C_k)\;\text{under neutral selection}
                     \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!}
 






 C_{k+1} = \underbrace{(1 - c_1 - c_\mu + c_s)}_{\!\!\!\!\!\text{discount factor}\!\!\!\!\!}
              \, C_k + c_1 \underbrace{p_c p_c^T}_{
  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
  \text{rank one matrix}
  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!} 
        + \,c_\mu \underbrace{\sum_{i=1}^\mu w_i \frac{x_{i:\lambda} - m_k}{\sigma_k} 
            \left( \frac{x_{i:\lambda} - m_k}{\sigma_k} \right)^T}_{
                    \text{rank} \;\min(\mu,n)\; \text{matrix}}
 
where 
 
 
 
  denotes the transpose and


 
  is the backward time horizon for the evolution path 
 
 
 
  and larger than one,


 
  and the indicator function

 
  evaluates to one iff

 
  or, in other words, 
 
 
 
 , which is usually the case,


 
  makes partly up for the small variance loss in case the indicator is zero,


 
  is the learning rate for the rank-one update of the covariance matrix and


 
  is the learning rate for the rank-
 
 
 
  update of the covariance matrix and must not exceed 
 
 
 
 .
The covariance matrix update tends to increase the likelihood for 
 
 
 
  and for 
 
 
 
  to be sampled from 
 
 
 
 . This completes the iteration step.
The number of candidate samples per iteration, 
 
 
 
 , is not determined a priori and can vary in a wide range. Smaller values, for example 
 
 
 
 , lead to more local search behavior. Larger values, for example 
 
 
 
  with default value 
 
 
 
 , render the search more global. Sometimes the algorithm is repeatedly restarted with increasing 
 
 
 
  by a factor of two for each restart.2 Besides of setting 
 
 
 
  (or possibly 
 
 
 
  instead, if for example 
 
 
 
  is predetermined by the number of available processors), the above introduced parameters are not specific to the given objective function and therefore not meant to be modified by the user.
Example code in MATLAB/Octave
function xmin=purecmaes   % (mu/mu_w, lambda)-CMA-ES
 
   % --------------------  Initialization --------------------------------  
   % User defined input parameters (need to be edited)
   strfitnessfct = 'frosenbrock';  % name of objective/fitness function
   N = 20;               % number of objective variables/problem dimension
   xmean = rand(N,1);    % objective variables initial point
   sigma = 0.3;          % coordinate wise standard deviation (step size)
   stopfitness = 1e-10;  % stop if fitness < stopfitness (minimization)
   stopeval = 1e3*N^2;   % stop after stopeval number of function evaluations
   
   % Strategy parameter setting: Selection  
   lambda = 4+floor(3*log(N));  % population size, offspring number
   mu = lambda/2;               % number of parents/points for recombination
   weights = log(mu+1/2)-log(1:mu)'; % muXone array for weighted recombination
   mu = floor(mu);        
   weights = weights/sum(weights);     % normalize recombination weights array
   mueff=sum(weights)^2/sum(weights.^2); % variance-effectiveness of sum w_i x_i
 
   % Strategy parameter setting: Adaptation
   cc = (4+mueff/N) / (N+4 + 2*mueff/N);  % time constant for cumulation for C
   cs = (mueff+2) / (N+mueff+5);  % t-const for cumulation for sigma control
   c1 = 2 / ((N+1.3)^2+mueff);    % learning rate for rank-one update of C
   cmu = min(1-c1, 2 * (mueff-2+1/mueff) / ((N+2)^2+mueff));  % and for rank-mu update
   damps = 1 + 2*max(0, sqrt((mueff-1)/(N+1))-1) + cs; % damping for sigma 
                                                       % usually close to 1
   % Initialize dynamic (internal) strategy parameters and constants
   pc = zeros(N,1); ps = zeros(N,1);   % evolution paths for C and sigma
   B = eye(N,N);                       % B defines the coordinate system
   D = ones(N,1);                      % diagonal D defines the scaling
   C = B * diag(D.^2) * B';            % covariance matrix C
   invsqrtC = B * diag(D.^-1) * B';    % C^-1/2 
   eigeneval = 0;                      % track update of B and D
   chiN=N^0.5*(1-1/(4*N)+1/(21*N^2));  % expectation of 
                                       %   ||N(0,I)|| == norm(randn(N,1))
   
   % -------------------- Generation Loop --------------------------------
   counteval = 0;  % the next 40 lines contain the 20 lines of interesting code 
   while counteval < stopeval
     
       % Generate and evaluate lambda offspring
       for k=1:lambda,
           arx(:,k) = xmean + sigma * B * (D .* randn(N,1)); % m + sig * Normal(0,C) 
           arfitness(k) = feval(strfitnessfct, arx(:,k)); % objective function call
           counteval = counteval+1;
       end
     
       % Sort by fitness and compute weighted mean into xmean
       [arfitness, arindex] = sort(arfitness); % minimization
       xold = xmean;
       xmean = arx(:,arindex(1:mu))*weights;   % recombination, new mean value
     
       % Cumulation: Update evolution paths
       ps = (1-cs)*ps ... 
             + sqrt(cs*(2-cs)*mueff) * invsqrtC * (xmean-xold) / sigma; 
       hsig = norm(ps)/sqrt(1-(1-cs)^(2*counteval/lambda))/chiN < 1.4 + 2/(N+1);
       pc = (1-cc)*pc ...
             + hsig * sqrt(cc*(2-cc)*mueff) * (xmean-xold) / sigma;
 
       % Adapt covariance matrix C
       artmp = (1/sigma) * (arx(:,arindex(1:mu))-repmat(xold,1,mu));
       C = (1-c1-cmu) * C ...                  % regard old matrix  
            + c1 * (pc*pc' ...                 % plus rank one update
                    + (1-hsig) * cc*(2-cc) * C) ... % minor correction if hsig==0
            + cmu * artmp * diag(weights) * artmp'; % plus rank mu update
 
       % Adapt step size sigma
       sigma = sigma * exp((cs/damps)*(norm(ps)/chiN - 1)); 
     
       % Decomposition of C into B*diag(D.^2)*B' (diagonalization)
       if counteval - eigeneval > lambda/(c1+cmu)/N/10  % to achieve O(N^2)
           eigeneval = counteval;
           C = triu(C) + triu(C,1)'; % enforce symmetry
           [B,D] = eig(C);           % eigen decomposition, B==normalized eigenvectors
           D = sqrt(diag(D));        % D is a vector of standard deviations now
           invsqrtC = B * diag(D.^-1) * B';
       end
     
       % Break, if fitness is good enough or condition exceeds 1e14, better termination methods are advisable 
       if arfitness(1) <= stopfitness || max(D) > 1e7 * min(D)
           break;
       end
 
   end % while, end generation loop
 
   xmin = arx(:, arindex(1)); % Return best point of last iteration.
                              % Notice that xmean is expected to be even
                              % better.
   
 % ---------------------------------------------------------------  
 function f=frosenbrock(x)
     if size(x,1) < 2 error('dimension must be greater one'); end
     f = 100*sum((x(1:end-1).^2 - x(2:end)).^2) + sum((x(1:end-1)-1).^2);
Theoretical Foundations
Given the distribution parameters—mean, variances and covariances—the normal probability distribution for sampling new candidate solutions is the maximum entropy probability distribution over 
 
 
 
 , that is, the sample distribution with the minimal amount of prior information built into the distribution. More considerations on the update equations of CMA-ES are made in the following.
Variable Metric
The CMA-ES implements a stochastic variable-metric method. In the very particular case of a convex-quadratic objective function








the covariance matrix 
 
 
 
  adapts to the inverse of the Hessian matrix

 
 , up to a scalar factor and small random fluctuations. More general, also on the function 
 
 
 
 , where 
 
 
 
  is strictly increasing and therefore order preserving and 
 
 
 
  is convex-quadratic, the covariance matrix 
 
 
 
  adapts to 
 
 
 
 , up to a scalar factor and small random fluctuations.
Maximum-Likelihood Updates
The update equations for mean and covariance matrix maximize a likelihood while resembling an expectation-maximization algorithm. The update of the mean vector 
 
 
 
  maximizes a log-likelihood, such that








where






  - \frac{1}{2} \log\det(2\pi C) - \frac{1}{2} (x-m)^T C^{-1} (x-m) 
denotes the log-likelihood of 
 
 
 
  from a multivariate normal distribution with mean 
 
 
 
  and any positive definite covariance matrix 
 
 
 
 . To see that 
 
 
 
  is independent of 
 
 
 
  remark first that this is the case for any diagonal matrix 
 
 
 
 , because the coordinate-wise maximizer is independent of a scaling factor. Then, rotation of the data points or choosing 
 
 
 
  non-diagonal are equivalent.
The rank-
 
 
 
  update of the covariance matrix, that is, the right most summand in the update equation of 
 
 
 
 , maximizes a log-likelihood in that






            \left( \frac{x_{i:\lambda} - m_k}{\sigma_k} \right)^T 
    = \arg\max_{C} \sum_{i=1}^\mu w_i \log p_\mathcal{N}\left(\left.\frac{x_{i:\lambda} - m_k}{\sigma_k} \right| C\right) 
for 
 
 
 
  (otherwise 
 
 
 
  is singular, but substantially the same result holds for 
 
 
 
 ). Here, 
 
 
 
  denotes the likelihood of 
 
 
 
  from a multivariate normal distribution with zero mean and covariance matrix 
 
 
 
 . Therefore, for 
 
 
 
  and 
 
 
 
 , 
 
 
 
  is the above maximum-likelihood estimator. See estimation of covariance matrices for details on the derivation.
Natural Gradient Descent in the Space of Sample Distributions
Akimoto et al.3 and Glasmachers et al.4 discovered independently that the update of the distribution parameters resembles the descend in direction of a sampled natural gradient of the expected objective function value  (to be minimized), where the expectation is taken under the sample distribution. With the parameter setting of 
 
 
 
  and 
 
 
 
 , i.e. without step-size control and rank-one update, CMA-ES can thus be viewed as an instantiation of Natural Evolution Strategies (NES).56 The natural gradient is independent of the parameterization of the distribution. Taken with respect to the parameters  of the sample distribution , the gradient of  can be expressed as






 {\nabla}_{\!\theta} E(f(x) | \theta) 
    &= \nabla_{\!\theta} \int_{\mathbb R^n}f(x) p(x) \mathrm{d}x
 \\ &= \int_{\mathbb R^n}f(x) \nabla_{\!\theta} p(x) \mathrm{d}x
 \\ &= \int_{\mathbb R^n}f(x) p(x) \nabla_{\!\theta} \ln p(x) \mathrm{d}x
 \\ &= E(f(x) \nabla_{\!\theta} \ln p(x|\theta))
\end{align}
where 
 
 
 
  depends on the parameter vector 
 
 
 
 , the so-called score function, 
 
 
 
 , indicates the relative sensitivity of  w.r.t. , and the expectation is taken with respect to the distribution . The natural gradient of , complying with the Fisher information metric (an informational distance measure between probability distributions and the curvature of the relative entropy), now reads






 \tilde{\nabla} E(f(x) | \theta) 
 &= F^{-1}_\theta \nabla_{\!\theta} E(f(x) | \theta) 
\end{align}
where the Fisher information matrix 
 
 
 
  is the expectation of the Hessian of  and renders the expression independent of the chosen parameterization. Combining the previous equalities we get






 \tilde{\nabla} E(f(x) | \theta) 
 &= F^{-1}_\theta E(f(x) \nabla_{\!\theta} \ln p(x|\theta))
 \\ &= E(f(x) F^{-1}_\theta \nabla_{\!\theta} \ln p(x|\theta))
\end{align}
A Monte Carlo approximation of the latter expectation takes the average over  samples from 






\quad\mathrm{with~}w_i = -f(x_{i:\lambda})/\lambda
where the notation 
 
 
 
  from above is used and therefore 
 
 
 
  are monotonously decreasing in 
 
 
 
 .
Ollivier et al.7 finally found a rigorous formulation for the more robust weights, 
 
 
 
 , as they are defined in the CMA-ES (weights are zero for ), formulated as consistent estimator for the CDF of 
 
 
 
  at the point 
 
 
 
 , composed with a fixed monotonous decreased transformation 
 
 
 
 , i.e.,








Let








such that 
 
 
 
  is the density of the multivariate normal distribution

 
 . Then, we have an explicit expression for the inverse of the Fisher information matrix where 
 
 
 
  is fixed








and for






        \,-\, \frac{1}{2}\ln\det(2\pi\sigma_k^2 C_k)
and, after some calculations, the updates in the CMA-ES turn out as8 






  m_{k+1} 
    &= m_k - \underbrace{[\tilde{\nabla} \widehat{E}_\theta(f)]_{1,\dots, n}}_{
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
    \text{natural gradient for mean}
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
    } 
  \\
    &= m_k + \sum_{i=1}^\lambda w_i (x_{i:\lambda} - m_k) 
  \end{align} 
and






  C_{k+1} 
    &= C_k + c_1(p_c p_c^T - C_k)  
        - c_\mu\,\mathrm{mat}(\overbrace{[\tilde{\nabla} \widehat{E}_\theta(f)]_{n+1,\dots,n+n^2}}^{
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
       \text{natural gradient for covariance matrix} 
    \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!
    })\\
    &= C_k + c_1(p_c p_c^T - C_k) 
       + c_\mu \sum_{i=1}^\lambda w_i \left(\frac{x_{i:\lambda} - m_k}{\sigma_k} \left(\frac{x_{i:\lambda} - m_k}{\sigma_k}\right)^T - C_k\right) 
  \end{align}

where mat forms the proper matrix from the respective natural gradient sub-vector. That means, setting 
 
 
 
 , the CMA-ES updates descend in direction of the approximation 
 
 
 
  of the natural gradient while using different step-sizes (learning rates) for the orthogonal parameters

 
  and 
 
 
 
  respectively.
Stationarity or Unbiasedness
It is comparatively easy to see that the update equations of CMA-ES satisfy some stationarity conditions, in that they are essentially unbiased. Under neutral selection, where 
 
 
 
 , we find that








and under some mild additional assumptions on the initial conditions








and with an additional minor correction in the covariance matrix update for the case where the indicator function evaluates to zero, we find








Invariance
Invariance properties imply uniform performance on a class of objective functions. They have been argued to be an advantage, because they allow to generalize and predict the behavior of the algorithm and therefore strengthen the meaning of empirical results obtained on single functions. The following invariance properties have been established for CMA-ES.

Invariance under order-preserving transformations of the objective function value 
 
 
 
 , in that for any 
 
 
 
  the behavior is identical on 
 
 
 
  for all strictly increasing 
 
 
 
 . This invariance is easy to verify, because only the 
 
 
 
 -ranking is used in the algorithm, which is invariant under the choice of 
 
 
 
 .


Scale-invariance, in that for any 
 
 
 
  the behavior is independent of 
 
 
 
  for the objective function 
 
 
 
  given 
 
 
 
  and 
 
 
 
 .


Invariance under rotation of the search space in that for any 
 
 
 
  and any 
 
 
 
  the behavior on 
 
 
 
  is independent of the orthogonal matrix

 
 , given 
 
 
 
 . More general, the algorithm is also invariant under general linear transformations 
 
 
 
  when additionally the initial covariance matrix is chosen as 
 
 
 
 .

Any serious parameter optimization method should be translation invariant, but most methods do not exhibit all the above described invariance properties. A prominent example with the same invariance properties is the Nelder–Mead method, where the initial simplex must be chosen respectively.
Convergence
Conceptual considerations like the scale-invariance property of the algorithm, the analysis of simpler evolution strategies, and overwhelming empirical evidence suggest that the algorithm converges on a large class of functions fast to the global optimum, denoted as 
 
 
 
 . On some functions, convergence occurs independently of the initial conditions with probability one. On some functions the probability is smaller than one and typically depends on the initial 
 
 
 
  and 
 
 
 
 . Empirically, the fastest possible convergence rate in 
 
 
 
  for rank-based direct search methods can often be observed (depending on the context denoted as linear or log-linear or exponential convergence). Informally, we can write






  
for some 
 
 
 
 , and more rigorously






  \;=\; \frac{1}{k}\log\frac{\|m_k - x^*\|}{\|m_{0} - x^*\|}
   \;\to\; -c 
or similarly,






   \;\to\; -c 
This means that on average the distance to the optimum decreases in each iteration by a "constant" factor, namely by 
 
 
 
 . The convergence rate 
 
 
 
  is roughly 
 
 
 
 , given 
 
 
 
  is not much larger than the dimension 
 
 
 
 . Even with optimal 
 
 
 
  and 
 
 
 
 , the convergence rate 
 
 
 
  cannot largely exceed 
 
 
 
 , given the above recombination weights 
 
 
 
  are all non-negative. The actual linear dependencies in 
 
 
 
  and 
 
 
 
  are remarkable and they are in both cases the best one can hope for in this kind of algorithm. Yet, a rigorous proof of convergence is missing.
Interpretation as Coordinate System Transformation
Using a non-identity covariance matrix for the multivariate normal distribution in evolution strategies is equivalent to a coordinate system transformation of the solution vectors,9 mainly because the sampling equation



can be equivalently expressed in an "encoded space" as



The covariance matrix defines a bijective transformation (encoding) for all solution vectors into a space, where the sampling takes place with identity covariance matrix. Because the update equations in the CMA-ES are invariant under linear coordinate system transformations, the CMA-ES can be re-written as an adaptive encoding procedure applied to a simple evolution strategy with identity covariance matrix.10 This adaptive encoding procedure is not confined to algorithms that sample from a multivariate normal distribution (like evolution strategies), but can in principle be applied to any iterative search method.
Performance in Practice
In contrast to most other evolutionary algorithms, the CMA-ES is, from the users perspective, quasi parameter-free. The user has to choose an initial solution point, 
 
 
 
 , and the initial step-size, 
 
 
 
 . Optionally, the number of candidate samples λ (population size) can be modified by the user in order to change the characteristic search behavior (see above) and termination conditions can or should be adjusted to the problem at hand.
The CMA-ES has been empirically successful in hundreds of applications and is considered to be useful in particular on non-convex, non-separable, ill-conditioned, multi-modal or noisy objective functions. The search space dimension ranges typically between two and a few hundred. Assuming a black-box optimization scenario, where gradients are not available (or not useful) and function evaluations are the only considered cost of search, the CMA-ES method is likely to be outperformed by other methods in the following conditions:

on low-dimensional functions, say 
 
 
 
 , for example by the downhill simplex method or surrogate-based methods (like kriging with expected improvement);


on separable functions without or with only negligible dependencies between the design variables in particular in the case of multi-modality or large dimension, for example by differential evolution;


on (nearly) convex-quadratic functions with low or moderate condition number of the Hessian matrix, where BFGS or NEWUOA are typically ten times faster;


on functions that can already be solved with a comparatively small number of function evaluations, say no more than 
 
 
 
 , where CMA-ES is often slower than, for example, NEWUOA or Multilevel Coordinate Search (MCS).

On separable functions, the performance disadvantage is likely to be most significant in that CMA-ES might not be able to find at all comparable solutions. On the other hand, on non-separable functions that are ill-conditioned or rugged or can only be solved with more than 
 
 
 
  function evaluations, the CMA-ES shows most often superior performance.
Variations and Extensions
The (1+1)-CMA-ES11 generates only one candidate solution per iteration step which becomes the new distribution mean if it is better than the current mean. For 
 
 
 
  the (1+1)-CMA-ES is a close variant of Gaussian adaptation. Some Natural Evolution Strategies are close variants of the CMA-ES with specific parameter settings. Natural Evolution Strategies do not utilize evolution paths (that means in CMA-ES setting 
 
 
 
 ) and they formalize the update of variances and covariances on a Cholesky factor instead of a covariance matrix. The CMA-ES has also been extended to multiobjective optimization as MO-CMA-ES.12 Another remarkable extension has been the addition of a negative update of the covariance matrix with the so-called active CMA.13
With the advent of niching methods in evolutionary strategies, the question of an optimal niche radius arises. An "adaptive individual niche radius" is introduced in 14
See also

Global optimization
Stochastic optimization
Derivative-free optimization

References
Bibliography

Hansen N, Ostermeier A (2001). Completely derandomized self-adaptation in evolution strategies. Evolutionary Computation, 9(2) pp. 159–195. 1
Hansen N, Müller SD, Koumoutsakos P (2003). Reducing the time complexity of the derandomized evolution strategy with covariance matrix adaptation (CMA-ES). Evolutionary Computation, 11(1) pp. 1–18. 2
Hansen N, Kern S (2004). Evaluating the CMA evolution strategy on multimodal test functions. In Xin Yao et al., editors, Parallel Problem Solving from Nature - PPSN VIII, pp. 282–291, Springer. 3
Igel C, Hansen N, Roth S (2007). Covariance Matrix Adaptation for Multi-objective Optimization. Evolutionary Computation, 15(1) pp. 1–28. 4

External links

A short introduction to CMA-ES by N. Hansen
The CMA Evolution Strategy: A Tutorial
CMA-ES source code page

fr:Stratégie d'évolution#CMA-ES"
Category:Evolutionary algorithms Category:Stochastic optimization Category:Optimization algorithms and methods




















