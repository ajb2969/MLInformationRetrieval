   SimRank      SimRank   SimRank is a general similarity measure , based on a simple and intuitive graph-theoretic model . SimRank is applicable in any domain with object-to-object relationships , that measures similarity of the structural context in which objects occur, based on their relationships with other objects. Effectively, SimRank is a measure that says " two objects are considered to be similar if they are referenced by similar objects ."  Introduction  Many applications require a measure of "similarity" between objects. One obvious example is the "find-similar-document" query, on traditional text corpora or the World-Wide Web . More generally, a similarity measure can be used to cluster objects , such as for collaborative filtering in a recommender system , in which “similar” users and items are grouped based on the users’ preferences.  Various aspects of objects can be used to determine similarity, usually depending on the domain and the appropriate definition of similarity for that domain. In a document corpus , matching text may be used, and for collaborative filtering, similar users may be identified by common preferences. SimRank is a general approach that exploits the object-to-object relationships found in many domains of interest. On the Web , for example, two pages are related if there are hyperlinks between them. A similar approach can be applied to scientific papers and their citations, or to any other document corpus with cross-reference information. In the case of recommender systems, a user’s preference for an item constitutes a relationship between the user and the item. Such domains are naturally modeled as graphs , with nodes representing objects and edges representing relationships.  The intuition behind the SimRank algorithm is that, in many domains, similar objects are referenced by similar objects . More precisely, objects   a   a   a   and   b   b   b   are considered to be similar if they are pointed from objects   c   c   c   and   d   d   d   , respectively, and   c   c   c   and   d   d   d   are themselves similar. The base case is that objects are maximally similar to themselves . 1  It is important to note that SimRank is a general algorithm that determines only the similarity of structural context. SimRank applies to any domain where there are enough relevant relationships between objects to base at least some notion of similarity on relationships. Obviously, similarity of other domain-specific aspects are important as well; these can — and should be combined with relational structural-context similarity for an overall similarity measure. For example, for Web pages SimRank can be combined with traditional textual similarity; the same idea applies to scientific papers or other document corpora. For recommendation systems, there may be built-in known similarities between items (e.g., both computers, both clothing, etc.), as well as similarities between users (e.g., same gender, same spending level). Again, these similarities can be combined with the similarity scores that are computed based on preference patterns, in order to produce an overall similarity measure.  Basic SimRank equation  For a node   v   v   v   in a directed graph, we denote by    I   (  v  )       I  v    I(v)   and    O   (  v  )       O  v    O(v)   the set of in-neighbors and out-neighbors of   v   v   v   , respectively. Individual in-neighbors are denoted as     I  i    (  v  )        subscript  I  i   v    I_{i}(v)   , for    1  ≤  i  ≤   |   I   (  v  )    |         1  i           I  v       1\leq i\leq\left|I(v)\right|   , and individual out-neighbors are denoted as     O  i    (  v  )        subscript  O  i   v    O_{i}(v)   , for    1  ≤  i  ≤   |   O   (  v  )    |         1  i           O  v       1\leq i\leq\left|O(v)\right|   .  Let us denote the similarity between objects   a   a   a   and   b   b   b   by     s   (  a  ,  b  )    ∈   [  0  ,  1  ]         s   a  b     0  1     s(a,b)\in[0,1]   . Following the earlier motivation, a recursive equation is written for    s   (  a  ,  b  )       s   a  b     s(a,b)   . If    a  =  b      a  b    a=b   then    s   (  a  ,  b  )       s   a  b     s(a,b)   is defined to be   1   1   1   . Otherwise,       s   (  a  ,  b  )    =    C    |   I   (  a  )    |    |   I   (  b  )    |       ∑   i  =  1    |   I   (  a  )    |      ∑   j  =  1    |   I   (  b  )    |     s   (    I  i    (  a  )    ,    I  j    (  b  )    )             s   a  b        C        I  a        I  b        superscript   subscript     i  1        I  a       superscript   subscript     j  1        I  b       s      subscript  I  i   a      subscript  I  j   b          s(a,b)=\frac{C}{\left|I(a)\right|\left|I(b)\right|}\sum_{i=1}^{\left|I(a)%
 \right|}\sum_{j=1}^{\left|I(b)\right|}s(I_{i}(a),I_{j}(b))   where   C   C   C   is a constant between   0   0    and   1   1   1   . A slight technicality here is that either   a   a   a   or   b   b   b   may not have any in-neighbors. Since there is no way to infer any similarity between   a   a   a   and   b   b   b   in this case, similarity is set to     s   (  a  ,  b  )    =  0        s   a  b    0    s(a,b)=0   , so the summation in the above equation is defined to be   0   0    when     I   (  a  )    =  ∅        I  a      I(a)=\emptyset   or     I   (  b  )    =  ∅        I  b      I(b)=\emptyset   .  Matrix representation of SimRank  Let   𝐒   𝐒   \mathbf{S}   be the similarity matrix whose entry     [  𝐒  ]    a  ,  b      subscript   delimited-[]  𝐒    a  b     [\mathbf{S}]_{a,b}   denotes the similarity score    s   (  a  ,  b  )       s   a  b     s(a,b)   , and   𝐀   𝐀   \mathbf{A}   be the column normalized adjacency matrix whose entry      [  𝐀  ]    a  ,  b    =   1   |   ℐ   (  b  )    |         subscript   delimited-[]  𝐀    a  b      1      ℐ  b       [\mathbf{A}]_{a,b}=\tfrac{1}{|\mathcal{I}(b)|}   if there is an edge from   a   a   a   to   b   b   b   , and 0 otherwise. Then, in matrix notations, SimRank can be formulated as       𝐒  =   max   {   C  ⋅   (    𝐀  T   ⋅  𝐒  ⋅  𝐀   )    ,  𝐈  }     ,      𝐒     normal-⋅  C   normal-⋅   superscript  𝐀  T   𝐒  𝐀    𝐈     {{\mathbf{S}}}=\max\{C\cdot(\mathbf{A}^{T}\cdot{{\mathbf{S}}}\cdot{{\mathbf{A}%
 }}),{{\mathbf{I}}}\},     where   𝐈   𝐈   \mathbf{I}   is an identity matrix.  Computing SimRank  A solution to the SimRank equations for a graph   G   G   G   can be reached by iteration to a fixed-point . Let   n   n   n   be the number of nodes in   G   G   G   . For each iteration   k   k   k   , we can keep    n  2     superscript  n  2    n^{2}   entries     s  k    (  *  ,  *  )        subscript  s  k         s_{k}(*,*)   , where     s  k    (  a  ,  b  )        subscript  s  k    a  b     s_{k}(a,b)   gives the score between   a   a   a   and   b   b   b   on iteration   k   k   k   . We successively compute     s   k  +  1     (  *  ,  *  )        subscript  s    k  1          s_{k+1}(*,*)   based on     s  k    (  *  ,  *  )        subscript  s  k         s_{k}(*,*)   . We start with     s  0    (  *  ,  *  )        subscript  s  0         s_{0}(*,*)   where each     s  0    (  a  ,  b  )        subscript  s  0    a  b     s_{0}(a,b)   is a lower bound on the actual SimRank score    s   (  a  ,  b  )       s   a  b     s(a,b)   :        s  0    (  a  ,  b  )    =   {         1    ,   if  a    =   b     ,            0    ,   if  a    ≠   b     .               subscript  s  0    a  b     cases       1      if  a      b     otherwise       0      if  a      b     otherwise     s_{0}(a,b)=\begin{cases}1\mbox{ },\mbox{ }\mbox{if }a=b\mbox{ },\\
 0\mbox{ },\mbox{ }\mbox{if }a\neq b\mbox{ }.\end{cases}     To compute     s   k  +  1     (  a  ,  b  )        subscript  s    k  1     a  b     s_{k+1}(a,b)   from     s  k    (  *  ,  *  )        subscript  s  k         s_{k}(*,*)   , we use the basic SimRank equation to get:        s   k  +  1     (  a  ,  b  )    =    C    |   I   (  a  )    |    |   I   (  b  )    |       ∑   i  =  1    |   I   (  a  )    |      ∑   j  =  1    |   I   (  b  )    |      s  k    (    I  i    (  a  )    ,    I  j    (  b  )    )              subscript  s    k  1     a  b        C        I  a        I  b        superscript   subscript     i  1        I  a       superscript   subscript     j  1        I  b        subscript  s  k       subscript  I  i   a      subscript  I  j   b          s_{k+1}(a,b)=\frac{C}{\left|I(a)\right|\left|I(b)\right|}\sum_{i=1}^{\left|I(a%
 )\right|}\sum_{j=1}^{\left|I(b)\right|}s_{k}(I_{i}(a),I_{j}(b))   for    a  ≠  b      a  b    a\neq b   , and      s   k  +  1     (  a  ,  b  )    =  1         subscript  s    k  1     a  b    1    s_{k+1}(a,b)=1   for    a  =  b      a  b    a=b   . That is, on each iteration    k  +  1      k  1    k+1   , we update the similarity of    (  a  ,  b  )     a  b    (a,b)   using the similarity scores of the neighbours of    (  a  ,  b  )     a  b    (a,b)   from the previous iteration   k   k   k   according to the basic SimRank equation. The values     s  k    (  *  ,  *  )        subscript  s  k         s_{k}(*,*)   are nondecreasing as   k   k   k   increases. It was shown in 2 that the values converge to limits satisfying the basic SimRank equation, the SimRank scores    s   (  *  ,  *  )       s        s(*,*)   , i.e., for all     a  ,  b   ∈  V       a  b   V    a,b\in V   ,      lim   k  →  ∞      s  k    (  a  ,  b  )     =   s   (  a  ,  b  )          subscript    normal-→  k        subscript  s  k    a  b       s   a  b      \lim_{k\to\infty}s_{k}(a,b)=s(a,b)   .  The original SimRank proposal suggested choosing the decay factor    C  =  0.8      C  0.8    C=0.8   and a fixed number    K  =  5      K  5    K=5   of iterations to perform. However, the recent research 3 showed that the given values for   C   C   C   and   K   K   K   generally imply relatively low accuracy of iteratively computed SimRank scores. For guaranteeing more accurate computation results, the latter paper suggests either using a smaller decay factor (in particular,    C  =  0.6      C  0.6    C=0.6   ) or taking more iterations.  CoSimRank  CoSimRank is a variant of SimRank with the advantage of also having a local formulation, i.e. CoSimRank can be computed for a single node pair. 4 Let   𝐒   𝐒   \mathbf{S}   be the similarity matrix whose entry     [  𝐒  ]    a  ,  b      subscript   delimited-[]  𝐒    a  b     [\mathbf{S}]_{a,b}   denotes the similarity score    s   (  a  ,  b  )       s   a  b     s(a,b)   , and   𝐀   𝐀   \mathbf{A}   be the column normalized adjacency matrix. Then, in matrix notations, CoSimRank can be formulated as:       𝐒  =    C  ⋅   (    𝐀  T   ⋅  𝐒  ⋅  𝐀   )    +  𝐈    ,      𝐒     normal-⋅  C   normal-⋅   superscript  𝐀  T   𝐒  𝐀    𝐈     {{\mathbf{S}}}=C\cdot(\mathbf{A}^{T}\cdot{{\mathbf{S}}}\cdot{{\mathbf{A}}})+{{%
 \mathbf{I}}},     where   𝐈   𝐈   \mathbf{I}   is an identity matrix. To compute the similarity score of only a single node pair, let      p   (  0  )     (  i  )    =   e  i          superscript  p  0   i    subscript  e  i     p^{(0)}(i)=e_{i}   , with    e  i     subscript  e  i    e_{i}   being a vector of the standard basis, i.e., the   i   i   i   -th entry is 1 and all other entries are 0. Then, CoSimRank can be computed in two steps:        p   (  k  )    =   A   p   (   k  -  1   )          superscript  p  k     A   superscript  p    k  1       p^{(k)}=Ap^{(k-1)}          s   (  i  ,  j  )    =    ∑   k  =  0   ∞     C  k    ⟨    p   (  k  )     (  i  )    ,    p   (  k  )     (  j  )    ⟩           s   i  j      superscript   subscript     k  0         superscript  C  k       superscript  p  k   i      superscript  p  k   j        s(i,j)=\sum_{k=0}^{\infty}C^{k}\langle p^{(k)}(i),p^{(k)}(j)\rangle      Step one can be seen a simplified version of Personalized PageRank . Step two sums up the vector similarity of each iteration. Both, matrix and local representation, compute the same similarity score. CoSimRank can also be used to compute the similarity of sets of nodes, by modifying     p   (  0  )     (  i  )        superscript  p  0   i    p^{(0)}(i)   .  Further research on SimRank   Fogaras and Racz 5 suggested speeding up SimRank computation through probabilistic computation using the Monte Carlo method .    Antonellis et al. 6 extended SimRank equations to take into consideration (i) evidence factor for incident nodes and (ii) link weights.    Yu et al. 7 further improved SimRank computation via a fine-grained memoization method to share small common parts among different partial sums.   Partial Sums Memoization  Lizorkin et al. 8 proposed three optimization techniques for speeding up the computation of SimRank:   Essential nodes selection may eliminate the computation of a fraction of node pairs with a-priori zero scores.  Partial sums memoization can effectively reduce repeated calculations of the similarity among different node pairs by caching part of similarity summations for later reuse.  A threshold setting on the similarity enables a further reduction in the number of node pairs to be computed.   In particular, the second observation of partial sums memoization plays a paramount role in greatly speeding up the computation of SimRank from    𝒪   (   K   d  2    n  2    )       𝒪    K   superscript  d  2    superscript  n  2      \mathcal{O}(Kd^{2}n^{2})   to    𝒪   (   K  d   n  2    )       𝒪    K  d   superscript  n  2      \mathcal{O}(Kdn^{2})   , where   K   K   K   is the number of iterations,   d   d   d   is average degree of a graph, and   n   n   n   is the number of nodes in a graph. The central idea of partial sums memoization consists of two steps:  First, the partial sums over    I   (  a  )       I  a    I(a)   are memoized as       Partial   I   (  a  )     s  k     (  j  )   =   ∑   i  ∈   I   (  a  )       s  k    (  i  ,  j  )   ,   (  ∀  j  ∈  I   (  b  )   )      fragments   superscript   subscript  Partial    I  a     subscript  s  k     fragments  normal-(  j  normal-)     subscript     i    I  a      subscript  s  k    fragments  normal-(  i  normal-,  j  normal-)   normal-,   fragments  normal-(  for-all  j   I   fragments  normal-(  b  normal-)   normal-)     \text{Partial}_{I(a)}^{s_{k}}(j)=\sum_{i\in I(a)}s_{k}(i,j),\qquad(\forall j%
 \in I(b))   and then     s   k  +  1     (  a  ,  b  )        subscript  s    k  1     a  b     s_{k+1}(a,b)   is iteratively computed from     Partial   I   (  a  )     s  k     (  j  )        superscript   subscript  Partial    I  a     subscript  s  k    j    \text{Partial}_{I(a)}^{s_{k}}(j)   as         s   k  +  1     (  a  ,  b  )    =    C    |   I   (  a  )    |    |   I   (  b  )    |       ∑   j  ∈   I   (  b  )        Partial   I   (  a  )     s  k     (  j  )       .         subscript  s    k  1     a  b        C        I  a        I  b        subscript     j    I  b        superscript   subscript  Partial    I  a     subscript  s  k    j       s_{k+1}(a,b)=\frac{C}{|I(a)||I(b)|}\sum_{j\in I(b)}\text{Partial}_{I(a)}^{s_{k%
 }}(j).   Consequently, the results of     Partial   I   (  a  )     s  k     (  j  )        superscript   subscript  Partial    I  a     subscript  s  k    j    \text{Partial}_{I(a)}^{s_{k}}(j)   ,     ∀  j   ∈   I   (  b  )         for-all  j     I  b     \forall j\in I(b)   , can be reused later when we compute the similarities     s   k  +  1     (  a  ,  *  )        subscript  s    k  1     a      s_{k+1}(a,*)   for a given vertex   a   a   a   as the first argument.  See also   PageRank   Citations  "  Category:Information retrieval evaluation     G. Jeh and J. Widom. SimRank: A Measure of Structural-Context Similarity. In KDD'02 : Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining, pages 538-543. ACM Press , 2002. 1 ↩   D. Lizorkin, P. Velikhov, M. Grinev and D. Turdakov. Accuracy Estimate and Optimization Techniques for SimRank Computation. In VLDB '08 : Proceedings of the 34th International Conference on Very Large Data Bases, pages 422--433. 2 ↩  S. Rothe and H. Schütze. CoSimRank: A Flexible & Efficient Graph-Theoretic Similarity Measure. In ACL '14 : Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1392-1402 . 3 ↩  D. Fogaras and B. Racz. Scaling link-based similarity search. In WWW '05 : Proceedings of the 14th international conference on World Wide Web, pages 641--650, New York, NY, USA, 2005. ACM . 4 ↩  I. Antonellis, H. Garcia-Molina and C.-C. Chang. Simrank++: Query Rewriting through Link Analysis of the Click Graph. In VLDB '08 : Proceedings of the 34th International Conference on Very Large Data Bases, pages 408--421. [ http://dbpubs.stanford.edu/pub/showDoc.Fulltext?lang=en&doc; ;=2008-17&format;=pdf&compression;=&name;=2008-17.pdf] ↩  W. Yu, X. Lin, W. Zhang. Towards Efficient SimRank Computation on Large Networks. In ICDE '13 : Proceedings of the 29th IEEE International Conference on Data Engineering, pages 601--612. 5 ↩      