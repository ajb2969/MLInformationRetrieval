   Index notation      Index notation   In mathematics and computer programming , Index notation is used to specify the elements of an array of numbers. The formalism of how indices are used varies according to the subject. In particular, there are different methods for referring to the elements of a list, a vector, or a matrix, depending on whether one is writing a formal mathematical paper for publication, or when one is writing a computer program .  Index notation in mathematics  It is frequently helpful in mathematics to refer to the elements of an array using subscripts. The subscripts can be integers or variables . The array takes the form of tensors in general, since these can be treated as multi-dimensional arrays. Special (and more familiar) cases are vectors (1d arrays) and matrices (2d arrays).  The following is only an introduction to the concept: index notation is used in more detail in mathematics (particularly in the representation and manipulation of tensor operations ). See the main article for further details.  One-dimensional arrays (vectors)  A vector treated as an array of numbers by writing as a row vector or column vector (whichever is used depends on convenience or context):       𝐚  =   (      a  1        a  2       ⋮       a  n      )    ,   𝐚  =   (      a  1      a  2     ⋯     a  n      )       formulae-sequence    𝐚     subscript  a  1      subscript  a  2     normal-⋮     subscript  a  n        𝐚     subscript  a  1    subscript  a  2   normal-⋯   subscript  a  n        \mathbf{a}=\begin{pmatrix}a_{1}\\
 a_{2}\\
 \vdots\\
 a_{n}\end{pmatrix},\quad\mathbf{a}=\begin{pmatrix}a_{1}&a;_{2}&\cdots&a;_{n}\\
 \end{pmatrix}     Index notation allows indication of the elements of the array by simply writing a i , where the index i is known to run from 1 to n . 1 For example, given the vector:      𝐚  =   (     10    8    9    6    3    5     )       𝐚    10  8  9  6  3  5      \mathbf{a}=\begin{pmatrix}10&8&9&6&3&5\\
 \end{pmatrix}     then some entries are        a  1   =  10   ,    a  2   =   8  ⋯   a  6    =  5      formulae-sequence     subscript  a  1   10        subscript  a  2     8  normal-⋯   subscript  a  6         5      a_{1}=10,\,a_{2}=8\cdots a_{6}=5   .  The notation can be applied to vectors in mathematics and physics . The following vector equation       𝐚  +  𝐛   =  𝐜        𝐚  𝐛   𝐜    \mathbf{a}+\mathbf{b}=\mathbf{c}     can also be written in terms of the elements of the vector (aka components), that is        a  i   +   b  i    =   c  i          subscript  a  i    subscript  b  i     subscript  c  i     a_{i}+b_{i}=c_{i}     where the indices take a given range of values. This expression represents a set of equations, one for each index. If the vectors each have n elements, meaning i = 1,2... n , then the equations are explicitly        a  1   +   b  1    =   c  1          subscript  a  1    subscript  b  1     subscript  c  1     a_{1}+b_{1}=c_{1}           a  2   +   b  2    =   c  2          subscript  a  2    subscript  b  2     subscript  c  2     a_{2}+b_{2}=c_{2}        ⋮   normal-⋮   \vdots           a  n   +   b  n    =   c  n          subscript  a  n    subscript  b  n     subscript  c  n     a_{n}+b_{n}=c_{n}     Hence, index notation serves as an efficient shorthand for   representing the general structure to an equation,  while applicable to individual components.   Two-dimensional arrays  (Figure)  Elements of matrix A are described with two subscripts or indices.   More than one index is used to describe arrays of numbers, in two or more dimensions, such as the elements of a matrix, (see also image to right);      𝐀  =   (      a  11      a  12     ⋯     a   1  n         a  21      a  22     ⋯     a   2  n        ⋮    ⋮    ⋱    ⋮       a   m  1       a   m  2      ⋯     a   m  n       )       𝐀     subscript  a  11    subscript  a  12   normal-⋯   subscript  a    1  n       subscript  a  21    subscript  a  22   normal-⋯   subscript  a    2  n      normal-⋮  normal-⋮  normal-⋱  normal-⋮     subscript  a    m  1     subscript  a    m  2    normal-⋯   subscript  a    m  n        \mathbf{A}=\begin{pmatrix}a_{11}&a;_{12}&\cdots&a;_{1n}\\
 a_{21}&a;_{22}&\cdots&a;_{2n}\\
 \vdots&\vdots&\ddots&\vdots\\
 a_{m1}&a;_{m2}&\cdots&a;_{mn}\\
 \end{pmatrix}     The entry of a matrix A is written using two indices, say i and j with or without commas to separate the indices: a ij or a i,j , where the first subscript is the row number and the second is the column number. The notation " ij " should not be confused with " i multiplied by j ", it is read as " i - j ". For example, if      𝐀  =   (     9    8    6      1    2    7      4    9    2      6    0    5     )       𝐀    9  8  6    1  2  7    4  9  2    6  0  5      \mathbf{A}=\begin{pmatrix}9&8&6\\
 1&2&7\\
 4&9&2\\
 6&0&5\end{pmatrix}     then some entries are        a  11   =  9   ,     a  12   =  8   ,     a  21   =  1   ,     ⋯    a  23    =    7   ⋯         formulae-sequence     subscript  a  11   9    formulae-sequence     subscript  a  12   8    formulae-sequence     subscript  a  21   1       normal-⋯   subscript  a  23      7  normal-⋯        a_{11}=9,\,a_{12}=8,a_{21}=1,\,\cdots\,\,a_{23}=7\,\cdots   .  Matrix equations are written similarly to vector equations, such as       𝐀  +  𝐁   =  𝐂        𝐀  𝐁   𝐂    \mathbf{A}+\mathbf{B}=\mathbf{C}     in terms of the elements of the matrices (aka components)        A   i  j    +   B   i  j     =   C   i  j           subscript  A    i  j     subscript  B    i  j      subscript  C    i  j      A_{ij}+B_{ij}=C_{ij}     for all values of i and j . Again this expression represents a set of equations, one for each index. If the matrices each have m rows and n columns, meaning i = 1,2... m and j = 1,2... n , then there are mn equations.  Multi-dimensional arrays  The notation allows a clear generalization to multi-dimensional arrays of elements: tensors. For example        A    i  1    i  2   ⋯    +   B    i  1    i  2   ⋯     =   C    i  1    i  2   ⋯           subscript  A     subscript  i  1    subscript  i  2   normal-⋯     subscript  B     subscript  i  1    subscript  i  2   normal-⋯      subscript  C     subscript  i  1    subscript  i  2   normal-⋯      A_{i_{1}i_{2}\cdots}+B_{i_{1}i_{2}\cdots}=C_{i_{1}i_{2}\cdots}     representing a set of many equations.  In tensor analysis, superscripts are used instead of subscripts to distinguish covariant from contravariant entities, see covariance and contravariance of vectors and raising and lowering indices .  Index notation in computing  In several programming languages, index notation is a way of addressing elements of an array. This method is used since it is closest to how it is implemented in assembly language whereby the address of the first element is used as a base, and a multiple (the index) of the element size is used to address inside the array.  For example, if an array of integers is stored in a region of the computer's memory starting at the memory cell with address 3000 (the base address ), and each integer occupies four cells (bytes), then the elements of this array are at memory locations 3000, 3004, 3008, ..., 0x3000 + 4( n -1). In general, the address of the i th element of an array with base address  b and element size s is b + is .  C implementation details  In the C programming language , we can write the above as *(base + i) (pointer form) or base[i] (array indexing form), which is exactly equivalent because the C standard defines the array indexing form as a transformation to pointer form. Coincidentally, since pointer addition is commutative, this allows for obscure expressions such as 3[base] which is equivalent to base[3] . 2  Multidimensional arrays  Things become more interesting when we consider arrays with more than one index, for example, a two-dimensional table. We have three possibilities:   make the two-dimensional array one-dimensional by computing a single index from the two  consider a one-dimensional array where each element is another one-dimensional array, i.e. an array of arrays  use additional storage to hold the array of addresses of each row of the original array, and store the rows of the original array as separate one-dimensional arrays   In C, all three methods can be used. When the first method is used, the programmer decides how the elements of the array are laid out in the computer's memory, and provides the formulas to compute the location of each element. The second method is used when the number of elements in each row is the same and known at the time the program is written. The programmer declares the array to have, say, three columns by writing e.g. elementtype tablename[][3]; . One then refers to a particular element of the array by writing tablename[first index][second index] . The compiler computes the total number of memory cells occupied by each row, uses the first index to find the address of the desired row, and then uses the second index to find the address of the desired element in the row. When the third method is used, the programmer declares the table to be an array of pointers, like in elementtype *tablename[]; . When the programmer subsequently specifies a particular element tablename[first index][second index] , the compiler generates instructions to look up the address of the row specified by the first index, and use this address as the base when computing the address of the element specified by the second index.  Example  This function multiplies two 3x3 floating point matrices together.  void mult3x3f(float result[][3], const float A[][3], const float B[][3])  {  int i, j, k;  for (i = 0; i     An introduction to Tensor Analysis: For Engineers and Applied Scientists, J.R. Tyldesley, Longman, 1975, ISBN 0-582-44355-5 ↩  Programming with C++, J. Hubbard, Schaum’s Outlines, McGraw Hill (USA), 1996, ISBN 0-07-114328-9 ↩     