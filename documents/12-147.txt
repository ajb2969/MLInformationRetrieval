   Polynomial code      Polynomial code   In coding theory , a polynomial code is a type of linear code whose set of valid code words consists of those polynomials (usually of some fixed length) that are divisible by a given fixed polynomial (of shorter length, called the generator polynomial ).  Definition  Fix a finite field     G  F   (  q  )       G  F  q    GF(q)   , whose elements we call symbols . For the purposes of constructing polynomial codes, we identify a string of   n   n   n   symbols     a   n  -  1    …   a  0        subscript  a    n  1    normal-…   subscript  a  0     a_{n-1}\ldots a_{0}   with the polynomial         a   n  -  1     x   n  -  1     +  ⋯  +    a  1   x   +   a  0    .         subscript  a    n  1     superscript  x    n  1     normal-⋯     subscript  a  1   x    subscript  a  0     a_{n-1}x^{n-1}+\cdots+a_{1}x+a_{0}.\,     Fix integers    m  ≤  n      m  n    m\leq n   and let    g   (  x  )       g  x    g(x)   be some fixed polynomial of degree   m   m   m   , called the generator polynomial . The polynomial code generated by    g   (  x  )       g  x    g(x)    is the code whose code words are precisely the polynomials of degree less than   n   n   n   that are divisible (without remainder) by    g   (  x  )       g  x    g(x)   .  Example  Consider the polynomial code over     G  F   (  2  )    =   {  0  ,  1  }         G  F  2    0  1     GF(2)=\{0,1\}   with    n  =  5      n  5    n=5   ,    m  =  2      m  2    m=2   , and generator polynomial     g   (  x  )    =    x  2   +  x  +  1         g  x      superscript  x  2   x  1     g(x)=x^{2}+x+1   . This code consists of the following code words:         0  ⋅  g    (  x  )    ,    1  ⋅  g    (  x  )    ,    x  ⋅  g    (  x  )    ,     (   x  +  1   )   ⋅  g    (  x  )     ,        normal-⋅  0  g   x      normal-⋅  1  g   x      normal-⋅  x  g   x      normal-⋅    x  1   g   x     0\cdot g(x),\quad 1\cdot g(x),\quad x\cdot g(x),\quad(x+1)\cdot g(x),             x  2   ⋅  g    (  x  )    ,     (    x  2   +  1   )   ⋅  g    (  x  )    ,     (    x  2   +  x   )   ⋅  g    (  x  )    ,     (    x  2   +  x  +  1   )   ⋅  g    (  x  )     .        normal-⋅   superscript  x  2   g   x      normal-⋅     superscript  x  2   1   g   x      normal-⋅     superscript  x  2   x   g   x      normal-⋅     superscript  x  2   x  1   g   x     x^{2}\cdot g(x),\quad(x^{2}+1)\cdot g(x),\quad(x^{2}+x)\cdot g(x),\quad(x^{2}+%
 x+1)\cdot g(x).     Or written explicitly:       0  ,    x  2   +  x  +  1   ,    x  3   +   x  2   +  x   ,    x  3   +   2   x  2    +   2  x   +  1    ,     0     superscript  x  2   x  1      superscript  x  3    superscript  x  2   x      superscript  x  3     2   superscript  x  2      2  x   1     0,\quad x^{2}+x+1,\quad x^{3}+x^{2}+x,\quad x^{3}+2x^{2}+2x+1,           x  4   +   x  3   +   x  2    ,    x  4   +   x  3   +   2   x  2    +  x  +  1   ,    x  4   +   2   x  3    +   2   x  2    +  x   ,    x  4   +   2   x  3    +   3   x  2    +   2  x   +  1.         superscript  x  4    superscript  x  3    superscript  x  2       superscript  x  4    superscript  x  3     2   superscript  x  2    x  1      superscript  x  4     2   superscript  x  3      2   superscript  x  2    x      superscript  x  4     2   superscript  x  3      3   superscript  x  2      2  x   1.     x^{4}+x^{3}+x^{2},\quad x^{4}+x^{3}+2x^{2}+x+1,\quad x^{4}+2x^{3}+2x^{2}+x,%
 \quad x^{4}+2x^{3}+3x^{2}+2x+1.     Since the polynomial code is defined over the Binary Galois Field     G  F   (  2  )    =   {  0  ,  1  }         G  F  2    0  1     GF(2)=\{0,1\}   , polynomial elements are represented as a modulo -q sum and the final polynomials are:       0  ,    x  2   +  x  +  1   ,    x  3   +   x  2   +  x   ,    x  3   +  1    ,     0     superscript  x  2   x  1      superscript  x  3    superscript  x  2   x      superscript  x  3   1     0,\quad x^{2}+x+1,\quad x^{3}+x^{2}+x,\quad x^{3}+1,           x  4   +   x  3   +   x  2    ,    x  4   +   x  3   +  x  +  1   ,    x  4   +  x   ,    x  4   +   x  2   +  1.         superscript  x  4    superscript  x  3    superscript  x  2       superscript  x  4    superscript  x  3   x  1      superscript  x  4   x      superscript  x  4    superscript  x  2   1.     x^{4}+x^{3}+x^{2},\quad x^{4}+x^{3}+x+1,\quad x^{4}+x,\quad x^{4}+x^{2}+1.     Equivalently, expressed as strings of binary digits, the codewords are:       00000  ,  00111  ,  01110  ,  01001   ,     00000  00111  01110  01001    00000,\quad 00111,\quad 01110,\quad 01001,         11100  ,  11011  ,  10010  ,  10101.     11100  11011  10010  10101.    11100,\quad 11011,\quad 10010,\quad 10101.     Note that this, as every polynomial code, is indeed a linear code , i.e., linear combinations of code words are again code words. In a case like this where the field is GF(2), linear combinations are found by taking the XOR of the codewords expressed in binary form (e.g. 00111 XOR 10010 = 10101).  Encoding  In a polynomial code over    G  F   (  q  )       G  F  q    GF(q)   with code length   n   n   n   and generator polynomial    g   (  x  )       g  x    g(x)   of degree   m   m   m   , there will be exactly    q   n  -  m      superscript  q    n  m     q^{n-m}   code words. Indeed, by definition,    p   (  x  )       p  x    p(x)   is a code word if and only if it is of the form     p   (  x  )    =     g   (  x  )    ⋅  q    (  x  )          p  x      normal-⋅    g  x   q   x     p(x)=g(x)\cdot q(x)   , where    q   (  x  )       q  x    q(x)   (the quotient ) is of degree less than    n  -  m      n  m    n-m   . Since there are    q   n  -  m      superscript  q    n  m     q^{n-m}   such quotients available, there are the same number of possible code words. Plain (unencoded) data words should therefore be of length    n  -  m      n  m    n-m     Some authors, such as (Lidl & Pilz, 1999), only discuss the mapping     q   (  x  )    ↦     g   (  x  )    ⋅  q    (  x  )       maps-to    q  x      normal-⋅    g  x   q   x     q(x)\mapsto g(x)\cdot q(x)   as the assignment from data words to code words. However, this has the disadvantage that the data word does not appear as part of the code word.  Instead, the following method is often used to create a systematic code : given a data word    d   (  x  )       d  x    d(x)   of length    n  -  m      n  m    n-m   , first multiply    d   (  x  )       d  x    d(x)   by    x  m     superscript  x  m    x^{m}   , which has the effect of shifting    d   (  x  )       d  x    d(x)   by   m   m   m   places to the left. In general,     x  m   d   (  x  )        superscript  x  m   d  x    x^{m}d(x)   will not be divisible by    g   (  x  )       g  x    g(x)   , i.e., it will not be a valid code word. However, there is a unique code word that can be obtained by adjusting the rightmost   m   m   m   symbols of     x  m   d   (  x  )        superscript  x  m   d  x    x^{m}d(x)   . To calculate it, compute the remainder of dividing     x  m   d   (  x  )        superscript  x  m   d  x    x^{m}d(x)   by    g   (  x  )       g  x    g(x)   :         x  m   d   (  x  )    =      g   (  x  )    ⋅  q    (  x  )    +   r   (  x  )      ,         superscript  x  m   d  x        normal-⋅    g  x   q   x     r  x      x^{m}d(x)=g(x)\cdot q(x)+r(x),\,     where    r   (  x  )       r  x    r(x)   is of degree less than   m   m   m   . The code word corresponding to the data word    d   (  x  )       d  x    d(x)   is then defined to be        p   (  x  )    :=     x  m   d   (  x  )    -   r   (  x  )      ,     assign    p  x        superscript  x  m   d  x     r  x      p(x):=x^{m}d(x)-r(x),\,     Note the following properties:        p   (  x  )    =     g   (  x  )    ⋅  q    (  x  )          p  x      normal-⋅    g  x   q   x     p(x)=g(x)\cdot q(x)   , which is divisible by    g   (  x  )       g  x    g(x)   . In particular,    p   (  x  )       p  x    p(x)   is a valid code word.  Since    r   (  x  )       r  x    r(x)   is of degree less than   m   m   m   , the leftmost    n  -  m      n  m    n-m   symbols of    p   (  x  )       p  x    p(x)   agree with the corresponding symbols of     x  m   d   (  x  )        superscript  x  m   d  x    x^{m}d(x)   . In other words, the first    n  -  m      n  m    n-m   symbols of the code word are the same as the original data word. The remaining   m   m   m   symbols are called checksum digits or check bits .   Example  For the above code with    n  =  5      n  5    n=5   ,    m  =  2      m  2    m=2   , and generator polynomial     g   (  x  )    =    x  2   +  x  +  1         g  x      superscript  x  2   x  1     g(x)=x^{2}+x+1   , we obtain the following assignment from data words to codewords:   000   ↦   maps-to   \mapsto    000 00  001   ↦   maps-to   \mapsto    001 11  010   ↦   maps-to   \mapsto    010 01  011   ↦   maps-to   \mapsto    011 10  100   ↦   maps-to   \mapsto    100 10  101   ↦   maps-to   \mapsto    101 01  110   ↦   maps-to   \mapsto    110 11  111   ↦   maps-to   \mapsto    111 00   Decoding  An erroneous message can be detected in a straightforward way through polynomial division by the generator polynomial resulting in a non-zero remainder.  Assuming that the code word is free of errors, a systematic code can be decoded simply by stripping away the   m   m   m   checksum digits.  If there are errors, then error correction should be performed before decoding. Efficient decoding algorithms exist for specific polynomial codes, such as BCH codes .  Properties of polynomial codes  As for all digital codes, the error detection and correction abilities of polynomial codes are determined by the minimum Hamming distance of the code. Since polynomial codes are linear codes, the minimum Hamming distance is equal to the minimum weight of any non-zero codeword. In the example above, the minimum Hamming distance is 2, since 01001 is a codeword, and there is no nonzero codeword with only one bit set.  More specific properties of a polynomial code often depend on particular algebraic properties of its generator polynomial. Here are some examples of such properties:   A polynomial code is cyclic if and only if the generator polynomial divides     x  n   -  1       superscript  x  n   1    x^{n}-1   .  If the generator polynomial is primitive , then the resulting code has Hamming distance at least 3, provided that    n  ≤    2  m   -  1       n     superscript  2  m   1     n\leq 2^{m}-1   .  In BCH codes , the generator polynomial is chosen to have specific roots in an extension field, in a way that achieves high Hamming distance.   The algebraic nature of polynomial codes, with cleverly chosen generator polynomials, can also often be exploited to find efficient error correction algorithms. This is the case for BCH codes .  Specific families of polynomial codes   Cyclic codes – every cyclic code is also a polynomial code; a popular example is the CRC code.  BCH codes – a family of cyclic codes with high Hamming distance and efficient algebraic error correction algorithms.  Reed–Solomon codes – an important subset of BCH codes with particularly efficient structure.   References   W.J. Gilbert and W.K. Nicholson: Modern Algebra with Applications , 2nd edition, Wiley, 2004.  R. Lidl and G. Pilz. Applied Abstract Algebra, 2nd edition. Wiley, 1999.   "  Category:Coding theory   