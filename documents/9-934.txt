


Hirschberg's algorithm




Hirschberg's algorithm

In computer science, Hirschberg's algorithm, named after its inventor, Dan Hirschberg, is a dynamic programming algorithm that finds the optimal sequence alignment between two strings. Optimality is measured with the Levenshtein distance, defined to be the sum of the costs of insertions, replacements, deletions, and null actions needed to change one string into the other. Hirschberg's algorithm is simply described as a divide and conquer version of the Needleman–Wunsch algorithm.1 Hirschberg's algorithm is commonly used in computational biology to find maximal global alignments of DNA and protein sequences.
Algorithm information
Hirschberg's algorithm is a generally applicable algorithm for optimal sequence alignment. BLAST and FASTA are suboptimal heuristics. If x and y are strings, where length(x) = n and length(y) = m, the Needleman-Wunsch algorithm finds an optimal alignment in O(nm) time, using O(nm) space. Hirschberg's algorithm is a clever modification of the Needleman-Wunsch Algorithm which still takes O(nm) time, but needs only O(min{n,m}) space.2 One application of the algorithm is finding sequence alignments of DNA or protein sequences. It is also a space-efficient way to calculate the longest common subsequence between two sets of data such as with the common diff tool.
The Hirschberg algorithm can be derived from the Needleman-Wunsch algorithm by observing that:3

one can compute the optimal alignment score by only storing the current and previous row of the Needleman-Wunsch score matrix;
if 
 
 
 
  is the optimal alignment of 
 
 
 
 , and 
 
 
 
  is an arbitrary partition of 
 
 
 
 
 , there exists a partition 
 
 
 
  of 
 
 
 
  such that 
 
 
 
 .

Algorithm description


 
  denotes the i-th character of 
 
 
 
 
 , where 
 
 
 
 . 
 
 
 
  denotes a substring of size 
 
 
 
 , ranging from i-th to the j-th character of 
 
 
 
 . 
 
 
 
 
  is the reversed version of 
 
 
 
 .


 
  and 
 
 
 
  are sequences to be aligned. Let 
 
 
 
  be a character from 
 
 
 
 
 , and 
 
 
 
  be a character from 
 
 
 
 . We assume that 
 
 
 
 , 
 
 
 
  and 
 
 
 
 
  are well defined integer-valued functions. These functions represent the cost of deleting 
 
 
 
 , inserting 
 
 
 
 , and replacing 
 
 
 
  with 
 
 
 
 , respectively.
We define 
 
 
 
 
 , which returns the last line of the Needleman-Wunsch score matrix 
 
 
 
 :
 function NWScore(X,Y)
   Score(0,0) = 0
   for j=1 to length(Y)
     Score(0,j) = Score(0,j-1) + Ins(Yj)
   for i=1 to length(X)
     Score(i,0) = Score(i-1,0) + Del(Xi)
     for j=1 to length(Y)
       scoreSub = Score(i-1,j-1) + Sub(Xi, Yj)
       scoreDel = Score(i-1,j) + Del(Xi)
       scoreIns = Score(i,j-1) + Ins(Yj)
       Score(i,j) = max(scoreSub, scoreDel, scoreIns)
     end
   end
   for j=0 to length(Y)
     LastLine(j) = Score(length(X),j)
   return LastLine
Note that at any point, 
 
 
 
  only requires the two most recent rows of the score matrix. Thus, 
 
 
 
  can be implemented in 
 
 
 
  space.
The Hirschberg algorithm follows:
 function Hirschberg(X,Y)
   Z = ""
   W = ""
   if length(X) == 0
     for i=1 to length(Y)
       Z = Z + '-'
       W = W + Yi
     end
   else if length(Y) == 0
     for i=1 to length(X)
       Z = Z + Xi
       W = W + '-'
     end
   else if length(X) == 1 or length(Y) == 1
     (Z,W) = NeedlemanWunsch(X,Y)
   else
     xlen = length(X)
     xmid = length(X)/2
     ylen = length(Y)
 
     ScoreL = NWScore(X1:xmid, Y)
     ScoreR = NWScore(rev(Xxmid+1:xlen), rev(Y))
     ymid = PartitionY(ScoreL, ScoreR)
 
     (Z,W) = Hirschberg(X1:xmid, y1:ymid) + Hirschberg(Xxmid+1:xlen, Yymid+1:ylen)
   end
   return (Z,W)
In the context of Observation (2), assume that 
 
 
 
 
  is a partition of 
 
 
 
 . Function 
 
 
 
  returns index 
 
 
 
  such that 
 
 
 
  and 
 
 
 
 
 . 
 
 
 
  is given by
 function PartitionY(ScoreL, ScoreR)
   return arg max ScoreL + rev(ScoreR)
Example
Let



The optimal alignment is given by
 W = AGTACGCA
 Z = --TATGC-
Indeed, this can be verified by backtracking its corresponding Needleman-Wunsch matrix:
         T A T G C
     0  -2  -4  -6  -8 -10
 A  -2  -1   0  -2  -4  -6
 G  -4  -3  -2  -1   0  -2
 T  -6  -2  -4   0  -2  -1
 A  -8  -4   0  -2  -1  -3
 C -10  -6  -2  -1  -3   1
 G -12  -8  -4  -3   1  -1
 C -14 -10  -6  -5  -1   3
 A -16 -12  -8  -7  -3   1
One starts with the top level call to 
 
 
 
 . The call to 
 
 
 
  produces the following matrix:
        T A T G C
    0  -2  -4  -6  -8 -10
 A -2  -1   0  -2  -4  -6
 G -4  -3  -2  -1   0  -2
 T -6  -2  -4   0  -2  -1
 A -8  -4   0  -2  -1  -3
Likewise, 
 
 
 
  generates the following matrix:
       C G T A T
    0 -2  -4  -6  -8 -10
 A -2 -1  -3  -5  -4  -6
 C -4  0  -2  -4  -6  -5
 G -6 -2   2   0  -2  -4
 C -8 -4   0   1  -1  -3
Their last lines are respectively
 ScoreL = [ -8 -4  0 -2 -1 -3 ]
 ScoreR = [ -8 -4  0  1 -1 -3 ]
PartitionY(ScoreL, ScoreR) = 2, such that 
 
 
 
  and 
 
 
 
 .
The entire Hirschberg recursion (which we omit for brevity) produces the following tree:
               (AGTACGCA,TATGC)
               /              \
        (AGTA,TA)            (CGCA,TGC)
         /     \              /      \
     (AG,)   (TA,TA)      (CG,TG)  (CA,C)
              /   \        /   \
           (T,T) (A,A)  (C,T) (G,G)
The leaves of the tree contain the optimal alignment.
See also

Needleman-Wunsch algorithm
Smith Waterman algorithm
Levenshtein distance
Longest Common Subsequence

References
"
Category:Sequence alignment algorithms Category:Bioinformatics algorithms Category:Articles with example pseudocode Category:Dynamic programming



Hirschberg's algorithm
http://www.cs.tau.ac.il/~rshamir/algmb/98/scribe/html/lec02/node10.html





