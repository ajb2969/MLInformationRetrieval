   Smn theorem      Smn theorem   In computability theory the s mn theorem , (also called the translation lemma , parameter theorem , or parameterization theorem ) is a basic result about programming languages (and, more generally, Gödel numberings of the computable functions ) (Soare 1987, Rogers 1967). It was first proved by Stephen Cole Kleene (Kleene 1943).  In practical terms, the theorem says that for a given programming language and positive integers m and n , there is a particular algorithm that operates on the source code of programs with m + n  free variables . This algorithm produces source code that effectively substitutes m given values for the first m free variables in the program and leaves the rest free.  Details  The basic form of the theorem applies to functions of two arguments (Nies 2009, p. 6). Given a Gödel numbering   φ   φ   \varphi   of recursive functions, there is a primitive recursive function  s of two arguments with the following property: for every Gödel number p of a partial computable function f with two arguments, the expressions     φ   s   (  p  ,  x  )      (  y  )        subscript  φ    s   p  x     y    \varphi_{s(p,x)}(y)   and    f   (  x  ,  y  )       f   x  y     f(x,y)   are defined for the same combinations of natural numbers x and y , and their values are equal for any such combination. In other words, the following extensional equality of functions holds for every x :         φ   s   (  p  ,  x  )     ≃   λ  y    .    φ  p    (  x  ,  y  )     .     formulae-sequence   similar-to-or-equals   subscript  φ    s   p  x       λ  y       subscript  φ  p    x  y      \varphi_{s(p,x)}\simeq\lambda y.\varphi_{p}(x,y).\,     More generally, for any m , n > 0, there exists a primitive recursive function    s  n  m     subscript   superscript  s  m   n    s^{m}_{n}   of m + 1 arguments that behaves as follows: for every Gödel number p of a partial computable function with m + n arguments, and all values of x 1 ,…, x m :         φ    s  n  m    (  p  ,   x  1   ,  …  ,   x  m   )     ≃    λ   y  1    ,  …  ,   y  n     .    φ  p    (   x  1   ,  …  ,   x  m   ,   y  1   ,  …  ,   y  n   )     .     formulae-sequence   similar-to-or-equals   subscript  φ     subscript   superscript  s  m   n    p   subscript  x  1   normal-…   subscript  x  m         λ   subscript  y  1    normal-…   subscript  y  n        subscript  φ  p     subscript  x  1   normal-…   subscript  x  m    subscript  y  1   normal-…   subscript  y  n       \varphi_{s^{m}_{n}(p,x_{1},\dots,x_{m})}\simeq\lambda y_{1},\dots,y_{n}.%
 \varphi_{p}(x_{1},\dots,x_{m},y_{1},\dots,y_{n}).\,     The function s described above can be taken to be    s  1  1     subscript   superscript  s  1   1    s^{1}_{1}   .  Example  The following Lisp code implements s 11 for Lisp.  (defun s11 (f x)
    (let ((y (gensym)))
      (list 'lambda (list y) (list f x y))))  For example,  evaluates to .  See also   Currying  Kleene's recursion theorem  Partial evaluation   References     (This is the reference that the 1989 edition of Odifreddi's "Classical Recursion Theory" gives on p.131 for the s mn theorem.)       External links     "  Category:Computability theory  Category:Theorems in theory of computation   