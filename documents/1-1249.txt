   BCH code      BCH code   In coding theory , the BCH codes form a class of cyclic  error-correcting codes that are constructed using finite fields . BCH codes were invented in 1959 by French mathematician Alexis Hocquenghem , and independently in 1960 by Raj Bose and D. K. Ray-Chaudhuri . 1 2 3 The acronym BCH comprises the initials of these inventors' names.  One of the key features of BCH codes is that during code design, there is a precise control over the number of symbol errors correctable by the code. In particular, it is possible to design binary BCH codes that can correct multiple bit errors. Another advantage of BCH codes is the ease with which they can be decoded, namely, via an algebraic method known as syndrome decoding . This simplifies the design of the decoder for these codes, using small low-power electronic hardware.  BCH codes are used in applications such as satellite communications, 4  compact disc players, DVDs , disk drives , solid-state drives 5 and two-dimensional bar codes .  Definition and illustration  Primitive narrow-sense BCH codes  Given a prime power    q   q   q   and positive integers   m   m   m   and   d   d   d   with , a primitive narrow-sense BCH code over the finite field    G  F   (  q  )       G  F  q    GF(q)   with code length  q m − 1}} and distance at least   d   d   d   is constructed by the following method.  Let   α   α   α   be a primitive element of . For any positive integer   i   i   i   , let be the minimal polynomial of over    G  F   (  q  )       G  F  q    GF(q)   . The generator polynomial of the BCH code is defined as the least common multiple  lcm( m 1 ( x ),…, m d − 1 ( x ))}} . It can be seen that    g   (  x  )       g  x    g(x)   is a polynomial with coefficients in    G  F   (  q  )       G  F  q    GF(q)   and divides . Therefore, the polynomial code defined by    g   (  x  )       g  x    g(x)   is a cyclic code.  Example  Let    q  =  2      q  2    q=2   and    m  =  4      m  4    m=4   (therefore    n  =  15      n  15    n=15   ). We will consider different values of   d   d   d   . There is a primitive root   α   α   α   in    G  F   (  16  )       G  F  16    GF(16)   satisfying      its minimal polynomial over    G  F   (  2  )       G  F  2    GF(2)   is        m  1    (  x  )    =    x  4   +  x  +  1.          subscript  m  1   x      superscript  x  4   x  1.     m_{1}(x)=x^{4}+x+1.   The minimal polynomials of the first seven powers of   α   α   α   are         m  1    (  x  )    =    m  2    (  x  )    =    m  4    (  x  )    =    x  4   +  x  +  1    ,           subscript  m  1   x      subscript  m  2   x           subscript  m  4   x           superscript  x  4   x  1      m_{1}(x)=m_{2}(x)=m_{4}(x)=x^{4}+x+1,\,            m  3    (  x  )    =    m  6    (  x  )    =    x  4   +   x  3   +   x  2   +  x  +  1    ,           subscript  m  3   x      subscript  m  6   x           superscript  x  4    superscript  x  3    superscript  x  2   x  1      m_{3}(x)=m_{6}(x)=x^{4}+x^{3}+x^{2}+x+1,\,            m  5    (  x  )    =    x  2   +  x  +  1    ,         subscript  m  5   x      superscript  x  2   x  1     m_{5}(x)=x^{2}+x+1,\,           m  7    (  x  )    =    x  4   +   x  3   +   1.           subscript  m  7   x      superscript  x  4    superscript  x  3   1.     m_{7}(x)=x^{4}+x^{3}+1.\,     The BCH code with    d  =   2  ,  3       d   2  3     d=2,3   has generator polynomial       g   (  x  )    =    m  1    (  x  )    =    x  4   +  x  +   1.            g  x      subscript  m  1   x           superscript  x  4   x  1.      g(x)=m_{1}(x)=x^{4}+x+1.\,     It has minimal Hamming distance at least 3 and corrects up to one error. Since the generator polynomial is of degree 4, this code has 11 data bits and 4 checksum bits.  The BCH code with    d  =   4  ,  5       d   4  5     d=4,5   has generator polynomial       g   (  x  )    =   lcm   (    m  1    (  x  )    ,    m  3    (  x  )    )    =    (    x  4   +  x  +  1   )    (    x  4   +   x  3   +   x  2   +  x  +  1   )    =    x  8   +   x  7   +   x  6   +   x  4   +   1.            g  x     lcm      subscript  m  1   x      subscript  m  3   x               superscript  x  4   x  1      superscript  x  4    superscript  x  3    superscript  x  2   x  1            superscript  x  8    superscript  x  7    superscript  x  6    superscript  x  4   1.      g(x)={\rm lcm}(m_{1}(x),m_{3}(x))=(x^{4}+x+1)(x^{4}+x^{3}+x^{2}+x+1)=x^{8}+x^{%
 7}+x^{6}+x^{4}+1.\,     It has minimal Hamming distance at least 5 and corrects up to two errors. Since the generator polynomial is of degree 8, this code has 7 data bits and 8 checksum bits.  The BCH code with    d  =  8      d  8    d=8   and higher has generator polynomial         g   (  x  )        =   lcm   (    m  1    (  x  )    ,    m  3    (  x  )    ,    m  5    (  x  )    ,    m  7    (  x  )    )            =    (    x  4   +  x  +  1   )    (    x  4   +   x  3   +   x  2   +  x  +  1   )    (    x  2   +  x  +  1   )    (    x  4   +   x  3   +  1   )            =    x  14   +   x  13   +   x  12   +  ⋯  +   x  2   +  x  +  1.            g  x     absent    lcm      subscript  m  1   x      subscript  m  3   x      subscript  m  5   x      subscript  m  7   x         missing-subexpression     absent       superscript  x  4   x  1      superscript  x  4    superscript  x  3    superscript  x  2   x  1      superscript  x  2   x  1      superscript  x  4    superscript  x  3   1        missing-subexpression     absent     superscript  x  14    superscript  x  13    superscript  x  12   normal-⋯   superscript  x  2   x  1.       \begin{aligned}\displaystyle g(x)&\displaystyle{}={\rm lcm}(m_{1}(x),m_{3}(x),%
 m_{5}(x),m_{7}(x))\\
 &\displaystyle{}=(x^{4}+x+1)(x^{4}+x^{3}+x^{2}+x+1)(x^{2}+x+1)(x^{4}+x^{3}+1)%
 \\
 &\displaystyle{}=x^{14}+x^{13}+x^{12}+\cdots+x^{2}+x+1.\end{aligned}     This code has minimal Hamming distance 15 and corrects 7 errors. It has 1 data bit and 14 checksum bits. In fact, this code has only two codewords: 000000000000000 and 111111111111111.  General BCH codes  General BCH codes differ from primitive narrow-sense BCH codes in two respects.  First, the requirement that   α   α   \alpha   be a primitive element of    GF   (   q  m   )       GF   superscript  q  m     \mathrm{GF}(q^{m})   can be relaxed. By relaxing this requirement, the code length changes from     q  m   -  1       superscript  q  m   1    q^{m}-1   to     ord   (  α  )    ,      ord  α    \mathrm{ord}(\alpha),   the order of the element    α  .    α   \alpha.     Second, the consecutive roots of the generator polynomial may run from     α  c   ,  …  ,   α    c  +  d   -  2        superscript  α  c   normal-…   superscript  α      c  d   2      \alpha^{c},\ldots,\alpha^{c+d-2}   instead of     α  ,  …  ,   α   d  -  1     .     α  normal-…   superscript  α    d  1      \alpha,\ldots,\alpha^{d-1}.     Definition. Fix a finite field     G  F   (  q  )    ,      G  F  q    GF(q),   where   q   q   q   is a prime power. Choose positive integers    m  ,  n  ,  d  ,  c     m  n  d  c    m,n,d,c   such that     2  ≤  d  ≤  n   ,        2  d       n     2\leq d\leq n,         gcd   (  n  ,  q  )    =  1   ,        gcd   n  q    1    {\rm gcd}(n,q)=1,   and   m   m   m   is the multiplicative order of   q   q   q   modulo    n  .    n   n.     As before, let   α   α   \alpha   be a primitive   n   n   n   th root of unity in     G  F   (   q  m   )    ,      G  F   superscript  q  m     GF(q^{m}),   and let     m  i    (  x  )        subscript  m  i   x    m_{i}(x)   be the minimal polynomial over    G  F   (  q  )       G  F  q    GF(q)   of    α  i     superscript  α  i    \alpha^{i}   for all    i  .    i   i.   The generator polynomial of the BCH code is defined as the least common multiple       g   (  x  )    =   lcm   (    m  c    (  x  )    ,  …  ,    m    c  +  d   -  2     (  x  )    )     .        g  x     lcm      subscript  m  c   x   normal-…     subscript  m      c  d   2    x       g(x)={\rm lcm}(m_{c}(x),\ldots,m_{c+d-2}(x)).     Note: if    n  =    q  m   -  1       n     superscript  q  m   1     n=q^{m}-1   as in the simplified definition, then    gcd   (  n  ,  q  )       gcd   n  q     {\rm gcd}(n,q)   is automatically 1, and the order of   q   q   q   modulo   n   n   n   is automatically    m  .    m   m.   Therefore, the simplified definition is indeed a special case of the general one.  Special cases   A BCH code with    c  =  1      c  1    c=1   is called a narrow-sense BCH code .  A BCH code with    n  =    q  m   -  1       n     superscript  q  m   1     n=q^{m}-1   is called primitive .   The generator polynomial    g   (  x  )       g  x    g(x)   of a BCH code has coefficients from     GF   (  q  )    .      GF  q    \mathrm{GF}(q).   In general, a cyclic code over    GF   (   q  p   )       GF   superscript  q  p     \mathrm{GF}(q^{p})   with    g   (  x  )       g  x    g(x)   as the generator polynomial is called a BCH code over     GF   (   q  p   )    .      GF   superscript  q  p     \mathrm{GF}(q^{p}).   The BCH code over    GF   (   q  m   )       GF   superscript  q  m     \mathrm{GF}(q^{m})   with    g   (  x  )       g  x    g(x)   as the generator polynomial is called a Reed–Solomon code . In other words, a Reed–Solomon code is a BCH code where the decoder alphabet is the same as the channel alphabet. 6  Properties  1. The generator polynomial of a BCH code has degree at most      (   d  -  1   )   m   .        d  1   m    (d-1)m.   Moreover, if    q  =  2      q  2    q=2   and     c  =  1   ,      c  1    c=1,   the generator polynomial has degree at most     d  m   /  2.        d  m   2.    dm/2.      Proof: each minimal polynomial     m  i    (  x  )        subscript  m  i   x    m_{i}(x)   has degree at most    m  .    m   m.      Therefore, the least common multiple of    d  -  1      d  1    d-1   of them has degree at most      (   d  -  1   )   m   .        d  1   m    (d-1)m.   Moreover, if     q  =  2   ,      q  2    q=2,   then      m  i    (  x  )    =    m   2  i     (  x  )           subscript  m  i   x      subscript  m    2  i    x     m_{i}(x)=m_{2i}(x)   for all    i  .    i   i.   Therefore,    g   (  x  )       g  x    g(x)   is the least common multiple of at most    d  /  2      d  2    d/2   minimal polynomials     m  i    (  x  )        subscript  m  i   x    m_{i}(x)   for odd indices    i  ,    i   i,   each of degree at most    m  .    m   m.     2. A BCH code has minimal Hamming distance at least    d  .    d   d.   Proof: Suppose that    p   (  x  )       p  x    p(x)   is a code word with fewer than   d   d   d   non-zero terms. Then       g   (  x  )    ,      g  x    g(x),   are roots of     p   (  x  )    .      p  x    p(x).   hence of     b  1   ,  …  ,   b   d  -  1        subscript  b  1   normal-…   subscript  b    d  1      b_{1},\ldots,b_{d-1}   This implies that     i  =   c  ,  …  ,    c  +  d   -  2     :      normal-:    i   c  normal-…      c  d   2     absent    i=c,\ldots,c+d-2:   satisfy the following equations, for     p   (   α  i   )    =     b  1    α   i   k  1      +    b  2    α   i   k  2      +  ⋯  +    b   d  -  1     α   i   k   d  -  1        =  0.          p   superscript  α  i         subscript  b  1    superscript  α    i   subscript  k  1         subscript  b  2    superscript  α    i   subscript  k  2      normal-⋯     subscript  b    d  1     superscript  α    i   subscript  k    d  1             0.     p(\alpha^{i})=b_{1}\alpha^{ik_{1}}+b_{2}\alpha^{ik_{2}}+\cdots+b_{d-1}\alpha^{%
 ik_{d-1}}=0.            [      α   c   k  1        α   c   k  2       ⋯     α   c   k   d  -  1           α    (   c  +  1   )    k  1        α    (   c  +  1   )    k  2       ⋯     α    (   c  +  1   )    k   d  -  1          ⋮    ⋮       ⋮       α    (    c  +  d   -  2   )    k  1        α    (    c  +  d   -  2   )    k  2       ⋯     α    (    c  +  d   -  2   )    k   d  -  1         ]    [      b  1        b  2       ⋮       b   d  -  1       ]    =   [     0      0      ⋮      0     ]    .           superscript  α    c   subscript  k  1      superscript  α    c   subscript  k  2     normal-⋯   superscript  α    c   subscript  k    d  1         superscript  α      c  1    subscript  k  1      superscript  α      c  1    subscript  k  2     normal-⋯   superscript  α      c  1    subscript  k    d  1        normal-⋮  normal-⋮  absent  normal-⋮     superscript  α        c  d   2    subscript  k  1      superscript  α        c  d   2    subscript  k  2     normal-⋯   superscript  α        c  d   2    subscript  k    d  1           subscript  b  1      subscript  b  2     normal-⋮     subscript  b    d  1         0    0    normal-⋮    0      \begin{bmatrix}\alpha^{ck_{1}}&\alpha^{ck_{2}}&\cdots&\alpha^{ck_{d-1}}\\
 \alpha^{(c+1)k_{1}}&\alpha^{(c+1)k_{2}}&\cdots&\alpha^{(c+1)k_{d-1}}\\
 \vdots&\vdots&&\vdots\\
 \alpha^{(c+d-2)k_{1}}&\alpha^{(c+d-2)k_{2}}&\cdots&\alpha^{(c+d-2)k_{d-1}}\\
 \end{bmatrix}\begin{bmatrix}b_{1}\\
 b_{2}\\
 \vdots\\
 b_{d-1}\end{bmatrix}=\begin{bmatrix}0\\
 0\\
 \vdots\\
 0\end{bmatrix}.     In matrix form, we have         (    ∏   i  =  1    d  -  1     α   c   k  i      )    det   (     1    1    ⋯    1       α   k  1       α   k  2      ⋯     α   k   d  -  1         ⋮    ⋮       ⋮       α    (   d  -  2   )    k  1        α    (   d  -  2   )    k  2       ⋯     α    (   d  -  2   )    k   d  -  1         )     =    (    ∏   i  =  1    d  -  1     α   c   k  i      )    det   (  V  )      .          superscript   subscript  product    i  1      d  1     superscript  α    c   subscript  k  i          1  1  normal-⋯  1     superscript  α   subscript  k  1     superscript  α   subscript  k  2    normal-⋯   superscript  α   subscript  k    d  1       normal-⋮  normal-⋮  absent  normal-⋮     superscript  α      d  2    subscript  k  1      superscript  α      d  2    subscript  k  2     normal-⋯   superscript  α      d  2    subscript  k    d  1              superscript   subscript  product    i  1      d  1     superscript  α    c   subscript  k  i        V      \left(\prod_{i=1}^{d-1}\alpha^{ck_{i}}\right)\det\begin{pmatrix}1&1&\cdots&1\\
 \alpha^{k_{1}}&\alpha^{k_{2}}&\cdots&\alpha^{k_{d-1}}\\
 \vdots&\vdots&&\vdots\\
 \alpha^{(d-2)k_{1}}&\alpha^{(d-2)k_{2}}&\cdots&\alpha^{(d-2)k_{d-1}}\\
 \end{pmatrix}=\left(\prod_{i=1}^{d-1}\alpha^{ck_{i}}\right)\det(V).     The determinant of this matrix equals     V   V   V     The matrix     p   (  x  )    =  0.        p  x   0.    p(x)=0.   is seen to be a Vandermonde matrix , and its determinant is     n   n   n   hence     x  n   -  1.       superscript  x  n   1.    x^{n}-1.     3. A BCH code is cyclic.  Proof: A polynomial code of length    g   (  x  )       g  x    g(x)   is cyclic if and only if its generator polynomial divides      α  c   ,  …  ,   α    c  +  d   -  2     ,      superscript  α  c   normal-…   superscript  α      c  d   2      \alpha^{c},\ldots,\alpha^{c+d-2},   Since     α  c   ,  …  ,   α    c  +  d   -  2        superscript  α  c   normal-…   superscript  α      c  d   2      \alpha^{c},\ldots,\alpha^{c+d-2}   is the minimal polynomial with roots     x  n   -  1.       superscript  x  n   1.    x^{n}-1.   it suffices to check that each of   α   α   \alpha   is a root of   n   n   n   This follows immediately from the fact that   R   R   R   is, by definition, an   C   C   C   th root of unity.  Encoding  Decoding  There are many algorithms for decoding BCH codes. The most common ones follow this general outline:   Calculate the syndromes s j for the received vector  Determine the number of errors t and the error locator polynomial Λ(x) from the syndromes  Calculate the roots of the error location polynomial to find the error locations X i  Calculate the error values Y i at those error locations  Correct the errors   During some of these steps, the decoding algorithm may determine that the received vector has too many errors and cannot be corrected. For example, if an appropriate value of t is not found, then the correction would fail. In a truncated (not primitive) code, an error location may be out of range. If the received vector has more errors than the code can correct, the decoder may unknowingly produce an apparently valid message that is not the one that was sent.  Calculate the syndromes  The received vector    E  .    E   E.   is the sum of the correct codeword   R   R   R   and an unknown error vector      α  c   ,  …  ,   α    c  +  d   -  2     .      superscript  α  c   normal-…   superscript  α      c  d   2      \alpha^{c},\ldots,\alpha^{c+d-2}.   The syndrome values are formed by considering     s  j   =   R   (   α  j   )    =    C   (   α  j   )    +   E   (   α  j   )            subscript  s  j     R   superscript  α  j             C   superscript  α  j      E   superscript  α  j        s_{j}=R(\alpha^{j})=C(\alpha^{j})+E(\alpha^{j})   as a polynomial and evaluating it at    j  =  c      j  c    j=c   Thus the syndromes are 7       c  +  d   -  2.        c  d   2.    c+d-2.   for    α  j     superscript  α  j    \alpha^{j}   to     g   (  x  )    ,      g  x    g(x),   Since    C   (  x  )       C  x    C(x)   are the zeros of     C   (   α  j   )    =  0.        C   superscript  α  j    0.    C(\alpha^{j})=0.   of which     s  j   =  0       subscript  s  j   0    s_{j}=0   is a multiple,    j  .    j   j.   Examining the syndrome values thus isolates the error vector so one can begin to solve for it.  If there is no error,      E   (  x  )    =    e    x  i     ,        E  x     e   superscript  x  i      E(x)=e\,x^{i},   for all   i   i   i   If the syndromes are all zero, then the decoding is done.  Calculate the error location polynomial  If there are nonzero syndromes, then there are errors. The decoder needs to figure out how many errors and the location of those errors.  If there is a single error, write this as   e   e   e   where     s  c   =    e    α    c   i          subscript  s  c     e   superscript  α    c  i       s_{c}=e\,\alpha^{c\,i}   is the location of the error and     s   c  +  1    =    e    α    (   c  +  1   )   i     =    α  i    s  c           subscript  s    c  1      e   superscript  α      c  1   i             superscript  α  i    subscript  s  c       s_{c+1}=e\,\alpha^{(c+1)\,i}=\alpha^{i}s_{c}   is its magnitude. Then the first two syndromes are     e   e   e        i   i   i   so together they allow us to calculate     E   (  x  )    =     e  1    x   i  1     +    e  2    x   i  2     +   ⋯          E  x        subscript  e  1    superscript  x   subscript  i  1        subscript  e  2    superscript  x   subscript  i  2     normal-⋯     E(x)=e_{1}x^{i_{1}}+e_{2}x^{i_{2}}+\cdots\,   and provide some information about    e  k     subscript  e  k    e_{k}   (completely determining it in the case of Reed–Solomon codes).  If there are two or more errors,       i  k   .     subscript  i  k    i_{k}.   It is not immediately obvious how to begin solving the resulting syndromes for the unknowns     Λ   (  x  )    =    ∏   j  =  1   t    (    x   α   i  j     -  1   )          normal-Λ  x     superscript   subscript  product    j  1    t       x   superscript  α   subscript  i  j     1      \Lambda(x)=\prod_{j=1}^{t}(x\alpha^{i_{j}}-1)   and    t  .    t   t.   First step is finding locator polynomial       λ  1   ,   λ  2   ,  …  ,   λ  v       subscript  λ  1    subscript  λ  2   normal-…   subscript  λ  v     \lambda_{1},\lambda_{2},\dots,\lambda_{v}   compatible with computed syndromes and with minimal possible      Λ   (  x  )    =   1  +    λ  1   x   +    λ  2    x  2    +  ⋯  +    λ  v    x  v      .        normal-Λ  x     1     subscript  λ  1   x      subscript  λ  2    superscript  x  2    normal-⋯     subscript  λ  v    superscript  x  v       \Lambda(x)=1+\lambda_{1}x+\lambda_{2}x^{2}+\cdots+\lambda_{v}x^{v}.     Two popular algorithms for this task are:   Peterson–Gorenstein–Zierler algorithm  Berlekamp–Massey algorithm   Peterson–Gorenstein–Zierler algorithm  Peterson's algorithm is the step 2 of the generalized BCH decoding procedure. Peterson's algorithm is used to calculate the error locator polynomial coefficients    S   v  ×  v      subscript  S    v  v     S_{v\times v}   of a polynomial      c   v  ×  1      subscript  c    v  1     c_{v\times 1}     Now the procedure of the Peterson–Gorenstein–Zierler algorithm. 8 Expect we have at least 2 t syndromes s c ,..., s c +2 t −1 . Let v = t .   Start by generating the   Λ   normal-Λ   \Lambda   matrix with elements that are syndrome values     S_{v \times v}=\begin{bmatrix}s_c&s;_{c+1}&\dots&s;_{c+v-1}\\     s_{c+1}&s;_{c+2}&\dots&s;_{c+v}\\ \vdots&\vdots&\ddots&\vdots\\ s_{c+v-1}&s;_{c+v}&\dots&s;_{c+2v-2}\end{bmatrix}.   Generate a       S   v  ×  v     Λ   v  ×  1     =   -   C   v  ×   1       .         subscript  S    v  v     subscript  normal-Λ    v  1        subscript  C    v  1       S_{v\times v}\Lambda_{v\times 1}=-C_{v\times 1\,}.   vector with elements     C_{v \times 1}=\begin{bmatrix}s_{c+v}\\     s_{c+v+1}\\ \vdots\\ s_{c+2v-1}\end{bmatrix}.   Let    S   v  ×  v      subscript  S    v  v     S_{v\times v}   denote the unknown polynomial coefficients, which are given by     \Lambda_{v \times 1} = \begin{bmatrix}\lambda_{v}\\     \lambda_{v-1}\\ \vdots\\ \lambda_{1}\end{bmatrix}.   Form the matrix equation        Λ   normal-Λ   \Lambda         If the determinant of matrix      det   (   S   v  ×  v    )    =  0   ,         subscript  S    v  v     0    \det(S_{v\times v})=0,   is nonzero, then we can actually find an inverse of this matrix and solve for the values of unknown    v  =  0      v  0    v=0   values.  If    v  ←   v  -  1      normal-←  v    v  1     v\leftarrow v-1   then follow   if     S   v  ×  v      subscript  S    v  v     S_{v\times v}     then  declare an empty error locator polynomial  stop Peterson procedure.  end  set    Λ   normal-Λ   \Lambda     continue from the beginning of Peterson's decoding by making smaller     Λ   (  x  )       normal-Λ  x    \Lambda(x)      After you have values of     Λ   (  x  )    =    (     α   i  1    x   -  1   )    (     α   i  2    x   -  1   )   ⋯   (     α   i  v    x   -  1   )          normal-Λ  x          superscript  α   subscript  i  1    x   1        superscript  α   subscript  i  2    x   1   normal-⋯       superscript  α   subscript  i  v    x   1      \Lambda(x)=(\alpha^{i_{1}}x-1)(\alpha^{i_{2}}x-1)\cdots(\alpha^{i_{v}}x-1)   , you have with you the error locator polynomial.  Stop Peterson procedure.   Factor error locator polynomial  Now that you have the   α   α   \alpha   polynomial, its roots can be found in the form    e  j     subscript  e  j    e_{j}   by brute force for example using the Chien search algorithm. The exponential powers of the primitive element    s  c     subscript  s  c    \displaystyle s_{c}   will yield the positions where errors occur in the received word; hence the name 'error locator' polynomial.  The zeros of Λ( x ) are α − i 1 , ..., α − i v .  Calculate error values  Once the error locations are known, the next step is to determine the error values at those locations. The error values are then used to correct the received values at those locations to recover the original codeword.  For the case of binary BCH, (with all characters readable) this is trivial; just flip the bits for the received word at these positions, and we have the corrected code word. In the more general case, the error weights      S   (  x  )    =    s  c   +    s   c  +  1    x   +    s   c  +  2     x  2    +  ⋯  +    s    c  +  d   -  2     x   d  -  2       .        S  x      subscript  s  c      subscript  s    c  1    x      subscript  s    c  2     superscript  x  2    normal-⋯     subscript  s      c  d   2     superscript  x    d  2        S(x)=s_{c}+s_{c+1}x+s_{c+2}x^{2}+\cdots+s_{c+d-2}x^{d-2}.   can be determined by solving the linear system       v  ≤   d  -  1    ,      v    d  1     v\leq d-1,     Forney algorithm  However, there is a more efficient method known as the Forney algorithm .  Let      λ  0   ≠  0   ,       subscript  λ  0   0    \lambda_{0}\neq 0,     Let      Λ   (  x  )    =    ∑   i  =  0   v     λ  i    x  i     =    λ  0   ⋅    ∏   k  =  0   v    (     α   -   i  k     x   -  1   )      .          normal-Λ  x     superscript   subscript     i  0    v      subscript  λ  i    superscript  x  i           normal-⋅   subscript  λ  0     superscript   subscript  product    k  0    v        superscript  α     subscript  i  k     x   1        \Lambda(x)=\sum_{i=0}^{v}\lambda_{i}x^{i}=\lambda_{0}\cdot\prod_{k=0}^{v}(%
 \alpha^{-i_{k}}x-1).        Ω   (  x  )    =    S   (  x  )   Λ   (  x  )       (   mod   x   d  -  1     )          normal-Ω  x    annotated    S  x  normal-Λ  x    pmod   superscript  x    d  1        \Omega(x)=S(x)\,\Lambda(x)\;\;(\mathop{{\rm mod}}x^{d-1})   and       Λ  ′    (  x  )    =      Σ   i  =  1   v   i   ⋅   λ  i     x   i  -  1      ,         superscript  normal-Λ  normal-′   x      normal-⋅     superscript   subscript  normal-Σ    i  1    v   i    subscript  λ  i     superscript  x    i  1       \Lambda^{\prime}(x)=\Sigma_{i=1}^{v}i\cdot\lambda_{i}x^{i-1},     Let    i  ⋅  x     normal-⋅  i  x    i\cdot x   be the error evaluator polynomial 9  Let     ∑   k  =  1   i   x      superscript   subscript     k  1    i   x    \textstyle\sum_{k=1}^{i}x   where    i  k     subscript  i  k    i_{k}   denotes here      e  k   =   -     α   i  k    Ω   (   α   -   i  k     )      α   c  ⋅   i  k      Λ  ′    (   α   -   i  k     )       .       subscript  e  k          superscript  α   subscript  i  k    normal-Ω   superscript  α     subscript  i  k         superscript  α   normal-⋅  c   subscript  i  k      superscript  normal-Λ  normal-′    superscript  α     subscript  i  k          e_{k}=-{\alpha^{i_{k}}\Omega(\alpha^{-i_{k}})\over\alpha^{c\cdot i_{k}}\Lambda%
 ^{\prime}(\alpha^{-i_{k}})}.   rather than multiplying in the field.  Than if syndromes could be explained by an error word, which could be nonzero only on positions      e  k   =   -    Ω   (   α   -   i  k     )      Λ  ′    (   α   -   i  k     )       .       subscript  e  k         normal-Ω   superscript  α     subscript  i  k         superscript  normal-Λ  normal-′    superscript  α     subscript  i  k          e_{k}=-{\Omega(\alpha^{-i_{k}})\over\Lambda^{\prime}(\alpha^{-i_{k}})}.   , then error values are       S   (  x  )   Λ   (  x  )    .      S  x  normal-Λ  x    S(x)\Lambda(x).     For narrow-sense BCH codes, c = 1, so the expression simplifies to:       λ  k   =  0       subscript  λ  k   0    \lambda_{k}=0     Explanation of Forney algorithm computation  It is based on Lagrange interpolation and techniques of generating functions .  Look at     k  >  v   ,      k  v    k>v,   Let for simplicity     s  k   =  0       subscript  s  k   0    s_{k}=0   for    k  >    c  +  d   -  2.       k      c  d   2.     k>c+d-2.   and      S   (  x  )   Λ   (  x  )    =    ∑   j  =  0   ∞     ∑   i  =  0   j     s    j  -  i   +  1     λ  i    x  j       .        S  x  normal-Λ  x     superscript   subscript     j  0        superscript   subscript     i  0    j      subscript  s      j  i   1     subscript  λ  i    superscript  x  j        S(x)\Lambda(x)=\sum_{j=0}^{\infty}\sum_{i=0}^{j}s_{j-i+1}\lambda_{i}x^{j}.   for      S   (  x  )    =    ∑   i  =  0    d  -  2      ∑   j  =  1   v     e  j    α    (   c  +  i   )   ⋅   i  j      x  i      =    ∑   j  =  1   v     e  j    α    c    i  j       ∑   i  =  0    d  -  2       (   α   i  j    )   i    x  i       =    ∑   j  =  1   v     e  j    α    c    i  j         (   x   α   i  j     )    d  -  1    -  1     x   α   i  j     -  1       .          S  x     superscript   subscript     i  0      d  2      superscript   subscript     j  1    v      subscript  e  j    superscript  α   normal-⋅    c  i    subscript  i  j      superscript  x  i             superscript   subscript     j  1    v      subscript  e  j    superscript  α    c   subscript  i  j       superscript   subscript     i  0      d  2       superscript   superscript  α   subscript  i  j    i    superscript  x  i              superscript   subscript     j  1    v      subscript  e  j    superscript  α    c   subscript  i  j          superscript    x   superscript  α   subscript  i  j       d  1    1       x   superscript  α   subscript  i  j     1         S(x)=\sum_{i=0}^{d-2}\sum_{j=1}^{v}e_{j}\alpha^{(c+i)\cdot i_{j}}x^{i}=\sum_{j%
 =1}^{v}e_{j}\alpha^{c\,i_{j}}\sum_{i=0}^{d-2}(\alpha^{i_{j}})^{i}x^{i}=\sum_{j%
 =1}^{v}e_{j}\alpha^{c\,i_{j}}{(x\alpha^{i_{j}})^{d-1}-1\over x\alpha^{i_{j}}-1}.     Then      S   (  x  )   Λ   (  x  )    =   S   (  x  )    λ  0     ∏   ℓ  =  1   v    (     α   i  ℓ    x   -  1   )     =    λ  0     ∑   j  =  1   v     e  j    α    c    i  j         (   x   α   i  j     )    d  -  1    -  1     x   α   i  j     -  1      ∏   ℓ  =  1   v    (     α   i  ℓ    x   -  1   )        .          S  x  normal-Λ  x     S  x   subscript  λ  0     superscript   subscript  product    normal-ℓ  1    v        superscript  α   subscript  i  normal-ℓ    x   1             subscript  λ  0     superscript   subscript     j  1    v      subscript  e  j    superscript  α    c   subscript  i  j          superscript    x   superscript  α   subscript  i  j       d  1    1       x   superscript  α   subscript  i  j     1      superscript   subscript  product    normal-ℓ  1    v        superscript  α   subscript  i  normal-ℓ    x   1          S(x)\Lambda(x)=S(x)\lambda_{0}\prod_{\ell=1}^{v}(\alpha^{i_{\ell}}x-1)=\lambda%
 _{0}\sum_{j=1}^{v}e_{j}\alpha^{c\,i_{j}}{(x\alpha^{i_{j}})^{d-1}-1\over x%
 \alpha^{i_{j}}-1}\prod_{\ell=1}^{v}(\alpha^{i_{\ell}}x-1).           S   (  x  )   Λ   (  x  )    =    λ  0     ∑   j  =  1   v     e  j    α    c    i  j      (     (   x   α   i  j     )    d  -  1    -  1   )     ∏   ℓ  ∈    {  1  ,  …  ,  v  }   ∖   {  j  }       (     α   i  ℓ    x   -  1   )        .        S  x  normal-Λ  x      subscript  λ  0     superscript   subscript     j  1    v      subscript  e  j    superscript  α    c   subscript  i  j        superscript    x   superscript  α   subscript  i  j       d  1    1     subscript  product    normal-ℓ     1  normal-…  v    j           superscript  α   subscript  i  normal-ℓ    x   1         S(x)\Lambda(x)=\lambda_{0}\sum_{j=1}^{v}e_{j}\alpha^{c\,i_{j}}((x\alpha^{i_{j}%
 })^{d-1}-1)\prod_{\ell\in\{1,\dots,v\}\setminus\{j\}}(\alpha^{i_{\ell}}x-1).          e  j   ,     subscript  e  j    e_{j},   We could gain form of polynomial:       (   x   α   i  j     )    d  -  1      superscript    x   superscript  α   subscript  i  j       d  1     (x\alpha^{i_{j}})^{d-1}   We want to compute unknowns      Ω   (  x  )    =    S   (  x  )   Λ   (  x  )       (   mod   x   d  -  1     )     .        normal-Ω  x    annotated    S  x  normal-Λ  x    pmod   superscript  x    d  1        \Omega(x)=S(x)\,\Lambda(x)\;\;(\mathop{{\rm mod}}x^{d-1}).   and we could simplify the context by removing the    v  ≤   d  -  1       v    d  1     v\leq d-1   terms. This leads to the error evaluator polynomial        Ω   (  x  )    =   -    λ  0     ∑   j  =  1   v     e  j    α    c    i  j       ∏   ℓ  ∈    {  1  ,  …  ,  v  }   ∖   {  j  }       (     α   i  ℓ    x   -  1   )         .        normal-Ω  x        subscript  λ  0     superscript   subscript     j  1    v      subscript  e  j    superscript  α    c   subscript  i  j       subscript  product    normal-ℓ     1  normal-…  v    j           superscript  α   subscript  i  normal-ℓ    x   1          \Omega(x)=-\lambda_{0}\sum_{j=1}^{v}e_{j}\alpha^{c\,i_{j}}\prod_{\ell\in\{1,%
 \dots,v\}\setminus\{j\}}(\alpha^{i_{\ell}}x-1).     Thanks to     Ω   (   α   -   i  k     )    .      normal-Ω   superscript  α     subscript  i  k       \Omega(\alpha^{-i_{k}}).   we have     Λ   normal-Λ   \Lambda     Look at      Ω   (   α   -   i  k     )    =   -    λ  0    e  k    α   c  ⋅   i  k       ∏   ℓ  ∈    {  1  ,  …  ,  v  }   ∖   {  k  }       (     α   i  ℓ     α   -   i  k      -  1   )       .        normal-Ω   superscript  α     subscript  i  k           subscript  λ  0    subscript  e  k    superscript  α   normal-⋅  c   subscript  i  k       subscript  product    normal-ℓ     1  normal-…  v    k           superscript  α   subscript  i  normal-ℓ     superscript  α     subscript  i  k      1        \Omega(\alpha^{-i_{k}})=-\lambda_{0}e_{k}\alpha^{c\cdot i_{k}}\prod_{\ell\in\{%
 1,\dots,v\}\setminus\{k\}}(\alpha^{i_{\ell}}\alpha^{-i_{k}}-1).   Thanks to    e  k     subscript  e  k    e_{k}   (the Lagrange interpolation trick) the sum degenerates to only one summand      α   -   i  j       superscript  α     subscript  i  j      \alpha^{-i_{j}}   To get    Λ  ,    normal-Λ   \Lambda,   we just should get rid of the product. We could compute the product directly from already computed roots       Λ  ′    (  x  )    =    λ  0     ∑   j  =  1   v     α   i  j      ∏   ℓ  ∈    {  1  ,  …  ,  v  }   ∖   {  j  }       (     α   i  ℓ    x   -  1   )        ,         superscript  normal-Λ  normal-′   x      subscript  λ  0     superscript   subscript     j  1    v      superscript  α   subscript  i  j      subscript  product    normal-ℓ     1  normal-…  v    j           superscript  α   subscript  i  normal-ℓ    x   1         \Lambda^{\prime}(x)=\lambda_{0}\sum_{j=1}^{v}\alpha^{i_{j}}\prod_{\ell\in\{1,%
 \dots,v\}\setminus\{j\}}(\alpha^{i_{\ell}}x-1),   of       Λ  ′    (   α   -   i  k     )    =    λ  0    α   i  k      ∏   ℓ  ∈    {  1  ,  …  ,  v  }   ∖   {  k  }       (     α   i  ℓ     α   -   i  k      -  1   )      .         superscript  normal-Λ  normal-′    superscript  α     subscript  i  k         subscript  λ  0    superscript  α   subscript  i  k      subscript  product    normal-ℓ     1  normal-…  v    k           superscript  α   subscript  i  normal-ℓ     superscript  α     subscript  i  k      1       \Lambda^{\prime}(\alpha^{-i_{k}})=\lambda_{0}\alpha^{i_{k}}\prod_{\ell\in\{1,%
 \dots,v\}\setminus\{k\}}(\alpha^{i_{\ell}}\alpha^{-i_{k}}-1).   but we could use simpler form.  As formal derivative       e  k   =   -     α   i  k    Ω   (   α   -   i  k     )      α   c  ⋅   i  k      Λ  ′    (   α   -   i  k     )       .       subscript  e  k          superscript  α   subscript  i  k    normal-Ω   superscript  α     subscript  i  k         superscript  α   normal-⋅  c   subscript  i  k      superscript  normal-Λ  normal-′    superscript  α     subscript  i  k          e_{k}=-{\alpha^{i_{k}}\Omega(\alpha^{-i_{k}})\over\alpha^{c\cdot i_{k}}\Lambda%
 ^{\prime}(\alpha^{-i_{k}})}.   we get again only one summand in     Λ   normal-Λ   \Lambda     So finally       Λ   (  x  )    =    ∑   i  =  1   v     λ  i    x  i           normal-Λ  x     superscript   subscript     i  1    v      subscript  λ  i    superscript  x  i       \Lambda(x)=\sum_{i=1}^{v}\lambda_{i}x^{i}     This formula is advantageous when one computes the formal derivative of       Λ  ′    (  x  )    =      Σ   i  =  1   v   i   ⋅   λ  i     x   i  -  1      ,         superscript  normal-Λ  normal-′   x      normal-⋅     superscript   subscript  normal-Σ    i  1    v   i    subscript  λ  i     superscript  x    i  1       \Lambda^{\prime}(x)=\Sigma_{i=1}^{v}i\cdot\lambda_{i}x^{i-1},   form its    i  ⋅  x     normal-⋅  i  x    i\cdot x   form, gaining       ∑   k  =  1   i   x      superscript   subscript     k  1    i   x    \textstyle\sum_{k=1}^{i}x     where     k  1   ,  …  ,   k  k       subscript  k  1   normal-…   subscript  k  k     k_{1},...,k_{k}   denotes here      Γ   (  x  )    =    ∏   i  =  1   k    (    x   α   k  i     -  1   )     .        normal-Γ  x     superscript   subscript  product    i  1    k       x   superscript  α   subscript  k  i     1      \Gamma(x)=\prod_{i=1}^{k}(x\alpha^{k_{i}}-1).   rather than multiplying in the field.  Decoding based on extended Euclidean algorithm  The process of finding both the polynomial Λ and the error values could be based on the Extended Euclidean algorithm . Correction of unreadable characters could be incorporated to the algorithm easily as well.  Let      S   (  x  )    =    ∑   i  =  0    d  -  2      s   c  +  i     x  i      .        S  x     superscript   subscript     i  0      d  2       subscript  s    c  i     superscript  x  i       S(x)=\sum_{i=0}^{d-2}s_{c+i}x^{i}.   be positions of unreadable characters. One creates polynomial localising these positions    S   (  x  )   Γ   (  x  )       S  x  normal-Γ  x    S(x)\Gamma(x)   Set values on unreadable positions to 0 and compute the syndromes.  As we have already defined for the Forney formula let     x   d  -  1    .     superscript  x    d  1     x^{d-1}.     Let us run extended Euclidean algorithm for locating least common divisor of polynomials    r   (  x  )       r  x    r(x)   and    ⌊    (    d  +  k   -  3   )   /  2   ⌋            d  k   3   2     \lfloor(d+k-3)/2\rfloor   The goal is not to find the least common divisor, but a polynomial     a   (  x  )    ,   b   (  x  )         a  x     b  x     a(x),b(x)   of degree at most      r   (  x  )    =    a   (  x  )   S   (  x  )   Γ   (  x  )    +   b   (  x  )    x   d  -  1       .        r  x       a  x  S  x  normal-Γ  x     b  x   superscript  x    d  1        r(x)=a(x)S(x)\Gamma(x)+b(x)x^{d-1}.   and polynomials    r   (  x  )       r  x    r(x)   such that    a   (  x  )       a  x    a(x)   Low degree of   Γ   normal-Γ   \Gamma   guarantees, that    Λ  .    normal-Λ   \Lambda.   would satisfy extended (by     Ξ   (  x  )    =   a   (  x  )   Γ   (  x  )          normal-Ξ  x     a  x  normal-Γ  x     \Xi(x)=a(x)\Gamma(x)   ) defining conditions for   Ξ   normal-Ξ   \Xi     Defining    Λ   (  x  )       normal-Λ  x    \Lambda(x)   and using     Ω   (  x  )    =    S   (  x  )   Ξ   (  x  )    mod   x   d  -  1     =   r   (  x  )            normal-Ω  x    modulo    S  x  normal-Ξ  x    superscript  x    d  1            r  x      \Omega(x)=S(x)\Xi(x)\bmod x^{d-1}=r(x)   on the place of    s  i     subscript  s  i    s_{i}   in the Fourney formula will give us error values.  The main advantage of the algorithm is that it meanwhile computes      s  i   =    ∑   j  =  0    n  -  1      e  j    α   i  j       .       subscript  s  i     superscript   subscript     j  0      n  1       subscript  e  j    superscript  α    i  j        s_{i}=\sum_{j=0}^{n-1}e_{j}\alpha^{ij}.   required in the Forney formula.  Explanation of the decoding process  The goal is to find a codeword which differs from the received word minimally as possible on readable positions. When expressing the received word as a sum of nearest codeword and error word, we are trying to find error word with minimal number of non-zeros on readable positions. Syndrom     S   (  x  )    =    ∑   i  =  0    d  -  2      s   c  +  i     x  i           S  x     superscript   subscript     i  0      d  2       subscript  s    c  i     superscript  x  i       S(x)=\sum_{i=0}^{d-2}s_{c+i}x^{i}   restricts error word by condition   0   0    We could write these conditions separately or we could create polynomial    d  -  2.      d  2.    d-2.   and compare coefficients near powers      S   (  x  )        {  0  ,  …  ,   d  -  2   }       =      E   (  x  )    =    ∑   i  =  0    d  -  2      ∑   j  =  0    n  -  1      e  j    α   i  j     α   c  j     x  i       .        S  x   STACKED   0  normal-…    d  2      E  x     superscript   subscript     i  0      d  2      superscript   subscript     j  0      n  1       subscript  e  j    superscript  α    i  j     superscript  α    c  j     superscript  x  i        S(x){\textstyle{\{0,\ldots,\,d-2\}\atop=}}E(x)=\sum_{i=0}^{d-2}\sum_{j=0}^{n-1%
 }e_{j}\alpha^{ij}\alpha^{cj}x^{i}.   to     k  1   ,     subscript  k  1    k_{1},       {   s  c   ,  …  ,   s    c  +  d   -  2    }      subscript  s  c   normal-…   subscript  s      c  d   2      \{s_{c},\ldots,s_{c+d-2}\}     Suppose there is unreadable letter on position    {   t  c   ,  …  ,   t    c  +  d   -  3    }      subscript  t  c   normal-…   subscript  t      c  d   3      \{t_{c},\ldots,t_{c+d-3}\}   we could replace set of syndromes      t  i   =     α   k  1     s  i    -   s   i  +  1      .       subscript  t  i        superscript  α   subscript  k  1     subscript  s  i     subscript  s    i  1       t_{i}=\alpha^{k_{1}}s_{i}-s_{i+1}.   by set of syndromes    {   s  c   ,  …  ,   s    c  +  d   -  2    }      subscript  s  c   normal-…   subscript  s      c  d   2      \{s_{c},\ldots,s_{c+d-2}\}   defined by equation      t  i   =     α   k  1     s  i    -   s   i  +  1     =     α   k  1      ∑   j  =  0    n  -  1      e  j    α   i  j       -    ∑   j  =  0    n  -  1      e  j    α  j    α   i  j       =    ∑   j  =  0    n  -  1      e  j    (    α   k  1    -   α  j    )    α   i  j       .         subscript  t  i        superscript  α   subscript  k  1     subscript  s  i     subscript  s    i  1               superscript  α   subscript  k  1      superscript   subscript     j  0      n  1       subscript  e  j    superscript  α    i  j         superscript   subscript     j  0      n  1       subscript  e  j    superscript  α  j    superscript  α    i  j              superscript   subscript     j  0      n  1       subscript  e  j      superscript  α   subscript  k  1     superscript  α  j     superscript  α    i  j         t_{i}=\alpha^{k_{1}}s_{i}-s_{i+1}=\alpha^{k_{1}}\sum_{j=0}^{n-1}e_{j}\alpha^{%
 ij}-\sum_{j=0}^{n-1}e_{j}\alpha^{j}\alpha^{ij}=\sum_{j=0}^{n-1}e_{j}(\alpha^{k%
 _{1}}-\alpha^{j})\alpha^{ij}.   Suppose for an error word all restrictions by original set     f  j   =    e  j    (    α   k  1    -   α  j    )         subscript  f  j      subscript  e  j      superscript  α   subscript  k  1     superscript  α  j       f_{j}=e_{j}(\alpha^{k_{1}}-\alpha^{j})   of syndromes hold, than     e  j   .     subscript  e  j    e_{j}.   New set of syndromes restricts error vector     k  1   ,     subscript  k  1    k_{1},   the same way the original set of syndromes restricted the error vector      f   k  1    =  0   ,       subscript  f   subscript  k  1    0    f_{k_{1}}=0,   Note, that except the coordinate    f  j     subscript  f  j    f_{j}   where    e  j     subscript  e  j    e_{j}   an    k  .    k   k.   is zero, iff    {   s  c   ,  …  ,   s    c  +  d   -  2    }      subscript  s  c   normal-…   subscript  s      c  d   2      \{s_{c},\ldots,s_{c+d-2}\}   is zero. For the goal of locating error positions we could change the set of syndromes in the similar way to reflect all unreadable characters. This shortens the set of syndromes by    {   t  c   ,  …  ,   t    c  +  d   -  3    }      subscript  t  c   normal-…   subscript  t      c  d   3      \{t_{c},\ldots,t_{c+d-3}\}     In polynomial formulation, the replacement of syndromes set      T   (  x  )    =    ∑   i  =  0    d  -  3      t   c  +  i     x  i     =     α   k  1      ∑   i  =  0    d  -  3      s   c  +  i     x  i      -    ∑   i  =  1    d  -  2      s   c  +  i     x   i  -  1        .          T  x     superscript   subscript     i  0      d  3       subscript  t    c  i     superscript  x  i               superscript  α   subscript  k  1      superscript   subscript     i  0      d  3       subscript  s    c  i     superscript  x  i        superscript   subscript     i  1      d  2       subscript  s    c  i     superscript  x    i  1          T(x)=\sum_{i=0}^{d-3}t_{c+i}x^{i}=\alpha^{k_{1}}\sum_{i=0}^{d-3}s_{c+i}x^{i}-%
 \sum_{i=1}^{d-2}s_{c+i}x^{i-1}.   by syndromes set     x  T   (  x  )        {  1  ,  …  ,   d  -  2   }       =       (    x   α   k  1     -  1   )   S   (  x  )    .      x  T  x   STACKED   1  normal-…    d  2          x   superscript  α   subscript  k  1     1   S  x    xT(x){\textstyle{\{1,\ldots,\,d-2\}\atop=}}(x\alpha^{k_{1}}-1)S(x).   leads to    S   (  x  )       S  x    S(x)   Therefore    S   (  x  )   Γ   (  x  )       S  x  normal-Γ  x    S(x)\Gamma(x)     After replacement of    k  ,  …  ,   d  -  2.      k  normal-…    d  2.     k,\ldots,d-2.   by   v   v   v   , one would require equation for coefficients near powers    Λ   (  x  )       normal-Λ  x    \Lambda(x)     One could consider looking for error positions from the point of view of eliminating influence of given positions similarly as for unreadable characters. If we found    S   (  x  )   Γ   (  x  )   Λ   (  x  )        {   k  +  v   ,  …  ,   d  -  2   }       =      0.      S  x  normal-Γ  x  normal-Λ  x   STACKED     k  v   normal-…    d  2      0.    S(x)\Gamma(x)\Lambda(x){\textstyle{\{k+v,\ldots,\,d-2\}\atop=}}0.   positions such that eliminating their influence leads to obtaining set of syndromes consisting of all zeros, than there exists error vector with errors only on these coordinates. If     (   d  -  1  -  k   )   /  2        d  1  k   2    (d-1-k)/2   denotes the polynomial eliminating the influence of these coordinates, we obtain    Λ   (  x  )       normal-Λ  x    \Lambda(x)     In Euclidean algorithm, we try to correct at most     k  +   ⌊    (   d  -  1  -  k   )   /  2   ⌋    .      k        d  1  k   2      k+\lfloor(d-1-k)/2\rfloor.   errors (on readable positions), because with bigger error count there could be more codewords in the same distance from the received word. Therefore, for    Λ   (  x  )       normal-Λ  x    \Lambda(x)   we are looking for, the equation must hold for coefficients near powers starting from    Λ   (  x  )       normal-Λ  x    \Lambda(x)     In Forney formula,      (   d  -  1  -  k   )   /  2   ,        d  1  k   2    (d-1-k)/2,   could be multiplied by a scalar giving the same result.  It could happen that the Euclidean algorithm finds    Λ   (  x  )       normal-Λ  x    \Lambda(x)   of degree higher than    Λ   (  x  )       normal-Λ  x    \Lambda(x)   having number of different roots equal to its degree, where the Fourney formula would be able to correct errors in all its roots, anyways correcting such many errors could be risky (especially with no other restrictions on received word). Usually after getting    d  =  7      d  7    d=7   of higher degree, we decide not to correct the errors. Correction could fail in the case     g   (  x  )    =    x  10   +   x  8   +   x  5   +   x  4   +   x  2   +  x  +  1         g  x      superscript  x  10    superscript  x  8    superscript  x  5    superscript  x  4    superscript  x  2   x  1     g(x)=x^{10}+x^{8}+x^{5}+x^{4}+x^{2}+x+1   has roots with higher multiplicity or the number of roots is smaller than its degree. Fail could be detected as well by Forney formula returning error outside the transmitted alphabet.  Correct the errors  Using the error values and error location, correct the errors and form a corrected code vector by subtracting error values at error locations.  Decoding examples  Decoding of binary code without unreadable characters  Consider a BCH code in GF(2 4 ) with     M   (  x  )    =    x  4   +   x  3   +  x  +  1.         M  x      superscript  x  4    superscript  x  3   x  1.     M(x)=x^{4}+x^{3}+x+1.   and     x  10   M   (  x  )        superscript  x  10   M  x    x^{10}M(x)   . (This is used in QR codes .) Let the message to be transmitted be [1 1 0 1 1], or in polynomial notation,    g   (  x  )       g  x    g(x)   The "checksum" symbols are calculated by dividing     x  9   +   x  4   +   x  2        superscript  x  9    superscript  x  4    superscript  x  2     x^{9}+x^{4}+x^{2}   by     R   (  x  )    =    C   (  x  )    +   x  13   +   x  5    =    x  14   +   x  11   +   x  10   +   x  9   +   x  5   +   x  4   +   x  2            R  x       C  x    superscript  x  13    superscript  x  5            superscript  x  14    superscript  x  11    superscript  x  10    superscript  x  9    superscript  x  5    superscript  x  4    superscript  x  2       R(x)=C(x)+x^{13}+x^{5}=x^{14}+x^{11}+x^{10}+x^{9}+x^{5}+x^{4}+x^{2}   and taking the remainder, resulting in     α  =  0010   ,      α  0010    \alpha=0010,   or [ 1 0 0 0 0 1 0 1 0 0 ]. These are appended to the message, so the transmitted codeword is [ 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 ].  Now, imagine that there are two bit-errors in the transmission, so the received codeword is [ 1  0 1 1 1 0 0 0  1 0 1 0 0 ]. In polynomial notation:        s  1   =   R   (   α  1   )    =  1011   ,         subscript  s  1     R   superscript  α  1         1011     s_{1}=R(\alpha^{1})=1011,   In order to correct the errors, first calculate the syndromes. Taking      s  2   =  1001   ,       subscript  s  2   1001    s_{2}=1001,   we have      s  3   =  1011   ,       subscript  s  3   1011    s_{3}=1011,         s  4   =  1101   ,       subscript  s  4   1101    s_{4}=1101,         s  5   =  0001   ,       subscript  s  5   0001    s_{5}=0001,        s  6   =  1001.       subscript  s  6   1001.    s_{6}=1001.        [   S   3  ×  3    |   C   3  ×  1    ]   =   [      s  1      s   ;  2       s   ;  3       s   ;  4         s  2      s   ;  3       s   ;  4       s   ;  5         s  3      s   ;  4       s   ;  5       s   ;  6       ]   =   [     1011    1001    1011    1101      1001    1011    1101    0001      1011    1101    0001    1001     ]   ⇒   [     0001    0000    1000    0111      0000    0001    1011    0001      0000    0000    0000    0000     ]      fragments   fragments  normal-[   subscript  S    3  3    normal-|   subscript  C    3  1    normal-]       subscript  s  1    fragments  s   subscript  normal-;  2     fragments  s   subscript  normal-;  3     fragments  s   subscript  normal-;  4       subscript  s  2    fragments  s   subscript  normal-;  3     fragments  s   subscript  normal-;  4     fragments  s   subscript  normal-;  5       subscript  s  3    fragments  s   subscript  normal-;  4     fragments  s   subscript  normal-;  5     fragments  s   subscript  normal-;  6         1011  1001  1011  1101    1001  1011  1101  0001    1011  1101  0001  1001    normal-⇒    0001  0000  1000  0111    0000  0001  1011  0001    0000  0000  0000  0000      \left[S_{3\times 3}|C_{3\times 1}\right]=\begin{bmatrix}s_{1}&s_{2}&s_{3}&s%
 _{4}\\
 s_{2}&s_{3}&s_{4}&s_{5}\\
 s_{3}&s_{4}&s_{5}&s_{6}\end{bmatrix}=\begin{bmatrix}1011&1001&1011&1101\\
 1001&1011&1101&0001\\
 1011&1101&0001&1001\end{bmatrix}\Rightarrow\begin{bmatrix}0001&0000&1000&0111%
 \\
 0000&0001&1011&0001\\
 0000&0000&0000&0000\end{bmatrix}   and      λ  2   =  1000   ,       subscript  λ  2   1000    \lambda_{2}=1000,   Next, apply the Peterson procedure by row-reducing the following augmented matrix.       λ  1   =  1011.       subscript  λ  1   1011.    \lambda_{1}=1011.   Due to the zero row, is singular, which is no surprise since only two errors were introduced into the codeword. However, the upper-left corner of the matrix is identical to , which gives rise to the solution      Λ   (  x  )    =    1000   x  2    +   1011  x   +  0001    ,        normal-Λ  x       1000   superscript  x  2      1011  x   0001     \Lambda(x)=1000x^{2}+1011x+0001,       0100  =   α   -  13        0100   superscript  α    13      0100=\alpha^{-13}   The resulting error locator polynomial is     0111  =   α   -  5     .      0111   superscript  α    5      0111=\alpha^{-5}.   which has zeros at   α   α   \alpha   and      Γ   (  x  )    =    (     α  8   x   -  1   )    (     α  11   x   -  1   )     .        normal-Γ  x          superscript  α  8   x   1        superscript  α  11   x   1      \Gamma(x)=(\alpha^{8}x-1)(\alpha^{11}x-1).   The exponents of      s  1   =   α   -  7     ,       subscript  s  1    superscript  α    7      s_{1}=\alpha^{-7},   correspond to the error locations. There is no need to calculate the error values in this example, as the only possible value is 1.  Decoding with unreadable characters  Suppose the same scenario, but the received word has two unreadable characters [ 1  0 ? 1 1 ? 0 0  1 0 1 0 0 ]. We replace the unreadable characters by zeros while creating the polynom reflecting their positions      s  2   =   α  1    ,       subscript  s  2    superscript  α  1     s_{2}=\alpha^{1},   We compute the syndromes      s  3   =   α  4    ,       subscript  s  3    superscript  α  4     s_{3}=\alpha^{4},         s  4   =   α  2    ,       subscript  s  4    superscript  α  2     s_{4}=\alpha^{2},         s  5   =   α  5    ,       subscript  s  5    superscript  α  5     s_{5}=\alpha^{5},         s  6   =   α   -  7     .       subscript  s  6    superscript  α    7      s_{6}=\alpha^{-7}.      α   α   \alpha   and      S   (  x  )    =    α   -  7    +    α  1   x   +    α  4    x  2    +    α  2    x  3    +    α  5    x  4    +    α   -  7     x  5      ,        S  x      superscript  α    7       superscript  α  1   x      superscript  α  4    superscript  x  2       superscript  α  2    superscript  x  3       superscript  α  5    superscript  x  4       superscript  α    7     superscript  x  5       S(x)=\alpha^{-7}+\alpha^{1}x+\alpha^{4}x^{2}+\alpha^{2}x^{3}+\alpha^{5}x^{4}+%
 \alpha^{-7}x^{5},   (Using log notation which is independent on GF(2 4 ) isomorphisms. For computation checking we can use the same representation for addition as was used in previous example. Hexadecimal description of the powers of      S   (  x  )   Γ   (  x  )    =    α   -  7    +    α  4   x   +    α   -  1     x  2    +    α  6    x  3    +    α   -  1     x  4    +    α  5    x  5    +    α  7    x  6    +    α   -  3     x  7      .        S  x  normal-Γ  x      superscript  α    7       superscript  α  4   x      superscript  α    1     superscript  x  2       superscript  α  6    superscript  x  3       superscript  α    1     superscript  x  4       superscript  α  5    superscript  x  5       superscript  α  7    superscript  x  6       superscript  α    3     superscript  x  7       S(x)\Gamma(x)=\alpha^{-7}+\alpha^{4}x+\alpha^{-1}x^{2}+\alpha^{6}x^{3}+\alpha^%
 {-1}x^{4}+\alpha^{5}x^{5}+\alpha^{7}x^{6}+\alpha^{-3}x^{7}.   are consecutively 1,2,4,8,3,6,C,B,5,A,7,E,F,D,9 with the addition based on bitwise xor.)  Let us make syndrome polynomial     (      S   (  x  )   Γ   (  x  )         x  6      )   =   (       α   -  7    +    α  4   x   +    α   -  1     x  2    +    α  6    x  3    +    α   -  1     x  4    +    α  5    x  5    +    α  7    x  6    +    α   -  3     x  7          x  6      )           S  x  normal-Γ  x      superscript  x  6          superscript  α    7       superscript  α  4   x      superscript  α    1     superscript  x  2       superscript  α  6    superscript  x  3       superscript  α    1     superscript  x  4       superscript  α  5    superscript  x  5       superscript  α  7    superscript  x  6       superscript  α    3     superscript  x  7        superscript  x  6       \begin{pmatrix}S(x)\Gamma(x)\\
 x^{6}\end{pmatrix}=\begin{pmatrix}\alpha^{-7}+\alpha^{4}x+\alpha^{-1}x^{2}+%
 \alpha^{6}x^{3}+\alpha^{-1}x^{4}+\alpha^{5}x^{5}+\alpha^{7}x^{6}+\alpha^{-3}x^%
 {7}\\
 x^{6}\end{pmatrix}   compute     =    (       α  7   +    α   -  3    x      1      1    0     )    (      x  6         α   -  7    +    α  4   x   +    α   -  1     x  2    +    α  6    x  3    +    α   -  1     x  4    +    α  5    x  5    +    (    α  7   +   α  7    )    x  6    +    (    α   -  3    +   α   -  3     )    x  7        )        absent         superscript  α  7      superscript  α    3    x    1    1  0       superscript  x  6        superscript  α    7       superscript  α  4   x      superscript  α    1     superscript  x  2       superscript  α  6    superscript  x  3       superscript  α    1     superscript  x  4       superscript  α  5    superscript  x  5         superscript  α  7    superscript  α  7     superscript  x  6         superscript  α    3     superscript  α    3      superscript  x  7          =\begin{pmatrix}\alpha^{7}+\alpha^{-3}x&1\\
 1&0\end{pmatrix}\begin{pmatrix}x^{6}\\
 \alpha^{-7}+\alpha^{4}x+\alpha^{-1}x^{2}+\alpha^{6}x^{3}+\alpha^{-1}x^{4}+%
 \alpha^{5}x^{5}+(\alpha^{7}+\alpha^{7})x^{6}+(\alpha^{-3}+\alpha^{-3})x^{7}%
 \end{pmatrix}     Run the extended Euclidean algorithm:     =    (       α  7   +    α   -  3    x      1      1    0     )    (       α  4   +    α   -  5    x      1      1    0     )    (       α   -  7    +    α  4   x   +    α   -  1     x  2    +    α  6    x  3    +    α   -  1     x  4    +    α  5    x  5           α   -  3    +    (    α   -  7    +   α  3    )   x   +     (    α  3   +   α   -  1     )    x  2    +           (    α   -  5    +   α   -  6     )    x  3    +    (    α  3   +   α  1    )    x  4    +    (    α   -  6    +   α   -  6     )    x  5    +    (    α  0   +  1   )    x  6        )        absent         superscript  α  7      superscript  α    3    x    1    1  0         superscript  α  4      superscript  α    5    x    1    1  0         superscript  α    7       superscript  α  4   x      superscript  α    1     superscript  x  2       superscript  α  6    superscript  x  3       superscript  α    1     superscript  x  4       superscript  α  5    superscript  x  5          superscript  α    3         superscript  α    7     superscript  α  3    x    limit-from       superscript  α  3    superscript  α    1      superscript  x  2                superscript  α    5     superscript  α    6      superscript  x  3         superscript  α  3    superscript  α  1     superscript  x  4         superscript  α    6     superscript  α    6      superscript  x  5         superscript  α  0   1    superscript  x  6          =\begin{pmatrix}\alpha^{7}+\alpha^{-3}x&1\\
 1&0\end{pmatrix}\begin{pmatrix}\alpha^{4}+\alpha^{-5}x&1\\
 1&0\end{pmatrix}\begin{pmatrix}\alpha^{-7}+\alpha^{4}x+\alpha^{-1}x^{2}+\alpha%
 ^{6}x^{3}+\alpha^{-1}x^{4}+\alpha^{5}x^{5}\\
 \alpha^{-3}+(\alpha^{-7}+\alpha^{3})x+(\alpha^{3}+\alpha^{-1})x^{2}+\\
 (\alpha^{-5}+\alpha^{-6})x^{3}+(\alpha^{3}+\alpha^{1})x^{4}+(\alpha^{-6}+%
 \alpha^{-6})x^{5}+(\alpha^{0}+1)x^{6}\end{pmatrix}        =    (       (   1  +   α   -  4     )   +    (    α  1   +   α  2    )   x   +    α  7    x  2         α  7   +    α   -  3    x          α  4   +    α   -  5    x      1     )    (       α   -  7    +    α  4   x   +    α   -  1     x  2    +    α  6    x  3    +    α   -  1     x  4    +    α  5    x  5           α   -  3    +    α   -  2    x   +    α  0    x  2    +    α   -  2     x  3    +    α   -  6     x  4        )        absent          1   superscript  α    4          superscript  α  1    superscript  α  2    x      superscript  α  7    superscript  x  2        superscript  α  7      superscript  α    3    x         superscript  α  4      superscript  α    5    x    1         superscript  α    7       superscript  α  4   x      superscript  α    1     superscript  x  2       superscript  α  6    superscript  x  3       superscript  α    1     superscript  x  4       superscript  α  5    superscript  x  5          superscript  α    3       superscript  α    2    x      superscript  α  0    superscript  x  2       superscript  α    2     superscript  x  3       superscript  α    6     superscript  x  4          =\begin{pmatrix}(1+\alpha^{-4})+(\alpha^{1}+\alpha^{2})x+\alpha^{7}x^{2}&%
 \alpha^{7}+\alpha^{-3}x\\
 \alpha^{4}+\alpha^{-5}x&1\end{pmatrix}\begin{pmatrix}\alpha^{-7}+\alpha^{4}x+%
 \alpha^{-1}x^{2}+\alpha^{6}x^{3}+\alpha^{-1}x^{4}+\alpha^{5}x^{5}\\
 \alpha^{-3}+\alpha^{-2}x+\alpha^{0}x^{2}+\alpha^{-2}x^{3}+\alpha^{-6}x^{4}\end%
 {pmatrix}        =    (       α   -  3    +    α  5   x   +    α  7    x  2         α  7   +    α   -  3    x          α  4   +    α   -  5    x      1     )    (       α   -  5    +    α   -  4    x      1      1    0     )    (       α   -  3    +    α   -  2    x   +    α  0    x  2    +    α   -  2     x  3    +    α   -  6     x  4           (    α  7   +   α   -  7     )   +     (    α   -  7    +   α   -  7    +   α  4    )   x   +           (    α   -  5    +   α   -  6    +   α   -  1     )    x  2    +          (    α   -  7    +   α   -  4    +   α  6    )    x  3    +          (    α  4   +   α   -  6    +   α   -  1     )    x  4    +    (    α  5   +   α  5    )    x  5        )        absent         superscript  α    3       superscript  α  5   x      superscript  α  7    superscript  x  2        superscript  α  7      superscript  α    3    x         superscript  α  4      superscript  α    5    x    1         superscript  α    5       superscript  α    4    x    1    1  0         superscript  α    3       superscript  α    2    x      superscript  α  0    superscript  x  2       superscript  α    2     superscript  x  3       superscript  α    6     superscript  x  4            superscript  α  7    superscript  α    7      limit-from       superscript  α    7     superscript  α    7     superscript  α  4    x         limit-from       superscript  α    5     superscript  α    6     superscript  α    1      superscript  x  2         limit-from       superscript  α    7     superscript  α    4     superscript  α  6     superscript  x  3               superscript  α  4    superscript  α    6     superscript  α    1      superscript  x  4         superscript  α  5    superscript  α  5     superscript  x  5          =\begin{pmatrix}\alpha^{-3}+\alpha^{5}x+\alpha^{7}x^{2}&\alpha^{7}+\alpha^{-3}%
 x\\
 \alpha^{4}+\alpha^{-5}x&1\end{pmatrix}\begin{pmatrix}\alpha^{-5}+\alpha^{-4}x&%
 1\\
 1&0\end{pmatrix}\begin{pmatrix}\alpha^{-3}+\alpha^{-2}x+\alpha^{0}x^{2}+\alpha%
 ^{-2}x^{3}+\alpha^{-6}x^{4}\\
 (\alpha^{7}+\alpha^{-7})+(\alpha^{-7}+\alpha^{-7}+\alpha^{4})x+\\
 (\alpha^{-5}+\alpha^{-6}+\alpha^{-1})x^{2}+\\
 (\alpha^{-7}+\alpha^{-4}+\alpha^{6})x^{3}+\\
 (\alpha^{4}+\alpha^{-6}+\alpha^{-1})x^{4}+(\alpha^{5}+\alpha^{5})x^{5}\end{pmatrix}         =    (        α  7   x   +    α  5    x  2    +    α  3    x  3         α   -  3    +    α  5   x   +    α  7    x  2           α  3   +    α   -  5    x   +    α  6    x  2         α  4   +    α   -  5    x       )    (       α   -  3    +    α   -  2    x   +    α  0    x  2    +    α   -  2     x  3    +    α   -  6     x  4           α   -  4    +    α  4   x   +    α  2    x  2    +    α   -  5     x  3        )     .      absent           superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3        superscript  α    3       superscript  α  5   x      superscript  α  7    superscript  x  2          superscript  α  3      superscript  α    5    x      superscript  α  6    superscript  x  2        superscript  α  4      superscript  α    5    x           superscript  α    3       superscript  α    2    x      superscript  α  0    superscript  x  2       superscript  α    2     superscript  x  3       superscript  α    6     superscript  x  4          superscript  α    4       superscript  α  4   x      superscript  α  2    superscript  x  2       superscript  α    5     superscript  x  3          =\begin{pmatrix}\alpha^{7}x+\alpha^{5}x^{2}+\alpha^{3}x^{3}&\alpha^{-3}+\alpha%
 ^{5}x+\alpha^{7}x^{2}\\
 \alpha^{3}+\alpha^{-5}x+\alpha^{6}x^{2}&\alpha^{4}+\alpha^{-5}x\end{pmatrix}%
 \begin{pmatrix}\alpha^{-3}+\alpha^{-2}x+\alpha^{0}x^{2}+\alpha^{-2}x^{3}+%
 \alpha^{-6}x^{4}\\
 \alpha^{-4}+\alpha^{4}x+\alpha^{2}x^{2}+\alpha^{-5}x^{3}\end{pmatrix}.          (      -   (    α  4   +    α   -  5    x    )        α   -  3    +    α  5   x   +    α  7    x  2           α  3   +    α   -  5    x   +    α  6    x  2        -   (     α  7   x   +    α  5    x  2    +    α  3    x  3     )       )    (        α  7   x   +    α  5    x  2    +    α  3    x  3         α   -  3    +    α  5   x   +    α  7    x  2           α  3   +    α   -  5    x   +    α  6    x  2         α  4   +    α   -  5    x       )    =   (     1    0      0    1     )    ,               superscript  α  4      superscript  α    5    x        superscript  α    3       superscript  α  5   x      superscript  α  7    superscript  x  2          superscript  α  3      superscript  α    5    x      superscript  α  6    superscript  x  2            superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3               superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3        superscript  α    3       superscript  α  5   x      superscript  α  7    superscript  x  2          superscript  α  3      superscript  α    5    x      superscript  α  6    superscript  x  2        superscript  α  4      superscript  α    5    x         1  0    0  1      \begin{pmatrix}-(\alpha^{4}+\alpha^{-5}x)&\alpha^{-3}+\alpha^{5}x+\alpha^{7}x^%
 {2}\\
 \alpha^{3}+\alpha^{-5}x+\alpha^{6}x^{2}&-(\alpha^{7}x+\alpha^{5}x^{2}+\alpha^{%
 3}x^{3})\end{pmatrix}\begin{pmatrix}\alpha^{7}x+\alpha^{5}x^{2}+\alpha^{3}x^{3%
 }&\alpha^{-3}+\alpha^{5}x+\alpha^{7}x^{2}\\
 \alpha^{3}+\alpha^{-5}x+\alpha^{6}x^{2}&\alpha^{4}+\alpha^{-5}x\end{pmatrix}=%
 \begin{pmatrix}1&0\\
 0&1\end{pmatrix},          (      -   (    α  4   +    α   -  5    x    )        α   -  3    +    α  5   x   +    α  7    x  2           α  3   +    α   -  5    x   +    α  6    x  2        -   (     α  7   x   +    α  5    x  2    +    α  3    x  3     )       )    (      S   (  x  )   Γ   (  x  )         x  6      )    =   (       α   -  3    +    α   -  2    x   +     α  0    x  2    +           α   -  2     x  3    +    α   -  6     x  4           α   -  4    +    α  4   x   +     α  2    x  2    +          α   -  5     x  3       )    .               superscript  α  4      superscript  α    5    x        superscript  α    3       superscript  α  5   x      superscript  α  7    superscript  x  2          superscript  α  3      superscript  α    5    x      superscript  α  6    superscript  x  2            superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3            S  x  normal-Γ  x      superscript  x  6           superscript  α    3       superscript  α    2    x    limit-from     superscript  α  0    superscript  x  2              superscript  α    2     superscript  x  3       superscript  α    6     superscript  x  4          superscript  α    4       superscript  α  4   x    limit-from     superscript  α  2    superscript  x  2            superscript  α    5     superscript  x  3        \begin{pmatrix}-(\alpha^{4}+\alpha^{-5}x)&\alpha^{-3}+\alpha^{5}x+\alpha^{7}x^%
 {2}\\
 \alpha^{3}+\alpha^{-5}x+\alpha^{6}x^{2}&-(\alpha^{7}x+\alpha^{5}x^{2}+\alpha^{%
 3}x^{3})\end{pmatrix}\begin{pmatrix}S(x)\Gamma(x)\\
 x^{6}\end{pmatrix}=\begin{pmatrix}\alpha^{-3}+\alpha^{-2}x+\alpha^{0}x^{2}+\\
 \alpha^{-2}x^{3}+\alpha^{-6}x^{4}\\
 \alpha^{-4}+\alpha^{4}x+\alpha^{2}x^{2}+\\
 \alpha^{-5}x^{3}\end{pmatrix}.     We have reached polynomial of degree at most 3, and as       S   (  x  )   Γ   (  x  )    (    α  3   +    α   -  5    x   +    α  6    x  2     )    -    (     α  7   x   +    α  5    x  2    +    α  3    x  3     )    x  6     =    α   -  4    +    α  4   x   +    α  2    x  2    +    α   -  5     x  3      .          S  x  normal-Γ  x     superscript  α  3      superscript  α    5    x      superscript  α  6    superscript  x  2             superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3      superscript  x  6        superscript  α    4       superscript  α  4   x      superscript  α  2    superscript  x  2       superscript  α    5     superscript  x  3       S(x)\Gamma(x)(\alpha^{3}+\alpha^{-5}x+\alpha^{6}x^{2})-(\alpha^{7}x+\alpha^{5}%
 x^{2}+\alpha^{3}x^{3})x^{6}=\alpha^{-4}+\alpha^{4}x+\alpha^{2}x^{2}+\alpha^{-5%
 }x^{3}.   we get      Λ   (  x  )    =    α  3   +    α   -  5    x   +    α  6    x  2      .        normal-Λ  x      superscript  α  3      superscript  α    5    x      superscript  α  6    superscript  x  2       \Lambda(x)=\alpha^{3}+\alpha^{-5}x+\alpha^{6}x^{2}.     Therefore     λ  0   ≠  1.       subscript  λ  0   1.    \lambda_{0}\neq 1.     Let    Λ  .    normal-Λ   \Lambda.   Don't worry that     α  2   ,     superscript  α  2    \alpha^{2},   Find by brute force a root of    α  10     superscript  α  10    \alpha^{10}   The roots are    α  2     superscript  α  2    \alpha^{2}   and   Λ   normal-Λ   \Lambda   (after finding for example    (   x  -   α  2    )      x   superscript  α  2     (x-\alpha^{2})   we can divide      Ξ   (  x  )    =   Γ   (  x  )   Λ   (  x  )    =    α  3   +    α  4    x  2    +    α  2    x  3    +    α   -  5     x  4      ,          normal-Ξ  x     normal-Γ  x  normal-Λ  x           superscript  α  3      superscript  α  4    superscript  x  2       superscript  α  2    superscript  x  3       superscript  α    5     superscript  x  4        \Xi(x)=\Gamma(x)\Lambda(x)=\alpha^{3}+\alpha^{4}x^{2}+\alpha^{2}x^{3}+\alpha^{%
 -5}x^{4},   by corresponding monom      Ω   (  x  )    =    S   (  x  )   Ξ   (  x  )    mod   x  6    =    α   -  4    +    α  4   x   +    α  2    x  2    +    α   -  5     x  3      .          normal-Ω  x    modulo    S  x  normal-Ξ  x    superscript  x  6            superscript  α    4       superscript  α  4   x      superscript  α  2    superscript  x  2       superscript  α    5     superscript  x  3        \Omega(x)=S(x)\Xi(x)\,\bmod\,x^{6}=\alpha^{-4}+\alpha^{4}x+\alpha^{2}x^{2}+%
 \alpha^{-5}x^{3}.   and the root of resulting monom could be found easily).  Let      e  j   =   -     Ω   (   α   -   i  j     )    /   Ξ  ′     (   α   -   i  j     )      ,       subscript  e  j           normal-Ω   superscript  α     subscript  i  j       superscript  normal-Ξ  normal-′     superscript  α     subscript  i  j         e_{j}=-\Omega(\alpha^{-i_{j}})/\Xi^{\prime}(\alpha^{-i_{j}}),   and let    α   -   i  j       superscript  α     subscript  i  j      \alpha^{-i_{j}}   Let us look for error values using formula     Ξ   (  x  )    .      normal-Ξ  x    \Xi(x).   where       Ξ  ′    (  x  )    =    α  2    x  2     .         superscript  normal-Ξ  normal-′   x      superscript  α  2    superscript  x  2      \Xi^{\prime}(x)=\alpha^{2}x^{2}.   are roots of      e  1   =   -     Ω   (   α  4   )    /   Ξ  ′     (   α  4   )     =    (    α   -  4    +   α   -  7    +   α   -  5    +   α  7    )   /   α   -  5     =    α   -  5    /   α   -  5     =  1   ,         subscript  e  1           normal-Ω   superscript  α  4     superscript  normal-Ξ  normal-′     superscript  α  4               superscript  α    4     superscript  α    7     superscript  α    5     superscript  α  7     superscript  α    5             superscript  α    5     superscript  α    5          1     e_{1}=-\Omega(\alpha^{4})/\Xi^{\prime}(\alpha^{4})=(\alpha^{-4}+\alpha^{-7}+%
 \alpha^{-5}+\alpha^{7})/\alpha^{-5}=\alpha^{-5}/\alpha^{-5}=1,         e  2   =   -     Ω   (   α  7   )    /   Ξ  ′     (   α  7   )     =    (    α   -  4    +   α   -  4    +   α  1   +   α  1    )   /   α  1    =  0   ,         subscript  e  2           normal-Ω   superscript  α  7     superscript  normal-Ξ  normal-′     superscript  α  7               superscript  α    4     superscript  α    4     superscript  α  1    superscript  α  1     superscript  α  1         0     e_{2}=-\Omega(\alpha^{7})/\Xi^{\prime}(\alpha^{7})=(\alpha^{-4}+\alpha^{-4}+%
 \alpha^{1}+\alpha^{1})/\alpha^{1}=0,   We get      e  3   =   -     Ω   (   α  10   )    /   Ξ  ′     (   α  10   )     =    (    α   -  4    +   α   -  1    +   α  7   +   α   -  5     )   /   α  7    =    α  7   /   α  7    =  1   ,         subscript  e  3           normal-Ω   superscript  α  10     superscript  normal-Ξ  normal-′     superscript  α  10               superscript  α    4     superscript  α    1     superscript  α  7    superscript  α    5      superscript  α  7            superscript  α  7    superscript  α  7         1     e_{3}=-\Omega(\alpha^{10})/\Xi^{\prime}(\alpha^{10})=(\alpha^{-4}+\alpha^{-1}+%
 \alpha^{7}+\alpha^{-5})/\alpha^{7}=\alpha^{7}/\alpha^{7}=1,        e  4   =   -     Ω   (   α  2   )    /   Ξ  ′     (   α  2   )     =    (    α   -  4    +   α  6   +   α  6   +   α  1    )   /   α  6    =    α  6   /   α  6    =  1.         subscript  e  4           normal-Ω   superscript  α  2     superscript  normal-Ξ  normal-′     superscript  α  2               superscript  α    4     superscript  α  6    superscript  α  6    superscript  α  1     superscript  α  6            superscript  α  6    superscript  α  6         1.     e_{4}=-\Omega(\alpha^{2})/\Xi^{\prime}(\alpha^{2})=(\alpha^{-4}+\alpha^{6}+%
 \alpha^{6}+\alpha^{1})/\alpha^{6}=\alpha^{6}/\alpha^{6}=1.         e  3   =   e  4   =  1   ,         subscript  e  3    subscript  e  4        1     e_{3}=e_{4}=1,         Γ   (  x  )    =    (     α  8   x   -  1   )    (     α  11   x   -  1   )     .        normal-Γ  x          superscript  α  8   x   1        superscript  α  11   x   1      \Gamma(x)=(\alpha^{8}x-1)(\alpha^{11}x-1).   Fact, that      s  1   =   α  4    ,       subscript  s  1    superscript  α  4     s_{1}=\alpha^{4},   should not be surprising.  Corrected code is therefore [ 1  0  1 1  0 0  1 0 1 0 0].  Decoding with unreadable characters with a small number of errors  Let us show the algorithm behaviour for the case with small number of errors. Let the received word is [ 1  0 ? 1 1 ? 0 0 0 1 0 1 0 0 ].  Again, replace the unreadable characters by zeros while creating the polynom reflecting their positions      s  2   =   α   -  7     ,       subscript  s  2    superscript  α    7      s_{2}=\alpha^{-7},   Compute the syndromes      s  3   =   α  1    ,       subscript  s  3    superscript  α  1     s_{3}=\alpha^{1},         s  4   =   α  1    ,       subscript  s  4    superscript  α  1     s_{4}=\alpha^{1},         s  5   =   α  0    ,       subscript  s  5    superscript  α  0     s_{5}=\alpha^{0},         s  6   =   α  2    .       subscript  s  6    superscript  α  2     s_{6}=\alpha^{2}.         S   (  x  )    =    α  4   +    α   -  7    x   +    α  1    x  2    +    α  1    x  3    +    α  0    x  4    +    α  2    x  5      ,        S  x      superscript  α  4      superscript  α    7    x      superscript  α  1    superscript  x  2       superscript  α  1    superscript  x  3       superscript  α  0    superscript  x  4       superscript  α  2    superscript  x  5       S(x)=\alpha^{4}+\alpha^{-7}x+\alpha^{1}x^{2}+\alpha^{1}x^{3}+\alpha^{0}x^{4}+%
 \alpha^{2}x^{5},   and      S   (  x  )   Γ   (  x  )    =    α  4   +    α  7   x   +    α  5    x  2    +    α  3    x  3    +    α  1    x  4    +    α   -  1     x  5    +    α   -  1     x  6    +    α  6    x  7      .        S  x  normal-Γ  x      superscript  α  4      superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3       superscript  α  1    superscript  x  4       superscript  α    1     superscript  x  5       superscript  α    1     superscript  x  6       superscript  α  6    superscript  x  7       S(x)\Gamma(x)=\alpha^{4}+\alpha^{7}x+\alpha^{5}x^{2}+\alpha^{3}x^{3}+\alpha^{1%
 }x^{4}+\alpha^{-1}x^{5}+\alpha^{-1}x^{6}+\alpha^{6}x^{7}.   Create syndrom polynommial     (      S   (  x  )   Γ   (  x  )         x  6      )   =   (       α  4   +    α  7   x   +    α  5    x  2    +    α  3    x  3    +    α  1    x  4    +    α   -  1     x  5    +    α   -  1     x  6    +    α  6    x  7          x  6      )           S  x  normal-Γ  x      superscript  x  6          superscript  α  4      superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3       superscript  α  1    superscript  x  4       superscript  α    1     superscript  x  5       superscript  α    1     superscript  x  6       superscript  α  6    superscript  x  7        superscript  x  6       \begin{pmatrix}S(x)\Gamma(x)\\
 x^{6}\end{pmatrix}=\begin{pmatrix}\alpha^{4}+\alpha^{7}x+\alpha^{5}x^{2}+%
 \alpha^{3}x^{3}+\alpha^{1}x^{4}+\alpha^{-1}x^{5}+\alpha^{-1}x^{6}+\alpha^{6}x^%
 {7}\\
 x^{6}\end{pmatrix}   and     =    (       α   -  1    +    α  6   x      1      1    0     )    (      x  6         α  4   +    α  7   x   +    α  5    x  2    +    α  3    x  3    +    α  1    x  4    +    α   -  1     x  5    +    (    α   -  1    +   α   -  1     )    x  6    +    (    α  6   +   α  6    )    x  7        )        absent         superscript  α    1       superscript  α  6   x    1    1  0       superscript  x  6        superscript  α  4      superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3       superscript  α  1    superscript  x  4       superscript  α    1     superscript  x  5         superscript  α    1     superscript  α    1      superscript  x  6         superscript  α  6    superscript  α  6     superscript  x  7          =\begin{pmatrix}\alpha^{-1}+\alpha^{6}x&1\\
 1&0\end{pmatrix}\begin{pmatrix}x^{6}\\
 \alpha^{4}+\alpha^{7}x+\alpha^{5}x^{2}+\alpha^{3}x^{3}+\alpha^{1}x^{4}+\alpha^%
 {-1}x^{5}+(\alpha^{-1}+\alpha^{-1})x^{6}+(\alpha^{6}+\alpha^{6})x^{7}\end{pmatrix}   Let us run the extended Euclidean algorithm:       =    (       α   -  1    +    α  6   x      1      1    0     )    (       α  3   +    α  1   x      1      1    0     )    (       α  4   +    α  7   x   +    α  5    x  2    +    α  3    x  3    +    α  1    x  4    +    α   -  1     x  5           α  7   +    (    α   -  5    +   α  5    )   x   +    (    α   -  7    +   α   -  7     )    x  2    +     (    α  6   +   α  6    )    x  3    +           (    α  4   +   α  4    )    x  4    +    (    α  2   +   α  2    )    x  5    +    (    α  0   +  1   )    x  6        )        absent         superscript  α    1       superscript  α  6   x    1    1  0         superscript  α  3      superscript  α  1   x    1    1  0         superscript  α  4      superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3       superscript  α  1    superscript  x  4       superscript  α    1     superscript  x  5          superscript  α  7        superscript  α    5     superscript  α  5    x        superscript  α    7     superscript  α    7      superscript  x  2     limit-from       superscript  α  6    superscript  α  6     superscript  x  3                superscript  α  4    superscript  α  4     superscript  x  4         superscript  α  2    superscript  α  2     superscript  x  5         superscript  α  0   1    superscript  x  6          =\begin{pmatrix}\alpha^{-1}+\alpha^{6}x&1\\
 1&0\end{pmatrix}\begin{pmatrix}\alpha^{3}+\alpha^{1}x&1\\
 1&0\end{pmatrix}\begin{pmatrix}\alpha^{4}+\alpha^{7}x+\alpha^{5}x^{2}+\alpha^{%
 3}x^{3}+\alpha^{1}x^{4}+\alpha^{-1}x^{5}\\
 \alpha^{7}+(\alpha^{-5}+\alpha^{5})x+(\alpha^{-7}+\alpha^{-7})x^{2}+(\alpha^{6%
 }+\alpha^{6})x^{3}+\\
 (\alpha^{4}+\alpha^{4})x^{4}+(\alpha^{2}+\alpha^{2})x^{5}+(\alpha^{0}+1)x^{6}%
 \end{pmatrix}         =    (       (   1  +   α  2    )   +    (    α  0   +   α   -  6     )   x   +    α  7    x  2         α   -  1    +    α  6   x          α  3   +    α  1   x      1     )    (       α  4   +    α  7   x   +    α  5    x  2    +    α  3    x  3    +    α  1    x  4    +    α   -  1     x  5           α  7   +    α  0   x       )     .      absent          1   superscript  α  2         superscript  α  0    superscript  α    6     x      superscript  α  7    superscript  x  2        superscript  α    1       superscript  α  6   x         superscript  α  3      superscript  α  1   x    1         superscript  α  4      superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3       superscript  α  1    superscript  x  4       superscript  α    1     superscript  x  5          superscript  α  7      superscript  α  0   x         =\begin{pmatrix}(1+\alpha^{2})+(\alpha^{0}+\alpha^{-6})x+\alpha^{7}x^{2}&%
 \alpha^{-1}+\alpha^{6}x\\
 \alpha^{3}+\alpha^{1}x&1\end{pmatrix}\begin{pmatrix}\alpha^{4}+\alpha^{7}x+%
 \alpha^{5}x^{2}+\alpha^{3}x^{3}+\alpha^{1}x^{4}+\alpha^{-1}x^{5}\\
 \alpha^{7}+\alpha^{0}x\end{pmatrix}.          (      -   (  1  )        α   -  1    +    α  6   x          α  3   +    α  1   x       -   (    α   -  7    +    α  7   x   +    α  7    x  2     )       )    (       α   -  7    +    α  7   x   +    α  7    x  2         α   -  1    +    α  6   x          α  3   +    α  1   x      1     )    =   (     1    0      0    1     )    ,            1      superscript  α    1       superscript  α  6   x         superscript  α  3      superscript  α  1   x         superscript  α    7       superscript  α  7   x      superscript  α  7    superscript  x  2             superscript  α    7       superscript  α  7   x      superscript  α  7    superscript  x  2        superscript  α    1       superscript  α  6   x         superscript  α  3      superscript  α  1   x    1       1  0    0  1      \begin{pmatrix}-(1)&\alpha^{-1}+\alpha^{6}x\\
 \alpha^{3}+\alpha^{1}x&-(\alpha^{-7}+\alpha^{7}x+\alpha^{7}x^{2})\end{pmatrix}%
 \begin{pmatrix}\alpha^{-7}+\alpha^{7}x+\alpha^{7}x^{2}&\alpha^{-1}+\alpha^{6}x%
 \\
 \alpha^{3}+\alpha^{1}x&1\end{pmatrix}=\begin{pmatrix}1&0\\
 0&1\end{pmatrix},          (      -   (  1  )        α   -  1    +    α  6   x          α  3   +    α  1   x       -   (    α   -  7    +    α  7   x   +    α  7    x  2     )       )    (      S   (  x  )   Γ   (  x  )         x  6      )    =   (       α  4   +    α  7   x   +    α  5    x  2    +    α  3    x  3    +    α  1    x  4    +    α   -  1     x  5           α  7   +    α  0   x       )    .            1      superscript  α    1       superscript  α  6   x         superscript  α  3      superscript  α  1   x         superscript  α    7       superscript  α  7   x      superscript  α  7    superscript  x  2            S  x  normal-Γ  x      superscript  x  6           superscript  α  4      superscript  α  7   x      superscript  α  5    superscript  x  2       superscript  α  3    superscript  x  3       superscript  α  1    superscript  x  4       superscript  α    1     superscript  x  5          superscript  α  7      superscript  α  0   x        \begin{pmatrix}-(1)&\alpha^{-1}+\alpha^{6}x\\
 \alpha^{3}+\alpha^{1}x&-(\alpha^{-7}+\alpha^{7}x+\alpha^{7}x^{2})\end{pmatrix}%
 \begin{pmatrix}S(x)\Gamma(x)\\
 x^{6}\end{pmatrix}=\begin{pmatrix}\alpha^{4}+\alpha^{7}x+\alpha^{5}x^{2}+%
 \alpha^{3}x^{3}+\alpha^{1}x^{4}+\alpha^{-1}x^{5}\\
 \alpha^{7}+\alpha^{0}x\end{pmatrix}.     We have reached polynomial of degree at most 3, and as         S   (  x  )   Γ   (  x  )    (    α  3   +    α  1   x    )    -    (    α   -  7    +    α  7   x   +    α  7    x  2     )    x  6     =    α  7   +    α  0   x     .          S  x  normal-Γ  x     superscript  α  3      superscript  α  1   x          superscript  α    7       superscript  α  7   x      superscript  α  7    superscript  x  2      superscript  x  6        superscript  α  7      superscript  α  0   x      S(x)\Gamma(x)(\alpha^{3}+\alpha^{1}x)-(\alpha^{-7}+\alpha^{7}x+\alpha^{7}x^{2}%
 )x^{6}=\alpha^{7}+\alpha^{0}x.   we get        Λ   (  x  )    =    α  3   +    α  1   x     .        normal-Λ  x      superscript  α  3      superscript  α  1   x      \Lambda(x)=\alpha^{3}+\alpha^{1}x.     Therefore,       λ  0   ≠  1.       subscript  λ  0   1.    \lambda_{0}\neq 1.     Let    Λ   (  x  )       normal-Λ  x    \Lambda(x)   Don't worry that     α   3  -  1    .     superscript  α    3  1     \alpha^{3-1}.   The root of      Ξ   (  x  )    =   Γ   (  x  )   Λ   (  x  )    =    α  3   +    α   -  7    x   +    α   -  4     x  2    +    α  5    x  3      ,          normal-Ξ  x     normal-Γ  x  normal-Λ  x           superscript  α  3      superscript  α    7    x      superscript  α    4     superscript  x  2       superscript  α  5    superscript  x  3        \Xi(x)=\Gamma(x)\Lambda(x)=\alpha^{3}+\alpha^{-7}x+\alpha^{-4}x^{2}+\alpha^{5}%
 x^{3},   is      Ω   (  x  )    =    S   (  x  )   Ξ   (  x  )    mod   x  6    =    α  7   +    α  0   x     .          normal-Ω  x    modulo    S  x  normal-Ξ  x    superscript  x  6            superscript  α  7      superscript  α  0   x       \Omega(x)=S(x)\Xi(x)\bmod x^{6}=\alpha^{7}+\alpha^{0}x.     Let      e  j   =   -     Ω   (   α   -   i  j     )    /   Ξ  ′     (   α   -   i  j     )      ,       subscript  e  j           normal-Ω   superscript  α     subscript  i  j       superscript  normal-Ξ  normal-′     superscript  α     subscript  i  j         e_{j}=-\Omega(\alpha^{-i_{j}})/\Xi^{\prime}(\alpha^{-i_{j}}),   and    α   -   i  j       superscript  α     subscript  i  j      \alpha^{-i_{j}}   Let us look for error values using formula     Ξ   (  x  )    .      normal-Ξ  x    \Xi(x).   where       Ξ  ′    (  x  )    =    α   -  7    +    α  5    x  2      .         superscript  normal-Ξ  normal-′   x      superscript  α    7       superscript  α  5    superscript  x  2       \Xi^{\prime}(x)=\alpha^{-7}+\alpha^{5}x^{2}.   are roots of polynomial      e  1   =   -     Ω   (   α  4   )    /   Ξ  ′     (   α  4   )     =    (    α  7   +   α  4    )   /   (    α   -  7    +   α   -  2     )    =    α  3   /   α  3    =  1   ,         subscript  e  1           normal-Ω   superscript  α  4     superscript  normal-Ξ  normal-′     superscript  α  4               superscript  α  7    superscript  α  4       superscript  α    7     superscript  α    2              superscript  α  3    superscript  α  3         1     e_{1}=-\Omega(\alpha^{4})/\Xi^{\prime}(\alpha^{4})=(\alpha^{7}+\alpha^{4})/(%
 \alpha^{-7}+\alpha^{-2})=\alpha^{3}/\alpha^{3}=1,         e  2   =   -     Ω   (   α  7   )    /   Ξ  ′     (   α  7   )     =    (    α  7   +   α  7    )   /   (    α   -  7    +   α  4    )    =   0  /   α  5    =  0   ,         subscript  e  2           normal-Ω   superscript  α  7     superscript  normal-Ξ  normal-′     superscript  α  7               superscript  α  7    superscript  α  7       superscript  α    7     superscript  α  4            0   superscript  α  5         0     e_{2}=-\Omega(\alpha^{7})/\Xi^{\prime}(\alpha^{7})=(\alpha^{7}+\alpha^{7})/(%
 \alpha^{-7}+\alpha^{4})=0/\alpha^{5}=0,   We get     e  3   =   -     Ω   (   α  2   )    /   Ξ  ′     (   α  2   )     =    (    α  7   +   α  2    )   /   (    α   -  7    +   α   -  6     )    =    α   -  3    /   α   -  3     =  1.         subscript  e  3           normal-Ω   superscript  α  2     superscript  normal-Ξ  normal-′     superscript  α  2               superscript  α  7    superscript  α  2       superscript  α    7     superscript  α    6              superscript  α    3     superscript  α    3          1.     e_{3}=-\Omega(\alpha^{2})/\Xi^{\prime}(\alpha^{2})=(\alpha^{7}+\alpha^{2})/(%
 \alpha^{-7}+\alpha^{-6})=\alpha^{-3}/\alpha^{-3}=1.        e  3   =  1       subscript  e  3   1    e_{3}=1    $e_3=-\Omega(\alpha^2)/\Xi'(\alpha^2)=(\alpha^{7}+\alpha^{2})/(\alpha^{-7}+\alpha^{-6})=\alpha^{-3}/\alpha^{-3}=1.$ The fact that $e_3=1$ should not be surprising.  Corrected code is therefore [ 1  0  1 1  0 0 0 1 0 1 0 0].  Citations  References  Primary sources      Secondary sources    Course notes are apparently being redone for 2012: http://www.stanford.edu/class/ee387/      Further reading        "  Category:Error detection and correction  Category:Finite fields  Category:Coding theory     ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩     