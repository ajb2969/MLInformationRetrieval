   Fermat primality test      Fermat primality test   The Fermat primality test is a probabilistic test to determine whether a number is a probable prime .  Concept  Fermat's little theorem states that if p is prime and    0  <  a  <  p        0  a       p     0   , then        a   p  -  1    ≡   1     (   mod  p   )     .       superscript  a    p  1     annotated  1   pmod  p      a^{p-1}\equiv 1\;\;(\mathop{{\rm mod}}p).     If we want to test whether p is prime, then we can pick random a 's in the interval and see whether the equality holds. If the equality does not hold for a value of a , then p is composite. If the equality does hold for many values of a , then we can say that p is probably prime .  It might be in our tests that we do not pick any value for a such that the equality fails. Any a such that       a   n  -  1    ≡   1     (   mod  n   )         superscript  a    n  1     annotated  1   pmod  n      a^{n-1}\equiv 1\;\;(\mathop{{\rm mod}}n)   when n is composite is known as a Fermat liar . Vice versa, in this case n is called Fermat pseudoprime to base a .  If we do pick an a such that       a   n  -  1    ≢   1     (   mod  n   )       not-equivalent-to   superscript  a    n  1     annotated  1   pmod  n      a^{n-1}\not\equiv 1\;\;(\mathop{{\rm mod}}n)   then a is known as a Fermat witness for the compositeness of n .  Example  Suppose we wish to determine whether n = 221 is prime. Randomly pick 0 a^{n-1} = 38^{220} \equiv 1 \pmod{221}. Either 221 is prime, or 38 is a Fermat liar, so we take another a , say 24:        a   n  -  1    =   24  220   ≡  81  ≢   1     (   mod  221   )     .         superscript  a    n  1     superscript  24  220        81    not-equivalent-to     annotated  1   pmod  221       a^{n-1}=24^{220}\equiv 81\not\equiv 1\;\;(\mathop{{\rm mod}}221).   So 221 is composite and 38 was indeed a Fermat liar.  Algorithm and running time  The algorithm can be written as follows:   Inputs : n : a value to test for primality, n >3; k : a parameter that determines the number of times to test for primality  Output : composite if n is composite, otherwise probably prime   Repeat k times:  Pick a randomly in the range [2, n − 2]  If     a   n  -  1    ≢   1     (   mod  n   )       not-equivalent-to   superscript  a    n  1     annotated  1   pmod  n      a^{n-1}\not\equiv 1\;\;(\mathop{{\rm mod}}n)   , then return composite     If composite is never returned: return probably prime    The a values 1 and n -1 are not used as the equality holds for all n and all odd n respectively, hence testing them adds no value.  Using fast algorithms for modular exponentiation , the running time of this algorithm is O ( k × log 2 n × log log n × log log log n ), where k is the number of times we test a random a , and n is the value we want to test for primality.  Flaw  There are infinitely many values of   n   n   n   (known as Carmichael numbers ) for which all values of   a   a   a   for which     g  c  d   (  a  ,  n  )    =  1        g  c  d   a  n    1    gcd(a,n)=1   are Fermat liars. While Carmichael numbers are substantially rarer than prime numbers, 1 there are enough of them that Fermat's primality test is often not used in the above form. Instead, other more powerful extensions of the Fermat test, such as Baillie-PSW , Miller-Rabin , and Solovay-Strassen are more commonly used.  In general, if   n   n   n   is not a Carmichael number then at least half of all      a  ∈    (    ℤ  /  n   ℤ   )   *       a   superscript      ℤ  n   ℤ       a\in(\mathbb{Z}/n\mathbb{Z})^{*}     are Fermat witnesses. For proof of this, let   a   a   a   be a Fermat witness and    a  1     subscript  a  1    a_{1}   ,    a  2     subscript  a  2    a_{2}   , ...,    a  s     subscript  a  s    a_{s}   be Fermat liars. Then        (   a  ⋅   a  i    )    n  -  1    ≡    a   n  -  1    ⋅   a  i   n  -  1     ≡   a   n  -  1    ≢   1     (   mod  n   )           superscript   normal-⋅  a   subscript  a  i      n  1     normal-⋅   superscript  a    n  1     superscript   subscript  a  i     n  1           superscript  a    n  1      not-equivalent-to     annotated  1   pmod  n       (a\cdot a_{i})^{n-1}\equiv a^{n-1}\cdot a_{i}^{n-1}\equiv a^{n-1}\not\equiv 1%
 \;\;(\mathop{{\rm mod}}n)     and so all    a  ×   a  i       a   subscript  a  i     a\times a_{i}   for    i  =   1  ,  2  ,  …  ,  s       i   1  2  normal-…  s     i=1,2,...,s   are Fermat witnesses.  Applications  As mentioned above, most applications use a Miller-Rabin or Baillie-PSW test for primality. Sometimes a Fermat test (along with some trial division by small primes) is performed first to improve performance. GMP since version 3.0 uses a base-210 Fermat test after trial division and before running Miller-Rabin tests. Libgcrypt uses a similar process with base 2 for the Fermat test, but OpenSSL does not.  In practice with most big number libraries such as GMP, the Fermat test is not noticeably faster than a Miller-Rabin test, and can be slower for many inputs. 2  As an exception, OpenPFGW uses only the Fermat test for probable prime testing. The program is typically used with multi-thousand digit inputs with a goal of maximum speed with very large inputs. Another well known program that relies only on the Fermat test is PGP where it is only used for testing of self-generated large random values (an open source counterpart, GNU Privacy Guard , uses a Fermat pretest followed by Miller-Rabin tests).  References     "  Category:Primality tests  Category:Modular arithmetic     Erdös' upper bound for the number of Carmichael numbers is lower than the prime number function n/log(n) ↩  ↩     