   Function pointer      Function pointer  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     A function pointer (or subroutine pointer or procedure pointer ) is a type of pointer supported by third-generation  programming languages (such as PL/I , COBOL , Fortran , 1 dBASE dBL, and C ) and object-oriented programming languages (such as C++ and D ). 2  Instead of referring to data values, a function pointer points to executable code within memory. When dereferenced , a function pointer can be used to invoke the function it points to and pass it arguments just like a normal function call. Such an invocation is also known as an "indirect" call, because the function is being invoked indirectly through a variable instead of directly through a fixed name or address.  Function pointers can be used to simplify code by providing a simple way to select a function to execute based on run-time values.  Simple function pointers  The simplest implementation of a function (or subroutine) pointer is as a variable containing the address of the function within executable memory. Older third-generation languages such as PL/I and COBOL , as well as more modern languages such as Pascal and C generally implement function pointers in this manner. Such pointers in older languages are generally less type-safe than in more modern languages since the latter associate more typing information with a function pointer variable, such as the data type of the return value of the function and the data type information of the parameters to the function. 3  Example in C  The following C program illustrates the use of two function pointers:   func1 takes one double-precision (double) parameter and returns another double, and is assigned to a function which converts centimetres to inches  func2 takes a pointer to a constant character array as well as an integer and returns a pointer to a character, and is assigned to a string library function which returns a pointer to the first occurrence of a given character in a character array   #include  /* for printf */  #include  /* for strchr */  double cm_to_inches( double cm) { return cm / 2.54 ;
 } int main( void ) { double (*func1)( double ) = cm_to_inches; char * (*func2)( const  char *, int ) = strchr;
     printf( "%f %s" , func1( 15.0 ), func2( "Wikipedia" , 'i')); /* prints "5.905512 ikipedia" */  return  0 ;
 }  The next program uses a function pointer to invoke one of two functions ( sin or cos ) indirectly from another function ( compute_sum , computing an approximation of the function's Riemann integration ). The program operates by having function main call function compute_sum twice, passing it a pointer to the library function sin the first time, and a pointer to function cos the second time. Function compute_sum in turn invokes one of the two functions indirectly by dereferencing its function pointer argument funcp multiple times, adding together the values that the invoked function returns and returning the resulting sum. The two sums are written to the standard output by main .  #include  #include  // Function taking a function pointer as an argument  double compute_sum( double (*funcp)( double ), double lo, double hi)
 { double sum = 0.0 ; // Add values returned by the pointed-to function '*funcp'  for ( int i = 0 ;  i <= 100 ;  i++)
     { double x, y; // Use the function pointer 'funcp' to invoke the function x = i / 100.0 * (hi - lo) + lo;
         y = (*funcp)(x);
         sum += y;
     } return sum / 100.0 ;
 } int main( void )
 { double (*fp)( double ); // Function pointer  double sum; // Use 'sin()' as the pointed-to function fp = sin;
     sum = compute_sum(fp, 0.0 , 1.0 );
     printf( "sum(sin): %f \n " , sum); // Use 'cos()' as the pointed-to function fp = cos;
     sum = compute_sum(fp, 0.0 , 1.0 );
     printf( "sum(cos): %f \n " , sum); return  0 ;
 }  Functors  Functors , or function objects , are similar to function pointers, and can be used in similar ways. A functor is an object of a class type that implements the function-call operator , allowing the object to be used within expressions using the same syntax as a function call. Functors are more powerful than simple function pointers, being able to contain their own data values, and allowing the programmer to emulate closures . They are also used as callback functions if it is necessary to use a member function as a callback function. 4  Many "pure" object-oriented languages do not support function pointers. Something similar can be implemented in these kinds of languages, though, using references to interfaces that define a single member function . CLI languages such as C# and Visual Basic .NET implement type-safe function pointers with delegates .  In other languages that support first-class functions , functions are regarded as data, and can be passed, returned, and created dynamically directly by other functions, eliminating the need for function pointers.  Extensively using function pointers to call functions may produce a slow-down for the code on modern processors, because branch prediction may not be able to figure out where to branch to (it depends on the value of the function pointer at run time) although this effect can be overstated as it is often amply compensated for by significantly reduced non indexed table lookups.  Method pointers  C++ is object-oriented , so classes can have methods . Non-static member functions (instance methods) have an implicit parameter (the this pointer) which is the pointer to the object it is operating on, so the type of the object must be included as part of the type of the function pointer. The method is then used on an object of that class by using one of the "pointer-to-member" operators: .* or ->* (for an object or a pointer to object, respectively).  Although function pointers in C and C++ can be implemented as simple addresses, so that typically sizeof(Fx)==sizeof(void *) , member pointers in C++ are often implemented as "fat pointers", typically two or three times the size of a simple function pointer, in order to deal with virtual inheritance .  In C++  A C++ typical use of "pointers to functions" is for passing a function as an argument to another function, since these cannot be passed dereferenced:  // Pointer to functions  #include  using  namespace std; int add( int first, int second)
 { return first + second;
 } int subtract( int first, int second)
 { return first - second;
 } int operation( int first, int second, int (*functocall)( int , int ))
 { return (*functocall)(first, second);
 } int main()
 { int a, b; int (*plus)( int , int ) = add; int (*minus)( int , int ) = subtract;
 
     a = operation( 7 , 5 , plus);
     b = operation( 20 , a, minus);
     cout << "a = " << a << " and b = " << b << endl; return  0 ;
 }  However, in modern C++, it's generally preferred'''[std::function  , of which the instances are function objects:  #include  #include  static  double derivative( const std::function< double ( double )> &f;, double x0, double eps)
 { double eps2 = eps / 2 ; double lo = x0 - eps2; double hi = x0 + eps2; return (f(hi) - f(lo)) / eps;
 } static  double f( double x)
 { return x * x;
 } int main()
 { double x = 1 ;
     std::cout << "d/dx(x ^ 2) [@ x = " << x << "] = " << derivative(f, x, 1e-5 ) << std::endl; return  0 ;
 } <span class="dt" double ( double )> Pointers to Member Functions in C++  This is how C++ uses function pointers when dealing with member functions of classes or structs. These are invoked using an object pointer or a this call. They are type safe in that you can only call members of that class (or derivatives) using a pointer of that type. This example also demonstrates the use of a typedef for the pointer to member function for add simplicity. Function pointers to static member functions are done in the traditional 'C' style because there is no object pointer or this call required.  #include  using  namespace std; class Foo
 { public : int add( int i, int j)
     { return i+j;
     } int mult( int i, int j)
     { return i*j;
     } static  int negate( int i)
     { return -i;
     }
 }; int bar1( int i, int j, Foo* pFoo, int (Foo::*pfn)( int , int ))
 { return (pFoo->*pfn)(i,j);
 } typedef  int (Foo::*Foo_pfn)( int , int ); int bar2( int i, int j, Foo* pFoo, Foo_pfn pfn)
 { return (pFoo->*pfn)(i,j);
 } typedef  int (*PFN)( int ); int bar3( int i, PFN pfn)
 { return pfn(i);
 } int main()
 {
     Foo foo;
     cout << "Foo::add(2,4) = " << bar1( 2 , 4 , &foo;, &Foo;::add) << endl;
     cout << "Foo::mult(3,5) = " << bar2( 3 , 5 , &foo;, &Foo;::mult) << endl;
     cout << "Foo::negate(6) = " << bar3( 6 , &Foo;::negate) << endl; return  0 ;
 }  See also   Delegation (programming)  Function object  Higher-order function  Procedural parameter   References  External links   FAQ on Function Pointers , things to avoid with function pointers, some information on using function objects  Function Pointer Tutorials , a guide to C/C++ function pointers, callbacks , and function objects (functors)  Member Function Pointers and the Fastest Possible C++ Delegates , CodeProject article by Don Clugston  Pointer Tutorials , C++ documentation and tutorials  Secure Function Pointer and Callbacks in Windows Programming , CodeProject article by R. Selvam  The C Book , Function Pointers in C by "The C Book"  Function Pointers in dBASE dBL , Function Pointer in dBASE dBL   de:Zeiger (Informatik)#Funktionszeiger (Methodenzeiger) "  Category:Data types  Category:Subroutines     ↩  ↩  ↩  ↩   