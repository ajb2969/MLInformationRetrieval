   Grover's algorithm      Grover's algorithm   Grover's algorithm is a quantum algorithm that finds with high probability the unique input to a black box function that produces a particular output value, using just evaluations of the function, where   N   N   N   is the size of the function's domain .  The analogous problem in classical computation cannot be solved in fewer than    O   (  N  )       O  N    O(N)   evaluations (because, in the worst case, the correct input might be the last one that is tried). At roughly the same time that Grover published his algorithm, Bennett, Bernstein, Brassard, and Vazirani published a proof that no quantum solution to the problem can evaluate the function fewer than times, so Grover's algorithm is asymptotically optimal. 1  Unlike other quantum algorithms, which may provide exponential speedup over their classical counterparts, Grover's algorithm provides only a quadratic speedup. However, even quadratic speedup is considerable when   N   N   N   is large. Grover's algorithm could brute force a 128-bit symmetric cryptographic key in roughly 2 64 iterations, or a 256-bit key in roughly 2 128 iterations. As a result, it is sometimes suggested that symmetric key lengths be doubled to protect against future quantum attacks.  Like many quantum algorithms, Grover's algorithm is probabilistic in the sense that it gives the correct answer with a probability of less than 1. Though there is technically no upper bound on the number of repetitions that might be needed before the correct answer is obtained, the expected number of repetitions is a constant factor that does not grow with   N   N   N   .  Grover's original paper described the algorithm as a database search algorithm, and this description is still common. The database in this analogy is a table of all of the function's outputs, indexed by the corresponding input.  Applications  Although the purpose of Grover's algorithm is usually described as "searching a database", it may be more accurate to describe it as "inverting a function". Roughly speaking, if we have a function y = f(x) that can be evaluated on a quantum computer, Grover's algorithm allows us to calculate x when given y . Inverting a function is related to the searching of a database because we could come up with a function that produces one particular value of y ("true" for instance) if x matches a desired entry in a database, and another value of y ("false") for other values of x .  Grover's algorithm can also be used for estimating the mean and median of a set of numbers, and for solving the Collision problem . The algorithm can be further optimized if there is more than one matching entry and the number of matches is known beforehand.  Setup  Consider an unsorted database with N entries. The algorithm requires an N -dimensional state space  H , which can be supplied by n =log 2  N  qubits . Consider the problem of determining the index of the database entry which satisfies some search criterion. Let f be the function which maps database entries to 0 or 1 , where f(ω)=1 if and only if ω satisfies the search criterion. We are provided with (quantum black box) access to a subroutine in the form of a unitary operator , U ω , which acts as follows (for the ω for which f(ω)=1 ):       U  ω   |  ω   \rang   =  -  |  ω   \rang      fragments   subscript  U  ω   normal-|  ω  \rang    normal-|  ω  \rang    U_{\omega}|\omega\rang=-|\omega\rang          U  ω   |  x   \rang   =  |  x   \rang    for all   x  ≠  ω     fragments   subscript  U  ω   normal-|  x  \rang   normal-|  x  \rang  italic-  for all  x   ω    U_{\omega}|x\rang=|x\rang\qquad\mbox{for all}\ x\neq\omega     Our goal is to identify the index    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   .  Algorithm steps  The steps of Grover's algorithm are given as follows. Let    |  s  ⟩     ket  s    |s\rangle   denote the uniform superposition over all states      |  s   \rang   =   1   N     ∑   x  =  1   N   |  x   \rang      fragments  normal-|  s  \rang     1    N     superscript   subscript     x  1    N   normal-|  x  \rang    |s\rang=\frac{1}{\sqrt{N}}\sum_{x=1}^{N}|x\rang   .  Then the operator       U  s   =    2   |  s  ⟩    ⟨  s  |    -  I        subscript  U  s       2   ket  s    bra  s    I     U_{s}=2\left|s\right\rangle\left\langle s\right|-I     is known as the Grover diffusion operator.  Here is the algorithm:   Initialize the system to the state     |  s   \rang   =   1   N     ∑   x  =  1   N   |  x   \rang      fragments  normal-|  s  \rang     1    N     superscript   subscript     x  1    N   normal-|  x  \rang    |s\rang=\frac{1}{\sqrt{N}}\sum_{x=1}^{N}|x\rang     Perform the following "Grover iteration" r(N) times. The function r(N), which is asymptotically O(N ½ ) , is described below.  Apply the operator    U  ω     subscript  U  ω    U_{\omega}   .  Apply the operator    U  s     subscript  U  s    U_{s}   .   Perform the measurement Ω. The measurement result will be eigenvalue λ ω with probability approaching 1 for N≫1. From λ ω , ω may be obtained.   The first iteration  A preliminary observation, in parallel with our definition       U  s   =    2   |  s  ⟩    ⟨  s  |    -  I        subscript  U  s       2   ket  s    bra  s    I     U_{s}=2\left|s\right\rangle\left\langle s\right|-I   , is that U ω can be expressed in an alternate way:       U  ω   =   I  -   2   |  ω  ⟩    ⟨  ω  |          subscript  U  ω     I    2   ket  ω    bra  ω       U_{\omega}=I-2\left|\omega\right\rangle\left\langle\omega\right|   . To prove this it suffices to check how U ω acts on basis states:       (  I  -  2  |  ω  ⟩    ⟨  ω  |  )   |  ω   \rang   =  |  ω   \rang   -  2  |  ω  ⟩  ⟨  ω  |  ω   \rang   =  -  |  ω  ⟩  =  U    ω   |  ω   \rang      fragments   fragments  normal-(  I   2  normal-|  ω  normal-⟩    fragments  normal-⟨  ω  normal-|  normal-)   normal-|  ω  \rang   normal-|  ω  \rang   2  normal-|  ω  normal-⟩  normal-⟨  ω  normal-|  ω  \rang    normal-|  ω  normal-⟩   U   ω   normal-|  ω  \rang    (I-2|\omega\rangle\langle\omega|)|\omega\rang=|\omega\rang-2|\omega\rangle%
 \langle\omega|\omega\rang=-|\omega\rangle=U_{\omega}|\omega\rang   .       (  I  -  2  |  ω  ⟩    ⟨  ω  |  )   |  x   \rang   =  |  x   \rang   -  2  |  ω  ⟩  ⟨  ω  |  x   \rang   =  |  x  ⟩  =  U    ω   |  x   \rang      fragments   fragments  normal-(  I   2  normal-|  ω  normal-⟩    fragments  normal-⟨  ω  normal-|  normal-)   normal-|  x  \rang   normal-|  x  \rang   2  normal-|  ω  normal-⟩  normal-⟨  ω  normal-|  x  \rang   normal-|  x  normal-⟩   U   ω   normal-|  x  \rang    (I-2|\omega\rangle\langle\omega|)|x\rang=|x\rang-2|\omega\rangle\langle\omega|%
 x\rang=|x\rangle=U_{\omega}|x\rang   for all    x  ≠  ω      x  ω    x\neq\omega   .  The following computations show what happens in the first iteration:       \lang   ω  |  s   \rang   =   \lang   s  |  ω   \rang   =   1   N       fragments  \lang  ω  normal-|  s  \rang   \lang  s  normal-|  ω  \rang     1    N      \lang\omega|s\rang=\lang s|\omega\rang=\frac{1}{\sqrt{N}}   .        ⟨  s  |   s   \rang    =    N   1   N     ⋅   1   N     =  1           bra  s   s  \rang    normal-⋅    N    1    N       1    N          1     \langle s|s\rang=N\frac{1}{\sqrt{N}}\cdot\frac{1}{\sqrt{N}}=1   .       U  ω   |  s   \rang   =   (  I  -  2  |  ω  ⟩    ⟨  ω  |  )   |  s   \rang   =  |  s   \rang   -  2  |  ω  ⟩  ⟨  ω  |  s   \rang   =  |  s   \rang   -   2   N    |  ω  ⟩     fragments   subscript  U  ω   normal-|  s  \rang    fragments  normal-(  I   2  normal-|  ω  normal-⟩    fragments  normal-⟨  ω  normal-|  normal-)   normal-|  s  \rang   normal-|  s  \rang   2  normal-|  ω  normal-⟩  normal-⟨  ω  normal-|  s  \rang   normal-|  s  \rang     2    N    normal-|  ω  normal-⟩    U_{\omega}|s\rang=(I-2|\omega\rangle\langle\omega|)|s\rang=|s\rang-2|\omega%
 \rangle\langle\omega|s\rang=|s\rang-\frac{2}{\sqrt{N}}|\omega\rangle   .        U  s    (  |  s   \rang   -   2   N    |  ω  ⟩   )   =   (  2  |  s   \rang    \lang   s  |  -  I  )    (  |  s   \rang   -   2   N    |  ω  ⟩   )  =  2  |  s   \rang    \lang   s  |  s   \rang   -  |  s   \rang   -   4   N    |  s   \rang   ⟨  s  |  ω   \rang   +   2   N    |  ω   \rang   =     fragments   fragments   subscript  U  s    fragments  normal-(  normal-|  s  \rang     2    N    normal-|  ω  normal-⟩   normal-)     fragments  normal-(  2  normal-|  s  \rang  \lang  s  normal-|   I  normal-)    fragments  normal-(  normal-|  s  \rang     2    N    normal-|  ω  normal-⟩   normal-)   2  normal-|  s  \rang  \lang  s  normal-|  s  \rang   normal-|  s  \rang     4    N    normal-|  s  \rang  normal-⟨  s  normal-|  ω  \rang     2    N    normal-|  ω  \rang     U_{s}(|s\rang-\frac{2}{\sqrt{N}}|\omega\rangle)=(2|s\rang\lang s|-I)(|s\rang-%
 \frac{2}{\sqrt{N}}|\omega\rangle)=2|s\rang\lang s|s\rang-|s\rang-\frac{4}{%
 \sqrt{N}}|s\rang\langle s|\omega\rang+\frac{2}{\sqrt{N}}|\omega\rang=         =  2  |  s   \rang   -  |  s   \rang   -   4   N    ⋅   1   N    |  s   \rang   +   2   N    |  ω   \rang   =  |  s   \rang   -   4  N   |  s   \rang   +   2   N    |  ω   \rang   =    N  -  4   N   |  s   \rang   +   2   N    |  ω   \rang      fragments   2  normal-|  s  \rang   normal-|  s  \rang     4    N    normal-⋅    1    N    normal-|  s  \rang     2    N    normal-|  ω  \rang   normal-|  s  \rang     4  N   normal-|  s  \rang     2    N    normal-|  ω  \rang       N  4   N   normal-|  s  \rang     2    N    normal-|  ω  \rang    =2|s\rang-|s\rang-\frac{4}{\sqrt{N}}\cdot\frac{1}{\sqrt{N}}|s\rang+\frac{2}{%
 \sqrt{N}}|\omega\rang=|s\rang-\frac{4}{N}|s\rang+\frac{2}{\sqrt{N}}|\omega%
 \rang=\frac{N-4}{N}|s\rang+\frac{2}{\sqrt{N}}|\omega\rang   . After application of the two operators (    U  ω     subscript  U  ω    U_{\omega}   and    U  s     subscript  U  s    U_{s}   ), the amplitude of the searched-for element has increased from    |   \lang   ω  |  s   \rang    |  2   =  1  /  N     fragments  normal-|  \lang  ω  normal-|  s  \rang   superscript  normal-|  2    1   N    \left|\lang\omega|s\rang\right|^{2}=1/N   to    |   \lang   ω  |   U  s    U  ω   s   \rang    |  2   ≈  9  /  N     fragments  normal-|  \lang  ω  normal-|   subscript  U  s    subscript  U  ω   s  \rang   superscript  normal-|  2    9   N    \left|\lang\omega|U_{s}U_{\omega}s\rang\right|^{2}\approx 9/N   .  Description of U ω  Grover's algorithm requires a "quantum oracle" operator    U  ω     subscript  U  ω    U_{\omega}   which can recognize solutions to the search problem and give them a negative sign. In order to keep the search algorithm general, we will leave the inner workings of the oracle as a black box, but will explain how the sign is flipped. The oracle contains a function   f   f   f   which returns     f   (  x  )    =  1        f  x   1    f(x)=1   if    |  x   \rang      fragments  normal-|  x  \rang    |x\rang   is a solution to the search problem and     f   (  x  )    =  0        f  x   0    f(x)=0   otherwise. The oracle is a unitary operator which operates on two qubits, the index qubit    |  x   \rang      fragments  normal-|  x  \rang    |x\rang   and the oracle qubit    |  q   \rang      fragments  normal-|  q  \rang    |q\rang   :        |   x   \rang    |   q   \rang    ⟶   U  ω     |   x   \rang    |   q   ⊕   f   (  x  )    \rang       direct-sum        x  \rang    q  \rang    subscript  U  ω   normal-⟶       x  \rang    q     f  x  \rang     |x\rang|q\rang\overset{U_{\omega}}{\longrightarrow}|x\rang|q\oplus f(x)\rang     As usual,   ⊕   direct-sum   \oplus   denotes addition modulo 2. The operation flips the oracle qubit if     f   (  x  )    =  1        f  x   1    f(x)=1   and leaves it alone otherwise. In Grover's algorithm we want to flip the sign of the state    |  x   \rang      fragments  normal-|  x  \rang    |x\rang   if it labels a solution. This is achieved by setting the oracle qubit in the state     (    |    0   \rang    -   |   1   \rang    )   /   2            limit-from    0  \rang      1  \rang     2     (|0\rang-|1\rang)/\sqrt{2}   , which is flipped to     (    |    1   \rang    -   |   0   \rang    )   /   2            limit-from    1  \rang      0  \rang     2     (|1\rang-|0\rang)/\sqrt{2}   if    |  x   \rang      fragments  normal-|  x  \rang    |x\rang   is a solution:        |     x   \rang    (    |    0   \rang    -   |   1   \rang    )    /   2     ⟶   U  ω      (   -  1   )    f   (  x  )      |   x   \rang    (    |    0   \rang    -   |   1   \rang    )    /   2                 x  \rang       limit-from    0  \rang      1  \rang      2      subscript  U  ω   normal-⟶    superscript    1     f  x      x  \rang       limit-from    0  \rang      1  \rang      2     |x\rang\left(|0\rang-|1\rang\right)/\sqrt{2}\overset{U_{\omega}}{%
 \longrightarrow}(-1)^{f(x)}|x\rang\left(|0\rang-|1\rang\right)/\sqrt{2}     We regard    |  x   \rang      fragments  normal-|  x  \rang    |x\rang   as flipped, thus the oracle qubit is not changed, so by convention the oracle qubits are usually not mentioned in the specification of Grover's algorithm. Thus the operation of the oracle    U  ω     subscript  U  ω    U_{\omega}   is simply written as:       |   x   \rang    ⟶   U  ω      (   -  1   )    f   (  x  )      |   x   \rang           x  \rang    subscript  U  ω   normal-⟶    superscript    1     f  x      x  \rang    |x\rang\overset{U_{\omega}}{\longrightarrow}(-1)^{f(x)}|x\rang     Geometric proof of correctness  Consider the plane spanned by    |  s   \rang      fragments  normal-|  s  \rang    |s\rang   and    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   ; equivalently, the plane spanned by    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   and the perpendicular ket    |   s  ′    \rang   =   1    N  -  1      ∑   x  ≠  ω    |  x   \rang      fragments  normal-|   superscript  s  normal-′   \rang     1      N  1      subscript     x  ω    normal-|  x  \rang    |s^{\prime}\rang=\frac{1}{\sqrt{N-1}}\sum_{x\neq\omega}|x\rang   . We will consider the first iteration, acting on the initial ket    |  s   \rang      fragments  normal-|  s  \rang    |s\rang   . Since    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   is one of the basis vectors in    |  s   \rang      fragments  normal-|  s  \rang    |s\rang   the overlap is       \lang    s  ′   |  s   \rang   =     N  -  1   N       fragments  \lang   superscript  s  normal-′   normal-|  s  \rang         N  1   N      \lang s^{\prime}|s\rang=\sqrt{\frac{N-1}{N}}     In geometric terms, the angle    θ  /  2      θ  2    \theta/2   between    |  s   \rang      fragments  normal-|  s  \rang    |s\rang   and    |   s  ′    \rang      fragments  normal-|   superscript  s  normal-′   \rang    |s^{\prime}\rang   is given by:       sin   θ  /  2    =   1   N            θ  2      1    N      \sin\theta/2=\frac{1}{\sqrt{N}}     The operator    U  ω     subscript  U  ω    U_{\omega}   is a reflection at the hyperplane orthogonal to    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   for vectors in the plane spanned by    |   s  ′    \rang      fragments  normal-|   superscript  s  normal-′   \rang    |s^{\prime}\rang   and    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   ; i.e. it acts as a reflection across    |   s  ′    \rang      fragments  normal-|   superscript  s  normal-′   \rang    |s^{\prime}\rang   . The operator    U  s     subscript  U  s    U_{s}   is a reflection through    |  s   \rang      fragments  normal-|  s  \rang    |s\rang   . Therefore, the state vector remains in the plane spanned by    |   s  ′    \rang      fragments  normal-|   superscript  s  normal-′   \rang    |s^{\prime}\rang   and    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   after each application of the operators    U  s     subscript  U  s    U_{s}   and    U  ω     subscript  U  ω    U_{\omega}   , and it is straightforward to check that the operator     U  s    U  ω        subscript  U  s    subscript  U  ω     U_{s}U_{\omega}   of each Grover iteration step rotates the state vector by an angle of    θ  =   2   arcsin   1   N          θ    2      1    N        \theta=2\arcsin\frac{1}{\sqrt{N}}   .  We need to stop when the state vector passes close to    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   ; after this, subsequent iterations rotate the state vector away from    |  ω   \rang      fragments  normal-|  ω  \rang    |\omega\rang   , reducing the probability of obtaining the correct answer. The exact probability of measuring the correct answer is:       sin  2    (    (   r  +   1  2    )   θ   )       superscript   2       r    1  2    θ     \sin^{2}\left(\left(r+\frac{1}{2}\right)\theta\right)   where r is the (integer) number of Grover iterations. The earliest time that we get a near-optimal measurement is therefore    r  ≈    π   N    /  4       r      π    N    4     r\approx\pi\sqrt{N}/4   .  Algebraic proof of correctness  To complete the algebraic analysis we need to find out what happens when we repeatedly apply     U  s    U  ω        subscript  U  s    subscript  U  ω     U_{s}U_{\omega}   . A natural way to do this is by eigenvalue analysis of a matrix. Notice that during the entire computation, the state of the algorithm is a linear combination of   s   s   s   and   ω   ω   \omega   . We can write the action of    U  s     subscript  U  s    U_{s}   and    U  ω     subscript  U  ω    U_{\omega}   in the space spanned by    {  |  s   \rang   ,  |  ω   \rang   }     fragments  normal-{  normal-|  s  \rang  normal-,  normal-|  ω  \rang  normal-}    \{|s\rang,|\omega\rang\}   as:        U  s   :    a   |    ω   \rang    +  b   |   s   \rang    ↦    (    |   ω   \rang    |   s   \rang    )    (      -  1     0       2  /   N      1     )    (     a      b     )      .     normal-:   subscript  U  s    maps-to    a        ω  \rang   b    s  \rang           ω  \rang    s  \rang       1   0      2    N    1      a    b        U_{s}:a|\omega\rang+b|s\rang\mapsto(|\omega\rang\,|s\rang)\begin{pmatrix}-1&0%
 \\
 2/\sqrt{N}&1\end{pmatrix}\begin{pmatrix}a\\
 b\end{pmatrix}.           U  ω   :    a   |    ω   \rang    +  b   |   s   \rang    ↦    (    |   ω   \rang    |   s   \rang    )    (      -  1      -   2  /   N         0    1     )    (     a      b     )      .     normal-:   subscript  U  ω    maps-to    a        ω  \rang   b    s  \rang           ω  \rang    s  \rang       1       2    N       0  1      a    b        U_{\omega}:a|\omega\rang+b|s\rang\mapsto(|\omega\rang\,|s\rang)\begin{pmatrix}%
 -1&-2/\sqrt{N}\\
 0&1\end{pmatrix}\begin{pmatrix}a\\
 b\end{pmatrix}.     So in the basis    {  |  ω   \rang   ,  |  s   \rang   }     fragments  normal-{  normal-|  ω  \rang  normal-,  normal-|  s  \rang  normal-}    \{|\omega\rang,|s\rang\}   (which is neither orthogonal nor a basis of the whole space) the action     U  s    U  ω        subscript  U  s    subscript  U  ω     U_{s}U_{\omega}   of applying    U  ω     subscript  U  ω    U_{\omega}   followed by    U  s     subscript  U  s    U_{s}   is given by the matrix         U  s    U  ω    =    (      -  1     0       2  /   N      1     )    (      -  1      -   2  /   N         0    1     )    =   (     1     2  /   N         -   2  /   N        1  -   4  /  N       )    .           subscript  U  s    subscript  U  ω          1   0      2    N    1        1       2    N       0  1            1    2    N          2    N       1    4  N         U_{s}U_{\omega}=\begin{pmatrix}-1&0\\
 2/\sqrt{N}&1\end{pmatrix}\begin{pmatrix}-1&-2/\sqrt{N}\\
 0&1\end{pmatrix}=\begin{pmatrix}1&2/\sqrt{N}\\
 -2/\sqrt{N}&1-4/N\end{pmatrix}.     This matrix happens to have a very convenient Jordan form . If we define    t  =   arcsin   (   1  /   N    )        t      1    N       t=\arcsin(1/\sqrt{N})   , it is        U  s    U  ω    =   M   (      exp   (   2  i  t   )      0      0     exp   (   -   2  i  t    )       )    M   -  1            subscript  U  s    subscript  U  ω      M        2  i  t    0    0        2  i  t        superscript  M    1       U_{s}U_{\omega}=M\begin{pmatrix}\exp(2it)&0\\
 0&\exp(-2it)\end{pmatrix}M^{-1}   where     M  =   (      -  i     i       exp   (   i  t   )       exp   (   -   i  t    )       )    .      M      i   i        i  t          i  t         M=\begin{pmatrix}-i&i\\
 \exp(it)&\exp(-it)\end{pmatrix}.     It follows that r th power of the matrix (corresponding to r iterations) is        (    U  s    U  ω    )   r   =   M   (      exp   (   2  r  i  t   )      0      0     exp   (   -   2  r  i  t    )       )    M   -  1          superscript     subscript  U  s    subscript  U  ω    r     M        2  r  i  t    0    0        2  r  i  t        superscript  M    1       (U_{s}U_{\omega})^{r}=M\begin{pmatrix}\exp(2rit)&0\\
 0&\exp(-2rit)\end{pmatrix}M^{-1}   Using this form we can use trigonometric identities to compute the probability of observing ω after r iterations mentioned in the previous section,        |    (       \lang   ω  |  ω   \rang        \lang   ω  |  s   \rang       )     (    U  s    U  ω    )   r    (     0      1     )    |   2   =    sin  2    (    (    2  r   +  1   )   t   )         superscript         fragments  \lang  ω  normal-|  ω  \rang    fragments  \lang  ω  normal-|  s  \rang      superscript     subscript  U  s    subscript  U  ω    r     0    1      2     superscript   2         2  r   1   t      \left|\begin{pmatrix}\lang\omega|\omega\rang&\lang\omega|s\rang\end{pmatrix}(U%
 _{s}U_{\omega})^{r}\begin{pmatrix}0\\
 1\end{pmatrix}\right|^{2}=\sin^{2}\left((2r+1)t\right)   . Alternatively, one might reasonably imagine that a near-optimal time to distinguish would be when the angles 2rt and -2rt are as far apart as possible, which corresponds to     2  r  t   ≈   π  /  2         2  r  t     π  2     2rt\approx\pi/2   or    r  =    π  /  4   t   =    π  /  4    arcsin   (   1  /   N    )     ≈    π   N    /  4         r      π  4   t            π  4       1    N               π    N    4      r=\pi/4t=\pi/4\arcsin(1/\sqrt{N})\approx\pi\sqrt{N}/4   . Then the system is in state         (    |   ω   \rang    |   s   \rang    )     (    U  s    U  ω    )   r    (     0      1     )    ≈    (    |   ω   \rang    |   s   \rang    )   M   (     i    0      0     -  i      )    M   -  1     (     0      1     )    =    |    w   \rang    1   cos   (  t  )      -   |   s   \rang     sin   (  t  )     cos   (  t  )       .                ω  \rang    s  \rang    superscript     subscript  U  s    subscript  U  ω    r     0    1             ω  \rang    s  \rang   M    i  0    0    i      superscript  M    1      0    1               limit-from    w  \rang    1    t        s  \rang      t     t        (|\omega\rang\,|s\rang)(U_{s}U_{\omega})^{r}\begin{pmatrix}0\\
 1\end{pmatrix}\approx(|\omega\rang\,|s\rang)M\begin{pmatrix}i&0\\
 0&-i\end{pmatrix}M^{-1}\begin{pmatrix}0\\
 1\end{pmatrix}=|w\rang\frac{1}{\cos(t)}-|s\rang\frac{\sin(t)}{\cos(t)}.   A short calculation now shows that the observation yields the correct answer ω with error O(1/N) .  Extension to space with multiple targets  If, instead of 1 matching entry, there are k matching entries, the same algorithm works but the number of iterations must be π(N/k) 1/2 /4 instead of πN 1/2 /4 . There are several ways to handle the case if k is unknown. For example, one could run Grover's algorithm several times, with       π    N   1  /  2    4    ,   π     (   N  /  2   )    1  /  2    4    ,   π     (   N  /  4   )    1  /  2    4    ,  …       π     superscript  N    1  2    4      π     superscript    N  2     1  2    4      π     superscript    N  4     1  2    4    normal-…    \pi\frac{N^{1/2}}{4},\pi\frac{(N/2)^{1/2}}{4},\pi\frac{(N/4)^{1/2}}{4},\ldots     iterations. For any k , one of the iterations will find a matching entry with a sufficiently high probability. The total number of iterations is at most       π    N   1  /  2    4    (   1  +   1   2    +   1  2   +  ⋯   )    =   π    N   1  /  2    4    (   2  +   2    )          π     superscript  N    1  2    4     1    1    2      1  2   normal-⋯      π     superscript  N    1  2    4     2    2       \pi\frac{N^{1/2}}{4}\left(1+\frac{1}{\sqrt{2}}+\frac{1}{2}+\cdots\right)=\pi%
 \frac{N^{1/2}}{4}\left(2+\sqrt{2}\right)     which is still O( N 1/2 ). It can be shown that this can be improved. If the number of marked items is k , where k is unknown, there is an algorithm that finds the solution in     N  /  k         N  k     \sqrt{N/k}   queries. This fact is used in order to solve the collision problem. 2 3  Quantum partial search  A modification of Grover's algorithm called quantum partial search was described by Grover and Radhakrishnan in 2004. 4 In partial search, one is not interested in finding the exact address of the target item, only the first few digits of the address. Equivalently, we can think of "chunking" the search space into blocks, and then asking "in which block is the target item?". In many applications, such a search yields enough information if the target address contains the information wanted. For instance, to use the example given by L.K. Grover, if one has a list of students organized by class rank, we may only be interested in whether a student is in the lower 25%, 25-50%, 50-70% or 75-100% percentile.  To describe partial search, we consider a database separated into   K   K   K   blocks, each of size    b  =   N  /  K       b    N  K     b=N/K   . Obviously, the partial search problem is easier. Consider the approach we would take classically - we pick one block at random, and then perform a normal search through the rest of the blocks (in set theory language, the complement). If we don't find the target, then we know it's in the block we didn't search. The average number of iterations drops from    N  /  2      N  2    N/2   to     (   N  -  b   )   /  2        N  b   2    (N-b)/2   .  Grover's algorithm requires     π  /  4    N         π  4     N     \pi/4\sqrt{N}   iterations. Partial search will be faster by a numerical factor which depends on the number of blocks   K   K   K   . Partial search uses    n  1     subscript  n  1    n_{1}   global iterations and    n  2     subscript  n  2    n_{2}   local iterations. The global Grover operator is designated    G  1     subscript  G  1    G_{1}   and the local Grover operator is designated    G  2     subscript  G  2    G_{2}   .  The global Grover operator acts on the blocks. Essentially, it is given as follows:   Perform    j  1     subscript  j  1    j_{1}   standard Grover iterations on the entire database.  Perform    j  2     subscript  j  2    j_{2}   local Grover iterations. A local Grover iteration is a direct sum of Grover iterations over each block.  Perform one standard Grover iteration   The optimal values of    j  1     subscript  j  1    j_{1}   and    j  2     subscript  j  2    j_{2}   are discussed in the paper by Grover and Radhakrishnan. One might also wonder what happens if one applies successive partial searches at different levels of "resolution". This idea was studied in detail by Korepin and Xu, who called it binary quantum search. They proved that it is not in fact any faster than performing a single partial search.  Optimality  It is known that Grover's algorithm is optimal. That is, any algorithm that accesses the database only by using the operator U ω must apply U ω at least as many times as Grover's algorithm. 5 This result is important in understanding the limits of quantum computation. If the Grover's search problem was solvable with log c N applications of U ω , that would imply that NP is contained in BQP , by transforming problems in NP into Grover-type search problems. The optimality of Grover's algorithm suggests (but does not prove) that NP is not contained in BQP.  The number of iterations for k matching entries, π(N/k) 1/2 /4 , is also optimal. 6  Applicability and Limitations  When applications of Grover's algorithm are considered, it should be emphasized that the database is not represented explicitly. Instead, an oracle is invoked to evaluate an item by its index. Reading a full data-base item by item and converting it into such a representation may take a lot longer than Grover's search. To account for such effects, Grover's algorithm can be viewed as solving an equation or satisfying a constraint. In such applications, the oracle is a way to check the constraint and is not related to the search algorithm. This separation usually prevents algorithmic optimizations, whereas conventional search algorithms often rely on such optimizations and avoid exhaustive search. These and other considerations about using Grover's algorithm are discussed in 7  See also   Amplitude amplification  Shor's algorithm   Notes    References   Grover L.K.: A fast quantum mechanical algorithm for database search , Proceedings, 28th Annual ACM Symposium on the Theory of Computing, (May 1996) p. 212  Grover L.K.: From Schrödinger's equation to quantum search algorithm , American Journal of Physics, 69(7): 769-777, 2001. Pedagogical review of the algorithm and its history.  Nielsen, M.A. and Chuang, I.L. Quantum computation and quantum information . Cambridge University Press, 2000. Chapter 6.  What's a Quantum Phone Book? , Lov Grover, Lucent Technologies  Grover's Algorithm: Quantum Database Search , C. Lavor, L.R.U. Manssur, R. Portugal  [ http://xstructure.inr.ac.ru/x-bin/theme3.py?level=1&index1; ;=359266 Grover's algorithm on arxiv.org]   External links   1 simulation and circuit diagram.  Grover’s Quantum Search Algorithm animated explanation.  2 simulation and circuit diagram with cats.  Wolfram Demonstration Project: Quantum Circuit Implementing Grover's Search Algorithm   "  Category:Quantum algorithms  Category:Search algorithms     Bennett C.H., Bernstein E., Brassard G., Vazirani U., The strengths and weaknesses of quantum computation . SIAM Journal on Computing 26(5): 1510–1523 (1997). Shows the optimality of Grover's algorithm. ↩  ↩  ↩  L.K. Grover and J. Radhakrishnan, Is partial quantum search of a database any easier? . quant-ph/0407122 ↩    ↩     