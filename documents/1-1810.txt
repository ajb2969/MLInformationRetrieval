


Grover's algorithm




Grover's algorithm

Grover's algorithm is a quantum algorithm that finds with high probability the unique input to a black box function that produces a particular output value, using just  evaluations of the function, where 
 
 
 
  is the size of the function's domain.
The analogous problem in classical computation cannot be solved in fewer than 
 
 
 
  evaluations (because, in the worst case, the correct input might be the last one that is tried). At roughly the same time that Grover published his algorithm, Bennett, Bernstein, Brassard, and Vazirani published a proof that no quantum solution to the problem can evaluate the function fewer than  times, so Grover's algorithm is asymptotically optimal.1
Unlike other quantum algorithms, which may provide exponential speedup over their classical counterparts, Grover's algorithm provides only a quadratic speedup. However, even quadratic speedup is considerable when 
 
 
 
  is large. Grover's algorithm could brute force a 128-bit symmetric cryptographic key in roughly 264 iterations, or a 256-bit key in roughly 2128 iterations. As a result, it is sometimes suggested that symmetric key lengths be doubled to protect against future quantum attacks.
Like many quantum algorithms, Grover's algorithm is probabilistic in the sense that it gives the correct answer with a probability of less than 1. Though there is technically no upper bound on the number of repetitions that might be needed before the correct answer is obtained, the expected number of repetitions is a constant factor that does not grow with 
 
 
 
 .
Grover's original paper described the algorithm as a database search algorithm, and this description is still common. The database in this analogy is a table of all of the function's outputs, indexed by the corresponding input.
Applications
Although the purpose of Grover's algorithm is usually described as "searching a database", it may be more accurate to describe it as "inverting a function". Roughly speaking, if we have a function y = f(x) that can be evaluated on a quantum computer, Grover's algorithm allows us to calculate x when given y. Inverting a function is related to the searching of a database because we could come up with a function that produces one particular value of y ("true" for instance) if x matches a desired entry in a database, and another value of y ("false") for other values of x.
Grover's algorithm can also be used for estimating the mean and median of a set of numbers, and for solving the Collision problem. The algorithm can be further optimized if there is more than one matching entry and the number of matches is known beforehand.
Setup
Consider an unsorted database with N entries. The algorithm requires an N-dimensional state space H, which can be supplied by n=log2 N qubits. Consider the problem of determining the index of the database entry which satisfies some search criterion. Let f be the function which maps database entries to 0 or 1, where f(ω)=1 if and only if ω satisfies the search criterion. We are provided with (quantum black box) access to a subroutine in the form of a unitary operator, Uω, which acts as follows (for the ω for which f(ω)=1):






Our goal is to identify the index 
 
 
 
 .
Algorithm steps
 The steps of Grover's algorithm are given as follows. Let 
 
 
 
  denote the uniform superposition over all states


 
 .
Then the operator



is known as the Grover diffusion operator.
Here is the algorithm:

Initialize the system to the state


Perform the following "Grover iteration" r(N) times. The function r(N), which is asymptotically O(N½), is described below.
 
Apply the operator 
 
 
 
 .
Apply the operator 
 
 
 
 .

Perform the measurement Ω. The measurement result will be eigenvalue λω with probability approaching 1 for N≫1. From λω, ω may be obtained.

The first iteration
A preliminary observation, in parallel with our definition


 
 , is that Uω can be expressed in an alternate way:


 
 . To prove this it suffices to check how Uω acts on basis states:


 
 .


 
  for all 
 
 
 
 .
The following computations show what happens in the first iteration:


 
 .


 
 .


 
 .





 
 . After application of the two operators ( 
 
 
 
  and 
 
 
 
  ), the amplitude of the searched-for element has increased from 
 
 
 
  to 
 
 
 
 .
Description of Uω
Grover's algorithm requires a "quantum oracle" operator 
 
 
 
  which can recognize solutions to the search problem and give them a negative sign. In order to keep the search algorithm general, we will leave the inner workings of the oracle as a black box, but will explain how the sign is flipped. The oracle contains a function 
 
 
 
  which returns 
 
 
 
  if 
 
 
 
  is a solution to the search problem and 
 
 
 
  otherwise. The oracle is a unitary operator which operates on two qubits, the index qubit 
 
 
 
  and the oracle qubit 
 
 
 
 :



As usual, 
 
 
 
  denotes addition modulo 2. The operation flips the oracle qubit if 
 
 
 
  and leaves it alone otherwise. In Grover's algorithm we want to flip the sign of the state 
 
 
 
  if it labels a solution. This is achieved by setting the oracle qubit in the state 
 
 
 
 , which is flipped to 
 
 
 
  if 
 
 
 
  is a solution:



We regard 
 
 
 
  as flipped, thus the oracle qubit is not changed, so by convention the oracle qubits are usually not mentioned in the specification of Grover's algorithm. Thus the operation of the oracle 
 
 
 
  is simply written as:



Geometric proof of correctness
 Consider the plane spanned by 
 
 
 
  and 
 
 
 
 ; equivalently, the plane spanned by 
 
 
 
  and the perpendicular ket 
 
 
 
 . We will consider the first iteration, acting on the initial ket 
 
 
 
 . Since 
 
 
 
  is one of the basis vectors in 
 
 
 
  the overlap is



In geometric terms, the angle 
 
 
 
  between 
 
 
 
  and 
 
 
 
  is given by:



The operator 
 
 
 
  is a reflection at the hyperplane orthogonal to 
 
 
 
  for vectors in the plane spanned by 
 
 
 
  and 
 
 
 
 ; i.e. it acts as a reflection across 
 
 
 
 . The operator 
 
 
 
  is a reflection through 
 
 
 
 . Therefore, the state vector remains in the plane spanned by 
 
 
 
  and 
 
 
 
  after each application of the operators 
 
 
 
  and 
 
 
 
 , and it is straightforward to check that the operator 
 
 
 
  of each Grover iteration step rotates the state vector by an angle of 
 
 
 
 .
We need to stop when the state vector passes close to 
 
 
 
 ; after this, subsequent iterations rotate the state vector away from 
 
 
 
 , reducing the probability of obtaining the correct answer. The exact probability of measuring the correct answer is:


 
  where r is the (integer) number of Grover iterations. The earliest time that we get a near-optimal measurement is therefore 
 
 
 
 .
Algebraic proof of correctness
To complete the algebraic analysis we need to find out what happens when we repeatedly apply 
 
 
 
 . A natural way to do this is by eigenvalue analysis of a matrix. Notice that during the entire computation, the state of the algorithm is a linear combination of 
 
 
 
  and 
 
 
 
 . We can write the action of 
 
 
 
  and 
 
 
 
  in the space spanned by 
 
 
 
  as:






So in the basis 
 
 
 
  (which is neither orthogonal nor a basis of the whole space) the action 
 
 
 
  of applying 
 
 
 
  followed by 
 
 
 
  is given by the matrix



This matrix happens to have a very convenient Jordan form. If we define 
 
 
 
 , it is


 
  where 
 
 

It follows that rth power of the matrix (corresponding to r iterations) is


 
  Using this form we can use trigonometric identities to compute the probability of observing ω after r iterations mentioned in the previous section,


 
 . Alternatively, one might reasonably imagine that a near-optimal time to distinguish would be when the angles 2rt and -2rt are as far apart as possible, which corresponds to 
 
 
 
  or 
 
 
 
 . Then the system is in state


 
  A short calculation now shows that the observation yields the correct answer ω with error O(1/N).
Extension to space with multiple targets
If, instead of 1 matching entry, there are k matching entries, the same algorithm works but the number of iterations must be π(N/k)1/2/4 instead of πN1/2/4. There are several ways to handle the case if k is unknown. For example, one could run Grover's algorithm several times, with



iterations. For any k, one of the iterations will find a matching entry with a sufficiently high probability. The total number of iterations is at most



which is still O(N1/2). It can be shown that this can be improved. If the number of marked items is k, where k is unknown, there is an algorithm that finds the solution in 
 
 
 
  queries. This fact is used in order to solve the collision problem. 23
Quantum partial search
A modification of Grover's algorithm called quantum partial search was described by Grover and Radhakrishnan in 2004.4 In partial search, one is not interested in finding the exact address of the target item, only the first few digits of the address. Equivalently, we can think of "chunking" the search space into blocks, and then asking "in which block is the target item?". In many applications, such a search yields enough information if the target address contains the information wanted. For instance, to use the example given by L.K. Grover, if one has a list of students organized by class rank, we may only be interested in whether a student is in the lower 25%, 25-50%, 50-70% or 75-100% percentile.
To describe partial search, we consider a database separated into 
 
 
 
  blocks, each of size 
 
 
 
 
 . Obviously, the partial search problem is easier. Consider the approach we would take classically - we pick one block at random, and then perform a normal search through the rest of the blocks (in set theory language, the complement). If we don't find the target, then we know it's in the block we didn't search. The average number of iterations drops from 
 
 
 
  to 
 
 
 
 .
Grover's algorithm requires 
 
 
 
  iterations. Partial search will be faster by a numerical factor which depends on the number of blocks 
 
 
 
 . Partial search uses 
 
 
 
 
  global iterations and 
 
 
 
  local iterations. The global Grover operator is designated 
 
 
 
  and the local Grover operator is designated 
 
 
 
 .
The global Grover operator acts on the blocks. Essentially, it is given as follows:

Perform 
 
 
 
  standard Grover iterations on the entire database.
Perform 
 
 
 
 
  local Grover iterations. A local Grover iteration is a direct sum of Grover iterations over each block.
Perform one standard Grover iteration

The optimal values of 
 
 
 
  and 
 
 
 
  are discussed in the paper by Grover and Radhakrishnan. One might also wonder what happens if one applies successive partial searches at different levels of "resolution". This idea was studied in detail by Korepin and Xu, who called it binary quantum search. They proved that it is not in fact any faster than performing a single partial search.
Optimality
It is known that Grover's algorithm is optimal. That is, any algorithm that accesses the database only by using the operator Uω must apply Uω at least as many times as Grover's algorithm.5 This result is important in understanding the limits of quantum computation. If the Grover's search problem was solvable with logc N applications of Uω, that would imply that NP is contained in BQP, by transforming problems in NP into Grover-type search problems. The optimality of Grover's algorithm suggests (but does not prove) that NP is not contained in BQP.
The number of iterations for k matching entries, π(N/k)1/2/4, is also optimal.6
Applicability and Limitations
When applications of Grover's algorithm are considered, it should be emphasized that the database is not represented explicitly. Instead, an oracle is invoked to evaluate an item by its index. Reading a full data-base item by item and converting it into such a representation may take a lot longer than Grover's search. To account for such effects, Grover's algorithm can be viewed as solving an equation or satisfying a constraint. In such applications, the oracle is a way to check the constraint and is not related to the search algorithm. This separation usually prevents algorithmic optimizations, whereas conventional search algorithms often rely on such optimizations and avoid exhaustive search. These and other considerations about using Grover's algorithm are discussed in 7
See also

Amplitude amplification
Shor's algorithm

Notes


References

Grover L.K.: A fast quantum mechanical algorithm for database search, Proceedings, 28th Annual ACM Symposium on the Theory of Computing, (May 1996) p. 212
Grover L.K.: From Schrödinger's equation to quantum search algorithm, American Journal of Physics, 69(7): 769-777, 2001. Pedagogical review of the algorithm and its history.
Nielsen, M.A. and Chuang, I.L. Quantum computation and quantum information. Cambridge University Press, 2000. Chapter 6.
What's a Quantum Phone Book?, Lov Grover, Lucent Technologies
Grover's Algorithm: Quantum Database Search, C. Lavor, L.R.U. Manssur, R. Portugal
[http://xstructure.inr.ac.ru/x-bin/theme3.py?level=1&index1;;=359266 Grover's algorithm on arxiv.org]

External links

1 simulation and circuit diagram.
Grover’s Quantum Search Algorithm animated explanation.
2 simulation and circuit diagram with cats.
Wolfram Demonstration Project: Quantum Circuit Implementing Grover's Search Algorithm

"
Category:Quantum algorithms Category:Search algorithms



Bennett C.H., Bernstein E., Brassard G., Vazirani U., The strengths and weaknesses of quantum computation. SIAM Journal on Computing 26(5): 1510–1523 (1997). Shows the optimality of Grover's algorithm.


L.K. Grover and J. Radhakrishnan,Is partial quantum search of a database any easier?. quant-ph/0407122







