   Zero-knowledge proof      Zero-knowledge proof   In cryptography , a zero-knowledge proof or zero-knowledge protocol is a method by which one party (the prover ) can prove to another party (the verifier ) that a given statement is true, without conveying any information apart from the fact that the statement is indeed true.  If proving the statement requires knowledge of some secret information on the part of the prover, the definition implies that the verifier will not be able to prove the statement in turn to anyone else, since the verifier does not possess the secret information. Notice that the statement being proved must include the assertion that the prover has such knowledge (otherwise, the statement would not be proved in zero-knowledge, since at the end of the protocol the verifier would gain the additional information that the prover has knowledge of the required secret information). If the statement consists only of the fact that the prover possesses the secret information, it is a special case known as zero-knowledge proof of knowledge , and it nicely illustrates the essence of the notion of zero-knowledge proofs: proving that one has knowledge of certain information is trivial if one is allowed to simply reveal that information; the challenge is proving that one has such knowledge without revealing the secret information or anything else.  For zero-knowledge proofs of knowledge, the protocol must necessarily require interactive input from the verifier, usually in the form of a challenge or challenges such that the responses from the prover will convince the verifier if and only if the statement is true (i.e., if the prover does have the claimed knowledge). This is clearly the case, since otherwise the verifier could record the execution of the protocol and replay it to someone else: if this were accepted by the new party as proof that the replaying party knows the secret information, then the new party's acceptance is either justified – the replayer does know the secret information – which means that the protocol leaks knowledge and is not zero-knowledge, or it is spurious – i.e. leads to a party accepting someone's proof of knowledge who does not actually possess it.  Some forms of non-interactive zero-knowledge proofs of knowledge exist, 1 2 but the validity of the proof relies on computational assumptions (typically the assumptions of an ideal cryptographic hash function ).  Abstract example  There is a well-known story presenting the fundamental ideas of zero-knowledge proofs, first published by Jean-Jacques Quisquater and others in their paper "How to Explain Zero-Knowledge Protocols to Your Children". 3 It is common practice to label the two parties in a zero-knowledge proof as Peggy (the prover of the statement) and Victor (the verifier of the statement).  In this story, Peggy has uncovered the secret word used to open a magic door in a cave. The cave is shaped like a ring, with the entrance on one side and the magic door blocking the opposite side. Victor wants to know whether Peggy knows the secret word; but Peggy, being a very private person, does not want to reveal the fact of her knowledge to the world in general.  They label the left and right paths from the entrance A and B. First, Victor waits outside the cave as Peggy goes in. Peggy takes either path A or B; Victor is not allowed to see which path she takes. Then, Victor enters the cave and shouts the name of the path he wants her to use to return, either A or B, chosen at random. Providing she really does know the magic word, this is easy: she opens the door, if necessary, and returns along the desired path.  However, suppose she did not know the word. Then, she would only be able to return by the named path if Victor were to give the name of the same path by which she had entered. Since Victor would choose A or B at random, she would have a 50% chance of guessing correctly. If they were to repeat this trick many times, say 20 times in a row, her chance of successfully anticipating all of Victor's requests would become vanishingly small (about one in 1.05 million).  Thus, if Peggy repeatedly appears at the exit Victor names, he can conclude that it is very probable — astronomically probable — that Peggy does in fact know the secret word.  One side note with respect to third party observers: Even if Victor is wearing a hidden camera that records the whole transaction, the only thing the camera will record is in one case Victor shouting "A!" and Peggy appearing at A or in the other case Victor shouting "B!" and Peggy appearing at B. A recording of this type would be trivial for any two people to fake (requiring only that Peggy and Victor agree beforehand on the sequence of A's and B's that Victor will shout). Such a recording will certainly never be convincing to anyone but the original participants. In fact, even a person who was present as an observer at the original experiment would be unconvinced, since Victor and Peggy might have orchestrated the whole "experiment" from start to finish.  Further notice that if Victor chooses his A's and B's by flipping a coin on-camera, this protocol loses its zero-knowledge property; the on-camera coin flip would probably be convincing to any person watching the recording later. However, digital cryptography generally "flips coins" by relying on a pseudo-random number generator , which is akin to a coin with a fixed pattern of heads and tails known only to the coin's owner. If Victor's coin behaved this way, then again it would be possible for Victor and Peggy to have faked the "experiment".  Definition  A zero-knowledge proof must satisfy three properties:   Completeness : if the statement is true, the honest verifier (that is, one following the protocol properly) will be convinced of this fact by an honest prover.  Soundness : if the statement is false, no cheating prover can convince the honest verifier that it is true, except with some small probability.  Zero-knowledge : if the statement is true, no cheating verifier learns anything other than this fact. This is formalized by showing that every cheating verifier has some simulator that, given only the statement to be proved (and no access to the prover), can produce a transcript that "looks like" an interaction between the honest prover and the cheating verifier.   The first two of these are properties of more general interactive proof systems . The third is what makes the proof zero-knowledge.  Zero-knowledge proofs are not proofs in the mathematical sense of the term because there is some small probability, the soundness error , that a cheating prover will be able to convince the verifier of a false statement. In other words, zero-knowledge proofs are probabilistic "proofs" rather than deterministic proofs. However, there are techniques to decrease the soundness error to negligibly small values.  A formal definition of zero-knowledge has to use some computational model, the most common one being that of a Turing machine . Let   P   P   P   ,   V   V   V   , and   S   S   S   be turing machines. An interactive proof system with    (  P  ,  V  )     P  V    (P,V)   for a language   L   L   L   is zero-knowledge if for any probabilistic polynomial time (PPT) verifier    V  ^     normal-^  V    \hat{V}   there exists an expected PPT simulator   S   S   S   such that     ∀  x  ∈  L  ,  z  ∈    {  0  ,  1  }   *   ,   View   V  ^     [  P   (  x  )   ↔   V  ^    (  x  ,  z  )   ]   =  S   (  x  ,  z  )      fragments  for-all  x   L  normal-,  z    superscript   fragments  normal-{  0  normal-,  1  normal-}     normal-,   subscript  View   normal-^  V     fragments  normal-[  P   fragments  normal-(  x  normal-)   normal-↔   normal-^  V    fragments  normal-(  x  normal-,  z  normal-)   normal-]    S   fragments  normal-(  x  normal-,  z  normal-)     \forall x\in L,z\in\{0,1\}^{*},\text{View}_{\hat{V}}[P(x)\leftrightarrow\hat{V%
 }(x,z)]=S(x,z)     The prover   P   P   P   is modeled as having unlimited computation power (in practice, P usually is a probabilistic Turing machine ). Intuitively, the definition states that an interactive proof system    (  P  ,  V  )     P  V    (P,V)   is zero- knowledge if for any verifier    V  ^     normal-^  V    \hat{V}   there exists an efficient simulator   S   S   S   that can reproduce the conversation between   P   P   P   and    V  ^     normal-^  V    \hat{V}   on any given input. The auxiliary string   z   z   z   in the definition plays the role of “prior knowledge”. The definition implies that    V  ^     normal-^  V    \hat{V}   cannot use any prior knowledge string   z   z   z   to mine information out of its conversation with   P   P   P   because we demand that if   S   S   S   is also given this prior knowledge then it can reproduce the conversation between    V  ^     normal-^  V    \hat{V}   and   P   P   P   just as before.  The definition given is that of perfect zero-knowledge. Computational zero-knowledge is obtained by requiring that the views of the verifier    V  ^     normal-^  V    \hat{V}   and the simulator are only computationally indistinguishable , given the auxiliary string.  Practical examples  Discrete Log of a given value  We can extend these ideas to a more realistic cryptography application. Peggy wants to prove to Victor that she knows the discrete log of a given value in a given group . 4 For example, given a value   y   y   y   , a large prime    p   p   p   and a generator   g   g   g   , she wants to prove that she knows a value   x   x   x   such that       g  x    mod  p   =  y       modulo   superscript  g  x   p   y    g^{x}~{}\bmod~{}p=y   , without revealing   x   x   x   . This could be used as a proof of identity, in that Peggy could have such knowledge because she chose a random value   x   x   x   that she didn't reveal to anyone, computed    y  =     g  x    mod  p       y   modulo   superscript  g  x   p     y=g^{x}~{}\bmod~{}p   and distributed the value of   y   y   y   to all potential verifiers, such that at a later time, proving knowledge of   x   x   x   is equivalent to proving identity as Peggy.  The protocol proceeds as follows: in each round, Peggy generates a random number   r   r   r   , computes    C  =     g  r    mod  p       C   modulo   superscript  g  r   p     C=g^{r}~{}\bmod~{}p   and discloses this to Victor. After receiving   C   C   C   , Victor randomly issues one of the following two requests: he either requests that Peggy discloses the value of   r   r   r   , or the value of     (   x  +  r   )   mod   (   p  -  1   )      modulo    x  r     p  1     (x+r)~{}\bmod~{}(p-1)   . With either answer, Peggy is only disclosing a random value, so no information is disclosed by a correct execution of one round of the protocol.  Victor can verify either answer; if he requested   r   r   r   , he can then compute      g  r    mod  p     modulo   superscript  g  r   p    g^{r}~{}\bmod~{}p   and verify that it matches   C   C   C   . If he requested     (   x  +  r   )   mod   (   p  -  1   )      modulo    x  r     p  1     (x+r)~{}\bmod~{}(p-1)   , he can verify that   C   C   C   is consistent with this, by computing      g    (   x  +  r   )   mod   (   p  -  1   )      mod  p     modulo   superscript  g   modulo    x  r     p  1     p    g^{(x+r)~{}\bmod~{}(p-1)}~{}\bmod~{}p   and verifying that it matches     C  ⋅   y    mod  p     modulo   normal-⋅  C  y   p    C\cdot y~{}\bmod~{}p   . If Peggy indeed knows the value of   x   x   x   , she can respond to either one of Victor's possible challenges.  If Peggy knew or could guess which challenge Victor is going to issue, then she could easily cheat and convince Victor that she knows   x   x   x   when she does not: if she knows that Victor is going to request   r   r   r   , then she proceeds normally: she picks   r   r   r   , computes    C  =     g  r    mod  p       C   modulo   superscript  g  r   p     C=g^{r}~{}\bmod~{}p   and discloses   C   C   C   to Victor; she will be able to respond to Victor's challenge. On the other hand, if she knows that Victor will request     (   x  +  r   )   mod   (   p  -  1   )      modulo    x  r     p  1     (x+r)~{}\bmod~{}(p-1)   , then she picks a random value    r  ′     superscript  r  normal-′    r^{\prime}   , computes     C  ′   =     g   r  ′    ⋅     (   g  x   )    -  1      mod  p        superscript  C  normal-′    modulo   normal-⋅   superscript  g   superscript  r  normal-′     superscript   superscript  g  x     1     p     C^{\prime}=g^{r^{\prime}}\cdot{(g^{x})}^{-1}~{}\bmod~{}p   , and disclose    C  ′     superscript  C  normal-′    C^{\prime}   to Victor as the value of   C   C   C   that he is expecting. When Victor challenges her to reveal     (   x  +  r   )   mod   (   p  -  1   )      modulo    x  r     p  1     (x+r)~{}\bmod~{}(p-1)   , she reveals    r  ′     superscript  r  normal-′    r^{\prime}   , for which Victor will verify consistency, since he will in turn compute      g   r  ′     mod  p     modulo   superscript  g   superscript  r  normal-′    p    g^{r^{\prime}}~{}\bmod~{}p   , which matches     C  ′   ⋅  y     normal-⋅   superscript  C  normal-′   y    C^{\prime}\cdot y   , since Peggy multiplied by the inverse of   y   y   y   .  However, if in either one of the above scenarios Victor issues a challenge other than the one she was expecting and for which she manufactured the result, then she will be unable to respond to the challenge under the assumption of infeasibility of solving the discrete log for this group. If she picked   r   r   r   and disclosed    C  =     g  r    mod  p       C   modulo   superscript  g  r   p     C=g^{r}~{}\bmod~{}p   , then she will be unable to produce a valid     (   x  +  r   )   mod   (   p  -  1   )      modulo    x  r     p  1     (x+r)~{}\bmod~{}(p-1)   that would pass Victor's verification, given that she does not know   x   x   x   . And if she picked a value    r  ′     superscript  r  normal-′    r^{\prime}   that poses as     (   x  +  r   )   mod   (   p  -  1   )      modulo    x  r     p  1     (x+r)~{}\bmod~{}(p-1)   , then she would have to respond with the discrete log of the value that she disclosed — a value that she obtained through arithmetic with known values, and not by computing a power with a known exponent.  Thus, a cheating prover has a 0.5 probability of successfully cheating in one round. By executing a large enough number of rounds, the probability of a cheating prover succeeding can be made arbitrarily low.  Hamiltonian cycle for a large graph  In this scenario, Peggy knows a Hamiltonian cycle for a large graph , G . Victor knows G but not the cycle (e.g., Peggy has generated G and revealed it to him.) Finding a Hamiltonian cycle given a large graph is believed to be computationally infeasible, since its corresponding decision version is known to be NP-complete . Peggy will prove that she knows the cycle without simply revealing it (perhaps Victor is interested in buying it but wants verification first, or maybe Peggy is the only one who knows this information and is proving her identity to Victor).  To show that Peggy knows this Hamiltonian cycle, she and Victor play several rounds of a game.   At the beginning of each round, Peggy creates H , a graph which is isomorphic to G (i.e. H is just like G except that all the vertices have different names). Since it is trivial to translate a Hamiltonian cycle between isomorphic graphs with known isomorphism, if Peggy knows a Hamiltonian cycle for G she also must know one for H .  Peggy commits to H . She could do so by using a cryptographic commitment scheme . Alternatively, she could number the vertices of H , then for each edge of H write a small piece of paper containing the two vertices of the edge and then put these pieces of paper upside down on a table. The purpose of this commitment is that Peggy is not able to change H while at the same time Victor has no information about H .  Victor then randomly chooses one of two questions to ask Peggy. He can either ask her to show the isomorphism between H and G (see graph isomorphism problem ), or he can ask her to show a Hamiltonian cycle in H .  If Peggy is asked to show that the two graphs are isomorphic, she first uncovers all of H (e.g. by turning all pieces of papers that she put on the table) and then provides the vertex translations that map G to H . Victor can verify that they are indeed isomorphic.  If Peggy is asked to prove that she knows a Hamiltonian cycle in H , she translates her Hamiltonian cycle in G onto H and only uncovers the edges on the Hamiltonian cycle. This is enough for Victor to check that H does indeed contain a Hamiltonian cycle.    Completeness:   If Peggy does know a Hamiltonian cycle in G, she can easily satisfy Victor's demand for either the graph isomorphism producing H from G (which she had committed to in the first step) or a Hamiltonian cycle in H (which she can construct by applying the isomorphism to the cycle in G ).   Zero-Knowledge:   Peggy's answers do not reveal the original Hamiltonian cycle in G . Each round, Victor will learn only H 's isomorphism to G or a Hamiltonian cycle in H . He would need both answers for a single H to discover the cycle in G , so the information remains unknown as long as Peggy can generate a distinct H every round. If Peggy does not know of a Hamiltonian Cycle in G , but somehow knew in advance what Victor would ask to see each round then she could cheat. For example, if Peggy knew ahead of time that Victor would ask to see the Hamiltonian Cycle in H then she could generate a Hamiltonian cycle for an unrelated graph. Similarly, if Peggy knew in advance that Victor would ask to see the isomorphism then she could simply generate an isomorphic graph H (in which she also does not know a Hamiltonian Cycle). Victor could simulate the protocol by himself (without Peggy) because he knows what he will ask to see. Therefore, Victor gains no information about the Hamiltonian cycle in G from the information revealed in each round.   Soundness:   If Peggy does not know the information, she can guess which question Victor will ask and generate either a graph isomorphic to G or a Hamiltonian cycle for an unrelated graph, but since she does not know a Hamiltonian cycle for G she cannot do both. With this guesswork, her chance of fooling Victor is 2 − n , where n is the number of rounds. For all realistic purposes, it is infeasibly difficult to defeat a zero knowledge proof with a reasonable number of rounds in this way.  Variants of zero-knowledge  Different variants of zero-knowledge can be defined by formalizing the intuitive concept of what is meant by the output of the simulator "looking like" the execution of the real proof protocol in the following ways:   We speak of perfect zero-knowledge if the distributions produced by the simulator and the proof protocol are distributed exactly the same. This is for instance the case in the first example above.    Statistical zero-knowledge 5 means that the distributions are not necessarily exactly the same, but they are statistically close , meaning that their statistical difference is a negligible function .    We speak of computational zero-knowledge if no efficient algorithm can distinguish the two distributions.   Applications  Research in zero-knowledge proofs has been motivated by authentication systems where one party wants to prove its identity to a second party via some secret information (such as a password) but doesn't want the second party to learn anything about this secret. This is called a "zero-knowledge proof of knowledge ". However, a password is typically too small or insufficiently random to be used in many schemes for zero-knowledge proofs of knowledge. A zero-knowledge password proof is a special kind of zero-knowledge proof of knowledge that addresses the limited size of passwords.  One of the most fascinating uses of zero-knowledge proofs within cryptographic protocols is to enforce honest behavior while maintaining privacy. Roughly, the idea is to force a user to prove, using a zero-knowledge proof, that its behavior is correct according to the protocol. Because of soundness, we know that the user must really act honestly in order to be able to provide a valid proof. Because of zero knowledge, we know that the user does not compromise the privacy of its secrets in the process of providing the proof. This application of zero-knowledge proofs was first used in the ground-breaking paper 6 of Oded Goldreich , Silvio Micali , and Avi Wigderson on secure multiparty computation .  History and results  Zero-knowledge proofs were first conceived in 1985 by Shafi Goldwasser , Silvio Micali , and Charles Rackoff in their paper "The Knowledge Complexity of Interactive Proof-Systems". 7 This paper introduced the IP hierarchy of interactive proof systems ( see interactive proof system ) and conceived the concept of knowledge complexity , a measurement of the amount of knowledge about the proof transferred from the prover to the verifier. They also gave the first zero-knowledge proof for a concrete problem, that of deciding quadratic nonresidues mod m (this more or less means that there isn't any number x where    x  2     superscript  x  2    x^{2}   is "equivalent" to some given number). Together with a paper by László Babai and Shlomo Moran , this landmark paper invented interactive proof systems, for which all five authors won the first Gödel Prize in 1993.  In their own words, Goldwasser, Micali, and Rackoff say:   Of particular interest is the case where this additional knowledge is essentially 0 and we show that [it] is possible to interactively prove that a number is quadratic non residue mod m releasing 0 additional knowledge. This is surprising as no efficient algorithm for deciding quadratic residuosity mod m is known when m ’s factorization is not given. Moreover, all known NP proofs for this problem exhibit the prime factorization of m . This indicates that adding interaction to the proving process, may decrease the amount of knowledge that must be communicated in order to prove a theorem.   The quadratic nonresidue problem has both an NP and a co-NP algorithm, and so lies in the intersection of NP and co-NP . This was also true of several other problems for which zero-knowledge proofs were subsequently discovered, such as an unpublished proof system by Oded Goldreich verifying that a two-prime modulus is not a Blum integer . 8  Oded Goldreich , Silvio Micali , and Avi Wigderson took this one step further, showing that, assuming the existence of unbreakable encryption, one can create a zero-knowledge proof system for the NP-complete graph coloring problem with three colors. Since every problem in NP can be efficiently reduced to this problem, this means that, under this assumption, all problems in NP have zero-knowledge proofs. 9 The reason for the assumption is that, as in the above example, their protocols require encryption. A commonly cited sufficient condition for the existence of unbreakable encryption is the existence of one-way functions , but it is conceivable that some physical means might also achieve it.  On top of this, they also showed that the graph nonisomorphism problem , the complement of the graph isomorphism problem , has a zero-knowledge proof. This problem is in co-NP , but is not currently known to be in either NP or any practical class. More generally, Goldreich, Goldwasser et al. would go on to show that, also assuming unbreakable encryption, there are zero-knowledge proofs for all problems in IP = PSPACE , or in other words, anything that can be proved by an interactive proof system can be proved with zero knowledge. 10  Not liking to make unnecessary assumptions, many theorists sought a way to eliminate the necessity of one way functions . One way this was done was with multi-prover interactive proof systems (see interactive proof system ), which have multiple independent provers instead of only one, allowing the verifier to "cross-examine" the provers in isolation to avoid being misled. It can be shown that, without any intractability assumptions, all languages in NP have zero-knowledge proofs in such a system. 11  It turns out that in an Internet-like setting, where multiple protocols may be executed concurrently, building zero-knowledge proofs is more challenging. The line of research investigating concurrent zero-knowledge proofs was initiated by the work of Dwork , Naor , and Sahai . 12 One particular development along these lines has been the development of witness-indistinguishable proof protocols. The property of witness-indistinguishability is related to that of zero-knowledge, yet witness-indistinguishable protocols do not suffer from the same problems of concurrent execution. 13  Another variant of zero-knowledge proofs are non-interactive zero-knowledge proofs . Blum, Feldman, and Micali showed that a common random string shared between the prover and the verifier is enough to achieve computational zero-knowledge without requiring interaction. 14 15  See also   Arrow information paradox  Cryptographic protocol  Feige–Fiat–Shamir identification scheme  Proof of knowledge  Topics in cryptography  Witness-indistinguishable proof  Zero-knowledge password proof  Non-interactive zero-knowledge proof   Notes  External links   Applied Kid Cryptography – A simple explanation of zero-knowledge proofs using Where's Waldo? as an example  A gentle introduction to zero-knowledge proofs with applications to cryptography  How to construct zero-knowledge proof systems for NP  An efficient non-interactive statistical zero-knowledge proof system for quasi-safe prime products  A tutorial by Oded Goldreich on zero knowledge proofs  Salil Vadhan , [ http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.70.4056&rep; ;=rep1&type;=pdf Vadhan's phd thesis on statistical zero knowledge]  Theory of Computing Course, Cornell University 2009, Zero knowledge proofs  Ali Baba's Cave as told by Steve Gibson on TWiT show Security Now Episode 363 Wednesday August 1, 2012   "  Category:Cryptographic protocols  Category:Theory of cryptography  Category:Zero-knowledge protocols     ↩  ↩  ↩  ↩  ↩  ↩   ↩  ↩  ↩  ↩  ↩  ↩       