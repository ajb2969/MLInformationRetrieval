


Tak (function)




Tak (function)

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In computer science, the Tak function is a recursive function, named after Ikuo Takeuchi (竹内郁雄). It is defined as follows:



def tak( x, y, z)
   if y < x
     tak( 
          tak(x-1, y, z),
          tak(y-1, z, x),
          tak(z-1, x, y)
        )
   else
     z
   end
 end
This function is often used as a benchmark for languages with optimization for recursion.12
tak() vs. tarai()
The original definition by Takeuchi was as follows:
def tarai( x, y, z)
   if y < x
     tarai( 
          tarai(x-1, y, z),
          tarai(y-1, z, x),
          tarai(z-1, x, y)
        )
   else
     y          # not z!
   end
 end
tarai is short for tarai mawashi, "to pass around" in Japanese.
John McCarthy named this function tak() after Takeuchi.3
However, in certain later references, the y somehow got turned into the z. This is a small, but significant difference because the original version benefits significantly by lazy evaluation. Though written in exactly the same manner as others, the Haskell code below runs much faster.
tarai :: Int -> Int -> Int -> Int
 tarai x y z
     | x <= y    = y
     | otherwise = tarai(tarai (x-1) y z)
                        (tarai (y-1) z x)
                        (tarai (z-1) x y)
You can easily accelerate this function via memoization yet lazy evaluation still wins.
The best known way to optimize tarai is to use mutually recursive helper function as follows.
def laziest_tarai(x, y, zx, zy, zz)
   unless y < x
     y
   else
     laziest_tarai(tarai(x-1, y, z),
                   tarai(y-1, z, x),
                   tarai(zx, zy, zz)-1, x, y)
   end
 end
 
 def tarai(x, y, z)
   unless y < x
     y
   else
     laziest_tarai(tarai(x-1, y, z),
                   tarai(y-1, z, x),
                   z-1, x, y)
   end
 end
Here is an efficient implementation of tarai() in C:
int tarai(int x, int y, int z)
 {
     while (x > y) {
         int oldx = x, oldy = y;
         x = tarai(x - 1, y, z);
         y = tarai(y - 1, z, oldx);
         if (x <= y) break;
         z = tarai(z - 1, oldx, oldy);
     }
     return y;
 }
Note the additional check for (x 



↩
"Recursive Methods" by Elliotte Rusty Harold↩
↩



