


Batcher odd–even mergesort




Batcher odd–even mergesort

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Batcher's odd–even mergesort is a generic construction devised by Ken Batcher for sorting networks of size O(n (log n)2) and depth O((log n)2), where n is the number of items to be sorted. Although it is not asymptotically optimal, Knuth concluded in 1998, with respect to the AKS network that "Batcher's method is much better, unless n exceeds the total memory capacity of all computers on earth!"1
It is popularized by the second GPU Gems book,2 as an easy way of doing reasonably efficient sorts on graphics-processing hardware.
Example code
The following is an implementation of odd–even mergesort algorithm in Python. The input is a list x of length a power of 2. The output is a list sorted in ascending order.
def oddeven_merge(lo, hi, r):
     step = r * 2
     if step < hi - lo:
         yield from oddeven_merge(lo, hi, step)
         yield from oddeven_merge(lo + r, hi, step)
         yield from [(i, i + r) for i in range(lo + r, hi - r, step)]
     else:
         yield (lo, lo + r)
 
 def oddeven_merge_sort_range(lo, hi):
     """ sort the part of x with indices between lo and hi.
 
     Note: endpoints (lo and hi) are included.
     """
     if (hi - lo) >= 1:
         # if there is more than one element, split the input
         # down the middle and first sort the first and second
         # half, followed by merging them.
         mid = lo + ((hi - lo) // 2)
         yield from oddeven_merge_sort_range(lo, mid)
         yield from oddeven_merge_sort_range(mid + 1, hi)
         yield from oddeven_merge(lo, hi, 1)
 
 def oddeven_merge_sort(length):
     """ "length" is the length of the list to be sorted.
     Returns a list of pairs of indices starting with 0 """
     yield from oddeven_merge_sort_range(0, length - 1)
 
 def compare_and_swap(x, a, b):
     if x[a] > x[b]:
         x[a], x[b] = x[b], x[a]
>>> data = [2, 4, 3, 5, 6, 1, 7, 8]
 >>> pairs_to_compare = list(oddeven_merge_sort(len(data)))
 >>> pairs_to_compare
 [(0, 1), (2, 3), (0, 2), (1, 3), (1, 2), (4, 5), (6, 7), (4, 6), (5, 7), (5, 6), (0, 4), (2, 6), (2, 4), (1, 5), (3, 7), (3, 5), (1, 2), (3, 4), (5, 6)]
 >>> for i in pairs_to_compare: compare_and_swap(data, *i)
 >>> data
 [1, 2, 3, 4, 5, 6, 7, 8]
More concise and non-recursive calculation of partner node is possible. Here is a Scala implementation:3
  def partner(n: Int, l: Int, p: Int): Int = {
     if (p == 1)
       n ^ (1 << (l - 1))
     else {
       val (scale, box) = (1 << (l - p), 1 << p)
       val sn = n / scale - (n / scale / box) * box
 
       if (sn == 0 || sn == box - 1) n // no exchange at this level
       else if (sn % 2 == 0) n - scale else n + scale
     }
   }
See also

Bitonic sorter

References


External links

Odd–even mergesort at fh-flensburg.de
Odd-even mergesort network generator Interactive Batcher's Odd-Even merge-based sorting network generator.

"
Category:Sorting algorithms



D.E. Knuth. The Art of Computer Programming, Volume 3: Sorting and Searching, Third Edition. Addison-Wesley, 1998. ISBN 0-201-89685-0. Section 5.3.4: Networks for Sorting, pp. 219–247.
http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter46.html




