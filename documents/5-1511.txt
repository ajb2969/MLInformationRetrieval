


Golden section search




Golden section search

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



(Figure)
Diagram of a golden section search

The golden section search is a technique for finding the extremum (minimum or maximum) of a strictly unimodal function by successively narrowing the range of values inside which the extremum is known to exist. The technique derives its name from the fact that the algorithm maintains the function values for triples of points whose distances form a golden ratio. The algorithm is the limit of Fibonacci search (also described below) for a large number of function evaluations. Fibonacci search and Golden section search were discovered by Kiefer (1953). (see also Avriel and Wilde (1966)).
Basic idea
The diagram above illustrates a single step in the technique for finding a minimum. The functional values of 
 
 
 
  are on the vertical axis, and the horizontal axis is the x parameter. The value of 
 
 
 
  has already been evaluated at the three points
 
 
 
 , 
 
 
 
 , and 
 
 
 
 . Since 
 
 
 
  is smaller than either 
 
 
 
  or 
 
 
 
 , it is clear that a minimum lies inside the interval from 
 
 
 
  to 
 
 
 
  (since f is unimodal).
The next step in the minimization process is to "probe" the function by evaluating it at a new value of x, namely 
 
 
 
 . It is most efficient to choose 
 
 
 
  somewhere inside the largest interval, i.e. between 
 
 
 
  and 
 
 
 
 . From the diagram, it is clear that if the function yields 
 
 
 
  then a minimum lies between 
 
 
 
  and 
 
 
 
  and the new triplet of points will be 
 
 
 
 , 
 
 
 
 , and 
 
 
 
 . However if the function yields the value 
 
 
 
  then a minimum lies between 
 
 
 
  and 
 
 
 
 , and the new triplet of points will be 
 
 
 
 , 
 
 
 
 , and 
 
 
 
 . Thus, in either case, we can construct a new narrower search interval that is guaranteed to contain the function's minimum.
Probe point selection
From the diagram above, it is seen that the new search interval will be either between 
 
 
 
  and 
 
 
 
  with a length of a+c , or between 
 
 
 
  and 
 
 
 
  with a length of b . The golden section search requires that these intervals be equal. If they are not, a run of "bad luck" could lead to the wider interval being used many times, thus slowing down the rate of convergence. To ensure that b = a+c, the algorithm should choose 
 
 
 
 .
However there still remains the question of where 
 
 
 
  should be placed in relation to 
 
 
 
  and 
 
 
 
 . The golden section search chooses the spacing between these points in such a way that these points have the same proportion of spacing as the subsequent triple 
 
 
 
  or 
 
 
 
 . By maintaining the same proportion of spacing throughout the algorithm, we avoid a situation in which 
 
 
 
  is very close to 
 
 
 
  or 
 
 
 
 , and guarantee that the interval width shrinks by the same constant proportion in each step.
Mathematically, to ensure that the spacing after evaluating 
 
 
 
  is proportional to the spacing prior to that evaluation, if 
 
 
 
  is 
 
 
 
  and our new triplet of points is 
 
 
 
 , 
 
 
 
 , and 
 
 
 
  then we want:



However, if 
 
 
 
  is 
 
 
 
  and our new triplet of points is 
 
 
 
 , 
 
 
 
 , and 
 
 
 
  then we want:



Eliminating c from these two simultaneous equations yields:



or



where φ  is the golden ratio:



The appearance of the golden ratio in the proportional spacing of the evaluation points is how this search algorithm gets its name.
Termination condition
In addition to a routine for reducing the size of the bracketing of the solution, a complete algorithm must have a termination condition. The one provided in the book Numerical Recipes in C is based on testing the gaps among 
 
 
 
 , 
 
 
 
 , 
 
 
 
  and 
 
 
 
 , terminating when within the relative accuracy bounds:



where 
 
 
 
  is a tolerance parameter of the algorithm and 
 
 
 
  is the absolute value of 
 
 
 
 . The check is based on the bracket size relative to its central value, because that relative error in 
 
 
 
  is approximately proportional to the squared absolute error in 
 
 
 
  in typical cases. For that same reason, the Numerical Recipes text recommends that 
 
 
 
  where 
 
 
 
  is the required absolute precision of 
 
 
 
 .
Algorithm
Iterative algorithm

Let [a, b] be interval of current bracket. f(a), f(b) would already have been computed earlier. 
 
 
 
 .
Let c = b + φ (a - b), d = a + φ (b - a). If f(c), f(d) not available, compute them.
If f(c) < f(d) (this is to find min, to find max, just reverse it) then move the data: (b, f(b)) ← (d, f(d)), (d, f(d)) ← (c, f(c)) and update c = b + φ (a - b) and f(c);
otherwise, move the data: (a, f(a)) ← (c, f(c)), (c, f(c)) ← (d, f(d)) and update d = a + φ (b - a) and f(d).
At the end of the iteration, [a, c, d, b] bracket the minimum point.

# python program for golden section search
 gr=(math.sqrt(5)-1)/2
 def gss(f,a,b,tol=1e-5):
     '''golden section search
 to find the minimum of f on [a,b]
 f: a strictly unimodal function on [a,b]
 
 example:
 >>> f=lambda x:(x-2)**2
 >>> x=gss(f,1,5)
 >>> x
 2.000009644875678
 '''
     c=b-gr*(b-a)
     d=a+gr*(b-a)
     while abs(c-d)>tol:       
         fc=f(c);fd=f(d)
         if fc<fd: #fc="fd;fd=f(d)" #fd="fc;fc=f(c)" (b+a)="" 2="" <="" a="c" b="d" c="d" d="a+gr*(b-a)" else:="" return="" source="">
 
 ===Recursive algorithm===
 
 <source lang="java">
 double phi = (1 + Math.sqrt(5)) / 2;
 double resphi = 2 - phi;
 
 // a and c are the current bounds; the minimum is between them.
 // b is a center point
 // f(x) is some mathematical function elsewhere defined
 // a corresponds to x1; b corresponds to x2; c corresponds to x3
 // x corresponds to x4
 // tau is a tolerance parameter; see above
 
 public double goldenSectionSearch(double a, double b, double c, double tau) {
     double x;
     if (c - b > b - a)
       x = b + resphi * (c - b);
     else
       x = b - resphi * (b - a);
     if (Math.abs(c - a) < tau * (Math.abs(b) + Math.abs(x))) 
       return (c + a) / 2; 
     assert(f(x) != f(b));
     if (f(x) < f(b)) {
       if (c - b > b - a) return goldenSectionSearch(b, x, c, tau);
       else return goldenSectionSearch(a, x, b, tau);
     }
     else {
       if (c - b > b - a) return goldenSectionSearch(a, b, x, tau);
       else return goldenSectionSearch(x, b, c, tau);
     }
   }
To realise the advantage of golden section search, the function 
 
 
 
  would be implemented with caching, so that in all invocations of goldenSectionSearch(..) above, except the first, 
 
 
 
  would have already been evaluated previously — the result of the calculation will be re-used, bypassing the (perhaps expensive) explicit evaluation of the function. Together with a slightly smaller number of recursions, this 50% saving in the number of calls to 
 
 
 
  is the main algorithmic advantage over Ternary search.
Fibonacci search
A very similar algorithm can also be used to find the extremum (minimum or maximum) of a sequence of values that has a single local minimum or local maximum. In order to approximate the probe positions of golden section search while probing only integer sequence indices, the variant of the algorithm for this case typically maintains a bracketing of the solution in which the length of the bracketed interval is a Fibonacci number. For this reason, the sequence variant of golden section search is often called Fibonacci search.
Fibonacci search was first devised by Kiefer (1953) as a minimax search for the maximum (minimum) of a unimodal function in an interval.

;;

See also

Fibonacci search technique
Brent's method
Binary search

References







"
Category:Golden ratio Category:Fibonacci numbers Category:Optimization algorithms and methods Category:Articles with example Java code

