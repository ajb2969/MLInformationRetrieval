


Key encapsulation




Key encapsulation

Key encapsulation mechanisms (KEMs) are a class of encryption techniques designed to secure symmetric cryptographic key material for transmission using asymmetric (public-key) algorithms. In practice, public key systems are clumsy to use in transmitting long messages. Instead they are often used to exchange symmetric keys, which are relatively short. The symmetric key is then used to encrypt the longer message.
The traditional approach to sending a symmetric key with public key systems is to first generate a random symmetric key and then encrypt it using the chosen public key algorithm. The recipient then decrypts the public key message to recover the symmetric key. As the symmetric key is generally short, padding is required for full security and proofs of security for padding schemes are often less than complete.1 KEMs simplify the process by generating a random element in the finite group underlying the public key system and deriving the symmetric key by hashing that element, eliminating the need for padding.
Example using RSA encryption
Using the same notation employed in the RSA system article, say Alice has transmitted her public key 
 
 
 
  to Bob, while keeping her private key secret, as usual. Bob then wishes to send symmetric key M to Alice. M might be a 128 or 256-bit AES key, for example. Note that the public key n is typically 1024-bits or even longer, thus much larger than typical symmetric keys. If e is small enough that 
 
 
 
  by using an agreed-upon reversible protocol known as a padding scheme, such as OAEP. He then computes the ciphertext 
 
 
 
  corresponding to:



Alice can recover 
 
 
 
  from 
 
 
 
  by using her private key exponent 
 
 
 
  by the following computation:



Given 
 
 
 
 
 , she recovers the original message M by reversing the padding scheme.
With KEM the process is simplified as follows:2
Instead of generating a random symmetric key M, Bob first generates a random m,

 
 . He derives his symmetric key M by 
 
 
 
 , where KDF is a key derivation function, such as a cryptographic hash. He then computes the ciphertext 
 
 
 
  corresponding to m:



Alice then recovers 
 
 
 
 
  from 
 
 
 
  by using her private key exponent 
 
 
 
  by the same method as above:



Given 
 
 
 
 , she can recover the symmetric key M by $M = KDF(m)$.
The KEM eliminates the complexity of the padding scheme and the proofs needed to show the padding is secure.3 p. 4 Note that while M can be calculated from m in the KEM approach, the reverse is not possible, assuming the key derivation function is one-way. An attacker who somehow recovers M cannot get the plaintext m. With the padding approach, he can. Thus KEM is said to encapsulate the key.
Note that if the same m is used to encapsulate keys for e or more recipients, and the receivers share the same exponent e, but different p, q, and n, then one can recover m via the Chinese remainder theorem. Thus, if key encapsulations for several recipients need to be computed, independent values m should be used.
Similar techniques are available for Diffie-Hellman encryption and other public key methods.4
References
See also

Key Wrap
Optimal Asymmetric Encryption Padding

"
Category:Public-key encryption schemes Category:Key management



An OAEP Variant With a Tight Security Proof – Draft 1.0, Jakob Jonsson, 2002↩
Key Encapsulation: A New Scheme for Public-Key Encryption XML Security Working Group F2F, May 2009↩

PSEC-KEM for ECC↩




