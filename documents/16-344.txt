


PatchMatch




PatchMatch

 The core PatchMatch algorithm quickly finds correspondences between small square regions (or patches) of an image. The algorithm can be used in various applications such as object removal from images, reshuffling or moving contents of images, or retargeting or changing aspect ratios of images.
Algorithm
The goal of the algorithm is to find the patch correspondence by deﬁning a nearest-neighbor ﬁeld (NNF) as a function

 
  of offsets, which is over all possible matches of patch (location of patch centers) in image A, for some distance function of two patches 
 
 
 
 . So, for a given patch coordinate 
 
 
 
  in image 
 
 
 
  and its corresponding nearest neighbor 
 
 
 
  in image 
 
 
 
 , 
 
 
 
  is simply 
 
 
 
 . However, if we search for every point in image 
 
 
 
 , the work will be too hard to complete. So the following algorithm is done in a randomized approach in order to accelerate the calculation speed. The algorithm has three main components. Initially, the nearest-neighbor ﬁeld is ﬁlled with either random offsets or some prior information. Next, an iterative update process is applied to the NNF, in which good patch offsets are propagated to adjacent pixels, followed by random search in the neighborhood of the best offset found so far. Independent of these three components, the algorithm also use a coarse-to-fine approach by building an image pyramid to obtain the better result.
Initialization
When initializing with random offsets, we use independent uniform samples across the full range of image 
 
 
 
 . This algorithm avoids using an initial guess from the previous level of the pyramid because in this way the algorithm can avoid being trapped in local minima.
Iteration
After initialization, the algorithm attempted to perform iterative process of improving the 
 
 
 
 . The iterations examine the offsets in scan order (from left to right, top to bottom), and each undergoes propagation followed by random search.
Propagation
We attempt to improve 
 
 
 
  using the known offsets of 
 
 
 
  and 
 
 
 
 , assuming that the patch offsets are likely to be the same. That is, the algorithm will take new value for 
 
 
 
  to be 
 
 
 
 . So if 
 
 
 
  has a correct mapping and is in a coherent region 
 
 
 
 , then all of 
 
 
 
  below and to the right of 
 
 
 
  will be ﬁlled with the correct mapping. Alternatively, on even iterations, the algorithm search for different direction, fill the new value to be 
 
 
 
 .
Random search
Let 
 
 
 
 , we attempt to improve
 
 
 
  by testing a sequence of candidate offsets at an exponentially decreasing distance from 
 
 




where 
 
 
 
  is a uniform random in 
 
 
 
 , 
 
 
 
  is a large window search radius which will be set to maximum picture size, and 
 
 
 
  is a fixed ratio often assigned as 1/2. This part of the algorithm allows the 
 
 
 
  to jump out of local minimum through random process.
Halting criteria
The often used halting criteria is set the iteration times to be about 4~5. Even with low iteration, the algorithm works well.
Conclusion
This is an efficient algorithm since it only takes a few second on a testing computer with Intel Core i5 CPU and Photoshop CS5.
See also

Nearest neighbor search

References

Connelly Barnes, Eli Shechtman, Adam Finkelstein, Dan B Goldman(2009), PatchMatch: A Randomized Correspondence Algorithm for Structural Image Editing

"
Category:Computer vision


