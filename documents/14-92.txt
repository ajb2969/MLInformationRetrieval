   Lawler's algorithm      Lawler's algorithm   Lawler’s algorithm is a powerful technique for solving a variety of constrained scheduling problems. 1 The algorithm handles any precedence constraints. It schedules a set of simultaneously arriving tasks on one processor with precedence constraints to minimize maximum tardiness or lateness. Precedence constraints occur when certain jobs must be completed before other jobs can be started.  Objective Functions  The objective function is assumed to be in the form    m  i   n   m  a    x   0  ≤  i  ≤  n      g  i    (   F  i   )       m  i  n  m  a   subscript  x      0  i       n      subscript  g  i    subscript  F  i     min\,max_{0\leq i\leq n}\,g_{i}(F_{i})   , where    g  i     subscript  g  i    g_{i}   is any nondecreasing function and    F  i     subscript  F  i    F_{i}   is the flow time. 2 When      g  i    (   F  i   )    =    F  i   -   d  i    =   L  i            subscript  g  i    subscript  F  i       subscript  F  i    subscript  d  i          subscript  L  i      g_{i}(F_{i})=F_{i}-d_{i}=L_{i}   , the objective function corresponds to minimizing the maximum lateness, where    d  i     subscript  d  i    d_{i}   is due time for job   i   i   i   and    L  i     subscript  L  i    L_{i}   lateness of job   i   i   i   . Another expression is      g  i    (   F  i   )    =   m  a  x   (    F  i   -   d  i    ,  0  )           subscript  g  i    subscript  F  i      m  a  x      subscript  F  i    subscript  d  i    0      g_{i}(F_{i})=max{(F_{i}-d_{i},0)}   , which corresponds to minimizing the maximum tardiness.  Algorithm  The algorithm works by planning the job with the least impact as late as possible. Starting at    t  =   ∑   p  j        t     subscript  p  j      t=\sum p_{j}   .     S   S   S    set of already scheduled jobs (at start: S =    ∅     \emptyset    )    J   J   J    set of jobs which successors have been scheduled (at start: all jobs without successors)    t   t   t    time when the next job will be completed (at start     t  =   ∑   p  j        t     subscript  p  j      t=\sum p_{j}    )  while     J  ≠  ∅      J     J\neq\emptyset    :  select     j  ∈  J      j  J    j\in J    such that       f  j    (  t  )    =   m  i   n   k  ∈  J     f  k    (  t  )           subscript  f  j   t     m  i   subscript  n    k  J     subscript  f  k   t     f_{j}(t)=min_{k\in J}f_{k}(t)     schedule    j   j   j    such that it completes at time    t   t   t     add    j   j   j    to    S   S   S    , delete    j   j   j    from    J   J   J    and update    J   J   J    .       t  =   t  -   p  j        t    t   subscript  p  j      t=t-p_{j}     end  while  References  Additional readings   Michael Pinedo. Scheduling: theory, algorithms, and systems. 2008. ISBN 978-0-387-78934-7  Conway, Maxwell, Miller. Theory of Scheduling. 1967. ISBN 0-486-42817-6   "  Category:Production and manufacturing  Category:Operations research  Category:Industrial engineering     Steven Nahmias. Production and Operations Analysis. 2008. ISBN 978-0-07-126370-2 ↩  Joseph Y-T. Leung. Handbook of scheduling: algorithms, models, and performance analysis. 2004. ISBN 978-1-58488-397-5 ↩     