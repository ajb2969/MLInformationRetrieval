   Stuttering equivalence      Stuttering equivalence   In theoretical computer science , stuttering equivalence , 1 a relation written as  (Figure)  The paths   π   π   \pi   and    π  ′     superscript  π  normal-′    \pi^{\prime}   are stuttering equivalent.       π   ∼   s  t     π  ′       subscript  similar-to    s  t    π   superscript  π  normal-′     \pi\sim_{st}\pi^{\prime}   ,  can be seen as a partitioning of path   π   π   \pi   and    π  ′     superscript  π  normal-′    \pi^{\prime}   into blocks, so that states in the    k  th     superscript  k  th    k^{\mathrm{th}}   block of one path are labeled (    L   (   \sdot   )       L  \sdot    L(\sdot)   ) the same as states in the    k  th     superscript  k  th    k^{\mathrm{th}}   block of the other path. Corresponding blocks may have different lengths.  Formally, this can be expressed as two infinite paths    π  =    s  0   ,   s  1   ,  …       π    subscript  s  0    subscript  s  1   normal-…     \pi=s_{0},s_{1},\ldots   and     π  ′   =    r  0   ,   r  1   ,  …        superscript  π  normal-′     subscript  r  0    subscript  r  1   normal-…     \pi^{\prime}=r_{0},r_{1},\ldots   which are stuttering equivalent (    π   ∼   s  t     π  ′       subscript  similar-to    s  t    π   superscript  π  normal-′     \pi\sim_{st}\pi^{\prime}   ) if there are two infinite sequences of integers    0  =   i  0   <   i  1   <   i  2   <  …        0   subscript  i  0         subscript  i  1         subscript  i  2        normal-…     0=i_{0}   and    0  =   j  0   <   j  1   <   j  2   <  …        0   subscript  j  0         subscript  j  1         subscript  j  2        normal-…     0=j_{0}   such that for every block    k  ≥  0      k  0    k\geq 0   holds     L   (   s   i  k    )    =   L   (   s    i  k   +  1    )    =  …  =   L   (   s    i   k  +  1    -  1    )    =   L   (   r   j  k    )    =   L   (   r    j  k   +  1    )    =  …  =   L   (   r    j   k  +  1    -  1    )            L   subscript  s   subscript  i  k       L   subscript  s     subscript  i  k   1          normal-…         L   subscript  s     subscript  i    k  1    1            L   subscript  r   subscript  j  k            L   subscript  r     subscript  j  k   1          normal-…         L   subscript  r     subscript  j    k  1    1        L(s_{i_{k}})=L(s_{i_{k}+1})=\ldots=L(s_{i_{k+1}-1})=L(r_{j_{k}})=L(r_{j_{k}+1}%
 )=\ldots=L(r_{j_{k+1}-1})   .  Stuttering equivalence is not the same as bisimulation , since bisimulation cannot capture the semantics of the 'eventually' (or 'finally') operator found in linear temporal / computation tree logic(branching time logic) ( modal logic ). So-called branching bisimulation has to be used.  References  "  Category:Formal methods  Category:Logic in computer science     ↩     