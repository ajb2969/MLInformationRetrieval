   Delta rule      Delta rule   In machine learning , the delta rule is a gradient descent learning rule for updating the weights of the inputs to artificial neurons in single-layer neural network . 1 It is a special case of the more general backpropagation algorithm. For a neuron    j    j   j\,   with activation function     g   (  x  )       g  x    g(x)\,   , the delta rule for    j    j   j\,   's    i    i   i\,   th weight     w   j  i       subscript  w    j  i     w_{ji}\,   is given by       Δ   w   j  i     =   α   (    t  j   -   y  j    )    g  ′    (   h  j   )     x  i           normal-Δ   subscript  w    j  i       α     subscript  t  j    subscript  y  j     superscript  g  normal-′    subscript  h  j    subscript  x  i      \Delta w_{ji}=\alpha(t_{j}-y_{j})g^{\prime}(h_{j})x_{i}\,   ,  where           α    α   \alpha\,   is a small constant called learning rate          g   (  x  )       g  x    g(x)\,   is the neuron's activation function           t  j      subscript  t  j    t_{j}\,   is the target output           h  j      subscript  h  j    h_{j}\,   is the weighted sum of the neuron's inputs           y  j      subscript  y  j    y_{j}\,   is the actual output           x  i      subscript  x  i    x_{i}\,   is the    i    i   i\,   th input.     It holds that     h  j   =   ∑    x  i     w   j  i            subscript  h  j        subscript  x  i    subscript  w    j  i        h_{j}=\sum x_{i}w_{ji}\,   and     y  j   =   g   (   h  j   )         subscript  y  j     g   subscript  h  j      y_{j}=g(h_{j})\,   .  The delta rule is commonly stated in simplified form for a neuron with a linear activation function as       Δ   w   j  i     =   α   (    t  j   -   y  j    )     x  i           normal-Δ   subscript  w    j  i       α     subscript  t  j    subscript  y  j     subscript  x  i      \Delta w_{ji}=\alpha(t_{j}-y_{j})x_{i}\,     While the delta rule is similar to the perceptron 's update rule, the derivation is different. The perceptron uses the Heaviside step function as the activation function    g   (  h  )       g  h    g(h)   , and that means that     g  ′    (  h  )        superscript  g  normal-′   h    g^{\prime}(h)   does not exist at zero, and is equal to zero elsewhere, which makes the direct application of the delta rule impossible.  Derivation of the delta rule  The delta rule is derived by attempting to minimize the error in the output of the neural network through gradient descent . The error for a neural network with    j    j   j\,   outputs can be measured as      E  =    ∑  j     1  2      (    t  j   -   y  j    )   2          E    subscript   j       1  2    superscript     subscript  t  j    subscript  y  j    2       E=\sum_{j}\frac{1}{2}(t_{j}-y_{j})^{2}\,   .  In this case, we wish to move through "weight space" of the neuron (the space of all possible values of all of the neuron's weights) in proportion to the gradient of the error function with respect to each weight. In order to do that, we calculate the partial derivative of the error with respect to each weight. For the    i    i   i\,   th weight, this derivative can be written as        ∂  E    ∂   w   j  i            E      subscript  w    j  i       \frac{\partial E}{\partial w_{ji}}\,   .  Because we are only concerning ourselves with the    j    j   j\,   th neuron, we can substitute the error formula above while omitting the summation:        ∂  E    ∂   w   j  i      =     ∂   (    1  2     (    t  j   -   y  j    )   2    )     ∂   w   j  i               E      subscript  w    j  i              1  2    superscript     subscript  t  j    subscript  y  j    2        subscript  w    j  i        \frac{\partial E}{\partial w_{ji}}=\frac{\partial\left(\frac{1}{2}\left(t_{j}-%
 y_{j}\right)^{2}\right)}{\partial w_{ji}}\,     Next we use the chain rule to split this into two derivatives:       =     ∂   (    1  2     (    t  j   -   y  j    )   2    )     ∂   y  j        ∂   y  j     ∂   w   j  i            absent            1  2    superscript     subscript  t  j    subscript  y  j    2        subscript  y  j          subscript  y  j       subscript  w    j  i         =\frac{\partial\left(\frac{1}{2}\left(t_{j}-y_{j}\right)^{2}\right)}{\partial y%
 _{j}}\frac{\partial y_{j}}{\partial w_{ji}}\,     To find the left derivative, we simply apply the general power rule :       =   -    (    t  j   -   y  j    )      ∂   y  j     ∂   w   j  i             absent         subscript  t  j    subscript  y  j         subscript  y  j       subscript  w    j  i          =-\left(t_{j}-y_{j}\right)\frac{\partial y_{j}}{\partial w_{ji}}\,     To find the right derivative, we again apply the chain rule, this time differentiating with respect to the total input to    j    j   j\,   ,     h  j      subscript  h  j    h_{j}\,   :       =   -    (    t  j   -   y  j    )     ∂   y  j     ∂   h  j        ∂   h  j     ∂   w   j  i             absent         subscript  t  j    subscript  y  j         subscript  y  j       subscript  h  j          subscript  h  j       subscript  w    j  i          =-\left(t_{j}-y_{j}\right)\frac{\partial y_{j}}{\partial h_{j}}\frac{\partial h%
 _{j}}{\partial w_{ji}}\,     Note that the output of the   j   j   j   th neuron,     y  j      subscript  y  j    y_{j}\,   , is just the neuron's activation function    g    g   g\,   applied to the neuron's input     h  j      subscript  h  j    h_{j}\,   . We can therefore write the derivative of     y  j      subscript  y  j    y_{j}\,   with respect to     h  j      subscript  h  j    h_{j}\,   simply as    g    g   g\,   's first derivative:       =   -    (    t  j   -   y  j    )    g  ′    (   h  j   )      ∂   h  j     ∂   w   j  i             absent         subscript  t  j    subscript  y  j     superscript  g  normal-′    subscript  h  j        subscript  h  j       subscript  w    j  i          =-\left(t_{j}-y_{j}\right)g^{\prime}(h_{j})\frac{\partial h_{j}}{\partial w_{%
 ji}}\,     Next we rewrite     h  j      subscript  h  j    h_{j}\,   in the last term as the sum over all    k    k   k\,   weights of each weight     w   j  k       subscript  w    j  k     w_{jk}\,   times its corresponding input     x  k      subscript  x  k    x_{k}\,   :       =   -    (    t  j   -   y  j    )    g  ′    (   h  j   )      ∂   (    ∑  k     x  k    w   j  k      )     ∂   w   j  i             absent         subscript  t  j    subscript  y  j     superscript  g  normal-′    subscript  h  j         subscript   k      subscript  x  k    subscript  w    j  k          subscript  w    j  i          =-\left(t_{j}-y_{j}\right)g^{\prime}(h_{j})\frac{\partial\left(\sum_{k}x_{k}w_%
 {jk}\right)}{\partial w_{ji}}\,     Because we are only concerned with the    i    i   i\,   th weight, the only term of the summation that is relevant is     x  i     w   j  i          subscript  x  i    subscript  w    j  i      x_{i}w_{ji}\,   . Clearly,        ∂    x  i    w   j  i       ∂   w   j  i      =    x  i               subscript  x  i    subscript  w    j  i         subscript  w    j  i       subscript  x  i     \frac{\partial x_{i}w_{ji}}{\partial w_{ji}}=x_{i}\,   ,  giving us our final equation for the gradient:        ∂  E    ∂   w   j  i      =   -    (    t  j   -   y  j    )    g  ′    (   h  j   )     x  i              E      subscript  w    j  i             subscript  t  j    subscript  y  j     superscript  g  normal-′    subscript  h  j    subscript  x  i       \frac{\partial E}{\partial w_{ji}}=-\left(t_{j}-y_{j}\right)g^{\prime}(h_{j})x%
 _{i}\,     As noted above, gradient descent tells us that our change for each weight should be proportional to the gradient. Choosing a proportionality constant    α    α   \alpha\,   and eliminating the minus sign to enable us to move the weight in the negative direction of the gradient to minimize error, we arrive at our target equation:       Δ   w   j  i     =   α   (    t  j   -   y  j    )    g  ′    (   h  j   )     x  i           normal-Δ   subscript  w    j  i       α     subscript  t  j    subscript  y  j     superscript  g  normal-′    subscript  h  j    subscript  x  i      \Delta w_{ji}=\alpha(t_{j}-y_{j})g^{\prime}(h_{j})x_{i}\,   .  See also   Stochastic gradient descent    Backpropagation   References  de:LMS-Algorithmus "  Category:Artificial neural networks     ↩     