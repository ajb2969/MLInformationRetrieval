


Tacit programming




Tacit programming

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Tacit programming, also called point-free style, is a programming paradigm in which function definitions do not identify the arguments (or "points") on which they operate. Instead the definitions merely compose other functions, among which are combinators that manipulate the arguments. Tacit programming is of theoretical interest, because the strict use of composition results in programs that are well adapted for equational reasoning.1 It is also the natural style of certain programming languages, including APL and its derivatives,2 and concatenative languages such as Forth. Despite this following, the lack of argument naming gives point-free style a reputation of being unnecessarily obscure, hence the epithet "pointless style."3
UNIX scripting uses the paradigm with pipes.
For example, a sequence of operations in an applicative language like the following:
def example(x):
   y = foo(x)
   z = bar(y)
   w = baz(z)
   return w
...is written in point-free style as the composition of a sequence of functions, without parameters:4 def example: baz bar foo
The key idea in tacit programming is to assist in operating at the appropriate level of abstraction. That is, to translate the natural transformation given by currying



into computer functions, where the left represents the uncurried form of a function and the right the curried. C^A denotes the functionals from A to C while, A × B denotes the Cartesian product of A and B.
Examples
Functional programming
A simple example (in Haskell) is a program which takes a sum of a list. A programmer might define a sum recursively using a pointed (cf. value-level programming) method as:
sum (x:xs) = x + sum xs
 sum [] = 0
However by noting this as a fold the programmer could replace this with:
sum xs = foldr (+) 0 xs
And then the argument is not needed, so this can be replaced with
sum = foldr (+) 0
which is point-free.
Another example uses the dot operator:
p x y z = f (g x y) z
We can simply group
f (g x y) z ≡ f ((g x) y) z ≡ (((f . g) x) y) z ≡ (f . g) x y z
so
p = f . g
Finally, to see a complex example imagine a map filter program which takes a list, applies a function to it, and then filters the elements based on a criterion
mf criteria operator list = filter criteria (map operator list)
It can be expressed point-free5 as
mf = (. map) . (.) . filter
APL family
In J, the same sort of point-free code occurs in a function made to compute the average of a list (array) of numbers:
avg=: +/ % #
+/ sums the items of the array by mapping (/) summation (+) to the array. % divides the sum by the number of elements (#) in the array.
Stack-based
In stack-oriented programming languages (and concatenative ones, most of which are stack based), point-free methods are commonly used. For example a procedure to compute the Fibonacci numbers might look like:
/fib
{
   dup dup 1 eq exch 0 eq or not
   {
      dup 1 sub fib
      exch 2 sub fib
      add
   } if
} def
UNIX scripting
In UNIX scripting the functions are computer programs which receive their arguments from standard input and send the results to standard output. For example
sort | uniq -c | sort -rn
is a tacit or point-free composition which returns the counts of its arguments and the arguments, in the order of decreasing counts. The 'sort' and 'uniq' are the functions, the '-c' and '-rn' control the functions, but the arguments are not mentioned. The '|' is the composition operator.
See also

Combinatory logic
Concatenative programming language
Function-level programming
Joy (programming language), modern highly tacit language
Pointless topology

References
External links

[http://portal.acm.org/citation.cfm?id=114065&dl;;=GUIDE&coll;=GUIDE Pure Functions in APL and J] How to use tacit programming in any APL-like language

"
Category:Programming paradigms



Manuel Alcino Cunha (2005) Point-free Program Calculation
W. Neville Holmes, ed. (2006) Computers and People


pipermail



