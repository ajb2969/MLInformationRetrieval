   Semi-Thue system      Semi-Thue system   In theoretical computer science and mathematical logic a string rewriting system ( SRS ), historically called a semi- Thue system , is a rewriting system over strings from a (usually finite ) alphabet . Given a binary relation    R   R   R   between fixed strings over the alphabet, called rewrite rules , denoted by    s  →  t     normal-→  s  t    s\rightarrow t   , an SRS extends the rewriting relation to all strings in which the left- and right-hand side of the rules appear as substrings , that is     u  s  v   →   u  t  v      normal-→    u  s  v     u  t  v     usv\rightarrow utv   , where   s   s   s   ,   t   t   t   ,   u   u   u   , and   v   v   v   are strings.  The notion of a semi-Thue system essentially coincides with the presentation of a monoid . Thus they constitute a natural framework for solving the word problem for monoids and groups.  An SRS can be defined directly as an abstract rewriting system . It can also be seen as a restricted kind of a term rewriting system. As a formalism, string rewriting systems are Turing complete . The semi-Thue name comes from the Norwegian mathematician Axel Thue , who introduced systematic treatment of string rewriting systems in a 1914 paper. 1 Thue introduced this notion hoping to solve the word problem for finitely presented semigroups. It wasn't until 1947 the problem was shown to be undecidable — this result was obtained independently by Emil Post and A. A. Markov Jr. 2 3  Definition  A string rewriting system or semi-Thue system is a tuple     (  Σ  ,  R  )     normal-Σ  R    (\Sigma,R)   where      Σ   normal-Σ   \Sigma   is an alphabet, usually assumed finite. 4 The elements of the set    Σ  *     superscript  normal-Σ     \Sigma^{*}   (* is the Kleene star here) are finite (possibly empty) strings on   Σ   normal-Σ   \Sigma   , sometimes called words in formal languages ; we will simply call them strings here.     R   R   R   is a binary relation on strings from   Σ   normal-Σ   \Sigma   , i.e.,     R  ⊆    Σ  *   ×   Σ  *     .      R     superscript  normal-Σ     superscript  normal-Σ       R\subseteq\Sigma^{*}\times\Sigma^{*}.   Each element     (  u  ,  v  )   ∈  R       u  v   R    (u,v)\in R   is called a (rewriting) rule and is usually written    u  →  v     normal-→  u  v    u\rightarrow v   .   If the relation   R   R   R   is symmetric , then the system is called a Thue system .  The rewriting rules in   R   R   R   can be naturally extended to other strings in    Σ  *     superscript  normal-Σ     \Sigma^{*}   by allowing substrings to be rewritten according to   R   R   R   . More formally, the one-step rewriting relation relation    →  R     subscript  normal-→  R    \rightarrow_{R}   induced by   R   R   R   on    Σ  *     superscript  normal-Σ     \Sigma^{*}   for any strings   s   s   s   , and   t   t   t   in    Σ  *     superscript  normal-Σ     \Sigma^{*}   :      s   →  R   t      subscript  normal-→  R   s  t    s\rightarrow_{R}t   if and only if there exist   x   x   x   ,   y   y   y   ,   u   u   u   ,   v   v   v   in    Σ  *     superscript  normal-Σ     \Sigma^{*}   such that    s  =   x  u  y       s    x  u  y     s=xuy   ,    t  =   x  v  y       t    x  v  y     t=xvy   , and    u  →  v     normal-→  u  v    u\rightarrow v   .  Since    →  R     subscript  normal-→  R    \rightarrow_{R}   is a relation on    Σ  *     superscript  normal-Σ     \Sigma^{*}   , the pair    (   Σ  *   ,   →  R   )      superscript  normal-Σ     subscript  normal-→  R     (\Sigma^{*},\rightarrow_{R})   fits the definition of an abstract rewriting system . Obviously   R   R   R   is a subset of    →  R     subscript  normal-→  R    \rightarrow_{R}   . Some authors use a different notation for the arrow in    →  R     subscript  normal-→  R    \rightarrow_{R}   (e.g.    ⇒  R     subscript  normal-⇒  R    \Rightarrow_{R}   ) in order to distinguish it from   R   R   R   itself (   →   normal-→   \rightarrow   ) because they later want to be able to drop the subscript and still avoid confusion between   R   R   R   and the one-step rewrite induced by   R   R   R   .  Clearly in a semi-Thue system we can form a (finite or infinite) sequence of strings produced by starting with an initial string     s  0   ∈   Σ  *        subscript  s  0    superscript  normal-Σ      s_{0}\in\Sigma^{*}   and repeatedly rewriting it by making one substring-replacement at a time:        s  0      →  R      s  1      →  R      s  2      →  R    …        subscript  normal-→  R    subscript  s  0    subscript  s  1      subscript  normal-→  R      subscript  s  2      subscript  normal-→  R     normal-…     s_{0}\ \rightarrow_{R}\ s_{1}\ \rightarrow_{R}\ s_{2}\ \rightarrow_{R}\ \ldots     A zero-or-more-steps rewriting like this is captured by the reflexive transitive closure of    →  R     subscript  normal-→  R    \rightarrow_{R}   , denoted by     →  *   R     subscript   superscript  normal-→    R    \stackrel{*}{\rightarrow}_{R}   (see abstract rewriting system#Basic notions ). This is called the rewriting relation or reduction relation on    Σ  *     superscript  normal-Σ     \Sigma^{*}   induced by   R   R   R   .  Thue congruence  In general, the set    Σ  *     superscript  normal-Σ     \Sigma^{*}   of strings on an alphabet forms a free monoid together with the binary operation of string concatenation (denoted as   ⋅   normal-⋅   \cdot   and written multiplicatively by dropping the symbol). In a SRS, the reduction relation     →  *   R     subscript   superscript  normal-→    R    \stackrel{*}{\rightarrow}_{R}   is compatible with the monoid operation, meaning that    x    →  *   R   y      subscript   superscript  normal-→    R   x  y    x\stackrel{*}{\rightarrow}_{R}y   implies     u  x  v     →  *   R    u  y  v       subscript   superscript  normal-→    R     u  x  v     u  y  v     uxv\stackrel{*}{\rightarrow}_{R}uyv   for all strings   x   x   x   ,   y   y   y   ,   u   u   u   ,   v   v   v   in    Σ  *     superscript  normal-Σ     \Sigma^{*}   . Since     →  *   R     subscript   superscript  normal-→    R    \stackrel{*}{\rightarrow}_{R}   is by definition a preorder ,    (   Σ  *   ,  ⋅  ,    →  *   R   )      superscript  normal-Σ    normal-⋅   subscript   superscript  normal-→    R     (\Sigma^{*},\cdot,\stackrel{*}{\rightarrow}_{R})   forms a preordered monoid .  Similarly, the reflexive transitive symmetric closure of    →  R     subscript  normal-→  R    \rightarrow_{R}   , denoted     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   (see abstract rewriting system#Basic notions ), is a congruence , meaning it is an equivalence relation (by definition) and it is also compatible with string concatenation. The relation     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   is called the Thue congruence generated by   R   R   R   . In a Thue system, i.e. if   R   R   R   is symmetric, the rewrite relation     →  *   R     subscript   superscript  normal-→    R    \stackrel{*}{\rightarrow}_{R}   coincides with the Thue congruence     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   .  Factor monoid and monoid presentations  Since     ↔  *   R     subscript   superscript  normal-↔    R    \stackrel{*}{\leftrightarrow}_{R}   is a congruence, we can define the factor monoid      ℳ  R   =   Σ  *   /    ↔  *   R      fragments   subscript  ℳ  R     superscript  normal-Σ      subscript   superscript  normal-↔    R     \mathcal{M}_{R}=\Sigma^{*}/\stackrel{*}{\leftrightarrow}_{R}   of the free monoid     Σ  *     superscript  normal-Σ     \Sigma^{*}   by the Thue congruence in the usual manner . If a monoid   ℳ   ℳ   \mathcal{M}   is isomorphic with    ℳ  R     subscript  ℳ  R    \mathcal{M}_{R}   , then the semi-Thue system    (  Σ  ,  R  )     normal-Σ  R    (\Sigma,R)   is called a monoid presentation of   ℳ   ℳ   \mathcal{M}   .  We immediately get some very useful connections with other areas of algebra. For example, the alphabet { a , b } with the rules { ab → ε, ba → ε }, where ε is the empty string , is a presentation of the free group on one generator. If instead the rules are just { ab → ε }, then we obtain a presentation of the bicyclic monoid .  The importance of semi-Thue systems as presentation of monoids is made stronger by the following:  Theorem : Every monoid has a presentation of the form    (  Σ  ,  R  )     normal-Σ  R    (\Sigma,R)   , thus it may be always be presented by a semi-Thue system, possibly over an infinite alphabet. 5  In this context, the set   Σ   normal-Σ   \Sigma   is called the set of generators of   ℳ   ℳ   \mathcal{M}   , and   R   R   R   is called the set of defining relations    ℳ   ℳ   \mathcal{M}   . We can immediately classify monoids based on their presentation.   ℳ   ℳ   \mathcal{M}   is called   finitely generated if   Σ   normal-Σ   \Sigma   is finite.  finitely presented if both   Σ   normal-Σ   \Sigma   and   R   R   R   are finite.   The word problem for semi-Thue systems  The word problem for semi-Thue systems can be stated as follows: Given a semi-Thue system    T  :=   (  Σ  ,  R  )      assign  T   normal-Σ  R     T:=(\Sigma,R)   and two words (strings)     u  ,  v   ∈   Σ  *        u  v    superscript  normal-Σ      u,v\in\Sigma^{*}   , can   u   u   u   be transformed into   v   v   v   by applying rules from   R   R   R   ? This problem is undecidable , i.e. there is no general algorithm for solving this problem. This even holds if we limit the input to finite systems.  Martin Davis offers the lay reader a two-page proof in his article "What is a Computation?" pp. 258–259 with commentary p. 257. Davis casts the proof in this manner: "Invent [a word problem] whose solution would lead to a solution to the halting problem ."  Connections with other notions  A semi-Thue system is also a term-rewriting system—one that has monadic words (functions) ending in the same variable as left- and right-hand side terms, 6 e.g. a term rule      f  2    (    f  1    (  x  )    )    →   g   (  x  )       normal-→     subscript  f  2      subscript  f  1   x      g  x     f_{2}(f_{1}(x))\rightarrow g(x)   is equivalent with the string rule      f  1    f  2    →  g     normal-→     subscript  f  1    subscript  f  2    g    f_{1}f_{2}\rightarrow g   .  A semi-Thue system is also a special type of Post canonical system , but every Post canonical system can also be reduced to an SRS. Both formalism are Turing complete , and thus equivalent to Noam Chomsky 's unrestricted grammars , which are sometimes called semi-Thue grammars . 7 A formal grammar only differs from a semi-Thue system by the separation of the alphabet in terminals and non-terminals, and the fixation of a starting symbol amongst non-terminals. A minority of authors actually define a semi-Thue system as a triple    (  Σ  ,  A  ,  R  )     normal-Σ  A  R    (\Sigma,A,R)   , where    A  ⊆   Σ  *       A   superscript  normal-Σ      A\subseteq\Sigma^{*}   is called the set of axioms . Under this "generative" definition of semi-Thue system, an unrestricted grammar is just a semi-Thue system with a single axiom in which one partitions the alphabet in terminals and non-terminals, and makes the axiom a nonterminal. 8 The simple artifice of partitioning the alphabet in terminals and non-terminals is a powerful one; it allows the definition of the Chomsky hierarchy based on what combination of terminals and non-terminals rules contain. This was a crucial development in the theory of formal languages .  History and importance  Semi-Thue systems were developed as part of a program to add additional constructs to logic , so as to create systems such as propositional logic , that would allow general mathematical theorems to be expressed in a formal language , and then proven and verified in an automatic, mechanical fashion. The hope was that the act of theorem proving could then be reduced to a set of defined manipulations on a set of strings. It was subsequently realized that semi-Thue systems are isomorphic to unrestricted grammars , which in turn are known to be isomorphic to Turing machines . This method of research succeeded and now computers can be used to verify the proofs of mathematic and logical theorems.  At the suggestion of Alonzo Church , Emil Post in a paper published in 1947, first proved "a certain Problem of Thue" to be unsolvable, what Martin Davis states as "...the first unsolvability proof for a problem from classical mathematics -- in this case the word problem for semigroups." (Undecidable p. 292)  Davis [ibid] asserts that the proof was offered independently by A. A. Markov (C. R. (Doklady) Acad. Sci. U.S.S.R. (n.s.) 55(1947), pp. 583–586.  See also   L-system  MU puzzle   Notes  References  Monographs   Ronald V. Book and Friedrich Otto, String-rewriting Systems , Springer, 1993, ISBN 0-387-97965-4.  Matthias Jantzen, Confluent string rewriting , Birkhäuser, 1988, ISBN 0-387-13715-7.   Textbooks   Martin Davis , Ron Sigal, Elaine J. Weyuker, Computability, complexity, and languages: fundamentals of theoretical computer science , 2nd ed., Academic Press, 1994, ISBN 0-12-206382-1, chapter 7  Elaine Rich, Automata, computability and complexity: theory and applications , Prentice Hall, 2007, ISBN 0-13-228806-0, chapter 23.5.   Surveys   Samson Abramsky, Dov M. Gabbay, Thomas S. E. Maibaum (ed.), Handbook of Logic in Computer Science: Semantic modelling , Oxford University Press, 1995, ISBN 0-19-853780-8.  Grzegorz Rozenberg, Arto Salomaa (ed.), Handbook of Formal Languages: Word, language, grammar , Springer, 1997, ISBN 3-540-60420-0.   Landmark papers   Emil Post (1947), Recursive Unsolvability of a Problem of Thue , The Journal of Symbolic Logic, vol. 12 (1947) pp. 1–11. Reprinted in Martin Davis ed. (1965), The Undecidable: Basic Papers on Undecidable Propositions, Unsolvable Problems and Computable Functions , Raven Press, New York. pp. 293ff   ja:文字列書き換え系 "  Category:Formal languages  Category:Theory of computation  Category:Rewriting systems     Book and Otto, p. 36 ↩  Abramsky et al. p. 416 ↩  Salomaa et al., p.444 ↩  In Book and Otto a semi-Thue system is defined over a finite alphabet through most of the book, except chapter 7 when monoid presentation are introduced, when this assumption is quietly dropped. ↩  Book and Otto, Theorem 7.1.7, p. 149 ↩  Nachum Dershowitz and Jean-Pierre Jouannaud . Rewrite Systems (1990) p. 6 ↩  D.I.A. Cohen, Introduction to Computer Theory, 2nd ed., Wiley-India, 2007, ISBN 81-265-1334-9, p.572 ↩  Dan A. Simovici, Richard L. Tenney, Theory of formal languages with applications , World Scientific, 1999 ISBN 981-02-3729-4, chapter 4 ↩     