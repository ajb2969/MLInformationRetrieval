   Capacitated minimum spanning tree      Capacitated minimum spanning tree   Capacitated minimum spanning tree is a minimal cost spanning tree of a graph that has a designated root node   r   r   r   and satisfies the capacity constraint   c   c   c   . The capacity constraint ensures that all subtrees (maximal subgraphs connected to the root by a single edge) incident on the root node   r   r   r   have no more than   c   c   c   nodes. If the tree nodes have weights, then the capacity constraint may be interpreted as follows: the sum of weights in any subtree should be no greater than   c   c   c   . The edges connecting the subgraphs to the root node are called gates . Finding the optimal solution is NP-hard. 1  Algorithms  Suppose we have a graph    G  =   (  V  ,  E  )       G   V  E     G=(V,E)   ,    n  =   |  G  |       n    G     n=|G|   with a root    r  ∈  G      r  G    r\in G   . Let    a  i     subscript  a  i    a_{i}   be all other nodes in   G   G   G   . Let    c   i  j      subscript  c    i  j     c_{ij}   be the edge cost between vertices     a  i     subscript  a  i    a_{i}   and    a  j     subscript  a  j    a_{j}   which form a cost matrix    C  =   c   i  j        C   subscript  c    i  j      C={c_{ij}}   .  Esau-Williams heuristic 2  Esau-Williams heuristic finds suboptimal CMST that are very close to the exact solutions, but on average EW produces better results than many other heuristics.  Initially, all nodes are connected to the root    r   r   r   (star graph) and the network's cost is      ∑   i  =  0   n     c   r  i        superscript   subscript     i  0    n    subscript  c    r  i      \displaystyle\sum_{i=0}^{n}c_{ri}   ; each of these edges is a gate. At each iteration, we seek the closest neighbor    a  j     subscript  a  j    a_{j}   for every node in    G  -  r      G  r    G-{r}   and evaluate the tradeoff function     t   (   a  i   )    =    g  i   -   c   i  j           t   subscript  a  i       subscript  g  i    subscript  c    i  j       t(a_{i})=g_{i}-c_{ij}   . We look for the greatest    t   (   a  i   )       t   subscript  a  i     t(a_{i})   among the positive tradeoffs and, if the resulting subtree does not violate the capacity constraints, remove the gate    g  i     subscript  g  i    g_{i}   connecting the   i   i   i   -th subtree to    a  j     subscript  a  j    a_{j}   by an edge    c   i  j      subscript  c    i  j     c_{ij}   . We repeat the iterations until we can not make any further improvements to the tree.  Esau-Williams heuristics for computing a suboptimal CMST:  function CMST( c , C , r ):   T = {     c   1  r      subscript  c    1  r     c_{1r}    ,     c   2  r      subscript  c    2  r     c_{2r}    , ...,     c   n  r      subscript  c    n  r     c_{nr}    }   while have changes:   for  each node     a  i     subscript  a  i    a_{i}         a  i     subscript  a  i    a_{i}   = closest node in a different subtree       t   (   a  i   )       t   subscript  a  i     t(a_{i})    =     g  i     subscript  g  i    g_{i}    -     c   i  j      subscript  c    i  j     c_{ij}      t_max = max (     t   (   a  i   )       t   subscript  a  i     t(a_{i})    )   k = i such that     t   (   a  i   )       t   subscript  a  i     t(a_{i})    = t_max   if ( cost (i) + cost (j) g_{k}   T = T union     c   k  j      subscript  c    k  j     c_{kj}      return  T  It is easy to see that EW finds a solution in polynomial time.  Sharma's heuristic  Sharma's heuristic. 3  Applications  CMST problem is important in network design: when many terminal computers have to be connected to the central hub, the star configuration is usually not the minimum cost design. Finding a CMST that organizes the terminals into subnetworks can lower the cost of implementing a network.  Limitations  But CMST is still not provide the minimum cost for long situated nodes.overcome this drawback ESAU Williams has solved this problem.  References    "  Category:Spanning tree     ↩  ↩  ↩     