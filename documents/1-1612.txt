


Communication complexity




Communication complexity

The notion of communication complexity was introduced by Yao in 1979,1 who investigated the following problem involving two separated parties (Alice and Bob). Alice receives an n-bit string x and Bob another n-bit string y, and the goal is for one of them (say Bob) to compute a certain function f(x,y) with the least amount of communication between them. Note that here we are not concerned about the number of computational steps, or the size of the computer memory used. Communication complexity tries to quantify the amount of communication required for such distributed computations.
Of course they can always succeed by having Alice send her whole n-bit string to Bob, who then computes the function, but the idea here is to find clever ways of calculating f with fewer than n bits of communication.
This abstract problem is relevant in many contexts: in VLSI circuit design, for example, one wants to minimize energy used by decreasing the amount of electric signals required between the different components during a distributed computation. The problem is also relevant in the study of data structures, and in the optimization of computer networks. For a survey of the field, see the book by Kushilevitz and Nisan.
Formal definition
Let 
 
 
 
 : X 
 
 
 
  Y 
 
 
 
  Z where we assume in the typical case that 
 
 
 
 
  and 
 
 
 
 . Alice draws an n-bit string 
 
 

 
  X while Bob draws an n-bit string 
 
 

 
 
  Y. By communicating to each other one bit at a time (adopting some communication protocol), Alice and Bob want to compute the value of 
 
 
 
  such that at least one party knows the value at the end of the communication. At this point the answer can be communicated back so that at the cost of one extra bit, both parties will know the answer. The worst case communication complexity of this communication protocol, denoted as 
 
 
 
 , is then defined to be


 
  minimum number of bits exchanged between Alice and Bob in the worst case
Using the above definition, it is useful to think of the function 
 
 
 
  as a matrix

 
 
  (called the input matrix) where each row of the matrix corresponds to 
 
 

 
  X and each column corresponds to 
 
 

 
  Y. An entry in the input matrix is 
 
 
 
 
 . Initially both Alice and Bob have a copy of the entire matrix A (assuming the function 
 
 
 
  is known to both). Then, the problem of computing the function value can be rephrased as "zeroing-in" on the corresponding matrix entry. This problem can be solved if either Alice or Bob knows both 
 
 
 
  and 
 
 
 
 . At the start of communication, the number of choices for the value of the function on the inputs is the size of matrix, i.e. 
 
 
 
 . Then, as and when each party communicates a bit to the other, the number of choices for the answer reduces as this eliminates a set of rows/columns resulting in a submatrix of A.
More formally, a set R 
 
 
 
 
  X 
 
 
 
  Y is called a (combinatorial) rectangle if whenever 
 
 

 
  R and 
 
 

 
 
  R then 
 
 

 
  R. Equivalently, R can also be viewed as a submatrix of the input matrix A such that R = M 
 
 
 
  N where M 
 
 
 
  X and N 
 
 
 
 
  Y. Consider the case when 
 
 
 
  bits are already exchanged between the parties. Now, for a particular 
 
 


 
 , let us define a matrix


 
  the k-bits exchanged on input 
 
 
 
  is 
 
 

Then, 
 
 

 
  X 
 
 
 
 
  Y, and 
 
 
 
  is a rectangle and a submatrix of A.
Example: EQ
We consider the case where Alice and Bob try to determine if they both have the same string. That is, we are trying to determine if 
 
 
 
  is equal to 
 
 
 
 . It is easy to prove that the equality problem (EQ) will always require you to communicate 
 
 
 
  bits in the worst case if you want to be absolutely sure 
 
 
 
 
  and 
 
 
 
  are equal. Consider the simple case of 
 
 
 
  and 
 
 
 
  being 3 bits. The equality function in this case can be represented by the matrix below. The rows representing all the possibilities of 
 
 
 
 , the columns those of 
 
 
 
 
 .





EQ

000

001

010

011

100

101

110

111



000

1

0

0

0

0

0

0

0



001

0

1

0

0

0

0

0

0



010

0

0

1

0

0

0

0

0



011

0

0

0

1

0

0

0

0



100

0

0

0

0

1

0

0

0



101

0

0

0

0

0

1

0

0



110

0

0

0

0

0

0

1

0



111

0

0

0

0

0

0

0

1






As you can see, the function only evaluates to 1 when 
 
 
 
  equals 
 
 
 
  (i.e., on the diagonal). It is also fairly easy to see how communicating a single bit divides your possibilities in half. If you know that the first bit of 
 
 
 
  is 1, you only need to consider half of the columns (where 
 
 
 
  can equal 100, 101, 110, or 111).
Theorem
 
 
 
 .
 Proof. Assume that 
 
 
 
 . This means that there exists an 
 
 
 
  and an 
 
 
 
  having the same history, 
 
 
 
 . Since this history defines a rectangle, 
 
 
 
 
  must also be 1. By definition 
 
 
 
  and we know that equality is only true for 
 
 
 
  when 
 
 
 
 . Thus, we have a contradiction.
Intuitively, for 
 
 
 
  less than 
 
 
 
 
 , we need to be able to define a rectangle in the EQ matrix greater in size than a single cell. All of the cells in this rectangle must contain 1 for us to be able to generalize that this rectangle equals 1. It is not possible to form such a rectangle in the equality matrix.
Randomized communication complexity
In the above definition, we are concerned with the number of bits that must be deterministically transmitted between two parties. If both the parties are given access to a random number generator, can they determine the value of 
 
 
 
  with much less information exchanged? Yao, in his seminal paper2 answers this question by defining randomized communication complexity.
A randomized protocol 
 
 
 
  for a function 
 
 
 
  has two-sided error.






A randomized protocol is a deterministic protocol that uses an extra random string in addition to its normal input. There are two models for this: a public string is a random string that is known by both parties beforehand, while a private string is generated by one party and must be communicated to the other party. A theorem presented below shows that any public string protocol can be simulated by a private string protocol that uses O(log n) additional bits compared to the original.
Note that in the probability inequalities above, the outcome of the protocol is understood to depend only on the random string; both strings x and y remain fixed. In other words, if R(x,y) yields g(x,y,r) when using random string r, then g(x,y,r) = f(x,y) for at least half of all choices for the string r.
The randomized complexity is simply defined as the number of bits exchanged in such a protocol.
Note that it is also possible to define a randomized protocol with one-sided error, and the complexity is defined similarly.
Example: EQ
Returning to the previous example of EQ, if certainty is not required, Alice and Bob can check for equality using only O(log n) messages. Consider the following protocol: Assume that Alice and Bob both have access to the same random string 
 
 
 
 . Alice computes 
 
 
 
  and sends this bit (call it b) to Bob. (The 
 
 
 
  is the dot product in GF(2).) Then Bob compares b to 
 
 
 
 . If they are the same, then Bob accepts, saying x equals y. Otherwise, he rejects.
Clearly, if 
 
 
 
 
 , then 
 
 
 
 , so 
 
 
 
 . If x does not equal y, it is still possible that 
 
 
 
 , which would give Bob the wrong answer. How does this happen?
If x and y are not equal, they must differ in some locations:









Where 
 
 
 
  and 
 
 
 
  agree, 
 
 
 
  so those terms affect the dot products equally. We can safely ignore those terms and look only at where 
 
 
 
 
  and 
 
 
 
  differ. Furthermore, we can swap the bits 
 
 
 
  and 
 
 
 
  without changing whether or not the dot products are equal. This means we can swap bits so that 
 
 
 
  contains only zeros and 
 
 
 
 
  contains only ones:









Note that 
 
 
 
  and 
 
 
 
 
 . Now, the question becomes: for some random string 
 
 
 
 , what is the probability that 
 
 
 
 ? Since each 
 
 
 
  is equally likely to be 
 
 
 
  or 
 
 
 
 
 , this probability is just 
 
 
 
 . Thus, when 
 
 
 
  does not equal 
 
 
 
 , 
 
 
 
 . The algorithm can be repeated many times to increase its accuracy. This fits the requirements for a randomized communication algorithm.
This shows that if Alice and Bob share a random string of length n, they can send one bit to each other to compute 
 
 
 
 
 . In the next section, it is shown that Alice and Bob can exchange only O(log n) bits that are as good as sharing a random string of length n. Once that is shown, it follows that EQ can be computed in O(log n) messages.
Public coins versus private coins
It is easier to create random protocols when both parties have access to the same random string (shared string protocol). It is still possible to use these protocols even when the two parties don't share a random string (private string protocol) with a small communication cost. Any shared string random protocol using an 
 
 
 
 -bit string can be simulated by a private string protocol that uses an extra O(log n) bits.
Intuitively, we can find some set of strings that has enough randomness in it to run the random protocol with only a small increase in error. This set can be shared beforehand, and instead of drawing a random string, Alice and Bob need only agree on which string to choose from the shared set. This set is small enough that the choice can be communicated efficiently. A formal proof follows.
Consider some random protocol P with a maximum error rate of 0.1. Let 
 
 
 
  be 
 
 
 
  strings of length n, numbered 
 
 
 
 . Given such an 
 
 
 
 
 , define a new protocol 
 
 
 
  which randomly picks some 
 
 
 
  and then runs P using 
 
 
 
  as the shared random string. It takes O(log 100n) = O(log n) bits to communicate the choice of 
 
 
 
 .
Let us define 
 
 
 
 
  and 
 
 
 
  to be the probabilities that 
 
 
 
  and 
 
 
 
  compute the correct value for the input 
 
 
 
 .
For a fixed 
 
 
 
 
 , we can use Hoeffding's inequality to get the following equation:



Thus when we don't have 
 
 
 
  fixed:



The last equality above holds because there are 
 
 
 
  different pairs 
 
 
 
 
 . Since the probability does not equal 1, there is some 
 
 
 
  so that for all 
 
 
 
 :



Since 
 
 
 
  has at most 0.1 error probability, 
 
 
 
 
  can have at most 0.2 error probability.
Quantum communication complexity
Quantum communication complexity tries to quantify the communication reduction possible by using quantum effects during a distributed computation.
At least three quantum generalizations of communication complexity have been proposed; for a survey see the suggested text by G. Brassard.
The first one is the qubit-communication model, where the parties can use quantum communication instead of classical communication, for example by exchanging photons through an optical fiber.
In a second model the communication is still performed with classical bits, but the parties are allowed to manipulate an unlimited supply of quantum entangled states as part of their protocols. By doing measurements on their entangled states, the parties can save on classical communication during a distributed computation.
The third model involves access to previously shared entanglement in addition to qubit communication, and is the least explored of the three quantum models.
Nondeterministic communication complexity
In nondeterministic communication complexity, Alice and Bob have access to an oracle. After receiving the oracle's word, the parties communicate to deduce f(x,y). The nondeterministic communication complexity is then the maximum over all pairs (x,y) over the sum of number of bits exchanged and the coding length of the oracle word.
Viewed differently, this amounts to covering all 1-entries of the 0/1-matrix by combinatorial 1-rectangles (i.e., non-contiguous, non-convex submatrices, whose entries are all one (see Kushilevitz and Nisan or Dietzfelbinger et al.)). The nondeterministic communication complexity is the binary logarithm of the rectangle covering number of the matrix: the minimum number of combinatorial 1-rectangles required to cover all 1-entries of the matrix, without covering any 0-entries.
Nondeterministic communication complexity occurs as a means to obtaining lower bounds for deterministic communication complexity (see Dietzfelbinger et al.), but also in the theory of nonnegative matrices, where it gives a lower bound on the nonnegative rank of a nonnegative matrix.3
Open problems
Considering a 0/1 input matrix 
 
 
 
 , the minimum number of bits exchanged to compute 
 
 
 
  deterministically in the worst case, 
 
 
 
 , is known to be bounded from below by the logarithm of the rank of the matrix 
 
 
 
 . The log rank conjecture proposes that the communication complexity, 
 
 
 
 
 , of 
 
 
 
  is bounded from above by a constant power of the logarithm of the rank of 
 
 
 
 . Since D(f) is bounded from above and below by polynomials of log rank
 
 
 
 , we can say D(f) is polynomially related to log rank
 
 
 
 . Since the rank of a matrix is polynomial time computable in the size of the matrix, such an upper bound would allow the matrix's communication complexity to be approximated in polynomial time. Note, however, that the size of the matrix itself is exponential in the size of the input.
For a randomized protocol, the number of bits exchanged in the worst case, R(f), is conjectured to be polynomially related to the following formula:



Such log rank conjectures are valuable because they reduce the question of a matrix's communication complexity to a question of linearly independent rows (columns) of the matrix. This reveals that the essence of the communication complexity problem, for example in the EQ case above, is figuring out where in the matrix the inputs are, in order to find out if they're equivalent.
Applications
Lower bounds in communication complexity can be used to prove lower bounds in decision tree complexity, VLSI circuits, data structures, streaming algorithms, space–time tradeoffs for Turing machines and more.
References

Kushilevitz, E. and N. Nisan. Communication complexity. Cambridge University Press, 1997.
Brassard, G. Quantum communication complexity: a survey. http://arxiv.org/abs/quant-ph/0101005
Dietzfelbinger, M., J. Hromkovic, J., and G. Schnitger, "A comparison of two lower-bound methods for communication complexity", Theoret. Comput. Sci. 168, 1996. 39-51.
Raz, Ran. "Circuit and Communication Complexity." In Computational Complexity Theory. Steven Rudich and Avi Wigderson, eds. American Mathematical Society Institute for Advanced Study, 2004. 129-137.
A. C. Yao, "Some Complexity Questions Related to Distributed Computing", Proc. of 11th STOC, pp. 209–213, 1979. 14
I. Newman, Private vs. Common Random Bits in Communication Complexity, Information Processing Letters 39, 1991, pp. 67–71.

Notes
"
Category:Quantum information science Category:Communication Category:Computational complexity theory Category:Quantum complexity theory










