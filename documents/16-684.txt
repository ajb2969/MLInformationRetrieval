


Uzawa iteration




Uzawa iteration

In numerical mathematics, the Uzawa iteration is an algorithm for solving saddle point problems. It is named after Hirofumi Uzawa and was originally introduced in the context of concave programming.1
Basic idea
We consider a saddle point problem of the form



where 
 
 
 
  is a symmetric positive-definite matrix. Multiplying the first row by 
 
 
 
  and subtracting from the second row yields the upper-triangular system



where 
 
 
 
  denotes the Schur complement. Since 
 
 
 
  is symmetric positive-definite, we can apply standard iterative methods like the gradient descent method or the conjugate gradient method to



in order to compute 
 
 
 
 . The vector 
 
 
 
  can be reconstructed by solving



It is possible to update 
 
 
 
  alongside 
 
 
 
  during the iteration for the Schur complement system and thus obtain an efficient algorithm.
Implementation
We start the conjugate gradient iteration by computing the residual



of the Schur complement system, where



denotes the upper half of the solution vector matching the initial guess 
 
 
 
  for its lower half. We complete the initialization by choosing the first search direction



In each step, we compute



and keep the intermediate result



for later. The scaling factor is given by



and leads to the updates



Using the intermediate result 
 
 
 
  saved earlier, we can also update the upper part of the solution vector



Now we only have to construct the new search direction by the Gramâ€“Schmidt process, i.e.,



The iteration terminates if the residual 
 
 
 
  has become sufficiently small or if the norm of 
 
 
 
  is significantly smaller than 
 
 
 
  indicating that the Krylov subspace has been almost exhausted.
Modifications and extensions
If solving the linear system 
 
 
 
  exactly is not feasible, inexact solvers can be applied.234
If the Schur complement system is ill-conditioned, preconditioners can be employed to improve the speed of convergence of the underlying gradient method.56
Inequality constraints can be incorporated, e.g., in order to handle obstacle problems.7
References
Further reading



"
Category:Numerical analysis














