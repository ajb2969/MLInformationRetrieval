


OPTICS algorithm




OPTICS algorithm

Ordering points to identify the clustering structure (OPTICS) is an algorithm for finding density-based clusters in spatial data. It was presented by Mihael Ankerst, Markus M. Breunig, Hans-Peter Kriegel and Jörg Sander.1 Its basic idea is similar to DBSCAN,2 but it addresses one of DBSCAN's major weaknesses: the problem of detecting meaningful clusters in data of varying density. In order to do so, the points of the database are (linearly) ordered such that points which are spatially closest become neighbors in the ordering. Additionally, a special distance is stored for each point that represents the density that needs to be accepted for a cluster in order to have both points belong to the same cluster. This is represented as a dendrogram.
Basic idea
Like DBSCAN, OPTICS requires two parameters
 
 
 
 , which describes the maximum distance (radius) to consider, and 
 
 
 
 , describing the number of points required to form a cluster. A point 
 
 
 
  is a core point if at least 
 
 
 
  points are found within its 
 
 
 
 -neighborhood 
 
 
 
 . Contrary to DBSCAN, OPTICS also considers points that are part of a more densely packed cluster, so each point is assigned a core distance that describes the distance to the 
 
 
 
 th closest point:



The reachability-distance of another point 
 
 
 
  from a point 
 
 
 
  is the distance between 
 
 
 
  and 
 
 
 
 , or the core distance of 
 
 
 
 :



If 
 
 
 
  and 
 
 
 
  are nearest neighbors, this is the 
 
 
 
  we need to assume in order to have 
 
 
 
  and 
 
 
 
  belong to the same cluster.
Both the core-distance and the reachability-distance are undefined if no sufficiently dense cluster (w.r.t. 
 
 
 
 ) is available. Given a sufficiently large 
 
 
 
 , this will never happen, but then every 
 
 
 
 -neighborhood query will return the entire database, resulting in 
 
 
 
  runtime. Hence, the 
 
 
 
  parameter is required to cut off the density of clusters that is no longer considered to be interesting and to speed up the algorithm this way.
The parameter 
 
 
 
  is, strictly speaking, not necessary. It can simply be set to the maximum possible value. When a spatial index is available, however, it does play a practical role with regards to complexity. It is often claimed that OPTICS abstracts from DBSCAN by removing this parameter, at least to the extent of only having to give the maximum value.
Pseudocode
The basic approach of OPTICS is similar to DBSCAN, but instead of maintaining a set of known, but so far unprocessed cluster members, a priority queue (e.g. using an indexed heap) is used.
 OPTICS(DB, eps, MinPts)
    for each point p of DB
       p.reachability-distance = UNDEFINED
    for each unprocessed point p of DB
       N = getNeighbors(p, eps)
       mark p as processed
       output p to the ordered list
       if (core-distance(p, eps, Minpts) != UNDEFINED)
          Seeds = empty priority queue
          update(N, p, Seeds, eps, Minpts)
          for each next q in Seeds
             N' = getNeighbors(q, eps)
             mark q as processed
             output q to the ordered list
             if (core-distance(q, eps, Minpts) != UNDEFINED)
                update(N', q, Seeds, eps, Minpts)
In update(), the priority queue Seeds is updated with the 
 
 
 
 -neighborhood of 
 
 
 
  and 
 
 
 
 , respectively:
 update(N, p, Seeds, eps, Minpts)
    coredist = core-distance(p, eps, MinPts)
    for each o in N
       if (o is not processed)
          new-reach-dist = max(coredist, dist(p,o))
          if (o.reachability-distance == UNDEFINED) // o is not in Seeds
              o.reachability-distance = new-reach-dist
              Seeds.insert(o, new-reach-dist)
          else               // o in Seeds, check for improvement
              if (new-reach-dist \varepsilon and minPts parameters; here a value of 0.1 may yield good results), or by different algorithms that try to detect the valleys by steepness, knee detection, or local maxima. Clusterings obtained this way usually are hierarchical, and cannot be achieved by a single DBSCAN run.
Complexity
Like DBSCAN, OPTICS processes each point once, and performs one 

 
 -neighborhood query during this processing. Given a spatial index that grants a neighborhood query in 
 
 
 
  runtime, an overall runtime of 
 
 
 
  is obtained. The authors of the original OPTICS paper report an actual constant slowdown factor of 1.6 compared to DBSCAN. Note that the value of 
 
 
 
  might heavily influence the cost of the algorithm, since a value too large might raise the cost of a neighborhood query to linear complexity.
In particular, choosing 
 
 
 
  (larger than the maximum distance in the data set) is possible, but will obviously lead to quadratic complexity, since every neighborhood query will return the full data set. Even when no spatial index is available, this comes at additional cost in managing the heap. Therefore, 
 
 
 
  should be chosen appropriately for the data set.
Extensions
OPTICS-OF3 is an outlier detection algorithm based on OPTICS. The main use is the extraction of outliers from an existing run of OPTICS at low cost compared to using a different outlier detection method.
DeLi-Clu,4 Density-Link-Clustering combines ideas from single-linkage clustering and OPTICS, eliminating the 
 
 
 
  parameter and offering performance improvements over OPTICS.
HiSC5 is a hierarchical subspace clustering (axis-parallel) method based on OPTICS.
HiCO6 is a hierarchical correlation clustering algorithm based on OPTICS.
DiSH7 is an improvement over HiSC that can find more complex hierarchies.
FOPTICS8 is a faster implementation using random projections.
Availability
Implementations of OPTICS, OPTICS-OF, DeLi-Clu, HiSC, HiCO and DiSH are available in the ELKI data mining framework (with index acceleration). An incomplete and slow implementation can be found in the Weka extensions. The Francis Crick Institute provides a C reimplementation of OPTICS without index support.
References
"
Category:Data clustering algorithms



↩
↩
↩
↩
↩
↩
↩
↩




