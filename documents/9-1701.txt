   Converse nonimplication      Converse nonimplication   In logic , converse nonimplication 1 is a logical connective which is the negation of the converse of implication .  Definition         p  ⊄  q        not-subset-of  p  q     {}_{p\not\subset q}\!   which is the same as       ∼   (  p  ⊂  q  )         fragments  similar-to   fragments  normal-(  p   q  normal-)      {}_{\sim(p\subset q)}\!     Truth table  The truth table of       p  ⊄  q        not-subset-of  p  q     {}_{p\not\subset q}\!   . 2       p   q         ⊄      not-subset-of    {}_{\not\subset}\!        T   T   F     T   F   F     F   T   T     F   F   F     Venn diagram  The Venn Diagram of "It is not the case that B implies A" (the red area is true)  (Figure)  Venn0010.svg   Properties  falsehood-preserving : The interpretation under which all variables are assigned a truth value of 'false' produces a truth value of 'false' as a result of converse nonimplication  Symbol  Alternatives for       p  ⊄  q        not-subset-of  p  q     {}_{p\not\subset q}\!   are          p   ←  ~   q         p   normal-~  normal-←   q     {}_{p\tilde{\leftarrow}q}\!          ←  ~        normal-~  normal-←     {}_{\tilde{\leftarrow}}\!   combines Converse implication's left arrow(      ←      normal-←    {}_{\leftarrow}\!   ) with Negation's tilde(      ∼      similar-to    {}_{\sim}\!   ).         M  p  q         M  p  q     {}_{Mpq}\!   : uses prefixed capital letter.         p  ↚  q        normal-↚  p  q     {}_{p\nleftarrow q}\!         ↚      normal-↚    {}_{\nleftarrow}\!   combines Converse implication's left arrow(      ←      normal-←    {}_{\leftarrow}\!   ) denied by means of a stroke(      /         {}_{/}\!   ).   Natural language  Grammatical  Rhetorical  "not A but B"  Colloquial  Boolean algebra   Converse Nonimplication in a general Boolean algebra is defined as       q  ↚  p  =    q  ′   p           normal-↚  q  p          superscript  q  normal-′   p       {}_{q\nleftarrow p=q^{\prime}p}\!   .   Example of a 2-element Boolean algebra: the 2 elements {0,1} with 0 as zero and 1 as unity element, operators      ∼      similar-to    {}_{\sim}\!   as complement operator,        ∨            {}_{{}_{\vee}}\!   as join operator and        ∧            {}_{{}_{\wedge}}\!   as meet operator, build the Boolean algebra of propositional logic .                 ∼  x        similar-to  absent  x     {}_{\sim x}\!            1      1    {}_{1}\!            0      0    {}_{0}\!              x      x    {}_{x}\!            0      0    {}_{0}\!            1      1    {}_{1}\!         and            y      y    {}_{y}\!               1      1    {}_{1}\!            1      1    {}_{1}\!              0      0    {}_{0}\!            0      0    {}_{0}\!                y  ∨   x          subscript  y    x     {}_{y_{\vee}x}\!            0      0    {}_{0}\!         and            y      y    {}_{y}\!               1      1    {}_{1}\!            0      0    {}_{0}\!              0      0    {}_{0}\!            0      0    {}_{0}\!                y  ∧   x          subscript  y    x     {}_{y_{\wedge}x}\!            0      0    {}_{0}\!         then       y  ↚  x        normal-↚  y  x     {}_{y\nleftarrow x}\!   means            y      y    {}_{y}\!               1      1    {}_{1}\!            0      0    {}_{0}\!              0      0    {}_{0}\!            0      0    {}_{0}\!               y  ↚  x        normal-↚  y  x     {}_{y\nleftarrow x}\!            0      0    {}_{0}\!           (Negation)    (Inclusive Or)    (And)    (Converse Nonimplication)       [4] Example of a 4-element Boolean algebra: the 4 divisors {1,2,3,6} of 6 with 1 as zero and 6 as unity element, operators        c        c     {}_{{}^{c}}\!   (codivisor of 6) as complement operator,        ∨            {}_{{}_{\vee}}\!   (least common multiple) as join operator and        ∧            {}_{{}_{\wedge}}\!   (greatest common divisor) as meet operator, build a Boolean algebra.                x  c        superscript  x  c     {}_{x^{c}}\!            6      6    {}_{6}\!            3      3    {}_{3}\!            2      2    {}_{2}\!            1      1    {}_{1}\!              x      x    {}_{x}\!            1      1    {}_{1}\!            2      2    {}_{2}\!            3      3    {}_{3}\!            6      6    {}_{6}\!         and            y      y    {}_{y}\!               6      6    {}_{6}\!            6      6    {}_{6}\!              3      3    {}_{3}\!            3      3    {}_{3}\!              2      2    {}_{2}\!            2      2    {}_{2}\!              1      1    {}_{1}\!            1      1    {}_{1}\!                y  ∨   x          subscript  y    x     {}_{y_{\vee}x}\!            1      1    {}_{1}\!         and            y      y    {}_{y}\!               6      6    {}_{6}\!            1      1    {}_{1}\!              3      3    {}_{3}\!            1      1    {}_{1}\!              2      2    {}_{2}\!            1      1    {}_{1}\!              1      1    {}_{1}\!            1      1    {}_{1}\!                y  ∧   x          subscript  y    x     {}_{y_{\wedge}x}\!            1      1    {}_{1}\!         then       y  ↚  x        normal-↚  y  x     {}_{y\nleftarrow x}\!   means            y      y    {}_{y}\!               6      6    {}_{6}\!            1      1    {}_{1}\!              3      3    {}_{3}\!            1      1    {}_{1}\!              2      2    {}_{2}\!            1      1    {}_{1}\!              1      1    {}_{1}\!            1      1    {}_{1}\!               y  ↚  x        normal-↚  y  x     {}_{y\nleftarrow x}\!            1      1    {}_{1}\!           (Codivisor 6)    (Least Common Multiple)    (Greatest Common Divisor)    (x's greatest Divisor coprime with y)      Properties  Non-associative         r  ↚   (  q  ↚  p  )   =   (  r  ↚  q  )   ↚  p        fragments  r  normal-↚   fragments  normal-(  q  normal-↚  p  normal-)     fragments  normal-(  r  normal-↚  q  normal-)   normal-↚  p     {}_{r\nleftarrow(q\nleftarrow p)=(r\nleftarrow q)\nleftarrow p}\!   iff        r  p   =  0           r  p   0     {}_{rp=0}\!    [5] (In a two-element Boolean algebra the latter condition is reduced to       r  =  0         r  0     {}_{r=0}\!   or       p  =  0         p  0     {}_{p=0}\!   ). Hence in a nontrivial Boolean algebra Converse Nonimplication is nonassociative .      :  :       (  r  ↚  q  )   ↚  p        =    r  ′   q   ↚  p   (by definition)          =      (    r  ′   q   )   ′   p   (by definition)           =     (   r  +   q  ′    )   p   (De Morgan’s laws)           =     (   r  +    r  ′    q  ′     )   p   (Absorption law)           =    r  p   +    r  ′    q  ′   p           =  r  p  +   r  ′    (  q  ↚  p  )   (by definition)         =  r  p  +  r  ↚   (  q  ↚  p  )   (by definition)         fragments  normal-:  normal-:     fragments   fragments  normal-(  r  normal-↚  q  normal-)   normal-↚  p    formulae-sequence      absent     superscript  r  normal-′   q     normal-↚    p    (by definition)      missing-subexpression     absent      superscript     superscript  r  normal-′   q   normal-′   p   (by definition)       missing-subexpression     absent       r   superscript  q  normal-′    p   (De Morgan’s laws)       missing-subexpression     absent       r     superscript  r  normal-′    superscript  q  normal-′     p   (Absorption law)       missing-subexpression     absent      r  p      superscript  r  normal-′    superscript  q  normal-′   p        missing-subexpression    fragments   r  p    superscript  r  normal-′    fragments  normal-(  q  normal-↚  p  normal-)    (by definition)      missing-subexpression    fragments   r  p   r  normal-↚   fragments  normal-(  q  normal-↚  p  normal-)    (by definition)       ::\begin{aligned}\displaystyle(r\nleftarrow q)\nleftarrow p&\displaystyle=r^{%
 \prime}q\nleftarrow p\qquad\qquad\qquad~{}~{}~{}~{}\text{(by definition)}\\
 &\displaystyle=(r^{\prime}q)^{\prime}p\qquad\qquad\qquad~{}~{}~{}~{}~{}~{}%
 \text{(by definition)}\\
 &\displaystyle=(r+q^{\prime})p\qquad\qquad~{}~{}~{}~{}~{}~{}~{}~{}~{}\text{(De%
  Morgan's laws)}\\
 &\displaystyle=(r+r^{\prime}q^{\prime})p\qquad\qquad~{}~{}~{}~{}~{}~{}~{}\text%
 {(Absorption law)}\\
 &\displaystyle=rp+r^{\prime}q^{\prime}p\\
 &\displaystyle=rp+r^{\prime}(q\nleftarrow p)\qquad~{}~{}~{}~{}~{}~{}~{}~{}%
 \text{(by definition)}\\
 &\displaystyle=rp+r\nleftarrow(q\nleftarrow p)\qquad~{}~{}~{}~{}\text{(by %
 definition)}\\
 \end{aligned}     Clearly, it is associative iff        r  p   =  0           r  p   0     {}_{rp=0}\!   .  Non-commutative          q  ↚  p  =  p  ↚   q           normal-↚  q  p       p    normal-↚    q      {}_{q\nleftarrow p=p\nleftarrow q\,}\!   iff       q  =   p          q  p     {}_{q=p\,}\!    [6] . Hence Converse Nonimplication is noncommutative .   Neutral and absorbing elements         0      0    {}_{0}\!   is a left neutral element (       0  ↚  p  =  p          normal-↚  0  p       p      {}_{0\nleftarrow p=p}\!   ) and a right absorbing element (       p  ↚  0  =  0          normal-↚  p  0       0      {}_{p\nleftarrow 0=0}\!   ).         1  ↚  p  =  0          normal-↚  1  p       0      {}_{1\nleftarrow p=0}\!   ,       p  ↚  1  =   p  ′           normal-↚  p  1        superscript  p  normal-′       {}_{p\nleftarrow 1=p^{\prime}}\!   , and       p  ↚  p  =  0          normal-↚  p  p       0      {}_{p\nleftarrow p=0}\!   .  Implication       q  →  p        normal-→  q  p     {}_{q\rightarrow p}\!   is the dual of Converse Nonimplication       q  ↚  p        normal-↚  q  p     {}_{q\nleftarrow p}\!    [7] .     [6]      Converse Nonimplication is noncommutative       Step            s   .1          s  .1     {}_{s.1\,}\!               s   .2          s  .2     {}_{s.2\,}\!               s   .3          s  .3     {}_{s.3\,}\!               s   .4          s  .4     {}_{s.4\,}\!               s   .5          s  .5     {}_{s.5\,}\!               s   .6          s  .6     {}_{s.6\,}\!               s   .7          s  .7     {}_{s.7\,}\!               s   .8          s  .8     {}_{s.8\,}\!               s   .9          s  .9     {}_{s.9\,}\!               s   .10          s  .10     {}_{s.10\,}\!               s   .11          s  .11     {}_{s.11\,}\!               s   .12          s  .12     {}_{s.12\,}\!               s   .13          s  .13     {}_{s.13\,}\!               s   .14          s  .14     {}_{s.14\,}\!               s   .15          s  .15     {}_{s.15\,}\!            [7]      Implication is the dual of Converse Nonimplication       Step            s   .1          s  .1     {}_{s.1\,}\!               s   .2          s  .2     {}_{s.2\,}\!               s   .3          s  .3     {}_{s.3\,}\!               s   .4          s  .4     {}_{s.4\,}\!               s   .5          s  .5     {}_{s.5\,}\!               s   .6          s  .6     {}_{s.6\,}\!               s   .7          s  .7     {}_{s.7\,}\!               s   .8          s  .8     {}_{s.8\,}\!               s   .9          s  .9     {}_{s.9\,}\!           Computer science  An example for converse nonimplication in computer science can be found when performing a right outer join on a set of tables from a database , if records not matching the join-condition from the "left" table are being excluded. 3  Notes  References     "  Category:Logical connectives     Lehtonen, Eero, and Poikonen, J.H. ↩  ↩  http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html ↩     