   Nth root algorithm      Nth root algorithm   The principal  n th root     A  n       n   A    \sqrt[n]{A}   of a positive  real number  A , is the positive real solution of the equation       x  n   =  A       superscript  x  n   A    x^{n}=A     (for integer n there are n distinct complex solutions to this equation if    A  >  0      A  0    A>0   , but only one is positive and real).  There is a very fast- converging ''' n th root algorithm''' for finding    A  n       n   A    \sqrt[n]{A}   :   Make an initial guess    x  0     subscript  x  0    x_{0}     Set     x   k  +  1    =    1  n    [     (   n  -  1   )    x  k    +   A   x  k   n  -  1      ]         subscript  x    k  1        1  n    delimited-[]        n  1    subscript  x  k      A   superscript   subscript  x  k     n  1          x_{k+1}=\frac{1}{n}\left[{(n-1)x_{k}+\frac{A}{x_{k}^{n-1}}}\right]   . In practice we do      Δ   x  k    =    1  n    [    A   x  k   n  -  1     -   x  k    ]     ;    x   k  +  1    =    x  k   +   Δ   x  k         formulae-sequence      normal-Δ   subscript  x  k        1  n    delimited-[]      A   superscript   subscript  x  k     n  1      subscript  x  k          subscript  x    k  1       subscript  x  k     normal-Δ   subscript  x  k        \Delta x_{k}=\frac{1}{n}\left[{\frac{A}{x_{k}^{n-1}}}-x_{k}\right];x_{k+1}=x_{%
 k}+\Delta x_{k}   .  Repeat step 2 until the desired precision is reached, i.e.     |   Δ   x  k    |   <  ϵ          normal-Δ   subscript  x  k     ϵ    |\Delta x_{k}|<\epsilon   .   A special case is the familiar square-root algorithm . By setting n = 2, the iteration rule in step 2 becomes the square root iteration rule:       x   k  +  1    =    1  2    (    x  k   +   A   x  k     )         subscript  x    k  1        1  2      subscript  x  k     A   subscript  x  k        x_{k+1}=\frac{1}{2}\left(x_{k}+\frac{A}{x_{k}}\right)     Several different derivations of this algorithm are possible. One derivation shows it is a special case of Newton's method (also called the Newton-Raphson method) for finding zeros of a function    f   (  x  )       f  x    f(x)   beginning with an initial guess. Although Newton's method is iterative, meaning it approaches the solution through a series of increasingly accurate guesses, it converges very quickly. The rate of convergence is quadratic, meaning roughly that the number of bits of accuracy doubles on each iteration (so improving a guess from 1 bit to 64 bits of precision requires only 6 iterations). For this reason, this algorithm is often used in computers as a very fast method to calculate square roots.  For large n , the n th root algorithm is somewhat less efficient since it requires the computation of    x  k   n  -  1      superscript   subscript  x  k     n  1     x_{k}^{n-1}   at each step, but can be efficiently implemented with a good exponentiation algorithm.  Derivation from Newton's method  Newton's method is a method for finding a zero of a function f(x) . The general iteration scheme is:   Make an initial guess    x  0     subscript  x  0    x_{0}     Set     x   k  +  1    =    x  k   -    f   (   x  k   )      f  ′    (   x  k   )           subscript  x    k  1       subscript  x  k       f   subscript  x  k       superscript  f  normal-′    subscript  x  k        x_{k+1}=x_{k}-\frac{f(x_{k})}{f^{\prime}(x_{k})}     Repeat step 2 until the desired precision is reached.   The n th root problem can be viewed as searching for a zero of the function       f   (  x  )    =    x  n   -  A         f  x      superscript  x  n   A     f(x)=x^{n}-A     So the derivative is        f  ′    (  x  )    =   n   x   n  -  1            superscript  f  normal-′   x     n   superscript  x    n  1       f^{\prime}(x)=nx^{n-1}     and the iteration rule is       x   k  +  1    =    x  k   -    f   (   x  k   )      f  ′    (   x  k   )           subscript  x    k  1       subscript  x  k       f   subscript  x  k       superscript  f  normal-′    subscript  x  k        x_{k+1}=x_{k}-\frac{f(x_{k})}{f^{\prime}(x_{k})}          =    x  k   -     x  k  n   -  A    n   x  k   n  -  1           absent     subscript  x  k        superscript   subscript  x  k   n   A     n   superscript   subscript  x  k     n  1         =x_{k}-\frac{x_{k}^{n}-A}{nx_{k}^{n-1}}          =     x  k   -    x  k   n    +   A   n   x  k   n  -  1           absent       subscript  x  k      subscript  x  k   n      A    n   superscript   subscript  x  k     n  1         =x_{k}-\frac{x_{k}}{n}+\frac{A}{nx_{k}^{n-1}}          =    1  n    [     (   n  -  1   )    x  k    +   A   x  k   n  -  1      ]        absent      1  n    delimited-[]        n  1    subscript  x  k      A   superscript   subscript  x  k     n  1          =\frac{1}{n}\left[{(n-1)x_{k}+\frac{A}{x_{k}^{n-1}}}\right]     leading to the general n th root algorithm.  See also   Recurrence relation   References    .   "  Category:Root-finding algorithms   