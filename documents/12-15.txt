   ABA problem      ABA problem  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In multithreaded  computing , the ABA problem occurs during synchronization, when a location is read twice, has the same value for both reads, and "value is the same" is used to indicate "nothing has changed". However, another thread can execute between the two reads and change the value, do other work, then change the value back, thus fooling the first thread into thinking "nothing has changed" even though the second thread did work that violates that assumption.  The ABA problem occurs when multiple threads (or processes ) accessing shared memory interleave. Below is the sequence of events that will result in the ABA problem:   Process    P  1     subscript  P  1    P_{1}   reads value A from shared memory,      P  1     subscript  P  1    P_{1}   is preempted , allowing process    P  2     subscript  P  2    P_{2}   to run,      P  2     subscript  P  2    P_{2}   modifies the shared memory value A to value B and back to A before preemption,      P  1     subscript  P  1    P_{1}   begins execution again, sees that the shared memory value has not changed and continues.   Although    P  1     subscript  P  1    P_{1}   can continue executing, it is possible that the behavior will not be correct due to the "hidden" modification in shared memory.  A common case of the ABA problem is encountered when implementing a lock-free data structure. If an item is removed from the list, deleted, and then a new item is allocated and added to the list, it is common for the allocated object to be at the same location as the deleted object due to optimization. A pointer to the new item is thus sometimes equal to a pointer to the old item which is an ABA problem.  Examples   Natalie is waiting in her car at a red traffic light with her children. Her children start fighting with each other while waiting, and she leans back to scold them. Once their fighting stops, Natalie checks the light again and notices that it's still red. However, while she was focusing on her children, the light had changed to green, and then back again. Natalie doesn't think the light ever changed, but the people waiting behind her are very mad and honking their horns now.   In this scenario, the 'A' state is when the traffic light is red, and the 'B' state is when it's green. Originally, the traffic light starts in 'A' state. If Natalie looked at the light she would have noticed the change. But she only looked when the light was red (state 'A'). There is no way to tell if the light turned green during the time of no observation.  Consider a software example of ABA using a lock-free  stack :   /* Naive lock-free stack which suffers from ABA problem.*/  class Stack {
     std::atomic top_ptr; //  // Pops the top object and returns a pointer to it.  // Obj* Pop() { while ( 1 ) {
         Obj* ret_ptr = top_ptr; if (!ret_ptr) return std::nullptr; // For simplicity, suppose that we can ensure that this dereference is safe  // (i.e., that no other thread has popped the stack in the meantime). Obj* next_ptr = ret_ptr->next; // If the top node is still ret, then assume no one has changed the stack.  // (That statement is not always true because of the ABA problem)  // Atomically replace top with next.  if (top_ptr.compare_exchange_weak(ret_ptr, next_ptr)) { return ret_ptr;
         } // The stack has changed, start over. }
     } //  // Pushes the object specified by obj_ptr to stack.  //  void Push(Obj* obj_ptr) { while ( 1 ) {
         Obj* next_ptr = top_ptr;
         obj_ptr->next = next_ptr; // If the top node is still next, then assume no one has changed the stack.  // (That statement is not always true because of the ABA problem)  // Atomically replace top with obj.  if (top_ptr.compare_exchange_weak(next_ptr, obj_ptr)) { return ;
         } // The stack has changed, start over. }
     }
   };  This code can normally prevent problems from concurrent access, but suffers from ABA problems. Consider the following sequence:  Stack initially contains top → A → B → C  Thread 1 starts running pop:  ret = A;  next = B;  Thread 1 gets interrupted just before the compare_exchange_weak ...  { // Thread 2 runs pop: ret = A;
     next = B;
     compare_exchange_weak(A, B) // Success, top = B  return A;
   } // Now the stack is top → B → C { // Thread 2 runs pop again: ret = B;
     next = C;
     compare_exchange_weak(B, C) // Success, top = C  return B;
   } // Now the stack is top → C  delete B;
   { // Thread 2 now pushes A back onto the stack: A->next = C;
     compare_exchange_weak(C, A) // Success, top = A }  Now the stack is top → A → C  When Thread 1 resumes:  compare_exchange_weak(A, B)  This instruction succeeds because it finds top == ret (both are A), so it sets top to next (which is B). As B has been deleted the program will access freed memory when it tries to look the first element on the stack. In C++, as shown here, accessing freed memory is undefined behavior : this may result in crashes, data corruption or even just silently appear to work correctly. ABA bugs, such as this, can be difficult to debug.  Workarounds  Tagged state reference  A common workaround is to add extra "tag" or "stamp" bits to the quantity being considered. For example, an algorithm using compare and swap on a pointer might use the low bits of the address to indicate how many times the pointer has been successfully modified. Because of this, the next compare-and-swap will fail, even if the addresses are the same, because the tag bits will not match. This does not completely solve the problem, as the tag bits will eventually wrap around, but helps to avoid it. Some architectures provide a double-word compare and swap, which allows for a larger tag. This is sometimes called ABAʹ since the second A is made slightly different from the first. Such tagged state references are also used in transactional memory .  Intermediate nodes  A correct but expensive approach is to use intermediate nodes that are not data elements and thus assure invariants as elements are inserted and removed [Valois].  Deferred reclamation  Another approach is to defer reclamation of removed data elements. One way to defer reclamation is to run the algorithm in an environment featuring an automatic garbage collector . Another way to defer reclamation is to use one or more hazard pointers , which are pointers to locations that otherwise cannot appear in the list. Each hazard pointer represents an intermediate state of an in-progress change; the presence of the pointer assures further synchronization [Doug Lea]. Yet another way to defer reclamation is to use read-copy update (RCU) , which involves enclosing the update in an RCU read-side critical section and then waiting for an RCU grace period before freeing any removed data elements. Using RCU in this way guarantees that any data element removed cannot reappear until all currently executing operations have completed.  Some architectures provide "larger" atomic operations such that, as example, both forward and backward links in a doubly linked list can be updated atomically.  Some architectures provide a load linked, store conditional instruction in which the store is performed only when there are no other stores of the indicated location. This effectively separates the notion of "storage contains value" from "storage has been changed". Examples include DEC Alpha, MIPS, PowerPC and ARM (v6 and later). However no practical implementations of load linked will directly solve the ABA problem. [Michael]  Actor model  Actors only send messages and contain all states inside the actors. There is no global state that would allow ABA problems.  See also   Readers–writers problem   References       "  Category:Concurrency (computer science)  