   Baby-step giant-step      Baby-step giant-step  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In group theory , a branch of mathematics, the baby-step giant-step is a meet-in-the-middle  algorithm computing the discrete logarithm . The discrete log problem is of fundamental importance to the area of public key cryptography . Many of the most commonly used cryptography systems are based on the assumption that the discrete log is extremely difficult to compute; the more difficult it is, the more security it provides a data transfer. One way to increase the difficulty of the discrete log problem is to base the cryptosystem on a larger group.  Theory  The algorithm is based on a space-time tradeoff . It is a fairly simple modification of trial multiplication, the naive method of finding discrete logarithms.  Given a cyclic group    G   G   G   of order   n   n   n   , a generator    α   α   \alpha   of the group and a group element   β   β   \beta   , the problem is to find an integer   x   x   x   such that        α  x   =   β    .       superscript  α  x   β    \alpha^{x}=\beta\,.   The baby-step giant-step algorithm is based on rewriting   x   x   x   as    x  =    i  m   +  j       x      i  m   j     x=im+j   , with    m  =   ⌈   n   ⌉       m      n      m=\left\lceil\sqrt{n}\right\rceil   and    0  ≤  i  <  m        0  i       m     0\leq i   and    0  ≤  j  <  m        0  j       m     0\leq j   . Therefore, we have:        β    (   α   -  m    )   i    =    α  j     .        β   superscript   superscript  α    m    i     superscript  α  j     \beta(\alpha^{-m})^{i}=\alpha^{j}\,.     The algorithm precomputes    α  j     superscript  α  j    \alpha^{j}   for several values of   j   j   j   . Then it fixes an   m   m   m   and tries values of   i   i   i   in the left-hand side of the congruence above, in the manner of trial multiplication. It tests to see if the congruence is satisfied for any value of   j   j   j   , using the precomputed values of    α  j     superscript  α  j    \alpha^{j}   .  The algorithm  Input : A cyclic group G of order n , having a generator α and an element β.  Output : A value x satisfying     α  x   =  β       superscript  α  x   β    \alpha^{x}=\beta   .   m ← Ceiling(√ n )  For all j where 0 ≤ j  j and store the pair ( j , α j ) in a table. (See section "In practice")  Compute α − m .  γ ← β. (set γ = β)  For i = 0 to ( m − 1):  Check to see if γ is the second component (α j ) of any pair in the table.  If so, return im + j .  If not, γ ← γ • α − m .    C algorithm with the GNU MP lib  void baby_step_giant_step (mpz_t g, mpz_t h, mpz_t p, mpz_t n, mpz_t x ){ unsigned  long  int i; long  int j = 0 ;
    mpz_t N;
    mpz_t* gr ; /* list g^r */  unsigned  long  int * indices; /* indice[ i ] = k <=> gr[ i ] = g^k */ mpz_t hgNq ; /* hg^(Nq) */ mpz_t inv ; /* inverse of g^(N) */ mpz_init (N) ;
    mpz_sqrt (N, n ) ;
    mpz_add ui (N, N, 1 ) ;
 
    gr = malloc (mpz_get_ui (N) * sizeof (mpz_t) ) ;
    indices = malloc ( mpz_get_ui (N) * sizeof ( long  int ) ) ;
    mpz_init_set_ui (gr[ 0 ], 1 ); /* find the sequence {g^r} r = 1 ,.. ,N (Baby step ) */  for ( i = 1 ; i <= mpz_get_ui (N) ; i++) {
       indices[i - 1 ] = i - 1 ;
       mpz_init (gr[ i ]) ;
       mpz_mul (gr[ i ], gr[ i - 1 ], g ); /* multiply gr[i - 1] for g */ mpz_mod (gr[ i ], gr[ i ], p );
    } /* sort the values (k , g^k) with respect to g^k */ qsort ( gr, indices, mpz_get_ui (N), mpz_cmp ) ; /* compute g^(-Nq)   (Giant step) */ mpz_init_set (inv, g);
    mpz_powm (inv, inv, N, p); /* inv <- inv ^ N (mod p)  */ mpz_invert (inv, p, inv) ;
 
    mpz_init_set (hgNq, h); /* find the elements in the two sequences */  for ( i = 0 ; i <= mpz_get_ui (N) ; i++){ /* find hgNq in the sequence gr ) */ j = bsearch (gr, hgNq, 0 , mpz_get_ui (N), mpz_cmp ) ; if ( j >= 0 ){
          mpz_mul_ui (N, N, i);
          mpz_add_ui (N, N, indices [j]);
          mpz_set (x, N) ; break ;
       } /* if j < 0, find the next value of g^(Nq) */ mpz_mul (hgNq, hgNq, inv);
       mpz_mod (hgNq, hgNq, p);
    }
 }  In practice  The best way to speed up the baby-step giant-step algorithm is to use an efficient table lookup scheme. The best in this case is a hash table . The hashing is done on the second component, and to perform the check in step 1 of the main loop, γ is hashed and the resulting memory address checked. Since hash tables can retrieve and add elements in O (1) time (constant time), this does not slow down the overall baby-step giant-step algorithm.  The running time of the algorithm and the space complexity is O (    n      n    \sqrt{n}   ), much better than the O (n) running time of the naive brute force calculation.  Notes   The baby-step giant-step algorithm is a generic algorithm. It works for every finite cyclic group.  It is not necessary to know the order of the group G in advance. The algorithm still works if n is merely an upper bound on the group order.  Usually the baby-step giant-step algorithm is used for groups whose order is prime. If the order of the group is composite then the Pohlig–Hellman algorithm is more efficient.  The algorithm requires O ( m ) memory. It is possible to use less memory by choosing a smaller m in the first step of the algorithm. Doing so increases the running time, which then is O ( n / m ). Alternatively one can use Pollard's rho algorithm for logarithms , which has about the same running time as the baby-step giant-step algorithm, but only a small memory requirement.  The algorithm was originally developed by Daniel Shanks .   References   H. Cohen, A course in computational algebraic number theory, Springer, 1996.  D. Shanks. Class number, a theory of factorization and genera. In Proc. Symp. Pure Math. 20, pages 415—440. AMS, Providence, R.I., 1971.  A. Stein and E. Teske, Optimized baby step-giant step methods, Journal of the Ramanujan Mathematical Society 20 (2005), no. 1, 1–32.  A. V. Sutherland, Order computations in generic groups , PhD thesis, M.I.T., 2007.  D. C. Terr, A modification of Shanks’ baby-step giant-step algorithm, Mathematics of Computation 69 (2000), 767–773.   "  Category:Group theory  Category:Number theoretic algorithms  Category:Articles with example C code  