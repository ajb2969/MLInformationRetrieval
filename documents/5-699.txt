   Promise problem      Promise problem   In computational complexity theory , a promise problem is a generalization of a decision problem where the input is promised to belong to a subset of all possible inputs. 1 Unlike decision problems, the yes instances (the inputs for which an algorithm must return yes ) and no instances do not exhaust the set of all inputs. Intuitively, the algorithm has been promised that the input does indeed belong to set of yes instances or no instances. There may be inputs which are neither yes or no . If such an input is given to an algorithm for solving a promise problem, the algorithm is allowed to output anything, and may even not halt.  Formal definition  A decision problem can be associated with a language    L  ⊆    {  0  ,  1  }   *       L   superscript   0  1       L\subseteq\{0,1\}^{*}   , where the problem is to accept all inputs in   L   L   L   and reject all inputs not in   L   L   L   . For a promise problem, there are two languages,    L  YES     subscript  L  YES    L_{\text{YES}}   and    L  NO     subscript  L  NO    L_{\text{NO}}   , which must be disjoint , which means      L  YES   ∩   L  NO    =  ∅         subscript  L  YES    subscript  L  NO       L_{\text{YES}}\cap L_{\text{NO}}=\varnothing   , such that all the inputs in    L  YES     subscript  L  YES    L_{\text{YES}}   are to be accepted and all inputs in    L  NO     subscript  L  NO    L_{\text{NO}}   are to be rejected. The set     L  YES   ∪   L  NO        subscript  L  YES    subscript  L  NO     L_{\text{YES}}\cup L_{\text{NO}}   is called the promise . There are no requirements on the output if the input does not belong to the promise. If the promise equals     {  0  ,  1  }   *     superscript   0  1      \{0,1\}^{*}   , then this is also a decision problem, and the promise is said to be trivial.  Examples  Many natural problems are actually promise problems. For instance, consider the following problem: Given a directed acyclic graph , determine if the graph has a path of length 10. The yes instances are directed acyclic graphs with a path of length 10, whereas the no instances are directed acyclic graphs with no path of length 10. The promise is the set of directed acyclic graphs. In this example, the promise is easy to check. In particular, it is very easy to check if a given graph is cyclic. However, the promised property could be difficult to evaluate. For instance, consider the problem "Given a Hamiltonian graph , determine if the graph has a cycle of size 4." Now the promise is NP-hard to evaluate, yet the promise problem is easy to solve since checking for cycles of size 4 can be done in polynomial time.  See also   Computational problem  Decision problem  Optimization problem  Search problem  Counting problem (complexity)  Function problem   References  Surveys       "  Category:Computational problems     ↩     