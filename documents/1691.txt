   Deriche edge detector      Deriche edge detector   Deriche edge detector is an edge detection operator developed by Rachid Deriche in 1987. It's a multistep algorithm used to obtain an optimal result of edge detection in a discrete two-dimensional image. This algorithm is based on John F. Canny 's work related to the edge detection ( Canny's edge detector ) and his criteria for optimal edge detection:   Detection quality – all existing edges should be marked and no false detection should occur.  Accuracy - the marked edges should be as close to the edges in the real image as possible.  Unambiguity - a given edge in the image should only be marked once. No multiple responses to one edge in the real image should occur.   For this reason, this algorithm is often referred to as Canny-Deriche detector.  Differences between Canny and Deriche edge detector  Deriche edge detector, like Canny edge detector , consists of the following 4 steps:   Smoothing  Calculation of magnitude and gradient direction  Non-maximum suppression  Hysteresis thresholding (using two thresholds)   The essential difference is in the implementation of the first two steps of the algorithm. Unlike the Canny edge detector, Deriche edge detector uses the IIR filter in the form:       f   (  x  )    =    S  ω    e   -   α   |  x  |      s  i  n  ω  x         f  x       S  ω    superscript  e      α    x      s  i  n  ω  x     f(x)=\frac{S}{\omega}e^{-\alpha|x|}sin\omega x     The filter optimizes the Canny criteria. As is evident from the preceding formula, the most effective filter is obtained when the value of   ω   ω   \omega   approaches 0. Such filter then uses the formula:       f   (  x  )    =   S  x   e   -   α   |  x  |             f  x     S  x   superscript  e      α    x         f(x)=Sxe^{-\alpha|x|}     The advantage of such a filter is that it can be adapted to the characteristics of the processed image using only one parameter. If the value of α is small (usually between 0.25 and 0.5), it results in better detection. On the other hand, better localization is achieved when the parameter has a higher value (around 2 or 3). For most of the normal cases parameter value of around 1 is recommended.      Example of smoothing using Deriche filter     Image     α     Using the IIR filter makes sense especially in cases where the processed image is noisy or a large amount of smoothing is required (which leads to large convolution kernel for FIR filter). In these cases, the Deriche detector has considerable advantage over the Canny detector, because it is able to process images in a short constant time independent of the desired amount of smoothing.  Deriche detector implementation  It's possible to separate the process of obtaining the value of a two-dimensional Deriche filter into two parts. In first part, image array is passed in the horizontal direction from left to right according to the following formula:       y   i  j   1   =     a  1    x   i  j     +    a  2    x    i  j   -  1     +    b  1    y    i  j   -  1   1    +    b  2    y    i  j   -  2   1          superscript   subscript  y    i  j    1        subscript  a  1    subscript  x    i  j        subscript  a  2    subscript  x      i  j   1        subscript  b  1    superscript   subscript  y      i  j   1    1       subscript  b  2    superscript   subscript  y      i  j   2    1       y_{ij}^{1}=a_{1}x_{ij}+a_{2}x_{ij-1}+b_{1}y_{ij-1}^{1}+b_{2}y_{ij-2}^{1}     and from right to left according to the formula:       y   i  j   2   =     a  3    x    i  j   +  1     +    a  4    x    i  j   +  2     +    b  1    y    i  j   +  1   2    +    b  2    y    i  j   +  2   2          superscript   subscript  y    i  j    2        subscript  a  3    subscript  x      i  j   1        subscript  a  4    subscript  x      i  j   2        subscript  b  1    superscript   subscript  y      i  j   1    2       subscript  b  2    superscript   subscript  y      i  j   2    2       y_{ij}^{2}=a_{3}x_{ij+1}+a_{4}x_{ij+2}+b_{1}y_{ij+1}^{2}+b_{2}y_{ij+2}^{2}     The result of the computation is then stored into temporary two-dimensional array:       θ   i  j    =    c  1    (    y   i  j   1   +   y   i  j   2    )         subscript  θ    i  j       subscript  c  1      superscript   subscript  y    i  j    1    superscript   subscript  y    i  j    2       \theta_{ij}=c_{1}(y_{ij}^{1}+y_{ij}^{2})     The second step of the algorithm is very similar to the first one. The two-dimensional array from the previous step is used as the input. It is then passed in the vertical direction from top to bottom and bottom-up according to the following formulas:       y   i  j   1   =     a  5    θ   i  j     +    a  6    θ   i  -   1  j      +    b  1    y   i  -   1  j    1    +    b  2    y   i  -   2  j    1          superscript   subscript  y    i  j    1        subscript  a  5    subscript  θ    i  j        subscript  a  6    subscript  θ    i    1  j         subscript  b  1    superscript   subscript  y    i    1  j     1       subscript  b  2    superscript   subscript  y    i    2  j     1       y_{ij}^{1}=a_{5}\theta_{ij}+a_{6}\theta_{i-1j}+b_{1}y_{i-1j}^{1}+b_{2}y_{i-2j}%
 ^{1}          y   i  j   2   =     a  7    θ   i  +   1  j      +    a  8    θ   i  +   2  j      +    b  1    y   i  +   1  j    2    +    b  2    y   i  +   2  j    2          superscript   subscript  y    i  j    2        subscript  a  7    subscript  θ    i    1  j         subscript  a  8    subscript  θ    i    2  j         subscript  b  1    superscript   subscript  y    i    1  j     2       subscript  b  2    superscript   subscript  y    i    2  j     2       y_{ij}^{2}=a_{7}\theta_{i+1j}+a_{8}\theta_{i+2j}+b_{1}y_{i+1j}^{2}+b_{2}y_{i+2%
 j}^{2}          Θ   i  j    =    c  2    (    y   i  j   1   +   y   i  j   2    )         subscript  normal-Θ    i  j       subscript  c  2      superscript   subscript  y    i  j    1    superscript   subscript  y    i  j    2       \Theta_{ij}=c_{2}(y_{ij}^{1}+y_{ij}^{2})     The description of the algorithm implies that the processed rows and columns are independent of each other. As a result, the solution based on the IIR filter is often employed in embedded systems and architectures which support a high level of parallelization, such as NVIDIA CUDA .      Deriche filter coefficients    smoothing   x-derivative   y-derivative        k   k   k            (   1  -   e   -  α     )   2     1  +   2  α   e   -  α      -   e   -   2  α           superscript    1   superscript  e    α     2       1    2  α   superscript  e    α       superscript  e      2  α        \frac{{(1-e^{-\alpha})}^{2}}{1+2\alpha e^{-\alpha}-e^{-2\alpha}}            (   1  -   e   -  α     )   2     1  +   2  α   e   -  α      -   e   -   2  α           superscript    1   superscript  e    α     2       1    2  α   superscript  e    α       superscript  e      2  α        \frac{{(1-e^{-\alpha})}^{2}}{1+2\alpha e^{-\alpha}-e^{-2\alpha}}            (   1  -   e   -  α     )   2     1  +   2  α   e   -  α      -   e   -   2  α           superscript    1   superscript  e    α     2       1    2  α   superscript  e    α       superscript  e      2  α        \frac{{(1-e^{-\alpha})}^{2}}{1+2\alpha e^{-\alpha}-e^{-2\alpha}}            a  1     subscript  a  1    a_{1}         k   k   k      0      k   k   k            a  2     subscript  a  2    a_{2}          k   e   -  α     (   α  -  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha-1)      1       k   e   -  α     (   α  -  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha-1)            a  3     subscript  a  3    a_{3}          k   e   -  α     (   α  +  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha+1)      -1       k   e   -  α     (   α  +  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha+1)            a  4     subscript  a  4    a_{4}          -   k   e   -   2  α            k   superscript  e      2  α        -ke^{-2\alpha}      0       -   k   e   -   2  α            k   superscript  e      2  α        -ke^{-2\alpha}            a  5     subscript  a  5    a_{5}         k   k   k         k   k   k      0         a  6     subscript  a  6    a_{6}          k   e   -  α     (   α  -  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha-1)          k   e   -  α     (   α  -  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha-1)      1         a  7     subscript  a  7    a_{7}          k   e   -  α     (   α  +  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha+1)          k   e   -  α     (   α  +  1   )       k   superscript  e    α      α  1     ke^{-\alpha}(\alpha+1)      -1         a  8     subscript  a  8    a_{8}          -   k   e   -   2  α            k   superscript  e      2  α        -ke^{-2\alpha}          -   k   e   -   2  α            k   superscript  e      2  α        -ke^{-2\alpha}      0         b  1     subscript  b  1    b_{1}          2   e   -  α        2   superscript  e    α      2e^{-\alpha}          2   e   -  α        2   superscript  e    α      2e^{-\alpha}          2   e   -  α        2   superscript  e    α      2e^{-\alpha}            b  2     subscript  b  2    b_{2}          -   e   -   2  α          superscript  e      2  α       -e^{-2\alpha}          -   e   -   2  α          superscript  e      2  α       -e^{-2\alpha}          -   e   -   2  α          superscript  e      2  α       -e^{-2\alpha}            c  1     subscript  c  1    c_{1}      1       -    (   1  -   e   -  α     )   2        superscript    1   superscript  e    α     2     -{(1-e^{-\alpha})}^{2}      1         c  2     subscript  c  2    c_{2}      1   1       -    (   1  -   e   -  α     )   2        superscript    1   superscript  e    α     2     -{(1-e^{-\alpha})}^{2}        The mathematical properties of the algorithm are often used in practical implementation of the Deriche detector. It is sufficient to implement only one part of the algorithm, which is then called twice, while performing a transposition of the resulting matrix.      Examples of using Deriche filter on various source images     Source image     Filtered image     Filter parameters     See also   Canny edge detector  IIR  Edge detection   Further reading   R. Deriche, Using Canny's criteria to derive a recursively implemented optimal edge detector , Int. J. Computer Vision, Vol. 1, pp. 167–187, April 1987.  R. Sirdey, A Gentle Introduction to the Deriche Optimal Edge Detector , Éditions des Nik's news, 1998.  J. Canny, A Computational Approach To Edge Detection , IEEE Trans. Pattern Analysis and Machine Intelligence, 8(6):679–698, 1986.   External links   Rachid Deriche personal page  Diane Lingrand lecture about edge detectors  John Canny personal page   "  Category:Feature detection (computer vision)   