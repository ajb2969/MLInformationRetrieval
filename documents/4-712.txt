   Belief propagation      Belief propagation   Belief propagation , also known as sum-product message passing is a message passing  algorithm for performing inference on graphical models , such as Bayesian networks and Markov random fields . It calculates the marginal distribution for each unobserved node, conditional on any observed nodes. Belief propagation is commonly used in artificial intelligence and information theory and has demonstrated empirical success in numerous applications including low-density parity-check codes , turbo codes , free energy approximation, and satisfiability . 1  The algorithm was first proposed by Judea Pearl in 1982, 2 who formulated this algorithm on trees , and was later extended to polytrees . 3 It has since been shown to be a useful approximate algorithm on general graphs. 4  If X ={ X i } is a set of discrete  random variables with a joint  mass function  p , the marginal distribution of a single X i is simply the summation of p over all other variables:         p   X  i     (   x  i   )    =    ‚àë    ùê±  ‚Ä≤   :    x  i  ‚Ä≤   =   x  i       p   (   ùê±  ‚Ä≤   )      .         subscript  p   subscript  X  i     subscript  x  i      subscript    normal-:   superscript  ùê±  normal-‚Ä≤      subscript   superscript  x  normal-‚Ä≤   i    subscript  x  i        p   superscript  ùê±  normal-‚Ä≤       p_{X_{i}}(x_{i})=\sum_{\mathbf{x}^{\prime}:x^{\prime}_{i}=x_{i}}p(\mathbf{x}^{%
 \prime}).     However, this quickly becomes computationally prohibitive: if there are 100 binary variables, then one needs to sum over 2 99 ‚âà¬†6.338¬†√ó¬†10 29 possible values. By exploiting the polytree structure, belief propagation allows the marginals to be computed much more efficiently.  Description of the sum-product algorithm  Variants of the belief propagation algorithm exist for several types of graphical models ( Bayesian networks and Markov random fields , 5 in particular). We describe here the variant that operates on a factor graph . A factor graph is a bipartite graph containing nodes corresponding to variables V and factors F , with edges between variables and the factors in which they appear. We can write the joint mass function:       p   (  ùê±  )    =    ‚àè   a  ‚àà  F      f  a    (   ùê±  a   )           p  ùê±     subscript  product    a  F       subscript  f  a    subscript  ùê±  a       p(\mathbf{x})=\prod_{a\in F}f_{a}(\mathbf{x}_{a})     where x a is the vector of neighbouring variable nodes to the factor node a . Any Bayesian network or Markov random field can be represented as a factor graph.  The algorithm works by passing real valued functions called messages along the edges between the hidden nodes. More precisely, if v is a variable node and a is a factor node connected to v in the factor graph, the messages from v to a , (denoted by    Œº   v  ‚Üí  a      subscript  Œº   normal-‚Üí  v  a     \mu_{v\to a}   ) and from a to v (    Œº   a  ‚Üí  v      subscript  Œº   normal-‚Üí  a  v     \mu_{a\to v}   ), are real-valued functions whose domain is Dom( v ), the set of values that can be taken by the random variable associated with v . These messages contain the "influence" that one variable exerts on another. The messages are computed differently depending on whether the node receiving the message is a variable node or a factor node. Keeping the same notation:   A message from a variable node v to a factor node a is the product of the messages from all other neighbouring factor nodes (except the recipient; alternatively one can say the recipient sends as message the constant function equal to "1"):            ‚àÄ   x  v    ‚àà   D  o  m   (  v  )     ,     Œº   v  ‚Üí  a     (   x  v   )    =    ‚àè    a  *   ‚àà    N   (  v  )    ‚àñ   {  a  }        Œº    a  *   ‚Üí  v     (   x  v   )       .     formulae-sequence     for-all   subscript  x  v      D  o  m  v         subscript  Œº   normal-‚Üí  v  a     subscript  x  v      subscript  product     superscript  a        N  v    a         subscript  Œº   normal-‚Üí   superscript  a    v     subscript  x  v        \forall x_{v}\in Dom(v),\;\mu_{v\to a}(x_{v})=\prod_{a^{*}\in N(v)\setminus\{a%
 \}}\mu_{a^{*}\to v}(x_{v}).         where N ( v ) is the set of neighbouring (factor) nodes to v . If     N   (  v  )    ‚àñ   {  a  }         N  v    a     N(v)\setminus\{a\}   is empty, then     Œº   v  ‚Üí  a     (   x  v   )        subscript  Œº   normal-‚Üí  v  a     subscript  x  v     \mu_{v\to a}(x_{v})   is set to the uniform distribution.    A message from a factor node a to a variable node v is the product of the factor with messages from all other nodes, marginalised over all variables except the one associated with v :            ‚àÄ   x  v    ‚àà   D  o  m   (  v  )     ,     Œº   a  ‚Üí  v     (   x  v   )    =    ‚àë    ùê±  a  ‚Ä≤   :    x  v  ‚Ä≤   =   x  v        f  a    (   ùê±  a  ‚Ä≤   )     ‚àè    v  *   ‚àà    N   (  a  )    ‚àñ   {  v  }        Œº    v  *   ‚Üí  a     (   x   v  *   ‚Ä≤   )         .     formulae-sequence     for-all   subscript  x  v      D  o  m  v         subscript  Œº   normal-‚Üí  a  v     subscript  x  v      subscript    normal-:   subscript   superscript  ùê±  normal-‚Ä≤   a      subscript   superscript  x  normal-‚Ä≤   v    subscript  x  v         subscript  f  a    subscript   superscript  ùê±  normal-‚Ä≤   a     subscript  product     superscript  v        N  a    v         subscript  Œº   normal-‚Üí   superscript  v    a     subscript   superscript  x  normal-‚Ä≤    superscript  v            \forall x_{v}\in Dom(v),\;\mu_{a\to v}(x_{v})=\sum_{\mathbf{x}^{\prime}_{a}:x^%
 {\prime}_{v}=x_{v}}f_{a}(\mathbf{x}^{\prime}_{a})\prod_{v^{*}\in N(a)\setminus%
 \{v\}}\mu_{v^{*}\to a}(x^{\prime}_{v^{*}}).         where N ( a ) is the set of neighbouring (variable) nodes to a . If     N   (  a  )    ‚àñ   {  v  }         N  a    v     N(a)\setminus\{v\}   is empty then      Œº   a  ‚Üí  v     (   x  v   )    =    f  a    (   x  v   )           subscript  Œº   normal-‚Üí  a  v     subscript  x  v       subscript  f  a    subscript  x  v      \mu_{a\to v}(x_{v})=f_{a}(x_{v})   , since in this case     x  v   =   x  a        subscript  x  v    subscript  x  a     x_{v}=x_{a}   .   As shown by the previous formula: the complete marginalisation is reduced to a sum of products of simpler terms than the ones appearing in the full joint distribution. This is the reason why it is called the sum-product algorithm.  In a typical run, each message will be updated iteratively from the previous value of the neighbouring messages. Different scheduling can be used for updating the messages. In the case where the graphical model is a tree, an optimal scheduling allows to reach convergence after computing each messages only once (see next sub-section). When the factor graph has cycles, such an optimal scheduling does not exist, and a typical choice is to update all messages simultaneously at each iteration.  Upon convergence (if convergence happened), the estimated marginal distribution of each node is proportional to the product of all messages from adjoining factors (missing the normalization constant):         p   X  v     (   x  v   )    ‚àù    ‚àè   a  ‚àà   N   (  v  )        Œº   a  ‚Üí  v     (   x  v   )      .     proportional-to     subscript  p   subscript  X  v     subscript  x  v      subscript  product    a    N  v        subscript  Œº   normal-‚Üí  a  v     subscript  x  v       p_{X_{v}}(x_{v})\propto\prod_{a\in N(v)}\mu_{a\to v}(x_{v}).     Likewise, the estimated joint marginal distribution of the set of variables belonging to one factor is proportional to the product of the factor and the messages from the variables:         p   X  a     (   ùê±  a   )    ‚àù    f  a    (   ùê±  a   )     ‚àè   v  ‚àà   N   (  a  )        Œº   v  ‚Üí  a     (   x  v   )       .     proportional-to     subscript  p   subscript  X  a     subscript  ùê±  a       subscript  f  a    subscript  ùê±  a     subscript  product    v    N  a        subscript  Œº   normal-‚Üí  v  a     subscript  x  v        p_{X_{a}}(\mathbf{x}_{a})\propto f_{a}(\mathbf{x}_{a})\prod_{v\in N(a)}\mu_{v%
 \to a}(x_{v}).     In the case where the factor graph is acyclic (i.e. is a tree or a forest), these estimated marginal actually converge to the true marginals in a finite number of iterations. This can be shown by mathematical induction .  Exact algorithm for trees  In the case when the factor graph is a tree , the belief propagation algorithm will compute the exact marginals. Furthermore, with proper scheduling of the message updates, it will terminate after 2 steps. This optimal scheduling can be described as follows:  Before starting, the graph is orientated by designating one node as the root ; any non-root node which is connected to only one other node is called a leaf .  In the first step, messages are passed inwards: starting at the leaves, each node passes a message along the (unique) edge towards the root node. The tree structure guarantees that it is possible to obtain messages from all other adjoining nodes before passing the message on. This continues until the root has obtained messages from all of its adjoining nodes.  The second step involves passing the messages back out: starting at the root, messages are passed in the reverse direction. The algorithm is completed when all leaves have received their messages.  Approximate algorithm for general graphs  Curiously, although it was originally designed for acyclic graphical models, it was found that the Belief Propagation algorithm can be used in general graphs . The algorithm is then sometimes called "loopy" belief propagation, because graphs typically contain cycles , or loops. The initialization and scheduling of message updates must be adjusted slightly (compared with the previously described schedule for acyclic graphs) because graphs might not contain any leaves. Instead, one initializes all variable messages to 1 and uses the same message definitions above, updating all messages at every iteration (although messages coming from known leaves or tree-structured subgraphs may no longer need updating after sufficient iterations). It is easy to show that in a tree, the message definitions of this modified procedure will converge to the set of message definitions given above within a number of iterations equal to the diameter of the tree.  The precise conditions under which loopy belief propagation will converge are still not well understood; it is known that on graphs containing a single loop it converges in most cases, but the probabilities obtained might be incorrect. 6 Several sufficient (but not necessary) conditions for convergence of loopy belief propagation to a unique fixed point exist. 7 There exist graphs which will fail to converge, or which will oscillate between multiple states over repeated iterations. Techniques like EXIT charts can provide an approximate visualisation of the progress of belief propagation and an approximate test for convergence.  There are other approximate methods for marginalization including variational methods and Monte Carlo methods .  One method of exact marginalization in general graphs is called the junction tree algorithm, which is simply belief propagation on a modified graph guaranteed to be a tree. The basic premise is to eliminate cycles by clustering them into single nodes.  Related algorithm and complexity issues  A similar algorithm is commonly referred to as the Viterbi algorithm , but also known as a special case of the max-product or min-sum algorithm, which solves the related problem of maximization, or most probable explanation. Instead of attempting to solve the marginal, the goal here is to find the values   ùê±   ùê±   \mathbf{x}   that maximises the global function (i.e. most probable values in a probabilistic setting), and it can be defined using the arg max :           arg   max   ùê±   g    (  ùê±  )    .        subscript    arg  max   ùê±   g   ùê±    \operatorname*{arg\,max}_{\mathbf{x}}g(\mathbf{x}).     An algorithm that solves this problem is nearly identical to belief propagation, with the sums replaced by maxima in the definitions. 8  It is worth noting that inference problems like marginalization and maximization are NP-hard to solve exactly and approximately (at least for relative error ) in a graphical model. More precisely, the marginalization problem defined above is #P-complete and maximization is NP-complete .  The memory usage of belief propagation can be reduced through the use of the Island algorithm (at a small cost in time complexity).  Relation to free energy  The sum-product algorithm is related to the calculation of free energy in thermodynamics . Let Z be the partition function . A probability distribution       P   (  ùêó  )    =    1  Z     ‚àè   f  j      f  j    (   x  j   )            P  ùêó       1  Z     subscript  product   subscript  f  j       subscript  f  j    subscript  x  j        P(\mathbf{X})=\frac{1}{Z}\prod_{f_{j}}f_{j}(x_{j})     (as per the factor graph representation) can be viewed as a measure of the internal energy present in a system, computed as        E   (  ùêó  )    =   log    ‚àè   f  j      f  j    (   x  j   )       .        E  ùêó        subscript  product   subscript  f  j       subscript  f  j    subscript  x  j        E(\mathbf{X})=\log\prod_{f_{j}}f_{j}(x_{j}).     The free energy of the system is then       F  =   U  -  H   =     ‚àë  ùêó    P   (  ùêó  )   E   (  ùêó  )     +    ‚àë  ùêó    P   (  ùêó  )    log  P    (  ùêó  )       .        F    U  H            subscript   ùêó     P  ùêó  E  ùêó      subscript   ùêó     P  ùêó    P   ùêó        F=U-H=\sum_{\mathbf{X}}P(\mathbf{X})E(\mathbf{X})+\sum_{\mathbf{X}}P(\mathbf{X%
 })\log P(\mathbf{X}).     It can then be shown that the points of convergence of the sum-product algorithm represent the points where the free energy in such a system is minimized. Similarly, it can be shown that a fixed point of the iterative belief propagation algorithm in graphs with cycles is a stationary point of a free energy approximation. 9  Generalized belief propagation (GBP)  Belief propagation algorithms are normally presented as message update equations on a factor graph, involving messages between variable nodes and their neighboring factor nodes and vice versa. Considering messages between regions in a graph is one way of generalizing the belief propagation algorithm. 10 There are several ways of defining the set of regions in a graph that can exchange messages. One method uses ideas introduced by Kikuchi in the physics literature, and is known as Kikuchi's cluster variation method .  Improvements in the performance of belief propagation algorithms are also achievable by breaking the replicas symmetry in the distributions of the fields (messages). This generalization leads to a new kind of algorithm called survey propagation (SP), which have proved to be very efficient in NP-complete problems like satisfiability 11 and graph coloring .  The cluster variational method and the survey propagation algorithms are two different improvements to belief propagation. The name generalized survey propagation (GSP) is waiting to be assigned to the algorithm that merges both generalizations.  Gaussian belief propagation (GaBP)  Gaussian belief propagation is a variant of the belief propagation algorithm when the underlying distributions are Gaussian . The first work analyzing this special model was the seminal work of Weiss and Freeman 12  The GaBP algorithm solves the following marginalization problem:       P   (   x  i   )    =    1  Z     ‚à´   j  ‚â†  i      exp   (    -    1  /  2    x  T   A  x    +    b  T   x    )    d   x  j            P   subscript  x  i        1  Z     subscript     j  i                1  2    superscript  x  T   A  x       superscript  b  T   x     d   subscript  x  j        P(x_{i})=\frac{1}{Z}\int_{j\neq i}\exp(-1/2x^{T}Ax+b^{T}x)\,dx_{j}     where Z is a normalization constant, A is a symmetric positive definite matrix (inverse covariance matrix a.k.a. precision matrix) and b is the shift vector.  Equivalently, it can be shown that using the Gaussian model, the solution of the marginalization problem is equivalent to the MAP assignment problem:          argmax  ùë•    P   (  x  )    =    1  Z    exp   (    -    1  /  2    x  T   A  x    +    b  T   x    )      .         x  argmax   P  x       1  Z             1  2    superscript  x  T   A  x       superscript  b  T   x        \underset{x}{\operatorname{argmax}}\ P(x)=\frac{1}{Z}\exp(-1/2x^{T}Ax+b^{T}x).     This problem is also equivalent to the following minimization problem of the quadratic form:           min  ùë•   1   /  2    x  T   A  x   -    b  T   x    .             x  min   1   2    superscript  x  T   A  x      superscript  b  T   x     \underset{x}{\operatorname{min}}\ 1/2x^{T}Ax-b^{T}x.     Which is also equivalent to the linear system of equations        A  x   =  b   .        A  x   b    Ax=b.     Convergence of the GaBP algorithm is easier to analyze (relatively to the general BP case) and there are two known sufficient convergence conditions. The first one was formulated by Weiss et al. in the year 2000, when the information matrix A is diagonally dominant . The second convergence condition was formulated by Johnson et al. 13 in 2006, when the spectral radius of the matrix       œÅ   (   I  -   |    D   -   1  /  2     A   D   -   1  /  2      |    )    <   1         œÅ    I       superscript  D      1  2     A   superscript  D      1  2         1    \rho(I-|D^{-1/2}AD^{-1/2}|)<1\,     where D = diag( A ). Later, Su and Wu established the necessary and sufficient convergence conditions for synchronous GaBP and damped GaBP, as well as another sufficient convergence condition for asynchronous GaBP. For each case, the convergence condition involves verifying 1) a set (determined by A) being non-empty, 2) the spectral radius of a certain matrix being smaller than one, and 3) the singularity issue (when converting BP message into belief) does not occur. 14  The GaBP algorithm was linked to the linear algebra domain, 15 and it was shown that the GaBP algorithm can be viewed as an iterative algorithm for solving the linear system of equations Ax = b where A is the information matrix and b is the shift vector. Empirically, the GaBP algorithm is shown to converge faster than classical iterative methods like the Jacobi method, the Gauss‚ÄìSeidel method , successive over-relaxation , and others. 16 Additionally, the GaBP algorithm is shown to be immune to numerical problems of the preconditioned conjugate gradient method 17  References  Notes   Frey, Brendan (1998). Graphical Models for Machine Learning and Digital Communication . MIT Press  L√∂liger, Hans-Andrea (2004). An Introduction to Factor Graphs . IEEE Signal Proc. Mag. Vol.21. pages 28‚Äì41  David J.C. MacKay (2003). Exact Marginalization in Graphs. In David J.C. MacKay, Information Theory, Inference, and Learning Algorithms , pp.¬†334‚Äì340. Cambridge: Cambridge University Press.  Mackenzie, Dana (2005). Communication Speed Nears Terminal Velocity New Scientist. 9 July 2005. Issue 2507 (Registration required)     Koch, Volker M. (2007). [ http://www.volker-koch.com/diss/ A Factor Graph Approach to Model-Based Signal Separation ] --- A tutorial-style dissertation   Bickson, Danny. (2009). [ http://www.cs.cmu.edu/~bickson/gabp/index.html Gaussian Belief Propagation Resource Page ] --- Webpage containing recent publications as well as Matlab source code.  Coughlan, James. (2009). [ http://computerrobotvision.org/2009/tutorial_day/crv09_belief_propagation_v2.pdf A Tutorial Introduction to Belief Propagation ].   "  Category:Graph algorithms  Category:Graphical models  Category:Coding theory  Category:Probability theory      ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©   ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  Gaussian belief propagation solver for systems of linear equations. By O. Shental, D. Bickson, P. H. Siegel, J. K. Wolf, and D. Dolev, IEEE Int. Symp. on Inform. Theory (ISIT), Toronto, Canada, July 2008. http://www.cs.huji.ac.il/labs/danss/p2p/gabp/ ‚Ü©  Linear Detection via Belief Propagation. Danny Bickson, Danny Dolev, Ori Shental, Paul H. Siegel and Jack K. Wolf. In the 45th Annual Allerton Conference on Communication, Control, and Computing, Allerton House, Illinois, 7 Sept.. http://www.cs.huji.ac.il/labs/danss/p2p/gabp/ ‚Ü©  Distributed large scale network utility maximization. D. Bickson, Y. Tock, A. Zymnis, S. Boyd and D. Dolev. In the International symposium on information theory (ISIT), July 2009. http://www.cs.huji.ac.il/labs/danss/p2p/gabp/ ‚Ü©     