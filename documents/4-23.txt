


Romberg's method




Romberg's method

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In numerical analysis, Romberg's method  is used to estimate the definite integral



by applying Richardson extrapolation  repeatedly on the trapezium rule or the rectangle rule (midpoint rule). The estimates generate a triangular array. Romberg's method is a Newton–Cotes formula – it evaluates the integrand at equally spaced points. The integrand must have continuous derivatives, though fairly good results may be obtained if only a few derivatives exist. If it is possible to evaluate the integrand at unequally spaced points, then other methods such as Gaussian quadrature and Clenshaw–Curtis quadrature are generally more accurate.
The method is named after  (1909–2003), who published the method in 1955.
Method
The method can be defined inductively









or



where









In big O notation, the error for R(n, m) is :



The zeroeth extrapolation, R(n, 0), is equivalent to the trapezoidal rule with 2n + 1 points; the first extrapolation, R(n, 1), is equivalent to Simpson's rule with 2n + 1 points. The second extrapolation, R(n, 2), is equivalent to Boole's rule with 2n + 1 points. Further extrapolations differ from Newton Cotes formulas. In particular further Romberg extrapolations expand on Boole's rule in very slight ways, modifying weights into ratios similar as in Boole's rule. In contrast, further Newton Cotes methods produce increasingly differing weights, eventually leading to large positive and negative weights. This is indicative of how large degree interpolating polynomial Newton Cotes methods fail to converge for many integrals, while Romberg integration is more stable.
When function evaluations are expensive, it may be preferable to replace the polynomial interpolation of Richardson with the rational interpolation proposed by .
A geometric example
To estimate the area under a curve the trapezoid rule is applied first to one-piece, then two, then four, and so on.
 
After trapezoid rule estimates are obtained Richardson extrapolation is applied

For the first iteration the two piece and one piece estimates are used in the formula (4 X (more accurate) - (less accurate))/3 The same formula is then used to compare the four piece and the two piece estimate, and likewise for the higher estimates


For the second iteration the values of the first iteration are used in the formula (16(more accurate)-less accurate)/15


The third iteration uses the next power of 4: (64 (More accurate) - less accurate)/63 on the values derived by the second iteration.


The pattern is continued until there is one estimate.





Number of pieces

Trapezoid estimates

First iteration

'''second iteration

third iteration





(4MA-LA)/3*

(16MA-LA)/15

(64MA-LA)/63



1

0

(4*480-0)/3 = 640

(16*880-640)/15 =896

(64*1015.11-896)/63 = 1017.002



2

480

(4*780-480)/3 = 880

(16*1006.67-880)/15 = 1015.11..




4

780

(4*950-780)/3 =1006.666..





8

950











MA stands for more accurate, LA stands for less accurate

Example
As an example, the Gaussian function is integrated from 0 to 1, i.e. the error function erf(1) ≈ 0.842700792949715. The triangular array is calculated row by row and calculation is terminated if the two last entries in the last row differ less than 10−8.

  0.77174333
  0.82526296  0.84310283
  0.83836778  0.84273605  0.84271160
  0.84161922  0.84270304  0.84270083  0.84270066
  0.84243051  0.84270093  0.84270079  0.84270079  0.84270079
 
The result in the lower right corner of the triangular array is accurate to the digits shown. It is remarkable that this result is derived from the less accurate approximations obtained by the trapezium rule in the first column of the triangular array.
Implementation
Here is an example of a computer implementation of the Romberg method (in the C programming language). It needs one vector and one variable, as well as a sub-routine Trap:
 #include 
  #include 
  #include  
 
 int main()
 {   
     const int MAX = 6;
     double s[MAX];
     int i,k;
     double var ;
     for (i = 1; i< MAX; i++)
         s[i] = 1;
  
     for (k=1; k< MAX; k++)
     {
         for (i=1; i <=k; i++)
         {
             if (i==1)
             {
                 var = s[i];
                 s[i] = Trap(0, 1, pow(2, k-1));     // sub-routine Trap
             }                                       // integrated from 0 and 1
                                                     /* pow() is the number of subdivisions*/
             else
             {
                 s[k]= ( pow(4 , i-1)*s[i-1]-var )/(pow(4, i-1) - 1); 
                                                                  
                 var = s[i];
                 s[i]= s[k];  
             }
             printf ("  %f  ", s[i]);
         }
         printf ("\n");
     }
 
     return 0;
 }
 
References









External links

[http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=34&objectType;;=file ROMBINT] – code for MATLAB (author: Martin Kacenak)
Module for Romberg integration
Free online integration tool using Romberg, Fox–Romberg, Gauss–Legendre and other numerical methods

"
Category:Numerical integration (quadrature) Category:Articles with example C code
