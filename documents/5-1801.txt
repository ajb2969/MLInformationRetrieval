   Liang–Barsky algorithm      Liang–Barsky algorithm   In computer graphics , the Liang–Barsky algorithm (named after You-Dong Liang and Brian A. Barsky ) is a line clipping algorithm. The Liang–Barsky algorithm uses the parametric equation of a line and inequalities describing the range of the clipping window to determine the intersections between the line and the clipping window. With these intersections it knows which portion of the line should be drawn. This algorithm is significantly more efficient than Cohen–Sutherland .  The idea of the Liang-Barsky clipping algorithm is to do as much testing as possible before computing line intersections. Consider first the usual parametric form of a straight line:      x  =    x  0   +   u   (    x  1   -   x  0    )     =    x  0   +   u  Δ  x          x     subscript  x  0     u     subscript  x  1    subscript  x  0              subscript  x  0     u  normal-Δ  x       x=x_{0}+u(x_{1}-x_{0})=x_{0}+u\Delta x\,\!         y  =    y  0   +   u   (    y  1   -   y  0    )     =    y  0   +   u  Δ  y          y     subscript  y  0     u     subscript  y  1    subscript  y  0              subscript  y  0     u  normal-Δ  y       y=y_{0}+u(y_{1}-y_{0})=y_{0}+u\Delta y\,\!     A point is in the clip window, if       x  min   ≤    x  0   +   u  Δ  x    ≤   x  max          subscript  x  min      subscript  x  0     u  normal-Δ  x          subscript  x  max      x_{\text{min}}\leq x_{0}+u\Delta x\leq x_{\text{max}}\,\!   and       y  min   ≤    y  0   +   u  Δ  y    ≤   y  max          subscript  y  min      subscript  y  0     u  normal-Δ  y          subscript  y  max      y_{\text{min}}\leq y_{0}+u\Delta y\leq y_{\text{max}}\,\!   , which can be expressed as the 4 inequalities        u   p  k    ≤   q  k    ,   k  =   1  ,  2  ,  3  ,  4       formulae-sequence      u   subscript  p  k     subscript  q  k      k   1  2  3  4      up_{k}\leq q_{k},\quad k=1,2,3,4\,\!   , where        p  1   =   -   Δ  x     ,    q  1   =    x  0   -   x  min        formulae-sequence     subscript  p  1       normal-Δ  x        subscript  q  1      subscript  x  0    subscript  x  min       p_{1}=-\Delta x,q_{1}=x_{0}-x_{\text{min}}\,\!   (left)        p  2   =   Δ  x    ,    q  2   =    x  max   -   x  0        formulae-sequence     subscript  p  2     normal-Δ  x       subscript  q  2      subscript  x  max    subscript  x  0       p_{2}=\Delta x,q_{2}=x_{\text{max}}-x_{0}\,\!   (right)        p  3   =   -   Δ  y     ,    q  3   =    y  0   -   y  min        formulae-sequence     subscript  p  3       normal-Δ  y        subscript  q  3      subscript  y  0    subscript  y  min       p_{3}=-\Delta y,q_{3}=y_{0}-y_{\text{min}}\,\!   (bottom)        p  4   =   Δ  y    ,    q  4   =    y  max   -   y  0        formulae-sequence     subscript  p  4     normal-Δ  y       subscript  q  4      subscript  y  max    subscript  y  0       p_{4}=\Delta y,q_{4}=y_{\text{max}}-y_{0}\,\!   (top)  To compute the final line segment:   A line parallel to a clipping window edge has     p  k   =  0       subscript  p  k   0    p_{k}=0   for that boundary.  If for that   k   k   k   ,     q  k   <  0       subscript  q  k   0    q_{k}<0   , the line is completely outside and can be eliminated.  When     p  k   <  0       subscript  p  k   0    p_{k}<0   the line proceeds outside to inside the clip window and when     p  k   >  0       subscript  p  k   0    p_{k}>0   , the line proceeds inside to outside.  For nonzero    p  k     subscript  p  k    p_{k}   ,    u  =    q  k    p  k        u     subscript  q  k    subscript  p  k      u=\frac{q_{k}}{p_{k}}   gives the intersection point.  For each line, calculate    u  1     subscript  u  1    u_{1}   and    u  2     subscript  u  2    u_{2}   . For    u  1     subscript  u  1    u_{1}   , look at boundaries for which     p  k   <  0       subscript  p  k   0    p_{k}<0   (i.e. outside to inside). Take    u  1     subscript  u  1    u_{1}   to be the largest among    {  0  ,    q  k    p  k    }     0     subscript  q  k    subscript  p  k      \left\{0,\frac{q_{k}}{p_{k}}\right\}   . For    u  2     subscript  u  2    u_{2}   , look at boundaries for which     p  k   >  0       subscript  p  k   0    p_{k}>0   (i.e. inside to outside). Take    u  2     subscript  u  2    u_{2}   to be the minimum of    {  1  ,    q  k    p  k    }     1     subscript  q  k    subscript  p  k      \left\{1,\frac{q_{k}}{p_{k}}\right\}   . If     u  1   >   u  2        subscript  u  1    subscript  u  2     u_{1}>u_{2}   , the line is outside and therefore rejected.   See also  Algorithms used for the same purpose:   Cyrus–Beck  Nicholl–Lee–Nicholl  Fast-clipping   References   Liang, Y.D., and Barsky, B., "A New Concept and Method for Line Clipping", ACM Transactions on Graphics , 3(1):1-22, January 1984.  Liang, Y.D., B.A., Barsky, and M. Slater, Some Improvements to a Parametric Line Clipping Algorithm , CSD-92-688, Computer Science Division, University of California, Berkeley, 1992.  James D. Foley. Computer graphics: principles and practice . Addison-Wesley Professional, 1996. p. 117.   External links   http://hinjang.com/articles/04.html   "  Category:Clipping (computer graphics)   