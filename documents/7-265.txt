   Shanks' square forms factorization      Shanks' square forms factorization   Shanks's square forms factorization is a method for integer factorization devised by Daniel Shanks as an improvement on Fermat's factorization method .  The success of Fermat's method depends on finding integers   x   x   x   and   y   y   y   such that      x  2   -   y  2    =  N         superscript  x  2    superscript  y  2    N    x^{2}-y^{2}=N   , where   N   N   N   is the integer to be factored. An improvement (noticed by Kraitchik ) is to look for integers   x   x   x   and   y   y   y   such that     x  2   ≡    y  2      (   mod  N   )         superscript  x  2    annotated   superscript  y  2    pmod  N      x^{2}\equiv y^{2}\;\;(\mathop{{\rm mod}}N)   . Finding a suitable pair    (  x  ,  y  )     x  y    (x,y)   does not guarantee a factorization of   N   N   N   , but it implies that   N   N   N   is a factor of      x  2   -   y  2    =    (   x  -  y   )    (   x  +  y   )           superscript  x  2    superscript  y  2        x  y     x  y      x^{2}-y^{2}=(x-y)(x+y)   , and there is a good chance that the prime divisors of   N   N   N   are distributed between these two factors, so that calculation of the greatest common divisor of   N   N   N   and    x  -  y      x  y    x-y   will give a non-trivial factor of   N   N   N   .  A practical algorithm for finding pairs    (  x  ,  y  )     x  y    (x,y)   which satisfy     x  2   ≡    y  2      (   mod  N   )         superscript  x  2    annotated   superscript  y  2    pmod  N      x^{2}\equiv y^{2}\;\;(\mathop{{\rm mod}}N)   was developed by Shanks, who named it Square Forms Factorization or SQUFOF. The algorithm can be expressed in terms of continued fractions, or in terms of quadratic forms. Although there are now much more efficient factorization methods available, SQUFOF has the advantage that it is small enough to be implemented on a programmable calculator.  Algorithm  Input    N   N   N   , the integer to be factored, which must be neither a prime number nor a perfect square , and a small multiplier   k   k   k   .  Output : a non-trivial factor of   N   N   N   .  The algorithm:  Initialize       P  0   =   ⌊    k  N    ⌋    ,     Q  0   =  1   ,    Q  1   =    k  N   -   P  0  2       .     formulae-sequence     subscript  P  0         k  N       formulae-sequence     subscript  Q  0   1      subscript  Q  1       k  N    superscript   subscript  P  0   2        P_{0}=\lfloor\sqrt{kN}\rfloor,Q_{0}=1,Q_{1}=kN-P_{0}^{2}.     Repeat        b  i   =   ⌊     ⌊    k  N    ⌋   +   P   i  -  1      Q  i    ⌋    ,     P  i   =     b  i    Q  i    -   P   i  -  1      ,    Q   i  +  1    =    Q   i  -  1    +    b  i    (    P   i  -  1    -   P  i    )          formulae-sequence     subscript  b  i               k  N      subscript  P    i  1      subscript  Q  i       formulae-sequence     subscript  P  i        subscript  b  i    subscript  Q  i     subscript  P    i  1         subscript  Q    i  1       subscript  Q    i  1       subscript  b  i      subscript  P    i  1     subscript  P  i          b_{i}=\left\lfloor\frac{\lfloor\sqrt{kN}\rfloor+P_{i-1}}{Q_{i}}\right\rfloor,P%
 _{i}=b_{i}Q_{i}-P_{i-1},Q_{i+1}=Q_{i-1}+b_{i}(P_{i-1}-P_{i})     until    Q  i     subscript  Q  i    Q_{i}   is a perfect square at some even   i   i   i   .  Initialize      b  0   =   ⌊     ⌊    k  N    ⌋   -   P   i  -  1       Q  i     ⌋    ,     P  0   =     b  0     Q  i     +   P   i  -  1      ,     Q  0   =    Q  i     ,    Q  1   =     k  N   -   P  0  2     Q  0          formulae-sequence     subscript  b  0               k  N      subscript  P    i  1        subscript  Q  i        formulae-sequence     subscript  P  0        subscript  b  0      subscript  Q  i      subscript  P    i  1       formulae-sequence     subscript  Q  0      subscript  Q  i        subscript  Q  1         k  N    superscript   subscript  P  0   2     subscript  Q  0         b_{0}=\left\lfloor\frac{\lfloor\sqrt{kN}\rfloor-P_{i-1}}{\sqrt{Q_{i}}}\right%
 \rfloor,P_{0}=b_{0}\sqrt{Q_{i}}+P_{i-1},Q_{0}=\sqrt{Q_{i}},Q_{1}=\frac{kN-P_{0%
 }^{2}}{Q_{0}}     Repeat        b  i   =   ⌊     ⌊    k  N    ⌋   +   P   i  -  1      Q  i    ⌋    ,     P  i   =     b  i    Q  i    -   P   i  -  1      ,    Q   i  +  1    =    Q   i  -  1    +    b  i    (    P   i  -  1    -   P  i    )          formulae-sequence     subscript  b  i               k  N      subscript  P    i  1      subscript  Q  i       formulae-sequence     subscript  P  i        subscript  b  i    subscript  Q  i     subscript  P    i  1         subscript  Q    i  1       subscript  Q    i  1       subscript  b  i      subscript  P    i  1     subscript  P  i          b_{i}=\left\lfloor\frac{\lfloor\sqrt{kN}\rfloor+P_{i-1}}{Q_{i}}\right\rfloor,P%
 _{i}=b_{i}Q_{i}-P_{i-1},Q_{i+1}=Q_{i-1}+b_{i}(P_{i-1}-P_{i})     until      P  i   =   P   i  -  1     .       subscript  P  i    subscript  P    i  1      P_{i}=P_{i-1}.     Then if    f  =   gcd   (  N  ,   P  i   )        f    N   subscript  P  i      f=\gcd(N,P_{i})   is not equal to   1   1   1   and not equal to   N   N   N   , then   f   f   f   is a non-trivial factor of   N   N   N   . Otherwise try another value of   k   k   k   .  Shanks's method has time complexity    O   (   N  4   )       O     4   N     O(\sqrt[4]{N})   .  Stephen S. McMasters (see link in External Link section) wrote a more detailed discussion of the mathematics of Shanks's method, together with a proof of its correctness.  Example  N = 11111, k = 1  P 0 = 105 Q 0 = 1 Q 1 = 86  P 1 = 67 Q 1 = 86 Q 2 = 77  P 2 = 87 Q 2 = 77 Q 3 = 46  P 3 = 97 Q 3 = 46 Q 4 = 37  P 4 = 88 Q 4 = 37 Q 5 = 91  P 5 = 94 Q 5 = 91 Q 6 = 25  Here Q 6 is a perfect square  P 0 = 104 Q 0 = 5 Q 1 = 59  P 1 = 73 Q 1 = 59 Q 2 = 98  P 2 = 25 Q 2 = 98 Q 3 = 107  P 3 = 82 Q 3 = 107 Q 4 = 41  P 4 = 82  Here P 3 = P 4  gcd(11111, 82) = 41, which is a factor of 11111.  References       External links   Daniel Shanks: Analysis and Improvement of the Continued Fraction Method of Factorization , (transcribed by S. McMath 2004)  Daniel Shanks: SQUFOF Notes , (transcribed by S. McMath 2004)  Stephen McMath: [ http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.107.9984&rep; ;=rep1&type;=pdf Daniel Shanks’s Square Forms Factorization] (Nov. 2004)  Stephen S. McMath: Parallel integer factorization using quadratic forms , 2005  S. McMath, F. Crabbe, D. Joyner: Continued fractions and parallel SQUFOF , 2005  Jason Gower, Samuel Wagstaff: Square Form Factorisation  Shanks' SQUFOF Factoring Algorithm   "  Category:Integer factorization algorithms   