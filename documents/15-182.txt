


Kinetic priority queue




Kinetic priority queue

A Kinetic Priority Queue is an abstract kinetic data structure. It is a variant of a priority queue designed to maintain the maximum (or minimum) priority element (key-value pair) when the priority of every element is changing as a continuous function of time. Kinetic priority queues have been used as components of several kinetic data structures, as well as to solve some important non-kinetic problems such as the k-set problem and the connected red blue segments intersection problem.
Implementations
The operations supported are:

: create an empty kinetic priority queue 
 (or find-min): - return the 
 
 
 
  (or 
 
 
 
  for a 
 
 
 
 ) value stored in the queue  at the current virtual time .
: - insert a key  into the kinetic queue at the current virtual time, whose value changes as a continuous function  of time .
 - delete a key  at the current virtual time .

There are several variants of kinetic priority queues, which support the same basic operations but have different performance guarantees. Some of the most common implementations are kinetic heaps which are simple to implement but don't have tight theoretical performance bounds, and their randomized variants - kinetic heaters and kinetic hangers - which are easier to analyze. There is also a heap-like structure based on the dynamic convex hull data structure1 which achieves better performance for affine motion of the priorities, but doesn't support curved trajectories. The kinetic tournament is another commonly used implementation. It achieves, deterministically, the same performance bounds as the heater or hanger, however it is less local and responsive than the heap-based data-structures.




Time complexities of kinetic priority queue implementations 2

Trajectory of element priorities

Kinetic heap

Kinetic hanger, heater & tournament

Dynamic convex hull



Lines















Line segments

















 
 -intersecting curves









n/a



Here, 
 
 
 
  denotes the inverse Ackermann function.
 
 
 
 -intersecting curves refer to curves where each pair has at most 
 
 
 
  intersections, and 
 
 
 
  refers to a term in the Davenport-Schinzel sequence, which gives the maximum size of the upper envelope of 
 
 

 
 intersecting curves. 
 
 
 
  is the largest number of elements in the queue at any given time, while 
 
 
 
  refers to the total number of elements that are ever in the queue.
Applications
Kinetic priority queues are used as part of other kinetic data structures/algorithms such as kinetic closest pair, kinetic max-cut3 or kinetic clustering.4
They can also be used to solve problems such as broadcast scheduling5 or the connected red blue segments intersection problem.6
References
"
Category:Articles created via the Article Wizard Category:Kinetic data structures Category:Abstract data types Category:Priority queues













