


Modular exponentiation




Modular exponentiation

Modular exponentiation is a type of exponentiation performed over a modulus. It is useful in computer science, especially in the field of public-key cryptography.
The operation of modular exponentiation calculates the remainder when an integer b (the base) raised to the eth power (the exponent), be, is divided by a positive integer m (the modulus). In symbols, given base b, exponent e, and modulus m, the modular exponentiation c is: ).
For example, given ,  and , the solution  is the remainder of dividing 53 = 125 by 13.
Given integers b and e, and a positive integer m, a unique solution c exists with the property .
Modular exponentiation can be performed with a negative exponent e by finding the modular multiplicative inverse d of b modulo m using the extended Euclidean algorithm. That is:

 
  where  and 
 
 

Modular exponentiation similar to the one described above are considered easy to compute, even when the numbers involved are enormous. On the other hand, computing the discrete logarithm – that is, the task of finding the exponent e when given b, c, and m – is believed to be difficult. This one-way function behavior makes modular exponentiation a candidate for use in cryptographic algorithms.
Straightforward method
The most straightforward method of calculating a modular exponent is to calculate be directly, then to take this number modulo m. Consider trying to compute c, given b = 4, e = 13, and m = 497:


One could use a calculator to compute 413; this comes out to 67,108,864. Taking this value modulo 497, the answer c is determined to be 445.
Note that b is only one digit in length and that e is only two digits in length, but the value be is 8 digits in length.
In strong cryptography, b is often at least 256 binary digits (77 decimal digits). Consider b = 5 × 1076 and e = 17, both of which are perfectly reasonable values. In this example, b is 77 digits in length and e is 2 digits in length, but the value be is 1,304 decimal digits in length. Such calculations are possible on modern computers, but the sheer magnitude of such numbers causes the speed of calculations to slow considerably. As b and e increase even further to provide better security, the value be becomes unwieldy.
The time required to perform the exponentiation depends on the operating environment and the processor. The method described above requires O(e) multiplications to complete.
Memory-efficient method
A second method to compute modular exponentiation requires more operations than the first method. Because the required memory is substantially less, however, operations take less time than before. The end result is that the algorithm is faster.
This algorithm makes use of the fact that, given two integers a and b, the following two equations are equivalent:





The algorithm is as follows:

Set c = 1, e′ = 0.
Increase e′ by 1.
Set 
 
 
 
 .
If e′ c \equiv b^e \pmod{m}.

Note that in every pass through step 3, the equation 
 
 
 
  holds true. When step 3 has been executed e times, then, c contains the answer that was sought. In summary, this algorithm basically counts up e′ by ones until e′ reaches e, doing a multiply by b and the modulo operation each time it adds one (to ensure the results stay small).
The example b = 4, e = 13, and m = 497 is presented again. The algorithm passes through step 3 thirteen times:

e′ = 1. c = (1 ⋅ 4) mod 497 = 4 mod 497 = 4.
e′ = 2. c = (4 ⋅ 4) mod 497 = 16 mod 497 = 16.
e′ = 3. c = (16 ⋅ 4) mod 497 = 64 mod 497 = 64.
e′ = 4. c = (64 ⋅ 4) mod 497 = 256 mod 497 = 256.
e′ = 5. c = (256 ⋅ 4) mod 497 = 1024 mod 497 = 30.
e′ = 6. c = (30 ⋅ 4) mod 497 = 120 mod 497 = 120.
e′ = 7. c = (120 ⋅ 4) mod 497 = 480 mod 497 = 480.
e′ = 8. c = (480 ⋅ 4) mod 497 = 1920 mod 497 = 429.
e′ = 9. c = (429 ⋅ 4) mod 497 = 1716 mod 497 = 225.
e′ = 10. c = (225 ⋅ 4) mod 497 = 900 mod 497 = 403.
e′ = 11. c = (403 ⋅ 4) mod 497 = 1612 mod 497 = 121.
e′ = 12. c = (121 ⋅ 4) mod 497 = 484 mod 497 = 484.
e′ = 13. c = (484 ⋅ 4) mod 497 = 1936 mod 497 = 445.

The final answer for c is therefore 445, as in the first method.
Like the first method, this requires O(e) multiplications to complete. However, since the numbers used in these calculations are much smaller than the numbers used in the first algorithm's calculations, the computation time decreases by a factor of at least O(e) in this method.
In pseudocode, this method can be performed the following way:
function modular_pow(base, exponent, modulus)
    c := 1
    for e_prime = 1 to exponent 
        c := (c * base) mod modulus
    return c
Right-to-left binary method
A third method drastically reduces the number of operations to perform modular exponentiation, while keeping the same memory footprint as in the previous method. It is a combination of the previous method and a more general principle called exponentiation by squaring (also known as binary exponentiation).
First, it is required that the exponent e be converted to binary notation. That is, e can be written as:


In such notation, the length of e is n bits. ai can take the value 0 or 1 for any i such that 0 ≤ i n - 1 = 1.
The value be can then be written as:


The solution c is therefore:



The following is an example in pseudocode based on Applied Cryptography by Bruce Schneier.1 The inputs base, exponent, and modulus correspond to b, e, and m in the equations given above.
function modular_pow(base, exponent, modulus)
    Assert :: (modulus - 1) * (modulus - 1) does not overflow base
    result := 1
    base := base mod modulus
    while exponent > 0
        if (exponent mod 2 == 1):
           result := (result * base) mod modulus
        exponent := exponent >> 1
        base := (base * base) mod modulus
    return result
Note that upon entering the loop for the first time, the code variable base is equivalent to 
 
 
 
 . However, the repeated squaring in the third line of code ensures that at the completion of every loop, the variable base is equivalent to 
 
 
 
 , where i is the number of times the loop has been iterated. (This makes i the next working bit of the binary exponent exponent, where the least-significant bit is exponent0).
The first line of code simply carries out the multiplication in 
 
 
 
 . If ai is zero, no code executes since this effectively multiplies the running total by one. If ai instead is one, the variable base (containing the value 
 
 
 
  of the original base) is simply multiplied in.
Example: base = 4, exponent = 13, and modulus = 497. Note that exponent is 1101 in binary notation. Because exponent is four binary digits in length, the loop executes only four times:

Upon entering the loop for the first time, variables base = 4, exponent = 1101 (binary), and result = 1. Because the right-most bit of exponent is 1, result is changed to be (1 * 4)% 497, or 4. exponent is right-shifted to become 110 (binary), and base is squared to be (4 * 4)% 497, or 16.
The second time through the loop, the right-most bit of exponent is 0, causing result to retain its present value of 4. exponent is right-shifted to become 11 (binary), and base is squared to be (16 * 16)% 497, or 256.
The third time through the loop, the right-most bit of e is 1. result is changed to be (4 * 256)% 497, or 30. exponent is right-shifted to become 1, and base is squared to be (256 * 256)% 497, or 429.
The fourth time through the loop, the right-most bit of exponent is 1. result is changed to be (30 * 429)% 497, or 445. exponent is right-shifted to become 0, and base is squared to be (429 * 429)% 497, or 151.

The loop then terminates since exponent is zero, and the result 445 is returned. This agrees with the previous two algorithms.
The running time of this algorithm is O(log exponent). When working with large values of exponent, this offers a substantial speed benefit over both of the previous two algorithms.
Matrices
The Fibonacci numbers modulo n can be computed efficiently by computing Am (mod n) for a certain m and a certain matrix A. The above methods adapt easily to this application. This provides a very good primality test for large--say 500-bit--numbers n.
Pseudocode
A Recursive Algorithm for ModExp(A, b, c) = Ab (mod c), where A is a square matrix.
function Matrix_ModExp(Matrix A, int b, int c)
   if (b == 0):
         return I  // The identity matrix
   if (b mod 2 == 1):
         return (A * Matrix_ModExp(A, b - 1, c)) mod c 
   Matrix D := Matrix_ModExp(A, b / 2, c)
   return (D * D) mod c
Finite cyclic groups
Diffie-Hellman key exchange uses exponentiation in finite cyclic groups. The above methods for modular matrix exponentiation clearly extend to this context. The modular matrix multiplication  is simply replaced everywhere by the group multiplication .
Reversible and quantum modular exponentiation
In quantum computing, modular exponentiation appears as the bottleneck of Shor's algorithm, where it must be computed by a circuit consisting of reversible gates, which can be further broken down into quantum gates appropriate for a specific physical device. Furthermore, in Shor's algorithm it is possible to know the base and the modulus of exponentiation at every call, which enables various circuit optimizations.2
In programming languages
Because modular exponentiation is an important operation in computer science, and there are efficient algorithms (see above) that are much faster than simply exponentiating and then taking the remainder, many programming languages and arbitrary-precision integer libraries have a dedicated function to perform modular exponentiation:

Python's built-in pow() (exponentiation) function 1 takes an optional third argument which is the number to modulo by
.NET Framework's BigInteger class has a ModPow() method to perform modular exponentiation
Java's java.math.BigInteger class has a  method to perform modular exponentiation
Perl's Math::BigInt module has a bmodpow() method 2 to perform modular exponentiation
Go's big.Int type contains an Exp() (exponentiation) method 3 whose third parameter, if non-nil, is the number to modulo by
PHP's BC Math library has a bcpowmod() function 4 to perform modular exponentiation
The GNU Multiple Precision Arithmetic Library (GMP) library contains a mpz_powm() function 5 to perform modular exponentiation
Custom Function [http://www.briandunning.com/cf/1482 @PowerMod()] for FileMaker Pro (with 1024-bit RSA encryption example)

See also

Montgomery reduction, for calculating the remainder when the modulus is very large.

References



External links

Fast Modular Exponentiation Java Applet - University of Minnesota Math Department

"
Category:Cryptographic algorithms Category:Number theoretic algorithms Category:Modular arithmetic



Schneier 1996, p. 244.
Igor L. Markov, Mehdi Saeedi, "Constant-Optimized Quantum Circuits for Modular Multiplication and Exponentiation", Quantum Information and Computation, Vol. 12, No. 5&6, pp. 0361-0394, 2012.http://arxiv.org/abs/1202.6614




