


Active contour model




Active contour model

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Active contour model, also called snakes, is a framework in computer vision for delineating an object outline from a possibly noisy 2D image. The snakes model is popular in computer vision, and snakes are greatly used in applications like object tracking, shape recognition, segmentation, edge detection and stereo matching.
A snake is an energy minimizing, deformable spline influenced by constraint and image forces that pull it towards object contours and internal forces that resist deformation. Snakes may be understood as a special case of the general technique of matching a deformable model to an image by means of energy minimization.1 In two dimensions, the active shape model represents a discrete version of this approach, taking advantage of the point distribution model to restrict the shape range to an explicit domain learned from a training set. 
Snakes do not solve the entire problem of finding contours in images, since the method requires knowledge of the desired contour shape beforehand. Rather, they depend on other mechanisms such as interaction with a user, interaction with some higher level image understanding process, or information from image data adjacent in time or space.
Motivation
In computer vision, contour models describe the boundaries of shapes in an image. Snakes in particular are designed to solve problems where the approximate shape of the boundary is known. By being a deformable model, snakes can adapt to differences and noise in stereo matching and motion tracking. Additionally, the method can find Illusory contours in the image by ignoring missing boundary information.
Compared to classical feature attraction techniques, snakes have multiple advantages:

They autonomously and adaptively search for the minimum state.
External image forces act upon the snake in an intuitive manner.
Incorporating Gaussian smoothing in the image energy function introduces scale sensitivity.
They can be used to track dynamic objects.

The key drawbacks of the traditional snakes are

They are sensitive to local minima states, which can be counteracted by simulated annealing techniques.
Minute features are often ignored during energy minimization over the entire contour.
Their accuracy depends on the convergence policy.2

Energy formulation
A simple elastic snake is defined by a set of n points 
 
 
 
  where 
 
 
 
 , the internal elastic energy term 
 
 
 
 , and the external edge-based energy term 
 
 
 
 . The purpose of the internal energy term is to control the deformations made to the snake, and the purpose of the external energy term is to control the fitting of the contour onto the image. The external energy is usually a combination of the forces due to the image itself 
 
 
 
  and the constraint forces introduced by the user 
 
 

The energy function of the snake is the sum of its external energy and internal energy, or



Internal energy
The internal energy of the snake is composed of the continuity of the contour 
 
 
 
  and the smoothness of the contour 
 
 
 
 .


3
This can be expanded as



Where 
 
 
 
  and 
 
 
 
  are user-defined weights; these control the internal energy function's sensitivity to the amount of stretch in the snake and the amount of curvature in the snake, respectively, and thereby control the number of constraints on the shape of the snake.
In practice, a large weight 
 
 
 
  for the continuity term penalizes changes in distances between points in the contour. A large weight 
 
 
 
  for the smoothness term penalizes oscillations in the contour and will cause the contour to act as a thin plate.
Image energy
Energy in the image is some function of the features of the image. This is one of the most common points of modification in derivative methods. Features in images and images themselves can be processed in many and various ways.
For an image 
 
 
 
 , lines, edges, and terminations present in the image, the general formulation of energy due to the image is


 
 ,
where 
 
 
 
 , 
 
 
 
 , 
 
 
 
  are weights of these salient features. Higher weights indicate that the salient feature will have a larger contribution to the image force.
Line functional
The line functional is the intensity of the image, which can be represented as



The sign of 
 
 
 
  will determine whether the line will be attracted to either dark lines or light lines.
Some smoothing or noise reduction may be used on the image, which then the line functional appears as



Edge functional
The edge functional is based on the image gradient. One implementation of this is



A snake originating far from the desired object contour may erroneously converge to some local minimum. Scale space continuation can be used in order to avoid these local minima. This is achieved by using a blur filter on the image and reducing the amount of blur as the calculation progresses to refine the fit of the snake. The energy functional using scale space continuation is



where 
 
 
 
  is a Gaussian with standard deviation 
 
 
 
 . Minima of this function fall on the zero-crossings of 
 
 
 
  which define edges as per Marrâ€“Hildreth theory.
Termination functional
Curvature of level lines in a slightly smoothed image can be used to detect corners and terminations in an image. Using this method, let 
 
 
 
  be the image smoothed by



with gradient angle


 
 ,
unit vectors along the gradient direction


 
 ,
and unit vectors perpendicular to the gradient direction


 
 .
The termination functional of energy can be represented as



Constraint energy
Some systems, including the original snakes implementation, allowed for user interaction to guide the snakes, not only in initial placement but also in their energy terms. Such constraint energy 
 
 
 
  can be used to interactively guide the snakes towards or away from particular features.
Optimization through gradient descent
Given an initial guess for a snake, the energy function of the snake is iteratively minimized. Gradient descent minimization is one of the simplest optimizations which can be used to minimize snake energy.4 Each iteration takes one step in the negative gradient of the point with controlled step size 
 
 
 
  to find local minima. This gradient-descent minimization can be implemented as



Where 
 
 
 
  is the force on the snake, which is defined by the negative of the gradient of the energy field.



Assuming the weights 
 
 
 
  and 
 
 
 
  are constant with respect to 
 
 
 
 , this iterative method can be simplified to



Discrete approximation
In practice, images have finite resolution and can only be integrated over finite time steps 
 
 
 
 . As such, discrete approximations must be made for practical implementation of snakes.
The energy function of the snake can be approximated by using the discrete points on the snake.



Consequentially, the forces of the snake can be approximated as



Gradient approximation can be done through any finite approximation method with respect to s, such as Finite difference.
Numerical instability due to discrete time
The introduction of discrete time into the algorithm can introduce updates which the snake is moved past the minima it is attracted to; this further can cause oscillations around the minima or lead to a different minima being found.
This can be avoided through tuning the time step such that the step size is never greater than a pixel due to the image forces. However, in regions of low energy, the internal energies will dominate the update.
Alternatively, the image forces can be normalized for each step such that the image forces only update the snake by one pixel. This can be formulated as



where 
 
 
 
  is near the value of the pixel size. This avoids the problem of dominating internal energies that arise from tuning the time step.5
Numerical instability due to discrete space
The energies in a continuous image may have zero-crossing that do not exist as a pixel in the image. In this case, a point in the snake would oscillate between the two pixels that neighbor this zero-crossing. This oscillation can be avoided by using interpolation between pixels instead of nearest neighbor.6
Implementation
The following pseudocode implements the snakes method in a general form

 function v = snakes (I, v)
   % INPUT: N by M image I, a contour v of n control points
   % OUTPUT: converged contour v of n control points
 
   E_image = generateImageEnergy (I);
 
   while not converged
     F_cont = weight.alpha * contourDerivative(v, 2);
     F_curv = weight.beta * contourDerivative(v, 4);
     F_image = interp2 (E_image, v(:,2), v(:,1);
     F_image_norm = weight.k * F_image ./ norm (F_image);
     F_con = inputForces();
 
     F_internal = F_cont + weight.external * F_curv;
     F_external = weight.external * (F_image + F_con);
 
     v = updateSnake(v, F_internal, F_external);
 
     checkConvergence ();
   end
 
 end
Where generateImageEnergy (I) can be written as
function E_image = generateImageEnergy (I)
   [C, Cx, Cy, Cxx, Cxy, Cyy] = generateGradients (I);
 
   E_line = I;
   E_edge = -(Cx.^2 + Cy.^2)^0.5;
   E_term = (Cyy.*Cx.^2 - 2*Cxy.*Cx.*Cy + Cxx.*Cy.^2)./((1 + Cx.^2 + Cy.^2).^(1.5));
 
   E_image = weight.line * E_line + weight.edge * E_edge + weight.term * E_term;
 end
Some variants of snakes
The default method of snakes has various limitation and corner cases where the convergence performs poorly. Several alternatives exist which addresses issues of the default method, though with their own trade-offs. A few are listed here.
GVF snake model
The gradient vector flow (GVF) snake model7 addresses two issues with snakes:

poor convergence performance for concave boundaries
poor convergence performance when snake is initialized far from minimum

In 2D, the GVF vector field 
 
 
 
  minimizes the energy functional



where 
 
 
 
  is a controllable smoothing term. This can be solved by solving the Euler equations






This can be solved through iteration towards a steady-state value.






This result replaces the default external force.



The primary issue with using GVF is the smoothing term 
 
 
 
  causes rounding of the edges of the contour. Reducing the value of 
 
 
 
  reduces the rounding but weakens the amount of smoothing.
The balloon model
The balloon model8 addresses these problems with the default active contour model:

The snake is not attracted to distant edges.
The snake will shrink inwards if no substantial images forces are acting upon it.
a snake larger than the minima contour will eventually shrink into it, but a snake smaller than the minima contour will not find the minima and instead continue to shrink.

The balloon model introduces an inflation term into the forces acting on the snake



where 
 
 
 
  is the normal unitary vector of the curve at 
 
 
 
  and 
 
 
 
  is the magnitude of the force. 
 
 
 
  should have the same magnitude as the image normalization factor 
 
 
 
  and be smaller in value than 
 
 
 
  to allow forces at image edges to overcome the inflation force.
Three issues arise from using the balloon model:

Instead of shrinking, the snake expands into the minima and will not find minima contours smaller than it.
The outward force causes the contour to be slightly larger than the actual minima. This can be solved by decreasing the balloon force after a stable solution has been found.
The inflation force can overpower forces from weak edges, amplifying the issue with snakes ignoring weaker features in an image.

Diffusion snakes model
The diffusion snake model9 addresses the sensitivity of snakes to noise, clutter, and occlusion. It implements a modification of the Mumfordâ€“Shah functional and its cartoon limit and incorporates statistical shape knowledge. The default image energy functional 
 
 
 
  is replaced with



where 
 
 
 
  is based on a modified Mumfordâ€“Shah functional



where 
 
 
 
  is the piecewise smooth model of the image 
 
 
 
  of domain 
 
 
 
 . Boundaries 
 
 
 
  are defined as



where 
 
 
 
  are quadratic B-spline basis functions and 
 
 
 
  are the control points of the splines. The modified cartoon limit is obtained as 
 
 
 
  and is a valid configuration of 
 
 
 
 .
The functional 
 
 
 
  is based on training from binary images of various contours and is controlled in strength by the parameter 
 
 
 
 . For a Gaussian distribution of control point vectors 
 
 
 
  with mean control point vector 
 
 
 
  and covariance matrix 
 
 
 
  , the quadratic energy that corresponds to the Gaussian probability is



The strength of this method relies on the strength of the training data as well as the tuning of the modified Mumfordâ€“Shah functional. Different snakes will require different training data sets and tunings.
Geometric active contours
Geometric snakes, or geodesic snakes,10 or conformal active contours11 employs ideas from Euclidean curve shortening evolution. Contours split and merge depending on the detection of objects in the image. These models are largely implemented using level sets, and have been extensively employed in medical image computing. The level set function 
 
 
 
  used in this method is of the form



where 
 
 
 
  is a halting function.
Statistical models combining local and global features have been formulated by Lankton and Tannenbaum.12
References
External links

David Young, March 1995
Snakes: Active Contours, CVOnline
ICBE, University of Manchester
Active contours implementation & test platform GUI
A simple implementation of snakes by Associate Professor Cris Luengo
MATLAB documentation for activecontour, which segments an image using active contours

Sample code

Practical examples of different snakes developed by Prince and Xu
Basic tool to play with snakes (active contour models) from Tim Cootes,University of Manchester
Matlab implementation of 2D and 3D snake including GVF and balloon force
Matlab Snake Demo by Chris Bregler and Malcolm Slaney, Interval Research Corporation.
A Demonstration Using Java
Active Contours implementation & test platform GUI by Nikolay S. and Alex Blekhman implementing "Active Contours without Edges"
Active Contour Segmentation by Shawn Lankton implementing "Active Contours without Edges"
Geometric Active Contour Code by Jarno Ralli
Morphological Snakes

"
Category:Computer vision




Snakes: an active model,Ramani Pichumani,http://homepages.inf.ed.ac.uk/rbf/CVonline/LOCAL_COPIES/RAMANI1/node31.html
Dr. George Bebis,University of Nevada,http://www.cse.unr.edu/~bebis/CS791E/Notes/DeformableContours.pdf
Image Understanding,Bryan S. Morse,Brigham Young University,1998-2000 http://homepages.inf.ed.ac.uk/rbf/CVonline/LOCAL_COPIES/MORSE/iu.pdf
Laurent D. Cohen, On active contour models and balloons, CVGIP: Image Understanding, Volume 53, Issue 2, March 1991, Pages 211-218, ISSN 1049-9660, 

C. Xu and J.L. Prince, "Gradient Vector Flow: A New External Force for Snakes," Proc. IEEE Conf. on Comp. Vis. Patt. Recog. (CVPR), Los Alamitos: Comp. Soc. Press, pp. 66â€“71, June 1997, http://iacl.ece.jhu.edu/pubs/p087c.pdf


Geodesic Active Contours, V. Caselles, R. Kimmel, G. Sapiro http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.21.2196
Conformal curvature flows: From phase transitions to active vision, Satyanad Kichenassamy, Arun Kumar, Peter Olver, Allen Tannenbaum and Anthony Yezzi http://www.springerlink.com/content/u457157212872201/
Lankton, S.; Tannenbaum, A., "Localizing Region-Based Active Contours," Image Processing, IEEE Transactions on , vol.17, no.11, pp.2029,2039, Nov. 2008 doi: 10.1109/TIP.2008.2004611 http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4636741&tag;;=1



