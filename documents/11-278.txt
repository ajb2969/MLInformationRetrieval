


Embedded pushdown automaton




Embedded pushdown automaton

An embedded pushdown automaton or EPDA is a computational model for parsing languages generated by tree-adjoining grammars (TAGs). It is similar to the context-free grammar-parsing pushdown automaton, except that instead of using a plain stack to store symbols, it has a stack of iterated stacks that store symbols, giving TAGs a generative capacity between context-free grammars and context-sensitive grammars, or a subset of the mildly context-sensitive grammars. Embedded pushdown automata should not be confused with nested stack automata which have more computational power.
History and applications
EPDAs were first described by K. Vijay-Shanker in his 1988 doctoral thesis.1 They have since been applied to more complete descriptions of classes of mildly context-sensitive grammars and have had important roles in refining the Chomsky hierarchy. Various subgrammars, such as the linear indexed grammar, can thus be defined.2 EPDAs are also beginning to play an important role in natural language processing.
While natural languages have traditionally been analyzed using context-free grammars (see transformational-generative grammar and computational linguistics), this model does not work well for languages with crossed dependencies, such as Dutch, situations for which an EPDA is well suited. A detailed linguistic analysis is available in Joshi, Schabes (1997).3
Theory
An EPDA is a finite state machine with a set of stacks that can be themselves accessed through the embedded stack. Each stack contains elements of the stack alphabet

 
 , and so we define an element of a stack by 
 
 
 
 , where the star is the Kleene closure of the alphabet.
Each stack can then be defined in terms of its elements, so we denote the 
 
 
 
 th stack in the automaton using a double-dagger symbol
 
 
 
 , where 
 
 
 
  would be the next accessible symbol in the stack. The embedded stack of 
 
 
 
  stacks can thus be denoted by 
 
 
 
 .
We define an EPDA by the septuple (7-tuple)


 
  where



 
 
  is a finite set of states;


 
  is the finite set of the input alphabet;


 
  is the finite stack alphabet;


 
  is the start state;


 
  is the set of final states;


 
 
  is the initial stack symbol


 
  is the transition function, where 
 
 
 
  are finite subsets of 
 
 
 
 .

Thus the transition function takes a state, the next symbol of the input string, and the top symbol of the current stack and generates the next state, the stacks to be pushed and popped onto the embedded stack, the pushing and popping of the current stack, and the stacks to be considered the current stacks in the next transition. More conceptually, the embedded stack is pushed and popped, the current stack is optionally pushed back onto the embedded stack, and any other stacks one would like are pushed on top of that, with the last stack being the one read from in the next iteration. Therefore, stacks can be pushed both above and below the current stack.
A given configuration is defined by



where 
 
 
 
 
  is the current state, the 
 
 
 
 s are the stacks in the embedded stack, with 
 
 
 
  the current stack, and for an input string 
 
 
 
 , 
 
 
 
  is the portion of the string already processed by the machine and 
 
 
 
 
  is the portion to be processed, with its head being the current symbol read. Note that the empty string 
 
 
 
  is implicitly defined as a terminating symbol, where if the machine is at a final state when the empty string is read, the entire input string is accepted, and if not it is rejected. Such accepted strings are elements of the language



where 
 
 
 
  and 
 
 
 
  defines the transition function applied over as many times as necessary to parse the string.
An informal description of EPDA can also be found in Joshi, Schabes (1997),4 Sect.7, p.23-25.
k-order EPDA and the Weir hierarchy
A more precisely defined hierarchy of languages that correspond to the mildly context-sensitive class was defined by David J. Weir.5 Based on the work of Nabil A. Khabbaz,67 Weir's Control Language Hierarchy is a containment  where the Level-1 is defined as context-free, and Level-2 is the class of tree-adjoining and the other three grammars.
Following are some of the properties of Level-k languages in the hierarchy:

Level-k languages are properly contained in the Level-(k + 1) language class
Level-k languages can be parsed in 
 
 
 
 
  time
Level-k contains the language 
 
 
 
 , but not 
 
 

Level-k contains the language 
 
 
 
 , but not 
 
 


Those properties correspond well (at least for small k > 1) to the conditions of mildly context-sensitive languages imposed by Joshi, and as k gets bigger, the language class becomes, in a sense, less mildly context-sensitive.
See also

combinatory categorial grammar

References
Further reading



"
Category:Models of computation Category:Automata theory



↩
↩
↩

↩
↩
↩




