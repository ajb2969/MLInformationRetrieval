


XOR cipher




XOR cipher

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In cryptography, the simple XOR cipher is a type of additive cipher,1 an encryption algorithm that operates according to the principles:

A 
 
 
 
  0 = A,
 


A 
 
 
 
  A = 0,
 


(A 
 
 
 
  B) 
 
 
 
  C = A 
 
 
 
  (B 
 
 
 
  C),
 


(B 
 
 
 
  A) 
 
 
 
  A = B 
 
 
 
  0 = B,
 

where 
 
 
 
  denotes the exclusive disjunction (XOR) operation. This operation is sometimes called modulus 2 addition (or subtraction, which is identical).2 With this logic, a string of text can be encrypted by applying the bitwise XOR operator to every character using a given key. To decrypt the output, merely reapplying the XOR function with the key will remove the cipher.
Example
For example, the string "Wiki" (01010111 01101001 01101011 01101001 in 8-bit ASCII) can be encrypted with the repeating key 11110011 as follows:







01010111 01101001 01101011 01101001







11110011 11110011 11110011 11110011



=

10100100 10011010 10011000 10011010





And conversely, for decryption:







10100100 10011010 10011000 10011010







11110011 11110011 11110011 11110011



=

01010111 01101001 01101011 01101001





The XOR operator is extremely common as a component in more complex ciphers. By itself, using a constant repeating key, a simple XOR cipher can trivially be broken using frequency analysis. If the content of any message can be guessed or otherwise known then the key can be revealed. Its primary merit is that it is simple to implement, and that the XOR operation is computationally inexpensive. A simple repeating XOR (i.e using the same key for xor operation on the whole data) cipher is therefore sometimes used for hiding information in cases where no particular security is required.
If the key is random and is at least as long as the message, the XOR cipher is much more secure than when there is key repetition within a message.3 When the keystream is generated by a pseudo-random number generator, the result is a stream cipher. With a key that is truly random, the result is a one-time pad, which is unbreakable even in theory.
In any of these ciphers, the XOR operator is vulnerable to a known-plaintext attack, since plaintext

ciphertext = key.
Example implementation
Example using the Python programming language.4
#!/usr/bin/env python2
 
 from os import urandom
 
 def genkey(length):
     """Generate key"""
     return urandom(length)
 
 def xor_strings(s,t):
     """xor two strings together"""
     return "".join(chr(ord(a)^ord(b)) for a,b in zip(s,t))
 
 
 message = 'This is a secret message'
 print 'message:', message
 
 key = genkey(len(message))
 print 'key:', key
 
 cipherText = xor_strings(message, key)
 print 'cipherText:', cipherText
 print 'decrypted:', xor_strings(cipherText,key)
 
 # verify
 if xor_strings(cipherText, key) == message:
     print 'Unit test passed'
 else:
     print 'Unit test failed'
See also

Vernam cipher
Vigenère cipher

References
Bibliography



Transcript of a lecture given by Prof. Tutte at the University of Waterloo

External Links

XOR encryption for text files on windows with source code
Solving the Basic XOR Cipher

"
Category:Stream ciphers



↩
↩
↩
This was inspired by ↩



