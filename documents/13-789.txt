   Dinic's algorithm      Dinic's algorithm   Dinitz's algorithm is a strongly polynomial algorithm for computing the maximum flow in a flow network , conceived in 1970 by Israeli (formerly Soviet) computer scientist Yefim (Chaim) A. Dinitz. 1 The algorithm runs in    O   (    V  2   E   )       O     superscript  V  2   E     O(V^{2}E)   time and is similar to the Edmonds–Karp algorithm , which runs in    O   (   V   E  2    )       O    V   superscript  E  2      O(VE^{2})   time, in that it uses shortest augmenting paths. The introduction of the concepts of the level graph and blocking flow enable Dinic's algorithm to achieve its performance.  History  Yefim Dinitz invented this algorithm in response to a pre-class exercise in Adel'son-Vel'sky's (co-inventor of AVL trees) Algorithm class. At the time he was not aware of the basic facts regarding Ford-Fulkerson algorithm. 2  Dinitz mentions inventing his algorithm in January, 1969 which was published in 1970 in journal Doklady. In 1974, Shimon Even and (his then Ph.D. student) Alon Itai at the Technion, Haifa were very curious and intrigued by the Dinitz's algorithm as well as Alexander Karzanov's idea of blocking flow. However it was hard to decipher these two papers for them, each being limited to four pages to meet the restrictions of journal Doklady. However Even did not give up and after three days of effort managed to understand both papers except for the layered network maintenance issue. Over the next couple of years, Even gave lectures on "Dinic's algorithm" mispronouncing the name of the author while popularizing it. Even and Itai also contributed to this algorithm by combining BFS and DFS which is the current version of algorithm 3  For about 10 years of time after Ford–Fulkerson algorithm was invented, it was unknown if it can be made to terminate in polynomial time in the generic case of irrational edge capacities. This caused lack of any known polynomial time algorithm that solved max flow problem in generic case. Dinitz algorithm and the Edmonds–Karp algorithm , which was published in 1972, independently showed that in the Ford–Fulkerson algorithm , if each augmenting path is the shortest one, the length of the augmenting paths is non-decreasing and it always terminated.  Definition  Let    G  =   (   (  V  ,  E  )   ,  c  ,  s  ,  t  )       G    V  E   c  s  t     G=((V,E),c,s,t)   be a network with    c   (  u  ,  v  )       c   u  v     c(u,v)   and    f   (  u  ,  v  )       f   u  v     f(u,v)   the capacity and the flow of the edge    (  u  ,  v  )     u  v    (u,v)   respectively.   The residual capacity is a mapping     c  f   :    V  ×  V   →   R  +       normal-:   subscript  c  f    normal-→    V  V    superscript  R       c_{f}\colon V\times V\to R^{+}   defined as,  if     (  u  ,  v  )   ∈  E       u  v   E    (u,v)\in E   ,       c  f    (  u  ,  v  )    =    c   (  u  ,  v  )    -   f   (  u  ,  v  )            subscript  c  f    u  v        c   u  v      f   u  v       c_{f}(u,v)=c(u,v)-f(u,v)           c  f    (  v  ,  u  )    =   f   (  u  ,  v  )           subscript  c  f    v  u      f   u  v      c_{f}(v,u)=f(u,v)           c  f    (  u  ,  v  )    =  0         subscript  c  f    u  v    0    c_{f}(u,v)=0   otherwise.      The residual graph is the graph     G  f   =   (   (  V  ,   E  f   )   ,     c  f   |    E  f    ,  s  ,  t  )        subscript  G  f     V   subscript  E  f     evaluated-at   subscript  c  f    subscript  E  f    s  t     G_{f}=((V,E_{f}),c_{f}|_{E_{f}},s,t)   , where      E  f   =   {    (  u  ,  v  )   ∈   V  ×  V    :     c  f    (  u  ,  v  )    >  0   }        subscript  E  f    conditional-set     u  v     V  V         subscript  c  f    u  v    0      E_{f}=\{(u,v)\in V\times V:c_{f}(u,v)>0\}   .     An augmenting path is an    s  -  t      s  t    s-t   path in the residual graph    G  f     subscript  G  f    G_{f}   .    Define    dist   (  v  )      dist  v    \operatorname{dist}(v)   to be the length of the shortest path from   s   s   s   to   v   v   v   in    G  f     subscript  G  f    G_{f}   . Then the level graph of    G  f     subscript  G  f    G_{f}   is the graph     G  L   =   (  V  ,   E  L   ,     c  f   |    E  L    ,  s  ,  t  )        subscript  G  L    V   subscript  E  L    evaluated-at   subscript  c  f    subscript  E  L    s  t     G_{L}=(V,E_{L},c_{f}|_{E_{L}},s,t)   , where      E  L   =   {    (  u  ,  v  )   ∈   E  f    :    dist   (  v  )    =    dist   (  u  )    +  1    }        subscript  E  L    conditional-set     u  v    subscript  E  f       dist  v      dist  u   1       E_{L}=\{(u,v)\in E_{f}:\operatorname{dist}(v)=\operatorname{dist}(u)+1\}   .     A blocking flow is an    s  -  t      s  t    s-t   flow   f   f   f   such that the graph     G  ′   =   (  V  ,   E  L  ′   ,  s  ,  t  )        superscript  G  normal-′    V   superscript   subscript  E  L   normal-′   s  t     G^{\prime}=(V,E_{L}^{\prime},s,t)   with     E  L  ′   =   {   (  u  ,  v  )   :    f   (  u  ,  v  )    <      c  f   |    E  L     (  u  ,  v  )     }        superscript   subscript  E  L   normal-′    conditional-set   u  v       f   u  v       evaluated-at   subscript  c  f    subscript  E  L     u  v        E_{L}^{\prime}=\{(u,v):f(u,v)   contains no    s  -  t      s  t    s-t   path.   Algorithm  Dinic's Algorithm   Input : A network    G  =   (   (  V  ,  E  )   ,  c  ,  s  ,  t  )       G    V  E   c  s  t     G=((V,E),c,s,t)   .  Output : An    s  -  t      s  t    s-t   flow   f   f   f   of maximum value.    Set     f   (  e  )    =  0        f  e   0    f(e)=0   for each    e  ∈  E      e  E    e\in E   .  Construct    G  L     subscript  G  L    G_{L}   from    G  f     subscript  G  f    G_{f}   of   G   G   G   . If     dist   (  t  )    =  ∞       dist  t      \operatorname{dist}(t)=\infty   , stop and output   f   f   f   .  Find a blocking flow     f   ′     superscript  f  normal-′    f\;^{\prime}   in    G  L     subscript  G  L    G_{L}   .  Augment flow    f    f   \ f   by     f   ′     superscript  f  normal-′    f\;^{\prime}   and go back to step 2.   Analysis  It can be shown that the number of edges in each blocking flow increases by at least 1 each time and thus there are at most    n  -  1      n  1    n-1   blocking flows in the algorithm, where   n   n   n   is the number of vertices in the network. The level graph    G  L     subscript  G  L    G_{L}   can be constructed by Breadth-first search in    O   (  E  )       O  E    O(E)   time and a blocking flow in each level graph can be found in    O   (   V  E   )       O    V  E     O(VE)   time. Hence, the running time of Dinic's algorithm is    O   (    V  2   E   )       O     superscript  V  2   E     O(V^{2}E)   .  Using a data structure called dynamic trees , the running time of finding a blocking flow in each phase can be reduced to    O   (   E   log  V    )       O    E    V      O(E\log V)   and therefore the running time of Dinic's algorithm can be improved to    O   (   V  E   log  V    )       O    V  E    V      O(VE\log V)   .  Special cases  In networks with unit capacities, a much stronger time bound holds. Each blocking flow can be found in    O   (  E  )       O  E    O(E)   time, and it can be shown that the number of phases does not exceed    O   (   E   )       O    E     O(\sqrt{E})   and    O   (   V   2  /  3    )       O   superscript  V    2  3      O(V^{2/3})   . Thus the algorithm runs in    O   (    min   {   V   2  /  3    ,   E   1  /  2    }    E   )       O       superscript  V    2  3     superscript  E    1  2     E     O(\min\{V^{2/3},E^{1/2}\}E)   time.  In networks arising during the solution of bipartite matching problem, the number of phases is bounded by    O   (   V   )       O    V     O(\sqrt{V})   , therefore leading to the    O   (    V   E   )       O      V   E     O(\sqrt{V}E)   time bound. The resulting algorithm is also known as Hopcroft–Karp algorithm . More generally, this bound holds for any unit network — a network in which each vertex, except for source and sink, either has a single entering edge of capacity one, or a single outgoing edge of capacity one, and all other capacities are arbitrary integers.  Example  The following is a simulation of Dinic's algorithm. In the level graph    G  L     subscript  G  L    G_{L}   , the vertices with labels in red are the values    dist   (  v  )      dist  v    \operatorname{dist}(v)   . The paths in blue form a blocking flow.          G   G   G          G  f     subscript  G  f    G_{f}          G  L     subscript  G  L    G_{L}          1.  (Figure)  Dinic algorithm G1.svg   (Figure)  Dinic algorithm Gf1.svg   (Figure)  Dinic algorithm GL1.svg       align="left" The blocking flow consists of       {  s  ,  1  ,  3  ,  t  }     s  1  3  t    \{s,1,3,t\}   with 4 units of flow,      {  s  ,  1  ,  4  ,  t  }     s  1  4  t    \{s,1,4,t\}   with 6 units of flow, and      {  s  ,  2  ,  4  ,  t  }     s  2  4  t    \{s,2,4,t\}   with 4 units of flow.   Therefore the blocking flow is of 14 units and the value of flow    |  f  |      f    |f|   is 14. Note that each augmenting path in the blocking flow has 3 edges.     2.  (Figure)  Dinic algorithm G2.svg   (Figure)  Dinic algorithm Gf2.svg   (Figure)  Dinic algorithm GL2.svg       align="left" The blocking flow consists of       {  s  ,  2  ,  4  ,  3  ,  t  }     s  2  4  3  t    \{s,2,4,3,t\}   with 5 units of flow.   Therefore the blocking flow is of 5 units and the value of flow    |  f  |      f    |f|   is 14 + 5 = 19. Note that each augmenting path has 4 edges.     3.  (Figure)  Dinic algorithm G3.svg   (Figure)  Dinic algorithm Gf3.svg   (Figure)  Dinic algorithm GL3.svg       align="left" Since   t   t   t   cannot be reached in    G  f     subscript  G  f    G_{f}   . The algorithm terminates and returns a flow with maximum value of 19. Note that in each blocking flow, the number of edges in the augmenting path increases by at least 1.       See also   Ford–Fulkerson algorithm  Maximum flow problem   Notes  References       "  Category:Network flow  Category:Graph algorithms     ↩  ↩  ↩     