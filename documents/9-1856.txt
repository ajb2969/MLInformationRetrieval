   Kabsch algorithm      Kabsch algorithm   The Kabsch algorithm , named after Wolfgang Kabsch , is a method for calculating the optimal rotation matrix that minimizes the RMSD ( root mean squared deviation) between two paired sets of points. It is useful in graphics, cheminformatics to compare molecular structures, and also bioinformatics for comparing protein structures (in particular, see root-mean-square deviation (bioinformatics) ).  The algorithm only computes the rotation matrix, but it also requires the computation of a translation vector. When both the translation and rotation are actually performed, the algorithm is sometimes called partial Procrustes superimposition (see also orthogonal Procrustes problem ).  Description  The algorithm starts with two sets of paired points, P and Q . Each set of points can be represented as an N ×3 matrix . The first row is the coordinates of the first point, the second row is the coordinates of the second point, the N th row is the coordinates of the N th point.      (      x  1      y  1      z  1        x  2      y  2      z  2       ⋮    ⋮    ⋮       x  N      y  N      z  N      )       subscript  x  1    subscript  y  1    subscript  z  1      subscript  x  2    subscript  y  2    subscript  z  2     normal-⋮  normal-⋮  normal-⋮     subscript  x  N    subscript  y  N    subscript  z  N      \begin{pmatrix}x_{1}&y_{1}&z_{1}\\
 x_{2}&y_{2}&z_{2}\\
 \vdots&\vdots&\vdots\\
 x_{N}&y_{N}&z_{N}\end{pmatrix}     The algorithm works in three steps: a translation, the computation of a covariance matrix, and the computation of the optimal rotation matrix.  Translation  Both sets of coordinates must be translated first, so that their centroid coincides with the origin of the coordinate system . This is done by subtracting from the point coordinates the coordinates of the respective centroid.  Computation of the covariance matrix  The second step consist of calculating a covariance matrix  A . In matrix notation,      A  =    P  T    Q        A     superscript  P  T   Q     A=P^{T}Q\,     or, using summation notation,        A   i  j    =    ∑   k  =  1   N     P   k  i     Q   k  j       ,       subscript  A    i  j      superscript   subscript     k  1    N      subscript  P    k  i     subscript  Q    k  j        A_{ij}=\sum_{k=1}^{N}P_{ki}Q_{kj},     Computation of the optimal rotation matrix  It is possible to calculate the optimal rotation U based on the matrix formula    U  =     (    A  T   A   )    1  /  2     A   -  1         U     superscript     superscript  A  T   A     1  2     superscript  A    1       U=(A^{T}A)^{1/2}A^{-1}   but implementing a numerical solution to this formula becomes complicated when all special cases are accounted for (for example, the case of A not having an inverse).  If singular value decomposition (SVD) routines are available, the optimal rotation, U , can be calculated using the following simple algorithm.  First, calculate the SVD of the covariance matrix A .      A  =   V  S    W  T         A    V  S   superscript  W  T      A=VSW^{T}\,     Next, decide whether we need to correct our rotation matrix to ensure a right-handed coordinate system      d  =   sign   (   det   (   W   V  T    )    )        d   sign      W   superscript  V  T        d=\operatorname{sign}(\det(WV^{T}))\,     Finally, calculate our optimal rotation matrix, U , as      U  =   W   (     1    0    0      0    1    0      0    0    d     )    V  T        U    W    1  0  0    0  1  0    0  0  d     superscript  V  T      U=W\begin{pmatrix}1&0&0\\
 0&1&0\\
 0&0&d\end{pmatrix}V^{T}     Coutsias, Seok, and Dill 1 have found an equivalent method that uses quaternions . Expressing the optimal rotation matrix with a quaternion goes back to 1999: see appendix in 2 and was generalized in 2002 to probability distributions (continuous or not): see appendix A.5 in. 3  Generalizations  The algorithm was described for points in a three-dimensional space. The generalization to D dimensions is immediate.  External links  This SVD algorithm is described in more detail at http://cnx.org/content/m11608/latest/  A Matlab function is available at http://www.mathworks.com/matlabcentral/fileexchange/25746-kabsch-algorithm  A C++ implementation (and unit test) using Eigen  A Python script is available at https://github.com/charnley/rmsd  A free PyMol plugin easily implementing Kabsch is Cealign . VMD uses the Kabsch algorithm for its alignment.  See also  Wahba's Problem  References   Kabsch, Wolfgang, (1976) "A solution for the best rotation to relate two sets of vectors", Acta Crystallographica  32 :922.  with a correction in Kabsch, Wolfgang, (1978) "A discussion of the solution for the best rotation to relate two sets of vectors", "Acta Crystallographica", "A34", 827–828    Lin Ying-Hung, Chang Hsun-Chang, Lin Yaw-Ling (2004) "A Study on Tools and Algorithms for 3-D Protein Structures Alignment and Comparison", International Computer Symposium , December 15–17, Taipei, Taiwan.    Umeyama, Shinj, (1991) "Least-Squares Estimation of Transformation Parameters Between Two Point Patterns". IEEE Trans. Pattern Anal. Mach. Intell. . 13(4):376-380   "  Category:Bioinformatics algorithms     ↩  ↩  ↩     