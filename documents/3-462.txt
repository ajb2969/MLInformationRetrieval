


Type rule




Type rule

In type theory, a type rule is an inference rule that describes how a type system assigns a type to a syntactic construction. These rules may be applied by the type system to determine if a program is well typed and what type expressions have. A prototypical example of the use of type rules is in defining type inference in the simply typed lambda calculus, which is the internal language of Cartesian closed categories.
Notation
An expression 
 
 
 
  of type 
 
 
 
  is written as 
 
 
 
 . The typing environment is written as 
 
 
 
 . The notation for inference is the usual one for sequents and inference rules, and has the following general form



The sequents above the line are the premises that must be fulfilled for the rule to be applied, yielding the conclusion: the sequents below the line. This can be read as: if expression 
 
 
 
  has type 
 
 
 
  in environment

 
 , for all 
 
 
 
 , then the expression 
 
 
 
  will have an environment 
 
 
 
  and type 
 
 
.
For example, a simple language to perform arithmetic calculations on real numbers may have the following rules



A type rule may have no premises, and usually the line is omitted in these cases. A type rule may also change an environment by adding new variables to a previous environment; for example, a declaration may have the following type rule, where a new variable 
 
 
 
 , with type 
 
 
 
 , is added to 
 
 
 
 :



Here the syntax of the let expression is that of Standard ML. Thus type rules can be used to derive the types of composed expressions, much like in natural deduction.
See also

Judgment (mathematical logic)
Type system
Type theory
Curryâ€“Howard correspondence

Further reading

Luca Cardelli, "Type Systems", ACM Computing Surveys

"
Category:Data types Category:Program analysis Category:Type theory


