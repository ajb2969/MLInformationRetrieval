   Type rule      Type rule   In type theory , a type rule is an inference rule that describes how a type system assigns a type to a syntactic construction. These rules may be applied by the type system to determine if a program is well typed and what type expressions have. A prototypical example of the use of type rules is in defining type inference in the simply typed lambda calculus , which is the internal language of Cartesian closed categories .  Notation  An expression   e   e   e   of type   τ   τ   \tau   is written as     e   :  τ     normal-:  e  τ    e\!:\!\tau   . The typing environment is written as   Γ   normal-Γ   \Gamma   . The notation for inference is the usual one for sequents and inference rules , and has the following general form        Γ  1   ⊢    e  1    :    τ  1   ⋯   Γ  n    ⊢    e  n    :   τ  n     Γ  ⊢   e   :  τ          proves   subscript  normal-Γ  1    subscript  e  1     normal-:      subscript  τ  1   normal-⋯   subscript  normal-Γ  n      proves     subscript  e  n     normal-:     subscript  τ  n        proves  normal-Γ  e    normal-:    τ      \frac{\Gamma_{1}\vdash e_{1}\!:\!\tau_{1}\quad\cdots\quad\Gamma_{n}\vdash e_{n%
 }\!:\!\tau_{n}}{\Gamma\vdash e\!:\!\tau}     The sequents above the line are the premises that must be fulfilled for the rule to be applied, yielding the conclusion: the sequents below the line. This can be read as: if expression    e  i     subscript  e  i    e_{i}   has type    τ  i     subscript  τ  i    \tau_{i}   in environment     Γ  i     subscript  normal-Γ  i    \Gamma_{i}   , for all    i  =   1..  n       i    1..  n     i=1..n   , then the expression   e   e   e   will have an environment   Γ   normal-Γ   \Gamma   and type   τ   τ   \tau    .  For example, a simple language to perform arithmetic calculations on real numbers may have the following rules        Γ  ⊢    e  1    :    r  e  a  l   Γ   ⊢    e  2    :   r  e  a  l     Γ  ⊢    e  1   +    e  2     :   r  e  a  l       Γ  ⊢    e  1    :    i  n  t  e  g  e  r   Γ   ⊢   e  2   :   i  n  t  e  g  e  r     Γ  ⊢    e  1   +    e  2     :   i  n  t  e  g  e  r     ⋯          proves  normal-Γ   subscript  e  1     normal-:       r  e  a  l   normal-Γ     proves     subscript  e  2     normal-:      r  e  a  l        proves  normal-Γ     subscript  e  1    subscript  e  2      normal-:      r  e  a  l           proves  normal-Γ   subscript  e  1     normal-:       i  n  t  e  g  e  r   normal-Γ     proves     subscript  e  2     normal-:      i  n  t  e  g  e  r        proves  normal-Γ     subscript  e  1    subscript  e  2      normal-:      i  n  t  e  g  e  r      normal-⋯    \frac{\Gamma\vdash e_{1}\!:\!real\quad\Gamma\vdash e_{2}\!:\!real}{\Gamma%
 \vdash e_{1}+e_{2}\!:\!real}\qquad\frac{\Gamma\vdash e_{1}\!:\!integer\quad%
 \Gamma\vdash e_{2}:integer}{\Gamma\vdash e_{1}+e_{2}\!:\!integer}\qquad\cdots     A type rule may have no premises, and usually the line is omitted in these cases. A type rule may also change an environment by adding new variables to a previous environment; for example, a declaration may have the following type rule, where a new variable    i  d      i  d    id   , with type    τ  ′     superscript  τ  normal-′    \tau^{\prime}   , is added to   Γ   normal-Γ   \Gamma   :       Γ  ⊢    e  ′    :    τ  ′   Γ  ,   i   d     :   τ  ′   ⊢   e   :  τ    Γ  ⊢   let id =   e  ′   in  e  end   :  τ          proves  normal-Γ   superscript  e  normal-′     normal-:      superscript  τ  normal-′   normal-Γ    i  d      normal-:     superscript  τ  normal-′     proves    e    normal-:    τ       proves  normal-Γ    let id =   superscript  e  normal-′   in  e  end     normal-:    τ      \frac{\Gamma\vdash e^{\prime}\!:\!\tau^{\prime}\quad\Gamma,id\!:\!\tau^{\prime%
 }\vdash e\!:\!\tau}{\Gamma\vdash\text{let id = }e^{\prime}\text{ in }e\text{ %
 end}:\!\tau}     Here the syntax of the let expression is that of Standard ML . Thus type rules can be used to derive the types of composed expressions, much like in natural deduction .  See also   Judgment (mathematical logic)  Type system  Type theory  Curry–Howard correspondence   Further reading   Luca Cardelli, "Type Systems", ACM Computing Surveys   "  Category:Data types  Category:Program analysis  Category:Type theory   