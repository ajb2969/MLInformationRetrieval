   Newton-X      Newton-X   Newton-X 1 2 is a general program for molecular dynamics simulations beyond the Born-Oppenheimer approximation . It has been primarily used for simulations of ultrafast processes ( femtosecond to picosecond time scale) in photoexcited molecules. It has also been used for simulation of band envelops of absorption and emission spectra.  Newton-X uses the trajectory surface hopping method, a semi-classical approximation in which the nuclei are treated classically by Newtonian dynamics , while the electrons are treated as a quantum subsystem via a local approximation of the Time-dependent Schr√∂dinger Equation . Nonadiabatic effects (the spread of the nuclear wave packet between several states) are recovered by a stochastic algorithm, which allows individual trajectories to change between different potential energy states during the dynamics.  Capabilities  Newton-X is designed as a platform to perform all steps of the nonadiabatic dynamics simulations, from the initial conditions generation, through trajectories computation, to the statistical analysis of the results. It works interfaced to a number of electronic structure programs available for computational chemistry , including Gaussian , Turbomole , Gamess , and Columbus . Its modular development allows to create new interfaces and integrate new methods. Users‚Äô new developments are encouraged and are in due course included into the main branch of the program.  Nonadiabatic couplings , the central quantity in nonadiabatic simulations, can be either provided by a third-party program or computed by Newton-X. When computed by Newton-X, it is done with a numerical approximation based on overlap of electronic wavefunctions obtained in sequential time steps. A local diabatization method is also available to provide couplings in the case of weak nonadiabatic interactions. 3  Hybrid combination of methods is possible in Newton-X. Forces computed with different methods for different atomic subsets can be linearly combined to generate the final force driving the dynamics. These hybrid forces may, for instance, be combined into the popular electrostatic-embedding quantum-mechanical/molecular-mechanical method ( QM/MM ). Important options for QM/MM simulations , such as link atoms, boundaries, and thermostats are available as well.  As part of the initial conditions module, Newton-X can simulate absorption and emission spectra, using the Nuclear Ensemble approach, 4 which provides full spectral widths and absolute intensities.  (Figure)  Basic execution sections of Newton-X.   Methods and Interfaces to Third-Party Programs  Newton-X can simulate surface-hopping dynamics with the following programs and quantum-chemical methods:      Third-Party Program   Methods       Columbus   MCSCF , MRCI     Turbomole   TDDFT , CC2 , ADC(2)     Gaussian   MCSCF , TDDFT , TDA     Gamess   MCSCF     Nonadiabatic Couplings  The surface hopping probability depends on the values of the nonadiabatic couplings between electronic states.  Newton-X can either compute nonadiabatic couplings during the dynamics or read them from an interfaced third-party program. The computation of the couplings in Newton-X is done by finite differences, following the Hammes-Schiffer - Tully approach. 5 In this approach, the key quantity for computation of the surface hopping probability, the inner product between the nonadiabatic couplings ( œÑ LM ) and the nuclear velocities ( v ) at time t , is given by        ùùâ   L  M    ‚ãÖ  ùêØ   ‚âà    1   4  Œî  t     (     3   S   L  M     (  t  )    -   3   S   M  L     (  t  )    -    S   L  M     (   t  -   Œî  t    )     +    S   M  L     (   t  -   Œî  t    )     )         normal-‚ãÖ   subscript  ùùâ    L  M    ùêØ       1    4  normal-Œî  t          3   subscript  S    L  M    t     3   subscript  S    M  L    t      subscript  S    L  M      t    normal-Œî  t         subscript  S    M  L      t    normal-Œî  t         \boldsymbol{\tau}_{LM}\cdot\mathbf{v}\approx\frac{1}{4\Delta t}\left(3S_{LM}(t%
 )-3S_{ML}(t)-S_{LM}(t-\Delta t)+S_{ML}(t-\Delta t)\right)   ,  where the terms      S   L  M     (  t  )    ‚â°   ‚ü®    Œ®  L    (   t  -   Œî  t    )    ‚à£    Œ®  M    (  t  )    ‚ü©          subscript  S    L  M    t    inner-product     subscript  normal-Œ®  L     t    normal-Œî  t        subscript  normal-Œ®  M   t      S_{LM}(t)\equiv\left\langle\Psi_{L}(t-\Delta t)\mid\Psi_{M}(t)\right\rangle   are wavefunction overlaps between states L and M in different time steps.  This method can be generally used for any electronic-structure method, provided that a configuration interaction representation of the electronic wavefunction can be worked out. In Newton-X, it is used with a number of quantum-chemical methods, including MCSCF (Multiconfigurational Self-Consistent Field), MRCI (Multi-Reference Configuration Interaction), CC2 (Coupled Cluster to Approximated Second Order), ADC(2) (Algebraic Diagrammatic Construction to Second Order), TDDFT (Time-Dependent Density Functional Theory), and TDA (Tamm-Dankov Approximation). In the case of MCSCF and MRCI, the configuration interaction coefficients are directly used for computation of couplings. For the other methods, the linear-response amplitudes are used as the coefficients of a configuration interaction wavefunction with single excitations.  Spectrum Simulations  Newton-X simulates absorption and emission spectra using the Nuclear Ensemble approach. 6 In this approach, an ensemble of nuclear geometries is built in the initial state and the transition energies and transition moments to the other states are computed for each geometry in the ensemble. A convolution of the results provides spectral widths and absolute intensities.  In the Nuclear Ensemble approach, the photoabsorption cross section for a molecule initially in the ground state and being excited with photoenergy E into N fs final electronic states is given by       œÉ   (  E  )    =     œÄ   e  2   ‚Ñè    2  m  c   œµ  0    n  r   E      ‚àë  n   N   f  s       1   N  p      ‚àë  l   N  p     Œî   E   0  ,  n     (   ùêë  l   )    f   0  ,  n     (   ùêë  l   )   g   (   E  -   Œî   E   0  ,  n     (   ùêë  l   )     ,  Œ¥  )              œÉ  E         œÄ   superscript  e  2   Planck-constant-over-2-pi     2  m  c   subscript  œµ  0    subscript  n  r   E      superscript   subscript   n    subscript  N    f  s         1   subscript  N  p      superscript   subscript   l    subscript  N  p      normal-Œî   subscript  E   0  n     subscript  ùêë  l    subscript  f   0  n     subscript  ùêë  l   g     E    normal-Œî   subscript  E   0  n     subscript  ùêë  l     Œ¥          \sigma(E)=\frac{\pi e^{2}\hbar}{2mc\epsilon_{0}n_{r}E}\sum_{n}^{N_{fs}}\frac{1%
 }{N_{p}}\sum_{l}^{N_{p}}\Delta E_{0,n}(\mathbf{R}_{l})f_{0,n}(\mathbf{R}_{l})g%
 \left(E-\Delta E_{0,n}(\mathbf{R}_{l}),\delta\right)   ,  where e is the elementary charge , ƒß is the reduced Planck constant , m is the electron mass , c is the speed of light , Œµ 0 is the vacuum permittivity , and n r is the refractive index of the medium. The first summation runs over all target states and the second summation runs over all N p points in the nuclear ensemble. Each point in the ensemble has nuclear geometry R p , transition energy Œî E 0,n , and oscillator strength f 0,n (for a transition from the ground state into state n ). g is a normalized Gaussian function with width Œ¥ given by       g   (   E  -   Œî   E   0  ,  n      ,  Œ¥  )    =    1    (   2  œÄ    (   Œ¥  /  2   )   2    )    1  /  2     e  x  p   (    -    (   E  -   Œî   E   0  ,  n      )   2     2    (   Œ¥  /  2   )   2     )          g     E    normal-Œî   subscript  E   0  n      Œ¥        1   superscript    2  œÄ   superscript    Œ¥  2   2      1  2     e  x  p       superscript    E    normal-Œî   subscript  E   0  n      2      2   superscript    Œ¥  2   2        g\left(E-\Delta E_{0,n},\delta\right)=\frac{1}{\left(2\pi(\delta/2)^{2}\right)%
 ^{1/2}}exp\left(\frac{-(E-\Delta E_{0,n})^{2}}{2(\delta/2)^{2}}\right)   .  For emission, the differential emission rate is given by       Œì   (  E  )    =      e  2    n  r  3     2  œÄ  ‚Ñè  m   c  3    œµ  0      1   N  p      ‚àë  l   N  p     Œî   E   1  ,  0      (   ùêë  l   )   2    |    f   1  ,  0     (   ùêë  l   )    |   g   (   E  -   Œî   E   1  ,  0     (   ùêë  l   )     ,  Œ¥  )            normal-Œì  E          superscript  e  2    superscript   subscript  n  r   3      2  œÄ  Planck-constant-over-2-pi  m   superscript  c  3    subscript  œµ  0       1   subscript  N  p      superscript   subscript   l    subscript  N  p      normal-Œî   subscript  E   1  0     superscript   subscript  ùêë  l   2        subscript  f   1  0     subscript  ùêë  l     g     E    normal-Œî   subscript  E   1  0     subscript  ùêë  l     Œ¥        \Gamma(E)=\frac{e^{2}n_{r}^{3}}{2\pi\hbar mc^{3}\epsilon_{0}}\frac{1}{N_{p}}%
 \sum_{l}^{N_{p}}\Delta E_{1,0}(\mathbf{R}_{l})^{2}\left|f_{1,0}(\mathbf{R}_{l}%
 )\right|g\left(E-\Delta E_{1,0}(\mathbf{R}_{l}),\delta\right)   .  In both absorption and emission, the nuclear ensemble can be sampled either from a dynamics simulation or from a Wigner distribution .  Development and Credits  The development of Newton-X started in 2005 at the Institute for the Theoretical Chemistry of the University of Vienna. It was designed by Mario Barbatti in collaboration with Hans Lischka. The original code used and expanded routines written by Giovanni Granucci and Maurizio Persico from the University of Pisa. 7  A modulus for computation of nonadiabatic couplings based on finite differences of either MCSCF or MRCI wavefunctions was implemented by Jiri Pittner (J. Heyrovsky Institute) 8 and later adapted to work with TDDFT . 9 A modulus for QM/MM dynamics was developed by Matthias Ruckenbauer. 10 Felix Plasser implemented the local diabatization method and dynamics based on CC2 and ADC(2). 11 Rachel Crespo-Otero extended the TDDFT and TDA capabilities. 12 An interface to Gamess was added by Aaron West and Theresa Windus (Iowa State University). 13  Mario Barbatti coordinates new program developments, their integration into the official version, and the Newton-X distribution.  Distribution and Training  Newton-X is distributed free of charges for academic usage and with open source. The original paper 14 describing the program had been cited 190 times by December 22, 2014, according to Google Scholar .  Newton-X counts with a comprehensive documentation and a public discussion forum . A tutorial is also available on line, showing how to use the main features of the program step-by-step. Examples of simulations are shown at a YouTube channel . The program itself is distributed with a collection of input and output files of several worked-out examples.  A number of workshops on nonadiabatic simulations using Newton-X have been organized in Vienna (2008), Rio de Janeiro (2009), Sao Carlos (2011), Chiang Mai (2011), and Jeddah (2014). 15  Program Philosophy and Architecture  A main concept guiding the Newton-X development is that the program should be simple to use, but still providing as many options as possible to customize the jobs. This is achieved by a series of input tools that guide the user through the program options, providing context-dependent variable values always that possible.  (Figure)  Files and directories tree in Newton-X.   Newton-X is written as a combination of independent programs. The coordinated execution of these programs is done by drivers written in Perl , while the programs dealing with integration of the dynamics and other mathematical aspects are written in Fortran 90 and C . Memory is dynamically allocated and there are no formal limits for most of variables, such as number of atoms or states.  Newton-X works in a two-level parallelization : the first level is a trivial parallelization given by the Independent-Trajectories approach used by the program. Complete sets of input files are redundantly written to allow each trajectory to be executed independently. They can be easily merged for final analysis in a later step. In a second level, Newton-X takes advantage of the parallelization of the third-party programs with which it is interfaced. Thus, a Newton-X simulation using the interface with Gaussian program can be first distributed over a cluster in terms of independent trajectories and each trajectory runs parallelized version of Gaussian.  Starting with version (1.3, 2013), Newton-X uses meta-codes to control the dynamics simulation behavior. Based on a series of initial instructions provided by the user, new codes are automatically written and executed on-the-fly. These codes allow, for instance, checking specific conditions to terminate the simulations.  Drawbacks  To keep a modular architecture for easy inclusion of new algorithms, Newton-X is organized as a series of independent programs connected by general program drivers. For this reason, a large amount of input/output is required during the program's execution, reducing its efficiency. When dynamics is based on ab initio methods, this is normally not a problem, as the time bottleneck is in the electronic structure calculation. Low efficiency due to input/output can, however, be relevant with semiempirical methods.  Other problems with the current implementation are the lack of parallelization of the code, especially of the couplings computation, and the restriction of the program to Linux systems.  References  External links   Newton-X webpage  Discussion forum   "  Category:Computational chemistry software     ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©  ‚Ü©    ‚Ü©  ‚Ü©  ‚Ü©    ‚Ü©   ‚Ü©     