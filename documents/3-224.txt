


Intuitionistic type theory




Intuitionistic type theory

Intuitionistic type theory (also known as constructive type theory, or Martin-Löf type theory) is a type theory and an alternative foundation of mathematics based on the principles of mathematical constructivism. Intuitionistic type theory was introduced by Per Martin-Löf, a Swedish mathematician and philosopher, in 1972. Martin-Löf has modified his proposal a few times; his 1971 impredicative formulation was inconsistent as demonstrated by Girard's paradox. Later formulations were predicative. He proposed both intensional and extensional variants of the theory.
Intuitionistic type theory is based on a certain analogy or isomorphism between propositions and types: a proposition is identified with the type of its proofs. This identification is usually called the Curry–Howard isomorphism, which was originally formulated for intuitionistic logic and simply typed lambda calculus. Type theory extends this identification to predicate logic by introducing dependent types, that is types which contain values.
Type theory internalizes the interpretation of intuitionistic logic proposed by Brouwer, Heyting and Kolmogorov, the so-called BHK interpretation. The types in type theory play a similar role to sets in set theory but functions definable in type theory are always computable.
Connectives of type theory
In the context of type theory a connective is a way of constructing types, possibly using already given types. The basic connectives of type theory are:
Π-types
Π-types, also called dependent product types, are analogous to the indexed products of sets. As such, they generalize the normal function space to model functions whose result type may vary on their input. E.g. writing 
 
 
 
  for the type of n-tuples of real numbers and 
 
 
 
  for the type of natural numbers,



stands for the type of a function that, given a natural number n, returns an n-tuple of real numbers. The usual function space arises as a special case when the range type does not actually depend on the input, e.g., 
 
 
 
 
  is the type of functions from natural numbers to the real numbers, which is also written as 
 
 
 
 .
Using the Curry–Howard isomorphism Π-types also serve to model implication and universal quantification: e.g., a term inhabiting



is a function which assigns to any pair of natural numbers a proof that addition is commutative for that pair and hence can be considered as a proof that addition is commutative for all natural numbers. (Here we have used the equality type (
 
 
 
 ) as explained below.)
Σ-types
Σ-types, also called dependent sum types, are analogous to the indexed disjoint unions of sets. As such, they generalize the usual Cartesian product to model pairs where the type of the second component depends on the first. For example, the type 
 
 
 
  stands for the type of pairs of a natural number 
 
 
 
 
  and an 
 
 
 
 -tuple of real numbers, i.e., this type can be used to model sequences of arbitrary but finite length (usually called lists). The conventional Cartesian product type arises as a special case when the type of the second component doesn't actually depend on the first, e.g., 
 
 
 
  is the type of pairs of a natural number and a real number, which is also written as 
 
 
 
 .
Again, using the Curry–Howard isomorphism, Σ-types also serve to model conjunction and existential quantification.
Finite types
Of special importance are 0 or ⊥ (the empty type), 1 or ⊤ (the unit type) and 2 (the type of Booleans or classical truth values). Invoking the Curry–Howard isomorphism again, ⊥ stands for false and ⊤ for true.
Using finite types we can define negation as



Equality type
Given 
 
 
 
 
 , the expression 
 
 
 
  denotes the type of equality proofs for 
 
 
 
  is equal to 
 
 
 
 . That is, if 
 
 
 
  is inhabited, then 
 
 
 
 
  is said to be equal to 
 
 
 
 . There is only one (canonical) inhabitant of 
 
 
 
  and this is the proof of reflexivity



Examination of the properties of the equality type, or rather, extending it to a notion of equivalence, lead to homotopy type theory.
Inductive types
A prime example of an inductive type is the type of natural numbers

 
  which is generated by 
 
 
 
 
  and 
 
 
 
 . An important application of the propositions as types principle is the identification of (dependent) primitive recursion and induction by one elimination constant:



for any given type 
 
 
 
  indexed by 
 
 
 
 . In general inductive types can be defined in terms of W-types, the type of well-founded trees.
An important class of inductive types are inductive families like the type of vectors 
 
 
 
 
  mentioned above, which is inductively generated by the constructors 
 
 
 
  and



Applying the Curry–Howard isomorphism once more, inductive families correspond to inductively defined relations.
Universes
An example of a universe is 
 
 
 
 , the universe of all small types, which contains names for all the types introduced so far. To every name 
 
 
 
  we associate a type 
 
 
 
 
 , its extension or meaning. It is standard to assume a predicative hierarchy of universes
 
 
 
  for every natural number 
 
 
 
 , where the universe 
 
 
 
  contains a code for the previous universe, i.e., we have 
 
 
 
  with 
 
 
 
 
 . (A hierarchy with this property is called "cumulative".)
Stronger universe principles have been investigated, i.e., super universes and the Mahlo universe. In 1992 Huet and Coquand introduced the calculus of constructions, a type theory with an impredicative universe, thus combining type theory with Girard's System F. This extension is not universally accepted by Intuitionists since it allows impredicative, i.e., circular, constructions, which are often identified with classical reasoning.
Formalisation of type theory
This formalization is based on the discussion in Nordström, Petersson, and Smith.
The formal theory works with types and objects.
A type is declared by:





An object exists and is in a type if:





Objects can be equal





and types can be equal





A type that depends on an object from another type is declared





and removed by substitution



 
 , replacing the variable 
 
 
 
  with the object 
 
 
 
  in 
 
 
 
 .

An object that depends on an object from another type can be done two ways. If the object is "abstracted", then it is written





and removed by substitution



 
 , replacing the variable 
 
 
 
  with the object 
 
 
 
  in 
 
 
 
 .

The object-depending-on-object can also be declared as a constant as part of a recursive type. An example of a recursive type is:








Here, 
 
 
 
  is a constant object-depending-on-object. It is not associated with an abstraction. Constants like 
 
 
 
  can be removed by defining equality. Here the relationship with addition is defined using equality and using pattern matching to handle the recursive aspect of 
 
 
 
 :



 
  is manipulated as an opaque constant - it has no internal structure for substitution.
So, objects and types and these relations are used to express formulae in the theory. The following styles of judgements are used to create new objects, types and relations from existing ones:








σ is a well-formed type in the context Γ.







t is a well-formed term of type σ in context Γ.







σ and τ are equal types in context Γ.







t and u are judgmentally equal terms of type σ in context Γ.







Γ is a well-formed context of typing assumptions.



By convention, there is a type that represents all other types. It is called 
 
 
 
  (or 
 
 
 
 ). Since 
 
 
 
  is a type, the member of it are objects. There is a dependent type 
 
 
 
  that maps each object to its corresponding type. In most texts 
 
 
 
  is never written. From the context of the statement, a reader can almost always tell whether 
 
 
 
  refers to a type, or whether it refers to the object in 
 
 
 
  that corresponds to the type.
This is the complete foundation of the theory. Everything else is derived.
To implement logic, each proposition is given its own type. The objects in those types represent the different possible ways to prove the proposition. Obviously, if there is no proof for the proposition, then the type has no objects in it. Operators like "and" and "or" that work on propositions introduce new types and new objects. So 
 
 
 
  is a type that depends on the type 
 
 
 
  and the type 
 
 
 
 . The objects in that dependent type are defined to exist for every pair of objects in 
 
 
 
  and 
 
 
 
 . Obviously, if 
 
 
 
  or 
 
 
 
  has no proof and is an empty type, then the new type representing 
 
 
 
  is also empty.
This can be done for other types (booleans, natural numbers, etc.) and their operators.
Categorical models of type theory
Using the language of category theory, R.A.G. Seely introduced the notion of a locally cartesian closed category (LCCC) as the basic model of type theory. This has been refined by Hofmann and Dybjer to Categories with Families or Categories with Attributes based on earlier work by Cartmell.
A category with families is a category C of contexts (in which the objects are contexts, and the context morphisms are substitutions), together with a functor T : Cop → Fam(Set).
Fam(Set) is the category of families of Sets, in which objects are pairs (A,B) of an "index set" A and a function B: X → A, and morphisms are pairs of functions f : A → ''A' '' and g : X → ''X' '', such that ''B' '' ° g = f ° B - in other words, f maps Ba to B'g(a).
The functor T assigns to a context G a set Ty(G) of types, and for each A : Ty(G), a set Tm(G,A) of terms. The axioms for a functor require that these play harmoniously with substitution. Substitution is usually written in the form Af or af, where A is a type in Ty(G) and a is a term in Tm(G,A), and f is a substitution from D to G. Here Af : Ty(D) and af : Tm(D,Af).
The category C must contain a terminal object (the empty context), and a final object for a form of product called comprehension, or context extension, in which the right element is a type in the context of the left element. If G is a context, and A : Ty(G), then there should be an object (G,A) final among contexts D with mappings p : ''D → G, q : Tm(D,Ap).
A logical framework, such as Martin-Löf's takes the form of closure conditions on the context dependent sets of types and terms: that there should be a type called Set, and for each set a type, that the types should be closed under forms of dependent sum and product, and so forth.
A theory such as that of predicative set theory expresses closure conditions on the types of sets and their elements: that they should be closed under operations that reflect dependent sum and product, and under various forms of inductive definition.
Extensional versus intensional
A fundamental distinction is extensional vs intensional type theory. In extensional type theory definitional (i.e., computational) equality is not distinguished from propositional equality, which requires proof. As a consequence type checking becomes undecidable in extensional type theory because programs in the theory might not terminate. For example, such a theory allows one to give a type to Y-Combinator, a detailed example of this can be found in.1 However, this doesn't prevent extensional type theory from being a basis for a practical tool, for example, NuPRL is based on extensional type theory. From a practical standpoint there's no difference between a program which doesn't terminate and a program which takes a million years to terminate.
In contrast in intensional type theory type checking is decidable, but the representation of standard mathematical concepts is somewhat more cumbersome, since extensional reasoning requires using setoids or similar constructions. There are many common mathematical objects, which are hard to work with or can't be represented without this, for example, integer numbers, rational numbers, and real numbers. Integers and rational numbers can be represented without setoids, but this representation isn't easy to work with. Real numbers can't be represented without this see.2
Homotopy type theory works on resolving this problem. It allows one to define higher inductive types, which not only define first order constructors (values or points), but higher order constructors, i.e. equalities between elements (paths), equalities between equalities (homotopies), ad infinitum.
Implementations of type theory
Type theory has been the base of a number of proof assistants, such as NuPRL, LEGO and Coq. Recently, dependent types also featured in the design of programming languages such as ATS, Cayenne, Epigram, Agda, and Idris.
See also

Calculus of constructions
Intuitionistic logic
Per Martin-Löf
Type theory
Typed lambda calculus

References

Per Martin-Löf (1984). Intuitionistic Type Theory Bibliopolis. ISBN 88-7088-105-9.

Further reading

Bengt Nordström; Kent Petersson; Jan M. Smith (1990). Programming in Martin-Löf's Type Theory. Oxford University Press. The book is out of print, but a free version can be picked up from here.
Thompson, Simon (1991). Type Theory and Functional Programming Addison-Wesley. ISBN 0-201-41667-0.
Granström, Johan G. (2011). Treatise on Intuitionistic Type Theory Springer. ISBN 978-94-007-1735-0.

External links

EU Types Project: Tutorials - lecture notes and slides from the Types Summer School 2005
n-Categories - Sketch of a Definition - letter from John Baez and James Dolan to Ross Street, November 29, 1995

References
"
Category:Dependently typed programming Category:Constructivism (mathematics) Category:Type theory Category:Logic in computer science Category:Intuitionism



Bengt Nordström; Kent Petersson; Jan M. Smith (1990). Programming in Martin-Löf's Type Theory. Oxford University Press p.90↩
Altenkirch, Thorsten, Thomas Anberrée, and Nuo Li. "Definable Quotients in Type Theory."↩




