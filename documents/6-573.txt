


Caml




Caml

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



Caml (originally an acronym for Categorical Abstract Machine Language) is a dialect of the ML programming language family, developed at INRIA and formerly at ENS.
Like many descendants of ML, Caml is statically typed, strictly evaluated, and uses automatic memory management.
The first Caml implementation in Lisp was nicknamed "Heavy CAML" because of its memory and CPU requirements relative to its successor Caml Light that was implemented in C by Xavier Leroy and Damien Doligez. In addition to a complete rewriting, CAML Special Light added a powerful (applicative) module system to the core language.
Currently, the main implementation of Caml is OCaml, which adds many new features to the language including an object layer.
Examples
In the following,  represents the OCaml prompt.
Hello World
print_endline "Hello World!";;
Factorial function (recursion and purely functional programming)
Many mathematical functions, such as factorial, are most naturally represented in a purely functional form. The following recursive, purely functional Caml function implements factorial:
let rec fact n = if n=0 then 1 else n * fact(n - 1);;
The function can be written equivalently using pattern matching:
let rec fact = function
   | 0 -> 1
   | n -> n * fact(n - 1);;
This latter form is the mathematical definition of factorial as a recurrence relation.
Note that the compiler inferred the type of this function to be , meaning that this function maps ints onto ints. For example, 12! is:
 # fact 12;;
  - : int = 479001600
Numerical derivative (higher-order functions)
Since OCaml is a functional programming language, it is easy to create and pass around functions in OCaml programs. This capability has an enormous number of applications. Calculating the numerical derivative of a function is one such application. The following Caml function  computes the numerical derivative of a given function  at a given point :
let d delta f x =
   (f (x +. delta) -. f (x -. delta)) /. (2. *. delta);;
This function requires a small value . A good choice for delta is the cube root of the machine epsilon.
The type of the function  indicates that it maps a  onto another function with the type . This allows us to partially apply arguments. This functional style is known as currying. In this case, it is useful to partially apply the first argument  to , to obtain a more specialised function:
# let d = d (sqrt epsilon_float);;
 val d : (float -> float) -> float -> float = <fun>
 <span class="kw"fun>
 
 Note that the inferred type indicates that the replacement  is expecting a function with the type  as its first argument. We can compute a numerical approximation to the derivative of 
 
 
 
  at 
 
 
 
  with:
# d (fun x -> x *. x *. x -. x -. 1.) 3.;;
 - : float = 26.
The correct answer is 
 
 
 
 .
The function  is called a "higher-order function" because it accepts another function () as an argument.
The concepts of curried and higher-order functions are clearly useful in mathematical programs. In fact, these concepts are equally applicable to most other forms of programming and can be used to factor code much more aggressively, resulting in shorter programs and fewer bugs.
Discrete wavelet transform (pattern matching)
The 1D Haar wavelet transform of an integer-power-of-two-length list of numbers can be implemented very succinctly in Caml and is an excellent example of the use of pattern matching over lists, taking pairs of elements ( and ) off the front and storing their sums and differences on the lists  and , respectively:
# let haar l =
    let rec aux l s d = 
      match l, s, d with
        [s], [], d -> s :: d
      | [], s, d -> aux s [] d
      | h1 :: h2 :: t, s, d -> aux t (h1 + h2 :: s) (h1 - h2 :: d)
      | _ -> invalid_arg "haar" 
      in aux l [] [];;
 val haar : int list -> int list = <fun>
 <span class="kw"fun>
 
 For example:
  # haar [1; 2; 3; 4; -4; -3; -2; -1];;
    - : int list = [0; 20; 4; 4; -1; -1; -1; -1]
Pattern matching allows complicated transformations to be represented clearly and succinctly. Moreover, the OCaml compiler turns pattern matches into very efficient code, at times resulting in programs that are shorter and faster than equivalent code written with a case statement(Cardelli 1984, p.Â 210.).
See also

Categorical abstract machine
F#, an OCaml-like language for the .NET Framework
OCaml
Standard ML

References
Cardelli, Luca (1984). Compiling a functional language ACM Symposium on LISP and functional programming, Association of Computer Machinery.
External links


Caml language family

Books

The Functional Approach to Programming with Caml by Guy Cousineau and Michel Mauny.

"
Category:ML programming language family Category:Programming languages created in 1985
