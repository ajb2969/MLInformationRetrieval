


Feature hashing




Feature hashing

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In machine learning, feature hashing, also known as the hashing trick1 (by analogy to the kernel trick), is a fast and space-efficient way of vectorizing features, i.e. turning arbitrary features into indices in a vector or matrix. It works by applying a hash function to the features and using their hash values as indices directly, rather than looking the indices up in an associative array.
Motivating example
In a typical document classification task, the input to the machine learning algorithm (both during learning and classification) is free text. From this, a bag of words (BOW) representation is constructed: the individual tokens are extracted and counted, and each distinct token in the training set defines a feature (independent variable) of each of the documents in both the training and test sets.
Machine learning algorithms, however, are typically defined in terms of numerical vectors. Therefore, the bags of words for a set of documents is regarded as a term-document matrix where each row is a single document, and each column is a single feature/word; the entry 
 
 
 
  in such a matrix captures the frequency (or weight) of the 
 
 
 
 'th term of the vocabulary in document 
 
 
 
 . (An alternative convention swaps the rows and columns of the matrix, but this difference is immaterial.) Typically, these vectors are extremely sparse.
The common approach is to construct, at learning time or prior to that, a dictionary representation of the vocabulary of the training set, and use that to map words to indices. Hash tables and tries are common candidates for dictionary implementation. E.g., the three documents

''John likes to watch movies. ''
Mary likes movies too.
John also likes football.

can be converted, using the dictionary




Term

Index





John

1



likes

2



to

3



watch

4



movies

5



Mary

6



too

7



also

8



football

9



to the term-document matrix



(Punctuation was removed, as is usual in document classification and clustering.)
The problem with this process is that such dictionaries take up a large amount of storage space and grow in size as the training set grows in accordance with Heaps' law.2 Moreover, when the vocabulary is kept fixed, an adversary may try to invent new words or misspellings that are not in the stored vocabulary so as to circumvent a machine learned filter; this is why feature hashing has been tried for spam filtering at Yahoo! Research.3
Note that the hashing trick isn't limited to text classification and similar tasks at the document level, but can be applied to any problem that involves large (perhaps unbounded) numbers of features.
Feature vectorization using the hashing trick
Instead of maintaining a dictionary, a feature vectorizer that uses the hashing trick can build a vector of a pre-defined length by applying a hash function 
 
 
 
  to the features (e.g., words) in the items under consideration, then using the hash values directly as feature indices and updating the resulting vector at those indices:
 function hashing_vectorizer(features : array of string, N : integer):
      x := new vector[N]
      for f in features:
          h := hash(f)
          x[h mod N] += 1
      return x
It has been suggested that a second, single-bit output hash function 
 
 
 
  be used to determine the sign of the update value, to counter the effect of hash collisions.4 If such a hash function is used, the algorithm becomes
 function hashing_vectorizer(features : array of string, N : integer):
      x := new vector[N]
      for f in features:
          h := hash(f)
          idx := h mod N
          if ξ(f) == 1:
              x[idx] += 1
          else:
              x[idx] -= 1
      return x
The above pseudocode actually converts each sample into a vector. An optimized version would instead only generate a stream of (
 
 
 
 ,
 
 
 
 
 ) pairs and let the learning and prediction algorithms consume such streams; a linear model can then be implemented as a single hash table representing the coefficient vector.
Properties




ξ(f₁)

ξ(f₂)

Final value, ξ(f₁) + ξ(f₂)





-1

-1

-2



-1

1

0



1

-1

0



1

1

2



When a second hash function ξ is used to determine the sign of a feature's value, the expected mean of each column in the output array becomes zero because ξ causes some collisions to cancel out.5 E.g., suppose an input contains two symbolic features f₁ and f₂ that collide with each other, but not with any other features in the same input; then there are four possibilities which, if we make no assumptions about ξ, have equal probability, as listed in the table on the right.
In this example, there is a 50% probability that the hash collision cancels out. Multiple hash functions can be used to further reduce the risk of collisions.6
Furthermore, if φ is the transformation implemented by a hashing trick with a sign hash ξ (i.e. φ(x) is the feature vector produced for a sample x), then inner products in the hashed space are unbiased:



where the expectation is taken over the hashing function φ.7 It can be verified that
 
 
 
  is a positive semi-definite kernel.89
Extensions and variations
Recent work extends the hashing trick to supervised mappings from words to indices,10 which are explicitly learned to avoid collisions of important terms.
Applications and practical performance
Ganchev and Dredze showed that in text classification applications with random hash functions and several tens of thousands of columns in the output vectors, feature hashing need not have an adverse effect on classification performance, even without the signed hash function.11 Weinberger et al. applied their variant of hashing to the problem of spam filtering, formulating this as a multi-task learning problem where the input features are pairs (user, feature) so that a single parameter vector captured per-user spam filters as well as a global filter for several hundred thousand users, and found that the accuracy of the filter went up.12
Implementations
Implementations of the hashing trick are present in:

Apache Mahout13
Gensim14
scikit-learn15
sofia-ml16
Vowpal Wabbit
Apache Spark17
R18

See also

Bloom filter
Count–min sketch
Locality-sensitive hashing
MinHash

References
External links

Hashing Representations for Machine Learning on John Langford's website
What is the "hashing trick"? - MetaOptimize Q+A

"
Category:Hashing Category:Machine learning




↩
↩
↩

↩


↩
↩



↩
↩
↩
↩
↩



