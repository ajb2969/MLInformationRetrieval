   Post correspondence problem      Post correspondence problem   The Post correspondence problem is an undecidable  decision problem that was introduced by Emil Post in 1946. 1 Because it is simpler than the halting problem and the Entscheidungsproblem it is often used in proofs of undecidability.  Definition of the problem  The input of the problem consists of two finite lists     α  1   ,  …  ,   α  N       subscript  α  1   normal-…   subscript  α  N     \alpha_{1},\ldots,\alpha_{N}   and     β  1   ,  …  ,   β  N       subscript  β  1   normal-…   subscript  β  N     \beta_{1},\ldots,\beta_{N}   of words over some alphabet   A   A   A   having at least two symbols. A solution to this problem is a sequence of indices     (   i  k   )    1  ≤  k  ≤  K      subscript   subscript  i  k       1  k       K      (i_{k})_{1\leq k\leq K}   with    K  ≥  1      K  1    K\geq 1   and    1  ≤   i  k   ≤  N        1   subscript  i  k        N     1\leq i_{k}\leq N   for all   k   k   k   , such that         α   i  1    …   α   i  K     =    β   i  1    …   β   i  K      .         subscript  α   subscript  i  1    normal-…   subscript  α   subscript  i  K        subscript  β   subscript  i  1    normal-…   subscript  β   subscript  i  K       \alpha_{i_{1}}\ldots\alpha_{i_{K}}=\beta_{i_{1}}\ldots\beta_{i_{K}}.     The decision problem then is to decide whether such a solution exists or not.  Example instances of the problem  Example 1  Consider the following two lists:      α 1   α 2   α 3     a   ab   bba         β 1   β 2   β 3     baa   aa   bb     A solution to this problem would be the sequence (3, 2, 3, 1), because         α  3    α  2    α  3    α  1    =    b  b  a   +   a  b   +   b  b  a   +  a   =   b  b  a  a  b  b  b  a  a   =    b  b   +   a  a   +   b  b   +   b  a  a    =    β  3    β  2    β  3    β  1     .           subscript  α  3    subscript  α  2    subscript  α  3    subscript  α  1        b  b  a     a  b     b  b  a   a          b  b  a  a  b  b  b  a  a            b  b     a  a     b  b     b  a  a            subscript  β  3    subscript  β  2    subscript  β  3    subscript  β  1       \alpha_{3}\alpha_{2}\alpha_{3}\alpha_{1}=bba+ab+bba+a=bbaabbbaa=bb+aa+bb+baa=%
 \beta_{3}\beta_{2}\beta_{3}\beta_{1}.     Furthermore, since (3, 2, 3, 1) is a solution, so are all of its "repetitions", such as (3, 2, 3, 1, 3, 2, 3, 1), etc.; that is, when a solution exists, there are infinitely many solutions of this repetitive kind.  However, if the two lists had consisted of only     α  2   ,   α  3       subscript  α  2    subscript  α  3     \alpha_{2},\alpha_{3}   and     β  2   ,   β  3       subscript  β  2    subscript  β  3     \beta_{2},\beta_{3}   from those sets, then there would have been no solution (the last letter of any such α string is not the same as the letter before it, whereas β only constructs pairs of the same letter).  A convenient way to view an instance of a Post correspondence problem is as a collection of blocks of the form      α i     β i     there being an unlimited supply of each type of block. Thus the above example is viewed as      a     baa     i = 1       ab     aa     i = 2       bba     bb     i = 3 where the solver has an endless supply of each of these three block types. A solution corresponds to some way of laying blocks next to each other so that the string in the top cells corresponds to the string in the bottom cells. Then the solution to the above example corresponds to:      bba     bb     i 1 = 3       ab     aa     i 2 = 2       bba     bb     i 3 = 3       a     baa     i 4 = 1   Example 2  Again using blocks to represent an instance of the problem, the following is an example that has infinitely many solutions in addition to the kind obtained by merely "repeating" a solution.      bb     b     1       ab     ba     2       c     bc     3   In this instance, every sequence of the form (1, 2, 2, . . ., 2, 3) is a solution (in addition to all their repetitions):      bb     b     1       ab     ba     2       ab     ba     2       ab     ba     2       c     bc     3   Proof sketch of undecidability  The most common proof for the undecidability of PCP describes an instance of PCP that can simulate the computation of a Turing machine on a particular input. A match will occur if and only if the input would be accepted by the Turing machine. Because deciding if a Turing machine will accept an input is a basic undecidable problem , PCP cannot be decidable either. The following discussion is based on Michael Sipser 's textbook Introduction to the Theory of Computation . 2  In more detail, the idea is that the string along the top and bottom will be a computation history of the Turing machine's computation. This means it will list a string describing the initial state, followed by a string describing the next state, and so on until it ends with a string describing an accepting state. The state strings are separated by some separator symbol (usually written #). According to the definition of a Turing machine, the full state of the machine consists of three parts:   The current contents of the tape.  The current state of the finite state machine which operates the tape head.  The current position of the tape head on the tape.   Although the tape has infinitely many cells, only some finite prefix of these will be non-blank. We write these down as part of our state. To describe the state of the finite control, we create new symbols, labelled q 1 through q k , for each of the finite state machine's k states. We insert the correct symbol into the string describing the tape's contents at the position of the tape head, thereby indicating both the tape head's position and the current state of the finite control. For the alphabet {0,1}, a typical state might look something like:  101101110 q 7 00110.  A simple computation history would then look something like this:  q 0 101#1 q 4 01#11 q 2 1#1 q 8 10.  We start out with this block, where x is the input string and q 0 is the start state:           q 0 x #     The top starts out "lagging" the bottom by one state, and keeps this lag until the very end stage. Next, for each symbol a in the tape alphabet, as well as #, we have a "copy" block, which copies it unmodified from one state to the next:      a     a     We also have a block for each position transition the machine can make, showing how the tape head moves, how the finite state changes, and what happens to the surrounding symbols. For example, here the tape head is over a 0 in state 4, and then writes a 1 and moves right, changing to state 7:      q 4 0     1 q 7     Finally, when the top reaches an accepting state, the bottom needs a chance to finally catch up to complete the match. To allow this, we extend the computation so that once an accepting state is reached, each subsequent machine step will cause a symbol near the tape head to vanish, one at a time, until none remain. If q f is an accepting state, we can represent this with the following transition blocks, where a is a tape alphabet symbol:      q f a     q f         aq f     q f     There are a number of details to work out, such as dealing with boundaries between states, making sure that our initial tile goes first in the match, and so on, but this shows the general idea of how a static tile puzzle can simulate a Turing machine computation.  The previous example  q 0 101#1 q 4 01#11 q 2 1#1 q 8 10.  is represented as the following solution to the Post correspondence problem:           q 0 101#         q 0 1     1 q 4         0     0         1     1                       1     1         q 4 0     1 q 2         1     1                       1     1         1 q 2 1     q 8 10                       1 q 8     q 8         1     1         0     0                       q'' 8 1     q 8         0     0                       q 8 0     q 8                       q 8                        ...  Variants  Many variants of PCP have been considered. One reason is that, when one tries to prove undecidability of some new problem by reducing from PCP, it often happens that the first reduction one finds is not from PCP itself but from an apparently weaker version.   The problem may be phrased in terms of monoid morphisms  f , g from the free monoid B ∗ to the free monoid A ∗ where B is of size n . The problem is to determine whether there is a word w in B + such that f ( w ) = g ( w ). 3    The condition that the alphabet   A   A   A   have at least two symbols is required since the problem is decidable if   A   A   A   has only one symbol.    A simple variant is to fix n , the number of tiles. This problem is decidable if n ≤ 2, but remains undecidable for n ≥ 5. It is unknown whether the problem is decidable for 3 ≤ n ≤ 4. 4    The circular Post correspondence problem asks whether indexes     i  1   ,   i  2   ,  …      subscript  i  1    subscript  i  2   normal-…    i_{1},i_{2},\ldots   can be found such that     α   i  1    ⋯   α   i  k         subscript  α   subscript  i  1    normal-⋯   subscript  α   subscript  i  k      \alpha_{i_{1}}\cdots\alpha_{i_{k}}   and     β   i  1    ⋯   β   i  k         subscript  β   subscript  i  1    normal-⋯   subscript  β   subscript  i  k      \beta_{i_{1}}\cdots\beta_{i_{k}}   are conjugate words , i.e., they are equal modulo rotation. This variant is undecidable. 5    One of the most important variants of PCP is the bounded Post correspondence problem , which asks if we can find a match using no more than k tiles, including repeated tiles. A brute force search solves the problem in time O(2 k ), but this may be difficult to improve upon, since the problem is NP-complete . 6 Unlike some NP-complete problems like the boolean satisfiability problem , a small variation of the bounded problem was also shown to be complete for RNP, which means that it remains hard even if the inputs are chosen at random (it is hard on average over uniformly distributed inputs). 7    Another variant of PCP is called the marked Post Correspondence Problem , in which each u i must begin with a different symbol, and each v i must also begin with a different symbol. Halava, Hirvensalo, and de Wolf showed that this variation is decidable in exponential time . Moreover, they showed that if this requirement is slightly loosened so that only one of the first two characters need to differ (the so-called 2-marked Post Correspondence Problem), the problem becomes undecidable again. 8    The Post Embedding Problem is another variant where one looks for indexes     i  1   ,   i  2   ,  …      subscript  i  1    subscript  i  2   normal-…    i_{1},i_{2},\ldots   such that     α   i  1    ⋯   α   i  k         subscript  α   subscript  i  1    normal-⋯   subscript  α   subscript  i  k      \alpha_{i_{1}}\cdots\alpha_{i_{k}}   is a (scattered) subword of     β   i  1    ⋯   β   i  k         subscript  β   subscript  i  1    normal-⋯   subscript  β   subscript  i  k      \beta_{i_{1}}\cdots\beta_{i_{k}}   . This variant is easily decidable since, when some solutions exist, in particular a length-one solution exists. More interesting is the Regular Post Embedding Problem, a further variant where one looks for solutions that belong to a given regular language (submitted, e.g., under the form of a regular expression on the set    {  1  ,  …  ,  N  }     1  normal-…  N    \{1,\ldots,N\}   ). The Regular Post Embedding Problem is still decidable but, because of the added regular constraint, it has a very high complexity that dominates every multiply recursive function. 9    The Identity Correspondence Problem (ICP) asks whether a finite set of pairs of words (over a group alphabet) can generate an identity pair by a sequence of concatenations. The problem is undecidable and equivalent to the following Group Problem: is the semigroup generated by a finite set of pairs of words (over a group alphabet) a group. 10   References    External links   Eitan M. Gurari. An Introduction to the Theory of Computation , Chapter 4, Post's Correspondence Problem . A proof of the undecidability of PCP based on Chomsky type-0 grammars .  Online PHP Based PCP Solver  PCP AT HOME  PCP - a nice problem   "  Category:Theory of computation  Category:Computability theory     ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩     