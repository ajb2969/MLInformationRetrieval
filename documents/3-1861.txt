   Parameterized complexity      Parameterized complexity   In computer science , parameterized complexity is a branch of computational complexity theory that focuses on classifying computational problems according to their inherent difficulty with respect to multiple parameters of the input. The complexity of a problem is then measured as a function in those parameters. This allows the classification of NP-hard problems on a finer scale than in the classical setting, where the complexity of a problem is only measured by the number of bits in the input. The first systematic work on parameterized complexity was done by .  Under the assumption that P¬†‚â†¬†NP , there exist many natural problems that require superpolynomial running time when complexity is measured in terms of the input size only, but that are computable in a time that is polynomial in the input size and exponential or worse in a parameter   k   k   k   . Hence, if   k   k   k   is fixed at a small value and the growth of the function over   k   k   k   is relatively small then such problems can still be considered "tractable" despite their traditional classification as "intractable".  The existence of efficient, exact, and deterministic solving algorithms for NP-complete , or otherwise NP-hard , problems is considered unlikely, if input parameters are not fixed; all known solving algorithms for these problems require time that is exponential (or at least superpolynomial) in the total size of the input. However, some problems can be solved by algorithms that are exponential only in the size of a fixed parameter while polynomial in the size of the input. Such an algorithm is called a fixed-parameter tractable (fpt-)algorithm, because the problem can be solved efficiently for small values of the fixed parameter.  Problems in which some parameter   k   k   k   is fixed are called parameterized problems. A parameterized problem that allows for such an fpt-algorithm is said to be a fixed-parameter tractable problem and belongs to the class    F  P  T      F  P  T    FPT   , and the early name of the theory of parameterized complexity was fixed-parameter tractability .  Many problems have the following form: given an object   x   x   x   and a nonnegative integer   k   k   k   , does   x   x   x   have some property that depends on   k   k   k   ? For instance, for the vertex cover problem , the parameter can be the number of vertices in the cover. In many applications, for example when modelling error correction, one can assume the parameter to be "small" compared to the total input size. Then it is interesting to see whether we can find an algorithm which is exponential only in   k   k   k   , and not in the input size.  In this way, parameterized complexity can be seen as two-dimensional complexity theory. This concept is formalized as follows:   A parameterized problem is a language    L  ‚äÜ    Œ£  *   √ó  ùí©       L     superscript  normal-Œ£    ùí©     L\subseteq\Sigma^{*}\times\mathcal{N}   , where   Œ£   normal-Œ£   \Sigma   is a finite alphabet. The second component is called the parameter of the problem.    A parameterized problem   L   L   L   is fixed-parameter tractable if the question ‚Äú     (  x  ,  k  )   ‚àà  L       x  k   L    (x,k)\in L   ?‚Äù can be decided in running time     f   (  k  )    ‚ãÖ    |  x  |    O   (  1  )        normal-‚ãÖ    f  k    superscript    x     O  1      f(k)\cdot|x|^{O(1)}   , where   f   f   f   is an arbitrary function depending only on   k   k   k   . The corresponding complexity class is called FPT .   For example, there is an algorithm which solves the vertex cover problem in    O   (    k  n   +   1.274  k    )       O      k  n    superscript  1.274  k      O(kn+1.274^{k})   time, 1 where   n   n   n   is the number of vertices and   k   k   k   is the size of the vertex cover. This means that vertex cover is fixed-parameter tractable with the size of the solution as the parameter.  Complexity classes  FPT  FPT contains the fixed parameter tractable problems, which are those that can be solved in time     f   (  k  )    ‚ãÖ    |  x  |    O   (  1  )        normal-‚ãÖ    f  k    superscript    x     O  1      f(k)\cdot{|x|}^{O(1)}   for some computable function   f   f   f   . Typically, this function is thought of as single exponential, such as    2   O   (  k  )       superscript  2    O  k     2^{O(k)}   but the definition admits functions that grow even faster. This is essential for a large part of the early history of this class. The crucial part of the definition is to exclude functions of the form    f   (  n  ,  k  )       f   n  k     f(n,k)   , such as    n  k     superscript  n  k    n^{k}   . The class FPL (fixed parameter linear) is the class of problems solvable in time     f   (  k  )    ‚ãÖ   |  x  |      normal-‚ãÖ    f  k     x     f(k)\cdot|x|   for some computable function   f   f   f   . FPL is thus a subclass of FPT.  An example is the satisfiability problem, parameterised by the number of variables. A given formula of size   m   m   m   with   k   k   k   variables can be checked by brute force in time    O   (    2  k   m   )       O     superscript  2  k   m     O(2^{k}m)   . A vertex cover of size   k   k   k   in a graph of order   n   n   n   can be found in time    O   (    2  k   n   )       O     superscript  2  k   n     O(2^{k}n)   , so this problem is also in FPT.  An example of a problem that is thought not to be in FPT is graph coloring parameterised by the number of colors. It is known that 3-coloring is NP-hard , and an algorithm for graph   k   k   k   -colouring in time    f   (  k  )    n   O   (  1  )         f  k   superscript  n    O  1      f(k)n^{O(1)}   for    k  =  3      k  3    k=3   would run in polynomial time in the size of the input. Thus, if graph coloring parameterised by the number of colors were in FPT, then P¬†=¬†NP .  There are a number of alternative definitions of FPT. For example, the running time requirement can be replaced by     f   (  k  )    +    |  x  |    O   (  1  )           f  k    superscript    x     O  1      f(k)+|x|^{O(1)}   . Also, a parameterised problem is in FPT if it has a so-called kernel. Kernelization is a preprocessing technique that reduces the original instance to its "hard kernel", a possibly much smaller instance that is equivalent to the original instance but has a size that is bounded by a function in the parameter.  FPT is closed under a parameterised reduction called fpt-reduction , which simultaneously preserves the instance size and the parameter.  Obviously, FPT contains all polynomial-time computable problems. Moreover, it contains all optimisation problems in NP that allow a Fully polynomial-time approximation scheme .  W hierarchy  The W hierarchy is a collection of computational complexity classes. A parameterised problem is in the class W [ i ], if every instance    (  x  ,  k  )     x  k    (x,k)   can be transformed (in fpt-time) to a combinatorial circuit that has weft at most i , such that     (  x  ,  k  )   ‚àà  L       x  k   L    (x,k)\in L   if and only if there is a satisfying assignment to the inputs, which assigns 1 to at most k inputs. The height thereby is the largest number of logical units with unbounded fan-in on any path from an input to the output. The number of logical units with bounded fan-in on the paths must be limited by a constant that holds for all instances of the problem.  Note that FPT¬†= W [0] and W[ i ]   ‚äÜ     \subseteq    W [ j ] for all    i  ‚â§  j      i  j    i\leq j   . The classes in the W hierarchy are also closed under fpt-reduction.  Many natural computational problems occupy the lower levels, W [1] and W [2].  W [1]  Examples of W [1]-complete problems include   deciding if a given graph contains a clique of size k  deciding if a given graph contains an independent set of size k  deciding if a given nondeterministic single-tape Turing machine accepts within k steps ("short Turing machine acceptance" problem)   W [2]  Examples of W [2]-complete problems include   deciding if a given graph contains a dominating set of size k  deciding if a given nondeterministic multi-tape Turing machine accepts within k steps ("short multi-tape Turing machine acceptance" problem)   W [ t ]      W   [  t  ]       W   delimited-[]  t     W[t]   can be defined using the family of Weighted Weft-   t   t   t   -Depth-   d   d   d   SAT problems for    d  ‚â•  t      d  t    d\geq t   :    W   [  t  ,  d  ]       W   t  d     W[t,d]   is the class of parameterized problems that fpt-reduce to this problem, and     W   [  t  ]    =    ‚ãÉ   d  ‚â•  t     W   [  t  ,  d  ]           W   delimited-[]  t      subscript     d  t      W   t  d       W[t]=\bigcup_{d\geq t}W[t,d]   .  Here, Weighted Weft-   t   t   t   -Depth-   d   d   d   SAT is the following problem:   Input: A Boolean formula of depth at most   d   d   d   and weft at most   t   t   t   , and a number   k   k   k   . The depth is the maximal number of gates on any path from the root to a leaf, and the weft is the maximal number of gates of fan-in at least three on any path from the root to a leaf.  Question: Does the formula have a satisfying assignment of Hamming weight at most   k   k   k   ?   It can be shown that the problem Weighted   t   t   t   -Normalize SAT is complete for    W   [  t  ]       W   delimited-[]  t     W[t]   under fpt-reductions. 2 Here, Weighted   t   t   t   -Normalize SAT is the following problem:   Input: A Boolean formula of depth at most   t   t   t   with an AND-gate on top, and a number   k   k   k   .  Question: Does the formula have a satisfying assignment of Hamming weight at most   k   k   k   ?   W [ P ]  W [ P ] is the class of problems that can be decided by a nondeterministic polynomial-time Turing-machine that makes at most    O   (    f   (  k  )    ‚ãÖ   log  n    )       O   normal-‚ãÖ    f  k     n      O(f(k)\cdot\log n)   nondeterministic choices in the computation on    (  x  ,  k  )     x  k    (x,k)   (a k -restricted Turing-machine).  It is known that FPT is contained in W[P], and the inclusion is believed to be strict. However, resolving this issue would imply a solution to the P versus NP problem.  Other connections to unparameterised computational complexity are that FPT equals W [ P ] if and only if circuit satisfiability can be decided in time     exp   (   o   (  n  )    )     m   O   (  1  )             o  n     superscript  m    O  1      \exp(o(n))m^{O(1)}   , or if and only if there is a computable, nondecreasing, unbounded function f such that all languages recognised by a nondeterministic polynomial-time Turing machine using f(n)log n nondeterministic choices are in P .  XP  XP is the class of parameterized problems that can be solved in time    n   f   (  k  )       superscript  n    f  k     n^{f(k)}   for some computable function   f   f   f   .  Notes    References        The Computer Journal. Volume 51, Numbers 1 and 3 (2008). The Computer Journal . Special Double Issue on Parameterized Complexity with 15 survey articles, book review, and a Foreword by Guest Editors R. Downey, M. Fellows and M. Langston.   External links   Wiki on parameterized complexity  Compendium of Parameterized Problems   "  Category:Computational complexity theory       ‚Ü©  ‚Ü©     