   Jury stability criterion      Jury stability criterion  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In signal processing and control theory , the Jury stability criterion is a method of determining the stability of a linear discrete time system by analysis of the coefficients of its characteristic polynomial . It is the discrete time analogue of the Routh–Hurwitz stability criterion . The Jury stability criterion requires that the system poles are located inside the unit circle centered at the origin, while the Routh-Hurwitz stability criterion requires that the poles are in the left half of the complex plane. The Jury criterion is named after Eliahu Ibraham Jury .  Method  If the characteristic polynomial of the system is given by       f   (  z  )    =     a  0    z  n    +    a  1    z   n  -  1     +    a  2    z   n  -  2     +  ⋯  +    a   n  -  1    z   +   a  n          f  z        subscript  a  0    superscript  z  n       subscript  a  1    superscript  z    n  1        subscript  a  2    superscript  z    n  2     normal-⋯     subscript  a    n  1    z    subscript  a  n      f(z)=a_{0}z^{n}+a_{1}z^{n-1}+a_{2}z^{n-2}+\cdots+a_{n-1}z+a_{n}     then the table is constructed as follows:      row   z 0   z 1   z 2   z ....   z n-1   z n       1   a n   a n-1   a n-2   ...   a 1   a 0     2   a 0   a 1   a 2   ...   a n-1   a n     3   b n-1   b n-2   ...   b 1   b 0      4   b 0   b 1   ...   b n-2   b n-1      5   c n-2   c n-3   ...   c 0       6   c 0   c 1   ...   c n-2       ...   ...   ...   ...   ...   ...   ...     2n-5   p 3   p 2   p 1   p0       2n-4   p 0   p 1   p 2   p3       2n-3   q 2   q 1   q 0        That is, the first row is constructed of the polynomial coefficients in order, and the second row is the first row in reverse order and conjugated.  The third row of the table is calculated by subtracting     a  n    a  0        subscript  a  n    subscript  a  0     \frac{a_{n}}{a_{0}}   times the second row from the first row, and the fourth row is the third row with the first n elements reversed (as the final element is zero).      a  0     subscript  a  0    \displaystyle a_{0}     The expansion of the table is continued in this manner until a row containing only one non zero element is reached.  Note the     a  n    a  0        subscript  a  n    subscript  a  0     \frac{a_{n}}{a_{0}}   is for the 1st two rows. Then for 3rd and 4th row the coefficient changes (i.e.     b   n  -  1     b  0        subscript  b    n  1     subscript  b  0     \frac{b_{n-1}}{b_{0}}   ) . This can be viewed as the new polynomial which has one less degree and then continuing.  Stability Test  If     a  0   >  0       subscript  a  0   0    {a_{0}}>0   then for every value of    a  0     subscript  a  0    {a_{0}}   ,    b  0     subscript  b  0    {b_{0}}   ,    c  0     subscript  c  0    {c_{0}}   ... that is negative, the polynomial has one root outside of the unit disc. This implies that the method can be stopped after the first negative value is found when checking for stability.  Sample Implementation  This method is very easy to implement using dynamic arrays on a computer. It also tells whether all the modulus of the roots (complex and real) lie inside the unit disc. Vector v contains the real coefficients of the original polynomial in the order from highest degree to lowest degree.   /* vvd is the jury array */ vvd.push_back(v); // Store the first row reverse(v.begin(),v.end());
         vvd.push_back(v); // Store the second row  for (i= 2 ;;i+= 2 )
         {
             v.clear(); double mult=vvd[i -2 ][vvd[i -2 ].size() -1 ]/vvd[i -2 ][ 0 ]; // This is an/a0 as mentioned in the article.  for ( j= 0 ;j -2 ].size() -1 ;j++) "="" " all= ""  "no" = "" -= ""  2 = "" <= ""  and = ""  break ;= "" check= "" compute= "" disc= "" done= ""  else = ""  for (i= "0;i  if (i= "vvd.size())"  if (v.size()= "1)"  if (vvd[i][ 0 ]<= "0)" inside= "" is= "" last= "" lie= "" next= "" reverse= "" reverse(v.begin(),v.end());= "" roots= "" row= "" rows= "" source= "" take= "" the= "" unit= ""  using = "" v.push_back(vvd[i -2 ][j]= "" vvd.push_back(v);= "" vvd[i -1 ][j]*mult);= "" {= "" }= "" >
 
 == See also ==
 *[[ Liénard–Chipart  criterion ]], another stability criterion derived from Routh-Hurwitz ( for continuous-time systems)
 
 == References ==
 For more details please check these references:
 * [http: //libra.msra.cn/Publication/1578446/a-note-on-the-reduced-schur-cohn-criterion A note on the reduced Schur–Cohn criterion] For advanced resources:
 * {{Wayback|date= 20080802013128 |url=http: //users.rsise.anu.edu.au/~briandoa/pubs/R300AN499.pdf}} * {{cite doi| 10. 1016 / 0165 -1684 ( 96 ) 00077 -1 }}
 * http: //www.laas.fr/~henrion/Papers/lyap.ps.gz For implementations:
 * http: //www.ticalc.org/archives/files/fileinfo/426/42696.html (TI-83+/84+ graphing calculators) {{DEFAULTSORT:Jury Stability Criterion}}
 [[ Category:Stability  theory ]] " 