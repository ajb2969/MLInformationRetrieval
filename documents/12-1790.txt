


True quantified Boolean formula




True quantified Boolean formula

In computational complexity theory, the language TQBF is a formal language consisting of the true quantified Boolean formulas. A (fully) quantified Boolean formula is a formula in quantified propositional logic where every variable is quantified (or bound), using either existential or universal quantifiers, at the beginning of the sentence. Such a formula is equivalent to either true or false (since there are no free variables). If such a formula evaluates to true, then that formula is in the language TQBF. It is also known as QSAT (Quantified SAT).
Overview
In computational complexity theory, the quantified Boolean formula problem (QBF) is a generalization of the Boolean satisfiability problem in which both existential quantifiers and universal quantifiers can be applied to each variable. Put another way, it asks whether a quantified sentential form over a set of Boolean variables is true or false. For example, the following is an instance of QBF:



QBF is the canonical complete problem for PSPACE, the class of problems solvable by a deterministic or nondeterministic Turing machine in polynomial space and unlimited time.1 Given the formula in the form of an abstract syntax tree, the problem can be solved easily by a set of mutually recursive procedures which evaluate the formula. Such an algorithm uses space proportional to the height of the tree, which is linear in the worst case, but uses time exponential in the number of quantifiers.
Provided that MA ⊊ PSPACE, which is widely believed, QBF cannot be solved, nor can a given solution even be verified, in either deterministic or probabilistic polynomial time (in fact, unlike the satisfiability problem, there's no known way to specify a solution succinctly). It is trivial to solve using an alternating Turing machine in linear time, which is no surprise since in fact AP = PSPACE, where AP is the class of problems alternating machines can solve in polynomial time.2
When the seminal result IP = PSPACE was shown (see interactive proof system), it was done by exhibiting an interactive proof system that could solve QBF by solving a particular arithmetization of the problem.3
QBF formulas have a number of useful canonical forms. For example, it can be shown that there is a polynomial-time many-one reduction that will move all quantifiers to the front of the formula and make them alternate between universal and existential quantifiers. There is another reduction that proved useful in the IP = PSPACE proof where no more than one universal quantifier is placed between each variable's use and the quantifier binding that variable. This was critical in limiting the number of products in certain subexpressions of the arithmetization.
Prenex normal form
A fully quantified Boolean formula can be assumed to have a very specific form, called prenex normal form. It has two basic parts: a portion containing only quantifiers and a portion containing an unquantified Boolean formula usually denoted as 
 
 
 
 . If there are 
 
 
 
  Boolean variables, the entire formula can be written as



where every variable falls within the scope of some quantifier. By introducing dummy variables, any formula in prenex normal form can be converted into a sentence where existential and universal quantifiers alternate. Using the dummy variable 
 
 
 
 ,



The second sentence has the same truth value but follows the restricted syntax. Assuming fully quantified Boolean formulas to be in prenex normal form is a frequent feature of proofs.
Solving
There is a simple recursive algorithm for determining whether a QBF is in TQBF (i.e. is true). Given some QBF



If the formula contains no quantifiers, we can just return the formula. Otherwise, we take off the first quantifier and check both possible values for the first variable:






If 
 
 
 
 , then return 
 
 
 
 . If 
 
 
 
 , then return 
 
 
 
 .
How fast does this algorithm run? For every quantifier in the initial QBF, the algorithm makes two recursive calls on only a linearly smaller subproblem. This gives the algorithm an exponential runtime O(2n).
How much space does this algorithm use? Within each invocation of the algorithm, it needs to store the intermediate results of computing A and B. Every recursive call takes off one quantifier, so the total recursive depth is linear in the number of quantifiers. Formulas that lack quantifiers can be evaluated in space logarithmic in the number of variables. The initial QBF was fully quantified, so there are at least as many quantifiers as variables. Thus, this algorithm uses O(n + log n) = O(n) space. This makes the TQBF language part of the PSPACE complexity class.
PSPACE-completeness
The TQBF language serves in complexity theory as the canonical PSPACE-complete problem. Being PSPACE-complete means that a language is in PSPACE and that the language is also PSPACE-hard. The algorithm above shows that TQBF is in PSPACE. Showing that TQBF is PSPACE-hard requires showing that any language in the complexity class PSPACE can be reduced to TQBF in polynomial time. I.e.,



This means that, for a PSPACE language L, whether an input 
 
 
 
  is in L can be decided by checking whether 
 
 
 
  is in TQBF, for some function 
 
 
 
  that is required to run in polynomial time (relative to the length of the input) Symbolically,



Proving that TQBF is PSPACE-hard, requires specification of 
 
 
 
 .
So, suppose that L is a PSPACE language. This means that L can be decided by a polynomial space deterministic Turing machine (DTM). This is very important for the reduction of L to TQBF, because the configurations of any such Turing Machine can be represented as Boolean formulas, with Boolean variables representing the state of the machine as well as the contents of each cell on the Turing Machine tape, with the position of the Turing Machine head encoded in the formula by the formula's ordering. In particular, our reduction will use the variables 
 
 
 
  and 
 
 
 
 , which represent two possible configurations of the DTM for L, and a natural number t, in constructing a QBF 
 
 
 
  which is true if and only if the DTM for L can go from the configuration encoded in 
 
 
 
  to the configuration encoded in 
 
 
 
  in no more than t steps. The function 
 
 
 
 , then, will construct from the DTM for L a QBF 
 
 
 
 , where 
 
 
 
  is the DTM's starting configuration, 
 
 
 
  is the DTM's accepting configuration, and T is the maximum number of steps the DTM could need to move from one configuration to the other. We know that T = O(exp(n)), where n is the length of the input, because this bounds the total number of possible configurations of the relevant DTM. Of course, it cannot take the DTM more steps than there are possible configurations to reach 
 
 
 
  unless it enters a loop, in which case it will never reach 
 
 
 
  anyway.
At this stage of the proof, we have already reduced the question of whether an input formula 
 
 
 
  (encoded, of course, in 
 
 
 
 ) is in L to the question of whether the QBF 
 
 
 
 , i.e., 
 
 
 
 , is in TQBF. The remainder of this proof proves that 
 
 
 
  can be computed in polynomial time.
For 
 
 
 
 , computation of 
 
 
 
  is straightforward—either one of the configurations changes to the other in one step or it does not. Since the Turing Machine that our formula represents is deterministic, this presents no problem.
For 
 
 
 
 , computation of 
 
 
 
  involves a recursive evaluation, looking for a so-called "middle point" 
 
 
 
 . In this case, we rewrite the formula as follows:



This converts the question of whether 
 
 
 
  can reach 
 
 
 
  in t steps to the question of whether 
 
 
 
  reaches a middle point 
 
 
 
  in 
 
 
 
  steps, which itself reaches 
 
 
 
  in 
 
 
 
  steps. The answer to the latter question of course gives the answer to the former.
Now, t is only bounded by T, which is exponential (and so not polynomial) in the length of the input. Additionally, each recursive layer virtually doubles the length of the formula. (The variable 
 
 
 
  is only one midpoint—for greater t, there are more stops along the way, so to speak.) So the time required to recursively evaluate 
 
 
 
  in this manner could be exponential as well, simply because the formula could become exponentially large. This problem is solved by universally quantifying using variables 
 
 
 
  and 
 
 
 
  over the configuration pairs (e.g., 
 
 
 
 ), which prevents the length of the formula from expanding due to recursive layers. This yields the following interpretation of 
 
 
 
 :



This version of the formula can indeed be computed in polynomial time, since any one instance of it can be computed in polynomial time. The universally quantified ordered pair simply tells us that whichever choice of 
 
 
 
  is made, 
 
 
 
 .
Thus, 
 
 
 
 , so TQBF is PSPACE-hard. Together with the above result that TQBF is in PSPACE, this completes the proof that TQBF is a PSPACE-complete language.
(This proof follows Sipser 2006 pp. 310–313 in all essentials. Papadimitriou 1994 also includes a proof.)
Miscellany

One important subproblem in TQBF is the Boolean satisfiability problem. In this problem, you wish to know whether a given Boolean formula 
 
 
 
  can be made true with some assignment of variables. This is equivalent to the TQBF using only existential quantifiers:










This is also an example of the larger result NP 
 
 
 
  PSPACE which follows directly from the observation that a polynomial time verifier for a proof of a language accepted by a NTM (Non-deterministic Turing machine) requires polynomial space to store the proof.
 


Any class in the polynomial hierarchy (PH) has TQBF as a hard problem. In other words, for the class comprising all languages L for which there exists a poly-time TM V, a verifier, such that for all input x and some constant i,










which has a specific QBF formulation that is given as
 





 
  such that 
 
 





where the 
 
 
 
 's are vectors of Boolean variables.
 


It is important to note that while TQBF the language is defined as the collection of true quantified Boolean formulas, the abbreviation TQBF is often used (even in this article) to stand for a totally quantified Boolean formula, often simply called a QBF (quantified Boolean formula, understood as "fully" or "totally" quantified). It is important to distinguish contextually between the two uses of the abbreviation TQBF in reading the literature.
A TQBF can be thought of as a game played between two players, with alternating moves. Existentially quantified variables are equivalent to the notion that a move is available to a player at a turn. Universally quantified variables mean that the outcome of the game does not depend on what move a player makes at that turn. Also, a TQBF whose first quantifier is existential corresponds to a formula game in which the first player has a winning strategy.
A TQBF for which the quantified formula is in 2-CNF may be solved in linear time, by an algorithm involving strong connectivity analysis of its implication graph. The 2-satisfiability problem is a special case of TQBF for these formulas, in which every quantifier is existential.45
There is a systematic treatment of restricted versions of quantified boolean formulas (giving Schaefer-type classifications) provided in an expository paper by Hubie Chen.6

Notes and references



Fortnow & Homer (2003) provides some historical background for PSPACE and TQBF.
Zhang (2003) provides some historical background of Boolean formulas.
Arora, Sanjeev. (2001). COS 522: Computational Complexity. Lecture Notes, Princeton University. Retrieved October 10, 2005.
Fortnow, Lance & Steve Homer. (2003, June). A short history of computational complexity. The Computational Complexity Column, 80. Retrieved October 9, 2005.
Papadimitriou, C. H. (1994). Computational Complexity. Reading: Addison-Wesley.
Sipser, Michael. (2006). Introduction to the Theory of Computation. Boston: Thomson Course Technology.
Zhang, Lintao. (2003). Searching for truth: Techniques for satisfiability of boolean formulas. Retrieved October 10, 2005.

See also

Cook–Levin theorem, stating that SAT is NP-complete
Generalized geography

External links

The Quantified Boolean Formulas Library (QBFLIB)
DepQBF - a search-based solver for quantified boolean formula
International Workshop on Quantified Boolean Formulas

"
Category:Satisfiability problems Category:Boolean algebra Category:PSPACE-complete problems






.
.





