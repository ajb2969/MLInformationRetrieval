   Loss functions for classification      Loss functions for classification   In machine learning and mathematical optimization , loss functions for classification are computationally feasible loss functions representing the price paid for inaccuracy of predictions in classification problems. 1 Given   X   X   X   as the vector space of all possible inputs, and Y = {–1,1} as the vector space of all possible outputs, we wish to find a function    f  :   X  ↦  ℝ      normal-:  f   maps-to  X  ℝ     f:X\mapsto\mathbb{R}   which best maps    f   (   x  →   )       f   normal-→  x     f(\vec{x})   to   y   y   y   . 2 However, because of incomplete information, noise in the measurement, or probabilistic components in the underlying process, it is possible for the same    x  →     normal-→  x    \vec{x}   to generate different   y   y   y   . 3 As a result, the goal of the learning problem is to minimize expected risk, defined as       I   [  f  ]    =    ∫   X  ⊗  Y     V   (   f   (   x  →   )    ,  y  )   p   (   x  →   ,  y  )   d    x  →    d  y          I   delimited-[]  f      subscript    tensor-product  X  Y      V     f   normal-→  x    y   p    normal-→  x   y   d   normal-→  x   d  y      I[f]=\displaystyle\int_{X\otimes Y}V(f(\vec{x}),y)p(\vec{x},y)\,d\vec{x}\,dy   where    V   (   f   (   x  →   )    ,  y  )       V     f   normal-→  x    y     V(f(\vec{x}),y)   represents the loss function, and    p   (   x  →   ,  y  )       p    normal-→  x   y     p(\vec{x},y)   represents the probability distribution of the data, which can equivalently be written using Bayes' theorem as      p   (   x  →   ,  y  )   =  p   (  y  ∣   x  →   )   p   (   x  →   )   .     fragments  p   fragments  normal-(   normal-→  x   normal-,  y  normal-)    p   fragments  normal-(  y  normal-∣   normal-→  x   normal-)   p   fragments  normal-(   normal-→  x   normal-)   normal-.    p(\vec{x},y)=p(y\mid\vec{x})p(\vec{x}).     In practice, the probability distribution    p   (   x  →   ,  y  )       p    normal-→  x   y     p(\vec{x},y)   is unknown. Consequently, utilizing a training set of   n   n   n    independently and identically distributed samples      S  =   {   (    x  →   1   ,   y  1   )   ,  …  ,   (    x  →   n   ,   y  n   )   }       S     subscript   normal-→  x   1    subscript  y  1    normal-…    subscript   normal-→  x   n    subscript  y  n       S=\{(\vec{x}_{1},y_{1}),\dots,(\vec{x}_{n},y_{n})\}     drawn from the data sample space , one seeks to minimize empirical risk         I  S    [  f  ]    =    1  n     ∑   i  =  1   n    V   (   f   (    x  →   i   )    ,   y  i   )       .         subscript  I  S    delimited-[]  f        1  n     superscript   subscript     i  1    n     V     f   subscript   normal-→  x   i     subscript  y  i         I_{S}[f]=\frac{1}{n}\sum_{i=1}^{n}V(f(\vec{x}_{i}),y_{i}).     as a proxy for expected risk. 4 (See statistical learning theory for a more detailed description.)  For computational ease, it is standard practice to write loss functions as functions of only one variable. Within classification, loss functions are generally written solely in terms of the product of the true classifier   y   y   y   and the predicted value    f   (   x  →   )       f   normal-→  x     f(\vec{x})   . 5 Selection of a loss function within this framework       V   (   f   (   x  →   )    ,  y  )    =   ϕ   (   -   y  f   (   x  →   )     )          V     f   normal-→  x    y      ϕ      y  f   normal-→  x        V(f(\vec{x}),y)=\phi(-yf(\vec{x}))   impacts the optimal    f  S  *     subscript   superscript  f    S    f^{*}_{S}   which minimizes empirical risk , as well as the computational complexity of the learning algorithm.  Given the binary nature of classification, a natural selection for a loss function (assuming equal cost for false positives and false negatives ) would be the 0–1 indicator function which takes the value of 0 if the predicted classification equals that of the true class or a 1 if the predicted classification does not match the true class. This selection is modeled by       V   (   f   (   x  →   )    ,  y  )    =   H   (   -   y  f   (   x  →   )     )          V     f   normal-→  x    y      H      y  f   normal-→  x        V(f(\vec{x}),y)=H(-yf(\vec{x}))   where   H   H   H   indicates the Heaviside step function . However, this loss function is non-convex and non-smooth, and solving for the optimal solution is an NP-hard combinatorial optimization problem. 6 As a result, it is better to substitute continuous, convex loss function surrogates which are tractable for commonly used learning algorithms. In addition to their computational tractability, one can show that the solutions to the learning problem using these loss surrogates allows for the recovery of the actual solution to the original classification problem. 7 Some of these surrogates are described below.  Bounds for classification  Utilizing Bayes' theorem , it can be shown that the optimal    f  *     superscript  f     f^{*}   for a binary classification problem is equivalent to        f  *    (   x  →   )    =   {     1     if  p   (  1  ∣   x  →   )   >  p   (  -  1  ∣   x  →   )         -  1      if  p   (  1  ∣   x  →   )   <  p   (  -  1  ∣   x  →   )               superscript  f     normal-→  x     cases  1   fragments  if  p   fragments  normal-(  1  normal-∣   normal-→  x   normal-)    p   fragments  normal-(   1  normal-∣   normal-→  x   normal-)      1    fragments  if  p   fragments  normal-(  1  normal-∣   normal-→  x   normal-)    p   fragments  normal-(   1  normal-∣   normal-→  x   normal-)       f^{*}(\vec{x})\;=\;\begin{cases}1&\text{if }p(1\mid\vec{x})>p(-1\mid\vec{x})\\
 -1&\text{if }p(1\mid\vec{x})   (when    p   (  1  ∣   x  →   )   ≠  p   (  -  1  ∣   x  →   )      fragments  p   fragments  normal-(  1  normal-∣   normal-→  x   normal-)    p   fragments  normal-(   1  normal-∣   normal-→  x   normal-)     p(1\mid\vec{x})\neq p(-1\mid\vec{x})   ). Furthermore, it can be shown that for any convex loss function    V   (   y   f  0    (   x  →   )    )       V    y   subscript  f  0    normal-→  x      V(yf_{0}(\vec{x}))   for which      f  0    (   x  →   )    ≠  0         subscript  f  0    normal-→  x    0    f_{0}(\vec{x})\neq 0   and which is decreasing in a neighborhood of 0,        f  *    (   x  →   )    =   sgn   (    f  0    (   x  →   )    )           superscript  f     normal-→  x     sgn     subscript  f  0    normal-→  x       f^{*}(\vec{x})=\operatorname{sgn}(f_{0}(\vec{x}))   where   sgn   sgn   \operatorname{sgn}   is the sign function (for proof see 8 ). Note also that      f  0    (   x  →   )    ≠  0         subscript  f  0    normal-→  x    0    f_{0}(\vec{x})\neq 0   in practice when the loss function is differentiable at the origin. This fact confers a consistency property upon all convex loss functions; specifically, all convex loss functions will lead to consistent results with the 0–1 loss function given the presence of infinite data. Consequently, we can bound the difference of any of these convex loss function from expected risk. 9  Simplifying expected risk for classification  Given the properties of binary classification properties, it is possible to simplify the calculation of expected risk from the integral specified above. Specifically,      I   [  f  ]       I   delimited-[]  f     \displaystyle I[f]     The second equality follows from the properties described above. The third equality follows since    x  →     normal-→  x    \vec{x}   is simply data and since      ∫  X    p   (  x  )   d  x    =  1        subscript   X     p  x  d  x    1    \int_{X}p(x)\,dx=1   . Finally, the fourth equality follows from the fact that 1 and −1 are the only possible values for   y   y   y   , and the fifth because    p   (  -  1  ∣  x  )   =  1  -  p   (  1  ∣  x  )      fragments  p   fragments  normal-(   1  normal-∣  x  normal-)    1   p   fragments  normal-(  1  normal-∣  x  normal-)     p(-1\mid x)=1-p(1\mid x)   . As a result, one can solve for the minimizers of    I   [  f  ]       I   delimited-[]  f     I[f]   for any convex loss functions with these properties by differentiating the last equality with respect to   f   f   f   and setting the derivative equal to 0. Thus, minimizers for all of the loss function surrogates described below are easily obtained as functions of only    f   (   x  →   )       f   normal-→  x     f(\vec{x})   and    p   (  1  ∣  x  )      fragments  p   fragments  normal-(  1  normal-∣  x  normal-)     p(1\mid x)   . 10  Square loss  While more commonly used in regression, the square loss function can be re-written as a function    ϕ   (   y  f   (   x  →   )    )       ϕ    y  f   normal-→  x      \phi(yf(\vec{x}))   and utilized for classification. Defined as       V   (   f   (   x  →   )    ,  y  )    =    (   1  -   y  f   (   x  →   )     )   2         V     f   normal-→  x    y     superscript    1    y  f   normal-→  x     2     V(f(\vec{x}),y)=(1-yf(\vec{x}))^{2}   the square loss function is both convex and smooth and matches the 0–1 indicator function when     y  f   (   x  →   )    =  0        y  f   normal-→  x    0    yf(\vec{x})=0   and when     y  f   (   x  →   )    =  1        y  f   normal-→  x    1    yf(\vec{x})=1   . However, the square loss function tends to penalize outliers excessively, leading to slower convergence rates (with regards to sample complexity) than for the logistic loss or hinge loss functions. 11 In addition, functions which yield high values of    f   (   x  →   )       f   normal-→  x     f(\vec{x})   for some    x  ∈  X      x  X    x\in X   will perform poorly with the square loss function, since high values of    y  f   (   x  →   )       y  f   normal-→  x     yf(\vec{x})   will be penalized severely, regardless of whether the signs of   y   y   y   and    f   (   x  →   )       f   normal-→  x     f(\vec{x})   match.  A benefit of the square loss function is that its structure lends itself to easy cross validation of regularization parameters. Specifically for Tikhonov regularization , one can solve for the regularization parameter using leave-one-out cross-validation in the same time as it would take to solve a single problem. 12  The minimizer of    I   [  f  ]       I   delimited-[]  f     I[f]   for the square loss function is       f  Square  *   =  2  p   (  1  ∣  x  )   -  1     fragments   subscript   superscript  f    Square    2  p   fragments  normal-(  1  normal-∣  x  normal-)    1    f^{*}_{\text{Square}}=2p(1\mid x)-1   This function notably equals    f  *     superscript  f     f^{*}   for the 0–1 loss function when    p   (  1  ∣  x  )   =  1     fragments  p   fragments  normal-(  1  normal-∣  x  normal-)    1    p(1\mid x)=1   or    p   (  1  ∣  x  )   =  0     fragments  p   fragments  normal-(  1  normal-∣  x  normal-)    0    p(1\mid x)=0   , but predicts a value between the two classifications when the classification of    x  →     normal-→  x    \vec{x}   is not known with absolute certainty.  Hinge loss  The hinge loss function is defined as        V   (   f   (   x  →   )    ,  y  )    =   max   (  0  ,   1  -   y  f   (   x  →   )     )    =    |   1  -   y  f   (   x  →   )     |   +    .          V     f   normal-→  x    y      0    1    y  f   normal-→  x            subscript      1    y  f   normal-→  x           V(f(\vec{x}),y)=\max(0,1-yf(\vec{x}))=|1-yf(\vec{x})|_{+}.     The hinge loss provides a relatively tight, convex upper bound on the 0–1 indicator function . Specifically, the hinge loss equals the 0–1 indicator function when     sgn   (   f   (   x  →   )    )    =  y       sgn    f   normal-→  x     y    \operatorname{sgn}(f(\vec{x}))=y   and     |   y  f   (   x  →   )    |   ≥  1          y  f   normal-→  x     1    |yf(\vec{x})|\geq 1   . In addition, the empirical risk minimization of this loss is equivalent to the classical formulation for support vector machines (SVMs). Correctly classified points lying outside the margin boundaries of the support vectors are not penalized, whereas points within the margin boundaries or on the wrong side of the hyperplane are penalized in a linear fashion compared to their distance from the correct boundary. 13  While the hinge loss function is both convex and continuous, it is not smooth (that is not differentiable) at     y  f   (   x  →   )    =  1        y  f   normal-→  x    1    yf(\vec{x})=1   . Consequently, the hinge loss function cannot be used with gradient descent methods or stochastic gradient descent methods which rely on differentiability over the entire domain. However, the hinge loss does have a subgradient at     y  f   (   x  →   )    =  1        y  f   normal-→  x    1    yf(\vec{x})=1   , which allows for the utilization of subgradient descent methods . 14 SVMs utilizing the hinge loss function can also be solved using quadratic programming .  The minimizer of    I   [  f  ]       I   delimited-[]  f     I[f]   for the hinge loss function is        f  Hinge  *    (   x  →   )    =   {     1     if  p   (  1  ∣   x  →   )   >  p   (  -  1  ∣   x  →   )         -  1      if  p   (  1  ∣   x  →   )   <  p   (  -  1  ∣   x  →   )               subscript   superscript  f    Hinge    normal-→  x     cases  1   fragments  if  p   fragments  normal-(  1  normal-∣   normal-→  x   normal-)    p   fragments  normal-(   1  normal-∣   normal-→  x   normal-)      1    fragments  if  p   fragments  normal-(  1  normal-∣   normal-→  x   normal-)    p   fragments  normal-(   1  normal-∣   normal-→  x   normal-)       f^{*}_{\text{Hinge}}(\vec{x})\;=\;\begin{cases}1&\text{if }p(1\mid\vec{x})>p(-%
 1\mid\vec{x})\\
 -1&\text{if }p(1\mid\vec{x})     when    p   (  1  ∣  x  )   ≠  0.5     fragments  p   fragments  normal-(  1  normal-∣  x  normal-)    0.5    p(1\mid x)\neq 0.5   , which matches that of the 0–1 indicator function. This conclusion makes the hinge loss quite attractive, as bounds can be placed on the difference between expected risk and the sign of hinge loss function. 15  Logistic loss  The logistic loss function is defined as       V   (   f   (   x  →   )    ,  y  )    =    1   ln  2     ln   (   1  +   e   -   y  f   (   x  →   )       )           V     f   normal-→  x    y        1    2        1   superscript  e      y  f   normal-→  x           V(f(\vec{x}),y)=\frac{1}{\ln 2}\ln(1+e^{-yf(\vec{x})})     This function displays a similar convergence rate to the hinge loss function, and since it is continuous, gradient descent methods can be utilized. However, the logistic loss function does not assign zero penalty to any points. Instead, functions which correctly classify points with high confidence, that is high values of    |   f   (   x  →   )    |        f   normal-→  x      |f(\vec{x})|   , are penalized less. This structure leads the logistic loss function to be very sensitive to outliers in the data. In short, the logistic loss function holds some balance between the computational attractiveness of the square loss function and the direct applicability of the hinge loss function.  The minimizer of    I   [  f  ]       I   delimited-[]  f     I[f]   for the logistic loss function is        f  Logistic  *   =   ln   (    p   (  1  ∣  x  )     1  -  p   (  1  ∣  x  )     )     .       subscript   superscript  f    Logistic        fragments  p   fragments  normal-(  1  normal-∣  x  normal-)     fragments  1   p   fragments  normal-(  1  normal-∣  x  normal-)        f^{*}_{\text{Logistic}}=\ln\left(\frac{p(1\mid x)}{1-p(1\mid x)}\right).     This function is undefined when    p   (  1  ∣  x  )   =  1     fragments  p   fragments  normal-(  1  normal-∣  x  normal-)    1    p(1\mid x)=1   or    p   (  1  ∣  x  )   =  0     fragments  p   fragments  normal-(  1  normal-∣  x  normal-)    0    p(1\mid x)=0   (tending toward ∞ and −∞ respectively), but predicts a smooth curve which grows when    p   (  1  ∣  x  )      fragments  p   fragments  normal-(  1  normal-∣  x  normal-)     p(1\mid x)   increases and equals 0 when    p   (  1  ∣  x  )   =  0.5     fragments  p   fragments  normal-(  1  normal-∣  x  normal-)    0.5    p(1\mid x)=0.5   . 16  See also   Statistical learning theory  Loss function  Support vector machine   References  "  Category:Machine learning algorithms     ↩  ↩  ↩   ↩  ↩  ↩      ↩         