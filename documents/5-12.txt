   Relational operator      Relational operator  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     In computer science , a relational operator is a programming language construct or operator that tests or defines some kind of relation between two entities . These include numerical equality (e.g., 5 = 5) and inequalities (e.g., 4 ≥ 3).  In programming languages that include a distinct boolean data type in their type system , like Java , these operators return true or false, depending on whether the conditional relationship between the two operands holds or not. In Java , == is meant to compare two primitive data types . In other languages such as C , relational operators return the integers 0 or 1. Some programming languages make a syntactical distinction between the "equals" of assignment (e.g. a = 1 assigns the value 1 to the variable "a") and the "equals" of comparison ( if a == 1 then ... ). Other languages determine which is meant from context.  "Greater than" and "less than" comparison of non-numeric data is performed according to a sort convention (such as, for text strings, lexicographical order ) which may be built into the programming language and/or configurable by the programmer.  When it is desired to associate a numeric value with the result of a comparison between two data items, say "a" and "b", the usual convention is to assign −1 if a  b. For example, the C function [[strcmp]] performs a three-way comparison and returns −1, 0, or 1 according to this convention, and qsort expects the comparison function to return values according to this convention. In sorting algorithms , the efficiency of comparison code is critical since it is one of the major factors contributing to sorting performance.  In floating-point arithmetic , numbers, including many simple fractions , cannot be represented exactly, and it may be necessary to test for equality within a given tolerance.  Comparison of programmer-defined data types (data types of which the programming language itself has no in-built understanding) may be carried out by custom-written or library functions (such as strcmp mentioned above), or, in some languages, by " overloading " a comparison operator – that is, assigning a programmer-defined meaning that depends on the data types being compared.  Sometimes, particularly in object-oriented programming , the comparison raises questions of data types and inheritance , equality and identity . It is often necessary to distinguish between:   two objects with different datatypes both related to another datatype, e.g. an orange and a lemon, both being citrus fruit  two different objects of the same type, e.g. two hands  two objects being equal but distinct, e.g. two $10 banknotes  two different references to the same object, e.g. two nicknames for the same person   Sameness and difference can be relative or graduated as well as absolute, particularly in fuzzy logic , artificial intelligence , signal processing , lossy data compression and pattern recognition .  An expression created using a relational operator forms what is known as a relational expression or a condition . Relational operators are also used in technical literature instead of words. Relational operators are usually written in infix notation , if supported by the programming language, which means that they appear between their operands (the two expressions being related). For example, an expression in C will print the message if the x is less than y :   if (x < y) {
       printf( "x is less than y in this example \n " );
   }  Other programming languages, such as Lisp , use prefix notation , as follows:  (>= X Y)  Standard relational operators  The most common numerical relational operators used in programming languages are shown below.      Common relational operators   Convention   equal to   not equal to   greater than   less than   greater than or equal to   less than or equal to     In print   =   ≠   >   <   ≥   ≤     Fortran  1   .EQ.   .NE.   .GT.   .LT.   .GE.   .LE.     ==   /=   >     >=       ALGOL 68  2   =   ≠   >     ≥   ≤     /=   >=       '''eq'''   '''ne'''   '''gt'''   '''lt'''   '''ge'''   '''le'''     BASIC-like 3   =     >     >=       MUMPS   =   '=   >     '<   '>     Pascal-like 4   =     >     >=       C-like 5   ==   !=   >     >=       Bourne-like  shells  6   -eq   -ne   -gt   -lt   -ge   -le     Batch file   EQU   NEQ   GTR   LSS   GEQ   LEQ     MATLAB 7   ==   ~=   >     >=       eq(x,y)   ne(x,y)   gt(x,y)   lt(x,y)   ge(x,y)   le(x,y)     Mathematica 8   ==   !=   >     >=       Equal[x,y]   Unequal[x,y]   Greater[x,y]   Less[x,y]   GreaterEqual[x,y]   LessEqual[x,y]     Other conventions are less common: Common Lisp and Macsyma / Maxima use Basic-like operators except for inequality, which is /= in Common Lisp and # in Macsyma/Maxima. Older Lisps used equal , greaterp , and lessp ; and negated them using not for the remaining operators.  Equality  Confusion with assignment operators  Early FORTRAN (1956–57) was bounded by heavily restricted character sets where " = " was the only relational operator available. There were no "" (and certainly no ≤ or ≥). This forced the designers to define symbols such as .GT., .LT., .GE., .EQ. etc. and subsequently made it tempting to use the remaining " = " character for copying, despite the obvious incoherence with mathematical usage (X=X+1 should be impossible).  International Algebraic Language and ALGOL (1958 and 1960) therefore introduced " := " for assignment, leaving the standard " = " available for equality, a convention followed by CPL , Algol W , BCPL , Simula , Algol 68 , SETL , Pascal , Smalltalk , Modula2 , Ada , Standard ML , OCaml , Eiffel , Delphi , Oberon , Dylan , VHDL , and several other languages.  On the other hand, the now very influential language C started off as a minimal compiled language called B , which, in turn, started off as a simplified version of BCPL (a typeless version of CPL ). The intended application for B was solely as a vehicle for a first port of (a then very primitive) UNIX. In what has been described as a "strip-down" process, B replaced the original " := " and " = " of BCPL by " = " and " == " respectively, the reason for this being unknown ( and and or meanwhile became " & " and " | ", and later " && " and " || ", respectively). As a small type system was later introduced, B became C. The popularity of C, and its association with UNIX, led to Java, C#, and other languages (including new versions of Fortran) following suit, syntactically, despite this unnecessary conflict with the mathematical meaning of the equal sign.  Languages  Assignments in C have a value and since any non-zero scalar value is interpreted as true in conditional expressions , 9 the code " if (x = y) " is legal, but has a very different meaning from " if (x == y) ". The former code fragment means "assign y to x , and if the new value of x is not zero, execute the following statement". The latter fragment means " if and only if  x is equal to y , execute the following statement". 10   int x = 1 ; int y = 2 ; if (x = y) { /* This code will always execute if y is anything but 0*/ printf( "x is %d and y is %d \n " , x, y);
   }  Though Java and C# have the same operators as C, this mistake usually causes a compile error in these languages instead, because the if-condition must be of type boolean , and there is no implicit way to convert from other types (e.g. numbers) into boolean s. So unless the variable that is assigned to has type boolean (or wrapper type Boolean ), there will be a compile error.  In Algol-like languages such as Pascal, Delphi and Ada (in the sense that they allow nested function definitions ) as well as in Python and many functional languages, among others, assignment operators cannot appear in an expression (including if clauses), thus precluding this class of error. Some compilers, such as GCC , will provide a warning when compiling code that contains an assignment operator inside an if statement, though there are some legitimate uses of an assignment inside an if-condition. In those cases the programmer would need to explicitly wrap the assignment in an extra pair of parentheses to avoid the warning.  Similarly, some languages, such as BASIC use just the " = " symbol for both assignment and equality, as they are syntactically separate (as with Pascal, Ada, Python, etc., assignment operators cannot appear in expressions).  Some programmers get in the habit of writing comparisons against a constant in the reverse of the usual order:   if ( 2 == a) { /* Mistaken use of = versus == would be a compile-time error */ }  If the programmer accidentally uses = , the resulting code is invalid because 2 is not a variable. The compiler will generate an error message, upon which the proper operator can be substituted. This coding style is known as left-hand comparison.  Object identity vs. content equality  In many modern programming languages, objects and data structures are accessed through references . In such languages, there becomes a need to test for two different types of equality:   Physical (or shallow) equality - whether two references reference the same object.  Structural (or deep) equality - whether the objects referenced by two references are equivalent in some sense (e.g. their contents are the same).   The first type of equality usually implies the second (except for things like NaN which are unequal to themselves), but the converse is not necessarily true. For example, two string objects may be distinct objects (unequal in the first sense) but contain the same sequence of characters (equal in the second sense). See identity for more of this issue.  The following table lists the different mechanisms to test for these two types of equality in various languages:      Language   Physical equality   Structural equality   Notes       ALGOL 68   a :=: b  or  a '''is''' b   a = b   when a and b are pointers     C , C++   a == b   *a == *b   when a and b are pointers     C#   object.ReferenceEquals(a, b)   a.Equals(b)   The == operator defaults to ReferenceEquals , but can be overloaded to perform Equals instead.     Common Lisp   (eq a b)   (equal a b)      Go   a == b   reflect.DeepEqual(*a, *b)   when a and b are pointers     Java   a == b   a.equals(b)      JavaScript   a === b   a == b   when a and b are two string objects that contain equivalent characters, the === operator will still return true.     OCaml , Smalltalk   a == b   a = b      Pascal   a^ = b^   a = b      Perl   $a == $b   $$a == $$b   when $a and $b are references to scalars     PHP 5   $a === $b   $a == $b   when $a and $b are objects     Python   a is b   a == b      Ruby   a.equal?(b)   a == b      Scheme   (eq? a b)   (equal? a b)      Swift   a === b   a == b   when a and b have class type     Visual Basic .NET  11   a Is b or object.ReferenceEquals(a, b)   a = b or a.Equals(b)   Same as C#.     Objective-C ( Cocoa , GNUstep )   a == b   [a isEqual:b]   when a and b are pointers to objects that are instances of NSObject     The === operator  The languages JavaScript and PHP extend this syntax, with the " == " operator able to return true if two values are equal, even if they have different types (for example, " 4 == "4" " is true), and the " === " operator returning true only if two values are equal and have equivalent types as well (such that " 4 === "4" " is false but " 4 === 4 " is true). 12 This comes in handy when checking if a value is assigned the value of 0, since " x == 0 " is true for x being 0 , but also for x being "0" (i.e. a string containing the character 0) and false (as PHP, like other languages, equates 0 to false ), and that is not always what one wants, 13 but " x === 0 " is only true when x is 0 . When comparing objects in PHP 5, the " == " operator tests for structural equality, while the " === " operator tests for physical equality. 14  Logical equivalence  Though perhaps not obvious at first, like the boolean  logical operators XOR, AND, OR, and NOT, relational operators can be designed to have logical equivalence , such that they can all be defined in terms of one another. The following four conditional statements all have the same logical equivalence E (either all true or all false) for any given x and y values:      E  =   {      x  <  y         y  >  x         x  ≱  y         y  ≰  x            E   cases    x  y   otherwise    y  x   otherwise   not-greater-than-nor-equals  x  y   otherwise   not-less-than-nor-greater-than  y  x   otherwise     E=\begin{cases}x x\\
 x\ngeq y\\
 y\nleq x\end{cases}     This relies on the domain being well ordered .  See also   Binary relation  Common operator notation  Equality (mathematics)  Equals sign  Logical operator  Operation (mathematics)  Operator (mathematics)  Operator (programming)  Spaceship operator  Triadic relation   Notes and references  "  Category:Operators (programming)     Second row of operators introduce with Fortran 90. ↩  ALGOL 68 : " stropping " regimes are used in code on platforms with limited character sets (e.g. use >= or GE instead of ≥ ), platforms with no '''bold'''  emphasis (use 'ge' ), or platforms with only UPPERCASE (use .GE  or  'GE' ). ↩  Including Visual Basic .NET , OCaml , SQL , Standard ML , and others. ↩  Including Algol , Simula , Modula-2 , Delphi , OCaml , Standard ML , Eiffel , APL and others. ↩  Including C , C++ , C# , Go , Java , JavaScript , Perl (numerical comparison only), PHP , Python , Ruby , and R . ↩  Including Bourne shell , Bash , Korn shell , and Windows PowerShell . The symbols and > are usually used in a shell for redirection , so other symbols need to be used. Without the hyphen, is used in Perl for string comparison. ↩  MATLAB, although in other respects using similar syntax as C, does not use != , as ! in MATLAB sends the following text as a command line to the operating system . The first form is also used in Smalltalk , with the exception of equality, which is = . ↩  Relational and Logical Operators of Mathematica ↩  A zero scalar value is interpreted as false while any non-zero scalar value is interpreted as true; this is typically used with integer types, similar to assembly language idioms. ↩  , 19 ↩  Patent application: On May 14, 2003,  "IS NOT OPERATOR" was filed for the ISNOT operator by employees of Microsoft . This patent was granted on November 18, 2004. ↩  ↩   ↩    