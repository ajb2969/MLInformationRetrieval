


Smn theorem




Smn theorem

 In computability theory the smn theorem, (also called the translation lemma, parameter theorem, or parameterization theorem) is a basic result about programming languages (and, more generally, Gödel numberings of the computable functions) (Soare 1987, Rogers 1967). It was first proved by Stephen Cole Kleene (Kleene 1943).
In practical terms, the theorem says that for a given programming language and positive integers m and n, there is a particular algorithm that operates on the source code of programs with m + n free variables. This algorithm produces source code that effectively substitutes m given values for the first m free variables in the program and leaves the rest free.
Details
The basic form of the theorem applies to functions of two arguments (Nies 2009, p. 6). Given a Gödel numbering 
 
 
 
  of recursive functions, there is a primitive recursive function s of two arguments with the following property: for every Gödel number p of a partial computable function f with two arguments, the expressions 
 
 
 
  and 
 
 
 
  are defined for the same combinations of natural numbers x and y, and their values are equal for any such combination. In other words, the following extensional equality of functions holds for every x:



More generally, for any m, n > 0, there exists a primitive recursive function 
 
 
 
  of m + 1 arguments that behaves as follows: for every Gödel number p of a partial computable function with m + n arguments, and all values of x1,…,xm:



The function s described above can be taken to be 
 
 
 
 .
Example
The following Lisp code implements s11 for Lisp.
 (defun s11 (f x)
    (let ((y (gensym)))
      (list 'lambda (list y) (list f x y))))
For example,  evaluates to .
See also

Currying
Kleene's recursion theorem
Partial evaluation

References



(This is the reference that the 1989 edition of Odifreddi's "Classical Recursion Theory" gives on p.131 for the smn theorem.)





External links



"
Category:Computability theory Category:Theorems in theory of computation


