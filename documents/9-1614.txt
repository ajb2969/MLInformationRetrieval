   Overlap–add method      Overlap–add method   In signal processing , the overlap–add method (OA, OLA) is an efficient way to evaluate the discrete convolution of a very long signal    x   [  n  ]       x   delimited-[]  n     x[n]   with a finite impulse response (FIR) filter    h   [  n  ]       h   delimited-[]  n     h[n]    :        y   [  n  ]    =     x   [  n  ]    *  h    [  n  ]      =  def       ∑   m  =   -  ∞    ∞       h   [  m  ]    ⋅  x    [   n  -  m   ]     =     ∑   m  =  1   M       h   [  m  ]    ⋅  x    [   n  -  m   ]      ,          y   delimited-[]  n          x   delimited-[]  n    h    delimited-[]  n       superscript   def       superscript   subscript     m             normal-⋅    h   delimited-[]  m    x    delimited-[]    n  m             superscript   subscript     m  1    M      normal-⋅    h   delimited-[]  m    x    delimited-[]    n  m         \displaystyle y[n]=x[n]*h[n]\ \stackrel{\mathrm{def}}{=}\ \sum_{m=-\infty}^{%
 \infty}h[m]\cdot x[n-m]=\sum_{m=1}^{M}h[m]\cdot x[n-m],     where h [ m ] = 0 for m outside the region [1, M ].  The concept is to divide the problem into multiple convolutions of h [ n ] with short segments of    x   [  n  ]       x   delimited-[]  n     x[n]    :        x  k    [  n  ]     =  def    {      x   [   n  +   k  L    ]       n  =   1  ,  2  ,  …  ,  L        0     otherwise  ,           superscript   def      subscript  x  k    delimited-[]  n     cases    x   delimited-[]    n    k  L        n   1  2  normal-…  L    0  otherwise     x_{k}[n]\ \stackrel{\mathrm{def}}{=}\begin{cases}x[n+kL]&n=1,2,\ldots,L\\
 0&\textrm{otherwise},\end{cases}     where L is an arbitrary segment length. Then :        x   [  n  ]    =    ∑  k     x  k    [   n  -   k  L    ]      ,        x   delimited-[]  n      subscript   k      subscript  x  k    delimited-[]    n    k  L         x[n]=\sum_{k}x_{k}[n-kL],\,     and y [ n ] can be written as a sum of short convolutions :       y   [  n  ]    =     (     ∑  k      x  k    [   n  -   k  L    ]     )   *  h    [  n  ]          y   delimited-[]  n          subscript   k      subscript  x  k    delimited-[]    n    k  L       h    delimited-[]  n      \displaystyle y[n]=\left(\sum_{k}x_{k}[n-kL]\right)*h[n]     where      y  k    [  n  ]      =  def        x  k    [  n  ]    *  h    [  n  ]        superscript   def      subscript  y  k    delimited-[]  n           subscript  x  k    delimited-[]  n    h    delimited-[]  n      y_{k}[n]\ \stackrel{\mathrm{def}}{=}\ x_{k}[n]*h[n]\,   is zero outside the region [1, L + M − 1].  And for any parameter     N  ≥    L  +  M   -  1    ,      N      L  M   1     N\geq L+M-1,\,   it is equivalent to the    N    N   N\,   -point circular convolution of     x  k    [  n  ]        subscript  x  k    delimited-[]  n     x_{k}[n]\,   with    h   [  n  ]       h   delimited-[]  n     h[n]\,   in the region [1, N ].  The advantage is that the circular convolution can be computed very efficiently as follows, according to the circular convolution theorem :  where FFT and IFFT refer to the fast Fourier transform and inverse fast Fourier transform, respectively, evaluated over   N   N   N   discrete points.  The algorithm  (Figure)  Figure 1: the overlap–add method   Fig. 1 sketches the idea of the overlap–add method. The signal    x   [  n  ]       x   delimited-[]  n     x[n]   is first partitioned into non-overlapping sequences, then the discrete Fourier transforms of the sequences     y  k    [  n  ]        subscript  y  k    delimited-[]  n     y_{k}[n]   are evaluated by multiplying the FFT of     x  k    [  n  ]        subscript  x  k    delimited-[]  n     x_{k}[n]   with the FFT of    h   [  n  ]       h   delimited-[]  n     h[n]   . After recovering of     y  k    [  n  ]        subscript  y  k    delimited-[]  n     y_{k}[n]   by inverse FFT, the resulting output signal is reconstructed by overlapping and adding the     y  k    [  n  ]        subscript  y  k    delimited-[]  n     y_{k}[n]   as shown in the figure. The overlap arises from the fact that a linear convolution is always longer than the original sequences. In the early days of development of the fast Fourier transform,   L   L   L   was often chosen to be a power of 2 for efficiency, but further development has revealed efficient transforms for larger prime factorizations of L, reducing computational sensitivity to this parameter. A pseudocode of the algorithm is the following:   Algorithm  1 ( OA  for  linear  convolution )  Evaluate the best value of N and L (L>0, N = M+L-1 nearest to power of 2).  Nx = length(x);  H = FFT(h,N) ( zero-padded  FFT )  i = 1  y = zeros(1, M+Nx-1)   while i ( Nx:  the  last  index  of  x[n] )  il = min(i+L-1,Nx)  yt = IFFT( FFT(x(i:il),N) * H, N)  k  = min(i+N-1,M+Nx-1)  y(i:k) = y(i:k) + yt(1:k-i+1) ( add  the  overlapped  output  blocks )  i = i+L   end  Circular convolution with the overlap–add method  When sequence x [ n ] is periodic, and N x is the period, then y [ n ] is also periodic, with the same period.  To compute one period of y[n], Algorithm 1 can first be used to convolve h [ n ] with just one period of x [ n ].  In the region M ≤ n ≤ N x ,  the resultant y [ n ] sequence is correct.  And if the next M − 1 values are added to the first M − 1 values, then the region 1 ≤ n ≤ N x will represent the desired convolution. The modified pseudocode is :   Algorithm  2 ( OA  for  circular  convolution )  Evaluate Algorithm 1  y(1:M-1) = y(1:M-1) + y(Nx+1:Nx+M-1)  y = y(1:Nx)   end  Cost of the overlap-add method  The cost of the convolution can be associated to the number of complex multiplications involved in the operation. The major computational effort is due to the FFT operation, which for a radix-2 algorithm applied to a signal of length   N   N   N   roughly calls for    C  =    N  2     log  2   N        C      N  2     subscript   2   N      C=\frac{N}{2}\log_{2}N   complex multiplications. It turns out that the number of complex multiplications of the overlap-add method are:       C   O  A    =    ⌈    N  x     N  -  M   +  1    ⌉   N   (     log  2   N   +  1   )         subscript  C    O  A           subscript  N  x       N  M   1     N      subscript   2   N   1      C_{OA}=\left\lceil\frac{N_{x}}{N-M+1}\right\rceil N\left(\log_{2}N+1\right)\,       C   O  A      subscript  C    O  A     C_{OA}   accounts for the FFT+filter multiplication+IFFT operation.  The additional cost of the    M  L     subscript  M  L    M_{L}   sections involved in the circular version of the overlap–add method is usually very small and can be neglected for the sake of simplicity. The best value of   N   N   N   can be found by numerical search of the minimum of      C   O  A     (  N  )    =    C   O  A     (   2  m   )           subscript  C    O  A    N      subscript  C    O  A     superscript  2  m      C_{OA}\left(N\right)=C_{OA}\left(2^{m}\right)   by spanning the integer   m   m   m   in the range      log  2    (  M  )    ≤  m  ≤    log  2    (   N  x   )            subscript   2   M   m         subscript   2    subscript  N  x       \log_{2}\left(M\right)\leq m\leq\log_{2}\left(N_{x}\right)   . Being   N   N   N   a power of two, the FFTs of the overlap–add method are computed efficiently. Once evaluated the value of   N   N   N   it turns out that the optimal partitioning of    x   [  n  ]       x   delimited-[]  n     x[n]   has    L  =    N  -  M   +  1       L      N  M   1     L=N-M+1   . For comparison, the cost of the standard circular convolution of    x   [  n  ]       x   delimited-[]  n     x[n]   and    h   [  n  ]       h   delimited-[]  n     h[n]   is:       C  S   =    N  x    (     log  2    N  x    +  1   )         subscript  C  S      subscript  N  x       subscript   2    subscript  N  x    1      C_{S}=N_{x}\left(\log_{2}N_{x}+1\right)\,     Hence the cost of the overlap–add method scales almost as    O   (    N  x     log  2   N    )       O     subscript  N  x     subscript   2   N      O\left(N_{x}\log_{2}N\right)   while the cost of the standard circular convolution method is almost    O   (    N  x     log  2    N  x     )       O     subscript  N  x     subscript   2    subscript  N  x       O\left(N_{x}\log_{2}N_{x}\right)   . However such functions accounts only for the cost of the complex multiplications, regardless of the other operations involved in the algorithm. A direct measure of the computational time required by the algorithms is of much interest. Fig. 2 shows the ratio of the measured time to evaluate a standard circular convolution using   with the time elapsed by the same convolution using the overlap–add method in the form of Alg 2, vs. the sequence and the filter length. Both algorithms have been implemented under Matlab . The bold line represent the boundary of the region where the overlap–add method is faster (ratio>1) than the standard circular convolution. Note that the overlap–add method in the tested cases can be three times faster than the standard method.  (Figure)  Figure 2: Ratio between the time required by   and the time required by the overlap–add Alg. 2 to evaluate a complex circular convolution, vs the sequence length    N  x     subscript  N  x    N_{x}   and the filter length   M   M   M   .   See also   Overlap–save method   References       External links  "  Category:Signal processing  Category:Transforms  Category:Fourier analysis  Category:Numerical analysis   