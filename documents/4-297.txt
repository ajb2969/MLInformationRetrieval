   Latent semantic analysis      Latent semantic analysis   Latent semantic analysis ( LSA ) is a technique in natural language processing , in particular in vectorial semantics , of analyzing relationships between a set of documents and the terms they contain by producing a set of concepts related to the documents and terms. LSA assumes that words that are close in meaning will occur in similar pieces of text. A matrix containing word counts per paragraph (rows represent unique words and columns represent each paragraph) is constructed from a large piece of text and a mathematical technique called singular value decomposition (SVD) is used to reduce the number of rows while preserving the similarity structure among columns. Words are then compared by taking the cosine of the angle between the two vectors (or the dot product between the normalizations of the two vectors) formed by any two rows. Values close to 1 represent very similar words while values close to 0 represent very dissimilar words. 1  An information retrieval method using latent semantic structure was patented in 1988 ( US Patent 4,839,853 ) by Scott Deerwester , Susan Dumais , George Furnas , Richard Harshman , Thomas Landauer , Karen Lochbaum and Lynn Streeter . In the context of its application to information retrieval , it is sometimes called Latent Semantic Indexing (LSI) . 2  Overview  Occurrence matrix  LSA can use a term-document matrix which describes the occurrences of terms in documents; it is a sparse matrix whose rows correspond to terms and whose columns correspond to documents. A typical example of the weighting of the elements of the matrix is tf-idf (term frequency–inverse document frequency): the weight of an element of the matrix is proportional to the number of times the terms appear in each document, where rare terms are upweighted to reflect their relative importance.  This matrix is also common to standard semantic models, though it is not necessarily explicitly expressed as a matrix, since the mathematical properties of matrices are not always used.  Rank lowering  After the construction of the occurrence matrix, LSA finds a low-rank approximation 3 to the term-document matrix . There could be various reasons for these approximations:   The original term-document matrix is presumed too large for the computing resources; in this case, the approximated low rank matrix is interpreted as an approximation (a "least and necessary evil").  The original term-document matrix is presumed noisy : for example, anecdotal instances of terms are to be eliminated. From this point of view, the approximated matrix is interpreted as a de-noisified matrix (a better matrix than the original).  The original term-document matrix is presumed overly sparse relative to the "true" term-document matrix. That is, the original matrix lists only the words actually in each document, whereas we might be interested in all words related to each document—generally a much larger set due to synonymy .   The consequence of the rank lowering is that some dimensions are combined and depend on more than one term:    {(car), (truck), (flower)} --> {(1.3452 * car + 0.2828 * truck), (flower)}     This mitigates the problem of identifying synonymy, as the rank lowering is expected to merge the dimensions associated with terms that have similar meanings. It also mitigates the problem with polysemy , since components of polysemous words that point in the "right" direction are added to the components of words that share a similar meaning. Conversely, components that point in other directions tend to either simply cancel out, or, at worst, to be smaller than components in the directions corresponding to the intended sense.  Derivation  Let   X   X   X   be a matrix where element    (  i  ,  j  )     i  j    (i,j)   describes the occurrence of term   i   i   i   in document   j   j   j   (this can be, for example, the frequency).   X   X   X   will look like this:            𝐝  j          ↓        𝐭  i  T   →       [      x   1  ,  1      …     x   1  ,  n        ⋮    ⋱    ⋮       x   m  ,  1      …     x   m  ,  n       ]         absent   subscript  d  j     absent  normal-↓     normal-→   superscript   subscript  t  i   T   absent      subscript  x   1  1    normal-…   subscript  x   1  n      normal-⋮  normal-⋱  normal-⋮     subscript  x   m  1    normal-…   subscript  x   m  n         \begin{matrix}&\textbf{d}_{j}\\
 &\downarrow\\
 \textbf{t}_{i}^{T}\rightarrow&\begin{bmatrix}x_{1,1}&\dots&x_{1,n}\\
 \vdots&\ddots&\vdots\\
 x_{m,1}&\dots&x_{m,n}\\
 \end{bmatrix}\end{matrix}     Now a row in this matrix will be a vector corresponding to a term, giving its relation to each document:       𝐭  i  T   =   [      x   i  ,  1      …     x   i  ,  n       ]        superscript   subscript  t  i   T      subscript  x   i  1    normal-…   subscript  x   i  n        \textbf{t}_{i}^{T}=\begin{bmatrix}x_{i,1}&\dots&x_{i,n}\end{bmatrix}     Likewise, a column in this matrix will be a vector corresponding to a document, giving its relation to each term:       𝐝  j   =   [      x   1  ,  j        ⋮       x   m  ,  j       ]        subscript  d  j      subscript  x   1  j      normal-⋮     subscript  x   m  j        \textbf{d}_{j}=\begin{bmatrix}x_{1,j}\\
 \vdots\\
 x_{m,j}\end{bmatrix}     Now the dot product      𝐭  i  T    𝐭  p        superscript   subscript  t  i   T    subscript  t  p     \textbf{t}_{i}^{T}\textbf{t}_{p}   between two term vectors gives the correlation between the terms over the documents. The matrix product     X   X  T       X   superscript  X  T     XX^{T}   contains all these dot products. Element    (  i  ,  p  )     i  p    (i,p)   (which is equal to element    (  p  ,  i  )     p  i    (p,i)   ) contains the dot product     𝐭  i  T    𝐭  p        superscript   subscript  t  i   T    subscript  t  p     \textbf{t}_{i}^{T}\textbf{t}_{p}   (     =    𝐭  p  T    𝐭  i        absent     superscript   subscript  t  p   T    subscript  t  i      =\textbf{t}_{p}^{T}\textbf{t}_{i}   ). Likewise, the matrix     X  T   X       superscript  X  T   X    X^{T}X   contains the dot products between all the document vectors, giving their correlation over the terms      𝐝  j  T    𝐝  q    =    𝐝  q  T    𝐝  j           superscript   subscript  d  j   T    subscript  d  q       superscript   subscript  d  q   T    subscript  d  j      \textbf{d}_{j}^{T}\textbf{d}_{q}=\textbf{d}_{q}^{T}\textbf{d}_{j}   .  Now, from the theory of linear algebra, there exists a decomposition of   X   X   X   such that   U   U   U   and   V   V   V   are orthogonal matrices and   Σ   normal-Σ   \Sigma   is a diagonal matrix . This is called a singular value decomposition (SVD):         X  =   U  Σ   V  T             X    U  normal-Σ   superscript  V  T        \begin{matrix}X=U\Sigma V^{T}\end{matrix}     The matrix products giving us the term and document correlations then become         X   X  T      =       (   U  Σ   V  T    )     (   U  Σ   V  T    )   T    =    (   U  Σ   V  T    )    (    V   T  T     Σ  T    U  T    )    =   U  Σ   V  T   V   Σ  T    U  T    =   U  Σ   Σ  T    U  T           X  T   X     =        (   U  Σ   V  T    )   T    (   U  Σ   V  T    )    =    (    V   T  T     Σ  T    U  T    )    (   U  Σ   V  T    )    =   V   Σ  T    U  T   U  Σ   V  T    =   V   Σ  T   Σ   V  T             X   superscript  X  T             U  normal-Σ   superscript  V  T     superscript    U  normal-Σ   superscript  V  T    T        U  normal-Σ   superscript  V  T       superscript  V   superscript  T  T     superscript  normal-Σ  T    superscript  U  T            U  normal-Σ   superscript  V  T   V   superscript  normal-Σ  T    superscript  U  T           U  normal-Σ   superscript  normal-Σ  T    superscript  U  T           superscript  X  T   X           superscript    U  normal-Σ   superscript  V  T    T     U  normal-Σ   superscript  V  T          superscript  V   superscript  T  T     superscript  normal-Σ  T    superscript  U  T      U  normal-Σ   superscript  V  T            V   superscript  normal-Σ  T    superscript  U  T   U  normal-Σ   superscript  V  T           V   superscript  normal-Σ  T   normal-Σ   superscript  V  T         \begin{matrix}XX^{T}&=&(U\Sigma V^{T})(U\Sigma V^{T})^{T}=(U\Sigma V^{T})(V^{T%
 ^{T}}\Sigma^{T}U^{T})=U\Sigma V^{T}V\Sigma^{T}U^{T}=U\Sigma\Sigma^{T}U^{T}\\
 X^{T}X&=&(U\Sigma V^{T})^{T}(U\Sigma V^{T})=(V^{T^{T}}\Sigma^{T}U^{T})(U\Sigma
 V%
 ^{T})=V\Sigma^{T}U^{T}U\Sigma V^{T}=V\Sigma^{T}\Sigma V^{T}\end{matrix}     Since    Σ   Σ  T       normal-Σ   superscript  normal-Σ  T     \Sigma\Sigma^{T}   and     Σ  T   Σ       superscript  normal-Σ  T   normal-Σ    \Sigma^{T}\Sigma   are diagonal we see that   U   U   U   must contain the eigenvectors of    X   X  T       X   superscript  X  T     XX^{T}   , while   V   V   V   must be the eigenvectors of     X  T   X       superscript  X  T   X    X^{T}X   . Both products have the same non-zero eigenvalues, given by the non-zero entries of    Σ   Σ  T       normal-Σ   superscript  normal-Σ  T     \Sigma\Sigma^{T}   , or equally, by the non-zero entries of     Σ  T   Σ       superscript  normal-Σ  T   normal-Σ    \Sigma^{T}\Sigma   . Now the decomposition looks like this:           X          U       Σ        V  T           (   𝐝  j   )                        (    𝐝  ^   j   )          ↓                      ↓        (   𝐭  i  T   )   →       [      x   1  ,  1      …     x   1  ,  n             ⋮    ⋱    ⋮            x   m  ,  1      …     x   m  ,  n       ]     =      (    𝐭  ^   i  T   )   →       [       [                𝐮  1                ]   …   [                𝐮  l                ]       ]     ⋅     [      σ  1     …    0      ⋮    ⋱    ⋮      0    …     σ  l      ]     ⋅     [      [            𝐯  1            ]       ⋮       [            𝐯  l            ]      ]         absent  X  absent  absent  U  absent  normal-Σ  absent   superscript  V  T     absent   subscript  d  j   absent  absent  absent  absent  absent  absent   subscript   normal-^  d   j     absent  normal-↓  absent  absent  absent  absent  absent  absent  normal-↓     normal-→   superscript   subscript  t  i   T   absent      subscript  x   1  1    normal-…   subscript  x   1  n      absent    normal-⋮  normal-⋱  normal-⋮    absent     subscript  x   m  1    normal-…   subscript  x   m  n        normal-→   superscript   subscript   normal-^  t   i   T   absent         absent    absent     subscript  u  1     absent    absent    normal-…    absent    absent     subscript  u  l     absent    absent       normal-⋅     subscript  σ  1   normal-…  0    normal-⋮  normal-⋱  normal-⋮    0  normal-…   subscript  σ  l     normal-⋅      absent  absent   subscript  v  1   absent  absent      normal-⋮      absent  absent   subscript  v  l   absent  absent         \begin{matrix}&X&&&U&&\Sigma&&V^{T}\\
 &(\textbf{d}_{j})&&&&&&&(\hat{\textbf{d}}_{j})\\
 &\downarrow&&&&&&&\downarrow\\
 (\textbf{t}_{i}^{T})\rightarrow&\begin{bmatrix}x_{1,1}&\dots&x_{1,n}\\
 \\
 \vdots&\ddots&\vdots\\
 \\
 x_{m,1}&\dots&x_{m,n}\\
 \end{bmatrix}&=&(\hat{\textbf{t}}_{i}^{T})\rightarrow&\begin{bmatrix}\begin{%
 bmatrix}\\
 \\
 \textbf{u}_{1}\\
 \\
 \end{bmatrix}\dots\begin{bmatrix}\\
 \\
 \textbf{u}_{l}\\
 \\
 \end{bmatrix}\end{bmatrix}&\cdot&\begin{bmatrix}\sigma_{1}&\dots&0\\
 \vdots&\ddots&\vdots\\
 0&\dots&\sigma_{l}\\
 \end{bmatrix}&\cdot&\begin{bmatrix}\begin{bmatrix}&&\textbf{v}_{1}&&\end{%
 bmatrix}\\
 \vdots\\
 \begin{bmatrix}&&\textbf{v}_{l}&&\end{bmatrix}\end{bmatrix}\end{matrix}     The values     σ  1   ,  …  ,   σ  l       subscript  σ  1   normal-…   subscript  σ  l     \sigma_{1},\dots,\sigma_{l}   are called the singular values, and     u  1   ,  …  ,   u  l       subscript  u  1   normal-…   subscript  u  l     u_{1},\dots,u_{l}   and     v  1   ,  …  ,   v  l       subscript  v  1   normal-…   subscript  v  l     v_{1},\dots,v_{l}   the left and right singular vectors. Notice the only part of   U   U   U   that contributes to    𝐭  i     subscript  t  i    \textbf{t}_{i}   is the    i  ’th      i  ’th    i\textrm{'th}   row. Let this row vector be called     t  ^   i     subscript   normal-^  t   i    \hat{\textrm{t}}_{i}   . Likewise, the only part of    V  T     superscript  V  T    V^{T}   that contributes to    𝐝  j     subscript  d  j    \textbf{d}_{j}   is the    j  ’th      j  ’th    j\textrm{'th}   column,     d  ^   j     subscript   normal-^  d   j    \hat{\textrm{d}}_{j}   . These are not the eigenvectors, but depend on all the eigenvectors.  It turns out that when you select the   k   k   k   largest singular values, and their corresponding singular vectors from   U   U   U   and   V   V   V   , you get the rank   k   k   k   approximation to   X   X   X   with the smallest error ( Frobenius norm ). This approximation has a minimal error. But more importantly we can now treat the term and document vectors as a "semantic space". The vector     𝐭  ^   i     subscript   normal-^  t   i    \hat{\textbf{t}}_{i}   then has   k   k   k   entries mapping it to a lower-dimensional space dimensions. These new dimensions do not relate to any comprehensible concepts. They are a lower-dimensional approximation of the higher-dimensional space. Likewise, the vector     𝐝  ^   j     subscript   normal-^  d   j    \hat{\textbf{d}}_{j}   is an approximation in this lower-dimensional space. We write this approximation as       X  k   =    U  k    Σ  k    V  k  T         subscript  X  k      subscript  U  k    subscript  normal-Σ  k    superscript   subscript  V  k   T      X_{k}=U_{k}\Sigma_{k}V_{k}^{T}     You can now do the following:   See how related documents   j   j   j   and   q   q   q   are in the low-dimensional space by comparing the vectors     Σ  k     𝐝  ^   j        subscript  normal-Σ  k    subscript   normal-^  d   j     \Sigma_{k}\hat{\textbf{d}}_{j}   and     Σ  k     𝐝  ^   q        subscript  normal-Σ  k    subscript   normal-^  d   q     \Sigma_{k}\hat{\textbf{d}}_{q}   (typically by cosine similarity ).  Comparing terms   i   i   i   and   p   p   p   by comparing the vectors     Σ  k     𝐭  ^   i        subscript  normal-Σ  k    subscript   normal-^  t   i     \Sigma_{k}\hat{\textbf{t}}_{i}   and     Σ  k     𝐭  ^   p        subscript  normal-Σ  k    subscript   normal-^  t   p     \Sigma_{k}\hat{\textbf{t}}_{p}   .  Documents and term vector representations can be clustered using traditional clustering algorithms like k-means using similarity measures like cosine.  Given a query, view this as a mini document, and compare it to your documents in the low-dimensional space.   To do the latter, you must first translate your query into the low-dimensional space. It is then intuitive that you must use the same transformation that you use on your documents:        𝐝  ^   j   =    Σ  k   -  1     U  k  T    𝐝  j         subscript   normal-^  d   j      superscript   subscript  normal-Σ  k     1     superscript   subscript  U  k   T    subscript  d  j      \hat{\textbf{d}}_{j}=\Sigma_{k}^{-1}U_{k}^{T}\textbf{d}_{j}     Note here that the inverse of the diagonal matrix    Σ  k     subscript  normal-Σ  k    \Sigma_{k}   may be found by inverting each nonzero value within the matrix.  This means that if you have a query vector   q   q   q   , you must do the translation     𝐪  ^   =    Σ  k   -  1     U  k  T   𝐪        normal-^  q      superscript   subscript  normal-Σ  k     1     superscript   subscript  U  k   T   q     \hat{\textbf{q}}=\Sigma_{k}^{-1}U_{k}^{T}\textbf{q}   before you compare it with the document vectors in the low-dimensional space. You can do the same for pseudo term vectors:       𝐭  i  T   =     𝐭  ^   i  T    Σ  k    V  k  T         superscript   subscript  t  i   T      superscript   subscript   normal-^  t   i   T    subscript  normal-Σ  k    superscript   subscript  V  k   T      \textbf{t}_{i}^{T}=\hat{\textbf{t}}_{i}^{T}\Sigma_{k}V_{k}^{T}           𝐭  ^   i  T   =    𝐭  i  T    V  k   -  T     Σ  k   -  1     =    𝐭  i  T    V  k    Σ  k   -  1            superscript   subscript   normal-^  t   i   T      superscript   subscript  t  i   T    superscript   subscript  V  k     T     superscript   subscript  normal-Σ  k     1             superscript   subscript  t  i   T    subscript  V  k    superscript   subscript  normal-Σ  k     1        \hat{\textbf{t}}_{i}^{T}=\textbf{t}_{i}^{T}V_{k}^{-T}\Sigma_{k}^{-1}=\textbf{t%
 }_{i}^{T}V_{k}\Sigma_{k}^{-1}           𝐭  ^   i   =    Σ  k   -  1     V  k  T    𝐭  i         subscript   normal-^  t   i      superscript   subscript  normal-Σ  k     1     superscript   subscript  V  k   T    subscript  t  i      \hat{\textbf{t}}_{i}=\Sigma_{k}^{-1}V_{k}^{T}\textbf{t}_{i}     Applications  The new low-dimensional space typically can be used to:   Compare the documents in the low-dimensional space ( data clustering , document classification ).  Find similar documents across languages, after analyzing a base set of translated documents ( cross language retrieval ).  Find relations between terms ( synonymy and polysemy ).  Given a query of terms, translate it into the low-dimensional space, and find matching documents ( information retrieval ).  Find the best similarity between small groups of terms, in a semantic way (i.e. in a context of a knowledge corpus), as for example in multi choice questions MCQ answering model. 4   Synonymy and polysemy are fundamental problems in natural language processing :   Synonymy is the phenomenon where different words describe the same idea. Thus, a query in a search engine may fail to retrieve a relevant document that does not contain the words which appeared in the query. For example, a search for "doctors" may not return a document containing the word " physicians ", even though the words have the same meaning.  Polysemy is the phenomenon where the same word has multiple meanings. So a search may retrieve irrelevant documents containing the desired words in the wrong meaning. For example, a botanist and a computer scientist looking for the word "tree" probably desire different sets of documents.   Commercial applications  LSA has been used to assist in performing prior art searches for patents . 5  Applications in human memory  The use of Latent Semantic Analysis has been prevalent in the study of human memory, especially in areas of free recall and memory search. There is a positive correlation between the semantic similarity of two words (as measured by LSA) and the probability that the words would be recalled one after another in free recall tasks using study lists of random common nouns. They also noted that in these situations, the inter-response time between the similar words was much quicker than between dissimilar words. These findings are referred to as the Semantic Proximity Effect . 6  When participants made mistakes in recalling studied items, these mistakes tended to be items that were more semantically related to the desired item and found in a previously studied list. These prior-list intrusions, as they have come to be called, seem to compete with items on the current list for recall. 7  Another model, termed Word Association Spaces (WAS) is also used in memory studies by collecting free association data from a series of experiments and which includes measures of word relatedness for over 72,000 distinct word pairs. 8  Implementation  The SVD is typically computed using large matrix methods (for example, Lanczos methods ) but may also be computed incrementally and with greatly reduced resources via a neural network -like approach, which does not require the large, full-rank matrix to be held in memory. 9 A fast, incremental, low-memory, large-matrix SVD algorithm has recently been developed. 10  MATLAB and Python implementations of these fast algorithms are available. Unlike Gorrell and Webb's (2005) stochastic approximation, Brand's algorithm (2003) provides an exact solution. In recent years progress has been made to reduce the computational complexity of SVD; for instance, by using a parallel ARPACK algorithm to perform parallel eigenvalue decomposition it is possible to speed up the SVD computation cost while providing comparable prediction quality. 11  Limitations  Some of LSA's drawbacks include:   The resulting dimensions might be difficult to interpret. For instance, in     {(car), (truck), (flower)} ↦ {(1.3452 * car + 0.2828 * truck), (flower)}    the (1.3452 * car + 0.2828 * truck) component could be interpreted as "vehicle". However, it is very likely that cases close to  {(car), (bottle), (flower)} ↦ {(1.3452 * car + 0.2828 * bottle ), (flower)}    will occur. This leads to results which can be justified on the mathematical level, but have no interpretable meaning in natural language.    LSA cannot capture polysemy (i.e., multiple meanings of a word). Each occurrence of a word is treated as having the same meaning due to the word being represented as a single point in space. For example, the occurrence of "chair" in a document containing "The Chair of the Board" and in a separate document containing "the chair maker" are considered the same. The behavior results in the vector representation being an average of all the word's different meanings in the corpus, which can make it difficult for comparison. However, the effect is often lessened due to words having a predominant sense throughout a corpus (i.e. not all meanings are equally likely).    Limitations of bag of words model (BOW), where a text is represented as an unordered collection of words.    To address some of the limitation of bag of words model (BOW), multi-gram dictionary can be used to find direct and indirect association as well as higher-order  co-occurrences among terms. 12    The probabilistic model of LSA does not match observed data: LSA assumes that words and documents form a joint Gaussian model ( ergodic hypothesis ), while a Poisson distribution has been observed. Thus, a newer alternative is probabilistic latent semantic analysis , based on a multinomial model, which is reported to give better results than standard LSA. 13   See also   Compound term processing  Explicit semantic analysis  Latent semantic mapping  Latent Semantic Structure Indexing  Principal components analysis  Probabilistic latent semantic analysis  Spamdexing  Topic model   Latent Dirichlet allocation   Vectorial semantics  Coh-Metrix   References     Original article where the model was first exposed.   (PDF) . Illustration of the application of LSA to document retrieval.    {{ cite web   | url= http://www.welchco.com/02/14/01/60/96/02/2901.HTM  | title=A Solution to Plato's Problem: The Latent Semantic Analysis Theory of Acquisition, Induction, and Representation of Knowledge  | author= Thomas  Landauer , Susan  T.  Dumais  | accessdate=2007-07-02  }}  External links  Articles on LSA   Latent Semantic Analysis , a scholarpedia article on LSA written by Tom Landauer, one of the creators of LSA.   Talks and demonstrations   LSA Overview , talk by Prof. Thomas Hofmann describing LSA, its applications in Information Retrieval, and its connections to probabilistic latent semantic analysis .  Complete LSA sample code in C# for Windows . The demo code includes enumeration of text files, filtering stop words, stemming, making a document-term matrix and SVD.   Implementations  Due to its cross-domain applications in Information Retrieval , Natural Language Processing (NLP), Cognitive Science and Computational Linguistics , LSA has been implemented to support many different kinds of applications.   Sense Clusters , an Information Retrieval-oriented perl implementation of LSA  S-Space Package , a Computational Linguistics and Cognitive Science-oriented Java implementation of LSA  Semantic Vectors applies Random Projection, LSA, and Reflective Random Indexing to Lucene term-document matrices  Infomap Project , an NLP-oriented C implementation of LSA (superseded by semanticvectors project)  Text to Matrix Generator , A MATLAB Toolbox for generating term-document matrices from text collections, with support for LSA  Gensim contains a Python implementation of LSA for matrices larger than RAM.   "  Category:Information retrieval techniques  Category:Natural language processing  Category:Latent variable models     ↩  ↩  Markovsky I. (2012) Low-Rank Approximation: Algorithms, Implementation, Applications, Springer, 2012, ISBN 978-1-4471-2226-5 ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  doi: 10.1109/ICCSNT.2011.6182070 ↩  J Transl Med. 2014 Nov 27;12(1):324. ↩  ↩     