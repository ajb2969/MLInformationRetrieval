   Dragon curve      Dragon curve   A dragon curve is any member of a family of self-similar  fractal curves, which can be approximated by recursive methods such as Lindenmayer systems .  Heighway dragon  The Heighway dragon (also known as the Harter–Heighway dragon or the Jurassic Park dragon ) was first investigated by NASA physicists John Heighway, Bruce Banks, and William Harter. It was described by Martin Gardner in his Scientific American column Mathematical Games in 1967. Many of its properties were first published by Chandler Davis and Donald Knuth . It appeared on the section title pages of the Michael Crichton novel Jurassic Park .  Construction  (Figure)  Recursive construction of the curve   It can be written as a Lindenmayer system with   angle 90°  initial string FX  string rewriting rules  X    ↦   maps-to   \mapsto    X + YF +  Y    ↦   maps-to   \mapsto   − FX − Y .    That can be described this way : Starting from a base segment, replace each segment by 2 segments with a right angle and with a rotation of 45° alternatively to the right and to the left:  The Heighway dragon is also the limit set of the following iterated function system in the complex plane:        f  1    (  z  )    =     (   1  +  i   )   z   2          subscript  f  1   z         1  i   z   2     f_{1}(z)=\frac{(1+i)z}{2}           f  2    (  z  )    =   1  -     (   1  -  i   )   z   2           subscript  f  2   z     1        1  i   z   2      f_{2}(z)=1-\frac{(1-i)z}{2}     with the initial set of points     S  0   =   {  0  ,  1  }        subscript  S  0    0  1     S_{0}=\{0,1\}   .  Using pairs of real numbers instead, this is the same as the two functions consisting of        f  1    (  x  ,  y  )    =    1   2     (      cos   45  ∘       -   sin   45  ∘          sin   45  ∘       cos   45  ∘       )    (     x      y     )           subscript  f  1    x  y        1    2         superscript  45          superscript  45           superscript  45        superscript  45         x    y       f_{1}(x,y)=\frac{1}{\sqrt{2}}\begin{pmatrix}\cos 45^{\circ}&-\sin 45^{\circ}\\
 \sin 45^{\circ}&\cos 45^{\circ}\end{pmatrix}\begin{pmatrix}x\\
 y\end{pmatrix}           f  2    (  x  ,  y  )    =     1   2     (      cos   135  ∘       -   sin   135  ∘          sin   135  ∘       cos   135  ∘       )    (     x      y     )    +   (     1      0     )           subscript  f  2    x  y          1    2         superscript  135          superscript  135           superscript  135        superscript  135         x    y       1    0       f_{2}(x,y)=\frac{1}{\sqrt{2}}\begin{pmatrix}\cos 135^{\circ}&-\sin 135^{\circ}%
 \\
 \sin 135^{\circ}&\cos 135^{\circ}\end{pmatrix}\begin{pmatrix}x\\
 y\end{pmatrix}+\begin{pmatrix}1\\
 0\end{pmatrix}     This representation is more commonly used in software such as Apophysis .  [Un]Folding the Dragon  Tracing an iteration of the Heighway dragon curve from one end to the other, one encounters a series of 90 degree turns, some to the right and some to the left. For the first few iterations the sequence of right (R) and left (L) turns is as follows:   1st iteration: R  2nd iteration: R R L   3rd iteration: R R L R R L L   4th iteration: R R L R R L L R R R L L R L L .   This suggests the following pattern: each iteration is formed by taking the previous iteration, adding an R at the end, and then taking the original iteration again, flipping it retrograde, swapping each letter and adding the result after the R.  This pattern in turn suggests the following method of creating models of iterations of the Heighway dragon curve by folding a strip of paper . Take a strip of paper and fold it in half to the right. Fold it in half again to the right. If the strip was opened out now, unbending each fold to become a 90 degree turn, the turn sequence would be RRL i.e. the second iteration of the Heighway dragon. Fold the strip in half again to the right, and the turn sequence of the unfolded strip is now RRLRRLL – the third iteration of the Heighway dragon. Continuing folding the strip in half to the right to create further iterations of the Heighway dragon (in practice, the strip becomes too thick to fold sharply after four or five iterations).  (Figure)  Dragon curve paper strip.png   This pattern also gives a method for determining the direction of the n th turn in the turn sequence of a Heighway dragon iteration. First, express n in the form k 2 m where k is an odd number. The direction of the n th turn is determined by k mod 4 i.e. the remainder left when k is divided by 4. If k mod 4 is 1 then the n th turn is R; if k mod 4 is 3 then the n th turn is L.  For example, to determine the direction of turn 76376:   76376 = 9547 x 8.  9547 = 2386x4 + 3  so 9547 mod 4 = 3  so turn 76376 is L   There is a simple one line non-recursive method of implementing the above k mod 4 method of finding the turn direction in code. Treating turn n as a binary number, calculate the following boolean value:   bool turn = (((n & −n) << 1) & n) != 0;    "n & −n" leaves you with only one bit as a '1', the rightmost '1' in the binary expansion of n ;  "<< 1" shifts the that bit one bit to the left;  "& n" leaves you with either that single bit (if k mod 4 = 3) or a zero (if k mod 4 = 1).  so "bool turn = (((n & −n) << 1) & n) != 0" is TRUE if the n th turn is L; and is FALSE if the n th turn is R.   Gray code method  Another way of handling this is a reduction for the above algorithm. Using Gray code , starting from zero, determine the change to the next value. If the change is a 1 turn left, and if it is 0 turn right. Given a binary input, B, the corresponding gray code, G, is given by "G = B XOR (B>>1)". Using G i and G i −1 , turn equals" (not G i ) AND G i −1 ".   G = B^(B >> 1); This gets gray code from binary.  T = (~G0)&G1; If T is equal to 0 turn clockwise else turn counterclockwise.   Dimensions   In spite of its strange aspect, the Heighway dragon curve has simple dimensions. Note that the dimensions 1, and 1.5 are limits and not actual values.   (Figure)  Dimensions fractale dragon.png    Its surface is also quite simple : If the initial segment equals 1, then its surface equals    1  2      1  2    \textstyle{\frac{1}{2}}   . This result comes from its paving properties.  The curve never crosses itself.  Many self-similarities can be seen in the Heighway dragon curve. The most obvious is the repetition of the same pattern tilted by 45° and with a reduction ratio of    2      2    \textstyle{\sqrt{2}}   .   (Figure)  Auto-similarity dragon curve.gif    Its fractal dimension can be calculated       ln  2    ln   2      =  2          2       2     2    \textstyle{\frac{\ln 2}{\ln\sqrt{2}}=2}   . That makes it a space-filling curve .  Its boundary has an infinite length, since it increases by a similar factor every iteration.  The fractal dimension of its boundary has been approximated numerically by Chang & Zhang . 1 ).   In fact it can be found analytically: 2       log  2    (    1  +    73  -   6   87     3   +    73  +   6   87     3    3   )    ≅  1.523627086202492.        subscript   2       1     3     73    6    87         3     73    6    87       3    1.523627086202492.    \log_{2}\left(\frac{1+\sqrt[3]{73-6\sqrt{87}}+\sqrt[3]{73+6\sqrt{87}}}{3}%
 \right)\cong 1.523627086202492.   This is the root of the equation       4  x    (    2  x   -  1   )    =   4   (    2  x   +  1   )     .         superscript  4  x      superscript  2  x   1      4     superscript  2  x   1      \textstyle{4^{x}(2^{x}-1)=4(2^{x}+1).}     Tiling  The dragon curve can tile the plane in many ways.   Image:Dragon tiling1.svg|1st element with 4 curves Image:Dragon tiling2.svg|2nd element with 4 curves Image:Dragon tiling3.svg|3rd element with 4 curves Image:Dragon tiling dragon.svg|The dragon curve can tile itself Image:Dragon tiling4.svg|1st element with 2 curves Image:Dragon tiling5.svg|2nd element with 2 curves (twindragon) Image:Dragon tiling6.svg|3rd element with 2 curves Image:Full tiling dragon.svg|Example of plane tiling Image:Full tiling dragon2.svg|Example of plane tiling Image:Full tiling dragon3.svg|Example of plane tiling Image:Dragon spiral tiling.png|Dragon curves of increasing sizes (ratio sqrt(2)) form an infinite spiral. 4 of these spirals (with rotation 90°) tile the plane.   Twindragon  The twindragon (also known as the Davis-Knuth dragon ) can be constructed by placing two Heighway dragon curves back-to-back. It is also the limit set of the following iterated function system:        f  1    (  z  )    =     (   1  +  i   )   z   2          subscript  f  1   z         1  i   z   2     f_{1}(z)=\frac{(1+i)z}{2}           f  2    (  z  )    =   1  -     (   1  +  i   )   z   2           subscript  f  2   z     1        1  i   z   2      f_{2}(z)=1-\frac{(1+i)z}{2}     where the initial shape is defined by the following set     S  0   =   {  0  ,  1  ,   1  -  i   }        subscript  S  0    0  1    1  i      S_{0}=\{0,1,1-i\}   .  It can be also written as a Lindenmayer system – it only needs adding another section in initial string:   angle 90°  initial string FX+FX+  string rewriting rules  X    ↦   maps-to   \mapsto    X + YF  Y    ↦   maps-to   \mapsto    FX − Y .       (Figure)  Twindragon curve.   (Figure)  Twindragon curve constructed from two Heighway dragons.      Terdragon  The terdragon can be written as a Lindenmayer system :   angle 120°  initial string F  string rewriting rules  F    ↦   maps-to   \mapsto    F+F−F .    It is the limit set of the following iterated function system:        f  1    (  z  )    =   λ  z          subscript  f  1   z     λ  z     f_{1}(z)=\lambda z           f  2    (  z  )    =     i   3    z   +  λ          subscript  f  2   z         i    3    z   λ     f_{2}(z)=\frac{i}{\sqrt{3}}z+\lambda           f  3    (  z  )    =    λ  z   +   λ  *           subscript  f  3   z       λ  z    superscript  λ       f_{3}(z)=\lambda z+\lambda^{*}           where  λ   =    1  2   -    i   2   3     and   λ  *     =    1  2   +   i   2   3       .          where  λ       1  2       i    2    3     and   superscript  λ               1  2     i    2    3         \mbox{where }\lambda=\frac{1}{2}-\frac{i}{2\sqrt{3}}\text{ and }\lambda^{*}=%
 \frac{1}{2}+\frac{i}{2\sqrt{3}}.     Lévy dragon  The Lévy C curve is sometimes known as the Lévy dragon . 3     (Figure)  Lévy C curve.      Occurrences of the dragon curve in solution sets  Having obtained the set of solutions to a differential equation, any linear combination of the solutions will, because of the superposition principle also obey the original equation. In other words, new solutions are obtained by applying a function to the set of existing solutions. This is similar to how an iterated function system produce new points in a set, though not all IFS are linear functions. In a conceptually similar vein, a set of Littlewood polynomials can be arrived at by such iterated applications of a set of functions.  A Littlewood polynomial is a polynomial     p   (  x  )    =    ∑   i  =  0   n     a  i     x  i            p  x     superscript   subscript     i  0    n      subscript  a  i    superscript  x  i       p(x)=\sum_{i=0}^{n}a_{i}x^{i}\,   where all     a  i   =   ±  1        subscript  a  i    plus-or-minus  1     a_{i}=\pm 1   .  For some |w|  f_+(z) = 1 + wz        f  -    (  z  )    =   1  -   w  z           subscript  f    z     1    w  z      f_{-}(z)=1-wz     Starting at z=0 we can generate all Littlewood polynomials of degree d using these functions iteratively d+1 times. 4 For instance      f  +    (    f  -    (    f  -    (  0  )    )    )    =   1  +    (   1  -  w   )   w    =    1  +   1  w    -   1   w  2              subscript  f       subscript  f       subscript  f    0       1      1  w   w             1    1  w      1   superscript  w  2        f_{+}(f_{-}(f_{-}(0)))=1+(1-w)w=1+1w-1w^{2}     It can be seen that for w = (1+i)/2 , the above pair of functions is equivalent to the IFS formulation of the Heighway dragon. That is, the Heighway dragon, iterated to a certain iteration, describe the set of all Littlewood polynomials up to a certain degree, evaluated at the point w = (1+i)/2 . Indeed, when plotting a sufficiently high number of roots of the Littlewood polynomials, structures similar to the dragon curve appear at points close to these coordinates. 5 6 7  See also   List of fractals by Hausdorff dimension  Complex base systems  Regular paperfolding sequence   Notes    Further reading     External links   Dragon Curve —from MathWorld  Tile made by David Chow  Twin dragon tile with JAVA     "  Category:Fractal curves  Category:Paper folding     Fractal dimension of the boundary of the Dragon curve ↩  " The Boundary of Periodic Iterated Function Systems " by Jarek Duda, The Wolfram Demonstrations Project . Recurrent construction of the boundary of dragon curve. ↩  . ↩  http://golem.ph.utexas.edu/category/2009/12/this_weeks_finds_in_mathematic_46.html ↩   http://math.ucr.edu/home/baez/week285.html ↩  http://johncarlosbaez.wordpress.com/2011/12/11/the-beauty-of-roots/ ↩     