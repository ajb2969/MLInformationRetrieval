   Tuple      Tuple   A tuple is a finite ordered list of elements. In mathematics , an n -tuple is a sequence (or ordered list) of   n   n   n   elements, where   n   n   n   is a non-negative integer. There is only one 0-tuple, an empty sequence. An   n   n   n   -tuple is defined inductively using the construction of an ordered pair . Tuples are usually written by listing the elements within parentheses "    (   )      (\text{ })   " and separated by commas; for example,    (  2  ,  7  ,  4  ,  1  ,  7  )     2  7  4  1  7    (2,7,4,1,7)   denotes a 5-tuple. Sometimes other symbols are used to surround the elements, such as square brackets "[ ]" or angle brackets "    ⟨   ⟩     delimited-⟨⟩     \langle\text{ }\rangle   ". Braces "{ }" are never used for tuples, as they are the standard notation for sets . Tuples are often used to describe other mathematical objects, such as vectors . In computer science, tuples are directly implemented as product types in most functional programming languages . More commonly, they are implemented as record types , where the components are labeled instead of being identified by position alone. This approach is also used in relational algebra . Tuples are also used in relation to programming the semantic web with Resource Description Framework or RDF. Tuples are also used in linguistics 1 and philosophy . 2  Etymology  The term originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, sextuple, septuple, octuple, ..., n ‑tuple, ..., where the prefixes are taken from the Latin names of the numerals. The unique 0‑tuple is called the null tuple. A 1‑tuple is called a singleton, a 2‑tuple is called an ordered pair and a 3‑tuple is a triple or triplet. n can be any nonnegative integer. For example, a complex number can be represented as a 2‑tuple, a quaternion can be represented as a 4‑tuple, an octonion can be represented as an 8‑tuple and a sedenion can be represented as a 16‑tuple.  Although these uses treat ‑tuple as the suffix, the original suffix was ‑ple as in "triple" (three-fold) or "decuple" (ten‑fold). This originates from a medieval Latin suffix ‑plus (meaning "more") related to Greek ‑πλοῦς, which replaced the classical and late antique ‑plex (meaning "folded"), as in "duplex". 3  Names for tuples of specific lengths      Tuple Length   n   n   n      Name   Alternative names       0   empty tuple   unit     1   single   singleton / monuple     2   double   couple / pair / dual / twin / product     3   triple   treble / triplet / triad     4   quadruple   quad     5   quintuple      6   sextuple      7   septuple      8   octuple      9   nonuple      10   decuple      11   undecuple   hendecuple     12   duodecuple      13   tredecuple      100   centuple      Properties  The general rule for the identity of two   n   n   n   -tuples is       (   a  1   ,   a  2   ,  …  ,   a  n   )   =   (   b  1   ,   b  2   ,  …  ,   b  n   )         subscript  a  1    subscript  a  2   normal-…   subscript  a  n      subscript  b  1    subscript  b  2   normal-…   subscript  b  n      (a_{1},a_{2},\ldots,a_{n})=(b_{1},b_{2},\ldots,b_{n})    if and only if        a  1   =   b  1    ,       a  2    =    b  2   ,    …     ,      a  n    =   b  n      .     formulae-sequence     subscript  a  1    subscript  b  1     formulae-sequence        subscript  a  2      subscript  b  2      normal-…           subscript  a  n     subscript  b  n       a_{1}=b_{1},\text{ }a_{2}=b_{2},\text{ }\ldots,\text{ }a_{n}=b_{n}.     Thus a tuple has properties that distinguish it from a set .   A tuple may contain multiple instances of the same element, so tuple     (  1  ,  2  ,  2  ,  3  )   ≠   (  1  ,  2  ,  3  )        1  2  2  3    1  2  3     (1,2,2,3)\neq(1,2,3)   ; but set     {  1  ,  2  ,  2  ,  3  }   =   {  1  ,  2  ,  3  }        1  2  2  3    1  2  3     \{1,2,2,3\}=\{1,2,3\}   .  Tuple elements are ordered: tuple     (  1  ,  2  ,  3  )   ≠   (  3  ,  2  ,  1  )        1  2  3    3  2  1     (1,2,3)\neq(3,2,1)   , but set     {  1  ,  2  ,  3  }   =   {  3  ,  2  ,  1  }        1  2  3    3  2  1     \{1,2,3\}=\{3,2,1\}   .  A tuple has a finite number of elements, while a set or a multiset may have an infinite number of elements.   Definitions  There are several definitions of tuples that give them the properties described in the previous section.  Tuples as functions  If we are dealing with sets, an   n   n   n   -tuple can be regarded as a function , F , whose domain is the tuple's implicit set of element indices, X , and whose codomain, Y , is the tuple's set of elements. Formally:       (   a  1   ,   a  2   ,  …  ,   a  n   )   ≡   (  X  ,  Y  ,  F  )         subscript  a  1    subscript  a  2   normal-…   subscript  a  n     X  Y  F     (a_{1},a_{2},\dots,a_{n})\equiv(X,Y,F)   where:     X   X   \displaystyle X   In slightly less formal notation this says:        (   a  1   ,   a  2   ,  …  ,   a  n   )   :=   (   F   (  1  )    ,   F   (  2  )    ,  …  ,   F   (  n  )    )    .     assign    subscript  a  1    subscript  a  2   normal-…   subscript  a  n       F  1     F  2   normal-…    F  n      (a_{1},a_{2},\dots,a_{n}):=(F(1),F(2),\dots,F(n)).     Tuples as nested ordered pairs  Another way of modeling tuples in Set Theory is as nested ordered pairs . This approach assumes that the notion of ordered pair has already been defined; thus a 2-tuple   The 0-tuple (i.e. the empty tuple) is represented by the empty set   ∅     \emptyset   .  An   n   n   n   -tuple, with    n  >  0      n  0    n>0   , can be defined as an ordered pair of its first entry and an    (   n  -  1   )      n  1    (n-1)   -tuple (which contains the remaining entries when    n  >  1      n  1    n>1   ):      (   a  1   ,   a  2   ,   a  3   ,  …  ,   a  n   )   =   (   a  1   ,   (   a  2   ,   a  3   ,  …  ,   a  n   )   )         subscript  a  1    subscript  a  2    subscript  a  3   normal-…   subscript  a  n      subscript  a  1     subscript  a  2    subscript  a  3   normal-…   subscript  a  n       (a_{1},a_{2},a_{3},\ldots,a_{n})=(a_{1},(a_{2},a_{3},\ldots,a_{n}))      This definition can be applied recursively to the    (   n  -  1   )      n  1    (n-1)   -tuple:       (   a  1   ,   a  2   ,   a  3   ,  …  ,   a  n   )   =   (   a  1   ,   (   a  2   ,   (   a  3   ,   (  …  ,    (   a  n   ,  ∅  )   …   )   )   )   )         subscript  a  1    subscript  a  2    subscript  a  3   normal-…   subscript  a  n      subscript  a  1     subscript  a  2     subscript  a  3    normal-…      subscript  a  n     normal-…         (a_{1},a_{2},a_{3},\ldots,a_{n})=(a_{1},(a_{2},(a_{3},(\ldots,(a_{n},\emptyset%
 )\ldots))))     Thus, for example:      (  1  ,  2  ,  3  )     1  2  3    \displaystyle(1,2,3)     A variant of this definition starts "peeling off" elements from the other end:   The 0-tuple is the empty set   ∅     \emptyset   .  For    n  >  0      n  0    n>0   :      (   a  1   ,   a  2   ,   a  3   ,  …  ,   a  n   )   =   (   (   a  1   ,   a  2   ,   a  3   ,  …  ,   a   n  -  1    )   ,   a  n   )         subscript  a  1    subscript  a  2    subscript  a  3   normal-…   subscript  a  n       subscript  a  1    subscript  a  2    subscript  a  3   normal-…   subscript  a    n  1      subscript  a  n      (a_{1},a_{2},a_{3},\ldots,a_{n})=((a_{1},a_{2},a_{3},\ldots,a_{n-1}),a_{n})      This definition can be applied recursively:       (   a  1   ,   a  2   ,   a  3   ,  …  ,   a  n   )   =   (   (   …   (   (   (  ∅  ,   a  1   )   ,   a  2   )   ,   a  3   )    ,  …  )   ,   a  n   )         subscript  a  1    subscript  a  2    subscript  a  3   normal-…   subscript  a  n        normal-…       subscript  a  1     subscript  a  2     subscript  a  3     normal-…    subscript  a  n      (a_{1},a_{2},a_{3},\ldots,a_{n})=((\ldots(((\emptyset,a_{1}),a_{2}),a_{3}),%
 \ldots),a_{n})     Thus, for example:      (  1  ,  2  ,  3  )     1  2  3    \displaystyle(1,2,3)     Tuples as nested sets  Using Kuratowski's representation for an ordered pair , the second definition above can be reformulated in terms of pure set theory :   The 0-tuple (i.e. the empty tuple) is represented by the empty set   ∅     \emptyset   ;  Let   x   x   x   be an   n   n   n   -tuple    (   a  1   ,   a  2   ,  …  ,   a  n   )      subscript  a  1    subscript  a  2   normal-…   subscript  a  n     (a_{1},a_{2},\ldots,a_{n})   , and let    x  →  b  ≡   (   a  1   ,   a  2   ,  …  ,   a  n   ,  b  )        normal-→  x  b         subscript  a  1    subscript  a  2   normal-…   subscript  a  n   b      x\rightarrow b\equiv(a_{1},a_{2},\ldots,a_{n},b)   . Then,    x  →  b  ≡   {   {  x  }   ,   {  x  ,  b  }   }        normal-→  x  b         x    x  b       x\rightarrow b\equiv\{\{x\},\{x,b\}\}   . (The right arrow,   →   normal-→   \rightarrow   , could be read as "adjoined with".)   In this formulation:         (  )       =    ∅              (  1  )     =      (  )   →  1     =     {   {   (  )   }   ,   {   (  )   ,  1  }   }          =     {   {  ∅  }   ,   {  ∅  ,  1  }   }               (  1  ,  2  )     =      (  1  )   →  2     =     {   {   (  1  )   }   ,   {   (  1  )   ,  2  }   }          =     {   {   {   {  ∅  }   ,   {  ∅  ,  1  }   }   }   ,             {   {   {  ∅  }   ,   {  ∅  ,  1  }   }   ,  2  }   }               (  1  ,  2  ,  3  )     =      (  1  ,  2  )   →  3     =     {   {   (  1  ,  2  )   }   ,   {   (  1  ,  2  )   ,  3  }   }          =     {   {   {   {   {   {  ∅  }   ,   {  ∅  ,  1  }   }   }   ,                {   {   {  ∅  }   ,   {  ∅  ,  1  }   }   ,  2  }   }   }  ,            {   {   {   {   {  ∅  }   ,   {  ∅  ,  1  }   }   }   ,                {   {   {  ∅  }   ,   {  ∅  ,  1  }   }   ,  2  }   }   ,  3  }   }           missing-subexpression    missing-subexpression        missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression     1    normal-→   1          1       missing-subexpression    missing-subexpression    missing-subexpression          1       missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression      1  2     normal-→  1  2      1    1  2       missing-subexpression    missing-subexpression    missing-subexpression     fragments  normal-{   fragments  normal-{   fragments  normal-{   fragments  normal-{   normal-}   normal-,   fragments  normal-{   normal-,  1  normal-}   normal-}   normal-}   normal-,      missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression    fragments   fragments  normal-{   fragments  normal-{   fragments  normal-{   normal-}   normal-,   fragments  normal-{   normal-,  1  normal-}   normal-}   normal-,  2  normal-}   normal-}      missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression      1  2  3     normal-→   1  2   3       1  2      1  2   3       missing-subexpression    missing-subexpression    missing-subexpression     fragments  normal-{   fragments  normal-{   fragments  normal-{   fragments  normal-{   fragments  normal-{   fragments  normal-{   normal-}   normal-,   fragments  normal-{   normal-,  1  normal-}   normal-}   normal-}   normal-,        missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression    fragments   fragments   fragments  normal-{   fragments  normal-{   fragments  normal-{   normal-}   normal-,   fragments  normal-{   normal-,  1  normal-}   normal-}   normal-,  2  normal-}   normal-}   normal-}  normal-,      missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression    fragments  normal-{   fragments  normal-{   fragments  normal-{   fragments  normal-{   fragments  normal-{   normal-}   normal-,   fragments  normal-{   normal-,  1  normal-}   normal-}   normal-}   normal-,       missing-subexpression    missing-subexpression    missing-subexpression    missing-subexpression    fragments   fragments   fragments   fragments  normal-{   fragments  normal-{   fragments  normal-{   normal-}   normal-,   fragments  normal-{   normal-,  1  normal-}   normal-}   normal-,  2  normal-}   normal-}   normal-,  3  normal-}   normal-}      \begin{array}[]{lclcl}()&&&=&\emptyset\\
 &&&&\\
 (1)&=&()\rightarrow 1&=&\{\{()\},\{(),1\}\}\\
 &&&=&\{\{\emptyset\},\{\emptyset,1\}\}\\
 &&&&\\
 (1,2)&=&(1)\rightarrow 2&=&\{\{(1)\},\{(1),2\}\}\\
 &&&=&\{\{\{\{\emptyset\},\{\emptyset,1\}\}\},\\
 &&&&\{\{\{\emptyset\},\{\emptyset,1\}\},2\}\}\\
 &&&&\\
 (1,2,3)&=&(1,2)\rightarrow 3&=&\{\{(1,2)\},\{(1,2),3\}\}\\
 &&&=&\{\{\{\{\{\{\emptyset\},\{\emptyset,1\}\}\},\\
 &&&&\{\{\{\emptyset\},\{\emptyset,1\}\},2\}\}\},\\
 &&&&\{\{\{\{\{\emptyset\},\{\emptyset,1\}\}\},\\
 &&&&\{\{\{\emptyset\},\{\emptyset,1\}\},2\}\},3\}\}\\
 \end{array}     n -tuples of m -sets  In discrete mathematics , especially combinatorics and finite probability theory , n -tuples arise in the context of various counting problems and are treated more informally as ordered lists of length n . 4  n -tuples whose entries come from a set of m elements are also called arrangements with repetition , permutations of a multiset and, in some non-English literature, variations with repetition . The number of n -tuples of an m -set is m n . This follows from the combinatorial rule of product . 5 If S is a finite set of cardinality  m , this number is the cardinality of the n -fold Cartesian power  S × S × ... S . Tuples are elements of this product set.  Type theory  In type theory , commonly used in programming languages , a tuple has a product type ; this fixes not only the length, but also the underlying types of each component. Formally:       (   x  1   ,   x  2   ,  …  ,   x  n   )   :    𝖳  1   ×   𝖳  2   ×  …  ×   𝖳  n       normal-:    subscript  x  1    subscript  x  2   normal-…   subscript  x  n       subscript  𝖳  1    subscript  𝖳  2   normal-…   subscript  𝖳  n      (x_{1},x_{2},\ldots,x_{n}):\mathsf{T}_{1}\times\mathsf{T}_{2}\times\ldots%
 \times\mathsf{T}_{n}   and the projections are term constructors:        π  1    (  x  )    :    𝖳  1   ,    π  2    (  x  )     :    𝖳  2   ,  …  ,    π  n    (  x  )     :   𝖳  n        normal-:     subscript  π  1   x     subscript  𝖳  1      subscript  π  2   x      normal-:      subscript  𝖳  2   normal-…     subscript  π  n   x      normal-:     subscript  𝖳  n      \pi_{1}(x):\mathsf{T}_{1},~{}\pi_{2}(x):\mathsf{T}_{2},~{}\ldots,~{}\pi_{n}(x)%
 :\mathsf{T}_{n}     The tuple with labeled elements used in the relational model has a record type . Both of these types can be defined as simple extensions of the simply typed lambda calculus . 6  The notion of a tuple in type theory and that in set theory are related in the following way: If we consider the natural model of a type theory, and use the Scott brackets to indicate the semantic interpretation, then the model consists of some sets     S  1   ,   S  2   ,  …  ,   S  n       subscript  S  1    subscript  S  2   normal-…   subscript  S  n     S_{1},S_{2},\ldots,S_{n}   (note: the use of italics here that distinguishes sets from types) such that:        [   [   𝖳  1   ]   ]   =   S  1    ,     [   [   𝖳  2   ]   ]   =    S  2   ,  …    ,    [   [   𝖳  n   ]   ]   =   S  n        formulae-sequence     delimited-[]   delimited-[]   subscript  𝖳  1      subscript  S  1     formulae-sequence     delimited-[]   delimited-[]   subscript  𝖳  2       subscript  S  2   normal-…       delimited-[]   delimited-[]   subscript  𝖳  n      subscript  S  n       [\![\mathsf{T}_{1}]\!]=S_{1},~{}[\![\mathsf{T}_{2}]\!]=S_{2},~{}\ldots,~{}[\![%
 \mathsf{T}_{n}]\!]=S_{n}   and the interpretation of the basic terms is:        [   [   x  1   ]   ]   ∈   [   [   𝖳  1   ]   ]    ,     [   [   x  2   ]   ]   ∈    [   [   𝖳  2   ]   ]   ,  …    ,    [   [   x  n   ]   ]   ∈   [   [   𝖳  n   ]   ]        formulae-sequence     delimited-[]   delimited-[]   subscript  x  1      delimited-[]   delimited-[]   subscript  𝖳  1       formulae-sequence     delimited-[]   delimited-[]   subscript  x  2       delimited-[]   delimited-[]   subscript  𝖳  2     normal-…       delimited-[]   delimited-[]   subscript  x  n      delimited-[]   delimited-[]   subscript  𝖳  n         [\![x_{1}]\!]\in[\![\mathsf{T}_{1}]\!],~{}[\![x_{2}]\!]\in[\![\mathsf{T}_{2}]%
 \!],~{}\ldots,~{}[\![x_{n}]\!]\in[\![\mathsf{T}_{n}]\!]   .  The   n   n   n   -tuple of type theory has the natural interpretation as an   n   n   n   -tuple of set theory: 7       [   [   (   x  1   ,   x  2   ,  …  ,   x  n   )   ]   ]   =   (   [   [   x  1   ]   ]   ,   [   [   x  2   ]   ]   ,  …  ,   [   [   x  n   ]   ]   )        delimited-[]   delimited-[]    subscript  x  1    subscript  x  2   normal-…   subscript  x  n        delimited-[]   delimited-[]   subscript  x  1      delimited-[]   delimited-[]   subscript  x  2     normal-…   delimited-[]   delimited-[]   subscript  x  n        [\![(x_{1},x_{2},\ldots,x_{n})]\!]=(\,[\![x_{1}]\!],[\![x_{2}]\!],\ldots,[\![x%
 _{n}]\!]\,)   The unit type has as semantic interpretation the 0-tuple.  See also   Arity  Exponential object  Formal language  OLAP: Multidimensional Expressions  Prime k-tuple  Relation (mathematics)  Tuplespace   Notes  References    Keith Devlin , The Joy of Sets . Springer Verlag, 2nd ed., 1993, ISBN 0-387-94094-4, pp. 7–8  Abraham Adolf Fraenkel , Yehoshua Bar-Hillel , Azriel Lévy , [ http://books.google.com/books?q=Foundations+of+set+theory&btnG; ;=Search+Books Foundations of set theory] , Elsevier Studies in Logic Vol. 67, Edition 2, revised, 1973, ISBN 0-7204-2270-1, p. 33  Gaisi Takeuti , W. M. Zaring, Introduction to Axiomatic Set Theory , Springer GTM 1, 1971, ISBN 978-0-387-90024-7, p. 14  George J. Tourlakis, Lecture Notes in Logic and Set Theory. Volume 2: Set theory , Cambridge University Press, 2003, ISBN 978-0-521-75374-6, pp. 182–193   ar:زوج مرتب "  Category:Data management  Category:Mathematical notation  Category:Sequences and series  Category:Basic concepts in set theory  Category:Type theory     ↩  ↩  OED , s.v. "triple", "quadruple", "quintuple", "decuple" ↩  ↩  ↩  ↩  Steve Awodey, From sets, to types, to categories, to sets , 2009, preprint ↩     