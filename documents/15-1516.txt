   Sidi's generalized secant method      Sidi's generalized secant method   Sidi's generalized secant method is a root-finding algorithm , that is, a numerical method for solving equations of the form     f   (  x  )    =  0        f  x   0    f(x)=0   . The method was published by Avram Sidi. 1  The method is a generalization of the secant method . Like the secant method, it is an iterative method which requires one evaluation of   f   f   f   in each iteration and no derivatives of   f   f   f   . The method can converge much faster though, with an order which approaches 2 provided that   f   f   f   satisfies the regularity conditions described below.  Algorithm  We call   α   α   \alpha   the root of   f   f   f   , that is,     f   (  α  )    =  0        f  α   0    f(\alpha)=0   . Sidi's method is an iterative method which generates a sequence     {   x  i   }      subscript  x  i     \{x_{i}\}   of approximations of   α   α   \alpha   . Starting with k + 1 initial approximations     x  1   ,  …  ,   x   k  +  1        subscript  x  1   normal-…   subscript  x    k  1      x_{1},\dots,x_{k+1}   , the approximation    x   k  +  2      subscript  x    k  2     x_{k+2}   is calculated in the first iteration, the approximation    x   k  +  3      subscript  x    k  3     x_{k+3}   is calculated in the second iteration, etc. Each iteration takes as input the last k + 1 approximations and the value of   f   f   f   at those approximations. Hence the n th iteration takes as input the approximations     x  n   ,  …  ,   x   n  +  k        subscript  x  n   normal-…   subscript  x    n  k      x_{n},\dots,x_{n+k}   and the values     f   (   x  n   )    ,  …  ,   f   (   x   n  +  k    )         f   subscript  x  n    normal-…    f   subscript  x    n  k       f(x_{n}),\dots,f(x_{n+k})   .  The number k must be 1 or larger: k = 1, 2, 3, .... It remains fixed during the execution of the algorithm. In order to obtain the starting approximations     x  1   ,  …  ,   x   k  +  1        subscript  x  1   normal-…   subscript  x    k  1      x_{1},\dots,x_{k+1}   one could carry out a few initializing iterations with a lower value of k .  The approximation    x   n  +  k  +  1      subscript  x    n  k  1     x_{n+k+1}   is calculated as follows in the n th iteration. A polynomial of interpolation      p   n  ,  k     (  x  )        subscript  p   n  k    x    p_{n,k}(x)   of degree  k is fitted to the k + 1 points     (   x  n   ,   f   (   x  n   )    )   ,   …   (   x   n  +  k    ,   f   (   x   n  +  k    )    )         subscript  x  n     f   subscript  x  n       normal-…    subscript  x    n  k      f   subscript  x    n  k         (x_{n},f(x_{n})),\dots(x_{n+k},f(x_{n+k}))   . With this polynomial, the next approximation    x   n  +  k  +  1      subscript  x    n  k  1     x_{n+k+1}   of   α   α   \alpha   is calculated as  with     p   n  ,  k   ′    (   x   n  +  k    )        superscript   subscript  p   n  k    normal-′    subscript  x    n  k      p_{n,k}^{\prime}(x_{n+k})   the derivative of    p   n  ,  k      subscript  p   n  k     p_{n,k}   at    x   n  +  k      subscript  x    n  k     x_{n+k}   . Having calculated    x   n  +  k  +  1      subscript  x    n  k  1     x_{n+k+1}   one calculates    f   (   x   n  +  k  +  1    )       f   subscript  x    n  k  1      f(x_{n+k+1})   and the algorithm can continue with the ( n + 1)th iteration. Clearly, this method requires the function   f   f   f   to be evaluated only once per iteration; it requires no derivatives of   f   f   f   .  The iterative cycle is stopped if an appropriate stop-criterion is met. Typically the criterion is that the last calculated approximation is close enough to the sought-after root   α   α   \alpha   .  To execute the algorithm effectively, Sidi's method calculates the interpolating polynomial     p   n  ,  k     (  x  )        subscript  p   n  k    x    p_{n,k}(x)   in its Newton form .  Convergence  Sidi showed that if the function   f   f   f   is ( k + 1)-times continuously differentiable in an open interval    I   I   I   containing   α   α   \alpha   (that is,    f  ∈    C   k  +  1     (  I  )        f     superscript  C    k  1    I     f\in C^{k+1}(I)   ),   α   α   \alpha   is a simple root of   f   f   f   (that is,      f  ′    (  α  )    ≠  0         superscript  f  normal-′   α   0    f^{\prime}(\alpha)\neq 0   ) and the initial approximations     x  1   ,  …  ,   x   k  +  1        subscript  x  1   normal-…   subscript  x    k  1      x_{1},\dots,x_{k+1}   are chosen close enough to   α   α   \alpha   , then the sequence    {   x  i   }      subscript  x  i     \{x_{i}\}   converges to   α   α   \alpha   , meaning that the following limit holds      lim   n  →  ∞     x  n    =  α        subscript    normal-→  n      subscript  x  n    α    \lim\limits_{n\to\infty}x_{n}=\alpha   .  Sidi furthermore showed that         lim   n  →  ∞       x   n  +  1    -  α     ∏   i  =  0   k    (    x   n  -  i    -  α   )      =  L  =      (   -  1   )    k  +  1      (   k  +  1   )   !       f   (   k  +  1   )     (  α  )      f  ′    (  α  )       ,          subscript    normal-→  n          subscript  x    n  1    α     subscript   superscript  product  k     i  0       subscript  x    n  i    α      L            superscript    1     k  1        k  1          superscript  f    k  1    α      superscript  f  normal-′   α        \lim_{n\to\infty}\frac{x_{n+1}-\alpha}{\prod^{k}_{i=0}(x_{n-i}-\alpha)}=L=%
 \frac{(-1)^{k+1}}{(k+1)!}\frac{f^{(k+1)}(\alpha)}{f^{\prime}(\alpha)},     and that the sequence converges to   α   α   \alpha   of order    ψ  k     subscript  ψ  k    \psi_{k}   , i.e.        lim   n  →  ∞      |    x   n  +  1    -  α   |     |    x  n   -  α   |    ψ  k      =    |  L  |     (    ψ  k   -  1   )   /  k          subscript    normal-→  n            subscript  x    n  1    α     superscript       subscript  x  n   α     subscript  ψ  k       superscript    L        subscript  ψ  k   1   k      \lim\limits_{n\to\infty}\frac{|x_{n+1}-\alpha|}{|x_{n}-\alpha|^{\psi_{k}}}=|L|%
 ^{(\psi_{k}-1)/k}     The order of convergence    ψ  k     subscript  ψ  k    \psi_{k}   is the only positive root of the polynomial       s   k  +  1    -   s  k   -   s   k  -  1    -  …  -  s  -  1       superscript  s    k  1     superscript  s  k    superscript  s    k  1    normal-…  s  1    s^{k+1}-s^{k}-s^{k-1}-\dots-s-1     We have e.g.     ψ  1   =    (   1  +   5    )   /  2        subscript  ψ  1       1    5    2     \psi_{1}=(1+\sqrt{5})/2   ≈ 1.6180,    ψ  2     subscript  ψ  2    \psi_{2}   ≈ 1.8393 and    ψ  3     subscript  ψ  3    \psi_{3}   ≈ 1.9276. The order approaches 2 from below if k becomes large      lim   k  →  ∞     ψ  k    =  2        subscript    normal-→  k      subscript  ψ  k    2    \lim\limits_{k\to\infty}\psi_{k}=2    2  3  Related algorithms  Sidi's method reduces to the secant method if we take k = 1. In this case the polynomial     p   n  ,  1     (  x  )        subscript  p   n  1    x    p_{n,1}(x)   is the linear approximation of   f   f   f   around   α   α   \alpha   which is used in the n th iteration of the secant method.  We can expect that the larger we choose k , the better     p   n  ,  k     (  x  )        subscript  p   n  k    x    p_{n,k}(x)   is an approximation of    f   (  x  )       f  x    f(x)   around    x  =  α      x  α    x=\alpha   . Also, the better     p   n  ,  k   ′    (  x  )        superscript   subscript  p   n  k    normal-′   x    p_{n,k}^{\prime}(x)   is an approximation of     f  ′    (  x  )        superscript  f  normal-′   x    f^{\prime}(x)   around    x  =  α      x  α    x=\alpha   . If we replace    p   n  ,  k   ′     superscript   subscript  p   n  k    normal-′    p_{n,k}^{\prime}   with    f  ′     superscript  f  normal-′    f^{\prime}   in () we obtain that the next approximation in each iteration is calculated as  This is the Newton–Raphson method . It starts off with a single approximation    x  1     subscript  x  1    x_{1}   so we can take k = 0 in (). It does not require an interpolating polynomial but instead one has to evaluate the derivative    f  ′     superscript  f  normal-′    f^{\prime}   in each iteration. Depending on the nature of   f   f   f   this may not be possible or practical.  Once the interpolating polynomial     p   n  ,  k     (  x  )        subscript  p   n  k    x    p_{n,k}(x)   has been calculated, one can also calculate the next approximation    x   n  +  k  +  1      subscript  x    n  k  1     x_{n+k+1}   as a solution of      p   n  ,  k     (  x  )    =  0         subscript  p   n  k    x   0    p_{n,k}(x)=0   instead of using (). For k = 1 these two methods are identical: it is the secant method. For k = 2 this method is known as Muller's method . 4 For k = 3 this approach involves finding the roots of a cubic function , which is unattractively complicated. This problem becomes worse for even larger values of k . An additional complication is that the equation      p   n  ,  k     (  x  )    =  0         subscript  p   n  k    x   0    p_{n,k}(x)=0   will in general have multiple solutions and a prescription has to be given which of these solutions is the next approximation    x   n  +  k  +  1      subscript  x    n  k  1     x_{n+k+1}   . Muller does this for the case k = 2 but no such prescriptions appear to exist for k > 2.  References    "  Category:Root-finding algorithms     Sidi, Avram, "Generalization Of The Secant Method For Nonlinear Equations", Applied Mathematics E-notes 8 (2008), 115–123, http://www.math.nthu.edu.tw/~amen/2008/070227-1.pdf ↩  Traub, J.F., "Iterative Methods for the Solution of Equations", Prentice Hall, Englewood Cliffs, N.J. (1964) ↩  Muller, David E., "A Method for Solving Algebraic Equations Using an Automatic Computer", Mathematical Tables and Other Aids to Computation 10 (1956), 208–215 ↩      