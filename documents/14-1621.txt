   Coordinate descent      Coordinate descent   Coordinate descent is a non-derivative optimization  algorithm . To find a local minimum of a function, one does line search along one coordinate direction at the current point in each iteration. One uses different coordinate directions cyclically throughout the procedure. On non-separable functions the algorithm may fail to find the optimum in a reasonable number of function evaluations. To improve the convergence an appropriate coordinate system can be gradually learned, such that new search coordinates obtained using PCA are as decorrelated as possible with respect to the objective function (see Adaptive coordinate descent for more details).  Description  Coordinate descent is based on the idea that the minimization of a multivariable function    F   (  𝐱  )       F  𝐱    F(\mathbf{x})   can be achieved by minimizing it along one direction at a time. Instead of varying descent direction according to gradient , one fixes descent direction at the outset. For instance, one chooses some basis as the search directions     𝐞  1   ,   𝐞  2   ,  …  ,   𝐞  n       subscript  𝐞  1    subscript  𝐞  2   normal-…   subscript  𝐞  n     \mathbf{e}_{1},\mathbf{e}_{2},\dots,\mathbf{e}_{n}   . One cyclically iterates through each direction, one at a time, minimizing the objective function with respect to that coordinate direction. It follows that, if    𝐱  k     superscript  𝐱  k    \mathbf{x}^{k}   is given, the   i   i   i   th coordinate of    𝐱   k  +  1      superscript  𝐱    k  1     \mathbf{x}^{k+1}   is given by        𝐱  i   k  +  1    =       arg   min    y  ∈  ℝ     f   (   x  1   k  +  1    ,  …  ,   x   i  -  1    k  +  1    ,  y  ,   x   i  +  1   k   ,  …  ,   x  n  k   )     ;       subscript   superscript  𝐱    k  1    i        y  ℝ     arg  min    f    subscript   superscript  x    k  1    1   normal-…   subscript   superscript  x    k  1      i  1    y   subscript   superscript  x  k     i  1    normal-…   subscript   superscript  x  k   n       \mathbf{x}^{k+1}_{i}=\underset{y\in\mathbb{R}}{\operatorname{arg\,min}}\;f(x^{%
 k+1}_{1},...,x^{k+1}_{i-1},y,x^{k}_{i+1},...,x^{k}_{n});     Thus, one begins with an initial guess    𝐱  0     superscript  𝐱  0    \mathbf{x}^{0}   for a local minimum of   F   F   F   , and get a sequence     𝐱  0   ,   𝐱  1   ,   𝐱  2   ,  …      superscript  𝐱  0    superscript  𝐱  1    superscript  𝐱  2   normal-…    \mathbf{x}^{0},\mathbf{x}^{1},\mathbf{x}^{2},\dots   iteratively.  By doing line search in each iteration, We automatically have        F   (   𝐱  0   )    ≥   F   (   𝐱  1   )    ≥   F   (   𝐱  2   )    ≥  ⋯   ,          F   superscript  𝐱  0      F   superscript  𝐱  1           F   superscript  𝐱  2         normal-⋯     F(\mathbf{x}^{0})\geq F(\mathbf{x}^{1})\geq F(\mathbf{x}^{2})\geq\cdots,     It can be shown that this sequence has similar convergence properties as steepest descent. No improvement after one cycle of line search along coordinate directions implies a stationary point is reached.  This process is illustrated below.  (Figure)  coordinate descent.jpg   Examples  Coordinate descent has problems with non-smooth functions. The following picture shows that coordinate descent iteration may get stuck at a non- stationary point if the level curves of a function are not smooth.  (Figure)  nonsmooth.jpg   Applications  Coordinate descent algorithms are used in machine learning , e.g. for training linear support vector machines 1 (see LIBLINEAR ) and non-negative matrix factorization . 2  See also   Adaptive coordinate descent  Conjugate gradient  Gradient descent  Newton's method  Mathematical optimization  Line search   References    Bertsekas, Dimitri P. (1999). Nonlinear Programming, Second Edition Athena Scientific, Belmont, Massachusetts. ISBN 1-886529-00-0.   .   .   .   .   .   "  Category:Gradient methods     ↩  ↩     