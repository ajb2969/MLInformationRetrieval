


Partition problem




Partition problem

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In computer science, the partition problem is the task of deciding whether a given multiset S of positive integers can be partitioned into two subsets S1 and S2 such that the sum of the numbers in S1 equals the sum of the numbers in S2. Although the partition problem is NP-complete, there is a pseudo-polynomial time dynamic programming solution, and there are heuristics that solve the problem in many instances, either optimally or approximately. For this reason, it has been called "The Easiest Hard Problem".1
There is an optimization version of the partition problem, which is to partition the multiset S into two subsets S1, S2 such that the difference between the sum of elements in S1 and the sum of elements in S2 is minimized. The optimization version is NP-hard.
Examples
Given S = {3,1,1,2,2,1}, a valid solution to the partition problem is the two sets S1 = {1,1,1,2} and S2 = {2,3}. Both sets sum to 5, and they partition S. Note that this solution is not unique. S1 = {3,1,1} and S2 = {2,2,1} is another solution.
Not every multiset of positive integers has a partition into two halves with equal sum. An example of such a set is S = {2,5}.
Pseudo-polynomial time algorithm
The problem can be solved using dynamic programming when the size of the set and the size of the sum of the integers in the set are not too big to render the storage requirements infeasible.
Suppose the input to the algorithm is a list of the form:

S = x1, ..., xn


Let N be the sum of all elements in S. That is: N = x1 + ... + xn. We will build an algorithm that determines if there is a subset of S that sums to 
 
 
 
 . If there is a subset, then:

if n is even, the rest of S also sums to 
 
 

if n is odd, then the rest of S sums to 
 
 
 
 . This is as good a solution as possible.
 

Recurrence relation
We wish to determine if there is a subset of S that sums to 
 
 
 
 . Let:

p(i, j) be True if a subset of { x1, ..., xj } sums to i and False otherwise.
 

Then p(
 
 
 
 , n) is True if and only if there is a subset of S that sums to 
 
 
 
 . The goal of our algorithm will be to compute p(
 
 
 
 , n). In aid of this, we have the following recurrence relation:

p(i, j) is True if either p(i, j − 1) is True or if p(i − xj, j − 1) is True
 
p(i, j) is False otherwise
 

The reasoning for this is as follows: there is some subset of S that sums to i using numbers

x1, ..., xj


if and only if either of the following is true:

There is a subset of { x1, ..., xj } that does not use xj and that sums to i

There is a subset of { x1, ..., xj } that does use xj and that sums to i − xj (since xj + that subset's sum = i)
 

The pseudo-polynomial algorithm
The algorithm is to build up a table of size 
 
 
 
  by n containing the values of the recurrence. Once the entire table is filled in, return P(
 
 
 
 , n). Below is a picture of the table P. There is a purple arrow from one block to another if the value of the target-block might depend on the value of the source-block. This dependence is a property of the recurrence relation.
(Figure)
Dependencies of table entry (i, j)

INPUT:  A list of integers S
OUTPUT: True if S can be partitioned into two subsets that have equal sum
1 function find_partition(S):
2     n ← |S|
3     N ← sum(S)
4     P ← empty boolean table of size (

+ 1) by (n + 1)
5     initialize top row (P(0,x)) of P to True
6     initialize leftmost column (P(x, 0)) of P, except for P(0, 0) to False
7     for i from 1 to 


8         for j from 1 to n
9             P(i, j) ← P(i, j-1) or P(i-S[j-1], j-1)
10    return P(

, n)
C# code:
// pseudo-polynomial algorithm
 public static bool BalancePartition(int[] S)
 {
     int n = S.Length;
     int N = S.Sum();
     bool[,] P = new bool[N / 2 + 1, n + 1];
 
     for (int i = 0; i < n + 1; i++)
         P[0, i] = true;
 
     for (int i = 1; i <= N / 2; i++)
         for (int j = 1; j <= n; j++)
             if (S[j - 1] <= i)
                 P[i, j] = P[i, j - 1] || P[i - S[j - 1], j - 1];
             else
                 P[i, j] = P[i, j - 1];
 
     return P[N / 2, n];
 }
Example
Below is the table P for the example set used above S = {3, 1, 1, 2, 2, 1}: 
Runtime
This algorithm runs in time 
 
 
 
 , where 
 
 
 
  is the number of elements in the input set and 
 
 
 
  is the sum of elements in the input set.
Special case of the subset-sum problem
The partition problem can be viewed as a special case of the subset sum problem and the pseudo-polynomial time dynamic programming solution given above generalizes to a solution for the subset sum problem.
Approximation algorithm approaches
The greedy algorithm
One approach to the problem, imitating the way children choose teams for a game, is the greedy algorithm, which iterates through the numbers in descending order, assigning each of them to whichever subset has the smaller sum. This approach has a running time of 
 
 
 
 . This heuristic works well in practice when the numbers in the set are of about the same size as its cardinality or less, but it is not guaranteed to produce the best possible partition. For example, given the set S = {4, 5, 6, 7, 8} as input, this greedy algorithm would partition S into subsets {4, 5, 8} and {6, 7}; however, S has an exactly balanced partition into subsets {7, 8} and {4, 5, 6}.
This greedy approach is known to give a 7/6-approximation to the optimal solution of the optimization version; that is, if the greedy algorithm outputs two sets A and B, then max(sum(A), sum(B)) ≤ (7/6)OPT, where OPT is the size of the larger set in the best possible partition.2 Below is pseudocode for the greedy algorithm.
def find_partition(int_list):
     "returns: An attempt at a partition of `int_list` into two sets of equal sum"
     A = set()
     B = set()
     for n in sorted(int_list, reverse=True):
         if sum(A) < sum(B):
            A.add(n)
         else:
            B.add(n)
     return (A, B)
This algorithm can be extended to take the 
 
 
 
  largest elements, and for each partition of them, extends the partition by adding the remaining elements successively to whichever set is smaller. (The simple version above corresponds to 
 
 
 
 .) This version runs in time 
 
 
 
  and is known to give a 
 
 
 
  approximation.3 Τhus, we have a polynomial-time approximation scheme (PTAS) for the number partition problem, though this is not a fully polynomial time approximation scheme (the running time is exponential in the desired approximation guarantee). However, there are variations of this idea that are fully polynomial-time approximation schemes for the subset-sum problem, and hence for the partition problem as well.45
Differencing algorithm
Another heuristic, due to Narendra Karmarkar and Richard Karp,6 is the differencing algorithm, which at each step removes two numbers from the set and replaces them by their difference. This represents the decision to put the two numbers in different sets, without immediately deciding which one is in which set. The differencing heuristic performs better than the greedy one, but is still bad for instances where the numbers are exponential in the size of the set.7
Java code:
int karmarkarKarpPartition(int[] baseArr) { 
     // create max heap  
     PriorityQueue heap = new PriorityQueue(baseArr.length, REVERSE_INT_CMP);
 
     for (int value : baseArr) {     
         heap.add(value);    
     }
 
     while(heap.size() > 1) {
         int val1 = heap.poll(); 
         int val2 = heap.poll(); 
         heap.add(val1 - val2);
     }
 
     return heap.poll();
 }
 
Other approaches
There are also anytime algorithms, based on the differencing heuristic, that first find the solution returned by the differencing heuristic, then find progressively better solutions as time allows (possibly requiring exponential time to reach optimality, for the worst instances).8
Hard instances
Sets with only one, or no partitions tend to be hardest (or most expensive) to solve compared to their input sizes. When the values are small compared to the size of the set, perfect partitions are more likely. The problem is known to undergo a "phase transition"; being likely for some sets and unlikely for others. If m is the number of bits needed to express any number in the set and n is the size of the set then 
 
 
 
  tends to have many solutions and 
 
 
 
  tends to have few or no solutions. As n and m get larger, the probability of a perfect partition goes to 1 or 0 respectively. This was originally argued based on empirical evidence by Gent and Walsh,9 then using methods from statistical physics by Mertens,10 and later proved by Borgs, Chayes, and Pittel.11
The k-partition problem
There is a problem called the 3-partition problem which is to partition the set S into |S|/3 triples each with the same sum. The 3-partition problem is quite different than the Partition Problem and has no pseudo-polynomial time algorithm unless P = NP.12 For generalizations of the partition problem, see the Bin packing problem.
Alternative forms of the problem
An interesting related problem, somewhat similar to the Birthday paradox is that of determining the size of the input set so that we have a probability of one half that there is a solution, under the assumption that each element in the set is randomly selected with uniform distribution between 1 and some given value.
The problem is interesting in that the solution can be counter-intuitive (like the Birthday paradox). For example, with elements randomly selected in between 1 and one million, many people's intuition is that the answer is in the thousands, tens, or even hundreds of thousands, whereas the correct answer is approximately 23 (see Birthday problem#Partition problem for details).
See also

Subset sum problem
Bin packing problem

Notes
References














"
Category:NP-complete problems Category:Weakly NP-complete problems



↩
↩


↩
↩

, ↩
↩
, ↩
↩
↩



