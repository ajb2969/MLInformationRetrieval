


Tree (graph theory)




Tree (graph theory)

In mathematics, and more specifically in graph theory, a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree. A forest is a disjoint union of trees.
The various kinds of data structures referred to as trees in computer science have underlying graphs that are trees in graph theory, although such data structures are generally rooted trees, thus in fact being directed graphs, and may also have additional ordering of branches.
Rooted trees in their directed graph form may be called directed rooted trees.1 Other terms for this include2 arborescence,3 out-arborescence,4 out-tree,56 and even branching.7
The term "tree" was coined in 1857 by the British mathematician Arthur Cayley.8
Definitions
A tree is an undirected simple graph G that satisfies any of the following equivalent conditions:

G is connected and has no cycles.
G has no cycles, and a simple cycle is formed if any edge is added to G.
G is connected, but is not connected if any single edge is removed from G.
G is connected and the 3-vertex complete graph

 
  is not a minor of G.
Any two vertices in G can be connected by a unique simple path.

If G has finitely many vertices, say n of them, then the above statements are also equivalent to any of the following conditions:

G is connected and has n − 1 edges.
G has no simple cycles and has n − 1 edges.

As elsewhere in graph theory, the order-zero graph (graph with no vertices) is generally excluded from consideration: while it is vacuously connected as a graph (any two vertices can be connected by a path), it is not 0-connected (or even (−1)-connected) in algebraic topology, unlike non-empty trees, and violates the "one more node than edges" relation.
A leaf is a vertex of degree 1. An internal vertex is a vertex of degree at least 2.
An irreducible (or series-reduced) tree is a tree in which there is no vertex of degree 2.
A forest is an undirected graph, all of whose connected components are trees; in other words, the graph consists of a disjoint union of trees. Equivalently, a forest is an undirected cycle-free graph. As special cases, an empty graph, a single tree, and the discrete graph on a set of vertices (that is, the graph with these vertices that has no edges), all are examples of forests.
The term hedge sometimes refers to an ordered sequence of trees.
A polytree9 (also known as oriented tree1011 or singly connected network12) is a directed acyclic graph (DAG) whose underlying undirected graph is a tree. In other words, if we replace its directed arcs with undirected edges, we obtain an undirected graph that is both connected and acyclic.
A directed tree is a directed graph which would be a tree if the directions on the edges were ignored, i.e. a polytree. Some authors restrict the phrase to the case where the edges are all directed towards a particular vertex, or all directed away from a particular vertex (see arborescence).
A tree is called a rooted tree if one vertex has been designated the root, in which case the edges have a natural orientation, towards or away from the root. The tree-order is the partial ordering on the vertices of a tree with u ≤ v if and only if the unique path from the root to v passes through u. A rooted tree which is a subgraph of some graph G is a normal tree if the ends of every edge in G are comparable in this tree-order whenever those ends are vertices of the tree . Rooted trees, often with additional structure such as ordering of the neighbors at each vertex, are a key data structure in computer science; see tree data structure. In a context where trees are supposed to have a root, a tree without any designated root is called a free tree.
In a rooted tree, the parent of a vertex is the vertex connected to it on the path to the root; every vertex except the root has a unique parent. A child of a vertex v is a vertex of which v is the parent. A descendent of any vertex v is any vertex which is either the child of v or is (recursively) the descendent of any of the children of v. A sibling to a vertex v is any other vertex on the tree which has the same parent as v.
A labeled tree is a tree in which each vertex is given a unique label. The vertices of a labeled tree on n vertices are typically given the labels 1, 2, …, n. A recursive tree is a labeled rooted tree where the vertex labels respect the tree order (i.e., if u See  2-ary trees are sometimes called binary trees, while 3-ary trees are sometimes called ternary trees.
A terminal vertex of a tree is a vertex of degree 1. In a rooted tree, the leaves are all terminal vertices; additionally, the root, if not a leaf itself, is a terminal vertex if it has precisely one child.
Plane tree
An  or plane tree is a rooted tree for which an ordering is specified for the children of each vertex. This is called a "plane tree" because an ordering of the children is equivalent to an embedding of the tree in the plane, with the root at the top and the children of each vertex lower than that vertex. Given an embedding of a rooted tree in the plane, if one fixes a direction of children, say left to right, then an embedding gives an ordering of the children. Conversely, given an ordered tree, and conventionally drawing the root at the top, then the child nodes in an ordered tree can be drawn left-to-right, yielding an essentially unique planar embedding .
A leaf in a rooted tree is a vertex of degree 1 that is not the root. A terminal vertex of a tree is a vertex of degree 1. In a rooted tree, the leaves are all terminal vertices; additionally, the root, if not a leaf itself, is a terminal vertex if it has precisely one child.
Example
The example tree shown above has 6 vertices and 6 − 1 = 5 edges. The unique simple path connecting the vertices 2 and 6 is 2-4-5-6.
Facts

Every tree is a bipartite graph and a median graph. Every tree with only countably many vertices is a planar graph.


Every connected graph G admits a spanning tree, which is a tree that contains every vertex of G and whose edges are edges of G.


Every connected graph with only countably many vertices admits a normal spanning tree .


There exist connected graphs with uncountably many vertices which do not admit a normal spanning tree .


Every finite tree with n vertices, with , has at least two terminal vertices (leaves). This minimal number of terminal vertices is characteristic of path graphs; the maximal number, , is attained by star graphs.


For any three vertices in a tree, the three paths between them have exactly one vertex in common.

Enumeration
Labeled trees
Cayley's formula states that there are nn−2 trees on n labeled vertices. It can be proved by first showing that the number of trees with vertices 1,2,...,n, of degrees d1,d2,...,dn respectively, is the multinomial coefficient


 
  An alternative proof uses Prüfer sequences.
Cayley's formula is the special case of complete graphs in a more general problem of counting spanning trees in an undirected graph, which is addressed by the matrix tree theorem. The similar problem of counting all the subtrees regardless of size has been shown to be #P-complete in the general case ().
Unlabeled trees
Counting the number of unlabeled free trees is a harder problem. No closed formula for the number t(n) of trees with n vertices up to graph isomorphism is known. The first few values of t(n) are:

1, 1, 1, 1, 2, 3, 6, 11, 23, 47, 106, 235, 551, 1301, 3159, ... .
 

proved the asymptotic estimate:


 
  with the values C and α known to be approximately 0.534949606… and 2.95576528565… , respectively. (Here, 
 
 
 
 
  means that 
 
 
 
 .) This is a consequence of his asymptotic estimate for the number 
 
 
 
  of unlabeled rooted trees with n vertices:


 
  with D around 0.43992401257… and the same α as above (cf. , Chap. 2.3.4.4 and , Chap. VII.5, p. 475).
The first few values of r(n) are:13

1, 1, 2, 4, 9, 20, 48, 115, 286, 719, 1842, 4766, 12486, 32973, ....
 

Types of trees
A star graph is a tree which consists of a single internal vertex (and n − 1 leaves). In other words, a star graph of order n is a tree of order n with as many leaves as possible. Its diameter is at most 2.
A tree with two leaves (the fewest possible) is a path graph; a forest in which all components are isolated nodes and path graphs is called a linear forest. If all vertices in a tree are within distance one of a central path subgraph, then the tree is a caterpillar tree. If all vertices are within distance two of a central path subgraph, then the tree is a lobster.
See also

Decision tree
Pseudoforest
Tree structure
Tree data structure
Unrooted binary tree

Notes
References


.

.

.

.

.

Further reading


.




.

.

"
*



↩
In particular, some authors consider that directed rooted trees are not descriptive enough as to the direction of the arcs, for instance ↩

↩

↩
↩
Cayley (1857) [http://books.google.com/books?id=MlEEAAAAYAAJ&pg;;=PA172#v=onepage&q;&f;=false "On the theory of the analytical forms called trees,"] Philosophical Magazine, 4th series, 13 : 172–176.
 However it should be mentioned that in 1847, K.G.C. von Staudt, in his book Geometrie der Lage (Nürnberg, (Germany): Bauer und Raspe, 1847), presented a proof of Euler's polyhedron theorem which relies on trees on [http://books.google.com/books?id=MzQAAAAAQAAJ&pg;;=PA20#v=onepage&q;&f;=false pages 20–21]. Also in 1847, the German physicist Gustav Kirchhoff investigated electrical circuits and found a relation between the number (n) of wires/resistors (branches), the number (m) of junctions (vertices), and the number (μ) of loops (faces) in the circuit. He proved the relation via an argument relying on trees. See: Kirchhoff, G. R. (1847) [http://books.google.com/books?id=gx4AAAAAMAAJ&vq;;=Kirchoff&pg;=PA497#v=onepage&q;&f;=false "Uber die Auflösung der Gleichungen auf welche man bei der Untersuchung der linearen Vertheilung galvanischer Ströme geführt wird"] (On the solution of equations to which one is led by the investigation of the linear distribution of galvanic currents), Annalen der Physik und Chemie, 72 (12) : 497–508.↩
See .↩
See .↩
See .↩
See .↩
See .↩




