


Knapsack problem




Knapsack problem

(Figure)
Example of a one-dimensional (constraint) knapsack problem: which boxes should be chosen to maximize the amount of money while still keeping the overall weight under or equal to 15 kg? A multiple constrained problem could consider both the weight and volume of the boxes.
 (Solution: if any number of each box is available, then three yellow boxes and three grey boxes; if only the shown boxes are available, then all but the green box.)

The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a mass and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items.
The problem often arises in resource allocation where there are financial constraints and is studied in fields such as combinatorics, computer science, complexity theory, cryptography and applied mathematics.
The knapsack problem has been studied for more than a century, with early works dating as far back as 1897.1 It is not known how the name "knapsack problem" originated, though the problem was referred to as such in the early works of mathematician Tobias Dantzig (1884–1956),2 suggesting that the name could have existed in folklore before a mathematical problem had been fully defined.3
Applications
A 1998 study of the Stony Brook University Algorithm Repository showed that, out of 75 algorithmic problems, the knapsack problem was the 18th most popular and the 4th most needed after kd-trees, suffix trees, and the bin packing problem.4
Knapsack problems appear in real-world decision-making processes in a wide variety of fields, such as finding the least wasteful way to cut raw materials,5 seating contest of investments and portfolios,6 seating contest of assets for asset-backed securitization,7 and generating keys for the Merkle–Hellman8 and other knapsack cryptosystems.
One early application of knapsack algorithms was in the construction and scoring of tests in which the test-takers have a choice as to which questions they answer. For small examples it is a fairly simple process to provide the test-takers with such a choice. For example, if an exam contains 12 questions each worth 10 points, the test-taker need only answer 10 questions to achieve a maximum possible score of 100 points. However, on tests with a heterogeneous distribution of point values—i.e. different questions are worth different point values— it is more difficult to provide choices. Feuerman and Weiss proposed a system in which students are given a heterogeneous test with a total of 125 possible points. The students are asked to answer all of the questions to the best of their abilities. Of the possible subsets of problems whose total point values add up to 100, a knapsack algorithm would determine which subset gives each student the highest possible score.9
Definition
The most common problem being solved is the 0-1 knapsack problem, which restricts the number xi of copies of each kind of item to zero or one. Given a set of n items numbered from 1 up to n, each with a weight wi and a value vi, along with a maximum weight capacity W,

maximize 
 
 

subject to 
 
 
 
  and 
 
 
 
 .
 

Here xi represents the number of instances of item i to include in the knapsack. Informally, the problem is to maximize the sum of the values of the items in the knapsack so that the sum of the weights is less than or equal to the knapsack's capacity.
The bounded knapsack problem (BKP) removes the restriction that there is only one of each item, but restricts the number 
 
 
 
 
  of copies of each kind of item to an integer value 
 
 
 
 :

maximize 
 
 

subject to 
 
 
 
  and 
 
 


The unbounded knapsack problem (UKP) places no upper bound on the number of copies of each kind of item and can be formulated as above except for that the only restriction on 
 
 
 
 
  is that it is a non-negative integer.

maximize 
 
 

subject to 
 
 
 
  and 
 
 


One example of the unbounded knapsack problem is given using the figure shown at the beginning of this article and the text "if any number of each box is available" in the caption of that figure.
Computational complexity
The knapsack problem is interesting from the perspective of computer science for many reasons:

The decision problem form of the knapsack problem (''Can a value of at least V be achieved without exceeding the weight W?'') is NP-complete, thus there is no possible algorithm both correct and fast (polynomial-time) on all cases, unless P=NP.
While the decision problem is NP-complete, the optimization problem is NP-hard, its resolution is at least as difficult as the decision problem, and there is no known polynomial algorithm which can tell, given a solution, whether it is optimal (which would mean that there is no solution with a larger V, thus solving the decision problem NP-complete).
There is a pseudo-polynomial time algorithm using dynamic programming.
There is a fully polynomial-time approximation scheme, which uses the pseudo-polynomial time algorithm as a subroutine, described below.
Many cases that arise in practice, and "random instances" from some distributions, can nonetheless be solved exactly.

There is a link between the "decision" and "optimization" problems in that if there exists a polynomial algorithm that solves the "decision" problem, then one can find the maximum value for the optimization problem in polynomial time by applying this algorithm iteratively while increasing the value of k . On the other hand, if an algorithm finds the optimal value of optimization problem in polynomial time, then the decision problem can be solved in polynomial time by comparing the value of the solution output by this algorithm with the value of k . Thus, both versions of the problem are of similar difficulty.
One theme in research literature is to identify what the "hard" instances of the knapsack problem look like,1011 or viewed another way, to identify what properties of instances in practice might make them more amenable than their worst-case NP-complete behaviour suggests.12 The goal in finding these "hard" instances is for their use in public key cryptography systems, such as the Merkle-Hellman knapsack cryptosystem.
Solving
Several algorithms are available to solve knapsack problems, based on dynamic programming approach,13 branch and bound approach14 or hybridizations of both approaches.15161718
Dynamic programming in advance algorithm
Unbounded knapsack problem
If all weights (
 
 
 
 ) are nonnegative integers, the knapsack problem can be solved in pseudo-polynomial time using dynamic programming. The following describes a dynamic programming solution for the unbounded knapsack problem.
To simplify things, assume all weights are strictly positive (wi > 0). We wish to maximize total value subject to the constraint that total weight is less than or equal to W. Then for each w ≤ W, define m[w] to be the maximum value that can be attained with total weight less than or equal to w. m[W] then is the solution to the problem.
Observe that m[w] has the following properties:



 
 
  (the sum of zero items, i.e., the summation of the empty set)




where 
 
 
 
  is the value of the i-th kind of item.
(To formulate the equation above, the idea used is that the solution for a knapsack is the same as the value of one correct item plus the solution for a knapsack with smaller capacity, specifically one with the capacity reduced by the weight of that chosen item.)
Here the maximum of the empty set is taken to be zero. Tabulating the results from 
 
 
 
  up through 
 
 
 
  gives the solution. Since the calculation of each 
 
 
 
 
  involves examining 
 
 
 
  items, and there are 
 
 
 
  values of 
 
 
 
  to calculate, the running time of the dynamic programming solution is 

. Dividing 
 
 
 
 
  by their greatest common divisor is a way to improve the running time.
The 
 
 
 
  complexity does not contradict the fact that the knapsack problem is NP-complete, since 
 
 
 
 , unlike 
 
 
 
 , is not polynomial in the length of the input to the problem. The length of the 
 
 
 
  input to the problem is proportional to the number of bits in 
 
 
 
 
 , 
 
 
 
 , not to 
 
 
 
  itself.
0/1 knapsack problem
A similar dynamic programming solution for the 0/1 knapsack problem also runs in pseudo-polynomial time. Assume 
 
 
 
  are strictly positive integers. Define 
 
 
 
  to be the maximum value that can be attained with weight less than or equal to 
 
 
 
 
  using items up to 
 
 
 
  (first 
 
 
 
  items).
We can define 
 
 
 
  recursively as follows:



 
  if 
 
 
 
 
  (the new item is more than the current weight limit)


 
  if 
 
 
 
 .

The solution can then be found by calculating 
 
 
 
 . To do this efficiently we can use a table to store previous computations.
The following is pseudo code for the dynamic program:
// Input:
// Values (stored in array v)
// Weights (stored in array w)
// Number of distinct items (n)
// Knapsack capacity (W)
for j from 0 to W do
  m[0, j] := 0
end for 
for i from 1 to n do
  for j from 0 to W do
    if w[i] O(nW) time and 

 space.  Additionally, if we use only a 1-dimensional array 

 to store the current optimal values and pass over this array 

 times, rewriting from 

 to 

 every time, we get the same result for only 

 space.
Meet-in-the-middle
Another algorithm for 0-1 knapsack, discovered in 1974 19 and sometimes called "meet-in-the-middle" due to parallels to a similarly named algorithm in cryptography, is exponential in the number of different items but may be preferable to the DP algorithm when 
 
 
 
 
  is large compared to n. In particular, if the 
 
 
 
  are nonnegative but not integers, we could still use the dynamic programming algorithm by scaling and rounding (i.e. using fixed-point arithmetic), but if the problem requires 
 
 
 
  fractional digits of precision to arrive at the correct answer, 
 
 
 
  will need to be scaled by 
 
 
 
 , and the DP algorithm will require 
 
 
 
 
  space and 
 
 
 
  time.

'' Meet-in-the-middle algorithm
 

  input: 
    a set of items with weights and values
  output: 
    the greatest combined value of a subset
  partition the set {1...n} into two sets A and B of approximately equal size
  compute the weights and values of all subsets of each set
  for each subset of A
    find the subset of B of greatest value such that the combined weight is less than W
  keep track of the greatest combined value seen so far
The algorithm takes 
 
 
 
  space, and efficient implementations of step 3 (for instance, sorting the subsets of B by weight, discarding subsets of B which weigh more than other subsets of B of greater or equal value, and using binary search to find the best match) result in a runtime of 
 
 
 
 . As with the meet in the middle attack in cryptography, this improves on the 
 
 
 
  runtime of a naive brute force approach (examining all subsets of {1...n}), at the cost of using exponential rather than constant space (see also baby-step giant-step).
Approximation algorithms
As for most NP-complete problems, it may be enough to find workable solutions even if they are not optimal. Preferably, however, the approximation comes with a guarantee on the difference between the value of the solution found and the value of the optimal solution.
As with many useful but computationally complex algorithms, there has been substantial research on creating and analyzing algorithms that approximate a solution. The knapsack problem, though NP-Hard, is one of a collection of algorithms that can still be approximated to any specified degree. This means that the problem has a polynomial time approximation scheme. To be exact, the knapsack problem has a fully polynomial time approximation scheme (FPTAS).20
Greedy approximation algorithm
George Dantzig proposed a greedy approximation algorithm to solve the unbounded knapsack problem.21 His version sorts the items in decreasing order of value per unit of weight, 
 
 
 
 
 . It then proceeds to insert them into the sack, starting with as many copies as possible of the first kind of item until there is no longer space in the sack for more. Provided that there is an unlimited supply of each kind of item, if 
 
 
 
  is the maximum value of items that fit into the sack, then the greedy algorithm is guaranteed to achieve at least a value of 
 
 
 
 . However, for the bounded problem, where the supply of each kind of item is limited, the algorithm may be far from optimal.
Fully polynomial time approximation scheme
The fully polynomial time approximation scheme (FPTAS) for the knapsack problem takes advantage of the fact that the reason the problem has no known polynomial time solutions is because the profits associated with the items are not restricted. If one rounds off some of the least significant digits of the profit values then they will be bounded by a polynomial and 1/ε where ε is a bound on the correctness of the solution. This restriction then means that an algorithm can find a solution in polynomial time that is correct within a factor of (1-ε) of the optimal solution.22

'' An Algorithm for FPTAS
 

 input: 
   ε ∈ [0,1]
   a list A of n items, specified by their values, 

, and weights
 output:
   S' the FPTAS solution
 P := max 

  // the highest item value
 K := εP/n
 for i from 1 to n do
    

 := ⌊

/K⌋
 end for
 return the solution, S', using the 

 values in the dynamic program outlined above
Theorem: The set 
 
 
 
  computed by the algorithm above satisfies 
 
 
 
 , where 
 
 
 
 
  is an optimal solution.
Dominance relations
Solving the unbounded knapsack problem can be made easier by throwing away items which will never be needed. For a given item i, suppose we could find a set of items J such that their total weight is less than the weight of i, and their total value is greater than the value of i. Then i cannot appear in the optimal solution, because we could always improve any potential solution containing i by replacing i with the set J. Therefore we can disregard the i-th item altogether. In such cases, J is said to dominate i. (Note that this does not apply to bounded knapsack problems, since we may have already used up the items in J.)
Finding dominance relations allows us to significantly reduce the size of the search space. There are several different types of dominance relations,23 which all satisfy an inequality of the form:


 
 , and 
 
 
 
  for some 
 
 

where 
 
 
 
  and 
 
 
 
 
 . The vector 
 
 
 
  denotes the number of copies of each member of J.

Collective dominance: The i-th item is collectively dominated by J, written as 
 
 
 
 , if the total weight of some combination of items in J is less than wi and their total value is greater than vi. Formally, 
 
 
 
  and 
 
 
 
  for some 
 
 
 
 
 , i.e. 
 
 
 
 . Verifying this dominance is computationally hard, so it can only be used with a dynamic programming approach. In fact, this is equivalent to solving a smaller knapsack decision problem where2 V = vi, W = wi, and the items are restricted to J.
 Threshold dominance: The i-th item is threshold dominated by J, written as 
 
 
 
 , if some number of copies of i are dominated by J. Formally, 
 
 
 
 , and 
 
 
 
  for some 
 
 
 
 
  and 
 
 
 
 . This is a generalization of collective dominance, first introduced in24 and used in the EDUK algorithm. The smallest such 
 
 
 
  defines the threshold of the item i, written 
 
 
 
 . In this case, the optimal solution could contain at most 
 
 
 
  copies of i.
 Multiple dominance: The i-th item is multiply dominated by a single item j, written as 
 
 
 
 
 , if i is dominated by some number of copies of j. Formally, 
 
 
 
 , and 
 
 
 
  for some 
 
 
 
  i.e. 
 
 
 
 . This dominance could be efficiently used during preprocessing because it can be detected relatively easily.
 Modular dominance: Let b be the best item, i.e. 
 
 
 
 
  for all i. This is the item with the greatest density of value. The i-th item is modularly dominated by a single item j, written as 
 
 
 
 , if i is dominated by j plus several copies of b. Formally, 
 
 
 
 , and 
 
 
 
  i.e. 
 
 
 
 .

Variations
There are many variations of the knapsack problem that have arisen from the vast number of applications of the basic problem. The main variations occur by changing the number of some problem parameter such as the number of items, number of objectives, or even the number of knapsacks.
Multi-objective knapsack problem
This variation changes the goal of the individual filling the knapsack. Instead of one objective, such as maximizing the monetary profit, the objective could have several dimensions. For example there could be environmental or social concerns as well as economic goals. Problems frequently addressed include portfolio and transportation logistics optimizations 2526
As a concrete example, suppose you ran a cruise ship. You have to decide how many famous comedians to hire. This boat can handle no more than one ton of passengers and the entertainers must weigh less than 1000 lbs. Each comedian has a weight, brings in business based on their popularity and asks for a specific salary. In this example you have multiple objectives. You want, of course, to maximize the popularity of your entertainers while minimizing their salaries. Also, you want to have as many entertainers as possible.
Multi-dimensional knapsack problem
In this variation, the weight of knapsack item 
 
 
 
 
  is given by a D-dimensional vector 
 
 
 
  and the knapsack has a D-dimensional capacity vector 
 
 
 
 . The target is to maximize the sum of the values of the items in the knapsack so that the sum of weights in each dimension 
 
 
 
  does not exceed 
 
 
 
 .
Multi-dimensional knapsack is computationally harder than knapsack; even for 
 
 
 
 
 , the problem does not have EPTAS unless P
 
 
 
 NP.27 However, the algorithm in 28 is shown to solve sparse instances efficiently. An instance of multi-dimensional knapsack is sparse if there is a set 
 
 
 
  for 
 
 
 
 , 
 
 
 
  such that 
 
 
 
 
  and 
 
 
 
 . Such instances occur, for example, when scheduling packets in a wireless network with relay nodes.29 The algorithm from 30 also solves sparse instances of the multiple choice variant, multiple-choice multi-dimensional knapsack.
Multiple knapsack problem
This variation is similar to the Bin Packing Problem. It differs from the Bin Packing Problem in that a subset of items can be selected, whereas, in the Bin Packing Problem, all items have to be packed to certain bins. The concept is that there are multiple knapsacks. This may seem like a trivial change, but it is not equivalent to adding to the capacity of the initial knapsack. This variation is used in many loading and scheduling problems in Operations Research and has a PTAS31
Quadratic knapsack problem
As described by Wu et al.:

The quadratic knapsack problem (QKP) maximizes a quadratic objective function subject to a binary and linear capacity constraint.32

The quadratic knapsack problem was discussed under that title by Gallo, Hammer, and Simeone in 1980.33 However, Gallo and Simeone34 attribute the first treatment of the problem to Witzgall35 in 1975.
Subset-sum problem
The subset sum problem, is a special case of the decision and 0-1 problems where each kind of item, the weight equals the value$$w_i=v_i$$. In the field of cryptography, the term knapsack problem is often used to refer specifically to the subset sum problem and is commonly known as one of Karp's 21 NP-complete problems.36
The generalization of subset sum problem is called multiple subset-sum problem, in which multiple bins exist with the same capacity. It has been shown that the generalization does not have an FPTAS.37
Software




Name

License

Brief info





PAAL

BOOST LICENSE

Approximation algorithms library containing generic and efficient implementations of various knapsack algorithms including: dynamic algorithm, greedy (2-approximation) and FPTAS. The above algorithms are implemented for both 0/1 and unbounded versions of the problem.38



OpenOpt

BSD

Free Python language framework that can use either free or commercial MILP and other solvers to solve knapsack problems, possibly constrained, nonlinear and multiobjective.3940



adagio

GPL

The R's CRAN package adagio provides methods and algorithms for discrete optimization and (evolutionary) global optimization.41



Algorithm::Knapsack

Perl 5

[https://metacpan.org/pod/Algorithm::Knapsack Algorithm::Knapsack] is a simple Perl module that solves 0/1 versions of the knapsack problem.42



Popular culture

Neal Stephenson provides an example of the knapsack problem in chapter 70 of his novel, Cryptonomicon, to distribute family heirlooms.
The knapsack problem occurs commonly in role-playing games, both digital and paper-based (prominent examples include The Elder Scrolls series and the Dungeons and Dragons game, respectively), where the player character is constrained by their encumbrance threshold when carrying items and treasure, which regularly forces the player to evaluate the items' value-to-weight ratio in order to bring only the most valuable items to a merchant.

See also

Change-making problem
Combinatorial auction
Combinatorial optimization
Continuous knapsack problem
Cutting stock problem
List of knapsack problems
Packing problem

Notes
References


A6: MP9, pg.247.




External links

Lecture slides on the knapsack problem
PYAsUKP: Yet Another solver for the Unbounded Knapsack Problem, with code taking advantage of the dominance relations in an hybrid algorithm, benchmarks and downloadable copies of some papers.
Home page of David Pisinger with downloadable copies of some papers on the publication list (including "Where are the hard knapsack problems?")
Knapsack Problem solutions in many languages at Rosetta Code
Dynamic Programming algorithm to 0/1 Knapsack problem
Knapsack Problem solver (online)
Interactive JavaScript branch-and-bound solver
Solving 0-1-KNAPSACK with Genetic Algorithms in Ruby
Codes for Quadratic Knapsack Problem

"
Category:Cryptography Category:Packing problems Category:NP-complete problems Category:Operations research Category:Dynamic programming Category:Combinatorial optimization Category:Weakly NP-complete problems Category:Pseudo-polynomial time algorithms




Dantzig, Tobias. Numbers: The Language of Science, 1930.
Kellerer, Pferschy, and Pisinger 2004, p. 3

Kellerer, Pferschy, and Pisinger 2004, p. 449
Kellerer, Pferschy, and Pisinger 2004, p. 461
Kellerer, Pferschy, and Pisinger 2004, p. 465
Kellerer, Pferschy, and Pisinger 2004, p. 472

Pisinger, D. 2003. Where are the hard knapsack problems? Technical Report 2003/08, Department of Computer Science, University of Copenhagen, Copenhagen, Denmark.

Vincent Poirriez, Nicola Yanev, Rumen Andonov (2009) A Hybrid Algorithm for the Unbounded Knapsack Problem Discrete Optimization 

S. Martello, P. Toth, Knapsack Problems: Algorithms and Computer Implementation, John Wiley and Sons, 1990

S. Martello, D. Pisinger, P. Toth, Dynamic programming and strong bounds for the 0-1 knapsack problem, Manag. Sci., 45:414–424, 1999.



Vazirani, Vijay. Approximation Algorithms. Springer-Verlag Berlin Heidelberg, 2003.


Vincent Poirriez, Nicola Yanev, Rumen Andonov (2009) A Hybrid Algorithm for the Unbounded Knapsack Problem, section 2: Discrete Optimization 

Chang, T. J., et al. Heuristics for Cardinality Constrained Portfolio Optimization. Technical Report, London SW7 2AZ, England: The Management School, Imperial College, May 1998
Chang, C. S., et al. "Genetic Algorithm Based Bicriterion Optimization for Traction Substations in DC Railway System." In Fogel [102], 11-16.

Cohen, R. and Grebla, G. 2014. "Multi-Dimensional OFDMA Scheduling in a Wireless Network with Relay Nodes". in Proc. IEEE INFOCOM’14, 2427–2435.


Chandra Chekuri and Sanjeev Khanna. 2000. A PTAS for the multiple knapsack problem. In Proceedings of the eleventh annual ACM-SIAM symposium on Discrete algorithms (SODA '00). Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 213-222.




Richard M. Karp (1972). "Reducibility Among Combinatorial Problems". In R. E. Miller and J. W. Thatcher (editors). Complexity of Computer Computations. New York: Plenum. pp. 85–103










