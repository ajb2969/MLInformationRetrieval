   Suffix array      Suffix array  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     {| class="infobox" style="width: 22em" ! Suffix array |- ! Type | Array |- ! Invented by   |   normal-|   |   Manber|Myers|1990}}  |- ! Time complexity in big O notation |- | | Average | Worst case |- ! Space |    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   |    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   |- ! Construction |    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   |    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   |}  In computer science , a suffix array is a sorted array of all suffixes of a string . It is a data structure used, among others, in full text indices, data compression algorithms and within the field of bioinformatics .  Suffix arrays were introduced by  as a simple, space efficient alternative to suffix trees . They have independently been discovered by  under the name PAT array .  Definition  Let    S  =   S   [  1  ]   S   [  2  ]   …  S   [  n  ]        S    S   delimited-[]  1   S   delimited-[]  2   normal-…  S   delimited-[]  n      S=S[1]S[2]...S[n]   be a string and let    S   [  i  ,  j  ]       S   i  j     S[i,j]   denote the substring of   S   S   S   ranging from   i   i   i   to   j   j   j   .  The suffix array   A   A   A   of   S   S   S   is now defined to be an array of integers providing the starting positions of suffixes of   S   S   S   in lexicographical order . This means, an entry    A   [  i  ]       A   delimited-[]  i     A[i]   contains the starting position of the   i   i   i   -th smallest suffix in   S   S   S   and thus for all    1  <  i  ≤  n        1  i       n     1        S   [   A   [   i  -  1   ]    ,  n  ]    <   S   [   A   [  i  ]    ,  n  ]          S     A   delimited-[]    i  1     n      S     A   delimited-[]  i    n      S[A[i-1],n]   .  Example  Consider the text   S   S   S   = banana$ to be indexed:      | i   1   2   3   4   5   6   7       |    S   [  i  ]       S   delimited-[]  i     S[i]      b   a   n   a   n   a   $     The text ends with the special sentinel letter $ that is unique and lexicographically smaller than any other character. The text has the following suffixes:      Suffix   i       banana$   1     anana$   2     nana$   3     ana$   4     na$   5     a$   6     $   7     These suffixes can be sorted in ascending order:      Suffix   i       $   7     a$   6     ana$   4     anana$   2     banana$   1     na$   5     nana$   3     The suffix array   A   A   A   contains the starting positions of these sorted suffixes:      | i   1   2   3   4   5   6   7       |    A   [  i  ]       A   delimited-[]  i     A[i]      7   6   4   2   1   5   3     The suffix array with the suffixes written out vertically underneath for clarity:      | i   1   2   3   4   5   6   7       |    A   [  i  ]       A   delimited-[]  i     A[i]      7   6   4   2   1   5   3     | 1   $   a   a   a   b   n   n     | 2    $   n   n   a   a   a     | 3     a   a   n   $   n     | 4     $   n   a    a     | 5      a   n    $     | 6      $   a       | 7       $       So for example,    A   [  3  ]       A   delimited-[]  3     A[3]   contains the value 4, and therefore refers to the suffix starting at position 4 within   S   S   S   , which is the suffix ana$ .  Correspondence to suffix trees  Suffix arrays are closely related to suffix trees :   Suffix arrays can be constructed by performing a depth-first traversal of a suffix tree. The suffix array corresponds to the leaf-labels given in the order in which these are visited during the traversal, if edges are visited in the lexicographical order of their first character.  A suffix tree can be constructed in linear time by using a combination of suffix and LCP array . For a description of the algorithm, see the corresponding section in the LCP array article.   It has been shown that every suffix tree algorithm can be systematically replaced with an algorithm that uses a suffix array enhanced with additional information (such as the LCP array ) and solves the same problem in the same time complexity. Advantages of suffix arrays over suffix trees include improved space requirements, simpler linear time construction algorithms (e.g., compared to Ukkonen's algorithm ) and improved cache locality.  Space Efficiency  Suffix arrays were introduced by  in order to improve over the space requirements of suffix trees : Suffix arrays store   n   n   n   integers. Assuming an integer requires   4   4   4   bytes, a suffix array requires    4  n      4  n    4n   bytes in total. This is significantly less than the    20  n      20  n    20n   bytes which are required by a careful suffix tree implementation.  However, in certain applications, the space requirements of suffix arrays may still be prohibitive. Analyzed in bits, a suffix array requires    𝒪   (   n   log  n    )       𝒪    n    n      \mathcal{O}(n\log n)   space, whereas the original text over an alphabet of size   σ   σ   \sigma   only requires    𝒪   (   n   log  σ    )       𝒪    n    σ      \mathcal{O}(n\log\sigma)   bits. For a human genome with    σ  =  4      σ  4    \sigma=4   and    n  =   3.4  ×   10  9        n    3.4   superscript  10  9      n=3.4\times 10^{9}   the suffix array would therefore occupy about 16 times more memory than the genome itself.  Such discrepancies motivated a trend towards compressed suffix arrays and BWT -based compressed full-text indices such as the FM-index . These data structures require only space within the size of the text or even less.  Construction Algorithms  A suffix tree can be built in    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   and can be converted into a suffix array by traversing the tree depth-first also in    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   , so there exist algorithms that can build a suffix array in    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   .  A naive approach to construct a suffix array is to use a comparison-based sorting algorithm . These algorithms require    𝒪   (   n   log  n    )       𝒪    n    n      \mathcal{O}(n\log n)   suffix comparisons, but a suffix comparison runs in    𝒪   (  n  )       𝒪  n    \mathcal{O}(n)   time, so the overall runtime of this approach is    𝒪   (    n  2    log  n    )       𝒪     superscript  n  2     n      \mathcal{O}(n^{2}\log n)   .  More advanced algorithms take advantage of the fact that the suffixes to be sorted are not arbitrary strings but related to each other. These algorithms strive to achieve the following goals:   minimal asymptotic complexity    Θ   (  n  )       normal-Θ  n    \Theta(n)     lightweight in space, meaning little or no working memory beside the text and the suffix array itself is needed  fast in practice   One of the first algorithms to achieve all goals is the SA-IS algorithm of . The algorithm is also rather simple (n and general alphabets where only character comparisons are allowed.  Most suffix array construction algorithms are based on one of the following approaches:   Prefix doubling algorithms are based on a strategy of . The idea is to find prefixes that honor the lexicographic ordering of suffixes. The assessed prefix length doubles in each iteration of the algorithm until a prefix is unique and provides the rank of the associated suffix.  Recursive algorithms follow the approach of the suffix tree construction algorithm by  to recursively sort a subset of suffixes. This subset is then used to infer a suffix array of the remaining suffixes. Both of these suffix arrays are then merged to compute the final suffix array.  Induced copying algorithms are similar to recursive algorithms in the sense that they use an already sorted subset to induce a fast sort of the remaining suffixes. The difference is that these algorithms favor iteration over recursion to sort the selected suffix subset. A survey of this diverse group of algorithms has been put together by .   A well-known recursive algorithm for integer alphabets is the DC3 / skew algorithm of . It runs in linear time and has successfully been used as the basis for parallel and external memory suffix array construction algorithms.  Recent work by  proposes an algorithm for updating the suffix array of a text that has been edited instead of rebuilding a new suffix array from scratch. Even if the theoretical worst-case time complexity is    𝒪   (   n   log  n    )       𝒪    n    n      \mathcal{O}(n\log n)   , it appears to perform well in practice: experimental results from the authors showed that their implementation of dynamic suffix arrays is generally more efficient than rebuilding when considering the insertion of a reasonable number of letters in the original text.  Applications  The suffix array of a string can be used as an index to quickly locate every occurrence of a substring pattern   P   P   P   within the string   S   S   S   . Finding every occurrence of the pattern is equivalent to finding every suffix that begins with the substring. Thanks to the lexicographical ordering, these suffixes will be grouped together in the suffix array and can be found efficiently with two binary searches . The first search locates the starting position of the interval, and the second one determines the end position:   def search(P):
         l =  0 ; r = n while l < r:
             mid = (l + r) /  2  if P > suffixAt(A[mid]):
                 l = mid +  1  else :
                 r = mid
         s = l ; r = n while l < r:
             mid = (l + r) /  2  if P < suffixAt(A[mid]):
                 r = mid else :
                 l = mid +  1  return (s, r)  Finding the substring pattern   P   P   P   of length   m   m   m   in the string   S   S   S   of length   n   n   n   takes    𝒪   (   m   log  n    )       𝒪    m    n      \mathcal{O}(m\log n)   time, given that a single suffix comparison needs to compare   m   m   m   characters.  describe how this bound can be improved to    𝒪   (   m  +   log  n    )       𝒪    m    n      \mathcal{O}(m+\log n)   time using LCP information. The idea is that a pattern comparison does not need to re-compare certain characters, when it is already known that these are part of the longest common prefix of the pattern and the current search interval.  improve the bound even further and achieve a search time of    𝒪   (  m  )       𝒪  m    \mathcal{O}(m)   as known from suffix trees .  Suffix sorting algorithms can be used to compute the Burrows–Wheeler transform (BWT) . The BWT requires sorting of all cyclic permutations of a string. If this string ends in a special end-of-string character that is lexicographically smaller than all other character (i.e., $), then the order of the sorted rotated BWT matrix corresponds to the order of suffixes in a suffix array. The BWT can therefore be computed in linear time by first constructing a suffix array of the text and then deducing the BWT string     B  W  T   [  i  ]    =   S   [    A   [  i  ]    -  1   ]          B  W  T   delimited-[]  i      S   delimited-[]      A   delimited-[]  i    1       BWT[i]=S[A[i]-1]   .  Suffix arrays can also be used to look up substrings in Example-Based Machine Translation , demanding much less storage than a full phrase table as used in Statistical machine translation .  Many additional applications of the suffix array require the LCP array . Some of these are detailed in the application section of the latter.  Notes  References                    External links   Suffix Array in Java  Suffix sorting module for BWT in C code  Suffix Array Implementation in Ruby  Suffix array library and tools  Project containing various Suffix Array c/c++ Implementations with a unified interface  A fast, lightweight, and robust C API library to construct the suffix array  Suffix Array implementation in Python  Linear Time Suffix Array implementation in C using suffix tree   "  Category:Arrays  Category:Substring indices  Category:String data structures  