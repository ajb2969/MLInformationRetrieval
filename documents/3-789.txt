   Prenex normal form      Prenex normal form   A formula of the predicate calculus is in prenex 1  normal form if it is written as a string of quantifiers (referred to as the prefix ) followed by a quantifier-free part (referred to as the matrix ).  Every formula in classical logic is equivalent to a formula in prenex normal form. For example, if    ϕ   (  y  )       ϕ  y    \phi(y)   ,    ψ   (  z  )       ψ  z    \psi(z)   , and    ρ   (  x  )       ρ  x    \rho(x)   are quantifier-free formulas with the free variables shown then      ∀  x  ∃  y  ∀  z   (  ϕ   (  y  )   ∨   (  ψ   (  z  )   →  ρ   (  x  )   )   )      fragments  for-all  x   y  for-all  z   fragments  normal-(  ϕ   fragments  normal-(  y  normal-)     fragments  normal-(  ψ   fragments  normal-(  z  normal-)   normal-→  ρ   fragments  normal-(  x  normal-)   normal-)   normal-)     \forall x\exists y\forall z(\phi(y)\lor(\psi(z)\rightarrow\rho(x)))   is in prenex normal form with matrix    ϕ   (  y  )   ∨   (  ψ   (  z  )   →  ρ   (  x  )   )      fragments  ϕ   fragments  normal-(  y  normal-)     fragments  normal-(  ψ   fragments  normal-(  z  normal-)   normal-→  ρ   fragments  normal-(  x  normal-)   normal-)     \phi(y)\lor(\psi(z)\rightarrow\rho(x))   , while      ∀  x   (   (  ∃  y  ϕ   (  y  )   )   ∨   (   (  ∃  z  ψ   (  z  )   )   →  ρ   (  x  )   )   )      fragments  for-all  x   fragments  normal-(   fragments  normal-(   y  ϕ   fragments  normal-(  y  normal-)   normal-)     fragments  normal-(   fragments  normal-(   z  ψ   fragments  normal-(  z  normal-)   normal-)   normal-→  ρ   fragments  normal-(  x  normal-)   normal-)   normal-)     \forall x((\exists y\phi(y))\lor((\exists z\psi(z))\rightarrow\rho(x)))   is logically equivalent but not in prenex normal form.  Conversion to prenex form  Every first-order formula is logically equivalent (in classical logic) to some formula in prenex normal form. There are several conversion rules that can be recursively applied to convert a formula to prenex normal form. The rules depend on which logical connectives appear in the formula.  Conjunction and disjunction  The rules for conjunction and disjunction say that       (   ∀   x  ϕ    )   ∧  ψ       for-all    x  ϕ    ψ    (\forall x\phi)\land\psi   is equivalent to    ∀   x   (   ϕ  ∧  ψ   )       for-all    x    ϕ  ψ      \forall x(\phi\land\psi)   ,       (   ∀   x  ϕ    )   ∨  ψ       for-all    x  ϕ    ψ    (\forall x\phi)\lor\psi   is equivalent to    ∀   x   (   ϕ  ∨  ψ   )       for-all    x    ϕ  ψ      \forall x(\phi\lor\psi)   ; and       (   ∃   x  ϕ    )   ∧  ψ          x  ϕ    ψ    (\exists x\phi)\land\psi   is equivalent to    ∃   x   (   ϕ  ∧  ψ   )          x    ϕ  ψ      \exists x(\phi\land\psi)   ,       (   ∃   x  ϕ    )   ∨  ψ          x  ϕ    ψ    (\exists x\phi)\lor\psi   is equivalent to    ∃   x   (   ϕ  ∨  ψ   )          x    ϕ  ψ      \exists x(\phi\lor\psi)   . The equivalences are valid when x does not appear as a free variable of ψ; if x does appear free in ψ, it must be replaced with another free variable.  For example, in the language of rings ,       (  ∃  x   (   x  2   =  1  )   )   ∧   (  0  =  y  )      fragments   fragments  normal-(   x   fragments  normal-(   superscript  x  2    1  normal-)   normal-)     fragments  normal-(  0   y  normal-)     (\exists x(x^{2}=1))\land(0=y)   is equivalent to    ∃  x   (   x  2   =  1  ∧  0  =  y  )      fragments   x   fragments  normal-(   superscript  x  2    1   0   y  normal-)     \exists x(x^{2}=1\land 0=y)   , but       (  ∃  x   (   x  2   =  1  )   )   ∧   (  0  =  x  )      fragments   fragments  normal-(   x   fragments  normal-(   superscript  x  2    1  normal-)   normal-)     fragments  normal-(  0   x  normal-)     (\exists x(x^{2}=1))\land(0=x)   is not equivalent to    ∃  x   (   x  2   =  1  ∧  0  =  x  )      fragments   x   fragments  normal-(   superscript  x  2    1   0   x  normal-)     \exists x(x^{2}=1\land 0=x)   because the formula on the left is true in any ring when the free variable x is equal to 0, while the formula on the right has no free variables and is false in any nontrivial ring.  Negation  The rules for negation say that      ¬   ∃   x  ϕ             x  ϕ      \lnot\exists x\phi   is equivalent to    ∀   x  ¬  ϕ      for-all    x   ϕ     \forall x\lnot\phi   and      ¬   ∀   x  ϕ          for-all    x  ϕ      \lnot\forall x\phi   is equivalent to    ∃   x  ¬  ϕ         x   ϕ     \exists x\lnot\phi   .  Implication  There are four rules for implication: two that remove quantifiers from the antecedent and two that remove quantifiers from the consequent. These rules can be derived by rewriting the implication    ϕ  →  ψ     normal-→  ϕ  ψ    \phi\rightarrow\psi   as     ¬  ϕ   ∨  ψ         ϕ   ψ    \lnot\phi\lor\psi   and applying the rules for disjunction above. As with the rules for disjunction, these rules require that the variable quantified in one subformula does not appear free in the other subformula.  The rules for removing quantifiers from the antecedent are:       (   ∀   x  ϕ    )   →  ψ     normal-→   for-all    x  ϕ    ψ    (\forall x\phi)\rightarrow\psi   is equivalent to    ∃  x   (  ϕ  →  ψ  )      fragments   x   fragments  normal-(  ϕ  normal-→  ψ  normal-)     \exists x(\phi\rightarrow\psi)   ,       (   ∃   x  ϕ    )   →  ψ     normal-→      x  ϕ    ψ    (\exists x\phi)\rightarrow\psi   is equivalent to    ∀  x   (  ϕ  →  ψ  )      fragments  for-all  x   fragments  normal-(  ϕ  normal-→  ψ  normal-)     \forall x(\phi\rightarrow\psi)   . The rules for removing quantifiers from the consequent are:      ϕ  →   (   ∃   x  ψ    )      normal-→  ϕ      x  ψ      \phi\rightarrow(\exists x\psi)   is equivalent to    ∃  x   (  ϕ  →  ψ  )      fragments   x   fragments  normal-(  ϕ  normal-→  ψ  normal-)     \exists x(\phi\rightarrow\psi)   ,      ϕ  →   (   ∀   x  ψ    )      normal-→  ϕ   for-all    x  ψ      \phi\rightarrow(\forall x\psi)   is equivalent to    ∀  x   (  ϕ  →  ψ  )      fragments  for-all  x   fragments  normal-(  ϕ  normal-→  ψ  normal-)     \forall x(\phi\rightarrow\psi)   .  Example  Suppose that   ϕ   ϕ   \phi   ,   ψ   ψ   \psi   , and   ρ   ρ   \rho   are quantifier-free formulas and no two of these formulas share any free variable. Consider the formula       (   ϕ  ∨   ∃   x  ψ     )   →   ∀   z  ρ       normal-→    ϕ      x  ψ      for-all    z  ρ      (\phi\lor\exists x\psi)\rightarrow\forall z\rho   . By recursively applying the rules starting at the innermost subformulas, the following sequence of logically equivalent formulas can be obtained:       (   ϕ  ∨   ∃   x  ψ     )   →   ∀   z  ρ       normal-→    ϕ      x  ψ      for-all    z  ρ      (\phi\lor\exists x\psi)\rightarrow\forall z\rho   .       (   ∃   x   (   ϕ  ∨  ψ   )     )   →   ∀   z  ρ       normal-→      x    ϕ  ψ      for-all    z  ρ      (\exists x(\phi\lor\psi))\rightarrow\forall z\rho   ,       ¬   (   ∃   x   (   ϕ  ∨  ψ   )     )    ∨   ∀   z  ρ              x    ϕ  ψ       for-all    z  ρ      \neg(\exists x(\phi\lor\psi))\lor\forall z\rho   ,       (   ∀   x   ¬   (   ϕ  ∨  ψ   )      )   ∨   ∀   z  ρ         for-all    x      ϕ  ψ       for-all    z  ρ      (\forall x\neg(\phi\lor\psi))\lor\forall z\rho   ,      ∀   x   (    ¬   (   ϕ  ∨  ψ   )    ∨   ∀   z  ρ     )       for-all    x        ϕ  ψ     for-all    z  ρ        \forall x(\neg(\phi\lor\psi)\lor\forall z\rho)   ,      ∀  x   (   (  ϕ  ∨  ψ  )   →  ∀  z  ρ  )      fragments  for-all  x   fragments  normal-(   fragments  normal-(  ϕ   ψ  normal-)   normal-→  for-all  z  ρ  normal-)     \forall x((\phi\lor\psi)\rightarrow\forall z\rho)   ,      ∀  x   (  ∀  z   (   (  ϕ  ∨  ψ  )   →  ρ  )   )      fragments  for-all  x   fragments  normal-(  for-all  z   fragments  normal-(   fragments  normal-(  ϕ   ψ  normal-)   normal-→  ρ  normal-)   normal-)     \forall x(\forall z((\phi\lor\psi)\rightarrow\rho))   ,      ∀  x  ∀  z   (   (  ϕ  ∨  ψ  )   →  ρ  )      fragments  for-all  x  for-all  z   fragments  normal-(   fragments  normal-(  ϕ   ψ  normal-)   normal-→  ρ  normal-)     \forall x\forall z((\phi\lor\psi)\rightarrow\rho)   . This is not the only prenex form equivalent to the original formula. For example, by dealing with the consequent before the antecedent in the example above, the prenex form      ∀  z  ∀  x   (   (  ϕ  ∨  ψ  )   →  ρ  )      fragments  for-all  z  for-all  x   fragments  normal-(   fragments  normal-(  ϕ   ψ  normal-)   normal-→  ρ  normal-)     \forall z\forall x((\phi\lor\psi)\rightarrow\rho)   can be obtained:      ∀  z   (   (  ϕ  ∨  ∃  x  ψ  )   →  ρ  )      fragments  for-all  z   fragments  normal-(   fragments  normal-(  ϕ    x  ψ  normal-)   normal-→  ρ  normal-)     \forall z((\phi\lor\exists x\psi)\rightarrow\rho)         ∀  z   (   (  ∃  x   (  ϕ  ∨  ψ  )   )   →  ρ  )      fragments  for-all  z   fragments  normal-(   fragments  normal-(   x   fragments  normal-(  ϕ   ψ  normal-)   normal-)   normal-→  ρ  normal-)     \forall z((\exists x(\phi\lor\psi))\rightarrow\rho)   ,      ∀  z   (  ∀  x   (   (  ϕ  ∨  ψ  )   →  ρ  )   )      fragments  for-all  z   fragments  normal-(  for-all  x   fragments  normal-(   fragments  normal-(  ϕ   ψ  normal-)   normal-→  ρ  normal-)   normal-)     \forall z(\forall x((\phi\lor\psi)\rightarrow\rho))   ,      ∀  z  ∀  x   (   (  ϕ  ∨  ψ  )   →  ρ  )      fragments  for-all  z  for-all  x   fragments  normal-(   fragments  normal-(  ϕ   ψ  normal-)   normal-→  ρ  normal-)     \forall z\forall x((\phi\lor\psi)\rightarrow\rho)   .  Intuitionistic logic  The rules for converting a formula to prenex form make heavy use of classical logic. In intuitionistic logic , it is not true that every formula is logically equivalent to a prenex formula. The negation connective is one obstacle, but not the only one. The implication operator is also treated differently in intuitionistic logic than classical logic; in intuitionistic logic, it is not definable using disjunction and negation.  The BHK interpretation illustrates why some formulas have no intuitionistically-equivalent prenex form. In this interpretation, a proof of       (   ∃   x  ϕ    )   →    ∃   y  ψ     (  1  )       normal-→      x  ϕ         y  ψ    1     (\exists x\phi)\rightarrow\exists y\psi\qquad(1)   is a function which, given a concrete x and a proof of    ϕ   (  x  )       ϕ  x    \phi(x)   , produces a concrete y and a proof of ψ( y ). In this case it is allowable for the value of y to be computed from the given value of x . A proof of      ∃  y   (  ∃  x  ϕ  →  ψ  )   ,   (  2  )      fragments   y   fragments  normal-(   x  ϕ  normal-→  ψ  normal-)   normal-,   fragments  normal-(  2  normal-)     \exists y(\exists x\phi\rightarrow\psi),\qquad(2)   on the other hand, produces a single concrete value of y and a function that converts any proof of    ∃   x  ϕ         x  ϕ     \exists x\phi   into a proof of ψ( y ). If each x satisfying φ can be used to construct a y satisfying ψ but no such y can be constructed without knowledge of such an x then formula (1) will not be equivalent to formula (2).  The rules for converting a formula to prenex form that do fail in intuitionistic logic are:   (1)    ∀   x   (   ϕ  ∨  ψ   )       for-all    x    ϕ  ψ      \forall x(\phi\lor\psi)   implies     (   ∀   x  ϕ    )   ∨  ψ       for-all    x  ϕ    ψ    (\forall x\phi)\lor\psi   ,  (2)    ∀   x   (   ϕ  ∨  ψ   )       for-all    x    ϕ  ψ      \forall x(\phi\lor\psi)   implies    ϕ  ∨   (   ∀   x  ψ    )       ϕ   for-all    x  ψ      \phi\lor(\forall x\psi)   ,  (3)     (   ∀   x  ϕ    )   →  ψ     normal-→   for-all    x  ϕ    ψ    (\forall x\phi)\rightarrow\psi   implies    ∃  x   (  ϕ  →  ψ  )      fragments   x   fragments  normal-(  ϕ  normal-→  ψ  normal-)     \exists x(\phi\rightarrow\psi)   ,  (4)    ϕ  →   (   ∃   x  ψ    )      normal-→  ϕ      x  ψ      \phi\rightarrow(\exists x\psi)   implies    ∃  x   (  ϕ  →  ψ  )      fragments   x   fragments  normal-(  ϕ  normal-→  ψ  normal-)     \exists x(\phi\rightarrow\psi)   ,  (5)    ¬   ∀   x  ϕ          for-all    x  ϕ      \lnot\forall x\phi   implies    ∃   x  ¬  ϕ         x   ϕ     \exists x\lnot\phi   ,   ( x does not appear as a free variable of    ψ    ψ   \,\psi   in (1) and (3); x does not appear as a free variable of    ϕ    ϕ   \,\phi   in (2) and (4)).  Use of prenex form  Some proof calculi will only deal with a theory whose formulae are written in prenex normal form. The concept is essential for developing the arithmetical hierarchy and the analytical hierarchy .  Gödel 's proof of his completeness theorem for first-order logic presupposes that all formulae have been recast in prenex normal form.  See also   Herbrandization  Skolemization  Arithmetical hierarchy   Notes  References     "  Category:Normal forms (logic)     The term 'prenex' comes from the Latin  praenexus "tied or bound up in front", past participle of praenectere  1 . ↩     