   Neuman–Stubblebine protocol      Neuman–Stubblebine protocol   The Neuman–Stubblebine protocol is a computer network  authentication  protocol designed for use on insecure networks (e.g., the Internet ). It allows individuals communicating over such a network to prove their identity to each other. This protocol utilizes time stamps, but does not depend on synchronized clocks.  The protocol  If Alice (A) initiates the communication to Bob (B) with S is a server trusted by both parties, the protocol can be specified as follows using security protocol notation :   A and B are identities of Alice and Bob respectively  M is a session identifier      K   A  S      subscript  K    A  S     K_{AS}   is a symmetric key known only to A and S      K   B  S      subscript  K    B  S     K_{BS}   is a symmetric key known only to B and S      N  A     subscript  N  A    N_{A}   and    N  B     subscript  N  B    N_{B}   are nonces generated by A and B respectively      T  A     subscript  T  A    T_{A}   and    T  B     subscript  T  B    T_{B}   are timestamps generated by A and B respectively      K   A  B      subscript  K    A  B     K_{AB}   is a generated symmetric key, which will be the session key of the session between A and B        A  →  B   :   A  ,   N  A       normal-:   normal-→  A  B    A   subscript  N  A      A\rightarrow B:A,N_{A}      Alice notified Bob of intent to initiate secure communication.        B  →  S   :   B  ,   N  B   ,    {  A  ,   N  A   ,   T  B   }    K   B  S         normal-:   normal-→  B  S    B   subscript  N  B    subscript   A   subscript  N  A    subscript  T  B     subscript  K    B  S        B\rightarrow S:B,N_{B},\{A,N_{A},T_{B}\}_{K_{BS}}      Bob generates a times stamp and a nonce, and sends this to the trusted Server.        S  →  A   :     {  B  ,   N  A   ,   K   A  B    ,   T  B   }    K   A  S     ,    {  A  ,   K   A  B    ,   T  B   }    K   B  S     ,   N  B       normal-:   normal-→  S  A     subscript   B   subscript  N  A    subscript  K    A  B     subscript  T  B     subscript  K    A  S      subscript   A   subscript  K    A  B     subscript  T  B     subscript  K    B  S      subscript  N  B      S\rightarrow A:\{B,N_{A},K_{AB},T_{B}\}_{K_{AS}},\{A,K_{AB},T_{B}\}_{K_{BS}},N%
 _{B}      The trusted Server generates a session key and a message for Alice to forward to Bob.       A  →  B   :     {  A  ,   K   A  B    ,   T  B   }    K   B  S     ,    {   N  B   }    K   A  B         normal-:   normal-→  A  B     subscript   A   subscript  K    A  B     subscript  T  B     subscript  K    B  S      subscript    subscript  N  B     subscript  K    A  B        A\rightarrow B:\{A,K_{AB},T_{B}\}_{K_{BS}},\{N_{B}\}_{K_{AB}}      Alice forwards the message and verifies    N  A     subscript  N  A    N_{A}   is the same that she generated earlier. Bob will verify    T  B     subscript  T  B    T_{B}   and    N  B     subscript  N  B    N_{B}   have not changed when he receives the message.  Subsequent communications  An advantage provided by this protocol is that Alice can utilize the trusted Server's message to initiate authentication with Bob within some predetermined time limit without utilizing the trusted Server. The protocol proceeds as follows using the same definitions as above.       A  →  B   :     {  A  ,   K   A  B    ,   T  B   }    K   B  S     ,   N  A  ′       normal-:   normal-→  A  B     subscript   A   subscript  K    A  B     subscript  T  B     subscript  K    B  S      subscript   superscript  N  normal-′   A      A\rightarrow B:\{A,K_{AB},T_{B}\}_{K_{BS}},N^{\prime}_{A}      Alice sends the message the trusted Server sent her previously when communication with Bob.        B  →  A   :    N  B  ′   ,    {   N  A  ′   }    K   A  B         normal-:   normal-→  B  A     subscript   superscript  N  normal-′   B    subscript    subscript   superscript  N  normal-′   A     subscript  K    A  B        B\rightarrow A:N^{\prime}_{B},\{N^{\prime}_{A}\}_{K_{AB}}      Bob sends Alice a new nonce and her new nonce encrypted with session key that Alice resent from previous communication.        A  →  B   :    {   N  B  ′   }    K   A  B        normal-:   normal-→  A  B    subscript    subscript   superscript  N  normal-′   B     subscript  K    A  B       A\rightarrow B:\{N^{\prime}_{B}\}_{K_{AB}}      Alice returns Bob's nonce encrypted with the session key to allow him to verify the communication is successful.   Attack  Using the theorem prover SPASS it has been shown that this protocol can be attacked. 1 This attack and two more from 2 are outlined in 1 .  See also   Kerberos  Needham–Schroeder protocol  Otway–Rees protocol  Yahalom  Wide Mouth Frog protocol   References    "  Category:Cryptographic protocols  Category:Computer access control protocols     ↩  ↩     