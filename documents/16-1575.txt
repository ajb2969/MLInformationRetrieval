   Analysis of parallel algorithms      Analysis of parallel algorithms   This article discusses the analysis of parallel algorithms running on parallel random-access machines (PRAMs): models of parallel computation where multiple processors have shared access to a random-access memory (RAM). Like in the analysis of "ordinary", sequential, algorithms, one is typically interested in asymptotic bounds on the resource consumption (mainly time spent computing), but the analysis is performed in the presence of multiple processor units that cooperate to perform computations. Thus, one can determine not only how many "steps" a computation takes, but also how much faster it becomes as the number of processors goes up.  Overview  Suppose computations are executed on a PRAM machine using   p   p   p   processors. Let denote the time that expires between the start of the computation and its end. Analysis of the computation's running time focuses on the following notions:   The work of a computation executed by   p   p   p   processors is the total number of primitive operations that the processors perform. 1 Ignoring communication overhead from synchronizing the processors, this is equal to the time used to run the computation on a single processor, denoted .  The span is the length of the longest series of operations that have to be performed sequentially due to data dependencies (the critical path ). The span may also be called the critical path length or the depth of the computation. 2 Minimizing the span is important in designing parallel algorithms, because the span determines the shortest possible execution time. 3 Alternatively, the span can be defined as the time spent computing using an idealized machine with an infinite number of processors. 4  The cost of the computation is the quantity . This expresses the total time spent, by all processors, in both computing and waiting. 5   Several useful results follow from the definitions of work, span and cost:   Work law . The cost is always at least the work: . This follows from the fact that   p   p   p   processors can perform at most   p   p   p   operations in parallel. 6 7  Span law . A finite number   p   p   p   of processors cannot outperform an infinite number, so that . 8   Using these definitions and laws, the following measures of performance can be given:   Speedup is the gain in speed made by parallel execution compared to sequential execution:  T 1 ∕ T p }} . When the speedup is    Ω   (  n  )       normal-Ω  n    Ω(n)   for input size   n   n   n   (using big O notation ), the speedup is linear, which is optimal in the PRAM model because the work law implies that ( super-linear speedup can occur in practice due to memory hierarchy effects). The situation  p }} is called perfect linear speedup. 9 An algorithm that exhibits linear speedup is said to be scalable . 10  Efficiency is the speedup per processor, . 11  Parallelism is the ratio . It represents the maximum possible speedup on any number of processors. By the span law, the parallelism bounds the speedup: if , then . 12  The slackness is . A slackness less than one implies (by the span law) that perfect linear speedup is impossible on   p   p   p   processors. 13   Execution on a limited number of processors  Analysis of parallel algorithms is usually carried out under the assumption that an unbounded number of processors is available. This is unrealistic, but not a problem, since any computation that can run in parallel on   N   N   N   processors can be executed on      T  p   ≤    T  N   +     T  1   -   T  N    p     ,       subscript  T  p      subscript  T  N        subscript  T  1    subscript  T  N    p      T_{p}\leq T_{N}+\frac{T_{1}-T_{N}}{p},           T  p   =   O   (    T  N   +    T  1   p    )     .       subscript  T  p     O     subscript  T  N      subscript  T  1   p       T_{p}=O\left(T_{N}+\frac{T_{1}}{p}\right).     or, less precisely, 15        T  1   p   ≤   T  p   <     T  1   p   +   T  ∞             subscript  T  1   p    subscript  T  p             subscript  T  1   p    subscript  T        \frac{T_{1}}{p}\leq T_{p}<\frac{T_{1}}{p}+T_{\infty}     An alternative statement of the law bounds above and below by 16     p   p   p   .  References  "  Category:Analysis of parallel algorithms     ↩  ↩  ↩  ↩           ↩       