


Newton's method in optimization




Newton's method in optimization

(Figure)
A comparison of gradient descent (green) and Newton's method (red) for minimizing a function (with small step sizes). Newton's method uses curvature information to take a more direct route.

In calculus, Newton's method is an iterative method for finding the roots of a differentiable function

 
  (i.e. solutions to the equation

 
 ). In optimization, Newton's method is applied to the derivative

 
  of a twice-differentiable function

 
 
  to find the roots of the derivative (solutions to 
 
 
 
 ), also known as the stationary points of 
 
 
 
 .
Method
In the one-dimensional problem, Newton's method attempts to construct a sequence xn from an initial guess x0 that converges towards some value x* satisfying f '(x*)=0. This x* is a stationary point of f.
The second order Taylor expansion fT(x) of f around xn is:


 
 .
The last expression attains its extremum with respect to Δx when its derivative is equal to zero, i.e. when:


 
 .
For the value of 
 
 
 
 
 , which satisfies this equation, it can be hoped that 
 
 
 
  will be closer to a stationary point x*. This is the case provided that f is a twice-differentiable function and other technical conditions are satisfied; the sequence x0, x1, x2, … converges to x*.
Geometric interpretation
The geometric interpretation of Newton's method is that at each iteration one approximates 
 
 
 
  by a quadratic function around 
 
 
 
 , and then takes a step towards the maximum/minimum of that quadratic function (in higher dimensions, this may also be a saddle point). Note that if 
 
 
 
  happens to be a quadratic function, then the exact extremum is found in one step.
Higher dimensions
The above iterative scheme can be generalized to several dimensions by replacing the derivative with the gradient, 
 
 
 
 
 , and the reciprocal of the second derivative with the inverse of the Hessian matrix, 
 
 
 
 . One obtains the iterative scheme



Often Newton's method is modified to include a small step size 
 
 
 
  instead of 
 
 



 
  This is often done to ensure that the Wolfe conditions are satisfied at each step 
 
 
 
  of the iteration.
Where applicable, Newton's method converges much faster towards a local maximum or minimum than gradient descent. In fact, every local minimum has a neighborhood 
 
 
 
  such that, if we start with 
 
 
 
  Newton's method with step size 
 
 
 
  converges quadratically (if the Hessian is invertible and a Lipschitz continuous function of 
 
 
 
 
  in that neighborhood).
Finding the inverse of the Hessian in high dimensions can be an expensive operation. In such cases, instead of directly inverting the Hessian it's better to calculate the vector 
 
 
 
  as the solution to the system of linear equations



which may be solved by various factorizations or approximately (but to great accuracy) using iterative methods. Many of these methods are only applicable to certain types of equations, for example the Cholesky factorization and conjugate gradient will only work if 
 
 
 
  is a positive definite matrix. While this may seem like a limitation, it's often useful indicator of something gone wrong, for example if a minimization problem is being approached and 
 
 
 
  is not positive definite, then the iterations are converging to a saddle point and not a minimum.
On the other hand, if a constrained optimization is done (for example, with Lagrange multipliers), the problem may become one of saddle point finding, in which case the Hessian will be symmetric indefinite and the solution of 
 
 
 
 
  will need to be done with a method that will work for such, such as the LDLT variant of Cholesky factorization or the conjugate residual method.
There also exist various quasi-Newton methods, where an approximation for the Hessian (or its inverse directly) is built up from changes in the gradient.
If the Hessian is close to a non-invertible matrix, the inverted Hessian can be numerically unstable and the solution may diverge. In this case, certain workarounds have been tried in the past, which have varied success with certain problems. One can, for example, modify the Hessian by adding a correction matrix 
 
 
 
  so as to make 
 
 
 
  positive definite. One approach is to diagonalize 
 
 
 
  and choose 
 
 
 
  so that 
 
 
 
 
  has the same eigenvectors as 
 
 
 
 , but with each negative eigenvalue replaced by 
 
 

An approach exploited in the Levenberg–Marquardt algorithm (which uses an approximate Hessian) is to add a scaled identity matrix to the Hessian, 
 
 
 
 , with the scale adjusted at every iteration as needed. For large 
 
 
 
  and small Hessian, the iterations will behave like gradient descent with step size 
 
 
 
 
 . This results in slower but more reliable convergence where the Hessian doesn't provide useful information.
See also

Quasi-Newton method
Gradient descent
Gauss–Newton algorithm
Levenberg–Marquardt algorithm
Trust region
Optimization
Nelder–Mead method

Notes
References

Avriel, Mordecai (2003). Nonlinear Programming: Analysis and Methods. Dover Publishing. ISBN 0-486-43227-0.


.
Nocedal, Jorge & Wright, Stephen J. (1999). Numerical Optimization. Springer-Verlag. ISBN 0-387-98793-2.

.

fr:Méthode de Newton"
Category:Optimization algorithms and methods


