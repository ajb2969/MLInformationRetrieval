


Partial evaluation




Partial evaluation

In computing, partial evaluation is a technique for several different types of program optimization by specialization. The most straightforward application is to produce new programs which run faster than the originals while being guaranteed to behave in the same way.
A computer program, prog, is seen as a mapping of input data into output data:



 
 , the static data, is the part of the input data known at compile time.
The partial evaluator transforms 
 
 
 
  into 
 
 
 
 
  by precomputing all static input at compile time. 
 
 
 
  is called the "residual program" and should run more efficiently than the original program. The act of partial evaluation is said to "residualize" 
 
 
 
  to 
 
 
 
 .
Futamura projections
A particularly interesting example of the use of partial evaluation, first described in the 1970s by Yoshihiko Futamura,1 is when prog is an interpreter for a programming language.
If Istatic is source code designed to run inside said interpreter, then partial evaluation of the interpreter with respect to this data/program produces prog*, a version of the interpreter that only runs that source code, is written in the implementation language of the interpreter, does not require the source code to be resupplied, and runs faster than the original combination of the interpreter and the source. In this case prog* is effectively a compiled version of Istatic.
This technique is known as the first Futamura projection, of which there are three:

Specializing an interpreter for given source code, yielding an executable
Specializing the specializer for the interpreter (as applied in #1), yielding a compiler
Specializing the specializer for itself (as applied in #2), yielding a tool that can convert any interpreter to an equivalent compiler

They were first described by Futamura in 1983.2
See also

Run-time algorithm specialisation
Partial application
Memoization
Strength reduction
Smn theorem
Template metaprogramming
PyPy

References

Yoshihiko Futamura, http://www.brics.dk/~hosc/local/HOSC-12-4-pp381-391.pdf Partial Evaluation of Computation Process – An Approach to a Compiler-Compiler




External links

Neil D. Jones, Carsten K. Gomard, and Peter Sestoft: Partial Evaluation and Automatic Program Generation (1993) Book, full text available online.
1999 ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99)
C++ Templates as Partial Evaluation, 1999 ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99)
C++ Templates as Partial Evaluation a different version including Catat (pdf)
Applying Dynamic Partial Evaluation to dynamic, reflective programming languages

"
Category:Compiler optimizations Category:Incremental computing Category:Evaluation strategy



Yoshihiko Futamura's Website↩
Partial Computation of Programs, Yoshihiko Futamura, March 1983↩




