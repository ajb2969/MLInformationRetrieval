   ElGamal encryption      ElGamal encryption   In cryptography , the ElGamal encryption system is an asymmetric key encryption algorithm for public-key cryptography which is based on the Diffie–Hellman key exchange . It was described by Taher Elgamal in 1985. 1 ElGamal encryption is used in the free GNU Privacy Guard software, recent versions of PGP , and other cryptosystems . The Digital Signature Algorithm is a variant of the ElGamal signature scheme , which should not be confused with ElGamal encryption.  ElGamal encryption can be defined over any cyclic group    G   G   G   . Its security depends upon the difficulty of a certain problem in   G   G   G   related to computing discrete logarithms (see below).  The algorithm  ElGamal encryption consists of three components: the key generator, the encryption algorithm, and the decryption algorithm.  Key generation  The key generator works as follows:   Alice generates an efficient description of a cyclic group    G    G   G\,   of order    q    q   q\,   with generator    g   g   g   . See below for a discussion on the required properties of this group.  Alice chooses an   x   x   x   randomly from    {  1  ,  …  ,   q  -  1   }     1  normal-…    q  1     \{1,\ldots,q-1\}   .  Alice computes    h  :=   g  x      assign  h   superscript  g  x     h:=g^{x}   .  Alice publishes    h    h   h\,   , along with the description of    G  ,  q  ,   g      G  q  g    G,q,g\,   , as her public key . Alice retains   x   x   x   as her private key , which must be kept secret.   Encryption  The encryption algorithm works as follows: to encrypt a message   m   m   m   to Alice under her public key    (  G  ,  q  ,  g  ,  h  )     G  q  g  h    (G,q,g,h)   ,   Bob chooses a random   y   y   y   from    {  1  ,  …  ,   q  -  1   }     1  normal-…    q  1     \{1,\ldots,q-1\}   , then calculates     c  1   :=   g  y      assign   subscript  c  1    superscript  g  y     c_{1}:=g^{y}   .  Bob calculates the shared secret    s  :=   h  y      assign  s   superscript  h  y     s:=h^{y}   .  Bob maps his secret message   m   m   m   onto an element    m  ′     superscript  m  normal-′    m^{\prime}   of   G   G   G   .  Bob calculates     c  2   :=    m  ′   ⋅  s      assign   subscript  c  2    normal-⋅   superscript  m  normal-′   s     c_{2}:=m^{\prime}\cdot s   .  Bob sends the ciphertext     (   c  1   ,   c  2   )   =   (   g  y   ,    m  ′   ⋅   h  y    )   =   (   g  y   ,    m  ′   ⋅    (   g  x   )   y    )           subscript  c  1    subscript  c  2      superscript  g  y    normal-⋅   superscript  m  normal-′    superscript  h  y            superscript  g  y    normal-⋅   superscript  m  normal-′    superscript   superscript  g  x   y        (c_{1},c_{2})=(g^{y},m^{\prime}\cdot h^{y})=(g^{y},m^{\prime}\cdot(g^{x})^{y})   to Alice.   Note that one can easily find    h  y     superscript  h  y    h^{y}   if one knows    m  ′     superscript  m  normal-′    m^{\prime}   . Therefore, a new   y   y   y   is generated for every message to improve security. For this reason,   y   y   y   is also called an ephemeral key .  Decryption  The decryption algorithm works as follows: to decrypt a ciphertext    (   c  1   ,   c  2   )      subscript  c  1    subscript  c  2     (c_{1},c_{2})   with her private key   x   x   x   ,   Alice calculates the shared secret    s  :=   c  1     x      fragments  s  assign   subscript  c  1    x     s:=c_{1}{}^{x}     and then computes     m  ′   :=    c  2   ⋅   s   -  1        assign   superscript  m  normal-′    normal-⋅   subscript  c  2    superscript  s    1       m^{\prime}:=c_{2}\cdot s^{-1}   which she then converts back into the plaintext message   m   m   m   , where    s   -  1      superscript  s    1     s^{-1}   is the inverse of   s   s   s   in the group   G   G   G   . (E.g. modular multiplicative inverse if   G   G   G   is a subgroup of a multiplicative group of integers modulo n ).    The decryption algorithm produces the intended message, since            c  2   ⋅   s   -  1     =    m  ′   ⋅   h  y   ⋅    (   g   x  y    )    -  1     =    m  ′   ⋅   g   x  y    ⋅   g   -   x  y      =   m  ′    .         normal-⋅   subscript  c  2    superscript  s    1      normal-⋅   superscript  m  normal-′    superscript  h  y    superscript   superscript  g    x  y      1           normal-⋅   superscript  m  normal-′    superscript  g    x  y     superscript  g      x  y            superscript  m  normal-′      c_{2}\cdot s^{-1}=m^{\prime}\cdot h^{y}\cdot(g^{xy})^{-1}=m^{\prime}\cdot g^{%
 xy}\cdot g^{-xy}=m^{\prime}.        Practical use  The ElGamal cryptosystem is usually used in a hybrid cryptosystem . I.e., the message itself is encrypted using a symmetric cryptosystem and ElGamal is then used to encrypt the key used for the symmetric cryptosystem. This is because asymmetric cryptosystems like Elgamal are usually slower than symmetric ones for the same level of security, so it is faster to encrypt the symmetric key (which most of the time is quite small if compared to the size of the message) with Elgamal and the message (which can be arbitrarily large) with a symmetric cypher.  Security  The security of the ElGamal scheme depends on the properties of the underlying group   G   G   G   as well as any padding scheme used on the messages.  If the computational Diffie–Hellman assumption (CDH) holds in the underlying cyclic group   G   G   G   , then the encryption function is one-way . 2  If the decisional Diffie–Hellman assumption (DDH) holds in   G   G   G   , then ElGamal achieves semantic security . 3 Semantic security is not implied by the computational Diffie–Hellman assumption alone. 4 See decisional Diffie–Hellman assumption for a discussion of groups where the assumption is believed to hold.  ElGamal encryption is unconditionally malleable , and therefore is not secure under chosen ciphertext attack . For example, given an encryption    (   c  1   ,   c  2   )      subscript  c  1    subscript  c  2     (c_{1},c_{2})   of some (possibly unknown) message   m   m   m   , one can easily construct a valid encryption    (   c  1   ,   2   c  2    )      subscript  c  1     2   subscript  c  2      (c_{1},2c_{2})   of the message    2  m      2  m    2m   .  To achieve chosen-ciphertext security, the scheme must be further modified, or an appropriate padding scheme must be used. Depending on the modification, the DDH assumption may or may not be necessary.  Other schemes related to ElGamal which achieve security against chosen ciphertext attacks have also been proposed. The Cramer–Shoup cryptosystem is secure under chosen ciphertext attack assuming DDH holds for   G   G   G   . Its proof does not use the random oracle model . Another proposed scheme is DHAES , 5 whose proof requires an assumption that is weaker than the DDH assumption.  Efficiency  ElGamal encryption is probabilistic , meaning that a single plaintext can be encrypted to many possible ciphertexts, with the consequence that a general ElGamal encryption produces a 2:1 expansion in size from plaintext to ciphertext.  Encryption under ElGamal requires two exponentiations ; however, these exponentiations are independent of the message and can be computed ahead of time if need be. Decryption only requires one exponentiation:  Decryption  The division by    s    s   s\,   can be avoided by using an alternative method for decryption. To decrypt a ciphertext    (   c  1   ,   c  2   )      subscript  c  1    subscript  c  2     (c_{1},c_{2})\,   with Alice's private key    x    x   x\,   ,   Alice calculates     s  ′   =   c  1   q  -  x    =   g    (   q  -  x   )   y           superscript  s  normal-′    superscript   subscript  c  1     q  x          superscript  g      q  x   y       s^{\prime}=c_{1}^{{q-x}}=g^{(q-x)y}   .        s  ′      superscript  s  normal-′    s^{\prime}\,   is the inverse of    s    s   s\,   . This is a consequence of Lagrange's theorem , because          s  ⋅   s  ′    =    g   x  y    ⋅   g    (   q  -  x   )   y     =    (   g  q   )   y   =   e  y   =  e   ,         normal-⋅  s   superscript  s  normal-′     normal-⋅   superscript  g    x  y     superscript  g      q  x   y           superscript   superscript  g  q   y         superscript  e  y        e     s\cdot s^{\prime}=g^{xy}\cdot g^{(q-x)y}=(g^{q})^{y}=e^{y}=e,       where    e    e   e\,   is the identity element of    G    G   G\,   .    Alice then computes     m  ′   =    c  2   ⋅   s  ′         superscript  m  normal-′    normal-⋅   subscript  c  2    superscript  s  normal-′      m^{\prime}=c_{2}\cdot s^{\prime}   , which she then converts back into the plaintext message    m    m   m\,   .    The decryption algorithm produces the intended message, since        c  2   ⋅   s  ′    =    m  ′   ⋅  s  ⋅   s  ′    =    m  ′   ⋅  e   =   m  ′    .         normal-⋅   subscript  c  2    superscript  s  normal-′     normal-⋅   superscript  m  normal-′   s   superscript  s  normal-′          normal-⋅   superscript  m  normal-′   e         superscript  m  normal-′      c_{2}\cdot s^{\prime}=m^{\prime}\cdot s\cdot s^{\prime}=m^{\prime}\cdot e=m^{%
 \prime}.       See also   ElGamal signature scheme  Homomorphic encryption   References         "  Category:Public-key encryption schemes     (conference version appeared in CRYPTO '84, pp. 10–18) ↩  CRYPTUTOR , " Elgamal encryption scheme " ↩   M. Abdalla, M. Bellare, P. Rogaway, "DHAES, An encryption scheme based on the Diffie–Hellman Problem" (Appendix A) ↩      