


C99




C99

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



(Figure)
Cover of the C99 standards document

C99 (previously known as C9X) is an informal name for ISO/IEC 9899:1999, a past version of the C programming language standard.1 It extends the previous version (C90) with new features for the language and the standard library, and helps implementations make better use of available computer hardware, such as the IEEE 754-1985 arithmetic, and compiler technology.2
The C11 version of the C programming language standard, published in 2011, replaces C99.
History
After ANSI produced the official standard for the C programming language in 1989, which became an international standard in 1990, the C language specification remained relatively static for some time, while C++ continued to evolve, largely during its own standardization effort. Normative Amendment 1 created a new standard for C in 1995, but only to correct some details of the 1989 standard and to add more extensive support for international character sets. The standard underwent further revision in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which was adopted as an ANSI standard in May 2000. The language defined by that version of the standard is commonly referred to as "C99". The international C standard is maintained by the working group ISO/IEC JTC1/SC22/WG14.
Design
C99 is, for the most part, backward compatible with C89, but it is stricter in some ways.3
In particular, a declaration that lacks a type specifier no longer has int implicitly assumed. The C standards committee decided that it was of more value for compilers to diagnose inadvertent omission of the type specifier than to silently process legacy code that relied on implicit int. In practice, compilers are likely to display a warning, then assume int and continue translating the program.
C99 introduced several new features, many of which had already been implemented as extensions in several compilers:4

inline functions
intermingled declarations and code: variable declaration is no longer restricted to file scope or the start of a compound statement (block), facilitating static single assignment form
several new data types, including long long int, optional extended integer types, an explicit boolean data type, and a complex type to represent complex numbers
variable-length arrays (although subsequently relegated in C11 to a conditional feature which implementations are not required to support)
flexible array members
support for one-line comments beginning with //, as in BCPL or C++
new library functions, such as snprintf
new headers, such as , , , and 
type-generic math (macro) functions, in , which select a math library function based upon float, double, or long double arguments, etc.
improved support for IEEE floating point
designated initializers
compound literals
support for variadic macros (macros with a variable number of arguments)
[[restrict]] qualification allows more aggressive code optimization, removing compile-time array access advantages previously held by FORTRAN over ANSI C5
universal character names, which allows user variables to contain other characters than the standard character set

Parts of the C99 standard are included in the current version of the C++ standard, C++11, including integer types, headers, and library functions. Variable-length arrays are not among these included parts because C++'s Standard Template Library already includes similar functionality.
IEEE 754 floating point support
A major feature of C99 is its numerics support, and in particular its support for access to the features of IEEE 754-1985 (also known as IEC 60559) floating point hardware present in the vast majority of modern processors (defined in "Annex F IEC 60559 floating-point arithmetic"). Platforms without IEEE 754 hardware can also implement it in software.6
On platforms with IEEE 754 floating point:

float is defined as IEEE 754 single precision, double is defined as double precision, and [[long double]] is defined as IEEE 754 extended precision (e.g., Intel 80-bit double extended precision on x86 or x86-64 platforms), or some form of quad precision where available; otherwise, it is double precision.
The four arithmetic operations and square root are correctly rounded as defined by IEEE 754.





FLT_EVAL_METHOD

float

double

long double





0

float

double

long double



1

double

double

long double



2

long double

long double

long double




Expression evaluation is defined to be performed in one of three well-defined methods, indicating whether floating point variables are first promoted to a more precise format in expressions: FLT_EVAL_METHOD == 2 indicates that all internal intermediate computations are performed by default at high precision (long double) where available (e.g., 80 bit double extended), FLT_EVAL_METHOD == 1 performs all internal intermediate expressions in double precision (unless an operand is long double), while FLT_EVAL_METHOD == 0 specifies each operation is evaluated only at the precision of the widest operand of each operator. The intermediate result type for operands of a given precision are summarized in the table on the right.

FLT_EVAL_METHOD == 2 tends to limit the risk of rounding errors affecting numerically unstable expressions (see IEEE 754 design rationale) and is the designed default method for x87 hardware, but yields unintuitive behavior for the unwary user;7 FLT_EVAL_METHOD == 1 was the default evaluation method originally used in K&R; C, which promoted all floats to double in expressions; and FLT_EVAL_METHOD == 0 is also commonly used and specifies a strict "evaluate to type" of the operands. (For gcc, FLT_EVAL_METHOD == 2 is the default on 32 bit x86, and FLT_EVAL_METHOD == 0 is the default on 64 bit x86-64, but FLT_EVAL_METHOD == 2 can be specified on x86-64 with option -mfpmath=387). Note that prior to the precision of intermediate values being precisely specified in C99, C compilers could round intermediate results inconsistently, especially when using x87 floating point hardware, leading to compiler-specific behaviour;8 such inconsistencies are not permitted in compilers conforming to C99 (annex F).
Example
The following annotated example C99 code for computing a continued fraction function demonstrates the main features:
1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 #include 
 #include 
 #include 
 #include 
 #include 
 #include 
 #include 
 
 double compute_fn(double z)  // [1]
 {
         #pragma STDC FENV_ACCESS ON  // [2]
 
         assert(FLT_EVAL_METHOD == 2);  // [3]
 
         if (isnan(z))  // [4]
                 puts("z is not a number");
 
         if (isinf(z))
                 puts("z is infinite");
 
         long double r = 7.0 - 3.0/(z - 2.0 - 1.0/(z - 7.0 + 10.0/(z - 2.0 - 2.0/(z - 3.0)))); // [5, 6]
 
         feclearexcept(FE_DIVBYZERO);  // [7]
 
         bool raised = fetestexcept(FE_OVERFLOW);  // [8]
 
         if (raised)
                 puts("Unanticipated overflow.");
 
         return r;
 }
 
 int main(void)
 {
 #ifndef __STDC_IEC_559__
         puts("Warning: __STDC_IEC_559__ not defined. IEEE 754 floating point not fully supported."); // [9]
 #endif
 
        #pragma STDC FENV_ACCESS ON
 
         #ifdef TEST_NUMERIC_STABILITY_UP
         fesetround(FE_UPWARD);                   // [10]
         #elif TEST_NUMERIC_STABILITY_DOWN
         fesetround(FE_DOWNWARD); 
         #endif
 
         printf("%.7g\n", compute_fn(3.0));
         printf("%.7g\n", compute_fn(NAN));
 
         return 0;
 }
 <span class="dt"float.h>
 
 Footnotes:

Compile with: 
As the IEEE 754 status flags are manipulated in this function, this #pragma is needed to avoid the compiler incorrectly rearranging such tests when optimising.
C99 defines a limited number of expression evaluation methods: the current compilation mode can be checked to ensure it meets the assumptions the code was written under.
The special values such as NaN and positive or negative infinity can be tested and set.
long double is defined as IEEE 754 double extended or quad precision if available. Using higher precision than required for intermediate computations can minimize round-off error9 (the typedef double_t can be used for code that is portable under all FLT_EVAL_METHODs).
The main function to be evaluated. Although it appears that some arguments to this continued fraction, e.g., 3.0, would lead to a divide-by-zero error, in fact the function is well-defined at 3.0 and division by 0 will simply return a +infinity that will then correctly lead to a finite result: IEEE 754 is defined not to trap on such exceptions by default and is designed so that they can very often be ignored, as in this case. (Note that if FLT_EVAL_METHOD is defined as 2 then all internal computations including constants will be performed in long double precision; if FLT_EVAL_METHOD is defined as 0 then additional care is need to ensure this, including possibly additional casts and explicit specification of constants as long double).
As the raised divide-by-zero flag is not an error in this case, it can simply be dismissed to clear the flag for use by later code.
In some cases, other exceptions may be regarded as an error, such as overflow (although it can in fact be shown that this cannot occur in this case).
__STDC_IEC_559__ is to be defined only if "Annex F IEC 60559 floating-point arithmetic" is fully implemented by the compiler and the C library (users should be aware that this macro is sometimes defined while it shouldn't be).
The default rounding mode is round to nearest (with the even rounding rule in the halfway cases) for IEEE 754, but explicitly setting the rounding mode toward + and - infinity (by defining TEST_NUMERIC_STABILITY_UP etc. in this example, when debugging) can be used to diagnose numerical instability.10 Note that this method can be used even if compute_fn() is part of a separately compiled binary library. But depending on the function, numerical instabilities cannot always be detected.

Version detection
A standard macro __STDC_VERSION__ is defined with value 199901L to indicate that C99 support is available. As with the __STDC__ macro for C90, __STDC_VERSION__ can be used to write code that will compile differently for C90 and C99 compilers, as in this example that ensures that inline is available in either case (by replacing it with static in C90 to avoid linker errors.)
#if __STDC_VERSION__ >= 199901L
   /* "inline" is a keyword */
 #else
 # define inline static
 #endif
Implementations
Most C compilers provide support for at least some of the features introduced in C99. However, there has been less support from Microsoft, which used to focus mainly on C++ and only started to implement C99 features in their 2013 offering.11




Implementation

Level of support

Details





AMD x86  Open64 Compiler Suite


Has C99 support equal to that of GCC.12



cc65


Full C89 and C99 support is not implemented, partly due to platform limitations (MOS Technology 6502). There is no support planned for some C99 types like _Complex and 64-bit integers (long long).13



Ch


Supports major C99 features.14



Clang


Supports all features except C99 floating-point pragmas.15



CompCert


A certified compiler, formally proved correct. Supports all features except C99 complex numbers, and minor restrictions on switch statement (no Duff's device) and bitfields.16



cparser


Supports C99 features.17



C++ Builder







Digital Mars C/C++ Compiler


Lacks support for some features, such as tgmath.h and _Pragma.18



GCC


in mainline GCC, extended identifiers, standard pragmas and IEEE 754/IEC 60559 floating point support are missing. Additionally, some features (such as extended integer types and new library functions) must be provided by the C standard library and are thus out of scope for GCC.19 GCC's 4.6 and 4.7 releases also provides the same level of compliance.2021 Almost complete IEEE 754 support if the hardware is compliant.22



Green Hills Software





IBM C for AIX, V6 23 and XL C/C++ V11.1 for AIX 24





IBM Rational logiscope


Until Logiscope 6.3, only basic constructs of C99 were supported. C99 is officially supported in Logiscope 6.4 and later versions.25



The Portland Group PGI C/C++





IAR Systems
  Embedded Workbench


Doesn't support UCN (universal character names). Compiler for embedded targets, such as ARM, Coldfire, MSP430, AVR, AVR32, 8051, ... No x86 targets.



Intel C++ compiler







Microsoft Visual C++

26

C99 is not supported as of Visual C++ 2012,272829 while Visual C++ 2013 implements support for a limited subset of C99.30



Open Watcom


Implements the most-used parts of the standard. However, they are enabled only through an undocumented command-line switch.31



Pelles C


Supports all C99 features.32



Portable C compiler


Working towards becoming C99-compliant.



Sun Studio

33




The Amsterdam Compiler Kit


A C99 frontend is currently under investigation.



Tiny C Compiler


Does not support complex numbers.3435 The developers state that "TCC is heading toward full ISOC99 compliance".36



vbcc





Future work
Since ratification of the 1999 C standard, the standards working group prepared technical reports specifying improved support for embedded processing, additional character data types (Unicode support), and library functions with improved bounds checking. Work continues on technical reports addressing decimal floating point, additional mathematical special functions, and additional dynamic memory allocation functions. The C and C++ standards committees have been collaborating on specifications for threaded programming.
The next revision of the C standard, C11, was ratified in 2011.37 The C standards committee adopted guidelines that limited the adoption of new features that have not been tested by existing implementations. Much effort went into developing a memory model, in order to clarify sequence points and to support threaded programming.
See also

C11
C++11
C++ Technical Report 1
Floating point, for further discussion of usage of IEEE 754 hardware

References
Further reading




Rationale for International Standard—Programming Languages—C Revision 5.10, April-2003, Rationale for C99

External links

New things in C9X
Kuro5hin: Are you ready for C99?
Features of C99

bg:C (език за програмиране)#C99"
Category:C (programming language) Category:Programming language standards Category:Unix programming tools




http://grouper.ieee.org/groups/754/meeting-materials/2001-07-18-c99.pdf




















[http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?infotype=an&subtype;;=ca&supplier;=897&appname;=IBMLinkRedirect&letternum;=ENUS202-161 IBM C for AIX, V6.0 Now Supports the C99 Standard]
IBM - XL C/C++ for AIX - United States
IBM Rational Logiscope support for C99 standard - United States

Reader Q&A;: What about VC++ and C99? « Sutter’s Mill
A.27 Use of C99 Variable Length Arrays
Microsoft to C99 Developers: Use ISO C




Tiny C Compiler Reference Documentation
According to the project's TODO list complex types are the only missing C99 feature. Variable Length Arrays have been added in TCC 0.9.26 1
TCC : Tiny C Compiler



