   Square-free polynomial      Square-free polynomial   In mathematics , a square-free polynomial is a polynomial defined over a field or, more generally, a unique factorization domain that is not a multiple of the square of a non unit factor. In the important case of univariate polynomials over a field k , this means that,    f  ∈   k   [  X  ]        f    k   delimited-[]  X      f\in k[X]   is square-free if and only if     b  2   ∤  f     not-divides   superscript  b  2   f    b^{2}\nmid f   for every polynomial    b  ∈   k   [  X  ]        b    k   delimited-[]  X      b\in k[X]   of positive degree. 1 In applications in physics and engineering, a square-free polynomial is commonly called a polynomial with no repeated roots (such polynomials are called separable , but over a perfect field that is the same as square-free).  A square-free decomposition or square-free factorization of a polynomial is a factorization into powers of square-free factors      f  =    a  1    a  2  2    a  3  3   ⋯    a  n  n         f     subscript  a  1    superscript   subscript  a  2   2    superscript   subscript  a  3   3   normal-⋯   superscript   subscript  a  n   n      f=a_{1}a_{2}^{2}a_{3}^{3}\cdots a_{n}^{n}\,   where the a k that are not equal to 1 are pairwise coprime square-free polynomials. 2 Every non-zero polynomial with coefficients in a field admits a square-free factorization, which is unique up to the multiplication of the factors by non zero constants. The square-free factorization is much easier to compute than the complete factorization into irreducible factors, and is thus often preferred when the complete factorization is not really needed, like for the partial fraction decomposition and the symbolic integration of rational fractions . Square-free factorization is the first step of the polynomial factorization algorithms which are implemented in computer algebra systems . Therefore, the algorithm of square-free factorization is basic in computer algebra .  In the case of univariate polynomials over a field, any multiple factor of a polynomial introduces a nontrivial common factor of f and its formal derivative  f ′, so a sufficient condition for f to be square-free is that the greatest common divisor of f and f ′ is 1. Over a perfect field , all irreducible polynomials are separable , so that condition is also necessary. If the polynomial is not square free, the product of the    a  i     subscript  a  i    a_{i}   in the above square free decomposition may be obtained as the quotient of   f   f   f   by its GCD with its derivative. Further GCD computations and exact divisions allow to compute the square-free factorization (see square-free factorization over a finite field ). In characteristic zero, a better algorithm is known, Yun's algorithm, which is described below. 3 Its computational complexity is, at most, twice that of the GCD computation of the input polynomial and its derivative. More precisely, if    T  n     subscript  T  n    T_{n}   is the time needed to compute the GCD of two polynomials of degree   n   n   n   and the quotient of these polynomial by the GCD, then    2   T  n       2   subscript  T  n     2T_{n}   is an upper bound for the time needed to compute the square free decomposition.  There are also known algorithms for the computation of the square-free decomposition of multivariate polynomials. 4  Yun's algorithm  In this section we describe Yun's algorithm for the square-free decomposition of univariate polynomials over a field of characteristic 0 . 5 It proceed by a succession of GCD computations and exact divisions.  The input is thus a non zero polynomial f , and the first step of the algorithm consists in computing the GCD a 0 of f and its formal derivative  f '.  If      f  =    a  1    a  2  2    a  3  3   ⋯   a  k  k        f     subscript  a  1    superscript   subscript  a  2   2    superscript   subscript  a  3   3   normal-⋯   superscript   subscript  a  k   k      f=a_{1}a_{2}^{2}a_{3}^{3}\cdots a_{k}^{k}   is the desired factorization, we have thus        a  0   =    a  2  1    a  3  2   ⋯   a  k   k  -  1      ,       subscript  a  0      superscript   subscript  a  2   1    superscript   subscript  a  3   2   normal-⋯   superscript   subscript  a  k     k  1       a_{0}=a_{2}^{1}a_{3}^{2}\cdots a_{k}^{k-1},          f  /   a  0    =    a  1    a  2    a  3   ⋯   a  k          f   subscript  a  0       subscript  a  1    subscript  a  2    subscript  a  3   normal-⋯   subscript  a  k      f/a_{0}=a_{1}a_{2}a_{3}\cdots a_{k}   and         f  ′   /   a  0    =    ∑   i  =  1   k    i   a  i  ′    a  1   ⋯   a   i  -  1     a   i  +  1    ⋯   a  k      .         superscript  f  normal-′    subscript  a  0      superscript   subscript     i  1    k     i   superscript   subscript  a  i   normal-′    subscript  a  1   normal-⋯   subscript  a    i  1     subscript  a    i  1    normal-⋯   subscript  a  k       f^{\prime}/a_{0}=\sum_{i=1}^{k}ia_{i}^{\prime}a_{1}\cdots a_{i-1}a_{i+1}\cdots
 a%
 _{k}.     If we set     b  1   =   f  /   a  0         subscript  b  1     f   subscript  a  0      b_{1}=f/a_{0}   ,     c  1   =    f  ′   /   a  0         subscript  c  1      superscript  f  normal-′    subscript  a  0      c_{1}=f^{\prime}/a_{0}   and     d  1   =    c  1   -   b  1  ′         subscript  d  1      subscript  c  1    superscript   subscript  b  1   normal-′      d_{1}=c_{1}-b_{1}^{\prime}   , we get that        gcd   (   b  1   ,   d  1   )    =   a  1    ,         subscript  b  1    subscript  d  1     subscript  a  1     \gcd(b_{1},d_{1})=a_{1},           b  2   =    b  1   /   a  1    =    a  2    a  3   ⋯   a  n     ,         subscript  b  2      subscript  b  1    subscript  a  1            subscript  a  2    subscript  a  3   normal-⋯   subscript  a  n       b_{2}=b_{1}/a_{1}=a_{2}a_{3}\cdots a_{n},   and        c  2   =    d  1   /   a  1    =    ∑   i  =  2   k     (   i  -  1   )    a  i  ′    a  2   ⋯   a   i  -  1     a   i  +  1    ⋯   a  k      .         subscript  c  2      subscript  d  1    subscript  a  1           superscript   subscript     i  2    k       i  1    superscript   subscript  a  i   normal-′    subscript  a  2   normal-⋯   subscript  a    i  1     subscript  a    i  1    normal-⋯   subscript  a  k        c_{2}=d_{1}/a_{1}=\sum_{i=2}^{k}(i-1)a_{i}^{\prime}a_{2}\cdots a_{i-1}a_{i+1}%
 \cdots a_{k}.     Iterating this process until     b   k  +  1    =  1       subscript  b    k  1    1    b_{k+1}=1   we find all the     a  i   .     subscript  a  i    a_{i}.     This is formalized into an algorithm as follows:  The degree of    c  i     subscript  c  i    c_{i}   and    d  i     subscript  d  i    d_{i}   is one less than the degree of     b  i   .     subscript  b  i    b_{i}.   As   f   f   f   is the product of the     b  i   ,     subscript  b  i    b_{i},   the sum of the degrees of the    b  i     subscript  b  i    b_{i}   is the degree of    f  .    f   f.   As the complexity of GCD computations and divisions increase more than linearly with the degree, it follows that the total running time of the "repeat" loop is less than the running time of the first line of the algorithm, and that the total running time of Yun's algorithm is upper bounded by twice the time needed to compute the GCD of   f   f   f   and    f  ′     superscript  f  normal-′    f^{\prime}   and the quotient of   f   f   f   and    f  ′     superscript  f  normal-′    f^{\prime}   by their GCD.  Notes  "  Category:Polynomials  Category:Computer algebra     Yun, David Y.Y. (1976). On square-free decomposition algorithms  SYMSAC '76 Proceedings of the third ACM symposium on Symbolic and algebraic computation , p. 26-35. ↩    Gianni P., Trager B. (1996). Square-Free Algorithms in Positive Characteristic  Applicable Algebra In Engineering, Communication And Computing , 7(1), p. 1-14. ↩      