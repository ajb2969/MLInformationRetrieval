


Least mean squares filter




Least mean squares filter

Least mean squares (LMS) algorithms are a class of adaptive filter used to mimic a desired filter by finding the filter coefficients that relate to producing the least mean squares of the error signal (difference between the desired and the actual signal). It is a stochastic gradient descent method in that the filter is only adapted based on the error at the current time. It was invented in 1960 by Stanford University professor Bernard Widrow and his first Ph.D. student, Ted Hoff.
Problem formulation
(Figure)
LMS filter

Relationship to the least mean squares filter
The realization of the causal Wiener filter looks a lot like the solution to the least squares estimate, except in the signal processing domain. The least squares solution, for input matrix 
 
 
 
  and output vector 
 
 
 
  is



The FIR least mean squares filter is related to the Wiener filter, but minimizing the error criterion of the former does not rely on cross-correlations or auto-correlations. Its solution converges to the Wiener filter solution. Most linear adaptive filtering problems can be formulated using the block diagram above. That is, an unknown system 
 
 
 
 
  is to be identified and the adaptive filter attempts to adapt the filter 
 
 
 
  to make it as close as possible to 
 
 
 
 , while using only observable signals 
 
 
 
 , 
 
 
 
  and 
 
 
 
 
 ; but 
 
 
 
 , 
 
 
 
  and 
 
 
 
  are not directly observable. Its solution is closely related to the Wiener filter.
Definition of symbols


 
  is the number of the current input sample


 
  is the number of filter taps


 
  (Hermitian transpose or conjugate transpose)














 
  estimated filter; interpret as the estimation of the filter coefficients after 
 
 
 
  samples



Idea
The basic idea behind LMS filter is to approach the optimum filter weights 
 
 
 
 , by updating the filter weights in a manner to converge to the optimum filter weight. The algorithm starts by assuming a small weights (zero in most cases), and at each step, by finding the gradient of the mean square error, the weights are updated. That is, if the MSE-gradient is positive, it implies, the error would keep increasing positively, if the same weight is used for further iterations, which means we need to reduce the weights. In the same way, if the gradient is negative, we need to increase the weights. So, the basic weight update equation is :


 
 
 ,
where 
 
 
 
  represents the mean-square error. The negative sign indicates that, we need to change the weights in a direction opposite to that of the gradient slope.
The mean-square error, as a function of filter weights is a quadratic function which means it has only one extrema, that minimises the mean-square error, which is the optimal weight. The LMS thus, approaches towards this optimal weights by ascending/descending down the mean-square-error vs filter weight curve.
Derivation
The idea behind LMS filters is to use steepest descent to find filter weights 
 
 
 
  which minimize a cost function. We start by defining the cost function as


 
  where 
 
 
 
  is the error at the current sample n and 
 
 
 
 
  denotes the expected value.
This cost function (
 
 
 
 ) is the mean square error, and it is minimized by the LMS. This is where the LMS gets its name. Applying steepest descent means to take the partial derivatives with respect to the individual entries of the filter coefficient (weight) vector


 
  where 
 
 
 
  is the gradient operator





 
  Now, 
 
 
 
  is a vector which points towards the steepest ascent of the cost function. To find the minimum of the cost function we need to take a step in the opposite direction of 
 
 
 
 . To express that in mathematical terms


 
  where 
 
 
 
  is the step size(adaptation constant). That means we have found a sequential update algorithm which minimizes the cost function. Unfortunately, this algorithm is not realizable until we know 
 
 
 
 
 .
Generally, the expectation above is not computed. Instead, to run the LMS in an online (updating after each new sample is received) environment, we use an instantaneous estimate of that expectation. See below.
Simplifications
For most systems the expectation function 
 
 
 
  must be approximated. This can be done with the following unbiased estimator


 
  where 
 
 
 
  indicates the number of samples we use for that estimate. The simplest case is 
 
 



 
  For that simple case the update algorithm follows as


 
  Indeed this constitutes the update algorithm for the LMS filter.
LMS algorithm summary
The LMS algorithm for a 
 
 
 
 th order algorithm can be summarized as




Parameters:



 
  filter order






 
  step size



Initialisation:







Computation:

For 
 
 

























Convergence and stability in the mean
As the LMS algorithm does not use the exact values of the expectations, the weights would never reach the optimal weights in the absolute sense, but a convergence is possible in mean. That is, even though the weights may change by small amounts, it changes about the optimal weights. However, if the variance with which the weights change, is large, convergence in mean would be misleading. This problem may occur, if the value of step-size 
 
 
 
 
  is not chosen properly.
If 
 
 
 
  is chosen to be large, the amount with which the weights change depends heavily on the gradient estimate, and so the weights may change by a large value so that gradient which was negative at the first instant may now become positive. And at the second instant, the weight may change in the opposite direction by a large amount because of the negative gradient and would thus keep oscillating with a large variance about the optimal weights. On the other hand if 
 
 
 
  is chosen to be too small, time to converge to the optimal weights will be too large.
Thus, an upper bound on 
 
 
 
  is needed which is given as 
 
 

where 
 
 
 
 
  is the greatest eigenvalue of the autocorrelation matrix 
 
 
 
 . If this condition is not fulfilled, the algorithm becomes unstable and 
 
 
 
  diverges.
Maximum convergence speed is achieved when


 
  where 
 
 
 
  is the smallest eigenvalue of R. Given that 
 
 
 
 
  is less than or equal to this optimum, the convergence speed is determined by 
 
 
 
 , with a larger value yielding faster convergence. This means that faster convergence can be achieved when 
 
 
 
  is close to 
 
 
 
 , that is, the maximum achievable convergence speed depends on the eigenvalue spread of 
 
 
 
 .
A white noise signal has autocorrelation matrix 
 
 
 
 
  where 
 
 
 
  is the variance of the signal. In this case all eigenvalues are equal, and the eigenvalue spread is the minimum over all possible matrices. The common interpretation of this result is therefore that the LMS converges quickly for white input signals, and slowly for colored input signals, such as processes with low-pass or high-pass characteristics.
It is important to note that the above upperbound on 
 
 
 
  only enforces stability in the mean, but the coefficients of 
 
 
 
  can still grow infinitely large, i.e. divergence of the coefficients is still possible. A more practical bound is


 
  where 
 
 
 
 
  denotes the trace of 
 
 
 
 . This bound guarantees that the coefficients of 
 
 
 
  do not diverge (in practice, the value of 
 
 
 
  should not be chosen close to this upper bound, since it is somewhat optimistic due to approximations and assumptions made in the derivation of the bound).
Normalised least mean squares filter (NLMS)
The main drawback of the "pure" LMS algorithm is that it is sensitive to the scaling of its input 
 
 
 
 . This makes it very hard (if not impossible) to choose a learning rate 
 
 
 
 
  that guarantees stability of the algorithm (Haykin 2002). The Normalised least mean squares filter (NLMS) is a variant of the LMS algorithm that solves this problem by normalising with the power of the input. The NLMS algorithm can be summarised as:




Parameters:



 
  filter order






 
  step size



Initialization:







Computation:

For 
 
 

























Optimal learning rate
It can be shown that if there is no interference (
 
 
 
 ), then the optimal learning rate for the NLMS algorithm is


 
  and is independent of the input 
 
 
 
 
  and the real (unknown) impulse response 
 
 
 
 . In the general case with interference (
 
 
 
 ), the optimal learning rate is



The results above assume that the signals 
 
 
 
  and 
 
 
 
 
  are uncorrelated to each other, which is generally the case in practice.
Proof
Let the filter misalignment be defined as 
 
 
 
 , we can derive the expected misalignment for the next sample as:






Let 
 
 
 
  and 
 
 







Assuming independence, we have:






The optimal learning rate is found at 
 
 
 
 
 , which leads to:






See also

Recursive least squares
For statistical techniques relevant to LMS filter see Least squares.
Similarities between Wiener and LMS
Multidelay block frequency domain adaptive filter
Zero forcing equalizer
Kernel adaptive filter

References

Monson H. Hayes: Statistical Digital Signal Processing and Modeling, Wiley, 1996, ISBN 0-471-59431-8
Simon Haykin: Adaptive Filter Theory, Prentice Hall, 2002, ISBN 0-13-048434-2
Simon S. Haykin, Bernard Widrow (Editor): Least-Mean-Square Adaptive Filters, Wiley, 2003, ISBN 0-471-21570-8
Bernard Widrow, Samuel D. Stearns: Adaptive Signal Processing, Prentice Hall, 1985, ISBN 0-13-004029-0
Weifeng Liu, Jose Principe and Simon Haykin: Kernel Adaptive Filtering: A Comprehensive Introduction, John Wiley, 2010, ISBN 0-470-44753-2
Paulo S.R. Diniz: Adaptive Filtering: Algorithms and Practical Implementation, Kluwer Academic Publishers, 1997, ISBN 0-7923-9912-9

External links

LMS Algorithm in Adaptive Antenna Arrays www.antenna-theory.com
LMS Noise cancellation demo www.advsolned.com

"
Category:Digital signal processing Category:Filter theory Category:Stochastic algorithms


