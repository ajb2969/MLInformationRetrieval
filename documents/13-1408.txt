   Mobile Membranes      Mobile Membranes   Membrane systems have been inspired from the structure and the functioning of the living cells. They were introduced and studied by Gh.Paun under the name of P systems [24 ]; some applications of the membrane systems are presented in [15 ]. Membrane systems are essentially models of distributed, parallel and nondeterministic systems. Here we motivate and present the mobile membranes. Mobile membranes represent a variant of membrane systems inspired by the biological movements given by endocytosis and exocytosis. They have the expressive power of both P systems and process calculi with mobility such as mobile ambients [11 ] and brane calculi [10 ]. Computations with mobile membranes can be defined over specific configurations (like process calculi), while they represent also a rule-based formalism (like P systems).  The model is characterized by two essential features:   A spatial structure consisting of a hierarchy of membranes (which do not intersect) with objects associated to them. A membrane without any other membranes inside is called elementary.  The general rules describing the evolution of the structure: endocytosis (moving an elementary membrane inside a neighbouring membrane) and exocytosis (moving an elementary membrane outside the membrane where it is placed). More specific rules are given by pinocytosis (engulfing zero external membranes) and phagocytosis (engulfing just one external elementary membrane).   The computations are performed in the following way: starting from an initial structure, the system evolves by applying the rules in a nondeterministic and maximally parallel manner. A rule is applicable when all the involved objects and membranes appearing in its left hand side are available. The maximally parallel way of using the rules means that in each step a maximal multiset of rules is applied, namely a multiset of rules such that no further rule can be added to the set. A halting configuration is reached when no rule is applicable. The result is represented by the number of objects associated to a specified membrane.  Mobile membranes represents a formalism which describes the movement of membranes inside a spatial structure by applying rules from a given set of rules   R   R   R   . The mobility is provided by consumption and rewriting of objects. In terms of computation, the work is performed using membrane configurations. A the set   ℳ   ℳ   {\mathcal{M}}   of membrane configurations (ranged by    M  ,  N  ,  …     M  N  normal-…    M,N,\dots   ) os defined by using the free monoid    V  *     superscript  V     V^{*}   (ranged over by    u  ,  v  ,  …     u  v  normal-…    u,v,\dots   ) generated by a finite alphabet   V   V   V   (ranged over by    a  ,  b  ,  …     a  b  normal-…    a,b,\dots   ):       M   :  :=   u   ∣     [   M   ]   u    ∣  M  ∥  M     fragments  M  normal-:  assign  u  normal-∣   subscript   fragments  normal-[  M  normal-]   u   normal-∣  M  parallel-to  M    \qquad\qquad M::=u\;\mid\;[\;M\;]_{u}\;\mid\;M\|M     If   M   M   M   and   N   N   N   are two membrane configurations,   M   M   M   reduces to   N   N   N   (denoted by    M  →  N     normal-→  M  N    M\rightarrow N   ) if there exists a rule in the set of rules   R   R   R   applicable to the configuration   M   M   M   such that the new configuration   N   N   N   is obtained. When applying the rules of   R   R   R   , also the following inference rules are used:       (  Comp1  )      M   →   M  ′     M  ∥   N   →   M  ′   ∥  N    ;   (  Comp2  )       M   →   M  ′      N   →   N  ′      M  ∥   N   →   M  ′   ∥   N  ′        italic-Comp1     normal-→  M   superscript  M  normal-′     fragments  M  parallel-to  N  normal-→   superscript  M  normal-′   parallel-to  N    italic-Comp2     formulae-sequence   normal-→  M   superscript  M  normal-′     normal-→  N   superscript  N  normal-′      fragments  M  parallel-to  N  normal-→   superscript  M  normal-′   parallel-to   superscript  N  normal-′       \qquad{\it(Comp1)}\quad\frac{\displaystyle M\ \rightarrow\ M^{\prime}}{%
 \displaystyle M\|N\ \rightarrow\ M^{\prime}\|N};\qquad\qquad{\it(Comp2)}\quad%
 \frac{\displaystyle M\ \rightarrow\ M^{\prime}\qquad\displaystyle N\ %
 \rightarrow\ N^{\prime}}{\displaystyle M\|N\ \rightarrow\ M^{\prime}\|N^{%
 \prime}}   ;        (  𝑀𝑒𝑚  )      M   →   M  ′       [   M   ]   u   →    [    M  ′    ]   u      ;    (  𝑆𝑡𝑟𝑢𝑐  )      M   ≡   m  e  m     M  ′       M  ′   →   N  ′      N  ′    ≡   m  e  m    N      M  →  N          𝑀𝑒𝑚     normal-→  M   superscript  M  normal-′     normal-→   subscript   delimited-[]  M   u    subscript   delimited-[]   superscript  M  normal-′    u        𝑆𝑡𝑟𝑢𝑐     formulae-sequence    subscript     m  e  m    M   superscript  M  normal-′     formulae-sequence   normal-→   superscript  M  normal-′    superscript  N  normal-′      subscript     m  e  m     superscript  N  normal-′   N      normal-→  M  N       \qquad{\it(Mem)}\ \frac{\displaystyle M\ \rightarrow\ M^{\prime}}{%
 \displaystyle[\;M\;]_{u}\rightarrow[\;M^{\prime}\;]_{u}};\qquad\qquad{\it(%
 Struc)}\ \frac{\displaystyle M\equiv_{mem}M^{\prime}\quad M^{\prime}%
 \rightarrow N^{\prime}\quad\ N^{\prime}\equiv_{mem}N}{\displaystyle M%
 \rightarrow N}     When describing a computation of a systems of mobile membranes, an initial configuration    M  0     subscript  M  0    M_{0}   and a set of rules   R   R   R   are given. The rules used in this paper describe an     𝑜𝑏𝑗𝑒𝑐𝑡   𝑒𝑣𝑜𝑙𝑢𝑡𝑖𝑜𝑛      𝑜𝑏𝑗𝑒𝑐𝑡  𝑒𝑣𝑜𝑙𝑢𝑡𝑖𝑜𝑛    {\it object~{}evolution}   (object rewriting),   𝑒𝑛𝑑𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   𝑒𝑛𝑑𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   {\it endocytosis}   movement (moving an elementary membrane inside a neighbouring membrane),   𝑒𝑥𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   𝑒𝑥𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   {\it exocytosis}   movement (moving an elementary membrane outside the membrane where it is placed),   𝑝𝑖𝑛𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   𝑝𝑖𝑛𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   {\it pinocytosis}   (engulfing zero external membranes), and   𝑝ℎ𝑎𝑔𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   𝑝ℎ𝑎𝑔𝑜𝑐𝑦𝑡𝑜𝑠𝑖𝑠   {\it phagocytosis}   (engulfing just one external elementary membrane).  Computability Power of Mobile Membranes  A specific feature of the mobile membranes is that this new rule-based model is appropriate to prove computability results in terms of Turing machines rather by reduction to the lambda calculus as in the case of process calculi with mobility. In this section are defined four classes of membranes inspired from biological facts, and it is showed that their computational power depends on the initial configuration and on the set of rules used.  Simple Mobile Membranes  The systems of simple mobile membranes (SM) are defined over the set of configurations   ℳ   ℳ   \mathcal{M}   , and evolve using endocytosis and exocytosis rules, namely moving a membrane inside a neighbouring membrane, or outside the membrane where it is placed, respectively. The evolution from a configuration to another is made using rules from the set of rules   R   R   R   defined as follows:        [     [   a   ∥  M  ]   m    ∥  N  ]   k   →    [     [   v   ∥  M  ]   m    ∥  N  ]   k      fragments   subscript   fragments  normal-[   subscript   fragments  normal-[  a  parallel-to  M  normal-]   m   parallel-to  N  normal-]   k   normal-→   subscript   fragments  normal-[   subscript   fragments  normal-[  v  parallel-to  M  normal-]   m   parallel-to  N  normal-]   k     [[a\;\|\;M]_{m}\;\|\;N]_{k}\rightarrow[[v\;\|\;M]_{m}\;\|\;N]_{k}   , for     k  ,  m   ∈  𝒩       k  m   𝒩    k,m\in\mathcal{N}   ,    a  ∈  V      a  V    a\in V   ,    v  ∈   V  *       v   superscript  V      v\in V^{*}   ; (local object evolution)        [   a   ∥  M  ]   m   →    [   v   ∥  M  ]   m      fragments   subscript   fragments  normal-[  a  parallel-to  M  normal-]   m   normal-→   subscript   fragments  normal-[  v  parallel-to  M  normal-]   m     [a\;\|\;M]_{m}\rightarrow[v\;\|\;M]_{m}   , for    m  ∈  𝒩      m  𝒩    m\in\mathcal{N}   ,    a  ∈  V      a  V    a\in V   ,    v  ∈   V  *       v   superscript  V      v\in V^{*}   ; (global object evolution)         [   a   ∥   M  1   ]   h    ∥    [  M  ]   m   →    [     [   b   ∥   M  1   ]   h    ∥  M  ]   m      fragments   subscript   fragments  normal-[  a  parallel-to   subscript  M  1   normal-]   h   parallel-to   subscript   fragments  normal-[  M  normal-]   m   normal-→   subscript   fragments  normal-[   subscript   fragments  normal-[  b  parallel-to   subscript  M  1   normal-]   h   parallel-to  M  normal-]   m     [a\;\|\;M_{1}]_{h}\;\|\;[M]_{m}\rightarrow[[b\;\|\;M_{1}]_{h}\;\|\;M]_{m}   , for     h  ,  m   ∈  𝒩       h  m   𝒩    h,m\in\mathcal{N}   ,     a  ,  b   ∈  V       a  b   V    a,b\in V   ; (endocytosis)        [     [   a   ∥   M  1   ]   h    ∥  M  ]   m   →     [   b   ∥   M  1   ]   h    ∥    [  M  ]   m      fragments   subscript   fragments  normal-[   subscript   fragments  normal-[  a  parallel-to   subscript  M  1   normal-]   h   parallel-to  M  normal-]   m   normal-→   subscript   fragments  normal-[  b  parallel-to   subscript  M  1   normal-]   h   parallel-to   subscript   fragments  normal-[  M  normal-]   m     [[a\;\|\;M_{1}]_{h}\;\|\;M]_{m}\rightarrow[b\;\|\;M_{1}]_{h}\;\|\;[M]_{m}   , for     h  ,  m   ∈  𝒩       h  m   𝒩    h,m\in\mathcal{N}   ,     a  ,  b   ∈  V       a  b   V    a,b\in V   ; (exocytosis)  where    M  1     subscript  M  1    M_{1}   is a multiset, and   M   M   M   ,   N   N   N   are arbitrary membrane configurations.  Turing completeness can be obtained by using nine membranes together with the operations of endocytosis and exocytosis [21 ]. In [17 ] it is proven that four mobile membranes are enough to get the power of a Turing machine, while in [4 ] the number of membranes is decreased to three.      S  M   (   l  e  v  o  l   ,   e  n  d  o   ,   e  x  o   )       S  M     l  e  v  o  l     e  n  d  o     e  x  o      SM(levol,endo,exo)   denotes the family of all sets generated inside a given membrane by simple mobile membranes using local evolution rules (    l  e  v  o  l      l  e  v  o  l    levol   ), endocytosis and exocytosis rules. Whenever global evolution rules (    g  e  v  o  l      g  e  v  o  l    gevol   ) are used, the parameter    l  e  v  o  l      l  e  v  o  l    levol   is replaced by    g  e  v  o  l      g  e  v  o  l    gevol   . If a type of rules is not used, then its name is omitted from the list. The number of membranes does not increase during the computation, but it can decrease by sending membranes out of the system. In this case, the    S   M  n    (   g  e  v  o  l   ,   e  n  d  o   ,   e  x  o   )       S   subscript  M  n      g  e  v  o  l     e  n  d  o     e  x  o      SM_{n}(gevol,endo,exo)   denotes the family of sets of vectors of natural numbers computed by using at most $n$ membranes.    R  E      R  E    RE   denoted the family of Turing computable sets of vectors generated by arbitrary grammars.  It is proved in [17 ] that     S   M  4    (   g  e  v  o  l   ,   e  n  d  o   ,   e  x  o   )    =   R  E         S   subscript  M  4      g  e  v  o  l     e  n  d  o     e  x  o       R  E     SM_{4}(gevol,endo,exo)=RE   . The research line initiated in membrane computing is to find membrane systems with a minimal set of ingredients which are powerful enough to achieve the full power of Turing machines. In this way previous result presented in [17 ] are improved by decreasing the number of membranes to three. Moreover, this is achieved by using local evolution rules instead of global evolution rules.  Theorem.      S   M  3    (   l  e  v  o  l   ,   e  n  d  o   ,   e  x  o   )    =   R  E         S   subscript  M  3      l  e  v  o  l     e  n  d  o     e  x  o       R  E     SM_{3}(levol,endo,exo)=RE   .  The proof of this result uses a similar technique to that used in [4 ].  Enhanced Mobile Membranes  The systems of enhanced mobile membranes are a variant of simple membrane systems proposed in [1 ] for describing some biological mechanisms of the immune system. The operations governing the mobility of the systems of enhanced mobile membranes are endocytosis (endo), exocytosis (exo), forced endocytosis (fendo), forced exocytosis (fexo).The evolution from a configuration to another is made using rules from the set of rules   R   R   R   defined as follows:         [   u   ∥   v   ∥  M  ]   h    ∥     [    v  ′    ∥  N  ]   m    →    [    w  ′    ∥    [  w  ]   h   ]   m      fragments   subscript   fragments  normal-[  u  parallel-to  v  parallel-to  M  normal-]   h   parallel-to   subscript   fragments  normal-[   superscript  v  normal-′   parallel-to  N  normal-]   m   normal-→   subscript   fragments  normal-[   superscript  w  normal-′   parallel-to   subscript   fragments  normal-[  w  normal-]   h   normal-]   m     [u\;\|\;v\;\|\;M]_{h}\;\|\;[v^{\prime}\;\|\;N]_{m}\!\rightarrow\![w^{\prime}\;%
 \|\;[w]_{h}]_{m}   for      h  ,   m    ∈  𝒩   ;     u   ∈    V  +   ,  v  ,   v  ′   ,  w    ,     w  ′    ∈   V  *        formulae-sequence     h  m   𝒩    formulae-sequence    u    superscript  V    v   superscript  v  normal-′   w       superscript  w  normal-′    superscript  V        h,m\!\in\!\mathcal{N};u\!\in\!V^{+},v,v^{\prime},w,w^{\prime}\!\in\!V^{*}   ; (endocytosis)         [    v  ′    ∥   N   ∥    [   u   ∥   v   ∥  M  ]   h   ]   m    →     [   w   ∥  M  ]   h    ∥    [    w  ′    ∥  N  ]   m      fragments   subscript   fragments  normal-[   superscript  v  normal-′   parallel-to  N  parallel-to   subscript   fragments  normal-[  u  parallel-to  v  parallel-to  M  normal-]   h   normal-]   m   normal-→   subscript   fragments  normal-[  w  parallel-to  M  normal-]   h   parallel-to   subscript   fragments  normal-[   superscript  w  normal-′   parallel-to  N  normal-]   m     [v^{\prime}\;\|\;N\;\|\;[u\;\|\;v\;\|\;M]_{h}]_{m}\!\rightarrow\![w\;\|\;M]_{h%
 }\;\|\;[w^{\prime}\;\|\;N]_{m}   , for      h  ,   m    ∈  𝒩   ;    u  ∈    V  +   ,  v  ,   v  ′   ,  w    ,    w  ′   ∈   V  *        formulae-sequence     h  m   𝒩    formulae-sequence    u    superscript  V    v   superscript  v  normal-′   w       superscript  w  normal-′    superscript  V        h,m\!\in\!\!\mathcal{N};u\in V^{+},v,v^{\prime},w,w^{\prime}\in V^{*}   ; (exocytosis)         [   v   ∥  M  ]   h    ∥     [   u   ∥    v  ′    ∥  N  ]   m    →    [     [   w   ∥  M  ]   h    ∥    w  ′    ∥  N  ]   m      fragments   subscript   fragments  normal-[  v  parallel-to  M  normal-]   h   parallel-to   subscript   fragments  normal-[  u  parallel-to   superscript  v  normal-′   parallel-to  N  normal-]   m   normal-→   subscript   fragments  normal-[   subscript   fragments  normal-[  w  parallel-to  M  normal-]   h   parallel-to   superscript  w  normal-′   parallel-to  N  normal-]   m     [v\;\|\;M]_{h}\;\|\;[u\;\|\;v^{\prime}\;\|\;N]_{m}\!\!\rightarrow\!\![[w\;\|\;%
 M]_{h}\;\|\;w^{\prime}\;\|\;N]_{m}   for     h  ,   m    ∈  𝒩       h  m   𝒩    h,m\!\!\in\!\!\mathcal{N}   ,      u   ∈    V  +   ,  v  ,    v  ′    ,  w    ,     w  ′    ∈   V  *       formulae-sequence    u    superscript  V    v   superscript  v  normal-′   w       superscript  w  normal-′    superscript  V       u\!\in\!V^{+},v,v^{\prime}\!,w,w^{\prime}\!\in\!V^{*}   ; (enhanced endocytosis)         [   u   ∥    v  ′    ∥     [   v   ∥  M  ]   h    ∥  N  ]   m    →     [   w   ∥  M  ]   h    ∥    [    w  ′    ∥  N  ]   m      fragments   subscript   fragments  normal-[  u  parallel-to   superscript  v  normal-′   parallel-to   subscript   fragments  normal-[  v  parallel-to  M  normal-]   h   parallel-to  N  normal-]   m   normal-→   subscript   fragments  normal-[  w  parallel-to  M  normal-]   h   parallel-to   subscript   fragments  normal-[   superscript  w  normal-′   parallel-to  N  normal-]   m     [u\;\|\;v^{\prime}\;\|\;[v\;\|\;M]_{h}\;\|\;N]_{m}\!\!\rightarrow\!\![w\;\|\;M%
 ]_{h}\;\|\;[w^{\prime}\;\|\;N]_{m}   for      h  ,   m    ∈  𝒩   ,    u  ∈    V  +   ,  v  ,   v  ′   ,  w    ,    w  ′   ∈   V  *        formulae-sequence     h  m   𝒩    formulae-sequence    u    superscript  V    v   superscript  v  normal-′   w       superscript  w  normal-′    superscript  V        h,m\!\in\!\mathcal{N},u\in V^{+},v,v^{\prime},w,w^{\prime}\in V^{*}   ; (enhanced exocytosis)  \noindent where   M   M   M   is a multiset and   N   N   N   is an arbitrary membrane configuration.  The computational power of the systems of enhanced mobile membranes using these four operations was studied in [20 ] where it is proved that twelve membranes can provide the computational universality, while in [4 ] the result is improved by reducing the number of membranes to nine. It is worth to note that unlike the previous results, the rewriting of object by means of context-free rules is not used in any of the results (and their proofs).  The interplay between these four operations is quite powerful, and the computational power of a Turing machine is obtained using twelve membranes without using the context-free evolution of objects [20 ].  The family of all sets generated inside a given membrane by enhanced mobile membranes of degree at most   n   n   n   using rules    α  ⊆   {   e  x  o   ,   e  n  d  o   ,   f  e  n  d  o   ,   f  e  x  o   }       α     e  x  o     e  n  d  o     f  e  n  d  o     f  e  x  o      \alpha\subseteq\{exo,endo,fendo,fexo\}   , is denoted by    E   M  n    (  α  )       E   subscript  M  n   α    EM_{n}(\alpha)   .  Theorem.      E   M  3    (   e  n  d  o   ,   e  x  o   )    =   E   M  3    (   f  e  n  d  o   ,   f  e  x  o   )          E   subscript  M  3      e  n  d  o     e  x  o       E   subscript  M  3      f  e  n  d  o     f  e  x  o       EM_{3}(endo,exo)=EM_{3}(fendo,fexo)   .  Theorem.      E   M  12    (   e  n  d  o   ,   e  x  o   ,   f  e  n  d  o   ,   f  e  x  o   )    =   R  E         E   subscript  M  12      e  n  d  o     e  x  o     f  e  n  d  o     f  e  x  o       R  E     EM_{12}(endo,exo,fendo,fexo)=RE   .  When proving the result of the previous theorem the authors have not used an optimal construction of a membrane system. In what follows it is proven that using the same types of rules ( endo , exo , fendo , fexo ) a membrane system can be constructed using only nine membranes instead of twelve membranes. If this is an optimal construction remains an open problem.  Theorem.      E   M  9    (   e  n  d  o   ,   e  x  o   ,   f  e  n  d  o   ,   f  e  x  o   )    =   R  E         E   subscript  M  9      e  n  d  o     e  x  o     f  e  n  d  o     f  e  x  o       R  E     EM_{9}(endo,exo,fendo,fexo)=RE   .  The proof is similar to that presented in [4 ].  Mutual Mobile Membranes  Following the approach presented in [3 ], "systems of mutual mobile membranes" representing a variant of systems of simple mobile membranes in which the endocytosis and the exocytosis work whenever the involved membranes "agree" on the movement are defined; this agreement is described by using dual objects   a   a   a   and    a  ¯     normal-¯  a    \overline{a}   in the involved membranes. The operations governing the mobility of the systems of mutual mobile membranes are mutual endocytosis (mutual endo), and mutual exocytosis (mutual exo). The evolution from a configuration to another is made using rules from the set of rules   R   R   R   defined as follows:         [   u   ∥   v   ∥  M  ]   h    ∥    [    u  ¯    ∥    v  ′    ∥  N  ]   m   →    [     [   w   ∥  M  ]   h    ∥    w  ′    ∥  N  ]   m      fragments   subscript   fragments  normal-[  u  parallel-to  v  parallel-to  M  normal-]   h   parallel-to   subscript   fragments  normal-[   normal-¯  u   parallel-to   superscript  v  normal-′   parallel-to  N  normal-]   m   normal-→   subscript   fragments  normal-[   subscript   fragments  normal-[  w  parallel-to  M  normal-]   h   parallel-to   superscript  w  normal-′   parallel-to  N  normal-]   m     [u\;\|\;v\;\|\;M]_{h}\;\|\;[\overline{u}\;\|\;v^{\prime}\;\|\;N]_{m}%
 \rightarrow[\;[w\;\|\;M]_{h}\;\|\;w^{\prime}\;\|\;N]_{m}   for      h  ,  m   ∈  𝒩   ,    u  ,   u  ¯    ∈   V  +    ,    v  ,   v  ′   ,  w  ,    w  ′     ∈   V  *       formulae-sequence     h  m   𝒩      u   normal-¯  u     superscript  V        v   superscript  v  normal-′   w   superscript  w  normal-′     superscript  V       h,m\in\mathcal{N},u,\overline{u}\in V^{+},v,v^{\prime},w,w^{\prime}\!\!\in V^{*}   ; (mutual endocytosis)        [    u  ¯    ∥    v  ′    ∥   N   ∥    [   u   ∥   v   ∥  M  ]   h   ]   m   →     [   w   ∥  M  ]   h    ∥    [    w  ′    ∥  N  ]   m      fragments   subscript   fragments  normal-[   normal-¯  u   parallel-to   superscript  v  normal-′   parallel-to  N  parallel-to   subscript   fragments  normal-[  u  parallel-to  v  parallel-to  M  normal-]   h   normal-]   m   normal-→   subscript   fragments  normal-[  w  parallel-to  M  normal-]   h   parallel-to   subscript   fragments  normal-[   superscript  w  normal-′   parallel-to  N  normal-]   m     [\overline{u}\;\|\;v^{\prime}\;\|\;N\;\|\;[u\;\|\;v\;\|\;M]_{h}]_{m}%
 \rightarrow[w\;\|\;M]_{h}\;\|\;[w^{\prime}\;\|\;N]_{m}   for      h  ,  m   ∈  𝒩   ,    u  ,   u  ¯    ∈   V  +    ,    v  ,   v  ′   ,  w  ,    w  ′     ∈   V  *       formulae-sequence     h  m   𝒩      u   normal-¯  u     superscript  V        v   superscript  v  normal-′   w   superscript  w  normal-′     superscript  V       h,m\in\mathcal{N},u,\overline{u}\in V^{+},v,v^{\prime},w,w^{\prime}\!\!\in V^{*}   ; (mutual exocytosis)  where   M   M   M   is a multiset and   N   N   N   is an arbitrary membrane configuration.  It is enough to consider the biologically inspired operations of mutual endocytosis and mutual exocytosis and three membranes to get the full computational power of a Turing machine [6 ]. Three also represents the minimum number of membranes in order to discuss properly about the movement provided by endocytosis and exocytosis: working with configurations corresponding to a system of two membranes moving inside a skin membrane.  The family of all sets generated inside a given membrane by mutual mobile membranes of degree   n   n   n   using mutual endocytosis rules ( mendo ) and mutual exocytosis rules ( mexo ) is denoted by    M   M  n    (   m  e  n  d  o   ,   m  e  x  o   )       M   subscript  M  n      m  e  n  d  o     m  e  x  o      MM_{n}(mendo,mexo)   . Therefore the result can be formulated as following.  Theorem.      M   M  3    (   m  e  n  d  o   ,   m  e  x  o   )    =   R  E         M   subscript  M  3      m  e  n  d  o     m  e  x  o       R  E     MM_{3}(mendo,mexo)=RE   .  In systems of simple mobile membranes with local evolution rules and mobility rules it is known that systems of degree three have the same power as a Turing machine, while in systems of enhanced mobile membranes using only mobility rules the degree of systems having the same power as a Turing machine increases to nine. In each mobility rule from systems of simple and enhanced mobile membranes, in the left hand side of the rules only one object appears in the proofs. By using multisets instead of objects and synchronization by objects and co-objects, it is proved that it is enough to consider only systems of three mutual mobile membranes together with the operations of mutual endocytosis and mutual exocytosis to get the full computational power of a Turing machine.  The proof is done in a similar manner with the proof for the computational universality of the systems of enhanced mobile membranes [20 ].  Mutual Membranes with Objects on Surface  Membrane systems [24 ] and brane calculus [10 ] start from the same observations; however, they are build having in mind different goals: membrane systems investigate formally the computational nature and power of various features of membranes, while the brane calculus is capable to give a faithful and intuitive representation of the biological reality. In [12 ] the initiators of these two formalisms describe the goals they had in mind: "While membrane computing is a branch of natural computing which tries to abstract computing models, in the Turing sense, from the structure and the functioning of the cell, making use especially of automata, language, and complexity theoretic tools, brane calculi pay more attention to the fidelity to the biological reality, have as a primary target systems biology, and use especially the framework of process~algebra."  In [2 ] are defined systems of mutual membranes with objects on surface, following the idea of adding objects on membrane and using the biologically inspired rules pino/exo/phago coming from [12,14,18,19 ]. Objects and co-objects are used in phago and exo rules in order to illustrate the fact that both involved membranes agree on the movement. The evolution from a configuration to another is made using rules from the set of rules   R   R   R   defined as follows:        [  M  ]     v    ∥   a   ∥   u    →    [     [  ]     u   ∥  x     ∥  M  ]     v   ∥  y       fragments   subscript   fragments  normal-[  M  normal-]     v   norm  a   u    normal-→   subscript   fragments  normal-[   subscript   fragments  normal-[  normal-]    fragments  u  parallel-to  x    parallel-to  M  normal-]    fragments  v  parallel-to  y      [M]_{v\;\|\;a\;\|\;u}\rightarrow[[~{}]_{u\;\|\;x}\;\|\;M]_{v\;\|\;y}   , for     a  ∈   V  ,  u  ,  v  ,  x    ,    y  ∈    V  *   ,   u  x     ,    v  y   ∈   V  +        formulae-sequence    a   V  u  v  x     formulae-sequence    y    superscript  V      u  x         v  y    superscript  V        a\in V,u,v,x,y\in V^{*},ux,vy\in V^{+}    (pino)        [     [  M  ]     a   ∥  u     ∥  N  ]      a  ¯    ∥  v    →   M   ∥    [  N  ]     u    ∥   v   ∥   x       fragments   subscript   fragments  normal-[   subscript   fragments  normal-[  M  normal-]    fragments  a  parallel-to  u    parallel-to  N  normal-]    fragments   normal-¯  a   parallel-to  v    normal-→  M  parallel-to   subscript   fragments  normal-[  N  normal-]     u   norm  v   x      [[M]_{a\;\|\;u}\;\|\;N]_{\overline{a}\;\|\;v}\rightarrow M\;\|\;[N]_{u\;\|\;v%
 \;\|\;x}   , for a    ,   a  ¯   ∈  V  ,  u  ,  v  ,  x  ∈   V  *   ,  u  v  x  ∈   V  +      fragments  normal-,   normal-¯  a    V  normal-,  u  normal-,  v  normal-,  x    superscript  V    normal-,  u  v  x    superscript  V      ,\overline{a}\in V,u,v,x\in V^{*},uvx\in V^{+}    (exo)         [   M  1   ]     a   ∥  u     ∥    [  N  ]      a  ¯     ∥   b   ∥   v    →    [     [    [   M  1   ]     u   ∥  x    ]   b    ∥  N  ]     v   ∥  y       fragments   subscript   fragments  normal-[   subscript  M  1   normal-]    fragments  a  parallel-to  u    parallel-to   subscript   fragments  normal-[  N  normal-]      normal-¯  a    norm  b   v    normal-→   subscript   fragments  normal-[   subscript   fragments  normal-[   subscript   fragments  normal-[   subscript  M  1   normal-]    fragments  u  parallel-to  x    normal-]   b   parallel-to  N  normal-]    fragments  v  parallel-to  y      [M_{1}]_{a\;\|\;u}\;\|\;[N]_{\overline{a}\;\|\;b\;\|\;v}\rightarrow[[[M_{1}]_{%
 u\;\|\;x}]_{b}\;\|\;N]_{v\;\|\;y}   , for      a  ,   a  ¯   ,   b    ∈  V   ,    u  ,  v  ,  x  ,  y   ∈   V  *    ,     u  x   ,   v  y    ∈   V  +       formulae-sequence     a   normal-¯  a   b   V      u  v  x  y    superscript  V          u  x     v  y     superscript  V       a,\overline{a},b\!\in\!V,u,v,x,y\in V^{*},ux,vy\in V^{+}    (phago)  \noindent where    M  1     subscript  M  1    M_{1}   is a multiset and   M   M   M   ,   N   N   N   are arbitrary membrane configurations.  The computational power of systems of mutual membranes with objects on surface controlled by pairs of rules is investigated: pino/exo or phago/exo, proving that they are universal even using a small number of membranes. These cases were already investigated in [19 ]; however better results are provided by improving the number of membranes. A summary of the results (existing and new ones) is given in what follows:      Summary of Results      Operations     Pino, exo     Pino, exo     Phago, exo     Phago, exo     Phago, exo     The multiplicity vector of the multiset from all membranes is considered as a result of the computation. Thus, the result of a halting computation consists of all the vectors describing the multiplicity of objects from all the membranes; a non-halting computation provides no output. The number of objects from the right-hand side of a rule is called its weight . The family of all sets generated by systems of mutual membranes with objects on surface using at any moment during a halting computation at most   n   n   n   membranes, and any of the rules      r  1   ,   r  2    ∈   {   p  i  n  o   ,   e  x  o   ,   p  h  a  g  o   }         subscript  r  1    subscript  r  2       p  i  n  o     e  x  o     p  h  a  g  o      r_{1},r_{2}\in\{pino,exo,phago\}   of weight at most    r  ,  s     r  s    r,s   respectively, is denoted by    M  M  O   S  n    (   r  1    (  r  )   ,   r  2    (  s  )       fragments  M  M  O   subscript  S  n    fragments  normal-(   subscript  r  1    fragments  normal-(  r  normal-)   normal-,   subscript  r  2    fragments  normal-(  s  normal-)      MMOS_{n}(r_{1}(r),r_{2}(s)   ). When one of the parameters is not bounded, it is replaced it with a   *     *   .  It is proven in [19 ] that systems of eight membranes with objects on surface and using pino and exo operations of weight four and three are universal. The number of membranes can be reduced from eight to three. Howevere, in order to do this is increased the weight of the pino and exo operations with one, namely from four and three to five and four. This means that in order to construct a universal system of mobile membranes with objects on surface by using pino and exo operations, one needs to decide either he wants to minimize the number of membranes, or the weights of the operations.  Theorem.      M  M  O   S  m    (   p  i  n  o   (  r  )    ,   e  x  o   (  s  )    )    =   R  E         M  M  O   subscript  S  m      p  i  n  o  r     e  x  o  s       R  E     MMOS_{m}(pino(r),exo(s))=RE   , for all     m  ≥  3   ,    r  ≥  5   ,   s  ≥  4       formulae-sequence    m  3    formulae-sequence    r  5     s  4      m\geq 3,r\geq 5,s\geq 4   .  It is proven in [19 ] that systems of nine membranes with objects on surface and using phago and exo operations of weight four and three (or five and two) are universal. The number of membranes can be reduced from nine to four, but in order to do this the weight of the phago and exo operations are increased from four and three (or five and two) to six and three. When constructing a Turing complete system of mobile membranes with objects on surface by using phago and exo operations, the same problem appears as when using pino and exo operations: namely, to choose either minimizing the number of membranes, or the weights of the operations.  Theorem.      M  M  O   S  m    (   p  h  a  g  o   (  r  )    ,   e  x  o   (  s  )    )    =   R  E         M  M  O   subscript  S  m      p  h  a  g  o  r     e  x  o  s       R  E     MMOS_{m}(phago(r),exo(s))=RE   , for all     m  ≥  4   ,    r  ≥  6   ,   s  ≥  3       formulae-sequence    m  4    formulae-sequence    r  6     s  3      m\geq 4,r\geq 6,s\geq 3   .  Expressive Power of Mobile Membranes  In what follows it is shown that mobile membranes have at least the expressive power of mobile ambients and brane calculi by encoding mobile ambients and brane calculi in certain systems of mobile membranes.  Embedding Mobile Ambients into Mobile Membranes  The mobile membranes and the mobile ambients  [11 ] have similar structures and common concepts. Both have a hierarchical structure representing locations, intend to describe mobility, and are used in describing various biological phenomena [10,15 ]. The mobile ambients are suitable to represent the movement of ambients through ambients and the communication which takes place inside the boundaries of ambients. Membrane systems are suitable to represent the evolution of objects and movement of objects and membranes through membranes. A comparing between these new models ( mobile ambients and mobile membranes) is provided, and an encoding the ambients into membranes. This embedding is essentially presented in [5 ].  Safe ambients represent a variant of mobile ambients in which any movement of an ambient takes place only if both participants agree. The mobility is provided by the consumption of certain pairs of capabilities. The safe ambients differ from mobile ambients by the addition of co-actions: if in mobile ambients a movement is initiated only by the moving ambient and the target ambient has no control over it, in safe ambients both participants must agree by using a matching between action and co-action. A short description of pure safe ambients (SA) is given below; more information can be found in [22,23 ]. Given an infinite set of names   𝒩   𝒩   {\mathcal{N}}   (ranged over by    m  ,  n  ,  …     m  n  normal-…    m,n,\dots   ), the set   𝒜   𝒜   {\mathcal{A}}   of SA-processes (denoted by    A  ,   A  ′   ,  B  ,   B  ′   ,  …     A   superscript  A  normal-′   B   superscript  B  normal-′   normal-…    A,A^{\prime},B,B^{\prime},\dots   ) together with their capabilities (denoted by    C  ,   C  ′   ,  …     C   superscript  C  normal-′   normal-…    C,C^{\prime},\dots   ) are defined as follows:       C   :  :=  i   n    n   ∣     i  n   ¯     n   ∣  o  u   t    n   ∣     o  u  t   ¯     n   ∣  o  p  e   n    n   ∣     o  p  e  n   ¯    n     fragments  C  normal-:  assign  i  n  n  normal-∣   normal-¯    i  n    n  normal-∣  o  u  t  n  normal-∣   normal-¯    o  u  t    n  normal-∣  o  p  e  n  n  normal-∣   normal-¯    o  p  e  n    n    \qquad C::=in\ n\;\mid\;\overline{in}\ n\;\mid\;out\ n\;\mid\;\overline{out}\ %
 n\;\mid\;open\ n\;\mid\;\overline{open}\ n        A   :  :=  0  ∣   A   ∣  B  ∣  C  .  A  ∣  n   [   A   ]      fragments  A  normal-:  assign  0   normal-∣   A  normal-∣  B   normal-∣   C  normal-.  A   normal-∣   n   fragments  normal-[  A  normal-]     \qquad A::=0\quad\mid\quad A\;\mid\;B\quad\mid\quad C.A\quad\mid\quad n[\;A\;]     Process   0   0    is an inactive mobile ambient. A movement    C  .  A     formulae-sequence  C  A    C.\,A   is provided by the capability   C   C   C   , followed by the execution of   A   A   A   . An ambient    n   [   A   ]       n   delimited-[]  A     n[\;A\;]   represents a bounded place labelled by   n   n   n   in which a SA-process   A   A   A   is executed.     A   ∣  B     fragments  A  normal-∣  B    A\,\mid\,B   is a parallel composition of mobile ambients    A   A   A   and   B   B   B   .     (   ν  n   )   A        ν  n   A    (\nu n)A   creates a new unique name   n   n   n   within the scope of   A   A   A   . The structural congruence     ≡   a  m  b      subscript     a  m  b     \equiv_{amb}   over ambients is the least congruence such that    (  𝒜  ,  ∣  ,  0  )     fragments  normal-(  A  normal-,  normal-∣  normal-,  0  normal-)    (\mathcal{A},\mid,0)   is a commutative monoid.  The operational semantics of pure ambient safe calculus are defined in terms of a reduction relation    ⇒   a  m  b      subscript  normal-⇒    a  m  b     \Rightarrow_{amb}   by the following axioms and rules.  Axioms:       (  I  n  )   n   [  i   n   m  .  A  ∣    A  ′    ]   ∣  m   [     i  n   ¯    m  .  B  ∣    B  ′    ]    ⇒   a  m  b    m   [  n   [  A  ∣    A  ′    ]   ∣  B  ∣    B  ′    ]      fragments   fragments  normal-(  I  n  normal-)    n   fragments  normal-[  i  n  m  normal-.  A  normal-∣   superscript  A  normal-′   normal-]   normal-∣  m   fragments  normal-[   normal-¯    i  n    m  normal-.  B  normal-∣   superscript  B  normal-′   normal-]    subscript  normal-⇒    a  m  b    m   fragments  normal-[  n   fragments  normal-[  A  normal-∣   superscript  A  normal-′   normal-]   normal-∣  B  normal-∣   superscript  B  normal-′   normal-]     (In)\quad n[\;in\ m.A\mid A^{\prime}\;]\mid m[\;\overline{in}\ m.B\mid B^{%
 \prime}\;]\Rightarrow_{amb}m[\;n[\;A\mid A^{\prime}\;]\mid B\mid B^{\prime}\;]   ;       (  O  u  t  )   m   [  n   [  o  u   t   m  .  A  ∣    A  ′    ]   ∣     o  u  t   ¯    m  .  B  ∣    B  ′    ]    ⇒   a  m  b    n   [  A  ∣    A  ′    ]   ∣  m   [  B  ∣    B  ′    ]      fragments   fragments  normal-(  O  u  t  normal-)    m   fragments  normal-[  n   fragments  normal-[  o  u  t  m  normal-.  A  normal-∣   superscript  A  normal-′   normal-]   normal-∣   normal-¯    o  u  t    m  normal-.  B  normal-∣   superscript  B  normal-′   normal-]    subscript  normal-⇒    a  m  b    n   fragments  normal-[  A  normal-∣   superscript  A  normal-′   normal-]   normal-∣  m   fragments  normal-[  B  normal-∣   superscript  B  normal-′   normal-]     (Out)\quad m[\;n[\;out\ m.A\mid A^{\prime}\;]\mid\overline{out}\ m.B\mid B^{%
 \prime}\;]\Rightarrow_{amb}n[\;A\mid A^{\prime}\;]\mid m[\;B\mid B^{\prime}\;]   ;       (  O  p  e  n  )   o  p  e   n   n  .   A   ∣  n   [     o  p  e  n   ¯    n  .  B  ∣    B  ′    ]    ⇒   a  m  b     A   ∣   B   ∣   B  ′      fragments   fragments  normal-(  O  p  e  n  normal-)    o  p  e  n  n  normal-.  A  normal-∣  n   fragments  normal-[   normal-¯    o  p  e  n    n  normal-.  B  normal-∣   superscript  B  normal-′   normal-]    subscript  normal-⇒    a  m  b    A  normal-∣  B  normal-∣   superscript  B  normal-′     (Open)\quad open\ n.A\;\mid\;n[\;\overline{open}\ n.B\mid B^{\prime}\;]%
 \Rightarrow_{amb}A\;\mid\;B\;\mid\;B^{\prime}   .  Rules:       (   C  o  m  p  1   )     A   ⇒   a  m  b     A  ′      A   ∣  B   ⇒   a  m  b      A  ′    ∣  B    ;   (   C  o  m  p  2   )      A   ⇒   a  m  b     A  ′     B   ⇒   a  m  b     B  ′       A   ∣  B   ⇒   a  m  b      A  ′    ∣   B  ′          C  o  m  p  1       subscript  normal-⇒    a  m  b    A   superscript  A  normal-′     fragments  A  normal-∣  B   subscript  normal-⇒    a  m  b     superscript  A  normal-′   normal-∣  B      C  o  m  p  2      formulae-sequence    subscript  normal-⇒    a  m  b    A   superscript  A  normal-′      subscript  normal-⇒    a  m  b    B   superscript  B  normal-′      fragments  A  normal-∣  B   subscript  normal-⇒    a  m  b     superscript  A  normal-′   normal-∣   superscript  B  normal-′       (Comp1)\quad\frac{\displaystyle A\Rightarrow_{amb}A^{\prime}}{\displaystyle A%
 \;\mid\;B\Rightarrow_{amb}A^{\prime}\;\mid\;B};\qquad\qquad\qquad\qquad(Comp2)%
 \quad\frac{\displaystyle A\Rightarrow_{amb}A^{\prime}\quad\displaystyle B%
 \Rightarrow_{amb}B^{\prime}}{\displaystyle A\;\mid\;B\Rightarrow_{amb}A^{%
 \prime}\;\mid\;B^{\prime}}   ;       (   A  m  b   )     A   ⇒   a  m  b     A  ′      n   [   A   ]     ⇒   a  m  b     n   [    A  ′    ]      ;   (   S  t  r  u  c   )      A  ≡   A  ′    ,     A  ′    ⇒   a  m  b     B  ′    ,    B  ′   ≡  B      A   ⇒   a  m  b    B         A  m  b       subscript  normal-⇒    a  m  b    A   superscript  A  normal-′      subscript  normal-⇒    a  m  b      n   delimited-[]  A      n   delimited-[]   superscript  A  normal-′         S  t  r  u  c      formulae-sequence    A   superscript  A  normal-′     formulae-sequence    subscript  normal-⇒    a  m  b     superscript  A  normal-′    superscript  B  normal-′       superscript  B  normal-′   B       subscript  normal-⇒    a  m  b    A  B      (Amb)\quad\frac{\displaystyle A\Rightarrow_{amb}A^{\prime}}{\displaystyle n[\;%
 A\;]\Rightarrow_{amb}n[\;A^{\prime}\;]};\qquad\qquad\qquad\qquad(Struc)\quad%
 \frac{\displaystyle A\equiv A^{\prime},\ A^{\prime}\Rightarrow_{amb}B^{\prime}%
 ,\ B^{\prime}\equiv B}{\displaystyle A\Rightarrow_{amb}B}   .      ⇒   a  m  b   *     subscript   superscript  normal-⇒      a  m  b     \Rightarrow^{*}_{amb}   denotes a reflexive and transitive closure of the binary relation    ⇒   a  m  b      subscript  normal-⇒    a  m  b     \Rightarrow_{amb}   .  A translation from the set   𝒜   𝒜   \mathcal{A}   of safe ambients to the set   ℳ   ℳ   \mathcal{M}   of membrane configurations is given formally as follows:  Definition. A translation    𝒯  :   𝒜  →  ℳ      normal-:  𝒯   normal-→  𝒜  ℳ     \mathcal{T}:\mathcal{A}\rightarrow\mathcal{M}   is given by     𝒯   (  A  )    =   d  l  o  c   k    𝒯  1    (  A  )          𝒯  A     d  l  o  c  k   subscript  𝒯  1   A     \mathcal{T}(A)=dlock~{}\mathcal{T}_{1}(A)   , where     𝒯  1   :   𝒜  →  ℳ      normal-:   subscript  𝒯  1    normal-→  𝒜  ℳ     \mathcal{T}_{1}:\mathcal{A}\rightarrow\mathcal{M}   is         𝒯   1    (  A  )    =          subscript  𝒯  1   A   absent    \qquad\mathcal{T}_{1}(A)=       {      c  a   p    n   ∥    [  ]    c  a   p   n         if  A   =   c  a   p   n         c  a   p    n   ∥    [   𝒯  1    (   A  1   )   ]    c  a   p   n          if  A   =   c  a   p   n    .   A  1          [    𝒯  1    (   A  1   )    ]   n       if  A   =   n   [    A  1    ]           [  ]   n       if  A   =   n   [  ]           𝒯  1    (   A  1   )   ∥   𝒯  1    (   A  2   )       if  A  =    A  1    ∣   A  2        λ      if  A   =  0         cases   fragments  c  a  p  n  parallel-to   subscript   fragments  normal-[  normal-]     c  a  p  n         if  A     c  a  p  n     fragments  c  a  p  n  parallel-to   subscript   fragments  normal-[   subscript  𝒯  1    fragments  normal-(   subscript  A  1   normal-)   normal-]     c  a  p  n      formulae-sequence      if  A     c  a  p  n     subscript  A  1     subscript   delimited-[]     subscript  𝒯  1    subscript  A  1     n       if  A     n   delimited-[]   subscript  A  1       subscript   n       if  A     n      fragments   subscript  𝒯  1    fragments  normal-(   subscript  A  1   normal-)   parallel-to   subscript  𝒯  1    fragments  normal-(   subscript  A  2   normal-)     fragments  if  A    subscript  A  1   normal-∣   subscript  A  2    λ      if  A   0     \begin{cases}cap~{}n\;\|\;[~{}]_{cap~{}n}&\mbox{if }A=cap~{}n\\
 cap~{}n\;\|\;[\;\mathcal{T}_{1}(A_{1})\;]_{cap~{}n}&\mbox{if }A=cap~{}n.\,A_{1%
 }\\
 \;[\;\mathcal{T}_{1}(A_{1})\;]_{n}&\mbox{if }A=n[\;A_{1}\;]\\
 \;[~{}]_{n}&\mbox{if }A=n[~{}]\\
 \mathcal{T}_{1}(A_{1})\;\|\;\mathcal{T}_{1}(A_{2})&\mbox{if }A=A_{1}\,\mid\,A_%
 {2}\\
 \lambda&\mbox{if }A=0\end{cases}     An object    d  l  o  c  k      d  l  o  c  k    dlock   is placed near the membrane structure to prevent the consumption of capability objects in a membrane system which corresponds to a mobile ambient which cannot evolve further.  Proposition. Structurally congruent ambients are translated into structurally congruent membrane systems; moreover, structurally congruent translated membrane systems correspond to structurally congruent ambients:     A    ≡   a  m  b    B      subscript     a  m  b    A  B    \qquad\qquad A\equiv_{amb}B   iff     𝒯   (  A  )     ≡   m  e  m     𝒯   (  B  )        subscript     m  e  m      𝒯  A     𝒯  B     \mathcal{T}(A)\equiv_{mem}\mathcal{T}(B)   .  Considering two membrane systems   M   M   M   and   N   N   N   with only one object    d  l  o  c  k      d  l  o  c  k    dlock   ,    M   ⇒   m  e  m    N      subscript  normal-⇒    m  e  m    M  N    M\Rightarrow_{mem}N   if there is a sequence of rules     r  1   ,  …  ,   r  i       subscript  r  1   normal-…   subscript  r  i     r_{1},\ldots,r_{i}   , from the particular set of rules used in [7 ], such that applying the rules from this set to the membrane configuration   M   M   M   it is obtained the membrane configuration   N   N   N   .  Proposition. If   A   A   A   and   B   B   B   are two ambients and   M   M   M   is a membrane system such that    A   ⇒   a  m  b    B      subscript  normal-⇒    a  m  b    A  B    A\Rightarrow_{amb}B   and    M  =   𝒯   (  A  )        M    𝒯  A     M=\mathcal{T}(A)   , then there exists a set of rules applicable to   M   M   M   such that    M   ⇒   m  e  m    N      subscript  normal-⇒    m  e  m    M  N    M\Rightarrow_{mem}N   , and    N  =   𝒯   (  B  )        N    𝒯  B     N=\mathcal{T}(B)   .  Proposition. Let   M   M   M   and   N   N   N   be two membrane systems with only one    d  l  o  c  k      d  l  o  c  k    dlock   object, and an ambient   A   A   A   such that    M  =   𝒯   (  A  )        M    𝒯  A     M=\mathcal{T}(A)   . If there is a set of rules applicable to   M   M   M   such that    M   ⇒   m  e  m    N      subscript  normal-⇒    m  e  m    M  N    M\Rightarrow_{mem}N   , then there exists an ambient   B   B   B   with    A   ⇒   a  m  b   *   B      superscript   subscript  normal-⇒    a  m  b      A  B    A\Rightarrow_{amb}^{*}B   and    N  =   𝒯   (  B  )        N    𝒯  B     N=\mathcal{T}(B)   . The number of pairs of non-star objects consumed in membrane systems is equal with the number of pairs of capabilities consumed in ambients.  Theorem.  (Operational correspondence)   If    A   ⇒   a  m  b    B      subscript  normal-⇒    a  m  b    A  B    A\Rightarrow_{amb}B   , then     𝒯   (  A  )     ⇒   m  e  m     𝒯   (  B  )        subscript  normal-⇒    m  e  m      𝒯  A     𝒯  B     \mathcal{T}(A)\Rightarrow_{mem}\mathcal{T}(B)   .  If     𝒯   (  A  )     ⇒   m  e  m    M      subscript  normal-⇒    m  e  m      𝒯  A   M    \mathcal{T}(A)\Rightarrow_{mem}M   , then exists   B   B   B   such that    A   ⇒   a  m  b    B      subscript  normal-⇒    a  m  b    A  B    A\Rightarrow_{amb}B   and    M  =   𝒯   (  B  )        M    𝒯  B     M=\mathcal{T}(B)   .   Embedding Brane Calculus into Mobile Membranes  A fragment of brane calculus called PEP, and mutual mobile membranes with objects on surface as a variant of systems with mobile membranes are considered. The mobile membranes with objects on surface is inspired by a model of membrane system introduced in [12 ] having objects attached to membranes. A simulation of the PEP fragment of brane calculus by using mutual membranes with objects on surface is presented. This approach is related to some other papers trying to show the relationship between membrane systems and brane calculus [8,9,14,18,19 ].  As it is expressed in [24 ], "at the first sight the role of objects placed on membranes is different in membrane and brane systems: in membrane computing the focus is on the evolution of objects themselves, while in brane calculi the objects ("proteins") mainly control the evolution of membranes". By defining an encoding of the PEP fragment of brane calculus into mutual membranes with objects on surface, it is shown that the difference between the two models is not significant. Another difference regarding the semantics of the two formalisms is expressed in [8 ]: "whereas brane calculi are usually equipped with an interleaving, sequential semantics (each computational step consists of the execution of a single instruction), the usual semantics in membrane computing is based on maximal parallelism (a computational step is composed of a maximal set of independent interactions)".  Brane calculus [10 ] deals with membranes representing the sites of activity; thus a computation happens on the membrane surface. The operations of the two basic brane calculi, pino, exo, phago (PEP) and mate, drip, bud (MBD) are directly inspired by biologic processes such as endocytosis, exocytosis and mitosis. The latter operations can be simulated using the formers one [10 ].      Pino/Exo/Phage Calculus - Its Syntax      Systems     Branes     Actions     Membranes are formed of patches, where a patch   s   s   s   can be composed from other patches    s  =    s  1    ∣   s  2      fragments  s    subscript  s  1   normal-∣   subscript  s  2     s=s_{1}\;\mid\;s_{2}   . An elementary patch   s   s   s   consists of an action   a   a   a   followed, after the consumption of it, by another patch       s  1   s   =  a   .   s  1      formulae-sequence       subscript  s  1   s   a    subscript  s  1     s_{1}s=a.s_{1}   . Actions often come in complementary pairs which cause the interaction between membranes. The names   n   n   n   are used to pair-up actions and co-actions. Cardelli motivates that the replication operator is used to model the notion of a "multitude" of components of the same kind, which is in fact a standard situation in biology [10 ]. The replicator operator is not used because a membrane system cannot be defined without knowing exactly the initial membrane structure.   𝒫   𝒫   \mathcal{P}   denotes the set of brane systems defined above. Some abbreviations can be made    a  .0      a  .0    a.0   as   a   a   a   ,    0   (  P  )       0  P    0(P)   as    (  P  )    P   (P)   , and    0   (  )       0     0(~{})   as    (  )      (~{})   .  The structural congruence relation is a way of rearranging the system such that the interacting parts come together, as illustrated in what follows:      Pino/Exo/Phage Calculus - Structural Congruence           P  ∘  Q    ≡  b    Q  ∘  P       subscript   b     P  Q     Q  P     P\circ Q\equiv_{b}Q\circ P             P  ∘   (   Q  ∘  R   )     ≡  b     (   P  ∘  Q   )   ∘  R       subscript   b     P    Q  R        P  Q   R     P\circ(Q\circ R)\equiv_{b}(P\circ Q)\circ R             absent   \qquad             absent   \qquad            P   ≡  b     Q  implies  P   ∘  R    ≡  b    Q  ∘  R         subscript   b   P      Q  implies  P   R      subscript   b       Q  R      P\equiv_{b}Q\mbox{implies }P\circ R\equiv_{b}Q\circ R            P   ≡  b    Q  and  σ    ≡  b    τ  implies  σ   (  P  )     ≡  b    τ   (  Q  )          subscript   b   P    Q  and  σ      subscript   b       τ  implies  σ  P      subscript   b       τ  Q      P\equiv_{b}Q\mbox{and }\sigma\equiv_{b}\tau\mbox{implies }\sigma(P)\equiv_{b}%
 \tau(Q)        In what follows the reduction rules of the calculus are presented:      Pino/Exo/Phago Calculus - Reduction Rules          p  i  n  o   (  ρ  )   .  σ  ∣   σ  0    (  P  )    →  b   σ  ∣   σ  0    (  ρ   (  )   ∘  P  )      fragments  p  i  n  o   fragments  normal-(  ρ  normal-)   normal-.  σ  normal-∣   subscript  σ  0    fragments  normal-(  P  normal-)    subscript  normal-→  b   σ  normal-∣   subscript  σ  0    fragments  normal-(  ρ   fragments  normal-(  normal-)    P  normal-)     pino(\rho).\sigma\mid\sigma_{0}(P)\rightarrow_{b}\sigma\mid\sigma_{0}(\rho(~{}%
 )\circ P)              n  ¯   ↖   .  τ  ∣   τ  0    (   n  ↖   .  σ  ∣   σ  0    (  P  )   ∘  Q  )    →  b   P  ∘  σ  ∣   σ  0   ∣  τ  ∣   τ  0    (  Q  )      fragments   superscript   normal-¯  n   normal-↖   normal-.  τ  normal-∣   subscript  τ  0    fragments  normal-(   superscript  n  normal-↖   normal-.  σ  normal-∣   subscript  σ  0    fragments  normal-(  P  normal-)    Q  normal-)    subscript  normal-→  b   P   σ  normal-∣   subscript  σ  0   normal-∣  τ  normal-∣   subscript  τ  0    fragments  normal-(  Q  normal-)     \overline{n}^{\nwarrow}.\tau\mid\tau_{0}(n^{\nwarrow}.\sigma\mid\sigma_{0}(P)%
 \circ Q)\rightarrow_{b}P\circ\sigma\mid\sigma_{0}\mid\tau\mid\tau_{0}(Q)             n  ↘   .  σ  ∣   σ  0    (  P  )   ∘    n  ¯   ↘    (  ρ  )   .  τ  ∣   τ  0    (  Q  )    →  b   τ  ∣   τ  0    (  ρ   (  σ  ∣   σ  0    (  P  )   )   ∘  Q  )      fragments   superscript  n  normal-↘   normal-.  σ  normal-∣   subscript  σ  0    fragments  normal-(  P  normal-)     superscript   normal-¯  n   normal-↘    fragments  normal-(  ρ  normal-)   normal-.  τ  normal-∣   subscript  τ  0    fragments  normal-(  Q  normal-)    subscript  normal-→  b   τ  normal-∣   subscript  τ  0    fragments  normal-(  ρ   fragments  normal-(  σ  normal-∣   subscript  σ  0    fragments  normal-(  P  normal-)   normal-)    Q  normal-)     n^{\searrow}.\sigma\mid\sigma_{0}(P)\circ\overline{n}^{\searrow}(\rho).\tau%
 \mid\tau_{0}(Q)\rightarrow_{b}\tau\mid\tau_{0}(\rho(\sigma\mid\sigma_{0}(P))%
 \circ Q)            P   →  b     Q  implies  P   ∘  R    →  b    Q  ∘  R         subscript  normal-→  b   P      Q  implies  P   R      subscript  normal-→  b       Q  R      P\rightarrow_{b}Q\mbox{implies }P\circ R\rightarrow_{b}Q\circ R            P   →  b    Q  implies  σ   (  P  )     →  b    σ   (  Q  )          subscript  normal-→  b   P    Q  implies  σ  P      subscript  normal-→  b       σ  Q      P\rightarrow_{b}Q\mbox{implies }\sigma(P)\rightarrow_{b}\sigma(Q)            P   ≡  b     P  ′   and   P  ′     →  b     Q  ′   and   Q  ′     ≡  b    Q  implies  P    →  b   Q        subscript   b   P     superscript  P  normal-′   and   superscript  P  normal-′       subscript  normal-→  b        superscript  Q  normal-′   and   superscript  Q  normal-′       subscript   b       Q  implies  P      subscript  normal-→  b     Q     P\equiv_{b}P^{\prime}\mbox{and }P^{\prime}\rightarrow_{b}Q^{\prime}\mbox{and }%
 Q^{\prime}\equiv_{b}Q\mbox{implies }P\rightarrow_{b}Q        The action    p  i  n  o   (  ρ  )       p  i  n  o  ρ    pino(\rho)   creates an empty bubble within the membrane where the    p  i  n  o      p  i  n  o    pino   action resides; imagine that the original membrane buckles towards inside and pinches off. The patch   σ   σ   \sigma   on the empty bubble is a parameter of    p  i  n  o      p  i  n  o    pino   . The exo action    n  ↖     superscript  n  normal-↖    n^{\nwarrow}   , which comes with a complementary co-action     n  ¯   ↖     superscript   normal-¯  n   normal-↖    \overline{n}^{\nwarrow}   , models the merging of two nested membranes, which starts with the membranes touching at a point. In the process (which is a smooth, continuous process), the subsystem   P   P   P   gets expelled to the outside, and all the residual patches of the two membranes become contiguous. The phago action    n  ↘     superscript  n  normal-↘    n^{\searrow}   , which also comes with a complementary co-action      n  ¯   ↘    (  ρ  )        superscript   normal-¯  n   normal-↘   ρ    \overline{n}^{\searrow}(\rho)   , models a membrane (the one with   Q   Q   Q   ) "eating" another membrane (the one with   P   P   P   ). Again, the process has to be smooth and continuous, so it is biologically implementable. It proceeds by the   Q   Q   Q   membrane wrapping around the   P   P   P   membrane and joining itself on the other side. Hence, an additional layer of membrane is created around the eaten membrane: the patch on that membrane is specified by the parameter   ρ   ρ   \rho   of the co-phago action (similar to the parameter of the pino action).  A translation from the set   𝒫   𝒫   \mathcal{P}   of brane processes to the set   ℳ   ℳ   \mathcal{M}   of membrane configurations is given formally as follows:  Definition A translation    𝒯  :   𝒫  →  ℳ      normal-:  𝒯   normal-→  𝒫  ℳ     \mathcal{T}:\mathcal{P}\rightarrow\mathcal{M}   is given by       𝒯   (  P  )    =         𝒯  P   absent    \mathcal{T}(P)=       {       [  ]    𝒮   (  σ  )         if  P   =   σ   (  )           [   𝒯   (  R  )    ]    𝒮   (  σ  )         if  P   =   σ   (  R  )          𝒯   (  Q  )   ∥  𝒯   (  R  )       if  P  =   Q   ∣  R         cases   subscript     𝒮  σ        if  P     σ      subscript   delimited-[]    𝒯  R      𝒮  σ        if  P     σ  R     fragments  T   fragments  normal-(  Q  normal-)   parallel-to  T   fragments  normal-(  R  normal-)     fragments  if  P   Q  normal-∣  R     \begin{cases}\;[~{}]_{\mathcal{S}(\sigma)}&\mbox{if }P=\sigma(~{})\\
 \;[\mathcal{T}(R)]_{\mathcal{S}(\sigma)}&\mbox{if }P=\sigma(R)\\
 \mathcal{T}(Q)\;\|\;\mathcal{T}(R)&\mbox{if }P=Q\,\mid\,R\\
 \end{cases}     where    𝒮  :   𝒫  →   V  *       normal-:  𝒮   normal-→  𝒫   superscript  V       \mathcal{S}:\mathcal{P}\rightarrow V^{*}   is defined as:       𝒮   (  σ  )    =         𝒮  σ   absent    \mathcal{S}(\sigma)=       {     σ      if  σ   =    n  ↘   o  r  σ   =    n  ↖   o  r  σ   =    n  ¯   ↖            n  ¯   ↘    ∥  S   (  ρ  )        if  σ   =     n  ¯   ↘    (  ρ  )          p  i  n   o   ∥  S   (  ρ  )        if  σ   =   p  i  n  o   (  ρ  )          𝒮   (  a  )   ∥  𝒮   (  ρ  )         if  σ   =  a   .  ρ        𝒮   (  τ  )   ∥  𝒮   (  ρ  )       if  σ  =   τ   ∣  ρ       λ      if  σ   =  0         cases  σ        if  σ      superscript  n  normal-↘   o  r  σ           superscript  n  normal-↖   o  r  σ         superscript   normal-¯  n   normal-↖      fragments   superscript   normal-¯  n   normal-↘   parallel-to  S   fragments  normal-(  ρ  normal-)        if  σ      superscript   normal-¯  n   normal-↘   ρ     fragments  p  i  n  o  parallel-to  S   fragments  normal-(  ρ  normal-)        if  σ     p  i  n  o  ρ     fragments  S   fragments  normal-(  a  normal-)   parallel-to  S   fragments  normal-(  ρ  normal-)     formulae-sequence      if  σ   a   ρ    fragments  S   fragments  normal-(  τ  normal-)   parallel-to  S   fragments  normal-(  ρ  normal-)     fragments  if  σ   τ  normal-∣  ρ   λ      if  σ   0     \begin{cases}\sigma&\mbox{if }\sigma=n^{\searrow}or\sigma=n^{\nwarrow}or\sigma%
 =\overline{n}^{\nwarrow}\\
 \overline{n}^{\searrow}\;\|\;S(\rho)&\mbox{if }\sigma=\overline{n}^{\searrow}(%
 \rho)\\
 pino\;\|\;S(\rho)&\mbox{if }\sigma=pino(\rho)\\
 \mathcal{S}(a)\;\|\;\mathcal{S}(\rho)&\mbox{if }\sigma=a.\rho\\
 \mathcal{S}(\tau)\;\|\;\mathcal{S}(\rho)&\mbox{if }\sigma=\tau\,\mid\,\rho\\
 \lambda&\mbox{if }\sigma=0\end{cases}     The rules of the systems of mutual membranes with objects on surface (MMOS) are presented in what follows.      Pino/Exo/Phago Rules of MMOS      Pino     Exo     Phago     where    M  1     subscript  M  1    M_{1}   is a multiset and   M   M   M   ,   N   N   N   are arbitrary membrane configurations.  The next result claims that two PEP systems which are structurally equivalent are translated into systems of mutual membranes with objects on surface which are structurally equivalent.  Proposition. If   P   P   P   is a PEP system and    M  =   𝒯   (  P  )        M    𝒯  P     M=\mathcal{T}(P)   is a system of mutual membranes with objects on surface, then there exists   N   N   N   such that    M   ≡  m   N      subscript   m   M  N    M\equiv_{m}N   and    N  =   𝒯   (  Q  )        N    𝒯  Q     N=\mathcal{T}(Q)   , whenever    P   ≡  b   Q      subscript   b   P  Q    P\equiv_{b}Q   .  Proposition. If   P   P   P   is a PEP system and    M  =   𝒯   (  P  )        M    𝒯  P     M=\mathcal{T}(P)   is a system of mutual membranes with objects on surface, then there exists   Q   Q   Q   such that    N  =   𝒯   (  Q  )        N    𝒯  Q     N=\mathcal{T}(Q)   whenever    M   ≡  m   N      subscript   m   M  N    M\equiv_{m}N   .  Remark. In the last proposition it is possible that    P   ≢  b   Q      subscript  not-equivalent-to  b   P  Q    P\not\equiv_{b}Q   . Suppose     P  =   n  ↘    .    n  ↖    (  )       formulae-sequence    P   superscript  n  normal-↘       superscript  n  normal-↖       P=n^{\searrow}.n^{\nwarrow}(~{})   . By translation it is obtained that    M  =  𝒯  =    [  ]      n  ↘    ∥   n  ↖      ≡  m     [  ]      n  ↖    ∥   n  ↘     =  N        M  𝒯        subscript    fragments   superscript  n  normal-↘   parallel-to   superscript  n  normal-↖        subscript   m      subscript    fragments   superscript  n  normal-↖   parallel-to   superscript  n  normal-↘          N     M=\mathcal{T}=[~{}]_{n^{\searrow}\;\|\;n^{\nwarrow}}\equiv_{m}[~{}]_{n^{%
 \nwarrow}\;\|\;n^{\searrow}}=N   . It is possible to have     Q  =   n  ↖    .    n  ↘    (  )       formulae-sequence    Q   superscript  n  normal-↖       superscript  n  normal-↘       Q=n^{\nwarrow}.n^{\searrow}(~{})   or    Q  =   n  ↖   ∣   n  ↘    (  )      fragments  Q    superscript  n  normal-↖   normal-∣   superscript  n  normal-↘    fragments  normal-(  normal-)     Q=n^{\nwarrow}\mid n^{\searrow}(~{})   such that    N  =   𝒯   (  Q  )        N    𝒯  Q     N=\mathcal{T}(Q)   , but    P   ≢  b   Q      subscript  not-equivalent-to  b   P  Q    P\not\equiv_{b}Q   .  Proposition. If   P   P   P   is a PEP system and    M  =   𝒯   (  P  )        M    𝒯  P     M=\mathcal{T}(P)   is a system of mutual membranes with objects on surface, then there exists   N   N   N   such that    M  →  N     normal-→  M  N    M\rightarrow N   and    N  =   𝒯   (  Q  )        N    𝒯  Q     N=\mathcal{T}(Q)   , whenever    P   →  b   Q      subscript  normal-→  b   P  Q    P\rightarrow_{b}Q   .  Proposition. If   P   P   P   is a PEP system and    M  =   𝒯   (  P  )        M    𝒯  P     M=\mathcal{T}(P)   is a system of mutual membranes with objects on surface, then there exists   Q   Q   Q   such that    N  =   𝒯   (  Q  )        N    𝒯  Q     N=\mathcal{T}(Q)   whenever    M  →  N     normal-→  M  N    M\rightarrow N   .  The following remark is a consequence of the fact that a formalism using an interleaving semantic is translated into a formalism working in parallel.  Remark. The last proposition allows    P   ↛  b   Q      subscript  ↛  b   P  Q    P\not\rightarrow_{b}Q   . Let us assume    P  =    n  ¯   ↖   .    n  ¯   ↖    (   n  ↖   .   n  ↘    (  )   )      fragments  P    superscript   normal-¯  n   normal-↖   normal-.   superscript   normal-¯  n   normal-↖    fragments  normal-(   superscript  n  normal-↖   normal-.   superscript  n  normal-↘    fragments  normal-(  normal-)   normal-)     P=\overline{n}^{\nwarrow}.\overline{n}^{\nwarrow}(n^{\nwarrow}.n^{\searrow}(~{%
 }))   . By translation, it is obtained that    M  =    (    (  )      n  ↖    ∥   n  ↘     )       n  ¯   ↖    ∥    n  ¯   ↖         M   subscript   subscript    fragments   superscript  n  normal-↖   parallel-to   superscript  n  normal-↘      fragments   superscript   normal-¯  n   normal-↖   parallel-to   superscript   normal-¯  n   normal-↖       M=((~{})_{n^{\nwarrow}\;\|\;n^{\searrow}})_{\overline{n}^{\nwarrow}\;\|\;%
 \overline{n}^{\nwarrow}}   , such that    M  →    [  ]      n  ↘    ∥    n  ¯   ↖        normal-→  M   subscript    fragments   superscript  n  normal-↘   parallel-to   superscript   normal-¯  n   normal-↖       M\rightarrow[~{}]_{n^{\searrow}\;\|\;\overline{n}^{\nwarrow}}   . It can be observed that there exist     Q  =   n  ↘    .     n  ¯   ↖    (  )       formulae-sequence    Q   superscript  n  normal-↘       superscript   normal-¯  n   normal-↖       Q=n^{\searrow}.\overline{n}^{\nwarrow}(~{})   such that    N  =   𝒯   (  Q  )        N    𝒯  Q     N=\mathcal{T}(Q)   , but    P   ↛  b   Q      subscript  ↛  b   P  Q    P\not\rightarrow_{b}Q   .  These results are presented together with their proofs in [2 ].  References  1. B. Aman, G.Ciobanu. Describing the Immune System Using Enhanced Mobile Membranes. Electr. Notes in Theoretical Computer Science , vol.194(3), 5—18, 2008.  2. B. Aman, G.Ciobanu. Membrane Systems with Surface Objects. Proc. of the International Workshop on Computing with Biomolecules (CBM 2008) , 17—29, 2008.  3. B. Aman, G.Ciobanu. Resource Competition and Synchronization in Membranes. Proceedings of SYNASC08 , IEEE Computing Society, 145-151, 2009.  4. B. Aman, G.Ciobanu. Simple, Enhanced and Mutual Mobile Membranes. ''Transactions on Computational Systems Biology XI', LNBI vol.5750, 26-44, 2009.  5. B. Aman, G.Ciobanu. Translating Mobile Ambients into P Systems. Electr. Notes in Theoretical Computer Science , vol.171(2), 11—23, 2007.  6. B. Aman, G.Ciobanu. Turing Completeness Using Three Mobile Membranes. Lecture Notes in Computer Science , vol.5715, 42—55, 2009.  7. B. Aman, G. Ciobanu. On the Relationship Between Membranes and Ambients. Biosystems , vol.91(3), 515—530, 2008.  8. N. Busi. On the Computational Power of the Mate/Bud/Drip Brane Calculus: Interleaving vs. Maximal Parallelism. Lecture Notes in Computer Science , vol.3850, Springer, 144-158, 2006.  9. N. Busi, R. Gorrieri. On the computational power of Brane calculi. Third Workshop on Computational Methods in Systems Biology , 106-117, 2005.  10. L. Cardelli. Brane Calculi. Interactions of biological membranes. Lecture Notes in BioInformatics , vol.3082, 257-278, Springer, 2004.  11. L. Cardelli, A. Gordon. Mobile Ambients. Lecture Notes in Computer Science , vol.1378, Springer, 140-155, 1998.  12. L. Cardelli, Gh. Păun. A universality result for a (mem)brane calculus based on mate/drip operations. Intern. J. Foundations of Computer Science , vol.17(1), 49-68, 2006.  13. L. Cardelli, S. Pradalier. Where Membranes Meet Complexes. BioConcur , 2005.  14. M. Cavaliere, S. Sedwards. Membrane Systems with Peripheral Proteins: Transport and Evolution. Electr. Notes in Theoretical Computer Science , vol.171(2), 37-53, 2007.  15. G. Ciobanu, Gh. Păun, M.J. Pérez-Jiménez. Application of Membrane Computing . Springer, 2006.  16. J. Dassow, Gh. Păun. Regulated Rewriting in Formal Language Theory . Springer-Verlag, 1990.  17. S.N. Krishna. The Power of Mobility: Four Membranes Suffice. Lecture Notes in Computer Science , vol.3526, 242—251, Springer, 2005.  18. S.N. Krishna. Membrane computing with transport and embedded proteins. Theoretical Computer Science , vol.410, 355-375, 2009.  19. S.N. Krishna. Universality results for P systems based on brane calculi operations. Theoretical Computer Science , vol.371, 83-105, 2007.  20. S.N. Krishna, G. Ciobanu. On the Computational Power of Enhanced Mobile Membranes. Lecture Notes in Computer Science , vol.5028, 326—335, 2008.  21. S.N. Krishna, Gh. Păun. P Systems with Mobile Membranes. Natural Computing , vol.4(3), 255—274, 2005.  22. F. Levi, D. Sangiorgi. Controlling Interference in Ambients. Proceedings POPL'00 , ACM Press, 352-364, 2000.  23. F. Levi, D. Sangiorgi. Mobile Safe Ambients. ACM TOPLAS , vol.25, 1-69, 2003.  24. Gh. Păun. Membrane Computing. An Introduction. Springer-Verlang, Berlin, 2002.  25. Gh. Păun. Membrane Computing and Brane Calculi(Some Personal Notes). Electr. Notes in Theoretical Computer Science , vol.171, 3-10, 2007.  "  Category:Cell biology   