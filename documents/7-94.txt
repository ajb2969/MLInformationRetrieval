


Branch and cut




Branch and cut

Branch and cut1 (sometimes written as branch-and-cut) is a method of combinatorial optimization for solving integer linear programs (ILPs), that is, linear programming (LP) problems where some or all the unknowns are restricted to integer values.2 Branch and cut involves running a branch and bound algorithm and using cutting planes to tighten the linear programming relaxations. Note that if cuts are only used to tighten the initial LP relaxation, the algorithm is called cut and branch.
Description of the Algorithm
This description assumes the ILP is a maximization problem.
The method solves the linear program without the integer constraint using the regular simplex algorithm. When an optimal solution is obtained, and this solution has a non-integer value for a variable that is supposed to be integer, a cutting plane algorithm may be used to find further linear constraints which are satisfied by all feasible integer points but violated by the current fractional solution. These inequalities may be added to the linear program, such that resolving it will yield a different solution which is hopefully "less fractional".
At this point, the branch and bound part of the algorithm is started. The problem is split into multiple (usually two) versions. The new linear programs are then solved using the simplex method and the process repeats. During the branch and bound process, non-integral solutions to LP relaxations serve as upper bounds and integral solutions serve as lower bounds. A node can be pruned if an upper bound is lower than an existing lower bound. Further, when solving the LP relaxations, additional cutting planes may be generated, which may be either global cuts, i.e., valid for all feasible integer solutions, or local cuts, meaning that they are satisfied by all solutions fulfilling the side constraints from the currently considered branch and bound subtree.
The algorithm is summarized below.

Add the initial ILP to 
 
 
 
 , the list of active problems
Set 
 
 
 
  and 
 
 

while the 
 
 
 
  is not empty
 
Select and remove a problem from 
 
 

Solve the LP relaxation of the problem.
If the solution is infeasible, go back to 3 (while). Otherwise denote the solution by 
 
 
 
  with objective value 
 
 
 
 .
If 
 
 
 
 , go back to 3.
If 
 
 
 
  is integer, set 
 
 
 
  and go back to 3.
If desired, search for cutting planes that are violated by 
 
 
 
 . If any are found, add them to the LP relaxation and return to 3.2.
Branch to partition the problem into new problems with restricted feasible regions. Add these problem to 
 
 
 
  and go back to 3

return 
 
 


Branching Strategies
An important step in the branch and cut algorithm is the branching step. At this step, there are a variety of branching heuristics that can be used. The branching strategies described below all involve what is called branching on a variable.3 Branching on a variable involves choosing a variable, 
 
 
 
 , with a fractional value, 
 
 
 
 , in the optimal solution to the current LP relaxation and then adding the constraints 
 
 
 
  and 
 
 


Most Infeasible Branching This branching strategy chooses the variable with the fractional part closest to 0.5.
Pseudo Cost Branching The basic idea of this strategy is to keep track for each variable 
 
 
 
  the change in the objective function when this variable was previously chosen as the variable to branch on. The strategy then chooses the variable that is predicted to have the most change on the objective function based on past changes when it was chosen as the branching variable. Note that pseudo cost branching is initially uninformative in the search since few variables have been branched on.
Strong Branching Strong branching involves testing which of the candidate variable gives the best improvement to the objective function before actually branching on them. Full strong branching tests all candidate variables and can be computationally expensive. The computational cost can be reduced by only considering a subset of the candidate variables and not solving each of the corresponding LP relaxations to completion.

There are also a large number of variations of these branching strategies, such as using strong branching early on when pseudo cost branching is relatively uninformative and then switching to pseudo cost branching later when there is enough branching history for pseudo cost to be informative.
External links

Mixed Integer Programming
BranchAndCut.org FAQ
SCIP an open source framework for branch-cut-and-price and a mixed integer programming solver
ABACUS - A Branch-And-CUt System - open source software
COIN-OR Cbc - open source software

References
"
Category:Combinatorial optimization Category:Optimization algorithms and methods



↩
↩
↩




