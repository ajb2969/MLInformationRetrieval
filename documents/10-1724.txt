


Heuristic function




Heuristic function

A heuristic function, or simply a heuristic, is a function that ranks alternatives in search algorithms at each branching step based on available information to decide which branch to follow.
Shortest paths
For example, for shortest path problems, a heuristic is a function, 
 
 
 
  defined on the nodes of a search tree, which serves as an estimate of the cost of the cheapest path from that node to the goal node. Heuristics are used by informed search algorithms such as Greedy best-first search and A* to choose the best node to explore. Greedy best-first search will choose the node that has the lowest value for the heuristic function. A* search will expand nodes that have the lowest value for 
 
 
 
 , where 
 
 
 
  is the (exact) cost of the path from the initial state to the current node. If 
 
 
 
  is admissible, i.e., if 
 
 
 
  never overestimates the costs of reaching the goal, then A* will always find an optimal solution.
The classical problem involving heuristics is the n-puzzle. Commonly used heuristics for this problem include counting the number of misplaced tiles and finding the sum of the Manhattan distances between each block and its position in the goal configuration. Note that both are admissible.
Effect of heuristics on computational performance
In any searching problem where there are 
 
 
 
  choices at each node and a depth of 
 
 
 
  at the goal node, a naive searching algorithm would have to potentially search around 
 
 
 
  nodes before finding a solution. Heuristics improve the efficiency of search algorithms by reducing the branching factor from 
 
 
 
  to a lower constant 
 
 
 
 , using a cutoff mechanism. The branching factor can be used for defining a partial order on the heuristics, such that 
 
 
 
  if 
 
 
 
  has a lower branch factor than 
 
 
 
  for a given node 
 
 
 
  of the search tree. Heuristics giving lower branching factors at every node in the search tree are preferred for the resolution of a particular problem, as they are more computationally efficient.
There is a useful and usually considered partial order on admissible heuristics where 
 
 
 
  if 
 
 
 
  for every state n. Thus the true cost is greatest element, and the zero heuristic is the least element in this partial order. If 
 
 
 
 , then the A* search using 
 
 
 
  will have better performance than using 
 
 
 
 .
Finding heuristics
The problem of finding an admissible heuristic with a low branching factor for common search tasks has been extensively researched in the artificial intelligence community. Several common techniques are used:

Solution costs of sub-problems often serve as useful estimates of the overall solution cost. These are always admissible. For example, a heuristic for a 10-puzzle might be the cost of moving tiles 1-5 into their correct places. A common idea is to use a pattern database that stores the exact solution cost of every subproblem instance.


The solution of a relaxed problem often serves as a useful admissible estimate of the original. For example, Manhattan distance is a relaxed version of the n-puzzle problem, because we assume we can move each tile to its position independently of moving the other tiles.


Given a set of admissible heuristic functions 
 
 
 
 , the function 
 
 
 
  is an admissible heuristic that dominates all of them.

Using these techniques a program called ABSOLVER was written (1993) by A.E. Prieditis for automatically generating heuristics for a given problem1". ABSOLVER generated a new heuristic for the 8-puzzle better than any pre-existing heuristic and found the first useful heuristic for solving the Rubik's Cube.2
Consistency and Admissibility
If a Heuristic function never overestimates the cost reaching to goal, then it is called an Admissible heuristic function.
A heuristic 
 
 
 
  is consistent if 
 
 
 
  for any successor state 
 
 
 
 , where 
 
 
 
  is the actual cost of going from 
 
 
 
  to 
 
 
 
 . Thus the value of the sum "total cost so far + heuristic estimate of the cost left" (which is the one used in A* search) is non-decreasing along any path.
Any consistent heuristic with 
 
 
 
  is admissible, and any heuristic obtained by solving a relaxed problem is consistent (as 
 
 
 
 ).
Example
(Figure)
8puzzle example

One might be interested in finding a heuristic to estimate the number of steps required to solve an 8-puzzle from a given state. Two simple heuristic functions are:


 
  = the number of misplaced tiles. This is also known as the Hamming Distance. In the pictured example, the start state has 
 
 
 
  = 8. Clearly, 
 
 
 
  is an admissible heuristic because any tile that is out of place will have to be moved at least once.


 
  = the sum of the distances of the tiles from their goal positions. Because tiles cannot be moved diagonally, the distance counted is the sum of horizontal and vertical distances. This is also known as the Manhattan Distance. In the pictured example, the start state has 
 
 
 
  = 3 + 1 + 2 + 2 + 2 + 3 + 3 + 2 = 18. Clearly, 
 
 
 
  is also an admissible heuristic because any move can, at best, move one tile one step closer to the goal.
As expected, neither heuristic overestimates the true number of moves required to solve the puzzle, which is 26 (
 
 
 
 +
 
 
 
 ). Additionally, it is easy to see from the definitions of the heuristic functions that for any given state, 
 
 
 
  will always be greater than or equal to 
 
 
 
 . Thus, we can say that 
 
 
 
  dominates 
 
 
 
 .
(example taken from Russell and Norvig)
See also

Heuristic algorithm
Artificial intelligence
Consistent heuristic
Expert system
Heuristic evaluation
Inference engine
Inquiry
Problem solving
Admissible heuristic

References




â€”Chapter 4

"
Category:Heuristics









