   CMA-ES      CMA-ES  '''CMA-ES''' stands fo table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */    r Covariance Matrix Adaptation Evolution Strategy. Evolution strategies (ES) are stochastic , derivative-free methods for numerical optimization of non- linear or non- convex  continuous optimization problems. They belong to the class of evolutionary algorithms and evolutionary computation . An evolutionary algorithm is broadly based on the principle of biological evolution , namely the repeated interplay of variation (via recombination and mutation) and selection: in each generation (iteration) new individuals (candidate solutions, denoted as   x   x   x   ) are generated by variation, usually in a stochastic way, of the current parental individuals. Then, some individuals are selected to become the parents in the next generation based on their fitness or objective function value    f   (  x  )       f  x    f(x)   . Like this, over the generation sequence, individuals with better and better   f   f   f   -values are generated.  In an evolution strategy , new candidate solutions are sampled according to a multivariate normal distribution in the    ℝ  n     superscript  ℝ  n    \mathbb{R}^{n}   . Recombination amounts to selecting a new mean value for the distribution. Mutation amounts to adding a random vector, a perturbation with zero mean. Pairwise dependencies between the variables in the distribution are represented by a covariance matrix . The covariance matrix adaptation (CMA) is a method to update the covariance matrix of this distribution. This is particularly useful, if the function   f   f   f   is ill-conditioned .  Adaptation of the covariance matrix amounts to learning a second order model of the underlying objective function similar to the approximation of the inverse Hessian matrix in the Quasi-Newton method in classical optimization . In contrast to most classical methods, fewer assumptions on the nature of the underlying objective function are made. Only the ranking between candidate solutions is exploited for learning the sample distribution and neither derivatives nor even the function values themselves are required by the method.  Principles  Two main principles for the adaptation of parameters of the search distribution are exploited in the CMA-ES algorithm.  First, a maximum-likelihood principle, based on the idea to increase the probability of successful candidate solutions and search steps. The mean of the distribution is updated such that the likelihood of previously successful candidate solutions is maximized. The covariance matrix of the distribution is updated (incrementally) such that the likelihood of previously successful search steps is increased. Both updates can be interpreted as a natural gradient descent. Also, in consequence, the CMA conducts an iterated principal components analysis of successful search steps while retaining all principal axes. Estimation of distribution algorithms and the Cross-Entropy Method are based on very similar ideas, but estimate (non-incrementally) the covariance matrix by maximizing the likelihood of successful solution points instead of successful search steps .  Second, two paths of the time evolution of the distribution mean of the strategy are recorded, called search or evolution paths. These paths contain significant information about the correlation between consecutive steps. Specifically, if consecutive steps are taken in a similar direction, the evolution paths become long. The evolution paths are exploited in two ways. One path is used for the covariance matrix adaptation procedure in place of single successful search steps and facilitates a possibly much faster variance increase of favorable directions. The other path is used to conduct an additional step-size control. This step-size control aims to make consecutive movements of the distribution mean orthogonal in expectation. The step-size control effectively prevents premature convergence yet allowing fast convergence to an optimum.  Algorithm  In the following the most commonly used (μ/μ w , λ)-CMA-ES is outlined, where in each iteration step a weighted combination of the μ best out of λ new candidate solutions is used to update the distribution parameters. The main loop consists of three main parts: 1) sampling of new solutions, 2) re-ordering of the sampled solutions based on their fitness, 3) update of the internal state variables based on the re-ordered samples. A pseudocode of the algorithm looks as follows.   set     λ   λ   \lambda    // number of samples per iteration, at least two, generally > 4   initialize     m   m   m    ,    σ   σ   \sigma    ,     C  =  I      C  I    C=I    ,      p  σ   =  0       subscript  p  σ   0    p_{\sigma}=0    ,      p  c   =  0       subscript  p  c   0    p_{c}=0    // initialize state variables   while  not  terminate // iterate   for     i   i   i     in      {   1...  λ   }       1...  λ     \{1...\lambda\}    // sample    λ   λ   \lambda    new solutions and evaluate them       x  i     subscript  x  i    x_{i}    = sample_multivariate_normal(mean=    m   m   m    , covariance_matrix=      σ  2   C       superscript  σ  2   C    \sigma^{2}C    )       f  i     subscript  f  i    f_{i}    = fitness(     x  i     subscript  x  i    x_{i}    )       x   1...  λ      subscript  x    1...  λ     x_{1...\lambda}    ←     x   s   (  1  )   …  s   (  λ  )       subscript  x    s  1  normal-…  s  λ     x_{s(1)...s(\lambda)}    with     s   (  i  )       s  i    s(i)    = argsort(     f   1...  λ      subscript  f    1...  λ     f_{1...\lambda}    ,    i   i   i    )  // sort solutions       m  ′     superscript  m  normal-′    m^{\prime}    =    m   m   m    // we need later     m  -   m  ′       m   superscript  m  normal-′     m-m^{\prime}    and      x  i   -   m  ′        subscript  x  i    superscript  m  normal-′     x_{i}-m^{\prime}        m   m   m   ← update_m    (   x  1   ,  …  ,     fragments  normal-(   subscript  x  1   normal-,  normal-…  normal-,    (x_{1},...,        x  λ   )     fragments   subscript  x  λ   normal-)    x_{\lambda})   // move mean to better solutions       p  σ     subscript  p  σ    p_{\sigma}    ← update_ps     (   p  σ   ,     fragments  normal-(   subscript  p  σ   normal-,    (p_{\sigma},          σ   -  1     C   -   1  /  2      (  m  -   m  ′   )   )     fragments   superscript  σ    1     superscript  C      1  2      fragments  normal-(  m    superscript  m  normal-′   normal-)   normal-)    \sigma^{-1}C^{-1/2}(m-m^{\prime}))    // update isotropic evolution path       p  c     subscript  p  c    p_{c}    ← update_pc     (   p  c   ,     fragments  normal-(   subscript  p  c   normal-,    (p_{c},           σ   -  1     (   m  -   m  ′    )    ,       superscript  σ    1      m   superscript  m  normal-′      \sigma^{-1}(m-m^{\prime}),         |  |   p  σ   |  |  )     fragments  normal-|  normal-|   subscript  p  σ   normal-|  normal-|  normal-)    ||p_{\sigma}||)    // update anisotropic evolution path      C   C   C    ← update_C     (  C  ,     fragments  normal-(  C  normal-,    (C,          p  c   ,     subscript  p  c    p_{c},            (    x  1   -   m  ′    )   /  σ   ,  …   ,          subscript  x  1    superscript  m  normal-′    σ   normal-…    {(x_{1}-m^{\prime})}/{\sigma},...,          (   x  λ   -   m  ′   )   /  σ  )     fragments   fragments  normal-(   subscript  x  λ     superscript  m  normal-′   normal-)    σ  normal-)    {(x_{\lambda}-m^{\prime})}/{\sigma})    // update covariance matrix      σ   σ   \sigma    ← update_sigma     (  σ  ,     fragments  normal-(  σ  normal-,    (\sigma,         |  |   p  σ   |  |  )     fragments  normal-|  normal-|   subscript  p  σ   normal-|  normal-|  normal-)    ||p_{\sigma}||)    // update step-size using isotropic path length   return     m   m   m    or     x  1     subscript  x  1    x_{1}      The order of the five update assignments is relevant. In the following, the update equations for the five state variables are specified.  Given are the search space dimension   n   n   n   and the iteration step   k   k   k   . The five state variables are       m  k   ∈   ℝ  n        subscript  m  k    superscript  ℝ  n     m_{k}\in\mathbb{R}^{n}   , the distribution mean and current favorite solution to the optimization problem,       σ  k   >  0       subscript  σ  k   0    \sigma_{k}>0   , the step-size,      C  k     subscript  C  k    C_{k}   , a symmetric and positive definite     n  ×  n      n  n    n\times n    covariance matrix with     C  0   =  I       subscript  C  0   I    C_{0}=I   and        p  σ   ∈   ℝ  n    ,    p  c   ∈   ℝ  n       formulae-sequence     subscript  p  σ    superscript  ℝ  n       subscript  p  c    superscript  ℝ  n      p_{\sigma}\in\mathbb{R}^{n},p_{c}\in\mathbb{R}^{n}   , two evolution paths, initially set to the zero vector.  The iteration starts with sampling    λ  >  1      λ  1    \lambda>1   candidate solutions     x  i   ∈   ℝ  n        subscript  x  i    superscript  ℝ  n     x_{i}\in\mathbb{R}^{n}   from a multivariate normal distribution     𝒩   (   m  k   ,    σ  k  2    C  k    )       𝒩    subscript  m  k      superscript   subscript  σ  k   2    subscript  C  k       \textstyle\mathcal{N}(m_{k},\sigma_{k}^{2}C_{k})   , i.e. for    i  =   1  ,  …  ,  λ       i   1  normal-…  λ     i=1,...,\lambda            \begin{align}  x_i \ &\sim\ \mathcal{N}(m_k,\sigma_k^2 C_k)  \\&\sim\ m_k + \sigma_k\times\mathcal{N}(0,C_k)  \end{align}    The second line suggests the interpretation as perturbation (mutation) of the current favorite solution vector    m  k     subscript  m  k    m_{k}   (the distribution mean vector). The candidate solutions    x  i     subscript  x  i    x_{i}   are evaluated on the objective function    f  :    ℝ  n   →  ℝ      normal-:  f   normal-→   superscript  ℝ  n   ℝ     f:\mathbb{R}^{n}\to\mathbb{R}   to be minimized. Denoting the   f   f   f   -sorted candidate solutions as        {    x   i  :  λ     |   i  =   1  …  λ    }   =    {    x  i    |   i  =   1  …  λ    }    and   f   (   x   1  :  λ    )    ≤  …  ≤   f   (   x   μ  :  λ    )    ≤   f   (   x    μ  +  1   :  λ    )   …    ,         conditional-set   subscript  x   normal-:  i  λ      i    1  normal-…  λ        conditional-set   subscript  x  i     i    1  normal-…  λ     and  f   subscript  x   normal-:  1  λ          normal-…         f   subscript  x   normal-:  μ  λ            f   subscript  x   normal-:    μ  1   λ    normal-…      \{x_{i:\lambda}\;|\;i=1\dots\lambda\}=\{x_{i}\;|\;i=1\dots\lambda\}\;\;\text{%
 and}\;\;f(x_{1:\lambda})\leq\dots\leq f(x_{\mu:\lambda})\leq f(x_{\mu+1:%
 \lambda})\dots,     the new mean value is computed as         \begin{align}  m_{k+1} &= \sum_{i=1}^{\mu} w_i\, x_{i:\lambda}  \\ &= m_k + \sum_{i=1}^{\mu} w_i\, (x_{i:\lambda} - m_k)  \end{align}    where the positive (recombination) weights     w  1   ≥   w  2   ≥  …  ≥   w  μ   >  0         subscript  w  1    subscript  w  2        normal-…        subscript  w  μ        0     w_{1}\geq w_{2}\geq\dots\geq w_{\mu}>0   sum to one. Typically,    μ  ≤   λ  /  2       μ    λ  2     \mu\leq\lambda/2   and the weights are chosen such that     μ  w   :=   1  /    ∑   i  =  1   μ    w  i  2     ≈   λ  /  4        assign   subscript  μ  w     1    superscript   subscript     i  1    μ    superscript   subscript  w  i   2            λ  4      \textstyle\mu_{w}:=1/\sum_{i=1}^{\mu}w_{i}^{2}\approx\lambda/4   . The only feedback used from the objective function here and in the following is an ordering of the sampled candidate solutions due to the indices    i  :  λ     normal-:  i  λ    i:\lambda   .  The step-size    σ  k     subscript  σ  k    \sigma_{k}   is updated using cumulative step-size adaptation (CSA), sometimes also denoted as path length control . The evolution path (or search path)    p  σ     subscript  p  σ    p_{\sigma}   is updated first.         p_\sigma \gets \underbrace{(1-c_\sigma)}_{\!\!\!\!\!\text{discount factor}\!\!\!\!\!}\, p_\sigma  + \overbrace{\sqrt{1 - (1-c_\sigma)^2}}^{  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\text{complements for discounted variance}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!} \underbrace{\sqrt{\mu_w}  \,C_k^{\;-1/2} \, \frac{\overbrace{m_{k+1} - m_k}^{\!\!\!\text{displacement of}\; m\!\!\!}}{\sigma_k}}_{\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  \text{distributed as}\; \mathcal{N}(0,I)\;\text{under neutral selection}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!}           \sigma_{k+1} = \sigma_k \times \exp\bigg(\frac{c_\sigma}{d_\sigma}  \underbrace{\left(\frac{\|p_\sigma\|}{E\|\mathcal{N}(0,I)\|} - 1\right)}_{\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  \text{unbiased about 0 under neutral selection}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  }\bigg)    where       c  σ   -  1    ≈   n  /  3        superscript   subscript  c  σ     1      n  3     c_{\sigma}^{-1}\approx n/3   is the backward time horizon for the evolution path    p  σ     subscript  p  σ    p_{\sigma}   and larger than one,       μ  w   =    (    ∑   i  =  1   μ    w  i  2    )    -  1         subscript  μ  w    superscript    superscript   subscript     i  1    μ    superscript   subscript  w  i   2      1      \mu_{w}=\left(\sum_{i=1}^{\mu}w_{i}^{2}\right)^{-1}   is the variance effective selection mass and    1  ≤   μ  w   ≤  μ        1   subscript  μ  w        μ     1\leq\mu_{w}\leq\mu   by definition of    w  i     subscript  w  i    w_{i}   ,       C  k   -   1  /  2     =     C  k     -  1    =    C  k   -  1            superscript   subscript  C  k       1  2      superscript     subscript  C  k      1            superscript   subscript  C  k     1        C_{k}^{\;-1/2}=\sqrt{C_{k}}^{\;-1}=\sqrt{C_{k}^{\;-1}}   is the unique symmetric square root of the inverse of    C  k     subscript  C  k    C_{k}   , and      d  σ     subscript  d  σ    d_{\sigma}   is the damping parameter usually close to one. For     d  σ   =  ∞       subscript  d  σ      d_{\sigma}=\infty   or     c  σ   =  0       subscript  c  σ   0    c_{\sigma}=0   the step-size remains unchanged.  The step-size    σ  k     subscript  σ  k    \sigma_{k}   is increased if and only if    ∥   p  σ   ∥     norm   subscript  p  σ     \|p_{\sigma}\|   is larger than the expected value      E   ∥   𝒩   (  0  ,  I  )    ∥       E   norm    𝒩   0  I       \displaystyle E\|\mathcal{N}(0,I)\|     and decreased if it is smaller. For this reason, the step-size update tends to make consecutive steps     C  k   -  1      superscript   subscript  C  k     1     C_{k}^{-1}   -conjugate , in that after the adaptation has been successful        (     m   k  +  2    -   m   k  +  1      σ   k  +  1     )   T     C  k   -  1       m   k  +  1    -   m  k     σ  k     ≈  0         superscript       subscript  m    k  2     subscript  m    k  1      subscript  σ    k  1     T    superscript   subscript  C  k     1         subscript  m    k  1     subscript  m  k     subscript  σ  k     0    \textstyle\left(\frac{m_{k+2}-m_{k+1}}{\sigma_{k+1}}\right)^{T}\!C_{k}^{-1}%
 \frac{m_{k+1}-m_{k}}{\sigma_{k}}\approx 0   . 1  Finally, the covariance matrix is updated, where again the respective evolution path is updated first.         p_c \gets \underbrace{(1-c_c)}_{\!\!\!\!\!\text{discount factor}\!\!\!\!\!}\,  p_c +  \underbrace{\mathbf{1}_{[0,\alpha\sqrt{n}]}(\|p_\sigma\|)}_{\text{indicator function}}  \overbrace{\sqrt{1 - (1-c_c)^2}}^{  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\text{complements for discounted variance}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!}  \underbrace{\sqrt{\mu_w}  \, \frac{m_{k+1} - m_k}{\sigma_k}}_{\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  \text{distributed as}\; \mathcal{N}(0,C_k)\;\text{under neutral selection}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!}           C_{k+1} = \underbrace{(1 - c_1 - c_\mu + c_s)}_{\!\!\!\!\!\text{discount factor}\!\!\!\!\!}  \, C_k + c_1 \underbrace{p_c p_c^T}_{  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  \text{rank one matrix}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!}  + \,c_\mu \underbrace{\sum_{i=1}^\mu w_i \frac{x_{i:\lambda} - m_k}{\sigma_k}  \left( \frac{x_{i:\lambda} - m_k}{\sigma_k} \right)^T}_{  \text{rank} \;\min(\mu,n)\; \text{matrix}}    where   T   T   T   denotes the transpose and       c  c   -  1    ≈   n  /  4        superscript   subscript  c  c     1      n  4     c_{c}^{-1}\approx n/4   is the backward time horizon for the evolution path    p  c     subscript  p  c    p_{c}   and larger than one,      α  ≈  1.5      α  1.5    \alpha\approx 1.5   and the indicator function      𝟏   [  0  ,   α   n    ]     (   ∥   p  σ   ∥   )        subscript  1   0    α    n       norm   subscript  p  σ      \mathbf{1}_{[0,\alpha\sqrt{n}]}(\|p_{\sigma}\|)   evaluates to one iff      ∥   p  σ   ∥   ∈   [  0  ,   α   n    ]        norm   subscript  p  σ     0    α    n       \|p_{\sigma}\|\in[0,\alpha\sqrt{n}]   or, in other words,     ∥   p  σ   ∥   ≤   α   n         norm   subscript  p  σ      α    n      \|p_{\sigma}\|\leq\alpha\sqrt{n}   , which is usually the case,       c  s   =    (   1  -    𝟏   [  0  ,   α   n    ]      (   ∥   p  σ   ∥   )   2     )    c  1    c  c    (   2  -   c  c    )         subscript  c  s       1     subscript  1   0    α    n       superscript   norm   subscript  p  σ    2      subscript  c  1    subscript  c  c     2   subscript  c  c       c_{s}=(1-\mathbf{1}_{[0,\alpha\sqrt{n}]}(\|p_{\sigma}\|)^{2})\,c_{1}c_{c}(2-c_%
 {c})   makes partly up for the small variance loss in case the indicator is zero,       c  1   ≈   2  /   n  2         subscript  c  1     2   superscript  n  2      c_{1}\approx 2/n^{2}   is the learning rate for the rank-one update of the covariance matrix and       c  μ   ≈    μ  w   /   n  2         subscript  c  μ      subscript  μ  w    superscript  n  2      c_{\mu}\approx\mu_{w}/n^{2}   is the learning rate for the rank-   μ   μ   \mu   update of the covariance matrix and must not exceed    1  -   c  1       1   subscript  c  1     1-c_{1}   .  The covariance matrix update tends to increase the likelihood for    p  c     subscript  p  c    p_{c}   and for     (    x   i  :  λ    -   m  k    )   /   σ  k          subscript  x   normal-:  i  λ     subscript  m  k     subscript  σ  k     (x_{i:\lambda}-m_{k})/\sigma_{k}   to be sampled from    𝒩   (  0  ,   C   k  +  1    )       𝒩   0   subscript  C    k  1       \mathcal{N}(0,C_{k+1})   . This completes the iteration step.  The number of candidate samples per iteration,   λ   λ   \lambda   , is not determined a priori and can vary in a wide range. Smaller values, for example    λ  =  10      λ  10    \lambda=10   , lead to more local search behavior. Larger values, for example    λ  =   10  n       λ    10  n     \lambda=10n   with default value     μ  w   ≈   λ  /  4        subscript  μ  w     λ  4     \mu_{w}\approx\lambda/4   , render the search more global. Sometimes the algorithm is repeatedly restarted with increasing   λ   λ   \lambda   by a factor of two for each restart. 2 Besides of setting   λ   λ   \lambda   (or possibly   μ   μ   \mu   instead, if for example   λ   λ   \lambda   is predetermined by the number of available processors), the above introduced parameters are not specific to the given objective function and therefore not meant to be modified by the user.  Example code in MATLAB/Octave  function xmin=purecmaes % (mu/mu_w, lambda)-CMA-ES  % --------------------  Initialization --------------------------------  % User defined input parameters (need to be edited) strfitnessfct = 'frosenbrock' ; % name of objective/fitness function N = 20 ; % number of objective variables/problem dimension xmean = rand(N, 1 ); % objective variables initial point sigma = 0.3 ; % coordinate wise standard deviation (step size) stopfitness = 1e-10 ; % stop if fitness < stopfitness (minimization) stopeval = 1e3 *N^ 2 ; % stop after stopeval number of function evaluations  % Strategy parameter setting: Selection lambda = 4 +floor( 3 *log(N)); % population size, offspring number mu = lambda/ 2 ; % number of parents/points for recombination weights = log(mu+ 1 / 2 )-log( 1 :mu)'; % muXone array for weighted recombination mu = floor(mu);        
   weights = weights/sum(weights); % normalize recombination weights array mueff=sum(weights)^ 2 /sum(weights.^ 2 ); % variance-effectiveness of sum w_i x_i  % Strategy parameter setting: Adaptation cc = ( 4 +mueff/N) / (N+ 4 + 2 *mueff/N); % time constant for cumulation for C cs = (mueff+ 2 ) / (N+mueff+ 5 ); % t-const for cumulation for sigma control c1 = 2 / ((N+ 1.3 )^ 2 +mueff); % learning rate for rank-one update of C cmu = min( 1 -c1, 2 * (mueff- 2 + 1 /mueff) / ((N+ 2 )^ 2 +mueff)); % and for rank-mu update damps = 1 + 2 *max( 0 , sqrt((mueff- 1 )/(N+ 1 ))- 1 ) + cs; % damping for sigma  % usually close to 1  % Initialize dynamic (internal) strategy parameters and constants pc = zeros(N, 1 ); ps = zeros(N, 1 ); % evolution paths for C and sigma B = eye(N,N); % B defines the coordinate system D = ones(N, 1 ); % diagonal D defines the scaling C = B * diag(D.^ 2 ) * B'; % covariance matrix C invsqrtC = B * diag(D.^- 1 ) * B'; % C^-1/2 eigeneval = 0 ; % track update of B and D chiN=N^ 0.5 *( 1 - 1 /( 4 *N)+ 1 /( 21 *N^ 2 )); % expectation of  %   ||N(0,I)|| == norm(randn(N,1))  % -------------------- Generation Loop -------------------------------- counteval = 0 ; % the next 40 lines contain the 20 lines of interesting code while counteval < stopeval % Generate and evaluate lambda offspring for k= 1 :lambda,
           arx(:,k) = xmean + sigma * B * (D .* randn(N, 1 )); % m + sig * Normal(0,C) arfitness(k) = feval(strfitnessfct, arx(:,k)); % objective function call counteval = counteval+ 1 ;
       end % Sort by fitness and compute weighted mean into xmean [arfitness, arindex] = sort(arfitness); % minimization xold = xmean;
       xmean = arx(:,arindex( 1 :mu))*weights; % recombination, new mean value  % Cumulation: Update evolution paths ps = ( 1 -cs)*ps ... 
             + sqrt(cs*( 2 -cs)*mueff) * invsqrtC * (xmean-xold) / sigma; 
       hsig = norm(ps)/sqrt( 1 -( 1 -cs)^( 2 *counteval/lambda))/chiN < 1.4 + 2 /(N+ 1 );
       pc = ( 1 -cc)*pc ...
             + hsig * sqrt(cc*( 2 -cc)*mueff) * (xmean-xold) / sigma; % Adapt covariance matrix C artmp = ( 1 /sigma) * (arx(:,arindex( 1 :mu))-repmat(xold, 1 ,mu));
       C = ( 1 -c1-cmu) * C ... % regard old matrix + c1 * (pc*pc' ... % plus rank one update + ( 1 -hsig) * cc*( 2 -cc) * C) ... % minor correction if hsig==0 + cmu * artmp * diag(weights) * artmp'; % plus rank mu update  % Adapt step size sigma sigma = sigma * exp((cs/damps)*(norm(ps)/chiN - 1 )); % Decomposition of C into B*diag(D.^2)*B' (diagonalization) if counteval - eigeneval > lambda/(c1+cmu)/N/ 10  % to achieve O(N^2) eigeneval = counteval;
           C = triu(C) + triu(C, 1 )'; % enforce symmetry [B,D] = eig(C); % eigen decomposition, B==normalized eigenvectors D = sqrt(diag(D)); % D is a vector of standard deviations now invsqrtC = B * diag(D.^- 1 ) * B';
       end % Break, if fitness is good enough or condition exceeds 1e14, better termination methods are advisable if arfitness( 1 ) <= stopfitness || max(D) > 1e7 * min(D)
           break;
       end
 
   end % while, end generation loop xmin = arx(:, arindex( 1 )); % Return best point of last iteration.  % Notice that xmean is expected to be even  % better.  % --------------------------------------------------------------- function f=frosenbrock(x)
     if size(x, 1 ) < 2 error( 'dimension must be greater one' ); end
     f = 100 *sum((x( 1 :end- 1 ).^ 2 - x( 2 :end)).^ 2 ) + sum((x( 1 :end- 1 )- 1 ).^ 2 );  Theoretical Foundations  Given the distribution parameters—mean, variances and covariances—the normal probability distribution for sampling new candidate solutions is the maximum entropy probability distribution over    ℝ  n     superscript  ℝ  n    \mathbb{R}^{n}   , that is, the sample distribution with the minimal amount of prior information built into the distribution. More considerations on the update equations of CMA-ES are made in the following.  Variable Metric  The CMA-ES implements a stochastic variable-metric method. In the very particular case of a convex-quadratic objective function         f   (  x  )    =    1  2     (   x  -   x  *    )   T   H   (   x  -   x  *    )          f  x       1  2    superscript    x   superscript  x     T   H    x   superscript  x        f(x)={\textstyle\frac{1}{2}}(x-x^{*})^{T}H(x-x^{*})        the covariance matrix    C  k     subscript  C  k    C_{k}   adapts to the inverse of the Hessian matrix    H   H   H   , up to a scalar factor and small random fluctuations. More general, also on the function    g  ∘  f      g  f    g\circ f   , where   g   g   g   is strictly increasing and therefore order preserving and   f   f   f   is convex-quadratic, the covariance matrix    C  k     subscript  C  k    C_{k}   adapts to    H   -  1      superscript  H    1     H^{-1}   , up to a scalar factor and small random fluctuations.  Maximum-Likelihood Updates  The update equations for mean and covariance matrix maximize a likelihood while resembling an expectation-maximization algorithm. The update of the mean vector   m   m   m   maximizes a log-likelihood, such that         m   k  +  1    =  arg   max  m    ∑   i  =  1   μ    w  i   log   p  𝒩    (   x   i  :  λ    |  m  )      fragments   subscript  m    k  1       subscript   m    superscript   subscript     i  1    μ    subscript  w  i     subscript  p  𝒩    fragments  normal-(   subscript  x   normal-:  i  λ    normal-|  m  normal-)     m_{k+1}=\arg\max_{m}\sum_{i=1}^{\mu}w_{i}\log p_{\mathcal{N}}(x_{i:\lambda}|m)        where    \log p_\mathcal{N}(x) =     - \frac{1}{2} \log\det(2\pi C) - \frac{1}{2} (x-m)^T C^{-1} (x-m)  denotes the log-likelihood of   x   x   x   from a multivariate normal distribution with mean   m   m   m   and any positive definite covariance matrix   C   C   C   . To see that    m   k  +  1      subscript  m    k  1     m_{k+1}   is independent of   C   C   C   remark first that this is the case for any diagonal matrix   C   C   C   , because the coordinate-wise maximizer is independent of a scaling factor. Then, rotation of the data points or choosing   C   C   C   non-diagonal are equivalent.  The rank-   μ   μ   \mu   update of the covariance matrix, that is, the right most summand in the update equation of    C  k     subscript  C  k    C_{k}   , maximizes a log-likelihood in that    \sum_{i=1}^\mu w_i \frac{x_{i:\lambda} - m_k}{\sigma_k}     \left( \frac{x_{i:\lambda} - m_k}{\sigma_k} \right)^T  = \arg\max_{C} \sum_{i=1}^\mu w_i \log p_\mathcal{N}\left(\left.\frac{x_{i:\lambda} - m_k}{\sigma_k} \right| C\right)  for    μ  ≥  n      μ  n    \mu\geq n   (otherwise   C   C   C   is singular, but substantially the same result holds for    μ  <  n      μ  n    \mu   ). Here,     p  𝒩    (  x  |  C  )      fragments   subscript  p  𝒩    fragments  normal-(  x  normal-|  C  normal-)     p_{\mathcal{N}}(x|C)   denotes the likelihood of   x   x   x   from a multivariate normal distribution with zero mean and covariance matrix   C   C   C   . Therefore, for     c  1   =  0       subscript  c  1   0    c_{1}=0   and     c  μ   =  1       subscript  c  μ   1    c_{\mu}=1   ,    C   k  +  1      subscript  C    k  1     C_{k+1}   is the above maximum-likelihood estimator. See estimation of covariance matrices for details on the derivation.  Natural Gradient Descent in the Space of Sample Distributions  Akimoto et al. 3 and Glasmachers et al. 4 discovered independently that the update of the distribution parameters resembles the descend in direction of a sampled natural gradient of the expected objective function value (to be minimized), where the expectation is taken under the sample distribution. With the parameter setting of     c  σ   =  0       subscript  c  σ   0    c_{\sigma}=0   and     c  1   =  0       subscript  c  1   0    c_{1}=0   , i.e. without step-size control and rank-one update, CMA-ES can thus be viewed as an instantiation of Natural Evolution Strategies (NES). 5 6 The natural gradient is independent of the parameterization of the distribution. Taken with respect to the parameters of the sample distribution , the gradient of can be expressed as    \begin{align}     {\nabla}_{\!\theta} E(f(x) | \theta)  &= \nabla_{\!\theta} \int_{\mathbb R^n}f(x) p(x) \mathrm{d}x  \\ &= \int_{\mathbb R^n}f(x) \nabla_{\!\theta} p(x) \mathrm{d}x  \\ &= \int_{\mathbb R^n}f(x) p(x) \nabla_{\!\theta} \ln p(x) \mathrm{d}x  \\ &= E(f(x) \nabla_{\!\theta} \ln p(x|\theta))  \end{align}  where    p   (  x  )   =  p   (  x  |  θ  )      fragments  p   fragments  normal-(  x  normal-)    p   fragments  normal-(  x  normal-|  θ  normal-)     p(x)=p(x|\theta)   depends on the parameter vector   θ   θ   \theta   , the so-called score function ,     ∇   θ    ln  p   (  x  |  θ  )   =      ∇   θ    p    (  x  )     p   (  x  )        fragments   subscript  normal-∇  θ    p   fragments  normal-(  x  normal-|  θ  normal-)          subscript  normal-∇  θ   p   x     p  x      \nabla_{\!\theta}\ln p(x|\theta)=\frac{\nabla_{\!\theta}p(x)}{p(x)}   , indicates the relative sensitivity of w.r.t. , and the expectation is taken with respect to the distribution . The natural gradient of , complying with the Fisher information metric (an informational distance measure between probability distributions and the curvature of the relative entropy ), now reads    \begin{align}     \tilde{\nabla} E(f(x) | \theta)  &= F^{-1}_\theta \nabla_{\!\theta} E(f(x) | \theta)  \end{align}  where the Fisher information matrix    F  θ     subscript  F  θ    F_{\theta}   is the expectation of the Hessian of and renders the expression independent of the chosen parameterization. Combining the previous equalities we get    \begin{align}     \tilde{\nabla} E(f(x) | \theta)  &= F^{-1}_\theta E(f(x) \nabla_{\!\theta} \ln p(x|\theta))  \\ &= E(f(x) F^{-1}_\theta \nabla_{\!\theta} \ln p(x|\theta))  \end{align}  A Monte Carlo approximation of the latter expectation takes the average over samples from    \tilde{\nabla} \widehat{E}_\theta(f) := -\sum_{i=1}^\lambda \overbrace{w_i}^{\!\!\!\!\text{preference weight}\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!} \underbrace{F^{-1}_\theta \nabla_{\!\theta} \ln p(x_{i:\lambda}|\theta)}_{\!\!\!\!\!\text{candidate direction from }x_{i:\lambda}\!\!\!\!\!}     \quad\mathrm{with~}w_i = -f(x_{i:\lambda})/\lambda  where the notation    i  :  λ     normal-:  i  λ    i:\lambda   from above is used and therefore    w  i     subscript  w  i    w_{i}   are monotonously decreasing in   i   i   i   .  Ollivier et al. 7 finally found a rigorous formulation for the more robust weights,    w  i     subscript  w  i    w_{i}   , as they are defined in the CMA-ES (weights are zero for ), formulated as consistent estimator for the CDF of    f   (  X  )   ,  X  ∼  p   (  .  |  θ  )      fragments  f   fragments  normal-(  X  normal-)   normal-,  X  similar-to  p   fragments  normal-(  normal-.  normal-|  θ  normal-)     f(X),X\sim p(.|\theta)   at the point    f   (   x   i  :  λ    )       f   subscript  x   normal-:  i  λ      f(x_{i:\lambda})   , composed with a fixed monotonous decreased transformation   w   w   w   , i.e.,         w  i   =   w   (     𝗋𝖺𝗇𝗄   (   f   (   x   i  :  λ    )    )    -   1  /  2    λ   )         subscript  w  i     w        𝗋𝖺𝗇𝗄    f   subscript  x   normal-:  i  λ        1  2    λ      w_{i}=w\left(\frac{\mathsf{rank}(f(x_{i:\lambda}))-1/2}{\lambda}\right)        Let        θ  =    [    m  k  T   vec    (   C  k   )   T    σ  k    ]   T   ∈   ℝ   n  +   n  2   +  1          θ   superscript   delimited-[]     superscript   subscript  m  k   T   vec   superscript   subscript  C  k   T    subscript  σ  k     T         superscript  ℝ    n   superscript  n  2   1       \theta=[m_{k}^{T}\mathrm{vec}(C_{k})^{T}\sigma_{k}]^{T}\in\mathbb{R}^{n+n^{2}+1}        such that    p   (  .  |  θ  )      fragments  p   fragments  normal-(  normal-.  normal-|  θ  normal-)     p(.|\theta)   is the density of the multivariate normal distribution     𝒩   (   m  k   ,    σ  k  2    C  k    )       𝒩    subscript  m  k      superscript   subscript  σ  k   2    subscript  C  k       \mathcal{N}(m_{k},\sigma_{k}^{2}C_{k})   . Then, we have an explicit expression for the inverse of the Fisher information matrix where    σ  k     subscript  σ  k    \sigma_{k}   is fixed         F   θ  |   σ  k     -  1    =   [       σ  k  2    C  k      0      0      2   C  k    ⊗   C  k       ]        subscript   superscript  F    1     fragments  θ  normal-|   subscript  σ  k      delimited-[]       superscript   subscript  σ  k   2    subscript  C  k    0    0   tensor-product    2   subscript  C  k     subscript  C  k         F^{-1}_{\theta|\sigma_{k}}=\left[\begin{array}[]{cc}\sigma_{k}^{2}C_{k}&0\\
 0&2C_{k}\otimes C_{k}\end{array}\right]        and for    \ln p(x|\theta) = \ln p(x|m_k,\sigma_k^2 C_k) = -\frac{1}{2}(x-m_k)^T \sigma_k^{-2} C_k^{-1} (x-m_k)     \,-\, \frac{1}{2}\ln\det(2\pi\sigma_k^2 C_k)  and, after some calculations, the updates in the CMA-ES turn out as 8     \begin{align}     m_{k+1}  &= m_k - \underbrace{[\tilde{\nabla} \widehat{E}_\theta(f)]_{1,\dots, n}}_{  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  \text{natural gradient for mean}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  }  \\  &= m_k + \sum_{i=1}^\lambda w_i (x_{i:\lambda} - m_k)  \end{align}  and    \begin{align}     C_{k+1}  &= C_k + c_1(p_c p_c^T - C_k)  - c_\mu\,\mathrm{mat}(\overbrace{[\tilde{\nabla} \widehat{E}_\theta(f)]_{n+1,\dots,n+n^2}}^{  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  \text{natural gradient for covariance matrix}  \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!  })\\  &= C_k + c_1(p_c p_c^T - C_k)  + c_\mu \sum_{i=1}^\lambda w_i \left(\frac{x_{i:\lambda} - m_k}{\sigma_k} \left(\frac{x_{i:\lambda} - m_k}{\sigma_k}\right)^T - C_k\right)  \end{align}   where mat forms the proper matrix from the respective natural gradient sub-vector. That means, setting     c  1   =   c  σ   =  0         subscript  c  1    subscript  c  σ        0     c_{1}=c_{\sigma}=0   , the CMA-ES updates descend in direction of the approximation     ∇  ~     E  ^   θ    (  f  )        normal-~  normal-∇    subscript   normal-^  E   θ   f    \tilde{\nabla}\widehat{E}_{\theta}(f)   of the natural gradient while using different step-sizes (learning rates) for the orthogonal parameters    m   m   m   and   C   C   C   respectively.  Stationarity or Unbiasedness  It is comparatively easy to see that the update equations of CMA-ES satisfy some stationarity conditions, in that they are essentially unbiased. Under neutral selection, where     x   i  :  λ    ∼   𝒩   (   m  k   ,    σ  k  2    C  k    )       similar-to   subscript  x   normal-:  i  λ      𝒩    subscript  m  k      superscript   subscript  σ  k   2    subscript  C  k        x_{i:\lambda}\sim\mathcal{N}(m_{k},\sigma_{k}^{2}C_{k})   , we find that        E   (    m   k  +  1     |   m  k   )   =   m  k      fragments  E   fragments  normal-(   subscript  m    k  1    normal-|   subscript  m  k   normal-)     subscript  m  k     E(m_{k+1}\,|\,m_{k})=m_{k}        and under some mild additional assumptions on the initial conditions        E   (  log    σ   k  +  1     |   σ  k   )   =  log   σ  k      fragments  E   fragments  normal-(    subscript  σ    k  1    normal-|   subscript  σ  k   normal-)      subscript  σ  k     E(\log\sigma_{k+1}\,|\,\sigma_{k})=\log\sigma_{k}        and with an additional minor correction in the covariance matrix update for the case where the indicator function evaluates to zero, we find        E   (    C   k  +  1     |   C  k   )   =   C  k      fragments  E   fragments  normal-(   subscript  C    k  1    normal-|   subscript  C  k   normal-)     subscript  C  k     E(C_{k+1}\,|\,C_{k})=C_{k}        Invariance  Invariance properties imply uniform performance on a class of objective functions. They have been argued to be an advantage, because they allow to generalize and predict the behavior of the algorithm and therefore strengthen the meaning of empirical results obtained on single functions. The following invariance properties have been established for CMA-ES.   Invariance under order-preserving transformations of the objective function value   f   f   f   , in that for any    h  :    ℝ  n   →  ℝ      normal-:  h   normal-→   superscript  ℝ  n   ℝ     h:\mathbb{R}^{n}\to\mathbb{R}   the behavior is identical on    f  :   x  ↦   g   (   h   (  x  )    )        normal-:  f   maps-to  x    g    h  x       f:x\mapsto g(h(x))   for all strictly increasing    g  :   ℝ  →  ℝ      normal-:  g   normal-→  ℝ  ℝ     g:\mathbb{R}\to\mathbb{R}   . This invariance is easy to verify, because only the   f   f   f   -ranking is used in the algorithm, which is invariant under the choice of   g   g   g   .    Scale-invariance , in that for any    h  :    ℝ  n   →  ℝ      normal-:  h   normal-→   superscript  ℝ  n   ℝ     h:\mathbb{R}^{n}\to\mathbb{R}   the behavior is independent of    α  >  0      α  0    \alpha>0   for the objective function    f  :   x  ↦   h   (   α  x   )        normal-:  f   maps-to  x    h    α  x       f:x\mapsto h(\alpha x)   given     σ  0   ∝   1  /  α      proportional-to   subscript  σ  0     1  α     \sigma_{0}\propto 1/\alpha   and     m  0   ∝   1  /  α      proportional-to   subscript  m  0     1  α     m_{0}\propto 1/\alpha   .    Invariance under rotation of the search space in that for any    h  :    ℝ  n   →  ℝ      normal-:  h   normal-→   superscript  ℝ  n   ℝ     h:\mathbb{R}^{n}\to\mathbb{R}   and any    z  ∈   ℝ  n       z   superscript  ℝ  n     z\in\mathbb{R}^{n}   the behavior on    f  :   x  ↦   h   (   R  x   )        normal-:  f   maps-to  x    h    R  x       f:x\mapsto h(Rx)   is independent of the orthogonal matrix    R   R   R   , given     m  0   =    R   -  1    z        subscript  m  0      superscript  R    1    z     m_{0}=R^{-1}z   . More general, the algorithm is also invariant under general linear transformations   R   R   R   when additionally the initial covariance matrix is chosen as     R   -  1     R    -  1    T        superscript  R    1     superscript   superscript  R    1    T     R^{-1}{R^{-1}}^{T}   .   Any serious parameter optimization method should be translation invariant, but most methods do not exhibit all the above described invariance properties. A prominent example with the same invariance properties is the Nelder–Mead method , where the initial simplex must be chosen respectively.  Convergence  Conceptual considerations like the scale-invariance property of the algorithm, the analysis of simpler evolution strategies , and overwhelming empirical evidence suggest that the algorithm converges on a large class of functions fast to the global optimum, denoted as    x  *     superscript  x     x^{*}   . On some functions, convergence occurs independently of the initial conditions with probability one. On some functions the probability is smaller than one and typically depends on the initial    m  0     subscript  m  0    m_{0}   and    σ  0     subscript  σ  0    \sigma_{0}   . Empirically, the fastest possible convergence rate in   k   k   k   for rank-based direct search methods can often be observed (depending on the context denoted as linear or log-linear or exponential convergence). Informally, we can write    \|m_k - x^*\| \;\approx\; \|m_0 - x^*\| \times e^{-ck}       for some    c  >  0      c  0    c>0   , and more rigorously    \frac{1}{k}\sum_{i=1}^k\log\frac{\|m_i - x^*\|}{\|m_{i-1} - x^*\|}     \;=\; \frac{1}{k}\log\frac{\|m_k - x^*\|}{\|m_{0} - x^*\|}  \;\to\; -c  or similarly,    E\log\frac{\|m_k - x^*\|}{\|m_{k-1} - x^*\|}     \;\to\; -c  This means that on average the distance to the optimum decreases in each iteration by a "constant" factor, namely by    exp   (   -  c   )         c     \exp(-c)   . The convergence rate   c   c   c   is roughly     0.1  λ   /  n        0.1  λ   n    0.1\lambda/n   , given   λ   λ   \lambda   is not much larger than the dimension   n   n   n   . Even with optimal   σ   σ   \sigma   and   C   C   C   , the convergence rate   c   c   c   cannot largely exceed     0.25  λ   /  n        0.25  λ   n    0.25\lambda/n   , given the above recombination weights    w  i     subscript  w  i    w_{i}   are all non-negative. The actual linear dependencies in   λ   λ   \lambda   and   n   n   n   are remarkable and they are in both cases the best one can hope for in this kind of algorithm. Yet, a rigorous proof of convergence is missing.  Interpretation as Coordinate System Transformation  Using a non-identity covariance matrix for the multivariate normal distribution in evolution strategies is equivalent to a coordinate system transformation of the solution vectors, 9 mainly because the sampling equation      x  i     subscript  x  i    \displaystyle x_{i}     can be equivalently expressed in an "encoded space" as          C  k   -   1  /  2      x  i    ⏟    represented in the encode space    ∼      C  k   -   1  /  2      m  k    ⏟   +     σ  k   ×  𝒩    (  0  ,  I  )        similar-to   subscript   normal-⏟     superscript   subscript  C  k       1  2      subscript  x  i     represented in the encode space      normal-⏟     superscript   subscript  C  k       1  2      subscript  m  k          subscript  σ  k   𝒩    0  I       \underbrace{C_{k}^{-1/2}x_{i}}_{\text{represented in the encode space}\!\!\!\!%
 \!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!\!%
 \!\!\!\!\!\!}\sim\ \underbrace{C_{k}^{-1/2}m_{k}}{}+\sigma_{k}\times\mathcal{N%
 }(0,I)     The covariance matrix defines a bijective transformation (encoding) for all solution vectors into a space, where the sampling takes place with identity covariance matrix. Because the update equations in the CMA-ES are invariant under linear coordinate system transformations, the CMA-ES can be re-written as an adaptive encoding procedure applied to a simple evolution strategy with identity covariance matrix. 10 This adaptive encoding procedure is not confined to algorithms that sample from a multivariate normal distribution (like evolution strategies), but can in principle be applied to any iterative search method.  Performance in Practice  In contrast to most other evolutionary algorithms , the CMA-ES is, from the users perspective, quasi parameter-free. The user has to choose an initial solution point,     m  0   ∈   ℝ  n        subscript  m  0    superscript  ℝ  n     m_{0}\in\mathbb{R}^{n}   , and the initial step-size,     σ  0   >  0       subscript  σ  0   0    \sigma_{0}>0   . Optionally, the number of candidate samples λ (population size) can be modified by the user in order to change the characteristic search behavior (see above) and termination conditions can or should be adjusted to the problem at hand.  The CMA-ES has been empirically successful in hundreds of applications and is considered to be useful in particular on non-convex, non-separable, ill-conditioned, multi-modal or noisy objective functions. The search space dimension ranges typically between two and a few hundred. Assuming a black-box optimization scenario, where gradients are not available (or not useful) and function evaluations are the only considered cost of search, the CMA-ES method is likely to be outperformed by other methods in the following conditions:   on low-dimensional functions, say    n  <  5      n  5    n<5   , for example by the downhill simplex method or surrogate-based methods (like kriging with expected improvement);    on separable functions without or with only negligible dependencies between the design variables in particular in the case of multi-modality or large dimension, for example by differential evolution ;    on (nearly) convex -quadratic functions with low or moderate condition number of the Hessian matrix , where BFGS or NEWUOA are typically ten times faster;    on functions that can already be solved with a comparatively small number of function evaluations, say no more than    10  n      10  n    10n   , where CMA-ES is often slower than, for example, NEWUOA or Multilevel Coordinate Search (MCS).   On separable functions, the performance disadvantage is likely to be most significant in that CMA-ES might not be able to find at all comparable solutions. On the other hand, on non-separable functions that are ill-conditioned or rugged or can only be solved with more than    100  n      100  n    100n   function evaluations, the CMA-ES shows most often superior performance.  Variations and Extensions  The (1+1)-CMA-ES 11 generates only one candidate solution per iteration step which becomes the new distribution mean if it is better than the current mean. For     c  c   =  1       subscript  c  c   1    c_{c}=1   the (1+1)-CMA-ES is a close variant of Gaussian adaptation . Some Natural Evolution Strategies are close variants of the CMA-ES with specific parameter settings. Natural Evolution Strategies do not utilize evolution paths (that means in CMA-ES setting     c  c   =   c  σ   =  1         subscript  c  c    subscript  c  σ        1     c_{c}=c_{\sigma}=1   ) and they formalize the update of variances and covariances on a Cholesky factor instead of a covariance matrix. The CMA-ES has also been extended to multiobjective optimization as MO-CMA-ES. 12 Another remarkable extension has been the addition of a negative update of the covariance matrix with the so-called active CMA. 13  With the advent of niching methods in evolutionary strategies, the question of an optimal niche radius arises. An "adaptive individual niche radius" is introduced in 14  See also   Global optimization  Stochastic optimization  Derivative-free optimization   References  Bibliography   Hansen N, Ostermeier A (2001). Completely derandomized self-adaptation in evolution strategies. Evolutionary Computation , 9 (2) pp. 159–195. 1  Hansen N, Müller SD, Koumoutsakos P (2003). Reducing the time complexity of the derandomized evolution strategy with covariance matrix adaptation (CMA-ES). Evolutionary Computation , 11 (1) pp. 1–18. 2  Hansen N, Kern S (2004). Evaluating the CMA evolution strategy on multimodal test functions. In Xin Yao et al., editors, Parallel Problem Solving from Nature - PPSN VIII , pp. 282–291, Springer. 3  Igel C, Hansen N, Roth S (2007). Covariance Matrix Adaptation for Multi-objective Optimization. Evolutionary Computation , 15 (1) pp. 1–28. 4   External links   A short introduction to CMA-ES by N. Hansen  The CMA Evolution Strategy: A Tutorial  CMA-ES source code page   fr:Stratégie d'évolution#CMA-ES "  Category:Evolutionary algorithms  Category:Stochastic optimization  Category:Optimization algorithms and methods     ↩  ↩  ↩  ↩    ↩    ↩  ↩  ↩  ↩  ↩    