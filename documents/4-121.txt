   Cubic Hermite spline      Cubic Hermite spline   In numerical analysis , a cubic Hermite spline or cubic Hermite interpolator is a spline where each piece is a third-degree polynomial specified in Hermite form: 1 that is, by its values and first derivatives at the end points of the corresponding domain interval.  Cubic Hermite splines are typically used for interpolation of numeric data specified at given argument values     x  1   ,   x  2   ,  …  ,   x  n       subscript  x  1    subscript  x  2   normal-…   subscript  x  n     x_{1},x_{2},\ldots,x_{n}   , to obtain a smooth continuous function . The data should consist of the desired function value and derivative at each    x  k     subscript  x  k    x_{k}   . (If only the values are provided, the derivatives must be estimated from them.) The Hermite formula is applied to each interval    (   x  k   ,   x   k  +  1    )      subscript  x  k    subscript  x    k  1      (x_{k},x_{k+1})   separately. The resulting spline will be continuous and will have continuous first derivative.  Cubic polynomial splines can be specified in other ways, the Bézier form being the most common. However, these two methods provide the same set of splines, and data can be easily converted between the Bézier and Hermite forms; so the names are often used as if they were synonymous.  Cubic polynomial splines are extensively used in computer graphics and geometric modeling to obtain curves or motion trajectories that pass through specified points of the plane or three-dimensional space . In these applications, each coordinate of the plane or space is separately interpolated by a cubic spline function of a separate parameter t .  Cubic splines can be extended to functions of two or more parameters, in several ways. Bicubic splines ( Bicubic interpolation ) are often used to interpolate data on a regular rectangular grid, such as pixel values in a digital image or altitude data on a terrain. Bicubic surface patches , defined by three bicubic splines, are an essential tool in computer graphics.  Cubic splines are often called csplines , especially in computer graphics. Hermite splines are named after Charles Hermite .  Interpolation on a single interval  Unit interval (0, 1)  On the unit interval    (  0  ,  1  )     0  1    (0,1)   , given a starting point    𝒑  0     subscript  𝒑  0    \boldsymbol{p}_{0}   at    t  =  0      t  0    t=0   and an ending point    𝒑  1     subscript  𝒑  1    \boldsymbol{p}_{1}   at    t  =  1      t  1    t=1   with starting tangent    𝒎  0     subscript  𝒎  0    \boldsymbol{m}_{0}   at    t  =  0      t  0    t=0   and ending tangent    𝒎  1     subscript  𝒎  1    \boldsymbol{m}_{1}   at    t  =  1      t  1    t=1   , the polynomial can be defined by       𝒑   (  t  )    =     (     2   t  3    -   3   t  2     +  1   )    𝒑  0    +    (     t  3   -   2   t  2     +  t   )    𝒎  0    +    (    -   2   t  3     +   3   t  2     )    𝒑  1    +    (    t  3   -   t  2    )    𝒎  1           𝒑  t             2   superscript  t  3      3   superscript  t  2     1    subscript  𝒑  0           superscript  t  3     2   superscript  t  2     t    subscript  𝒎  0            2   superscript  t  3       3   superscript  t  2      subscript  𝒑  1         superscript  t  3    superscript  t  2     subscript  𝒎  1       \boldsymbol{p}(t)=(2t^{3}-3t^{2}+1)\boldsymbol{p}_{0}+(t^{3}-2t^{2}+t)%
 \boldsymbol{m}_{0}+(-2t^{3}+3t^{2})\boldsymbol{p}_{1}+(t^{3}-t^{2})\boldsymbol%
 {m}_{1}   where t ∈ [0, 1].  Interpolation on an arbitrary interval  Interpolating   x   x   x   in an arbitrary interval    (   x  k   ,   x   k  +  1    )      subscript  x  k    subscript  x    k  1      (x_{k},x_{k+1})   is done by mapping the latter to    [  0  ,  1  ]     0  1    [0,1]   through an affine (degree 1) change of variable. The formula is        𝒑   (  x  )    =     h  00    (  t  )    𝒑  k    +    h  10    (  t  )    (    x   k  +  1    -   x  k    )    𝒎  k    +    h  01    (  t  )    𝒑   k  +  1     +    h  11    (  t  )    (    x   k  +  1    -   x  k    )    𝒎   k  +  1       .        𝒑  x        subscript  h  00   t   subscript  𝒑  k       subscript  h  10   t     subscript  x    k  1     subscript  x  k     subscript  𝒎  k       subscript  h  01   t   subscript  𝒑    k  1        subscript  h  11   t     subscript  x    k  1     subscript  x  k     subscript  𝒎    k  1        \boldsymbol{p}(x)=h_{00}(t)\boldsymbol{p}_{k}+h_{10}(t)(x_{k+1}-x_{k})%
 \boldsymbol{m}_{k}+h_{01}(t)\boldsymbol{p}_{k+1}+h_{11}(t)(x_{k+1}-x_{k})%
 \boldsymbol{m}_{k+1}.   with    t  =    (   x  -   x  k    )   /   (    x   k  +  1    -   x  k    )        t      x   subscript  x  k       subscript  x    k  1     subscript  x  k       t=(x-x_{k})/(x_{k+1}-x_{k})   and   h   h   h   refers to the basis functions, defined below. Note that the tangent values have been scaled by     x   k  +  1    -   x  k        subscript  x    k  1     subscript  x  k     x_{k+1}-x_{k}   compared to the equation on the unit interval.  Uniqueness  The formulae specified above provide the unique third-degree polynomial path between the two points with the given tangents.  Proof: Let    Q   (  x  )       Q  x    Q(x)   be another third degree polynomial satisfying the given boundary conditions. Define     R   (  x  )    =    Q   (  x  )    -   P   (  x  )           R  x       Q  x     P  x      R(x)=Q(x)-P(x)   . Since both   Q   Q   Q   and   P   P   P   are third degree polynomials,   R   R   R   is at most a third degree polynomial. Furthermore:       R   (  0  )    =    Q   (  0  )    -   P   (  0  )     =  0          R  0       Q  0     P  0         0     R(0)=Q(0)-P(0)=0   (We assume both   P   P   P   and   Q   Q   Q   satisfy the boundary conditions)       R   (  1  )    =  0        R  1   0    R(1)=0     So   R   R   R   must be of the form:       R   (  x  )    =   a  x   (   x  -  1   )    (   x  -  r   )          R  x     a  x    x  1     x  r      R(x)=ax(x-1)(x-r)           R  ′    (  x  )    =    a  x   (   x  -  1   )    +   a  x   (   x  -  r   )    +   a   (   x  -  1   )    (   x  -  r   )            superscript  R  normal-′   x       a  x    x  1      a  x    x  r      a    x  1     x  r       R^{\prime}(x)=ax(x-1)+ax(x-r)+a(x-1)(x-r)     We know furthermore that:        R  ′    (  0  )    =     Q  ′    (  0  )    -    P  ′    (  0  )     =  0           superscript  R  normal-′   0        superscript  Q  normal-′   0      superscript  P  normal-′   0         0     R^{\prime}(0)=Q^{\prime}(0)-P^{\prime}(0)=0           R  ′    (  1  )    =     Q  ′    (  1  )    -    P  ′    (  1  )     =  0           superscript  R  normal-′   1        superscript  Q  normal-′   1      superscript  P  normal-′   1         0     R^{\prime}(1)=Q^{\prime}(1)-P^{\prime}(1)=0     Putting () and () together, we deduce that    a  =  0      a  0    a=0   and therefore    R  =  0      R  0    R=0   , thus     P   (  x  )    =   Q   (  x  )          P  x     Q  x     P(x)=Q(x)     Representations  We can write the interpolation polynomial as       𝒑   (  t  )    =     h  00    (  t  )    𝒑  0    +    h  10    (  t  )    𝒎  0    +    h  01    (  t  )    𝒑  1    +    h  11    (  t  )    𝒎  1           𝒑  t        subscript  h  00   t   subscript  𝒑  0       subscript  h  10   t   subscript  𝒎  0       subscript  h  01   t   subscript  𝒑  1       subscript  h  11   t   subscript  𝒎  1       \boldsymbol{p}(t)=h_{00}(t)\boldsymbol{p}_{0}+h_{10}(t)\boldsymbol{m}_{0}+h_{0%
 1}(t)\boldsymbol{p}_{1}+h_{11}(t)\boldsymbol{m}_{1}   where    h  00     subscript  h  00    h_{00}   ,    h  10     subscript  h  10    h_{10}   ,    h  01     subscript  h  01    h_{01}   ,    h  11     subscript  h  11    h_{11}   are Hermite basis functions. These can be written in different ways, each way revealing different properties.       expanded   factorized   Bernstein          h  00    (  t  )        subscript  h  00   t    h_{00}(t)            2   t  3    -   3   t  2     +  1          2   superscript  t  3      3   superscript  t  2     1    2t^{3}-3t^{2}+1           (   1  +   2  t    )     (   1  -  t   )   2         1    2  t     superscript    1  t   2     (1+2t)(1-t)^{2}            B  0    (  t  )    +    B  1    (  t  )           subscript  B  0   t      subscript  B  1   t     B_{0}(t)+B_{1}(t)             h  10    (  t  )        subscript  h  10   t    h_{10}(t)            t  3   -   2   t  2     +  t         superscript  t  3     2   superscript  t  2     t    t^{3}-2t^{2}+t          t    (   1  -  t   )   2       t   superscript    1  t   2     t(1-t)^{2}            1  3   ⋅   B  1     (  t  )        normal-⋅    1  3    subscript  B  1    t    \frac{1}{3}\cdot B_{1}(t)             h  01    (  t  )        subscript  h  01   t    h_{01}(t)           -   2   t  3     +   3   t  2            2   superscript  t  3       3   superscript  t  2      -2t^{3}+3t^{2}           t  2    (   3  -   2  t    )        superscript  t  2     3    2  t      t^{2}(3-2t)            B  3    (  t  )    +    B  2    (  t  )           subscript  B  3   t      subscript  B  2   t     B_{3}(t)+B_{2}(t)             h  11    (  t  )        subscript  h  11   t    h_{11}(t)           t  3   -   t  2        superscript  t  3    superscript  t  2     t^{3}-t^{2}           t  2    (   t  -  1   )        superscript  t  2     t  1     t^{2}(t-1)          -     1  3   ⋅   B  2     (  t  )           normal-⋅    1  3    subscript  B  2    t     -\frac{1}{3}\cdot B_{2}(t)        The "expanded" column shows the representation used in the definition above. The "factorized" column shows immediately, that    h  10     subscript  h  10    h_{10}   and    h  11     subscript  h  11    h_{11}   are zero at the boundaries. You can further conclude that    h  01     subscript  h  01    h_{01}   and    h  11     subscript  h  11    h_{11}   have a zero of multiplicity 2 at 0 and    h  00     subscript  h  00    h_{00}   and    h  10     subscript  h  10    h_{10}   have such a zero at 1, thus they have slope 0 at those boundaries. The "Bernstein" column shows the decomposition of the Hermite basis functions into Bernstein polynomials of order 3:        B  k    (  t  )    =    (     3      k     )   ⋅   t  k   ⋅    (   1  -  t   )    3  -  k            subscript  B  k   t    normal-⋅   binomial  3  k    superscript  t  k    superscript    1  t     3  k       B_{k}(t)={3\choose k}\cdot t^{k}\cdot(1-t)^{3-k}     Using this connection you can express cubic Hermite interpolation in terms of cubic Bézier curves with respect to the four values     𝒑  0   ,    𝒑  0   +    𝒎  0   3    ,    𝒑  1   -    𝒎  1   3    ,   𝒑  1       subscript  𝒑  0      subscript  𝒑  0      subscript  𝒎  0   3       subscript  𝒑  1      subscript  𝒎  1   3     subscript  𝒑  1     \boldsymbol{p}_{0},\boldsymbol{p}_{0}+\frac{\boldsymbol{m}_{0}}{3},\boldsymbol%
 {p}_{1}-\frac{\boldsymbol{m}_{1}}{3},\boldsymbol{p}_{1}   and do Hermite interpolation using the de Casteljau algorithm . It shows that in a cubic Bézier patch the two control points in the middle determine the tangents of the interpolation curve at the respective outer points.  Interpolating a data set  A data set,    (   t  k   ,   𝒑  k   )      subscript  t  k    subscript  𝒑  k     (t_{k},\boldsymbol{p}_{k})   for    k  =   1  ,  …  ,  n       k   1  normal-…  n     k=1,\ldots,n   , can be interpolated by applying the above procedure on each interval, where the tangents are chosen in a sensible manner, meaning that the tangents for intervals sharing endpoints are equal. The interpolated curve then consists of piecewise cubic Hermite splines, and is globally continuously differentiable in    (   t  1   ,   t  n   )      subscript  t  1    subscript  t  n     (t_{1},t_{n})   .  The choice of tangents is non-unique, and there are several options available.  Finite difference  The simplest choice is the three-point difference, not requiring constant interval lengths,       𝒎  k   =      𝒑   k  +  1    -   𝒑  k     2   (    t   k  +  1    -   t  k    )     +     𝒑  k   -   𝒑   k  -  1      2   (    t  k   -   t   k  -  1     )           subscript  𝒎  k          subscript  𝒑    k  1     subscript  𝒑  k      2     subscript  t    k  1     subscript  t  k           subscript  𝒑  k    subscript  𝒑    k  1       2     subscript  t  k    subscript  t    k  1          \boldsymbol{m}_{k}=\frac{\boldsymbol{p}_{k+1}-\boldsymbol{p}_{k}}{2(t_{k+1}-t_%
 {k})}+\frac{\boldsymbol{p}_{k}-\boldsymbol{p}_{k-1}}{2(t_{k}-t_{k-1})}   for internal points    k  =   2  ,  …  ,   n  -  1        k   2  normal-…    n  1      k=2,\ldots,n-1   , and one-sided difference at the endpoints of the data set.  Cardinal spline  A cardinal spline , sometimes called a canonical spline , 2 is obtained 3 if       𝒎  k   =    (   1  -  c   )      𝒑   k  +  1    -   𝒑   k  -  1       t   k  +  1    -   t   k  -  1            subscript  𝒎  k       1  c        subscript  𝒑    k  1     subscript  𝒑    k  1        subscript  t    k  1     subscript  t    k  1         \boldsymbol{m}_{k}=(1-c)\frac{\boldsymbol{p}_{k+1}-\boldsymbol{p}_{k-1}}{t_{k+%
 1}-t_{k-1}}   is used to calculate the tangents. The parameter   c   c   c   is a tension parameter that must be in the interval    (  0  ,  1  )     0  1    (0,1)   . In some sense, this can be interpreted as the "length" of the tangent.    c  =  1      c  1    c=1   will yield all zero tangents, and    c  =  0      c  0    c=0   yields a Catmull–Rom spline.  Catmull–Rom spline  For tangents chosen to be       𝒎  k   =     𝒑   k  +  1    -   𝒑   k  -  1       t   k  +  1    -   t   k  -  1           subscript  𝒎  k        subscript  𝒑    k  1     subscript  𝒑    k  1        subscript  t    k  1     subscript  t    k  1        \boldsymbol{m}_{k}=\frac{\boldsymbol{p}_{k+1}-\boldsymbol{p}_{k-1}}{t_{k+1}-t_%
 {k-1}}   a Catmull–Rom spline is obtained, being a special case of a cardinal spline. This assumes uniform parameter spacing.  The curve is named after Edwin Catmull and Raphael Rom . The principal advantage of this technique is that the points along the original set of points also make up the control points for the spline curve. 4 Two additional points are required on either end of the curve. The default implementation of the Catmull–Rom algorithm can produce loops and self intersections. The chordal and centripetal Catmull–Rom implementations 5 solve this problem, but use a slightly different calculation. 6 In computer graphics , Catmull–Rom splines are frequently used to get smooth interpolated motion between key frames . For example, most camera path animations generated from discrete key-frames are handled using Catmull–Rom splines. They are popular mainly for being relatively easy to compute, guaranteeing that each key frame position will be hit exactly, and also guaranteeing that the tangents of the generated curve are continuous over multiple segments.  Kochanek–Bartels spline  A Kochanek–Bartels spline is a further generalization on how to choose the tangents given the data points    𝒑   k  -  1      subscript  𝒑    k  1     \boldsymbol{p}_{k-1}   ,    𝒑  k     subscript  𝒑  k    \boldsymbol{p}_{k}   and    𝒑   k  +  1      subscript  𝒑    k  1     \boldsymbol{p}_{k+1}   , with three parameters possible, tension, bias and a continuity parameter.  Monotone cubic interpolation  If a cubic Hermite spline of any of the above listed types is used for interpolation of a monotonic data set, the interpolated function will not necessarily be monotonic, but monotonicity can be preserved by adjusting the tangents.  Interpolation on the unit interval without exact derivatives  Given p −1 , p 0 , p 1 and p 2 as the values that the function should take on at −1, 0, 1 and 2, we can use centered differences instead of exact derivatives. 7 Thus the Catmull–Rom spline is        CINT  x    (   p   -  1    ,   p  0   ,   p  1   ,   p  2   )    =     1  2    (        -   x  3    +   2   x  2     -  x          3   x  3    -   5   x  2     +  2         -   3   x  3     +   4   x  2    +  x         x  3   -   x  2       )    ⋅   (      p   -  1         p  0        p  1        p  2      )    =     1  2    (      x   (     (   2  -  x   )   x   -  1   )           x  2    (    3  x   -  5   )    +  2        x   (     (   4  -   3  x    )   x   +  1   )          (   x  -  1   )    x  2       )    ⋅   (      p   -  1         p  0        p  1        p  2      )             subscript  CINT  x     subscript  p    1     subscript  p  0    subscript  p  1    subscript  p  2      normal-⋅      1  2            superscript  x  3      2   superscript  x  2     x           3   superscript  x  3      5   superscript  x  2     2           3   superscript  x  3       4   superscript  x  2    x        superscript  x  3    superscript  x  2          subscript  p    1       subscript  p  0      subscript  p  1      subscript  p  2            normal-⋅      1  2       x        2  x   x   1           superscript  x  2       3  x   5    2       x        4    3  x    x   1          x  1    superscript  x  2          subscript  p    1       subscript  p  0      subscript  p  1      subscript  p  2         \mathrm{CINT}_{x}(p_{-1},p_{0},p_{1},p_{2})=\frac{1}{2}\begin{pmatrix}-x^{3}+2%
 x^{2}-x\\
 3x^{3}-5x^{2}+2\\
 -3x^{3}+4x^{2}+x\\
 x^{3}-x^{2}\end{pmatrix}\cdot\begin{pmatrix}p_{-1}\\
 p_{0}\\
 p_{1}\\
 p_{2}\end{pmatrix}=\frac{1}{2}\begin{pmatrix}x((2-x)x-1)\\
 x^{2}(3x-5)+2\\
 x((4-3x)x+1)\\
 (x-1)x^{2}\end{pmatrix}\cdot\begin{pmatrix}p_{-1}\\
 p_{0}\\
 p_{1}\\
 p_{2}\end{pmatrix}   for    x  ∈   [  0  ,  1  ]       x   0  1     x\in[0,1]   , where the left-hand vector is independent of the p .  This writing is relevant for tricubic interpolation , where one optimization requires you to compute CINT x sixteen times with the same x and different p .  See also   Bicubic interpolation , a generalization to two dimensions  Tricubic interpolation , a generalization to three dimensions  Hermite interpolation  Multivariate interpolation  Spline interpolation  Discrete spline interpolation   References   Catmull, Edwin and Rom, Raphael, A class of local interpolating splines, in R. E. Barnhill and R. F. Riesenfeld (eds.) Computer Aided Geometric Design, Academic Press, New York, 1974, 317–326.   External links   Spline Curves , Prof. Donald H. House Clemson University  Multi-dimensional Hermite Interpolation and Approximation , Prof. Chandrajit Bajaj, Purdue University  Introduction to Catmull–Rom Splines , MVPs.org  Interpolating Cardinal and Catmull–Rom splines  Interpolation methods: linear, cosine, cubic and hermite (with C sources)  Common Spline Equations   "  Category:Splines  Category:Interpolation     ↩  Charles Petzold. "Canonical Splines in WPF and Silverlight" . 2009. ↩  Cardinal Splines at Microsoft Developer Network ↩  E. Catmull and R. Rom. A class of local interpolating splines. Computer Aided Geometric Design, pages 317{326, 1974. ↩  N. Dyn, M. S. Floater, and K. Hormann. Four-point curve subdivision based on iterated chordal and centripetal parameterizations. Computer Aided Geometric Design, 26(3):279{286, 2009 ↩  P. J. Barry and R. N. Goldman. A recursive evaluation algorithm for a class of Catmull-Rom splines. SIGGRAPH Computer Graphics, 22(4):199{204, 1988. ↩  Two hierarchies of spline interpolations. Practical algorithms for multivariate higher order splines ↩     