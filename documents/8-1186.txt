   Damgård–Jurik cryptosystem      Damgård–Jurik cryptosystem  The '''Damgård–Jurik cryptosystem''' [[Ivan Damgård]], Mads Jurik: [http://www.brics.dk/RS/00/45/ A Generalisation, a Simplification and Some Applications of Paillier's Probabilistic Public-Key System]. Public Key Cryptography 2001: 119-136 is a generalization of the [[Paillier cryptosystem]]. It uses computation s modulo    n   s  +  1      superscript  n    s  1     n^{s+1}   where   n   n   n   is an RSA modulus and   s   s   s   a (positive) natural number . Paillier's scheme is the special case with    s  =  1      s  1    s=1   . The order    φ   (   n   s  +  1    )       φ   superscript  n    s  1      \varphi(n^{s+1})   ( Euler's totient function ) of    Z   n   s  +  1    *     subscript   superscript  Z     superscript  n    s  1      Z^{*}_{n^{s+1}}   can be divided by    n  s     superscript  n  s    n^{s}   . Moreover    Z   n   s  +  1    *     subscript   superscript  Z     superscript  n    s  1      Z^{*}_{n^{s+1}}   can be written as the direct product of    G  ×  H      G  H    G\times H   .   G   G   G   is cyclic and of order    n  s     superscript  n  s    n^{s}   , while   H   H   H   is isomorphic to    Z  n  *     subscript   superscript  Z    n    Z^{*}_{n}   . For encryption, the message is transformed into the corresponding coset of the factor group     G  /  H      G  H    G/H   and the security of the scheme relies on the difficulty of distinguishing random elements in different cosets of   H   H   H   . It is semantically secure if it is hard to decide if two given elements are in the same coset. Like Paillier, the security of Damgård–Jurik can be proven under the decisional composite residuosity assumption .  Key generation   Choose two large prime numbers  p and q randomly and independently of each other.  Compute    n  =   p  q       n    p  q     n=pq   and    λ  =   lcm   (   p  -  1   ,   q  -  1   )        λ   lcm    p  1     q  1      \lambda=\operatorname{lcm}(p-1,q-1)   .  Choose an element    g  ∈   ℤ   n   s  +  1    *       g   subscript   superscript  ℤ     superscript  n    s  1       g\in\mathbb{Z}^{*}_{n^{s+1}}   such that    g  =      (   1  +  n   )   j   x   mod   n   s  +  1         g   modulo     superscript    1  n   j   x    superscript  n    s  1       g=(1+n)^{j}x\mod n^{s+1}   for a known   j   j   j    relative prime to   n   n   n   and    x  ∈  H      x  H    x\in H   .  Using the Chinese Remainder Theorem , choose   d   d   d   such that     d  mod  n   ∈   ℤ  n  *        modulo  d  n    subscript   superscript  ℤ    n     d\mod n\in\mathbb{Z}^{*}_{n}   and    d  =   0  mod  λ       d   modulo  0  λ     d=0\mod\lambda   . For instance   d   d   d   could be   λ   λ   \lambda   as in Paillier's original scheme.    The public (encryption) key is    (  n  ,  g  )     n  g    (n,g)   .  The private (decryption) key is   d   d   d   .   Encryption   Let   m   m   m   be a message to be encrypted where    m  ∈   ℤ   n  s        m   subscript  ℤ   superscript  n  s      m\in\mathbb{Z}_{n^{s}}   .  Select random   r   r   r   where    r  ∈   ℤ   n   s  +  1    *       r   subscript   superscript  ℤ     superscript  n    s  1       r\in\mathbb{Z}^{*}_{n^{s+1}}   .  Compute ciphertext as    c  =     g  m   ⋅   r   n  s     mod   n   s  +  1         c   modulo   normal-⋅   superscript  g  m    superscript  r   superscript  n  s      superscript  n    s  1       c=g^{m}\cdot r^{n^{s}}\mod n^{s+1}   .   Decryption   Ciphertext    c  ∈   ℤ   n   s  +  1    *       c   subscript   superscript  ℤ     superscript  n    s  1       c\in\mathbb{Z}^{*}_{n^{s+1}}     Compute      c  d    m  o   d    n   s  +  1         superscript  c  d   m  o  d   superscript  n    s  1      c^{d}\;mod\;n^{s+1}   . If c is a valid ciphertext then     c  d   =    (    g  m    r   n  s     )   d   =    (     (   1  +  n   )    j  m     x  m    r   n  s     )   d   =     (   1  +  n   )    j  m   d   m  o   d    n  s       (    x  m    r   n  s     )     d   m  o   d   λ     =    (   1  +  n   )    j  m   d   m  o   d    n  s            superscript  c  d    superscript     superscript  g  m    superscript  r   superscript  n  s     d         superscript     superscript    1  n     j  m     superscript  x  m    superscript  r   superscript  n  s     d           superscript    1  n     j  m  d  m  o  d   superscript  n  s      superscript     superscript  x  m    superscript  r   superscript  n  s       d  m  o  d  λ           superscript    1  n     j  m  d  m  o  d   superscript  n  s        c^{d}=(g^{m}r^{n^{s}})^{d}=((1+n)^{jm}x^{m}r^{n^{s}})^{d}=(1+n)^{jmd\;mod\;n^{%
 s}}(x^{m}r^{n^{s}})^{d\;mod\;\lambda}=(1+n)^{jmd\;mod\;n^{s}}   .  Apply a recursive version of the Paillier decryption mechanism to obtain    j  m  d      j  m  d    jmd   . As    j  d      j  d    jd   is known, it is possible to compute    m  =     (   j  m  d   )   ⋅     (   j  d   )    -  1      m  o   d    n  s        m     normal-⋅    j  m  d    superscript    j  d     1     m  o  d   superscript  n  s      m=(jmd)\cdot(jd)^{-1}\;mod\;n^{s}   .   Simplification  At the cost of no longer containing the classical Paillier cryptosystem as an instance, Damgård–Jurik can be simplified in the following way:   The base g is fixed as    g  =   n  +  1       g    n  1     g=n+1   .  The decryption exponent d is computed such that    d  =    1   m  o   d    n  s        d    1  m  o  d   superscript  n  s      d=1\;mod\;n^{s}   and    d  =    0   m  o   d   λ       d    0  m  o  d  λ     d=0\;mod\;\lambda   .   In this case decryption produces     c  d   =      (   1  +  n   )   m    m  o   d    n   s  +  1          superscript  c  d      superscript    1  n   m   m  o  d   superscript  n    s  1       c^{d}=(1+n)^{m}\;mod\;n^{s+1}   . Using recursive Paillier decryption this gives us directly the plaintext m .  See also   The Damgård–Jurik cryptosystem interactive simulator demonstrates a voting application.   References  "  Category:Public-key encryption schemes   