   Filtered-popping recursive transition network      Filtered-popping recursive transition network  A '''filtered-popping recursive transition network''' ('''FPRTN'''), Javier M. Sastre, [http://dx.doi.org/10.1007/978-3-642-02979-0_28 "Efficient parsing using filtered-popping recursive transition networks"], ''Lecture Notes in Artificial Intelligence'', '''5642''':241-244, 2009 or simply '''filtered-popping network''' ('''FPN'''), is a [[recursive transition network]] ([[Recursive transition network|RTN]] ) 1 extended with a map of states to keys where returning from a subroutine jump requires the acceptor and return states to be mapped to the same key. RTNs are finite-state machines that can be seen as finite-state automata extended with a stack of return states; as well as consuming transitions and   ε   ε   \varepsilon   -transitions, RTNs may define call transitions. These transitions perform a subroutine jump by pushing the transition's target state onto the stack and bringing the machine to the called state. Each time an acceptor state is reached, the return state at the top of the stack is popped out, provided that the stack is not empty, and the machine is brought to this state.  Throughout this article we refer to filtered-popping recursive transition networks as FPNs , though this acronym is ambiguous (e.g.: fuzzy Petri nets ). Filtered-popping networks and FPRTNs are unambiguous alternatives.  Formal Definition  A FPN is a structure    (  Q  ,  K  ,  Σ  ,  δ  ,  κ  ,   Q  I   ,  F  )     Q  K  normal-Σ  δ  κ   subscript  Q  I   F    (Q,K,\Sigma,\delta,\kappa,Q_{I},F)   where      Q   Q   Q   is a finite set of states,     K   K   K   is a finite set of keys,     Σ   normal-Σ   \Sigma   is a finite input alphabet,      δ  :    Q  ×   (   Σ  ∪   {  ε  }   ∪  Q   )    →  Q      normal-:  δ   normal-→    Q    normal-Σ   ε   Q    Q     \delta:Q\times(\Sigma\cup\{\varepsilon\}\cup Q)\to Q   is a partial transition function,   ε   ε   \varepsilon   being the empty symbol,      κ  :   Q  →  K      normal-:  κ   normal-→  Q  K     \kappa:Q\to K   is a map of states to keys,       Q  I   ⊆  Q       subscript  Q  I   Q    Q_{I}\subseteq Q   is the set of initial states, and      F  ⊆  Q      F  Q    F\subseteq Q   is the set of acceptance states.   Transitions  Transitions represent the possibility of bringing the FPN from a source state    q  s     subscript  q  s    q_{s}   to a target state    q  t     subscript  q  t    q_{t}   by possibly performing an additional action. Depending on this action, we distinguish the following types of explicitly -defined transitions:      ε   ε   \varepsilon   -transitions are transitions of the form     δ   (   q  s   ,  ε  )    →   q  t      normal-→    δ    subscript  q  s   ε     subscript  q  t     \delta(q_{s},\varepsilon)\to q_{t}   and perform no additional action,  consuming transitions are transitions of the form     δ   (   q  s   ,  σ  )    →   q  t      normal-→    δ    subscript  q  s   σ     subscript  q  t     \delta(q_{s},\sigma)\to q_{t}   and consume an input symbol   σ   σ   \sigma   , and  call transitions are transitions of the form     δ   (   q  s   ,   q  c   )    →   q  t      normal-→    δ    subscript  q  s    subscript  q  c      subscript  q  t     \delta(q_{s},q_{c})\to q_{t}   and perform a subroutine jump to called state    q  c     subscript  q  c    q_{c}   before reaching    q  t     subscript  q  t    q_{t}   .   The behaviour of call transitions is governed by two kinds of implicitly -defined transitions:   for each call transition     δ   (   q  s   ,   q  c   )    →   q  t      normal-→    δ    subscript  q  s    subscript  q  c      subscript  q  t     \delta(q_{s},q_{c})\to q_{t}   the FPN implicitly defines a push transition that brings the machine from    q  s     subscript  q  s    q_{s}   to    q  c     subscript  q  c    q_{c}   by pushing    q  t     subscript  q  t    q_{t}   onto the stack , and  for each pair of states     (   q  f   ,   q  r   )   ∈   F  ×  Q         subscript  q  f    subscript  q  r      F  Q     (q_{f},q_{r})\in F\times Q   the FPN implicitly defines a pop transition that brings the machine from    q  f     subscript  q  f    q_{f}   to    q  r     subscript  q  r    q_{r}   by popping    q  r     subscript  q  r    q_{r}   from the stack iff     q  r     subscript  q  r    q_{r}   is the state at the top of the stack and     κ   (   q  f   )    =   κ   (   q  r   )          κ   subscript  q  f      κ   subscript  q  r      \kappa(q_{f})=\kappa(q_{r})   .   Push transitions initialize subroutine jumps and pop transitions are equivalent to return statements .  Purpose  A ( natural language ) text can be enriched with meta-information by the application of a RTN with output ; for instance, a RTN inserting XML tags can be used for transforming a plain text into a structured XML document. A RTN with output representing a natural language  grammar would delimit and add the syntactic structure of each text sentence (see parsing ). Other RTNs with output could simply mark text segments containing relevant information (see information extraction ). The application of a RTN with output representing an ambiguous grammar results in a set of possible translations or interpretations of the input. Computing this set has an exponential worst-case cost , even for an Earley parser for RTNs with output, 2 due to cases in which the number of translations increases exponentially w.r.t. the input length; for instance, the number of interpretations of a natural language sentence increases exponentially w.r.t. the number of unresolved prepositional phrase attachments: 3 4   in sentence the girl saw the monkey with the telescope , it is unknown whether the girl used the telescope or the monkey was holding it (2 1 interpretations),  in sentence the girl saw the monkey with the telescope in the garden , it is also unknown whether the monkey was in the garden or the action took place in the garden (2 2 interpretations),  in sentence the girl saw the monkey with the telescope in the garden under the tree , it is unknown as well whether the monkey was under the tree or the action took place under the tree (2 3 interpretations),  etc.   FPNs serve as a compact representation of this set of translations, allowing to compute it in cubic time by means of an Earley-like parser. 5 FPN states correspond to execution states (see instruction steps ) of an Earley-parser for RTNs  without output, and FPN transitions correspond to possible translations of input symbols. The   κ   κ   \kappa   map of the resulting FPN gives the correspondence between the represented output segments and the recognized input segments: given a recognized input sequence     σ  1   …   σ  l        subscript  σ  1   normal-…   subscript  σ  l     \sigma_{1}\ldots\sigma_{l}   and a FPN path   p   p   p   starting at a state   q   q   q   and ending at a state    q  ′     superscript  q  normal-′    q^{\prime}   ,   p   p   p   represents a possible translation of input segment     σ    κ   (  q  )    +  1    …   σ   κ   (   q  ′   )          subscript  σ      κ  q   1    normal-…   subscript  σ    κ   superscript  q  normal-′       \sigma_{\kappa(q)+1}\ldots\sigma_{\kappa(q^{\prime})}   . The filtered-popping feature is required in order to avoid FPN paths to represent translations of disconnected or overlapping input segments: a FPN call may contain several translation paths from the called state to an acceptor state, where the input segments they correspond to share the same start point but do not necessarily have the same length. Only return states corresponding to the same input point than the acceptor state finishing the call are valid return states.  References  "  Category:Natural language processing  Category:Computational linguistics     William A. Woods, "Transition network grammars for natural language analysis" , Communications of the ACM , ACM Press , 13 :10:591-606, 1970 ↩  Javier M. Sastre & Mikel L. Forcada, "Efficient parsing using recursive transition networks with output" , Lecture Notes in Computer Science , 5603 :192-204, 2009 ↩  Adwait Ratnaparkhi, " Statistical models for unsupervised prepositional phrase attachment " , ACL-36: Proceedings of the 36th Annual Meeting of the Association for Computational Linguistics and 17th International Conference on Computational Linguistics, pp. 1079-1085, 1998 ↩  Miriam Butt, " Chunk/Shallow parsing " , lecture notes, 2002 ↩      