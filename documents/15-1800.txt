


YDS algorithm




YDS algorithm

YDS is a scheduling algorithm for dynamic speed scaling processors which minimizes the total energy consumption. It was named after and developed by Yao et al.1 There is both an online and an offline version of the algorithm.
Offline Algorithm
Definitions:

There is a set of n Jobs 
 
 
 
 , where each job 
 
 
 
  has a release time 
 
 
 
 , deadline 
 
 
 
  and a processing volume 
 
 
 
 .


 
  is a certain time interval.
Also we have 
 
 
 
 , the work density in 
 
 
 
 .
And finally 
 
 
 
  is the set of Jobs that that must be processed in 
 
 
 
 , that means Jobs with 
 
 
 
 .

The algorithm then works as follows: 
 :While 
 ::Determine the time interval  of maximum density .
 ::In  process the jobs of  at speed  according to [[Earliest_deadline_first_scheduling|EDF]]
 ::Set . 
 ::Remove  from the time horizon and update the release times and deadlines of unscheduled jobs accordingly.
 :end While
 
In other terms it's a recursive algorithm that will follow these steps until all jobs are scheduled:

Calculate all intensities for all possible combinations of intervals. This means that for every start time and end time combination the intensity of work is calculated. For this the times of all jobs whose arrival time and deadline lie inside the interval are added and divided by the interval length. To speed up the process, only combinations of arrival times and later deadlines need to be considered, as times without arrival of a process or deadline can be shrunk to a smaller interval with the same processes, thus increasing intensity, and negative intervals are invalid. Then the maximum intensity interval is selected. In case of multiple equally intense intervals, one can be chosen at will, as intensities of non-overlapping intervals do not influence each other, and removing a part of an interval will not change the intensity of the rest, as processes are removed proportionally.
The processes inside this interval are scheduled using Earliest Deadline First, meaning that the job inside this interval whose deadline will arrive soonest is scheduled first, and so on. The jobs are executed at the above calculated intensity to fit all jobs inside the interval.
The interval is removed from the timeline, as no more calculations can be scheduled here. To simplify further calculations, all arrival times and deadlines of remaining jobs are recalculated to omit already occupied times. For example, assume a job 
 
 
 
  with arrival time 
 
 
 
 , deadline 
 
 
 
  and a workload 
 
 
 
 , and a job 
 
 
 
  with 
 
 
 
 , 
 
 
 
  and 
 
 
 
 . Assume the previous interval was from time 
 
 
 
  to 
 
 
 
 . To omit this interval the times of 
 
 
 
  and 
 
 
 
  need to be adjusted; workloads are unaffected, as no work has been done for either 
 
 
 
  or 
 
 
 
 . 
 
 
 
  stays the same, as it's unaffected by later omissions. 
 
 
 
 , however, needs to be changed to 
 
 
 
 , as 
 
 
 
 . This is the time job 
 
 
 
  has left before its deadline. The arrival time 
 
 
 
  becomes 
 
 
 
 , as it would have been inside the removed interval. 
 
 
 
  also becomes 
 
 
 
 , as the time left after the removed interval is 
 
 
 
 . It is important, however, to remember the actual arrival and deadline times for later assembly of the scheduling.
Repeat steps 1-3 until all jobs have been scheduled.
Assemble jobs into final scheduling according to their allotted time intervals. Remember, though, that an interval may be split in two by another interval calculated earlier.

For any Job instance, the algorithm computes an optimal schedule minimizing the total energy consumption.2
See also

EDF algorithm

References

"
Category:Real-time computing Category:Processor scheduling algorithms



F.F. Yao, A.J. Demers and S. Shenker. A scheduling model for reduced CPU energy. Proc. 36th IEEE Symposium on Foundations of Computer Science , 374–382, 1995.↩
Susanne Albers , "Algorithms for Dynamic Speed Scaling"↩




