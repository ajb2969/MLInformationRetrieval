   Backmarking      Backmarking   In constraint satisfaction , backmarking is a variant of the backtracking algorithm.  Backmarking works like backtracking by iteratively evaluating variables in a given order, for example,     x  1   ,  …  ,   x  n       subscript  x  1   normal-…   subscript  x  n     x_{1},\ldots,x_{n}   . It improves over backtracking by maintaining information about the last time a variable    x  i     subscript  x  i    x_{i}   was instantiated to a value and information about what changed since then. In particular:  (Figure)  An example, in which search has reached xi=d the first time.    for each variable    x  i     subscript  x  i    x_{i}   and value   a   a   a   , the algorithm records information about the last time    x  i     subscript  x  i    x_{i}   has been set to   a   a   a   ; in particular, it stores the minimal index    x  i     subscript  x  i    x_{i}   was then inconsistent ;  for each variable    x  i     subscript  x  i    x_{i}   , the algorithm stores some information relative to what changed since the last time it has evaluated    x  i     subscript  x  i    x_{i}   ; in particular, it stores the minimal index k of a variable that was changed since then.   The first information is collected and stored every time the algorithm evaluates a variable   a   a   a   to     x  1   ,   x  i       subscript  x  1    subscript  x  i     x_{1},x_{i}   , and is done by simply checking consistency of the current assignments for     x  1   ,   x  2   ,   x  i       subscript  x  1    subscript  x  2    subscript  x  i     x_{1},x_{2},x_{i}   , for     x  1   ,   x  2   ,   x  3   ,   x  i       subscript  x  1    subscript  x  2    subscript  x  3    subscript  x  i     x_{1},x_{2},x_{3},x_{i}   , for    x  i     subscript  x  i    x_{i}   , etc.  The second information is changed every time another variable is evaluated. In particular, the index of the "maximal unchanged variable since the last evaluation of    x  j     subscript  x  j    x_{j}   " is possibly changed every time another variable    x  j     subscript  x  j    x_{j}   changes value. Every time an arbitrary variable    x  i     subscript  x  i    x_{i}   changes, all variables    i  >  j      i  j    i>j   with   k   k   k   are considered in turn. If    m  i  n   (  k  ,  j  )       m  i  n   k  j     min(k,j)   was their previous associated index, this value is changed to     x  i   =  a       subscript  x  i   a    x_{i}=a   .  The data collected this way is used to avoid some consistency checks. In particular, whenever backtracking would set    x  i     subscript  x  i    x_{i}   , backmarking compares the two indexes relative to     x  i   =  a       subscript  x  i   a    x_{i}=a   and the pair   k   k   k   . Two conditions allow to determine partial consistency or inconsistency without checking with the constraints. If    x  i     subscript  x  i    x_{i}   is the minimal index of a variable that changed since the last time   j   j   j   was evaluated and     x  1   ,  …  ,   x  j   ,   x  i       subscript  x  1   normal-…   subscript  x  j    subscript  x  i     x_{1},\ldots,x_{j},x_{i}   is the minimal index such that the evaluation of    x  i     subscript  x  i    x_{i}   was consistent the last time   a   a   a   has been evaluated to    j  ≥  k      j  k    j\geq k   , then:   if     x  1   ,  …  ,   x  k   ,   x  i       subscript  x  1   normal-…   subscript  x  k    subscript  x  i     x_{1},\ldots,x_{k},x_{i}   is still inconsistent as it was before, as none of these variables changed so far; as a result, no further consistency check is necessary;  if     x  1   ,  …  ,   x  i       subscript  x  1   normal-…   subscript  x  i     x_{1},\ldots,x_{i}   , the evaluation $x_1,\ldots,x_k,x_i$ is still consistent as it was before; this allows for skipping some consistency checks, but the assignment $x_1,\ldots,x_i$ may still be inconsistent.   Contrary to other variants to backtracking, backmarking does not reduce the search space but only possibly reduce the number of constraints that are satisfied by a partial solution.  References     "  Category:Constraint programming   