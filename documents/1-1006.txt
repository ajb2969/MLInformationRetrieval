   Sheffer stroke      Sheffer stroke   (Figure)  Venn diagram of     A   ↑  B     normal-↑  A  B    ~{}A\uparrow B      In Boolean functions and propositional calculus , the Sheffer stroke , named after Henry M. Sheffer , written "|" (see vertical bar , not to be confused with "||" which is often used to represent disjunction ), "D pq ", or "↑" (an upwards arrow), denotes a logical operation that is equivalent to the negation of the conjunction operation, expressed in ordinary language as "not both". It is also called nand ("not and") or the alternative denial , since it says in effect that at least one of its operands is false. In Boolean algebra and digital electronics it is known as the NAND operation .  Like its dual , the NOR operator (also known as the Peirce arrow or Quine dagger), NAND can be used by itself, without any other logical operator, to constitute a logical formal system (making NAND functionally complete ). This property makes the NAND gate crucial to modern digital electronics , including its use in NAND flash memory and computer processor design.  Definition  The NAND operation is a logical operation on two logical values . It produces a value of true, if — and only if — at least one of the propositions is false.  Truth table  The truth table of A NAND B (also written as A | B , Dpq , or A ↑ B ) is as follows:      INPUT   OUTPUT     A   B     0   0     0   1     1   0     1   1     History  The stroke is named after Henry M. Sheffer , who in 1913 published a paper in the Transactions of the American Mathematical Society (Sheffer 1913) providing an axiomatization of Boolean algebras using the stroke, and proved its equivalence to a standard formulation thereof by Huntington employing the familiar operators of propositional logic ( and , or , not ). Because of self- duality of Boolean algebras, Sheffer's axioms are equally valid for either of the NAND or NOR operations in place of the stroke. Sheffer interpreted the stroke as a sign for non-disjunction (NOR) in his paper, mentioning non-conjunction only in a footnote and without a special sign for it. It was Jean Nicod who first used the stroke as a sign for non-conjunction (NAND) in a paper of 1917 and which has since become current practice. 1 Russell and Whitehead used the Sheffer stroke in the 1927 second edition of Principia Mathematica and suggested it as a replacement for the "or" and "not" operations of the first edition.  Charles Sanders Peirce (1880) had discovered the functional completeness of NAND or NOR more than 30 years earlier, using the term ampheck (for 'cutting both ways'), but he never published his finding.  Properties  NAND does not possess any of the following five properties, each of which is required to be absent from, and the absence of all of which is sufficient for, at least one member of a set of functionally complete operators: truth-preservation, falsity-preservation, linearity , monotonicity , self-duality . (An operator is truth- (falsity-) preserving if its value is truth (falsity) whenever all of its arguments are truth (falsity).) Therefore {NAND} is a functionally complete set.  This can also be realized as follows: All three elements of the functionally complete set {AND, OR, NOT} can be constructed using only NAND . Thus the set {NAND} must be functionally complete as well.  Introduction, elimination, and equivalencies  The Sheffer stroke   ↑   normal-↑   \uparrow   is the negation of the conjunction:          P  ↑  Q     normal-↑  P  Q    P\uparrow Q         ⇔   normal-⇔   \Leftrightarrow          ¬   (   P  and  Q   )         P  italic- and  Q     \neg(P\and Q)       (Figure)  Venn1110.svg       ⇔   normal-⇔   \Leftrightarrow         ¬     \neg        Expressed in terms of NAND   ↑   normal-↑   \uparrow   , the usual operators of propositional logic are:             ¬  P       P    \neg P         ⇔   normal-⇔   \Leftrightarrow         P   P   P         ↑   normal-↑   \uparrow         P   P   P       (Figure)  Venn10.svg       ⇔   normal-⇔   \Leftrightarrow     (Figure)  Venn01.svg       ↑   normal-↑   \uparrow     (Figure)  Venn01.svg                 P  →  Q     normal-→  P  Q    P\rightarrow Q         ⇔   normal-⇔   \Leftrightarrow          P    P   ~{}P         ↑   normal-↑   \uparrow          (   Q  ↑  Q   )     normal-↑  Q  Q    (Q\uparrow Q)         ⇔   normal-⇔   \Leftrightarrow          P    P   ~{}P         ↑   normal-↑   \uparrow          (   P  ↑  Q   )     normal-↑  P  Q    (P\uparrow Q)       (Figure)  Venn1011.svg       ⇔   normal-⇔   \Leftrightarrow     (Figure)  Venn0101.svg       ↑   normal-↑   \uparrow     (Figure)  Venn1100.svg       ⇔   normal-⇔   \Leftrightarrow     (Figure)  Venn0101.svg       ↑   normal-↑   \uparrow     (Figure)  Venn1110.svg                     P  and  Q      P  italic- and  Q    P\and Q         ⇔   normal-⇔   \Leftrightarrow          (   P  ↑  Q   )     normal-↑  P  Q    (P\uparrow Q)         ↑   normal-↑   \uparrow          (   P  ↑  Q   )     normal-↑  P  Q    (P\uparrow Q)       (Figure)  Venn0001.svg       ⇔   normal-⇔   \Leftrightarrow     (Figure)  Venn1110.svg       ↑   normal-↑   \uparrow     (Figure)  Venn1110.svg                 P  Q      P  Q    PQ         ⇔   normal-⇔   \Leftrightarrow          (   P  ↑  P   )     normal-↑  P  P    (P\uparrow P)         ↑   normal-↑   \uparrow          (   Q  ↑  Q   )     normal-↑  Q  Q    (Q\uparrow Q)       (Figure)  Venn0111.svg       ⇔   normal-⇔   \Leftrightarrow     (Figure)  Venn1010.svg       ↑   normal-↑   \uparrow     (Figure)  Venn1100.svg         Formal system based on the Sheffer stroke  The following is an example of a formal system based entirely on the Sheffer stroke, yet having the functional expressiveness of the propositional logic :  Symbols  p n for natural numbers n ( | )  The Sheffer stroke commutes but does not associate (e.g., (T|T)|F = T, but T|(T|F) = F). Hence any formal system including the Sheffer stroke must also include a means of indicating grouping. We shall employ '(' and ')' to this effect.  We also write p , q , r , … instead of p 0 , p 1 , p 2 .  Syntax  Construction Rule I: For each natural number n , the symbol p n is a well-formed formula (wff), called an atom.  Construction Rule II: If X and Y are wffs, then ( X | Y ) is a wff.  Closure Rule: Any formulae which cannot be constructed by means of the first two Construction Rules are not wffs.  The letters U , V , W , X , and Y are metavariables standing for wffs.  A decision procedure for determining whether a formula is well-formed goes as follows: "deconstruct" the formula by applying the Construction Rules backwards, thereby breaking the formula into smaller subformulae. Then repeat this recursive deconstruction process to each of the subformulae. Eventually the formula should be reduced to its atoms, but if some subformula cannot be so reduced, then the formula is not a wff.  Calculus  All wffs of the form   (( U |( V | W ))|(( Y |( Y | Y ))|(( X | V )|(( U | X )|( U | X )))))   are axioms. Instances of   ( U |( V | W )), U    ⊢   proves   \vdash    W    are inference rules.  Simplification  Since the only connective of this logic is |, the symbol | could be discarded altogether, leaving only the parentheses to group the letters. A pair of parentheses must always enclose a pair of wff s. Examples of theorems in this simplified notation are   ( p ( p ( q ( q (( pq )( pq )))))),    ( p ( p (( qq )( pp )))).   The notation can be simplified further, by letting   ( U ) := ( UU )  (( U ))   ≡     \equiv    U    for any U . This simplification causes the need to change some rules:   More than two letters are allowed within parentheses.  Letters or wffs within parentheses are allowed to commute.  Repeated letters or wffs within a same set of parentheses can be eliminated.   The result is a parenthetical version of the Peirce existential graphs .  Another way to simplify the notation is to eliminate parenthesis by using Polish Notation . For example, the earlier examples with only parenthesis could be rewritten using only strokes as follows   ( p ( p ( q ( q (( pq )( pq )))))) becomes  | p | p | q | q || pq | pq , and    ( p ( p (( qq )( pp )))) becomes,  | p | p || qq | pp .   This follows the same rules as the parenthesis version, with opening parenthesis replaced with a Sheffer stroke and the (redundant) closing parenthesis removed.  See also   List of logic symbols    AND gate  Boolean domain  CMOS  Gate equivalent (GE)  Laws of Form  Logic gate  Logical graph  NAND Flash Memory  NAND logic  NAND gate  NOR gate  NOT gate  OR gate  Peirce's law  Peirce arrow = NOR  Propositional logic  Sole sufficient operator  XOR gate  Peirce arrow   Notes  References   Bocheński, Józef Maria (1960), Précis of Mathematical Logic , translated from the French and German editions by Otto Bird, Dordrecht , South Holland : D. Reidel .  Church, Alonzo , (1956) Introduction to mathematical logic , Vol. 1, Princeton : Princeton University Press .  Nicod, Jean G. P. , (1917) "A Reduction in the Number of Primitive Propositions of Logic", Proceedings of the Cambridge Philosophical Society , Vol. 19, pp. 32–41.  Charles Sanders Peirce , 1880, "A Boolian[sic] Algebra with One Constant", in Hartshorne, C. and Weiss, P. , eds., (1931–35) Collected Papers of Charles Sanders Peirce , Vol. 4 : 12–20, Cambridge : Harvard University Press .    External links   http://hyperphysics.phy-astr.gsu.edu/hbase/electronic/nand.html  implementations of 2 and 4-input NAND gates  [ http://projecteuclid.org/DPubS?verb=Display&version; ;=1.0&service;=UI&handle;=euclid.pja/1195520940&page;=record Proofs of some axioms by Stroke function by Yasuo Setô] @ Project Euclid   eu:EZ-ETA ate logikoa  he:NAND לוגי  pl:Dysjunkcja (logika)  pt:NOU  ru:Штрих Шеффера  simple:NAND gate  sk:Hradlo NAND  sr:Логичко НИ  uk:Штрих Шефера "  NAND gate  Category:Logical connectives  Category:Logic symbols     ↩     