   Kanade–Lucas–Tomasi feature tracker      Kanade–Lucas–Tomasi feature tracker   In computer vision , the Kanade–Lucas–Tomasi (KLT) feature tracker is an approach to feature extraction . It is proposed mainly for the purpose of dealing with the problem that traditional image registration techniques are generally costly. KLT makes use of spatial intensity information to direct the search for the position that yields the best match. It is faster than traditional techniques for examining far fewer potential matches between the images.  The registration problem  The translational image registration problem can be characterized as follows: Given two functions    F   (  x  )       F  x    F(x)   and    G   (  x  )       G  x    G(x)   , representing values at each location   x   x   x   , where   x   x   x   is a vector, in two images, respectively, we wish to find the disparity vector   h   h   h   that minimizes some measure of the difference between    F   (   x  +  h   )       F    x  h     F(x+h)   and    G   (  x  )       G  x    G(x)   , for   x   x   x   in some region of interest   R   R   R   .  Some measures of the difference between    F   (   x  +  h   )       F    x  h     F(x+h)   and    G   (  x  )       G  x    G(x)   :   L 1 norm =     ∑   x  ∈  R     |    F   (   x  +  h   )    -   G   (  x  )     |       subscript     x  R          F    x  h      G  x       \sum_{x\in R}\left|F(x+h)-G(x)\right|     L 2 norm =      ∑   x  ∈  R      [    F   (   x  +  h   )    -   G   (  x  )     ]   2          subscript     x  R     superscript   delimited-[]      F    x  h      G  x     2      \sqrt{\sum_{x\in R}\left[F(x+h)-G(x)\right]^{2}}     Negative of normalized correlation =      -    ∑   x  ∈  R     F   (   x  +  h   )   G   (  x  )          ∑   x  ∈  R     F    (   x  +  h   )   2         ∑   x  ∈  R     G    (  x  )   2                subscript     x  R      F    x  h   G  x           subscript     x  R      F   superscript    x  h   2          subscript     x  R      G   superscript  x  2         \dfrac{-\sum_{x\in R}F(x+h)G(x)}{\sqrt{\sum_{x\in R}F(x+h)^{2}}\sqrt{\sum_{x%
 \in R}G(x)^{2}}}      Basic description of the registration algorithm  The KLT feature tracker is based on two papers: In the first paper, Lucas and Kanade 1 developed the idea of a local search using gradients weighted by an approximation to the second derivative of the image.  One-dimensional case  If   h   h   h   is the displacement between two images    F   (  x  )       F  x    F(x)   and     G   (  x  )    =   F   (   x  +  h   )          G  x     F    x  h      G(x)=F(x+h)   then the approximation is made that        F  ′    (  x  )    ≈     F   (   x  +  h   )    -   F   (  x  )     h   =      G   (  x  )    -   F   (  x  )     h             superscript  F  normal-′   x         F    x  h      F  x    h              G  x     F  x    h      F^{\prime}(x)\approx\dfrac{F(x+h)-F(x)}{h}=\dfrac{G(x)-F(x)}{h}\,     so that      h  ≈      G   (  x  )    -   F   (  x  )       F  ′    (  x  )          h        G  x     F  x       superscript  F  normal-′   x      h\approx\dfrac{G(x)-F(x)}{F^{\prime}(x)}\,     This approximation to the gradient of the image is only accurate if the displacement of the local area between the two images to be registered is not too large. The approximation to   h   h   h   depends on   x   x   x   . For combining the various estimates of   h   h   h   at various values of   x   x   x   , it is natural to average them:       h  ≈     ∑  x       G   (  x  )    -   F   (  x  )       F  ′    (  x  )         ∑  x   1     .      h      subscript   x         G  x     F  x       superscript  F  normal-′   x       subscript   x   1      h\approx\dfrac{\sum_{x}\dfrac{G(x)-F(x)}{F^{\prime}(x)}}{\sum_{x}1}.     The average can be further improved by weighting the contribution of each term to it, which is inversely proportional to an estimate of    |    F  ′′    (  x  )    |         superscript  F  ′′   x     \left|F^{\prime\prime}(x)\right|   , where         F  ′′    (  x  )    ≈      G  ′    (  x  )    -    F  ′    (  x  )     h    .         superscript  F  ′′   x          superscript  G  normal-′   x      superscript  F  normal-′   x    h     F^{\prime\prime}(x)\approx\dfrac{G^{\prime}(x)-F^{\prime}(x)}{h}.     For the purpose of facilitating the expression, a weighting function is defined:        w   (  x  )    =   1   |     G  ′    (  x  )    -    F  ′    (  x  )     |     .        w  x     1         superscript  G  normal-′   x      superscript  F  normal-′   x        w(x)=\dfrac{1}{\left|G^{\prime}(x)-F^{\prime}(x)\right|}.     The average with weighting is thereby:       h  =     ∑  x      w   (  x  )    [    G   (  x  )    -   F   (  x  )     ]      F  ′    (  x  )         ∑  x    w   (  x  )       .      h      subscript   x       w  x   delimited-[]      G  x     F  x         superscript  F  normal-′   x       subscript   x     w  x       h=\dfrac{\sum_{x}\dfrac{w(x)\left[G(x)-F(x)\right]}{F^{\prime}(x)}}{\sum_{x}w(%
 x)}.     Upon obtaining the estimate    F   (  x  )       F  x    F(x)   can be moved by the estimate of   h   h   h   . The procedure is applied repeatedly, yielding a type of Newton-Raphson iteration. The sequence of estimates will ideally converge to the best   h   h   h   . The iteration can be expressed by     {       h  0   =  0          h   k  +  1    =    h  k   +      ∑  x      w   (  x  )    [    G   (  x  )    -   F   (   x  +   h  k    )     ]      F  ′    (   x  +   h  k    )         ∑  x    w   (  x  )                cases     subscript  h  0   0   otherwise     subscript  h    k  1       subscript  h  k       subscript   x       w  x   delimited-[]      G  x     F    x   subscript  h  k           superscript  F  normal-′     x   subscript  h  k         subscript   x     w  x       otherwise    \begin{cases}h_{0}=0\\
 h_{k+1}=h_{k}+\dfrac{\sum_{x}\dfrac{w(x)\left[G(x)-F(x+h_{k})\right]}{F^{%
 \prime}(x+h_{k})}}{\sum_{x}w(x)}\end{cases}     An alternative derivation  The derivation above cannot be generalized well to two dimensions for the 2-D linear approximation occurs differently. This can be corrected by applying the linear approximation in the form:        F   (   x  +  h   )    ≈    F   (  x  )    +   h   F  ′    (  x  )      ,        F    x  h        F  x     h   superscript  F  normal-′   x      F(x+h)\approx F(x)+hF^{\prime}(x),     to find the   h   h   h   which minimizes the L 2 norm measure of the difference (or error) between the curves, where the error can be expressed as:       E  =    ∑  x     [    F   (   x  +  h   )    -   G   (  x  )     ]   2     .      E    subscript   x    superscript   delimited-[]      F    x  h      G  x     2      E=\sum_{x}\left[F(x+h)-G(x)\right]^{2}.     To minimize the error with respect to   h   h   h   , partially differentiate   E   E   E   and set it to zero:     0   0   \displaystyle 0   ,       ⇒  h  ≈      ∑  x     F  ′    (  x  )    [    G   (  x  )    -   F   (  x  )     ]       ∑  x     F  ′     (  x  )   2            normal-⇒  absent  h           subscript   x      superscript  F  normal-′   x   delimited-[]      G  x     F  x         subscript   x      superscript  F  normal-′    superscript  x  2         \Rightarrow h\approx\dfrac{\sum_{x}F^{\prime}(x)[G(x)-F(x)]}{\sum_{x}F^{\prime%
 }(x)^{2}}\,     This is basically the same as the 1-D case, except for the fact that the weighting function      w   (  x  )    =    F  ′     (  x  )   2     .        w  x      superscript  F  normal-′    superscript  x  2      w(x)=F^{\prime}(x)^{2}.   And the iteration form with weighting can be expressed as:      {       h  0   =  0          h   k  +  1    =    h  k   +      ∑  x    w   (  x  )    F  ′    (   x  +   h  k    )    [    G   (  x  )    -   F   (   x  +   h  k    )     ]       ∑  x    w   (  x  )    F  ′     (   x  +   h  k    )   2                cases     subscript  h  0   0   otherwise     subscript  h    k  1       subscript  h  k       subscript   x     w  x   superscript  F  normal-′     x   subscript  h  k     delimited-[]      G  x     F    x   subscript  h  k           subscript   x     w  x   superscript  F  normal-′    superscript    x   subscript  h  k    2        otherwise    \begin{cases}h_{0}=0\\
 h_{k+1}=h_{k}+\dfrac{\sum_{x}w(x)F^{\prime}(x+h_{k})\left[G(x)-F(x+h_{k})%
 \right]}{\sum_{x}w(x)F^{\prime}(x+h_{k})^{2}}\end{cases}     Performance  To evaluate the performance of the algorithm, we are naturally curious about under what conditions and how fast the sequence of    h  k     subscript  h  k    h_{k}   's converges to the real   h   h   h   . Consider the case:        F   (  x  )    =   sin  x    ,        F  x     x     F(x)=\sin x,           G   (  x  )    =   F   (   x  +  h   )    =   sin   (   x  +  h   )     .          G  x     F    x  h             x  h       G(x)=F(x+h)=\sin(x+h).     Both versions of the registration algorithm will converge to the correct   h   h   h   for     |  h  |   <  π        h   π    \left|h\right|<\pi   , i.e. for initial misregistrations as large as one-half wavelength. The range of convergence can be improved by suppressing high spatial frequencies in the image, which could be achieved by smoothing the image, that will also undesirably suppress small details of it. If the window of smoothing is much larger than the size of the object being matched, the object may be suppressed entirely, so that a match would be no longer possible.  Since lowpass-filtered images can be sampled at lower resolution with no loss of information, a coarse-to-fine strategy is adopted. A low-resolution smoothed version of the image can be used to obtain an approximate match. Applying the algorithm to higher resolution images will refine the match obtained at lower resolution.  As smoothing extends the range of convergence, the weighting function improves the accuracy of approximation, speeding up the convergence. Without weighting, the calculated displacement    h  1     subscript  h  1    h_{1}   of the first iteration with     F   (  x  )    =   sin  x         F  x     x     F(x)=\sin x   falls off to zero as the displacement approaches one-half wavelength.  Implementation  The implementation requires the calculation of the weighted sums of the quantities      F  ′   G   ,       superscript  F  normal-′   G    F^{\prime}G,         F  ′   F   ,       superscript  F  normal-′   F    F^{\prime}F,   and     (   F  ′   )   2     superscript   superscript  F  normal-′   2    (F^{\prime})^{2}   over the region of interest    R  .    R   R.   Although     F  ′    (  x  )        superscript  F  normal-′   x    F^{\prime}(x)   cannot be calculated exactly, it can be estimated by:         F  ′    (  x  )    ≈     F   (   x  +   Δ  x    )    -   F   (  x  )      Δ  x     ,         superscript  F  normal-′   x         F    x    normal-Δ  x       F  x      normal-Δ  x      F^{\prime}(x)\approx\dfrac{F(x+\Delta x)-F(x)}{\Delta x},     where    Δ  x      normal-Δ  x    \Delta x   is chosen appropriately small. Some sophisticated technique can be used for estimating the first derivatives, but in general such techniques are equivalent to first smoothing the function, and then taking the difference.  Generalization to multiple dimensions  The registration algorithm for 1-D and 2-D can be generalized to more dimensions. To do so, we try to minimize the L 2 norm measure of error:       E  =    ∑   𝐱  ∈  R      [    F   (   𝐱  +  𝐡   )    -   G   (  𝐱  )     ]   2     ,      E    subscript     𝐱  R     superscript   delimited-[]      F    𝐱  𝐡      G  𝐱     2      E=\sum_{\mathbf{x}\in R}\left[F(\mathbf{x}+\mathbf{h})-G(\mathbf{x})\right]^{2},     where   𝐱   𝐱   \mathbf{x}   and   𝐡   𝐡   \mathbf{h}   are n-dimensional row vectors. A linear approximation analogous:        F   (   𝐱  +  𝐡   )    ≈    F   (  𝐱  )    +   𝐡    (    ∂   ∂  𝐱    F   (  𝐱  )    )   T      .        F    𝐱  𝐡        F  𝐱     𝐡   superscript         𝐱    F  𝐱   T       F(\mathbf{x}+\mathbf{h})\approx F(\mathbf{x})+\mathbf{h}\left(\dfrac{\partial}%
 {\partial\mathbf{x}}F(\mathbf{x})\right)^{T}.     And partially differentiate   E   E   E   with respect to   𝐡   𝐡   \mathbf{h}   :     0   0   \displaystyle 0   ,        ⇒  𝐡  ≈    [    ∑  𝐱     [    G   (  𝐱  )    -   F   (  𝐱  )     ]    (    ∂  F    ∂  𝐱    )     ]     [    ∑  𝐱      (    ∂  F    ∂  𝐱    )   T    (    ∂  F    ∂  𝐱    )     ]    -  1      ,       normal-⇒  absent  𝐡          delimited-[]    subscript   𝐱      delimited-[]      G  𝐱     F  𝐱         F     𝐱        superscript   delimited-[]    subscript   𝐱      superscript      F     𝐱    T       F     𝐱         1        \Rightarrow\mathbf{h}\approx\left[\sum_{\mathbf{x}}\left[G(\mathbf{x})-F(%
 \mathbf{x})\right]\left(\dfrac{\partial F}{\partial\mathbf{x}}\right)\right]%
 \left[\sum_{\mathbf{x}}\left(\dfrac{\partial F}{\partial\mathbf{x}}\right)^{T}%
 \left(\dfrac{\partial F}{\partial\mathbf{x}}\right)\right]^{-1},     which has much the same form as the 1-D version.  Further generalizations  The method can also be extended to take into account registration based on more complex transformations, such as rotation, scaling, and shearing, by considering        G   (  x  )    =   F   (    A  x   +  h   )     ,        G  x     F      A  x   h      G(x)=F(Ax+h),     where   A   A   A   is a linear spatial transform. The error to be minimized is then       E  =    ∑  x     [    F   (    A  x   +  h   )    -   G   (  x  )     ]   2     .      E    subscript   x    superscript   delimited-[]      F      A  x   h      G  x     2      E=\sum_{x}\left[F(Ax+h)-G(x)\right]^{2}.     To determine the amount    Δ  A      normal-Δ  A    \Delta A   to adjust   A   A   A   and    Δ  h      normal-Δ  h    \Delta h   to adjust   h   h   h   , again, use the linear approximation:      F   (    x   (   A  +   Δ  A    )    +   (   h  +   Δ  h    )    )       F      x    A    normal-Δ  A       h    normal-Δ  h       F(x(A+\Delta A)+(h+\Delta h))           ≈    F   (    A  x   +  h   )    +    (    Δ  A  x   +   Δ  h    )    ∂   ∂  x    F   (  x  )      .      absent      F      A  x   h          normal-Δ  A  x     normal-Δ  h         x    F  x      \approx F(Ax+h)+(\Delta Ax+\Delta h)\dfrac{\partial}{\partial x}F(x).     The approximation can be used similarly to find the error expression, which becomes quadratic in the quantities to be minimized with respect to. After figuring out the error expression, differentiate it with respect to the quantities to be minimized and set the results zero, yielding a set of linear equations, then solve them.  A further generalization is designed for accounting for the fact that the brightness may be different in the two views, due to the difference of the viewpoints of the cameras or to differences in the processing of the two images. Assume the difference as linear transformation:        F   (  x  )    =    α  G   (  x  )    +  β    ,        F  x       α  G  x   β     F(x)=\alpha G(x)+\beta,     where   α   α   \alpha   represents a contrast adjustment and   β   β   \beta   represents a brightness adjustment. Combining this expression with the general linear transformation registration problem:      E  =    ∑  x     [    F   (    A  x   +  h   )    -   (    α  G   (  x  )    +  β   )    ]   2        E    subscript   x    superscript   delimited-[]      F      A  x   h        α  G  x   β     2      E=\sum_{x}\left[F(Ax+h)-(\alpha G(x)+\beta)\right]^{2}     as the quantity to minimize with respect to    α  ,    α   \alpha,       β  ,    β   \beta,       A  ,    A   A,   and    h  .    h   h.     Detection and tracking of point features  In the second paper Tomasi and Kanade 2 used the same basic method for finding the registration due to the translation but improved the technique by tracking features that are suitable for the tracking algorithm. The proposed features would be selected if both the eigenvalues of the gradient matrix were larger than some threshold.  By a very similar derivation, the problem is formulated as       ∇  d   =   e        normal-∇  d   e    \nabla d=e\,     where   ∇   normal-∇   \nabla   is the gradient. This is the same as the last formula of Lucas–Kanade above. A local patch is considered a good feature to track if both of the two eigenvalues (    λ  1     subscript  λ  1    \lambda_{1}   and    λ  2     subscript  λ  2    \lambda_{2}   ) of   ∇   normal-∇   \nabla   are larger than a threshold.  A tracking method based on these two papers is generally considered a KLT tracker.  Improvements and variations  In a third paper, Shi and Tomasi 3 proposed an additional stage of verifying that features were tracked correctly.  An affine transformation is fit between the image of the currently tracked feature and its image from a non-consecutive previous frame. If the affine compensated image is too dissimilar the feature is dropped.  The reasoning is that between consecutive frames a translation is a sufficient model for tracking but due to more complex motion, perspective effects, etc. a more complex model is required when frames are further apart.  Using a similar derivation as for the KLT, Shi and Tomasi showed that the search can be performed using the formula       T  z   =   a         T  z   a    Tz=a\,     where   T   T   T   is a matrix of gradients,   z   z   z   is a vector of affine coefficients and   a   a   a   is an error vector. Compare this to     ∇  d   =  e       normal-∇  d   e    \nabla d=e   .  References  See also   Kanade–Tomasi features in the context of feature detection  Lucas–Kanade method An optical flow algorithm derived from reference 1.   "  Category:Motion in computer vision     Bruce D. Lucas and Takeo Kanade. An Iterative Image Registration Technique with an Application to Stereo Vision. International Joint Conference on Artificial Intelligence , pages 674–679, 1981. ↩  Carlo Tomasi and Takeo Kanade. Detection and Tracking of Point Features. Carnegie Mellon University Technical Report CMU-CS-91-132 , April 1991. ↩  Jianbo Shi and Carlo Tomasi. Good Features to Track. IEEE Conference on Computer Vision and Pattern Recognition , pages 593–600, 1994. ↩     