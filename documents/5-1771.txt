   Epigram (programming language)      Epigram (programming language)   Epigram is a functional programming language with dependent types . Epigram also refers to the IDE usually packaged with the language. Epigram's type system is strong enough to express program specifications . The goal is to support a smooth transition from ordinary programming to integrated programs and proofs whose correctness can be checked and certified by the compiler . Epigram exploits the propositions as types principle , and is based on intuitionistic type theory .  The Epigram prototype was implemented by Conor McBride based on joint work with James McKinna. Its development is continued by the Epigram group in Nottingham , Durham , St Andrews and Royal Holloway in the UK . The current experimental implementation of the Epigram system is freely available together with a user manual, a tutorial and some background material. The system has been used under Linux , Windows and Mac OS X .  It is currently unmaintained, and version 2, which was intended to implement Observational Type Theory , was never released.  Syntax  Epigram uses a two-dimensional, natural deduction style syntax, with a LaTeX version and an ASCII version. Here are some examples from The Epigram Tutorial :  Examples  The natural numbers  The following declaration defines the natural numbers :  (         !       (          !   (  n : Nat  !
 data !---------! where !----------! ; !-----------!
      ! Nat : * )       !zero : Nat)   !suc n : Nat)  The declaration says that Nat is a type with kind  * (i.e., it is a simple type) and two constructors: zero and suc . The constructor suc takes a single Nat argument and returns a Nat . This is equivalent to the Haskell declaration " data Nat = Zero | Suc Nat ".  In LaTeX, the code is displayed as:         data  ¯     (     𝖭𝖺𝗍  :  ⋆    )     where  ¯     (     𝗓𝖾𝗋𝗈  :  𝖭𝖺𝗍    )    ;   (    n  :  𝖭𝖺𝗍      𝗌𝗎𝖼   n   :  𝖭𝖺𝗍    )         normal-¯  data     absent   normal-:  𝖭𝖺𝗍  normal-⋆     normal-¯  where     absent   normal-:  𝗓𝖾𝗋𝗈  𝖭𝖺𝗍        normal-:  n  𝖭𝖺𝗍    normal-:    𝗌𝗎𝖼  n   𝖭𝖺𝗍      \underline{\mathrm{data}}\;\left(\frac{}{\mathsf{Nat}:\star}\right)\;%
 \underline{\mathrm{where}}\;\left(\frac{}{\mathsf{zero}:\mathsf{Nat}}\right)\;%
 ;\;\left(\frac{n:\mathsf{Nat}}{\mathsf{suc}\ n:\mathsf{Nat}}\right)     The horizontal-line notation can be read as "assuming (what is on the top) is true, we can infer that (what is on the bottom) is true." For example, "assuming n is of type Nat , then suc n is of type Nat ." If nothing is on the top, then the bottom statement is always true: " zero is of type Nat (in all cases)."  Recursion on naturals      𝖭𝖺𝗍𝖨𝗇𝖽  :      ∀  P  :  𝖭𝖺𝗍  →  ⋆  ⇒   P   𝗓𝖾𝗋𝗈  →         (  ∀  n  :  𝖭𝖺𝗍  ⇒   P   n  →   P    (   𝗌𝗎𝖼   n  )   )   →         ∀  n   :   𝖭𝖺𝗍  ⇒    P   n           normal-:  𝖭𝖺𝗍𝖨𝗇𝖽     fragments  for-all  P  normal-:  Nat  normal-→  normal-⋆  normal-⇒  P  zero  normal-→      fragments   fragments  normal-(  for-all  n  normal-:  Nat  normal-⇒  P  n  normal-→  P   fragments  normal-(  suc  n  normal-)   normal-)   normal-→      normal-:   for-all  n    normal-⇒  𝖭𝖺𝗍    P  n         \mathsf{NatInd}:\begin{matrix}\forall P:\mathsf{Nat}\rightarrow\star%
 \Rightarrow P\ \mathsf{zero}\rightarrow\\
 (\forall n:\mathsf{Nat}\Rightarrow P\ n\rightarrow P\ (\mathsf{suc}\ n))%
 \rightarrow\\
 \forall n:\mathsf{Nat}\Rightarrow P\ n\end{matrix}         𝖭𝖺𝗍𝖨𝗇𝖽    P   m   z   m   s   𝗓𝖾𝗋𝗈   ≡   m  z         𝖭𝖺𝗍𝖨𝗇𝖽  P  m  z  m  s  𝗓𝖾𝗋𝗈     m  z     \mathsf{NatInd}\ P\ mz\ ms\ \mathsf{zero}\equiv mz         𝖭𝖺𝗍𝖨𝗇𝖽    P   m   z   m   s    (    𝗌𝗎𝖼   n   )    ≡   m   s    n    (   N  a  t  I  n   d    P   m   z   m   s   n   )          𝖭𝖺𝗍𝖨𝗇𝖽  P  m  z  m  s    𝗌𝗎𝖼  n      m  s  n    N  a  t  I  n  d  P  m  z  m  s  n      \mathsf{NatInd}\ P\ mz\ ms\ (\mathsf{suc}\ n)\equiv ms\ n\ (NatInd\ P\ mz\ ms%
 \ n)     ...And in ASCII:  NatInd : all P : Nat -> * => P zero ->
          (all n : Nat => P n -> P (suc n)) ->
          all n : Nat => P n
 NatInd P mz ms zero => mz
 NatInd P mz ms (suc n) => ms n (NatInd P mz ms n)  Addition           𝗉𝗅𝗎𝗌    x   y  ⇐    rec  ¯     x   {     fragments  plus  x  y  normal-⇐   normal-¯  rec   x  normal-{    \mathsf{plus}\ x\ y\Leftarrow\underline{\mathrm{rec}}\ x\ \{             𝗉𝗅𝗎𝗌    x   y  ⇐    case  ¯     x   {     fragments  plus  x  y  normal-⇐   normal-¯  case   x  normal-{    \mathsf{plus}\ x\ y\Leftarrow\underline{\mathrm{case}}\ x\ \{              𝗉𝗅𝗎𝗌    𝗓𝖾𝗋𝗈   y   ⇒  y     normal-⇒    𝗉𝗅𝗎𝗌  𝗓𝖾𝗋𝗈  y   y    \mathsf{plus\ zero}\ y\Rightarrow y              𝗉𝗅𝗎𝗌    (   𝗌𝗎𝖼   x  )   y  ⇒  s  u   c    (   𝗉𝗅𝗎𝗌    x   y  )   }   }     fragments   fragments  plus   fragments  normal-(  suc  x  normal-)   y  normal-⇒  s  u  c   fragments  normal-(  plus  x  y  normal-)   normal-}   normal-}    \quad\quad\mathsf{plus}\ (\mathsf{suc}\ x)\ y\Rightarrow suc\ (\mathsf{plus}\ %
 x\ y)\ \}\ \}        ...And in ASCII:  plus x y <= rec x {
   plus x y <= case x {
     plus zero y => y
     plus (suc x) y => suc (plus x y)
   }
 }  Dependent types  Epigram is essentially a typed lambda calculus with generalized algebraic data type extensions, except for two extensions. First, types are first-class entities, of type   ⋆   normal-⋆   \star   ; types are arbitrary expressions of type   ⋆   normal-⋆   \star   , and type equivalence is defined in terms of the types' normal forms. Second, it has a dependent function type; instead of    P  →  Q     normal-→  P  Q    P\rightarrow Q   ,     ∀  x   :   P  ⇒  Q      normal-:   for-all  x    normal-⇒  P  Q     \forall x:P\Rightarrow Q   , where   x   x   x   is bound in   Q   Q   Q   to the value that the function's argument (of type   P   P   P   ) eventually takes.  Full dependent types, as implemented in Epigram, are a powerful abstraction. (Unlike in Dependent ML , the value(s) depended upon may be of any valid type.) A sample of the new formal specification capabilities dependent types bring may be found in The Epigram Tutorial .  See also   Alf , a proof assistant among the predecessors of Epigram.   Further reading   Conor McBride and James McKinna (2004), The view from the left , Journal of Functional Programming  Conor McBride (2004), The Epigram Prototype, a nod and two winks  Conor McBride (2004), The Epigram Tutorial  Thorsten Altenkirch, Conor McBride and James McKinna (2005), Why Dependent Types Matter   External links   EPSRC on ALF, lego and related   References  "  Category:Functional languages  Category:Dependently typed languages  Category:Proof assistants  Category:Discontinued programming languages   