   International Obfuscated C Code Contest      International Obfuscated C Code Contest  table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     The International Obfuscated C Code Contest (abbreviated IOCCC ) is a computer programming contest for the most creatively obfuscated  C  code . Held annually between 1984 and 1996, and thereafter in 1998, 2000, 2001, 2004, 2005, 2006, 2011, 2012, and 2013 1 it is described as "celebrating [C's] syntactical opaqueness". 2 The winning code for the 22nd contest, held in 2013, was released in January 2014. 3  Prior to 2004, entries were submitted by email. 4 In 2004, for the 17th IOCCC, the competition switched to using a web-based submission process. 5  Entries are evaluated anonymously by a panel of judges. The judging process is documented in the competition guidelines 6 and consists of elimination rounds. By tradition, no information is given about the total number of entries for each competition. Winning entries are awarded with a category, such as "Worst Abuse of the C preprocessor " or "Most Erratic Behavior", and then announced on the official IOCCC website. Entries that do not make it are deleted and forgotten; the contest states that being announced on the IOCCC website is the award for winning.  History  The IOCCC was started by Landon Curt Noll and Larry Bassel in 1984 while employed at National Semiconductor's Genix porting group. The idea for the contest came after they compared notes with each other about some poorly written code that they had to fix, notably the Bourne shell , which used macros to emulate ALGOL 68 syntax, and buggy version of finger for BSD. 7 The contest itself was the topic of a quiz question in the 1993 Computer Bowl . 8 After a hiatus of five years starting in 2006, the contest returned in 2011. 9  Compared with other programming contests, the IOCCC is described as "not all that serious" by Michael Swaine , editor of '' Dr. Dobbs . 10  Rules  Each year, the rules of the contest are published on the IOCCC website. Rules vary from year to year and are posted with a set of guidelines that attempt to convey the spirit of the rules.    "Hacking the contest rules is a tradition". Landon Curt Noll, 2011. 11      The rules are often deliberately written with subtle loopholes that contestants are somewhat encouraged to find and abuse. This is the result of the contest being a "parody of the software development process". Entries that take advantage of some loophole in the rules (whether or not they pass a final round of judging) can cause the rules for the following year's contest to be adjusted accordingly (although often other subtle loopholes are deliberately introduced in the process).  Obfuscations employed  Due to the nature of the contest, entries often employ strange or unusual tricks, such as using the C preprocessor to do things it was not designed to do, or avoiding commonly used constructs in the C programming language in favor of much more obscure ways of achieving the same thing. Two contest winners generated a list of prime numbers using the C preprocessor "spectacularly", according to Dr. Dobbs . 12 Some quotes from 2004 winners include:       Some ways in which contributions are notable include:   The appearance of the source code, formatted to resemble images, text, etc., after the manner of ASCII art .  Preprocessor redefinitions to make code harder to read.  Self-modifying code .  Worst abuse of the rules. In several years, an entry was submitted that was so patently absurd that it required a new definition of some of the rules for the next year. This is regarded as a high honor. An example is the world's shortest self-reproducing program . The entry was a program designed to output its own source code, and which had zero bytes of source code. When the program ran, it printed all zero bytes of the entire program's source code (meaning it prints nothing). 13   In the effort to take obfuscation to its extremes, contestants have produced programs which skirt around the edges of C standards, or result in constructs which trigger rarely used code path combinations in compilers. As a result, several of the past entries may not compile directly in a modern compiler, and some may even cause crashes.  Examples  Within the code size limit of only a few kilobytes, contestants have managed to do impressively complicated things – a 2004 winner turned out an operating system. 14  Below is a 1988 entry which calculates pi by looking at its own area : 15  #define _ -F<00||--F-OO--;  int F= 00 ,OO= 00 ;main(){F_OO();printf( "%1.3f \n " , 4 .*-F/OO/OO);}F_OO()
 {
             _-_-_-_
        _-_-_-_-_-_-_-_-_
     _-_-_-_-_-_-_-_-_-_-_-_
   _-_-_-_-_-_-_-_-_-_-_-_-_-_
  _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
  _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
  _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
  _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
   _-_-_-_-_-_-_-_-_-_-_-_-_-_
     _-_-_-_-_-_-_-_-_-_-_-_
         _-_-_-_-_-_-_-_
             _-_-_-_
 }  (This entry was written in K&R; C ; it does not work correctly in ANSI C without some change. 16 )  Another example is the following flight simulator, the winner of the 1998 IOCCC, 17 as listed and described in Calculated Bets: Computers, Gambling, and Mathematical Modeling to Win (2001) 18 and shown below:  #include  #include  #include  #include  double L ,o ,P
                                          ,_=dt,T,Z,D= 1 ,d,
                                          s[ 999 ],E,h= 8 ,I,
                                          J,K,w[ 999 ],M,m,O
                                         ,n[ 999 ],j= 33e-3 ,i= 1E3 ,r,t, u,v ,W,S= 74.5 ,l= 221 ,X= 7.26 ,
                                         a,B,A= 32.2 ,c, F,H; int N,q, C, y,p,U;
                                        Window z; char f[ 52 ]
                                     ; GC k; main(){ Display*e=
  XOpenDisplay( 0 ); z=RootWindow(e, 0 ); for (XSetForeground(e,k=XCreateGC (e,z, 0 , 0 ),BlackPixel(e, 0 ))
 ; scanf( "%lf%lf%lf" ,y +n,w+y, y+s)+ 1 ; y ++); XSelectInput(e,z= XCreateSimpleWindow(e,z, 0 , 0 , 400 , 400 , 0 , 0 ,WhitePixel(e, 0 ) ),KeyPressMask); for (XMapWindow(e,z); ; T=sin(O)){ struct timeval G={ 0 ,dt* 1e6 }
 ; K= cos(j); N= 1e4 ; M+= H*_; Z=D*K; F+=_*P; r=E*K; W=cos( O); m=K*W; H=K*T; O+=D*_*F/ K+d/K*E*_; B=
 sin(j); a=B*T*D-E*W; XClearWindow(e,z); t=T*E+ D*B*W; j+=d*_*D-_*F*E; P=W*E*B-T*D; for (o+=(I=D*W+E
 *T*B,E*d/K *B+v+B/K*F*D)*_; p "" *d+z= "" *e)= "" *t-a= "" +d*p)= ""  "T*r-I*E" [n]+w[= "" ]= "0|K" d= "n[p]-L;" e= "c-p[w];"  if (p= "" k= "D*m-B*T-H*E;" p]+p[s= "" t= "p[s]+i;" |fabs(d= "t" > K)N= 1e4 ; else { q=W/K * 4E2+2e2 ; C= 2E2+4e2 / K
  *D; N -1E4 && XDrawLine(e ,z,k,N ,U,q,C); N=q; U=C; } ++p; } L+=_* (X*t +P*M+m*l); T=X*X+ l*l+M *M;
   XDrawString(e,z,k , 20 , 380 ,f, 17 ); D=v/l* 15 ; i+=(B *l-M*r -X*Z)*_; for (; XPending(e); u *=CS!=N){
                                    XEvent z; XNextEvent(e ,&z;);
                                        ++*((N=XLookupKeysym
                                          (&z.xkey;, 0 ))-IT?
                                          N-LT? UP-N?& E:&
                                          J:& u: &h;); --*(
                                          DN -N? N-DT ?N==
                                          RT?&u;: & W:&h;:&J;
                                           ); } m= 15 *F/l;
                                           c+=(I=M/ l,l*H
                                           +I*M+a*X)*_; H
                                           =A*r+v*X-F*l+(
                                           E=. 1 +X* 4.9 /l,t
                                           =T*m/ 32 -I*T/ 24 )/S; K=F*M+(
                                            h* 1e4 /l-(T+
                                            E* 5 *T*E)/ 3e2 )/S-X*d-B*A;
                                            a= 2.63 /l*d;
                                            X+=( d*l-T/S
                                             *(. 19 *E +a
                                             *. 64 +J/ 1e3 )-M* v +A*
                                             Z)*_; l +=
                                             K *_; W=d;
                                             sprintf(f, "%5d  %3d"  "%7d" ,p =l
                                            / 1.7 ,(C= 9E3 +
                               O* 57.3 )% 0550 ,( int )i); d+=T*(. 45-14 /l*
                              X-a* 130 -J* . 14 )*_/ 125e2 +F*_*v; P=(T*( 47 *I-m* 52 +E* 94 *D-t*. 38 +u*. 21 *E) / 1e2 +W* 179 *v)/ 2312 ; select(p= 0 , 0 , 0 , 0 ,&G;); v-=(
                               W*F-T*(. 63 *m-I*. 086 +m*E* 19 -D* 25 -.11 *u
                                )/ 107e2 )*_; D=cos(o); E=sin(o); } } This program needs the following command line on a Linux system to be compiled:  cc banks.c -o banks -DIT=XK_Page_Up -DDT=XK_Page_Down \
     -DUP=XK_Up -DDN=XK_Down -DLT=XK_Left -DRT=XK_Right \
     -DCS=XK_Return -Ddt=0.02 -lm -lX11 -L/usr/X11R6/lib  See also   Obfuscated Perl Contest  Underhanded C Contest   Notes and references    External links   IOCCC web site   "  Category:Recurring events established in 1984  Category:Programming contests  Category:Ironic and humorous awards  Category:C language contests  Category:Obfuscation     ↩  ↩  ↩  ↩  ↩  ↩  ↩  "Top Execs Fail To Compute Correctly" . San Jose Mercury News (CA). May 15, 1993. Pg. 1A. Via Newsbank . ↩  ↩  ↩   ↩  ↩  ↩  5th International Obfuscated C Code Contest 1988 (westley.c). IOCCC. ↩  using gcc, compile with the following command line: gcc -traditional-cpp -o r r.c or gcc -E r.c | sed 's/- -/--/g' > r2.c ; gcc -o r2 r2.c (The source file is r.c ) ↩  IOCCC Flight Simulator . aerojockey.com. Retrieved 2013-04-08. ↩  ↩   