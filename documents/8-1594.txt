   Parity game      Parity game   (Figure)  A parity game. Circular nodes belong to player 0, rectangular nodes belong to player 1. On the left side is the winning region of player 0, on the right side is the winning region of player 1.   A parity game is played on a colored directed graph , where each node has been colored by a priority – one of (usually) finitely many natural numbers . Two players, 0 and 1, move a (single, shared) token along the edges of the graph. The owner of the node that the token falls on selects the successor node, resulting in a (possibly infinite) path , called the play.  The winner of a finite play is the player whose opponent is unable to move. The winner of an infinite play is determined by the priorities appearing in the play. Typically, player 0 wins an infinite play if the largest priority that occurs infinitely often in the play is even. Player 1 wins otherwise. This explains the word "parity" in the title.  Parity games lie in the third level of the borel hierarchy , and are consequently determined . 1  Games related to parity games were implicitly used in Rabin 's proof of decidability of second order theory of n successors, where determinacy of such games was proven. 2 The Knaster–Tarski theorem leads to a relatively simple proof of determinacy of parity games. 3  Moreover, parity games are history-free determined. 4 5 6 This means that if a player has a winning strategy then that player has a winning strategy that depends only on the current board position, and not on the history of the play.  Solving a game  Solving a parity game played on a finite graph means deciding, for a given starting position, which of the two players has a winning strategy. It has been shown that this problem is in NP and Co-NP , as well as UP and co-UP. 7 It remains an open question whether this decision problem is solvable in PTime .  Given that parity games are history-free determined, solving a given parity game is equivalent to solving the following simple looking graph-theoretic problem. Given a finite colored directed bipartite graph with n vertices    V  =    V  0   ∪   V  1        V     subscript  V  0    subscript  V  1      V=V_{0}\cup V_{1}   , and V colored with colors from 1 to m , is there a choice function selecting a single out-going edge from each vertex of    V  0     subscript  V  0    V_{0}   , such that the resulting subgraph has the property that in each cycle the largest occurring color is even.  Recursive algorithm for solving parity games  Zielonka outlined a recursive algorithm that solves parity games. Let    G  =   (  V  ,   V  0   ,   V  1   ,  E  ,  Ω  )       G   V   subscript  V  0    subscript  V  1   E  normal-Ω     G=(V,V_{0},V_{1},E,\Omega)   be parity game, where    V  0     subscript  V  0    V_{0}   resp.    V  1     subscript  V  1    V_{1}   are the sets of nodes belonging to player 0 resp. 1,    V  =    V  0   ∪   V  1        V     subscript  V  0    subscript  V  1      V=V_{0}\cup V_{1}   is the set of all nodes,    E  ⊆   V  ×  V       E    V  V     E\subseteq V\times V   is the total set of edges, and    Ω  :   V  →  ℕ      normal-:  normal-Ω   normal-→  V  ℕ     \Omega:V\rightarrow\mathbb{N}   is the priority assignment function.  Zielonka's algorithm is based on the notation of attractors. Let    U  ⊆  V      U  V    U\subseteq V   be a set of nodes and    i  =   0  ,  1       i   0  1     i=0,1   be a player. The   i   i   i   -attractor of   U   U   U   is the least set of nodes    A  t  t   r  i    (  U  )       A  t  t   subscript  r  i   U    Attr_{i}(U)   containing   U   U   U   such that   i   i   i   can force a visit to   U   U   U   from every node in    A  t  t   r  i    (  U  )       A  t  t   subscript  r  i   U    Attr_{i}(U)   . It can be defined by a fix-point computation:       A  t  t   r  i     (  U  )   0    :=  U     assign    A  t  t   subscript  r  i    superscript  U  0    U    Attr_{i}(U)^{0}:=U        A  t  t   r  i     (  U  )    j  +  1     :=    A  t  t   r  i     (  U  )   j    ∪   {   v  ∈   V  i    ∣     ∃   (  v  ,  w  )    ∈  E   :   w  ∈   A  t  t   r  i     (  U  )   j      }   ∪   {   v  ∈   V   1  -  i     ∣     ∀   (  v  ,  w  )    ∈  E   :   w  ∈   A  t  t   r  i     (  U  )   j      }       assign    A  t  t   subscript  r  i    superscript  U    j  1         A  t  t   subscript  r  i    superscript  U  j     conditional-set    v   subscript  V  i     normal-:       v  w    E     w    A  t  t   subscript  r  i    superscript  U  j        conditional-set    v   subscript  V    1  i      normal-:     for-all   v  w    E     w    A  t  t   subscript  r  i    superscript  U  j          Attr_{i}(U)^{j+1}:=Attr_{i}(U)^{j}\cup\{v\in V_{i}\mid\exists(v,w)\in E:w\in
 Attr%
 _{i}(U)^{j}\}\cup\{v\in V_{1-i}\mid\forall(v,w)\in E:w\in Attr_{i}(U)^{j}\}        A  t  t   r  i    (  U  )    :=    ⋃   j  =  0   ∞    A  t  t   r  i     (  U  )   j        assign    A  t  t   subscript  r  i   U     superscript   subscript     j  0        A  t  t   subscript  r  i    superscript  U  j       Attr_{i}(U):=\bigcup_{j=0}^{\infty}Attr_{i}(U)^{j}     In other words, one starts with the initial set   U   U   U   and adds, in every step, all nodes belonging to player 0 that can reach   U   U   U   with a single edge and all nodes belonging to player 1 that must reach   U   U   U   no matter which edge player 1 takes.  Zielonka's algorithm is based on a recursive descent on the number of priorities. If the maximal priority is 0, it is immediate to see that player 0 wins the whole game (with an arbitrary strategy). Otherwise, let   p   p   p   be the largest one and let    i  =   p  mod  2       i   modulo  p  2     i=p\mod 2   be the player associated with the priority. Let    U  =   {  v  ∣    Ω   (  v  )    =  p   }       U   conditional-set  v      normal-Ω  v   p      U=\{v\mid\Omega(v)=p\}   be the set of nodes with priority   p   p   p   and let    A  =   A  t  t   r  i    (  U  )        A    A  t  t   subscript  r  i   U     A=Attr_{i}(U)   be the corresponding attractor of player   i   i   i   . Player   i   i   i   can now ensure that every play that visits   A   A   A   infinitely often is won by player   i   i   i   .  Consider the game     G  ′   =   G  ∖  A        superscript  G  normal-′     G  A     G^{\prime}=G\setminus A   in which all nodes and affected edges of   A   A   A   are removed. We can now solve the smaller game    G  ′     superscript  G  normal-′    G^{\prime}   by recursion and obtain a pair of winning sets     W  i  ′   ,   W   1  -  i   ′       subscript   superscript  W  normal-′   i    subscript   superscript  W  normal-′     1  i      W^{\prime}_{i},W^{\prime}_{1-i}   . If    W   1  -  i   ′     subscript   superscript  W  normal-′     1  i     W^{\prime}_{1-i}   is empty, then so is    W   1  -  i      subscript  W    1  i     W_{1-i}   for the game   G   G   G   , because player    1  -  i      1  i    1-i   can only decide to escape from    W  i     subscript  W  i    W_{i}   to   A   A   A   which also results in a win for player   i   i   i   .  Otherwise, if    W   1  -  i   ′     subscript   superscript  W  normal-′     1  i     W^{\prime}_{1-i}   is not empty, we only know for sure that player    1  -  i      1  i    1-i   can win on    W   1  -  i   ′     subscript   superscript  W  normal-′     1  i     W^{\prime}_{1-i}   as there is no player   i   i   i   escape from    W   1  -  i   ′     subscript   superscript  W  normal-′     1  i     W^{\prime}_{1-i}   to   A   A   A   (because   A   A   A   is an attractor already). We therefore compute to    1  -  i      1  i    1-i   attractor    B  =   A  t  t   r   1  -  i     (   W   1  -  i   ′   )        B    A  t  t   subscript  r    1  i     subscript   superscript  W  normal-′     1  i       B=Attr_{1-i}(W^{\prime}_{1-i})   of    W   1  -  i   ′     subscript   superscript  W  normal-′     1  i     W^{\prime}_{1-i}   and remove it from   G   G   G   to obtain the smaller game     G  ′′   =   G  ∖  B        superscript  G  ′′     G  B     G^{\prime\prime}=G\setminus B   . We again solve it by recursion and obtain a pair of winning sets     W  i  ′′   ,   W   1  -  i   ′′       subscript   superscript  W  ′′   i    subscript   superscript  W  ′′     1  i      W^{\prime\prime}_{i},W^{\prime\prime}_{1-i}   . It follows that     W  i   =   W  i  ′′        subscript  W  i    subscript   superscript  W  ′′   i     W_{i}=W^{\prime\prime}_{i}   and     W   1  -  i    =    W   1  -  i   ′′   ∪  B        subscript  W    1  i       subscript   superscript  W  ′′     1  i    B     W_{1-i}=W^{\prime\prime}_{1-i}\cup B   .  In simple pseudocode , the algorithm might be expressed as this:  function solve( G ) p = maximal priority in G if p = 0 return W_0 = V, W_1 = \{\} else U = nodes in G with priority p  i = p \mod 2  A = Attr_i(U)  W_0', W_1' = solve(G \setminus A) if W_i' = V return W_i = V, W_{1-i} = \{\}  B = Attr_{1-i}(W_{1-i}')  W_0'', W_1'' = solve(G \setminus B) return W_i = W_i'', W_{1-i} = W_{1-i}'' \cup B   Related games and their decision problems  A slight modification of the above game, and the related graph-theoretic problem, makes solving the game NP-hard . The modified game has the Rabin acceptance condition . Specifically, in the above bipartite graph scenario, the problem now is to determine if there is a choice function selecting a single out-going edge from each vertex of V 0 , such that the resulting subgraph has the property that in each cycle (and hence each strongly connected component ) it is the case that there exists an i and a node with color 2 i , and no node with color 2 i + 1...  Note that as opposed to parity games, this game is no longer symmetric with respect to players 0 and 1.  Relation with logic and automata theory  Despite its interesting complexity theoretic status, parity game solving can be seen as the algorithmic backend to problems in automated verification and controller synthesis. The model-checking problem for the modal μ-calculus for instance is known to be equivalent to parity game solving. Also, decision problems like validity or satisfiability for modal logics can be reduced to parity game solving.  References       Further reading   E. Grädel, W. Thomas, T. Wilke (Eds.) : Automata, Logics, and Infinite Games , Springer LNCS 2500 (2003), ISBN 3-540-00388-6  W. Zielonka : Infinite games on finitely coloured graphs with applications to automata on infinite tree , TCS, 200(1-2):135-183, 1998   External links  Parity Game Solvers:   PGSolver Collection   "  Category:Game theory  Category:Finite model theory     D. A. Martin : Borel determinacy, The Annals of Mathematics, Vol 102 No. 2 pp. 363–371 (1975) ↩  ↩  E. A. Emerson and C. S. Jutla: Tree Automata, Mu-Calculus and Determinacy, IEEE Proc. Foundations of Computer Science, pp 368–377 (1991), ISBN 0-8186-2445-0 ↩   A. Mostowski: Games with forbidden positions, University of Gdansk, Tech. Report 78 (1991) ↩  ↩  Grädel 2007, p. 163 ↩     