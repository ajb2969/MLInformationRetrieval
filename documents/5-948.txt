


De Bruijn sequence




De Bruijn sequence

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



 In combinatorial mathematics, a k-ary De Bruijn sequence  of order n, named after the Dutch mathematician Nicolaas Govert de Bruijn, is a cyclic sequence of a given alphabet A with size k for which every possible subsequence of length n in A appears as a sequence of consecutive characters exactly once.
Each  has length kn.
There are 
 
 
 
  distinct De Bruijn sequences .
According to de Bruijn,1 the existence of De Bruijn sequences for each order together with the above properties were first proved, for the case of alphabets with two elements, by Camille Flye Sainte-Marie in 1894,2 whereas the generalization to larger alphabets is originally due to Tanja van Aardenne-Ehrenfest and himself.
History
The earliest known example of a De Bruijn sequence comes from Sanskrit prosody where, since the work of Pingala, each possible three-syllable pattern of long and short syllables is given a name, such as 'y' for short–long–long and 'm' for long–long–long. To remember these names, the mnemoic yamātārājabhānasalagam is used, in which each three-syllable pattern occurs starting at its name: 'yamātā' has a short–long–long pattern, 'mātārā' has a long–long–long pattern, and so on, until 'salagam' which has a short–short–long pattern because of the final consonant. This mnemonic, equivalent to a De Bruijn sequence on binary 3-tuples, is of unknown antiquity, but is at least as old as C. P. Brown's 1869 book on Sanskrit prosody that mentions it and considers it "an ancient line, written by Pāṇini".34567
In 1894, A. de Rivière raised the question in an issue of the French problem journal L'Intermédiaire des Mathématiciens, of the existence of a circular arrangement of length 
 
 
 
  which contains all 
 
 
 
  binary sequences of length 
 
 
 
 
 . The problem was solved, along with the count 
 
 
 
 , by C. Flye Sainte-Marie in the same year.8 This was largely forgotten, and  proved the existence of such cycles for general alphabet size in place of 2, with an algorithm for constructing them. Finally, when in 1944 Kees Posthumus conjectured the count 
 
 
 
  for binary sequences, de Bruijn proved the conjecture in 1946, through which the problem became well-known.9
Karl Popper independently describes these objects in his The Logic of Scientific Discovery (1934), calling them "shortest random-like sequences".10
Examples

Taking A = {0, 1}, there are two distinct B(2, 3): 00010111 and 11101000, one being the reverse or negation of the other.


Two of the 2048 possible B(2, 5) in the same alphabet are 00000100011001010011101011011111 and 00000101001000111110111001101011.

Construction
The De Bruijn sequences can be constructed by taking a Hamiltonian path of an n-dimensional De Bruijn graph over k symbols (or equivalently, a Eulerian cycle of a (n − 1)-dimensional De Bruijn graph).11
An alternative construction involves concatenating together, in lexicographic order, all the Lyndon words whose length divides n.12
De Bruijn sequences can also be constructed using shift registers13 or via finite fields.14
Example
(Figure)
A De Bruijn graph. Every four-digit sequence occurs exactly once if one traverses every edge exactly once and returns to one's starting point (an Eulerian cycle). Every three-digit sequence occurs exactly once if one visits every node exactly once (a Hamiltonian path).

Goal: to construct a B(2, 4) De Bruijn sequence of length 24 = 16 using Eulerian (n − 1 = 4 − 1 = 3) 3-D De Bruijn graph cycle.
Each edge in this 3-dimensional De Bruijn graph corresponds to a sequence of four digits: the three digits that label the vertex that the edge is leaving followed by the one that labels the edge. If one traverses the edge labeled 1 from 000, one arrives at 001, thereby indicating the presence of the subsequence 0001 in the De Bruijn sequence. To traverse each edge exactly once is to use each of the 16 four-digit sequences exactly once.
For example, suppose we follow the following Eulerian path through these nodes:

000, 000, 001, 011, 111, 111, 110, 101, 011,
 



110, 100, 001, 010, 101, 010, 100, 000.
 



These are the output sequences of length k:

0 0 0 0
 
_ 0 0 0 1
 
_ _ 0 0 1 1
 

This corresponds to the following De Bruijn sequence:

0 0 0 0 1 1 1 1 0 1 1 0 0 1 0 1
 

The eight vertices appear in the sequence in the following way:
      {0  0  0} 0  1  1  1  1  0  1  1  0  0  1  0  1
       0 {0  0  0} 1  1  1  1  0  1  1  0  0  1  0  1
       0  0 {0  0  1} 1  1  1  0  1  1  0  0  1  0  1
       0  0  0 {0  1  1} 1  1  0  1  1  0  0  1  0  1
       0  0  0  0 {1  1  1} 1  0  1  1  0  0  1  0  1
       0  0  0  0  1 {1  1  1} 0  1  1  0  0  1  0  1
       0  0  0  0  1  1 {1  1  0} 1  1  0  0  1  0  1
       0  0  0  0  1  1  1 {1  0  1} 1  0  0  1  0  1
       0  0  0  0  1  1  1  1 {0  1  1} 0  0  1  0  1
       0  0  0  0  1  1  1  1  0 {1  1  0} 0  1  0  1
       0  0  0  0  1  1  1  1  0  1 {1  0  0} 1  0  1
       0  0  0  0  1  1  1  1  0  1  1 {0  0  1} 0  1
       0  0  0  0  1  1  1  1  0  1  1  0 {0  1  0} 1
       0  0  0  0  1  1  1  1  0  1  1  0  0 {1  0  1}
   ... 0} 0  0  0  1  1  1  1  0  1  1  0  0  1 {0  1 ...
   ... 0  0} 0  0  1  1  1  1  0  1  1  0  0  1  0 {1 ...
...and then we return to the starting point. Each of the eight 3-digit sequences (corresponding to the eight vertices) appears exactly twice, and each of the sixteen 4-digit sequences (corresponding to the 16 edges) appears exactly once.
Algorithm
The following Python code calculates a De Bruijn sequence, given k and n, based on an algorithm from Frank Ruskey's Combinatorial Generation.15

 def de_bruijn(k, n):
     """
     De Bruijn sequence for alphabet k
     and subsequences of length n.
     """
     try:
         # let's see if k can be cast to an integer;
         # if so, make our alphabet a list
         _ = int(k)
         alphabet = list(map(str, range(k)))
 
     except (ValueError, TypeError):
         alphabet = k
         k = len(k)
 
     a = [0] * k * n
     sequence = []
 
     def db(t, p):
         if t > n:
             if n % p == 0:
                 sequence.extend(a[1:p + 1])
         else:
             a[t] = a[t - p]
             db(t + 1, p)
             for j in range(a[t - p] + 1, k):
                 a[t] = j
                 db(t + 1, t)
     db(1, 1)
     return "".join(alphabet[i] for i in sequence)
 
 print(de_bruijn(2, 3))
 print(de_bruijn("abcd", 2))
which prints
00010111
aabacadbbcbdccdd
Uses
The sequence can be used to shorten a brute-force attack on a PIN-like code lock that does not have an "enter" key and accepts the last n digits entered. For example, a digital door lock with a 4-digit code would have B(10, 4) solutions, with length . Therefore, only at most  (as the solutions are cyclic) presses are needed to open the lock. Trying all codes separately would require  presses.
The symbols of a De Bruijn sequence written around a circular object (such as a wheel of a robot) can be used to identify its angle by examining the n consecutive symbols facing a fixed point. Gray codes can be used as similar rotary positional encoding mechanisms.
De Bruijn cycles are of general use in neuroscience and psychology experiments that examine the effect of stimulus order upon neural systems,16 and can be specially crafted for use with functional magnetic resonance imaging.17
A De Bruijn sequence can be used to quickly find the index of the LSB or MSB in a word using bitwise operations.1819 An example of returning the index of the least significant bit from a 32 bit unsigned integer is given below using bit manipulation.
unsigned int v;   
 int r;           
 static const int MultiplyDeBruijnBitPosition[32] = 
 {
   0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 
   31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9
 };
 r = MultiplyDeBruijnBitPosition[((uint32_t)((v & -v) * 0x077CB531U)) >> 27];
The index of the LSB in v is stored in r and if v has no set bits the operation returns 0. The constant, 0x077CB531U, in the expression is a De Bruijn sequence.
De Bruijn torus
A De Bruijn torus is a toroidal array with the property that every k-ary m-by-n matrix occurs exactly once. (It is not necessary that the array be expressed toroidally; the array can be mapped into a 2-dimensional array. Because it is toroidal it "wraps around" on all 4 sides.)
Such a pattern can be used for two-dimensional positional encoding in a fashion analogous to that described above for rotary encoding. Position can be determined by examining the m-by-n matrix directly adjacent to the sensor, and calculating its position on the De Bruijn torus.
De Bruijn decoding
Computing the position of a particular unique tuple or matrix in a De Bruijn sequence or torus is known as the De Bruijn Decoding Problem. Efficient  decoding algorithms exists for special, recursively constructed sequences20 and extend to the two dimensional case.21 De Bruijn decoding is of interest, e.g., in cases where large sequences or tori are used for positional encoding.
See also

De Bruijn graph
De Bruijn torus
Normal number
Linear feedback shift register
n-sequence

Notes
References


.

.

.

.

.

.

.

.

.

External links



De Bruijn sequence
Combinatorial Object Server, includes a De Bruijn sequence generator among many others
CGI generator
Applet generator
Javascript generator and decoder. Implementation of J. Tuliani's algorithm.
Door code lock
Minimal arrays containing all sub-array combinations of symbols: De Bruijn sequences and tori

"
Category:Binary sequences Category:Enumerative combinatorics Category:Articles with example Python code



.

C. P. Brown, 1869, Sanskrit Prosody and Numerical Symbols Explained, p. 28
Subhash Kak, 2000, Yamātārājabhānasalagāṃ an interesting combinatoric sūtra, Indian Journal of History of Science, 35.2 (2000), 123–127.
Rachel W. Hall. Math for poets and drummers. Math Horizons 15 (2008) 10–11.

. Reprinted in Wardhaugh, Benjamin, ed. (2012), A Wealth of Numbers: An Anthology of 500 Years of Popular Mathematics Writing, Princeton Univ. Press, pp. 139–144.



.
According to , the sequence generated in this way was first described (with a different generation method) by , and the connection between it and Lyndon words was observed by .
.
. See in particular "the finite field approach", pp. 136–139.

GK Aguirre, MG Mattar, L Magis-Weinberg. (2011) . NeuroImage 56: 1293–1300



.
.



