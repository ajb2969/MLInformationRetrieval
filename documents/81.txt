   Tree walking automaton      Tree walking automaton   A tree walking automaton (TWA) is a type of finite automaton that deals with tree structures rather than strings. The concept was originally proposed in .  The following article deals with tree walking automata. For a different notion of tree automaton, closely related to regular tree languages , see branching automaton .  Definition  All trees are assumed to be binary , with labels from a fixed alphabet Σ.  Informally, a tree walking automaton A (TWA) is a finite state device which walks over the tree in a sequential manner. At each moment A visits a node v in state q . Depending on the state q , the label of the node v , and whether the node is the root, a left child, a right child or a leaf, A changes its state from q to q ‘ and moves to the parent of v or its left or right child. A TWA accepts a tree if it enters an accepting state, and rejects if its enters a rejecting state or makes an infinite loop. As with string automata, a TWA may be deterministic or nondeterministic.  More formally, a (nondeterministic) tree walking automaton over an alphabet Σ is a tuple  where Q is a finite set of states, its subset I , F , and R is the set of initial, accepting and rejecting states, respectively, and  is the transition relation.  Example  A simple example of a tree walking automaton is a TWA that performs depth-first search (DFS) on the input tree. The automaton   A   A   A   has 3 states,    Q  =   {   q  0   ,   q  𝑙𝑒𝑓𝑡   ,   q  𝑟𝑖𝑔ℎ𝑡   }       Q    subscript  q  0    subscript  q  𝑙𝑒𝑓𝑡    subscript  q  𝑟𝑖𝑔ℎ𝑡      Q=\{q_{0},q_{\mathit{left}},q_{\mathit{right}}\}   .   A   A   A   begins in the root in state    q  0     subscript  q  0    q_{0}   and descends to the left subtree. Then it processes the tree recursively. Whenever   A   A   A   enters a node   v   v   v   in state    q  𝑙𝑒𝑓𝑡     subscript  q  𝑙𝑒𝑓𝑡    q_{\mathit{left}}   , it means that the left subtree of   v   v   v   has just been processed, so it proceeds to the right subtree of   v   v   v   . If   A   A   A   enters a node   v   v   v   in state    q  𝑟𝑖𝑔ℎ𝑡     subscript  q  𝑟𝑖𝑔ℎ𝑡    q_{\mathit{right}}   , it means that the whole subtree with root   v   v   v   has been processed and   A   A   A   walks to the parent of   v   v   v   and changes its state to    q  𝑙𝑒𝑓𝑡     subscript  q  𝑙𝑒𝑓𝑡    q_{\mathit{left}}   or    q  𝑟𝑖𝑔ℎ𝑡     subscript  q  𝑟𝑖𝑔ℎ𝑡    q_{\mathit{right}}   , depending on whether   v   v   v   is a left or right child.  Properties  Unlike branching automata , tree walking automata are difficult to analyze and even simple properties are nontrivial to prove. The following list summarizes some known facts related to TWA:   As shown by , deterministic TWA are strictly weaker than nondeterministic ones (    𝐷𝑇𝑊𝐴  ⊊  𝑇𝑊𝐴      𝐷𝑇𝑊𝐴  𝑇𝑊𝐴    \mathit{DTWA}\subsetneq\mathit{TWA}   )  deterministic TWA are closed under complementation (but it is not known whether the same holds for nondeterministic ones)  the set of languages recognized by TWA is strictly contained in regular tree languages (    𝑇𝑊𝐴  ⊊  𝑅𝐸𝐺      𝑇𝑊𝐴  𝑅𝐸𝐺    \mathit{TWA}\subsetneq\mathit{REG}   ), i.e. there exist regular languages which are not recognized by any tree walking automaton .   See also   Pebble automata , an extension of tree walking automata   References       External links   Mikołaj Bojanczyk: Tree-walking automata . A brief survey.   "  Category:Trees (data structures)  Category:Automata theory   