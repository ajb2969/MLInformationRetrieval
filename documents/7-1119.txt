


Conditional random field




Conditional random field

Conditional random fields (CRFs) are a class of  statistical modelling method often applied in pattern recognition and machine learning, where they are used for structured prediction. Whereas an ordinary classifier predicts a label for a single sample without regard to "neighboring" samples, a CRF can take context into account; e.g., the linear chain CRF popular in natural language processing predicts sequences of labels for sequences of input samples.
CRFs are a type of discriminative undirected probabilistic graphical model. It is used to encode known relationships between observations and construct consistent interpretations. It is often used for labeling or parsing of sequential data, such as natural language text or biological sequences1 and in computer vision.2 Specifically, CRFs find applications in shallow parsing,3 named entity recognition,4 gene finding and peptide critical functional region finding,5 among other tasks, being an alternative to the related hidden Markov models (HMMs). In computer vision, CRFs are often used for object recognition and image segmentation.
Description
Lafferty, McCallum and Pereira6 define a CRF on observations 
 
 
 
  and random variables

 
  as follows:

Let 
 
 
 
  be a graph such that 
 
 
 
 
 ,
so that 

 is indexed by the vertices of 

. 
Then 
 
 
 
  is a conditional random field when the random variables 
 
 
 
 , conditioned on 
 
 
 
 
 , obey the Markov property with respect to the graph
 
 
 
 , where 
 
 
 
  means that 
 
 
 
  and 
 
 
 
  are neighbors in 
 
 
 
 
 .

What this means is that a CRF is an undirected graphical model whose nodes can be divided into exactly two disjoint sets 
 
 
 
  and 
 
 
 
 , the observed and output variables, respectively; the conditional distribution 
 
 
 
  is then modeled.
Inference
For general graphs, the problem of exact inference in CRFs is intractable. The inference problem for a CRF is basically the same as for an MRF and the same arguments hold.7 However there exist special cases for which exact inference is feasible:

If the graph is a chain or a tree, message passing algorithms yield exact solutions. The algorithms used in these cases are analogous to the forward-backward and Viterbi algorithm for the case of HMMs.
If the CRF only contains pair-wise potentials and the energy is submodular, combinatorial min cut/max flow algorithms yield exact solutions.

If exact inference is impossible, several algorithms can be used to obtain approximate solutions. These include:

Loopy belief propagation
Alpha expansion
Mean field inference
Linear programming relaxations

Parameter Learning
Learning the parameters 
 
 
 
  is usually done by maximum likelihood learning for 
 
 
 
 
 . If all nodes have exponential family distributions and all nodes are observed during training, this optimization is convex.8 It can be solved for example using gradient descent algorithms, or Quasi-Newton methods such as the L-BFGS algorithm. On the other hand, if some variables are unobserved, the inference problem has to be solved for these variables. Exact inference is intractable in general graphs, so approximations have to be used.
Examples
In sequence modeling, the graph of interest is usually a chain graph. An input sequence of observed variables 
 
 
 
  represents a sequence of observations and 
 
 
 
  represents a hidden (or unknown) state variable that needs to be inferred given the observations. The 
 
 
 
  are structured to form a chain, with an edge between each 
 
 
 
  and 
 
 
 
 
 . As well as having a simple interpretation of the 
 
 
 
  as "labels" for each element in the input sequence, this layout admits efficient algorithms for:

model training, learning the conditional distributions between the 
 
 
 
  and feature functions from some corpus of training data.
decoding, determining the probability of a given label sequence 
 
 
 
  given 
 
 
 
 .
inference, determining the most likely label sequence 
 
 
 
 
  given 
 
 
 
 .

The conditional dependency of each 
 
 
 
  on 
 
 
 
  is defined through a fixed set of feature functions of the form 
 
 
 
 , which can informally be thought of as measurements on the input sequence that partially determine the likelihood of each possible value for 
 
 
 
 
 . The model assigns each feature a numerical weight and combines them to determine the probability of a certain value for 
 
 
 
 .
Linear-chain CRFs have many of the same applications as conceptually simpler hidden Markov models (HMMs), but relax certain assumptions about the input and output sequence distributions. An HMM can loosely be understood as a CRF with very specific feature functions that use constant probabilities to model state transitions and emissions. Conversely, a CRF can loosely be understood as a generalization of an HMM that makes the constant transition probabilities into arbitrary functions that vary across the positions in the sequence of hidden states, depending on the input sequence.
Notably in contrast to HMMs, CRFs can contain any number of feature functions, the feature functions can inspect the entire input sequence 
 
 
 
  at any point during inference, and the range of the feature functions need not have a probabilistic interpretation.
Variants
Higher-order CRFs and semi-Markov CRFs
CRFs can be extended into higher order models by making each 
 
 
 
  dependent on a fixed number 
 
 
 
  of previous variables 
 
 
 
 
 . Training and inference are only practical for small values of 
 
 
 
  (such as o ≤ 5), since their computational cost increases exponentially with 
 
 
 
 . Large-margin models for structured prediction, such as the structured Support Vector Machine can be seen as an alternative training procedure to CRFs.
There exists another generalization of CRFs, the semi-Markov conditional random field (semi-CRF), which models variable-length segmentations of the label sequence 
 
 
 
 .9 This provides much of the power of higher-order CRFs to model long-range dependencies of the 
 
 
 
 , at a reasonable computational cost.
Latent-dynamic conditional random field
Latent-dynamic conditional random fields (LDCRF) or discriminative probabilistic latent variable models (DPLVM) are a type of CRFs for sequence tagging tasks. They are latent variable models that are trained discriminatively.
In an LDCRF, like in any sequence tagging task, given a sequence of observations x = 
 
 
 
 
 ₁, … 
 
 
 
 , the main problem the model must solve is how to assign a sequence of labels y = 
 
 
 
 ₁, … 
 
 
 
  from one finite set of labels 
 
 
 
 . Instead of directly modeling 
 
 
 
 
 (y|x) as an ordinary linear-chain CRF would do, instead a set of latent variables h is "inserted" between x and y using the chain rule of probability:10



This allows the capturing of latent structure between the observations and labels.11 While LDCRFs can be trained using quasi-Newton methods, a specialized version of the perceptron algorithm called the latent-variable perceptron has been developed for them as well, based on Collins' structured perceptron algorithm.12 These models find applications in computer vision, specifically gesture recognition from video streams,13 and shallow parsing.14
Software
This is a partial list of software that implement generic CRF tools.

RNNSharp CRFs based on recurrent neural networks (C#, .NET)
CRF-ADF Linear-chain CRFs with fast online ADF training (C#, .NET)
CRFSharp Linear-chain CRFs (C#, .NET)
GCO CRFs with submodular energy functions (C++, Matlab)
DGM General CRFs (C++)
GRMM General CRFs (Java)
factorie General CRFs (Scala)
CRFall General CRFs (Matlab)
Sarawagi's CRF Linear-chain CRFs (Java)
HCRF library Hidden-state CRFs (C++, Matlab)
Accord.NET Linear-chain CRF, HCRF and HMMs (C#, .NET)
Wapiti Fast linear-chain CRFs (C)15
CRFSuite Fast restricted linear-chain CRFs (C)
CRF++ Linear-chain CRFs (C++)
FlexCRFs First-order and second-order Markov CRFs (C++)
crf-chain1 First-order, linear-chain CRFs (Haskell)
imageCRF CRF for segmenting images and image volumes (C++)
MALLET Linear-chain for sequence tagging (Java)
PyStruct Structured Learning in Python (Python)

This is a partial list of software that implement CRF related tools.

Conrad CRF based gene predictor (Java)
Stanford NER Named Entity Recognizer (Java)
BANNER Named Entity Recognizer (Java)

See also

Hammersley–Clifford theorem
Graphical model
Markov random field
Maximum entropy Markov model (MEMM)

References
Further reading

McCallum, A.: Efficiently inducing features of conditional random fields. In: Proc. 19th Conference on Uncertainty in Artificial Intelligence. (2003)


Wallach, H.M.: Conditional random fields: An introduction. Technical report MS-CIS-04-21, University of Pennsylvania (2004)
Sutton, C., McCallum, A.: An Introduction to Conditional Random Fields for Relational Learning. In "Introduction to Statistical Relational Learning". Edited by Lise Getoor and Ben Taskar. MIT Press. (2006) Online PDF
Klinger, R., Tomanek, K.: Classical Probabilistic Models and Conditional Random Fields. Algorithm Engineering Report TR07-2-013, Department of Computer Science, Dortmund University of Technology, December 2007. ISSN 1864-4503. Online PDF

"
Category:Graphical models Category:Log-linear models Category:Machine learning

















T. Lavergne, O. Cappé and F. Yvon (2010). Practical very large scale CRFs. Proc. 48th Annual Meeting of the ACL, pp. 504-513.




