   Digital Signature Algorithm      Digital Signature Algorithm  The '''Digital Signature Algorithm''' ('''DSA''') is a [[Federal Information Processing Standards|Federal Information Processing Standard]] for [[digital signature]]s. It was proposed by the [[National Institute of Standa rds and Technology]] (NIST) in August 1991 for use in their Digital Signature Standard ( DSS ) and adopted as FIPS 186 in 1993. 1 Four revisions to the initial specification have been released: FIPS 186-1 in 1996, 2 FIPS 186-2 in 2000, 3 FIPS 186-3 in 2009, 4 and FIPS 186-4 in 2013. 5  DSA is covered by , filed July 26, 1991 and attributed to David W. Kravitz, 6 a former NSA employee. This patent was given to "The United States of America as represented by the Secretary of Commerce, Washington, D.C.", and NIST has made this patent available worldwide royalty-free . 7  Claus P. Schnorr claims that his  (expired) covered DSA; this claim is disputed. 8 DSA is a variant of the ElGamal Signature Scheme .  Key generation  Key generation has two phases. The first phase is a choice of algorithm parameters which may be shared between different users of the system, while the second phase computes public and private keys for a single user.  Parameter generation   Choose an approved cryptographic hash function  H . In the original DSS, H was always SHA-1 , but the stronger SHA-2 hash functions are approved for use in the current DSS. 9 10 The hash output may be truncated to the size of a key pair.  Decide on a key length L and N . This is the primary measure of the cryptographic strength of the key. The original DSS constrained L to be a multiple of 64 between 512 and 1024 (inclusive). NIST 800-57 recommends lengths of 2048 (or 3072) for keys with security lifetimes extending beyond 2010 (or 2030), using correspondingly longer N . 11 FIPS 186-3 specifies L and N length pairs of (1024,160), (2048,224), (2048,256), and (3072,256). 12  Choose an N -bit prime q . N must be less than or equal to the hash output length.  Choose an L -bit prime modulus p such that p –1 is a multiple of q .  Choose g , a number whose multiplicative order modulo p is q . This may be done by setting g = h ( p –1)/ q mod p for some arbitrary h (1 < h < p −1), and trying again with a different h if the result comes out as 1. Most choices of h will lead to a usable g ; commonly h =2 is used.   The algorithm parameters ( p , q , g ) may be shared between different users of the system.  Per-user keys  Given a set of parameters, the second phase computes private and public keys for a single user:   Choose x by some random method, where 0 < x < q .  Calculate y = g x mod p .  Public key is ( p , q , g , y ). Private key is x .   There exist efficient algorithms for computing the modular exponentiations  h ( p –1)/ q mod p and g x mod p , such as exponentiation by squaring .  Signing  Let   H   H   H   be the hashing function and   m   m   m   the message:   Generate a random per-message value   k   k   k   where    0  <  k  <  q        0  k       q     0     Calculate    r  =    (    g  k   mod  p   )   mod  q       r   modulo   modulo   superscript  g  k   p   q     r=\left(g^{k}\bmod\,p\right)\bmod\,q     In the unlikely case that    r  =  0      r  0    r=0   , start again with a different random   k   k   k     Calculate    s  =     k   -  1     (    H   (  m  )    +   x  r    )    mod  q       s   modulo     superscript  k    1        H  m     x  r     q     s=k^{-1}\left(H\left(m\right)+xr\right)\bmod\,q     In the unlikely case that    s  =  0      s  0    s=0   , start again with a different random   k   k   k     The signature is    (  r  ,  s  )     r  s    \left(r,s\right)      The first two steps amount to creating a new per-message key. The modular exponentiation here is the most computationally expensive part of the signing operation, and it may be computed before the message hash is known. The modular inverse     k   -  1    mod  q     modulo   superscript  k    1    q    k^{-1}\bmod\,q   is the second most expensive part, and it may also be computed before the message hash is known. It may be computed using the extended Euclidean algorithm or using Fermat's little theorem as     k   q  -  2    mod  q     modulo   superscript  k    q  2    q    k^{q-2}\bmod\,q   .  Verifying   Reject the signature if 0 or 0 is not satisfied.  Calculate    w  =    s   -  1    mod  q       w   modulo   superscript  s    1    q     w=s^{-1}\bmod\,q     Calculate     u  1   =     H   (  m  )    ⋅   w    mod  q        subscript  u  1    modulo   normal-⋅    H  m   w   q     u_{1}=H\left(m\right)\cdot w\,\bmod\,q     Calculate     u  2   =    r  ⋅   w    mod  q        subscript  u  2    modulo   normal-⋅  r  w   q     u_{2}=r\cdot w\,\bmod\,q     Calculate    v  =    (    (    g   u  1     y   u  2     )   mod  p   )   mod  q       v   modulo   modulo     superscript  g   subscript  u  1     superscript  y   subscript  u  2     p   q     v=\left(\left(g^{u_{1}}y^{u_{2}}\right)\bmod\,p\right)\bmod\,q     The signature is invalid unless    v  =  r      v  r    v=r      DSA is similar to the ElGamal signature scheme .  Correctness of the algorithm  The signature scheme is correct in the sense that the verifier will always accept genuine signatures. This can be shown as follows:  First, if g = h ( p − 1)/ q mod p it follows that g q ≡ h p − 1 ≡ 1 (mod p ) by Fermat's little theorem . Since g > 1 and q is prime, g must have order q .  The signer computes      s  =     k   -  1     (    H   (  m  )    +   x  r    )    mod  q       s   modulo     superscript  k    1        H  m     x  r     q     s=k^{-1}(H(m)+xr)\bmod\,q     Thus     k   k   \displaystyle k     Since g has order q (mod p) we have      g  k     superscript  g  k    \displaystyle g^{k}     Finally, the correctness of DSA follows from     r   r   \displaystyle r     Sensitivity  With DSA, the entropy, secrecy, and uniqueness of the random signature value k is critical. It is so critical that violating any one of those three requirements can reveal the entire private key to an attacker. 13 Using the same value twice (even while keeping k secret), using a predictable value, or leaking even a few bits of k in each of several signatures, is enough to break DSA. 14  This issue affects both DSA and ECDSA - in December 2010, a group calling itself fail0verflow announced recovery of the ECDSA private key used by Sony to sign software for the PlayStation 3 game console. The attack was made possible because Sony failed to generate a new random k for each signature. 15  This issue can be prevented by deriving k deterministically from the private key and the message hash, as described by RFC 6979. This ensures that k is different for each H(m) and unpredictable for attackers who do not know the private key x .  See also   Elliptic Curve Digital Signature Algorithm  Modular arithmetic   References  External links   FIPS PUB 186-4: Digital Signature Standard (DSS) , the fourth (and current) revision of the official DSA specification.  Recommendation for Key Management -- Part 1: general , NIST Special Publication 800-57, p. 62–63   "  Category:Digital signature schemes     FIPS PUB 186 : Digital Signature Standard (DSS), 1994-05-19 ↩  FIPS PUB 186-1 : Digital Signature Standard (DSS), 1998-12-15 ↩  FIPS PUB 186-2 : Digital Signature Standard (DSS), 2000-01-27 ↩  FIPS PUB 186-3 : Digital Signature Standard (DSS), June 2009 ↩  FIPS PUB 186-4 : Digital Signature Standard (DSS), July 2013 ↩  Dr. David W. Kravitz ↩  Werner Koch. DSA and patents ↩  Minutes of the Sept. 94 meeting of the Computer System Security and Privacy Advisory Board ↩   FIPS PUB 180-4 : Secure Hash Standard (SHS), March 2012 ↩  NIST Special Publication 800-57 ↩   The Debian PGP disaster that almost was ↩  DSA k -value Requirements ↩  ↩     