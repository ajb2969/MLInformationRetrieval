


Buzen's algorithm




Buzen's algorithm

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



In queueing theory, a discipline within the mathematical theory of probability, Buzen's algorithm (or convolution algorithm) is an algorithm for calculating the normalization constant G(N) in the Gordon–Newell theorem. This method was first proposed by Jeffrey P. Buzen in 1973.1 Computing G(N) is required to compute the stationary probability distribution of a closed queueing network.2
Performing a naïve computation of the normalising constant requires enumeration of all states. For a system with N jobs and M states there are 
 
 
 
  states. Buzen's algorithm "computes G(1), G(2), ..., G(N) using a total of NM multiplications and NM additions." This is a significant improvement and allows for computations to be performed with much larger networks.3
Problem setup
Consider a closed queueing network with M service facilities and N circulating customers. Write ni(t) for the number of customers present at the ith facility at time t, such that 
 
 
 
 . We assume that the service time for a customer at the ith facility is given by an exponentially distributed random variable with parameter μi and that after completing service at the ith facility a customer will proceed to the jth facility with probability pij.4
It follows from the Gordon–Newell theorem that the equilibrium distribution of this model is








where the Xi are found by solving








and G(N) is a normalizing constant chosen that the above probabilities sum to 1.5
Buzen's algorithm is an efficient method to compute G(N).6
Algorithm description
Write g(N,M) for the normalising constant of a closed queueing network with N circulating customers and M service stations. The algorithm starts by noting solving the above relations for the Xi and then setting starting conditions7











The recurrence relation8








is used to compute a grid of values. The sought for value G(N) = g(N,M).9
Marginal distributions, expected number of customers
The coefficients g(n,m), computed using Buzen's algorithm, can also be used to compute marginal distributions and expected number of customers at each node.











the expected number of customers at facility i by








Implementation
It will be assumed that the Xm have been computed by solving the relevant equations and are available as an input to our routine. Although g is in principle a two dimensional matrix, it can be computed in a column by column fashion starting from the leftmost column. The routine uses a single column vector C to represent the current column of g.
C[0] := 1
 for n := 1 step 1 until N do
    C[n] := 0;
 
 for m := 1 step 1 until M do
 for n := 1 step 1 until N do
    C[n] := C[n] + X[m]*C[n-1];
At completion, C contains the desired values G(0), G(1) to G(N). 10
References

Jain: The Convolution Algorithm (class handout)
Menasce: Convolution Approach to Queueing Algorithms (presentation)

"
Category:Stochastic processes Category:Queueing theory Category:Statistical algorithms



↩
↩











