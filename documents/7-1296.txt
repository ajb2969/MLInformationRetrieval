   Alphabet (formal languages)      Alphabet (formal languages)  In [[formal language theory]], a non-empty set is called '''alphabet''' when its intended use in string operations shall be indicated. {{cite book |last1=Aho |first1=Alfred V. |authorlink1=Alfred Aho |last2=Sethi |first2=Ravi |authorlink2=Ravi Sethi |last3=Ullman |first3=Jeffrey D. |authorlink3=Jeffrey Ullman |date=1985 |title=Compilers: Principles, Techniques, and Tools |edition=March 1988 reprint |publisher=Addison-Wesley |isbn=0-201-10088-6 |page=92 |quote=The term ''alphabet'' or ''character class'' denotes any fini te set of symbols.}} 1 Its members are then commonly called symbols or letters , e.g. characters or digits. 2 3 For example a common alphabet is {0,1}, the binary alphabet . A finite string is a finite sequence of letters from an alphabet; for instance a binary string is a string drawn from the alphabet {0,1}. An infinite sequence of letters may be constructed from elements of an alphabet as well.  Given an alphabet   Œ£   normal-Œ£   \Sigma   , we write    Œ£  *     superscript  normal-Œ£     \Sigma^{*}   to denote the set of all finite strings over the alphabet   Œ£   normal-Œ£   \Sigma   . Here, the     *        {}^{*}   denotes the Kleene star operator, so    Œ£  *     superscript  normal-Œ£     \Sigma^{*}   is also called the Kleene closure of   Œ£   normal-Œ£   \Sigma   . We write    Œ£  ‚àû     superscript  normal-Œ£     \Sigma^{\infty}   (or occasionally,    Œ£  ùí©     superscript  normal-Œ£  ùí©    \Sigma^{\mathcal{N}}   or    Œ£  œâ     superscript  normal-Œ£  œâ    \Sigma^{\omega}   ) to denote the set of all infinite sequences over the alphabet   Œ£   normal-Œ£   \Sigma   .  For example, using the binary alphabet {0,1}, the strings Œµ, 0, 1, 00, 01, 10, 11, 000, etc. are all in the Kleene closure of the alphabet (where Œµ represents the empty string ).  Alphabets are important in the use of formal languages , automata and semiautomata . In most cases, for defining instances of automata, such as deterministic finite automata (DFAs), it is required to specify an alphabet from which the input strings for the automaton are built.  If L is a formal language, i.e. a (possibly infinite) set of finite-length strings, the alphabet of L is the set of all symbols that may occur in any string in L . For example, if L is the set of all variable identifiers in the programming language C , L ‚Äôs alphabet is the set { a, b, c, ..., x, y, z, A, B, C, ..., X, Y, Z, 0, 1, 2, ..., 7, 8, 9, _ }.  See also   Combinatorics on words   References  Literature   John E. Hopcroft and Jeffrey D. Ullman, Introduction to Automata Theory, Languages, and Computation , Addison-Wesley Publishing, Reading Massachusetts, 1979. ISBN 0-201-02988-X.   "  Category:Formal languages  Category:Combinatorics on words     ‚Ü©       