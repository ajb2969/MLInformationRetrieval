


Montgomery modular multiplication




Montgomery modular multiplication

In modular arithmetic computation, Montgomery modular multiplication, more commonly referred to as Montgomery multiplication, is a method for performing fast modular multiplication, introduced in 1985 by the American mathematician Peter L. Montgomery. 1 2 Given two numbers a and b modulo a positive integer N, Montgomery multiplication computes


 
  Montgomery multiplication requires converting a and b into a special representation called Montgomery form. Because of the overhead involved in the conversion, computing a single product by Montgomery multiplication is slower than computing the product in the integers and performing a modular reduction by division or Barrett reduction. However, when many products are required, as in modular exponentiation, the conversion to Montgomery form becomes a negligible fraction of the time of the computation, and performing the computation by Montgomery multiplication is faster than the available alternatives. Many important cryptosystems such as RSA and Diffie–Hellman key exchange are based on arithmetic operations modulo a large number, and for these cryptosystems, the increased speed afforded by Montgomery multiplication can be important in practice.3
Modular arithmetic and Montgomery form
Let N denote a positive integer modulus. The ring Z/NZ consists of residue classes modulo N, that is, sets of the form:


 
  where a is some fixed integer. Each residue class is a set of integers such that the difference of any two integers in the set is divisible by N (and the residue class is maximal with respect to that property; integers aren't left out of the residue class unless they would violate the divisibility condition). The residue class corresponding to a is denoted 
 
 
 
 . Equality of residue classes is called congruence and is denoted:


 
  Storing an entire residue class on a computer is impossible because the residue class has infinitely many elements. Instead, residue classes are stored as representatives. Conventionally, these representatives are the integers a for which . If a is an integer, then the representative of 
 
 
 
  is written . When writing congruences, it's common to identify an integer with the residue class it represents. With this convention, the above equality is written 
 
 
 
 .
Arithmetic on residue classes is done by first performing integer arithmetic on their representatives. The output of the integer operation determines a residue class, and the output of the modular operation is determined by computing the residue class's representative. For example, if , then the sum of the residue classes 
 
 
 
  and 
 
 
 
  is computed by finding the integer sum , then determining , the integer between 0 and 16 whose difference with 22 is a multiple of 17. In this case, that integer is 5, so 
 
 
 
 .
If a and b are integers in the range , then their sum is in the range  and their difference is in the range , so determining the representative in  requires at most one subtraction or addition (respectively) of N. However, the product ab is in the range . Storing the intermediate integer product ab requires twice as many bits as either a or b, and efficiently determining the representative in  requires division. Mathematically, the integer between 0 and  that is congruent to ab can be expressed by applying the division algorithm:


 
  where q is the quotient 
 
 
 
  and r, the remainder, is in the interval . The remainder r is . Determining r can be done by computing q, then subtracting qN from ab. For example, the product 
 
 
 
  is determined by computing 
 
 
 
 , dividing 
 
 
 
 , and subtracting 
 
 
 
 .
Because the computation of q requires division, it is undesirably expensive on most computer hardware. Montgomery form is a different way of expressing the elements of the ring in which modular products can be computed without expensive divisions. While divisions are still necessary, they can be done with respect to a different divisor R. This divisor can be chosen to be a whole number of machine words, making division and reduction much cheaper.
The only mathematical requirement on the auxiliary modulus R is that it be a positive integer such that . For computational purposes it is also necessary that division and reduction modulo R be inexpensive, and the modulus is not useful for modular multiplication unless . The Montgomery form or Montgomery representation of the residue class 
 
 
 
  with respect to R is , that is, it is the representative of the residue class 
 
 
 
 . For example, suppose that  and that . The Montgomery forms of 3, 5, 7, and 15 are , , , and .
Addition and subtraction in Montgomery form are the same as ordinary modular addition and subtraction because of the distributive law:





 
  This is a consequence of the fact that, because , multiplication by R is an isomorphism on the additive group Z/NZ. For example, , which in Montgomery form becomes .
Multiplication in Montgomery form, however, is seemingly more complicated. The usual product of aR and bR does not represent the product of a and b because it has an extra factor of R:


 
  Computing products in Montgomery form requires removing the extra factor of R. While division by R is cheap, the intermediate product  is not divisible by R because the modulo operation has destroyed that property. So for instance, the product of the Montgomery forms of 7 and 15 modulo 17 is the product of 3 and 4, which is 12. Since 12 is not divisible by 100, additional effort is required to remove the extra factor of R.
Removing the extra factor of R can be done by multiplying by an integer R′ such that 
 
 
 
 , that is, by an R′ whose residue class is the modular inverse of R mod N. Then, working modulo N,


 
  The integer R′ exists because of the assumption that R and N are coprime. It can be constructed using the extended Euclidean algorithm. The extended Euclidean algorithm efficiently determines integers R′ and N′ that satisfy Bézout's identity: , , and:


 
  This shows that it is possible to do multiplication in Montgomery form. A straightforward algorithm to multiply numbers in Montgomery form is therefore to multiply , , and  as integers and reduce modulo N.
For example, to multiply 7 and 15 modulo 17 in Montgomery form, compute the product of 3 and 4 to get 12 as above. The extended Euclidean algorithm implies that , so . Multiply 12 by 8 to get 96 and reduce modulo 17 to get 11. This is the Montgomery form of 3, as expected.
The REDC algorithm
While the above algorithm is correct, it is slower than multiplication in the standard representation because of the need to multiply by R′ and divide by N. Montgomery reduction, also known as REDC, is an algorithm that simultaneously computes the product by R′ and reduces modulo N more quickly than the naive method. The speed is because all computations are done using only reduction and divisions with respect to R, not N:
function REDC is
    input: Integers R and N with ,
           Integer N′ in  such that 

,
           Integer T in the range 
    output: Integer S in the range  such that 



    m ← ((T mod R)N′) mod R
    t ← (T + mN) / R
    if t ≥ N then
        return 
    else
        return t
    end if
end function
To see that this algorithm is correct, first observe that m is chosen precisely so that  is divisible by R. A number is divisible by R if and only if it is congruent to zero mod R, and we have:


 
  Therefore t is an integer. Second, the output is either t or , both of which are congruent to t mod N, so prove that the output is congruent to , it suffices to prove that t is. Modulo N, t satisfies:


 
  Therefore the output has the correct residue class. Third, m is in , and therefore  is between 0 and . Hence t is less than , and because it's an integer, this puts t in the range . Therefore reducing t into the desired range requires at most a single subtraction, so the algorithm's output lies in the correct range.
To use REDC to compute the product of 7 and 15 modulo 17, first convert to Montgomery form and multiply as integers to get 12 as above. Then apply REDC with , , , and . The first step sets m to . The second step sets t to . Notice that  is 1100, a multiple of 100 as expected. t is set to 11, which is less than 17, so the final result is 11, which agrees with the computation of the previous section.
As another example, consider the product  but with . Using the extended Euclidean algorithm, compute , so N′ will be . The Montgomery forms of 7 and 15 are  and , respectively. Their product 28 is the input T to REDC, and since , the assumptions of REDC are satisfied. To run REDC, set m to . Then , so . Because , this is the Montgomery form of .
Arithmetic in Montgomery form
Many operations of interest modulo N can be expressed equally well in Montgomery form. Addition, subtraction, negation, comparison for equality, multiplication by an integer not in Montgomery form, and greatest common divisors with N may all be done with the standard algorithms. The Jacobi symbol can be calculated as 
 
 
 
  as long as  is stored.
When , most other arithmetic operations can be expressed in terms of REDC. This assumption implies that the product of two representatives mod N is less than RN, the exact hypothesis necessary for REDC to generate correct output. In particular, the product of  and  is . The combined operation of multiplication and REDC is often called Montgomery multiplication.
Conversion into Montgomery form is done by computing . Conversion out of Montgomery form is done by computing . The modular inverse of  is . Modular exponentiation can be done using exponentiation by squaring by initializing the initial product to the Montgomery representation of 1, that is, to ), and by replacing the multiply and square steps by Montgomery multiplies.
Performing these operations requires knowing at least . The constants  and  can be generated as  and as . The fundamental operation is to compute REDC of a product. When standalone REDC is needed, it can be computed as REDC of a product with . The only place where a direct reduction modulo N is necessary is in the precomputation of .
Montgomery arithmetic on multiprecision integers
Most cryptographic applications require numbers that are hundreds or even thousands of bits long. Such numbers are too large to be stored in a single machine word. Typically, the hardware performs multiplication mod some base B, so performing larger multiplications requires combining several small multiplications. The base B is typically 2 for microelectronic applications, 28 for 8-bit firmware,4 or 232 or 264 for software applications.
The REDC algorithm requires products modulo R, and typically  so that REDC can be used to compute products. However, when R is a power of B, there is a variant of REDC which requires products only of machine word sized integers. Suppose that positive multi-precision integers are stored little endian, that is, x is stored as an array  such that  for all i and  ∑ x[i] Bi}}. The algorithm begins with a multiprecision integer T and reduces it one word at a time. First an appropriate multiple of N is added to make T divisible by B. Then a multiple of N is added to make T divisible by B2, and so on. Eventually T is divisible by R, and after division by R the algorithm is in the same place as REDC was after the computation of t.
function MultiPrecisionREDC is
    Input: Integer N with , stored as an array of p integers,
           Integer  Br}},
           Integer N′ in  such that ,
           Integer T in the range , stored as an array of  integers.

    Output: Integer S in  such that , stored as an array of p integers.

    Set 
    for  do
        ''(Make T divisible by )''

        c ← 0
        m ← 
        for  do
            (Add the low word of and the carry from earlier, and find the new carry)

            x ← 
            T[i + j] ← 
            c ← 
        end for
        for  do
            (Continue carrying)

            x ← 
            T[i + j] ← 
            c ← 
        end for
    end for

    for  do
        S[i] ← T[i + r]
    end for

    if  then
        return 
    else
        return 
    end if
end function
The final comparison and subtraction is done by the standard algorithms.
The above algorithm is correct for essentially the same reasons that REDC is correct. Each time through the i loop, m is chosen so that  is divisible by B. Then mNBi is added to T. Because this quantity is zero mod N, adding it does not affect the value of . If mi denotes the value of m computed in the ith iteration of the loop, then the algorithm sets S to . Because MultiPrecisionREDC and REDC produce the same output, this sum is the same as the choice of m that the REDC algorithm would make.
The last word of T, , is used only to hold a carry, and so consequently it is either zero or one. Depending upon the processor, it may be possible to store this word as a carry flag instead of a full-sized word.
It is possible to combine multiprecision multiplication and REDC into a single algorithm. This combined algorithm is usually called Montgomery multiplication. Several different implementations are described by Koç, Acar, and Kalinski.5 The algorithm may use as little as  words of storage (plus a carry bit).
As an example, let , , and . Suppose that  and . The Montgomery representations of a and b are  and . Compute . The initial input T to MultiPrecisionREDC will be [6, 4, 8, 5, 6, 7]. The number N will be represented as [7, 9, 9]. The extended Euclidean algorithm says that , so N′ will be 7.
i ← 0
m ← 

j T       c
- ------- -
0 0485670 1    (After first iteration of first loop)
1 0485670 1
2 0485670 1
3 0487670 0    (After first iteration of second loop)
4 0487670 0
5 0487670 0
6 0487670 0

i ← 1
m ← 

j T       c
- ------- -
0 0087670 1    (After first iteration of first loop)
1 0067670 1
2 0067670 1
3 0067470 1    (After first iteration of second loop)
4 0067480 0
5 0067480 0

i ← 2
m ← 

j T       c
- ------- -
0 0007480 1    (After first iteration of first loop)
1 0007480 1
2 0007480 1
3 0007400 1    (After first iteration of second loop)
4 0007401 0
Therefore, before the final comparison and subtraction, . The final subtraction yields the number 50. Since the Montgomery representation of  is , this is the expected result.
When working in base 2, determining the correct m at each stage is particularly easy: If the current working bit is even, then m is zero and if it's odd, then m is one. Furthermore, because each step of MultiPrecisionREDC requires knowing only the lowest bit, Montgomery multiplication can be easily combined with a carry-save adder.
Side channel attacks
When using it as a part of a cryptographically secure algorithm, unmodified Montgomery reduction is vulnerable to side channel attacks, where the attacker can learn about the inner workings of the algorithm by studying the differences in time, power-consumption or any other parameter affected by the fact that the algorithm performs very different actions depending on the input. However it is simple to modify the algorithm or the hardware to make it resistant to such attacks.67
References
"
Category:Computer arithmetic Category:Cryptographic algorithms Category:Modular arithmetic



Peter Montgomery. Modular Multiplication Without Trial Division, Math. Computation, vol. 44, pp. 519–521, 1985.↩
Martin Kochanski, Montgomery Multiplication A colloquial explanation.↩
Alfred J. Menezes, Paul C. van Oorschot, and Scott A. Vanstone. Handbook of Applied Cryptography. CRC Press, 1996. ISBN 0-8493-8523-7, chapter 14.↩

Çetin K. Koç, Tolga Acar, Burton S. Kalinski, Jr., ↩
Zhe Liu, Johann Großschädl, and Ilya Kizhvatov. "Efficient and Side-Channel Resistant RSA Implementation for 8-bit AVR Microcontrollers".↩
Marc Joye and Sung-Ming Yen. "The Montgomery Powering Ladder". 2002.↩




