


Superformula




Superformula

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



(Figure)
Some superformula samples: a = b = 1; m, n1, n2 and n3 are shown in picture

The superformula is a generalization of the superellipse and was first proposed by Johan Gielis.
Gielis suggested that the formula can be used to describe many complex shapes and curves that are found in nature.
In polar coordinates, with 
 
 
 
  the radius and 
 
 
 
  the angle, the superformula is:



The formula appeared in a work by Gielis. It was obtained by generalizing the superellipse, named and popularized by Piet Hein, a Danish mathematician.
Extension to higher dimensions
It is possible to extend the formula to 3, 4, or n dimensions, by means of the spherical product of superformulas. For example, the 3D parametric surface is obtained by multiplying two superformulas r1 and r2. The coordinates are defined by the relations:








 
  where 
 
 
 
 
  (latitude) varies between −π/2 and π/2 and θ (longitude) between −π and π.
Plots
(Figure)
Sf2d.png

A GNU Octave program for generating these figures:
  function sf2d(n,a)
     u=[0:.001:2*pi];
     raux=abs(1/a(1).*abs(cos(n(1)*u/4))).^n(3)+abs(1/a(2).*abs(sin(n(1)*u/4))).^n(4);
     r=abs(raux).^(-1/n(2));
     x=r.*cos(u);
     y=r.*sin(u);
     plot(x,y);
   end

 ----
3D superformula: a = b = 1; m, n1, n2 and n3 are shown in the pictures.
Image:Sf3d_3257.svg Image:Sf3d_3.5.5.5.svg Image:Sf3d_3301515.svg Image:Sf3d_7284.svg Image:Sf3d_5111.svg Image:sf3d_4.5.54.svg Image:sf3d_8.5.58.svg Image:Sf3d_4121515.svg
A GNU Octave program for generating these figures:
 function sf3d(n, a)
   u=[-pi:.05:pi];
   v=[-pi/2:.05:pi/2];
   nu=length(u);
   nv=length(v);
     for i=1:nu
     for j=1:nv
       raux1=abs(1/a(1)*abs(cos(n(1).*u(i)/4))).^n(3)+abs(1/a(2)*abs(sin(n(1)*u(i)/4))).^n(4);
       r1=abs(raux1).^(-1/n(2));
       raux2=abs(1/a(1)*abs(cos(n(1)*v(j)/4))).^n(3)+abs(1/a(2)*abs(sin(n(1)*v(j)/4))).^n(4);
       r2=abs(raux2).^(-1/n(2));
       x(i,j)=r1*cos(u(i))*r2*cos(v(j));
       y(i,j)=r1*sin(u(i))*r2*cos(v(j));
       z(i,j)=r2*sin(v(j));
     endfor;
   endfor;
   mesh(x,y,z);
  endfunction;
References



External links

Website with information about the superformula and Johan Gielis
Some Experiments on Fitting of Gielis Curves by Simulated Annealing and Particle Swarm Methods of Global Optimization
Least Squares Fitting of Chacón-Gielis Curves By the Particle Swarm Method of Optimization
Superformula 2D Plotter & SVG Generator
Interactive example using JSXGraph
3D Superdupershape Explorer using Processing
Interactive 3D Superformula plotter using Processing (with code)
SuperShaper: An OpenSource, OpenCL accelerated, interactive 3D SuperShape generator with shader based visualisation (OpenGL3)
[http://www.organicvectory.com/index.php?option=com_wrapper&view;;=wrapper&Itemid;=98 Simpel, WebGL based SuperShape implementation]
The Gielis Supershape Formula, Provides an interactive Java applet for exploring the variety of different shapes, natural or mathematical, that can be formed with the formula.

"
Category:Geometric shapes Category:Curves Category:Surfaces

