


Resolution proof reduction via local context rewriting




Resolution proof reduction via local context rewriting

In proof theory, an area of mathematical logic, resolution proof reduction via local context rewriting is a technique for resolution proof reduction via local context rewriting.1 This proof compression method was presented as an algorithm named ReduceAndReconstruct, that operates as a post-processing of resolution proofs.
ReduceAndReconstruct is based on a set of local proof rewriting rules that transform a subproof into an equivalent or stronger one.2 Each rule is defined to match a specific context.
A context3 involves two pivots (
 
 
 
  and 
 
 
 
 ) and five clauses (
 
 
 
 , 
 
 
 
 , 
 
 
 
 , 
 
 
 
  and 
 
 
 
 ). The structure of a context is shown in (). Note that this implies that 
 
 
 
  is contained in 
 
 
 
  and 
 
 
 
  (with opposite polarity) and 
 
 
 
  is contained in 
 
 
 
  and 
 
 
 
  (also with opposite polarity).
The table below shows the rewriting rules proposed by Simone et al..4 The idea of the algorithm is to reduce proof size by opportunistically applying these rules.




Context

Rule





Case A1
 
 








Case A2
 
 








Case B1
 
 








Case B2
 
 








Case B3
 
 








Case A1'







Case B2'
 
 








The first five rules were introduced in an earlier paper.5 In addition:

Rule A2 does not perform any reduction on its own. However, it is still useful, because of its "shuffling" effect that can create new opportunities for applying the other rules;
Rule A1 is not used in practice, because it may increase proof size;
Rules B1, B2, B2' and B3 are directly responsible for the reduction, as they produce a transformed root clause stronger than the original one;
The application of a B rule may lead to an illegal proof (see the example below), as some literals missing in the transformed root clause may be involved in another resolution step along the path to the proof root. Therefore, the algorithm also has to "reconstruct" a legal proof when this happen.

The following example6 shows a situation where the proof becomes illegal after the application of B2' rule:
{\mathbf{qo}}\, p \qquad \mathbf{p \overline{q}}}{\mathbf{po}}\, q \qquad \cfrac{qr \qquad \overline{p} \overline{q}}{\overline{p} r}\, q}{or}\, p \qquad \overline{o} s}{rs}\, o |2}}
Applying rule B2' to the highlighted context:
}{\mathbf{p}}\, q \qquad \cfrac{qr \qquad \overline{p} \overline{q}}{\overline{p} r}\, q}{or}\, p \qquad \overline{o} s}{rs}\, o |3}}
The proof is now illegal because the literal 
 
 
 
  is missing from the transformed root clause. To reconstruct the proof, one can remove 
 
 
 
  together with the last resolution step (that is now redundant). The final result is the following legal (and stronger) proof:
{p}\, q \qquad \cfrac{qr \qquad \overline{p} \overline{q}}{\overline{p} r}\, q}{r}\, p |4}}
A further reduction of this proof by applying rule A2 to create a new opportunity to apply rule B2'.7
There are usually a huge number of contexts where rule A2 may be applied, so an exhaustive approach is not feasible in general. One proposal8 is to execute ReduceAndReconstruct as a loop with two termination criteria: number of iterations and a timeout (what is reached first). The pseudocode9 below shows this.
 1  function ReduceAndReconstruct(

 /* a proof */, timelimit, maxIterations):
 2      for i = 1 to maxIterations do
 3          ReduceAndReconstructLoop();
 4          if time > timelimit then        // timeout
 5              break;
 6      end for
 7  end function
ReduceAndReconstruct uses the function ReduceAndReconstructLoop, which is specified below. The first part of the algorithm does a topological ordering of the resolution graph (considering that edges goes from antecedentes to resolvents). This is done to ensure that each node is visited after its antecedents (this way, broken resolution steps are always found and fixed).10
 1  function ReduceAndReconstructLoop(

 /* a proof */):
 2      TS = TopologicalSorting(

);
 3      for each node 

 in TS
 4          if 

 is not a leaf
 5              if 

and

 then
 6                  

 = Resolution(

, 

);
 7                  Determine left context of 

, if any;
 8                  Determine right context of 

, if any;
 9                  Heuristically choose one context (if any) and apply the corresponding rule;
10              else if 

and

 then
11                  Substitute 

 with 

;
12              else if 

and

 then
13                  Substitute 

 with 

;
14              else if 

and

 then
15                  Heuristically choose an antecedent 

 or 

;
16                  Substitute 

 with 

 or 

;
17      end for
18  end function
If the input proof is not a tree (in general, resolution graphs are directed acyclic graphs), then the clause 
 
 
 
  of a context may be involved in more than one resolution step. In this case, to ensure that an application of a rewriting rule is not going to interfere with other resolution steps, a safe solution is to create a copy of the node represented by clause 
 
 
 
 .11 This solution increases proof size and some caution is needed when doing this.
The heuristic for rule selection is important to achieve a good compression performance. Simone et al. 12 use the following order of preference for the rules (if applicable to the given context): B2 > B3 > { B2', B1 } > A1' > A2 (X > Y means that X is preferred over Y).
Experiments have shown that ReduceAndReconstruct alone has a worse compression/time ratio than the algorithm RecyclePivots.13 However, while RecyclePivots can be applied only once to a proof, ReduceAndReconstruct may be applied multiple times to produce a better compression. An attempt to combine ReduceAndReconstruct and RecyclePivots algorithms has led to good results.14
Notes
"
Category:Proof theory



Simone, S.F. ; Brutomesso, R. ; Sharygina, N. "An Efficient and Flexible Approach to Resolution Proof Reduction". 6th Haifa Verification Conference, 2010.



Bruttomesso, R. ; Rollini, S. ; Sharygina, N.; Tsitovich, A. "Flexible Interpolation with Local Proof Transformations". The International Conference on Computer-Aided Design, 2010.







Bar-Ilan, O. ; Fuhrmann, O. ; Hoory, S. ; Shacham, O. ; Strichman, O. "Linear-Time Reductions of Resolution Proofs". HVC, 2008.





