   Growing self-organizing map      Growing self-organizing map   A growing self-organizing map (GSOM) is a growing variant of the popular self-organizing map (SOM). The GSOM was developed to address the issue of identifying a suitable map size in the SOM . It starts with a minimal number of nodes (usually 4) and grows new nodes on the boundary based on a heuristic. By using the value called Spread Factor (SF), the data analyst has the ability to control the growth of the GSOM.  All the starting nodes of the GSOM are boundary nodes, i.e. each node has the freedom to grow in its own direction at the beginning. (Fig. 1) New Nodes are grown from the boundary nodes. Once a node is selected for growing all its free neighboring positions will be grown new nodes. The figure shows the three possible node growth options for a rectangular GSOM.  (Figure)  Node growth options in GSOM: (a) one new node, (b) two new nodes and (c) three new nodes.   The algorithm  The GSOM process is as follows:   Initialization phase:  Initialize the weight vectors of the starting nodes (usually four) with random numbers between 0 and 1.  Calculate the growth threshold (    G  T      G  T    GT   ) for the given data set of dimension   D   D   D   according to the spread factor (    S  F      S  F    SF   ) using the formula     G  T   =   -   D  ×   ln   (   S  F   )            G  T       D      S  F        GT=-D\times\ln(SF)      Growing Phase:  Present input to the network.  Determine the weight vector that is closest to the input vector mapped to the current feature map (winner), using Euclidean distance (similar to the SOM ). This step can be summarized as: find    q  ′     superscript  q  normal-′    q^{\prime}   such that     |   v  -   w   q  ′     |   ≤    |   v  -   w  q    |    ∀  q    ∈  ℕ            v   subscript  w   superscript  q  normal-′            v   subscript  w  q      for-all  q         ℕ     \left|v-w_{q^{\prime}}\right|\leq\left|v-w_{q}\right|\forall q\in\mathbb{N}   where   v   v   v   ,   w   w   w   are the input and weight vectors respectively,   q   q   q   is the position vector for nodes and   ℕ   ℕ   \mathbb{N}   is the set of natural numbers.  The weight vector adaptation is applied only to the neighborhood of the winner and the winner itself. The neighborhood is a set of neurons around the winner, but in the GSOM the starting neighborhood selected for weight adaptation is smaller compared to the SOM (localized weight adaptation). The amount of adaptation (learning rate) is also reduced exponentially over the iterations. Even within the neighborhood, weights that are closer to the winner are adapted more than those further away. The weight adaptation can be described by      w  j    (   k  +  1   )    =   {       w  j    (  k  )        if  j   ∉    \Nu    k  +  1            w  j    (  k  )    +    L  R   (  k  )    ×   (    x  k   -    w  j    (  k  )     )         if  j   ∈    \Nu    k  +  1                subscript  w  j     k  1     cases     subscript  w  j   k       if  j    subscript  \Nu    k  1          subscript  w  j   k       L  R  k      subscript  x  k      subscript  w  j   k          if  j    subscript  \Nu    k  1        w_{j}(k+1)=\begin{cases}w_{j}(k)&\mbox{if}j\notin\Nu_{k+1}\\
 w_{j}(k)+LR(k)\times(x_{k}-w_{j}(k))&\mbox{if}j\in\Nu_{k+1}\end{cases}   where the Learning Rate    L  R   (  k  )       L  R  k    LR(k)   ,    k  ∈  ℕ      k  ℕ    k\in\mathbb{N}   is a sequence of positive parameters converging to zero as    k  →  ∞     normal-→  k     k\to\infty   .     w  j    (  k  )        subscript  w  j   k    w_{j}(k)   ,     w  j    (   k  +  1   )        subscript  w  j     k  1     w_{j}(k+1)   are the weight vectors of the node   j   j   j   before and after the adaptation and     \Nu    k  +  1      subscript  \Nu    k  1     \Nu_{k+1}   is the neighbourhood of the winning neuron at the    (   k  +  1   )      k  1    (k+1)   th iteration. The decreasing value of    L  R   (  k  )       L  R  k    LR(k)   in the GSOM depends on the number of nodes existing in the map at time   k   k   k   .  Increase the error value of the winner (error value is the difference between the input vector and the weight vectors).  When     T   E  i    >   G  T         T   subscript  E  i      G  T     TE_{i}>GT   (where    T   E  i       T   subscript  E  i     TE_{i}   is the total error of node   i   i   i   and    G  T      G  T    GT   is the growth threshold). Grow nodes if i is a boundary node. Distribute weights to neighbors if   i   i   i   is a non-boundary node.  Initialize the new node weight vectors to match the neighboring node weights.  Initialize the learning rate (    L  R      L  R    LR   ) to its starting value.  Repeat steps 2 – 7 until all inputs have been presented and node growth is reduced to a minimum level.   Smoothing phase.  Reduce learning rate and fix a small starting neighborhood.  Find winner and adapt the weights of the winner and neighbors in the same way as in growing phase.    (Figure)  Approximation of a spiral with noise by 1D SOM (the upper row) and GSOM (the lower row) with 50 (the first column) and 100 (the second column) nodes. The Fraction of variance unexplained is: a) 4.68% (SOM, 50 nodes); b) 1.69% (SOM, 100 nodes); c) 4.20% (GSOM, 50 nodes); d) 2.32% (GSOM, 100 nodes). The initial approximation for SOM was equidistribution of nodes in a segment on the first principal component with the same variance as for the data set. The initial approximation for GSOM was the mean point. 1   Applications  The GSOM can be used for many preprocessing tasks in Data mining , for Nonlinear dimensionality reduction , for approximation of principal curves and manifolds, for clustering and classification . It gives often the better representation of the data geometry than the SOM (see the classical benchmark for principal curves on the left).  References  Bibliography   Liu, Y., Weisberg, R.H., and He, R. (2006) Sea surface temperature patterns on the West Florida Shelf using growing hierarchical self-organizing maps. Journal of Atmospheric and Oceanic Technology, 23, 325–338. http://dx.doi.org/10.1175/JTECH1848.1  Hsu, A., Tang, S. and Halgamuge, S. K. (2003) An unsupervised hierarchical dynamic self-organizing approach to cancer class discovery and marker gene identification in microarray data. Bioinformatics 19(16): pp 2131-2140  Alahakoon, D., Halgamuge, S. K. and Sirinivasan, B. (2000) Dynamic Self Organizing Maps With Controlled Growth for Knowledge Discovery, IEEE Transactions on Neural Networks, Special Issue on Knowledge Discovery and Data Mining, 11, pp 601-614.  Alahakoon, D., Halgamuge, S. K. and Sirinivasan, B. (1998) A Structure Adapting Feature Map for Optimal Cluster Representation in Proceedings of The 5th International Conference on Neural Information Processing (ICONIP 98), Kitakyushu, Japan, pp 809-812  Alahakoon, D., Halgamuge, S. K. and Sirinivasan, B. (1998) A Self Growing Cluster Development Approach to Data Mining in Proceedings of IEEE International Conference on Systems, Man and Cybernetics, San Diego, USA, pp 2901-2906  Alahakoon, D. and Halgamuge, S. K. (1998) Knowledge Discovery with Supervised and Unsupervised Self Evolving Neural Networks in Proceedings of 5th International Conference on Soft Computing and Information/Intelligent Systems, Fukuoka, Japan, pp 907-910   See also   Self-organizing map  Time Adaptive Self-Organizing Map  Elastic map  Artificial intelligence  Machine learning  Data mining  Nonlinear dimensionality reduction   "  Category:Machine learning algorithms  Category:Artificial neural networks     The illustration is prepared using free software: E.M. Mirkes, Principal Component Analysis and Self-Organizing Maps: applet . University of Leicester, 2011. ↩     