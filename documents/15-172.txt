   Kinetic sorted list      Kinetic sorted list   A kinetic sorted list is a kinetic data structure for maintaining a list of points under motion in sorted order. It is used as a kinetic predecessor data structure, and as a component in more complex kinetic data structures such as kinetic closest pair .  Implementation  This data structure maintains a list of the elements in sorted order, with the certificates enforcing the order between adjacent elements. When a certificate fails, the concerned elements are swapped. Then at most three certificates must be updated, the certificate of the swapped pair, and the two certificates involving the swapped elements and the elements of the sorted list which directly precede and follow the swapped pair.  For example, given a sorted list {A,B,C,D,E,F}, the certificates will be [A [[kinetic="" (which="" *="" 2="" ="" structure#performance|local]]: ="" structure#performance|responsive]]: ="" swap="" take="" takes="" the="" there="" time="" time)="" to="" updated="" which="" will="" with="" {a,b,d,c,e,f},="">  certificates for a list of elements   Efficient : this data structure causes no extraneous internal events , every change in the ordering of the elements causes exactly one certificate failure.   Generalization  This data structure can be generalized to a kinetic data structure which can return a sorted list of points in    O   (   n   log  m    )       O    n    m      O(n\log m)   time and processes    O   (    n  2   m   )       O     superscript  n  2   m     O(\frac{n^{2}}{m})   events total, assuming pseudo algebraic trajectories, where   m   m   m   is a parameter of the data structure. Thus, a maintenance-time versus query-time tradeoff can be made to tune to specific applications.  In the generalized data structure, the points are partitioned arbitrarily into m subsets of size    O   (   n  m   )       O    n  m     O(\frac{n}{m})   , and kinetic sorted lists are maintained on the subsets. Each sorted sublist needs to process    O   (    n  2    m  2    )       O     superscript  n  2    superscript  m  2      O(\frac{n^{2}}{m^{2}})   events (certificate failures) maximum, since there are    O   (  1  )       O  1    O(1)   swaps of each of the    O   (    n  2    m  2    )       O     superscript  n  2    superscript  m  2      O(\frac{n^{2}}{m^{2}})   pairs of elements. Thus the total time required to maintain the data structure is    O   (    n  2   m   )       O     superscript  n  2   m     O(\frac{n^{2}}{m})   . Requests for the sorted list can then be answered in    O   (   n   log  m    )       O    n    m      O(n\log m)   by merging the sorted sublists with mergesort .  References  Abam, M.A., De Berg, M. Kinetic sorting and kinetic convex hulls (2007) Computational Geometry: Theory and Applications, 37 (1 SPEC. ISS.), pp. 16-26. doi: 10.1016/j.comgeo.2006.02.004 1  "  Category:Articles created via the Article Wizard  Category:Kinetic data structures   