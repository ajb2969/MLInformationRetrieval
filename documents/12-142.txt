   Boneh‚ÄìFranklin scheme      Boneh‚ÄìFranklin scheme   The Boneh/Franklin scheme is an Identity based encryption system proposed by Dan Boneh and Matthew K. Franklin in 2001. 1 This article refers to the protocol version called BasicIdent . It is an application of pairings ( Weil pairing ) over elliptic curves and finite fields .  Groups and parameters  As the scheme bases upon pairings , all computations are performed in two groups    G  1     subscript  G  1    \textstyle G_{1}   and    G  2     subscript  G  2    \textstyle G_{2}   :  For    G  1     subscript  G  1    \textstyle G_{1}   , let   p   p   \textstyle p   be prime,    p  ‚â°   2  mod  3       p   modulo  2  3     \textstyle p\equiv 2\mod 3   and consider the elliptic curve     E  :    y  2   =    x  3   +  1       normal-:  E     superscript  y  2      superscript  x  3   1      \textstyle E:y^{2}=x^{3}+1   over     ‚Ñ§  /  p   ‚Ñ§        ‚Ñ§  p   ‚Ñ§    \textstyle\mathbb{Z}/p\mathbb{Z}   . Note that this curve is not singular as      4   a  3    +   27   b  2     =  27  =   3  3             4   superscript  a  3      27   superscript  b  2     27        superscript  3  3      \textstyle 4a^{3}+27b^{2}=27=3^{3}   only equals   0   0   \textstyle 0   for the case    p  =  3      p  3    \textstyle p=3   which is excluded by the additional constraint.  Let    q  >  3      q  3    \textstyle q>3   be a prime factor of    p  +  1      p  1    \textstyle p+1   (which is the order of   E   E   \textstyle E   ) and find a point    P  ‚àà  E      P  E    \textstyle P\in E   of order   q   q   \textstyle q   .    G  1     subscript  G  1    \textstyle G_{1}   is the set of points generated by   P   P   \textstyle P       {   n  P   ‚à•   n  ‚àà   {  0  ,  ‚Ä¶  ,   q  -  1   }    }     conditional-set    n  P     n   0  normal-‚Ä¶    q  1       \textstyle\left\{nP\|n\in\left\{0,\ldots,q-1\right\}\right\}       G  2     subscript  G  2    \textstyle G_{2}   is the subgroup of order   q   q   \textstyle q   of    G  F    (   p  2   )   *       G  F   superscript   superscript  p  2       \textstyle GF\left(p^{2}\right)^{*}   . We do not need to construct this group explicitly (this is done by the pairing) and thus don't have to find a generator.  Protocol description  Setup  The Private Key Generator (PKG) chooses:   the public groups    G  1     subscript  G  1    \textstyle G_{1}   (with generator   P   P   \textstyle P   ) and    G  2     subscript  G  2    \textstyle G_{2}   as stated above, with the size of   q   q   \textstyle q   depending on security parameter   k   k   \textstyle k   ,  the corresponding pairing   e   e   \textstyle e   ,  a random private master-key     K  m   =  s  ‚àà   ‚Ñ§  q  *          subscript  K  m   s        superscript   subscript  ‚Ñ§  q        \textstyle K_{m}=s\in\mathbb{Z}_{q}^{*}   ,  a public key     K   p  u  b    =   s  P        subscript  K    p  u  b      s  P     \textstyle K_{pub}=sP   ,  a public hash function     H  1   :     {  0  ,  1  }   *   ‚Üí   G  1  *       normal-:   subscript  H  1    normal-‚Üí   superscript   0  1      superscript   subscript  G  1        \textstyle H_{1}:\left\{0,1\right\}^{*}\rightarrow G_{1}^{*}   ,  a public hash function     H  2   :    G  2   ‚Üí    {  0  ,  1  }   n       normal-:   subscript  H  2    normal-‚Üí   subscript  G  2    superscript   0  1   n      \textstyle H_{2}:G_{2}\rightarrow\left\{0,1\right\}^{n}   for some fixed   n   n   \textstyle n   and  the message space and the cipher space      ‚Ñ≥  =    {  0  ,  1  }   n    ,   ùíû  =    G  1  *   √ó    {  0  ,  1  }   n        formulae-sequence    ‚Ñ≥   superscript   0  1   n      ùíû     superscript   subscript  G  1      superscript   0  1   n       \textstyle\mathcal{M}=\left\{0,1\right\}^{n},\mathcal{C}=G_{1}^{*}\times\left%
 \{0,1\right\}^{n}      Extract  To create the public key for     I  D   ‚àà    {  0  ,  1  }   *         I  D    superscript   0  1       \textstyle ID\in\left\{0,1\right\}^{*}   , the PKG computes        Q   I  D    =    H  1    (   I  D   )         subscript  Q    I  D       subscript  H  1     I  D      \textstyle Q_{ID}=H_{1}\left(ID\right)   and  the private key     d   I  D    =   s   Q   I  D          subscript  d    I  D      s   subscript  Q    I  D       \textstyle d_{ID}=sQ_{ID}   which is given to the user.   Encrypt  Given    m  ‚àà  ‚Ñ≥      m  ‚Ñ≥    \textstyle m\in\mathcal{M}   , the ciphertext   c   c   \textstyle c   is obtained as follows:        Q   I  D    =    H  1    (   I  D   )    ‚àà   G  1  *          subscript  Q    I  D       subscript  H  1     I  D          superscript   subscript  G  1        \textstyle Q_{ID}=H_{1}\left(ID\right)\in G_{1}^{*}   ,  choose random    r  ‚àà   ‚Ñ§  q  *       r   superscript   subscript  ‚Ñ§  q       \textstyle r\in\mathbb{Z}_{q}^{*}   ,  compute     g   I  D    =   e   (   Q   I  D    ,   K   p  u  b    )    ‚àà   G  2          subscript  g    I  D      e    subscript  Q    I  D     subscript  K    p  u  b            subscript  G  2      \textstyle g_{ID}=e\left(Q_{ID},K_{pub}\right)\in G_{2}   and  set    c  =   (   r  P   ,   m  ‚äï    H  2    (   g   I  D   r   )     )       c     r  P    direct-sum  m     subscript  H  2    superscript   subscript  g    I  D    r        \textstyle c=\left(rP,m\oplus H_{2}\left(g_{ID}^{r}\right)\right)   .   Note that    K   p  u  b      subscript  K    p  u  b     \textstyle K_{pub}   is the PKG's public key and thus independent of the recipient's ID.  Decrypt  Given    c  =   (  u  ,  v  )   ‚àà  ùíû        c   u  v        ùíû     \textstyle c=\left(u,v\right)\in\mathcal{C}   , the plaintext can be retrieved using the private key:      m  =   v  ‚äï    H  2    (   e   (   d   I  D    ,  u  )    )         m   direct-sum  v     subscript  H  2     e    subscript  d    I  D    u        \textstyle m=v\oplus H_{2}\left(e\left(d_{ID},u\right)\right)     Correctness  The primary step in both en- and decryption is to employ the pairing and    H  2     subscript  H  2    \textstyle H_{2}   to generate a mask (like a symmetric key) that is xor'ed with the plaintext. So in order to verify correctness of the protocol, one has to verify that an honest sender and recipient end up with the same values here.  The encrypting entity uses     H  2    (   g   I  D   r   )        subscript  H  2    superscript   subscript  g    I  D    r     \textstyle H_{2}\left(g_{ID}^{r}\right)   , while for decryption,     H  2    (   e   (   d   I  D    ,  u  )    )        subscript  H  2     e    subscript  d    I  D    u      \textstyle H_{2}\left(e\left(d_{ID},u\right)\right)   is applied. Due to the properties of pairings, it follows that:          H  2    (   e   (   d   I  D    ,  u  )    )        =    H  2    (   e   (   s   Q   I  D     ,   r  P   )    )            =    H  2    (   e    (   Q   I  D    ,  P  )    r  s     )            =    H  2    (   e    (   Q   I  D    ,   s  P   )   r    )            =    H  2    (   e    (   Q   I  D    ,   K   p  u  b    )   r    )            =    H  2    (   g   I  D   r   )              subscript  H  2     e    subscript  d    I  D    u       absent     subscript  H  2     e     s   subscript  Q    I  D       r  P          missing-subexpression     absent     subscript  H  2     e   superscript    subscript  Q    I  D    P     r  s          missing-subexpression     absent     subscript  H  2     e   superscript    subscript  Q    I  D      s  P    r         missing-subexpression     absent     subscript  H  2     e   superscript    subscript  Q    I  D     subscript  K    p  u  b     r         missing-subexpression     absent     subscript  H  2    superscript   subscript  g    I  D    r        \begin{aligned}\displaystyle H_{2}\left(e\left(d_{ID},u\right)\right)&%
 \displaystyle=H_{2}\left(e\left(sQ_{ID},rP\right)\right)\\
 &\displaystyle=H_{2}\left(e\left(Q_{ID},P\right)^{rs}\right)\\
 &\displaystyle=H_{2}\left(e\left(Q_{ID},sP\right)^{r}\right)\\
 &\displaystyle=H_{2}\left(e\left(Q_{ID},K_{pub}\right)^{r}\right)\\
 &\displaystyle=H_{2}\left(g_{ID}^{r}\right)\\
 \end{aligned}     Security  The security of the scheme depends on the hardness of the Bilinear Diffie-Hellman Problem (BDH) for the groups used. It has been proved that in a random-oracle model , the protocol is semantically secure under the BDH assumption.  Improvements  BasicIdent is not chosen ciphertext secure . However, there is a universal transformation method due to Fujisaki and Okamoto that allows for conversion to a scheme having this property called FullIdent .  References    External links   Seminar 'Cryptography and Security in Banking'/'Alternative Cryptology', Ruhr University Bochum  P(airing) B(ased) C(ryptography) library, designed by Ben Lynn et al.   "  Category:Public-key encryption schemes  Category:Pairing-based cryptography  Category:Identity-based cryptography  Category:Elliptic curve cryptography     Dan Boneh, Matthew K. Franklin, Identity-Based Encryption from the Weil Pairing Advances in Cryptology - Proceedings of CRYPTO 2001 (2001) ‚Ü©     