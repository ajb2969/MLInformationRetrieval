   Password Authenticated Key Exchange by Juggling      Password Authenticated Key Exchange by Juggling   The Password Authenticated Key Exchange by Juggling (or J-PAKE) is a password-authenticated key agreement protocol. 1 This protocol allows two parties to establish private and authenticated communication solely based on their shared (low-entropy) password without requiring a Public Key Infrastructure . It provides mutual authentication to the key exchange, a feature that is lacking in the Diffie-Hellman key exchange protocol.  Description  Two parties, Alice and Bob, agree on a group   G   G   G   with generator   g   g   g   of prime order   q   q   q   in which the discrete log problem is hard. Typically a Schnorr group is used. In general, J-PAKE can use any prime order group that is suitable for public key cryptography, including Elliptic curve cryptography . Let   s   s   s   be their shared (low-entropy) secret, which can be a password or a hash of a password (    s  ≠  0      s  0    s\neq 0   ). The protocol executes in two rounds.   Round 1: Alice selects     x  1    ∈  R    [  0  ,   q  -  1   ]       subscript   R    subscript  x  1    0    q  1      x_{1}\in_{R}[0,q-1]   ,     x  2    ∈  R    (  0  ,   q  -  1   ]       subscript   R    subscript  x  2    0    q  1      x_{2}\in_{R}(0,q-1]   and sends out    g   x  1      superscript  g   subscript  x  1     g^{x_{1}}   ,    g   x  2      superscript  g   subscript  x  2     g^{x_{2}}   together with the Zero-knowledge proofs (using for example Schnorr signature ) for the proof of the exponents    x  1     subscript  x  1    x_{1}   and    x  2     subscript  x  2    x_{2}   . Similarly, Bob selects     x  3    ∈  R    [  0  ,   q  -  1   ]       subscript   R    subscript  x  3    0    q  1      x_{3}\in_{R}[0,q-1]   ,     x  4    ∈  R    (  0  ,   q  -  1   ]       subscript   R    subscript  x  4    0    q  1      x_{4}\in_{R}(0,q-1]   and sends out    g   x  3      superscript  g   subscript  x  3     g^{x_{3}}   ,    g   x  4      superscript  g   subscript  x  4     g^{x_{4}}   together with the Zero-knowledge proofs for the proof of the exponents    x  3     subscript  x  3    x_{3}   and    x  4     subscript  x  4    x_{4}   . The above communication can be completed in one round as neither party depends on the other. When it finishes, Alice and Bob verify the received Zero-knowledge proofs and also check      g   x  2    ,   g   x  4     ≠  1        superscript  g   subscript  x  2     superscript  g   subscript  x  4     1    g^{x_{2}},g^{x_{4}}\neq 1   .    Round 2: Alice sends out    A  =   g    (    x  1   +   x  3   +   x  4    )    x  2   s        A   superscript  g       subscript  x  1    subscript  x  3    subscript  x  4     subscript  x  2   s      A=g^{(x_{1}+x_{3}+x_{4})x_{2}s}   and a Zero-knowledge proof for the proof of the exponent     x  2   s       subscript  x  2   s    x_{2}s   . (Note Alice actually derives a new public key using    g    x  1   +   x  3   +   x  4       superscript  g     subscript  x  1    subscript  x  3    subscript  x  4      g^{x_{1}+x_{3}+x_{4}}   as the generator). Similarly, Bob sends out    B  =   g    (    x  1   +   x  2   +   x  3    )    x  4   s        B   superscript  g       subscript  x  1    subscript  x  2    subscript  x  3     subscript  x  4   s      B=g^{(x_{1}+x_{2}+x_{3})x_{4}s}   and a Zero-knowledge proof for the proof of the exponent     x  4   s       subscript  x  4   s    x_{4}s   .   After Round 2, Alice computes    K  =    (   B  /   g    x  2    x  4   s     )    x  2    =   g    (    x  1   +   x  3    )    x  2    x  4   s          K   superscript    B   superscript  g     subscript  x  2    subscript  x  4   s      subscript  x  2          superscript  g       subscript  x  1    subscript  x  3     subscript  x  2    subscript  x  4   s       K=(B/g^{x_{2}x_{4}s})^{x_{2}}=g^{(x_{1}+x_{3})x_{2}x_{4}s}   . Similarly, Bob computes    K  =    (   A  /   g    x  2    x  4   s     )    x  4    =   g    (    x  1   +   x  3    )    x  2    x  4   s          K   superscript    A   superscript  g     subscript  x  2    subscript  x  4   s      subscript  x  4          superscript  g       subscript  x  1    subscript  x  3     subscript  x  2    subscript  x  4   s       K=(A/g^{x_{2}x_{4}s})^{x_{4}}=g^{(x_{1}+x_{3})x_{2}x_{4}s}   . With the same keying material   K   K   K   , Alice and Bob can derive a session key using a Cryptographic hash function     κ  =   H   (  K  )        κ    H  K     \kappa=H(K)   .  The two-round J-PAKE protocol is completely symmetric. This helps significantly simplify the security analysis. For example, the proof that one party does not leak any password information in the data exchange must hold true for the other party based on the symmetry. This reduces the number of the needed security proofs by half.  In practice, it is more likely to implement J-PAKE in three flows since one party shall normally take the initiative. This can be done trivially without loss of security. Suppose Alice initiates the communication by sending to Bob     g   x  1    ,   g   x  2        superscript  g   subscript  x  1     superscript  g   subscript  x  2      g^{x_{1}},g^{x_{2}}   and Zero-knowledge proofs. Then Bob replies with      g   x  3    ,   g   x  4    ,  B   =   g    (    x  1   +   x  2   +   x  3    )    x  4   s          superscript  g   subscript  x  3     superscript  g   subscript  x  4    B    superscript  g       subscript  x  1    subscript  x  2    subscript  x  3     subscript  x  4   s      g^{x_{3}},g^{x_{4}},B=g^{(x_{1}+x_{2}+x_{3})x_{4}s}   and Zero-knowledge proofs. Finally, Alice sends to Bob    A  =   g    (    x  1   +   x  3   +   x  4    )    x  2   s        A   superscript  g       subscript  x  1    subscript  x  3    subscript  x  4     subscript  x  2   s      A=g^{(x_{1}+x_{3}+x_{4})x_{2}s}   and a Zero-knowledge proof. Both parties can now derive the same session key.  Depending on the application requirement, Alice and Bob may perform an optional key confirmation step. There are several ways to do it. A simple method described in SPEKE works as follows: Alice sends to Bob    H   (   H   (  κ  )    )       H    H  κ     H(H(\kappa))   , and then Bob replies with    H   (  κ  )       H  κ    H(\kappa)   . 2 Alternatively, Alice and Bob can realize explicit key confirmation by using the newly constructed session key to encrypt a known value (or a random challenge). EKE , Kerberos and Needham-Schroeder all attempt to provide explicit key confirmation by exactly this method.  Security properties  The J-PAKE protocol claims to provide the following properties: 3   Off-line dictionary attack resistance - It does not leak any password verification information to a passive/active attacker.  Forward secrecy - It produces session keys that remain secure even when the password is later disclosed.  Known-key security - It prevents a disclosed session key from affecting the security of other sessions.  On-line dictionary attack resistance - It limits an active attacker to test only one password per protocol execution.   Since 2015, J-PAKE has a formal security proof. 4  The protocol design  The J-PAKE protocol is designed by combining random public keys in such a structured way to achieve a vanishing effect if both parties supplied exactly the same passwords. This is somehow similar to the Anonymous veto network protocol design. The essence of the idea, however, can be traced back to David Chaum 's original Dining Cryptographers network protocol, 5 where binary bits are combined in a structured way to achieve a vanishing effect.  The implementation  J-PAKE has been implemented in OpenSSL and OpenSSH as an experimental authentication protocol. It was removed from the OpenSSH source code at the end of January 2014. 6 It has also been implemented in NSS and is used by Firefox Sync . Since February 2013, J-PAKE has been added to the lightweight API in Bouncycastle (1.48 and onwards).  References  External links   J-PAKE draft  A prototype demo of J-PAKE in C  A prototype demo of J-PAKE in Java  An example of implementing J-PAKE using Elliptic Curve  J-PAKE: From Dining Cryptographers to Jugglers   "  Category:Cryptography  Category:Cryptographic protocols     F. Hao, P. Ryan. Password Authenticated Key Exchange by Juggling . ''Proceedings of the 16th International Workshop on Security Protocols, 2008. ↩  ↩  F. Hao, P. Ryan. J-PAKE: Authenticated Key Exchange Without PKI . ''Springer Transactions on Computational Science XI, Special Issue on Security in Computing, Part II, Vol. 6480, pp. 192-206, 2010. ↩  M. Abdalla, F. Benhamouda, P. MacKenzie Security of the J-PAKE Password-Authenticated Key Exchange Protocol . ↩  David Chaum. The Dining Cryptographers Problem: Unconditional Sender and Recipient Untraceability Journal of Cryptology, vol. 1, No, 1, pp. 65-75, 1988 ↩  OpenBSD CVS log for src/usr.bin/ssh/Attic/jpake.c ↩     