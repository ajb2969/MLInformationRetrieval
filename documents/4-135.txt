   Polynomial hierarchy      Polynomial hierarchy   In computational complexity theory , the polynomial hierarchy (sometimes called the polynomial-time hierarchy ) is a hierarchy of complexity classes that generalize the classes P , NP and co-NP to oracle machines . It is a resource-bounded counterpart to the arithmetical hierarchy and analytical hierarchy from mathematical logic .  Definitions  There are multiple equivalent definitions of the classes of the polynomial hierarchy.        Σ   i  +  1   P   :=   NP   Σ  i  P       assign   superscript   subscript  normal-Σ    i  1    normal-P    superscript  NP   superscript   subscript  normal-Σ  i   normal-P      \Sigma_{i+1}^{\rm P}:=\mbox{NP}^{\Sigma_{i}^{\rm P}}          Π   i  +  1   P   :=   coNP   Σ  i  P       assign   superscript   subscript  normal-Π    i  1    normal-P    superscript  coNP   superscript   subscript  normal-Σ  i   normal-P      \Pi_{i+1}^{\rm P}:=\mbox{coNP}^{\Sigma_{i}^{\rm P}}     where A B is the set of decision problems solvable by a Turing machine in class A augmented by an oracle for some complete problem in class B. For example,      Σ  1  P   =  NP   ,    Π  1  P   =  coNP      formulae-sequence     superscript   subscript  normal-Σ  1   normal-P   NP      superscript   subscript  normal-Π  1   normal-P   coNP     \Sigma_{1}^{\rm P}={\rm NP},\Pi_{1}^{\rm P}={\rm coNP}   , and     Δ  2  P   =   P  NP        superscript   subscript  normal-Δ  2   normal-P    superscript  normal-P  NP     \Delta_{2}^{\rm P}={\rm P^{NP}}   is the class of problems solvable in polynomial time with an oracle for some NP-complete problem.  |2= For the existential/universal definition of the polynomial hierarchy, let   L   L   L   be a language (i.e. a decision problem , a subset of {0,1} * ), let   p   p   p   be a polynomial , and define       ∃  p   L  :=   {  x  ∈     {  0  ,  1  }   *    |   (  ∃  w  ∈    {  0  ,  1  }     ≤   p   (   |  x  |   )      )    ⟨  x  ,  w  ⟩   ∈  L  }   ,     fragments   superscript   p   L  assign   fragments  normal-{  x    superscript   fragments  normal-{  0  normal-,  1  normal-}     normal-|   fragments  normal-(   w    superscript   fragments  normal-{  0  normal-,  1  normal-}     absent    p    x      normal-)    fragments  normal-⟨  x  normal-,  w  normal-⟩    L  normal-}   normal-,    \exists^{p}L:=\left\{x\in\{0,1\}^{*}\ \left|\ \left(\exists w\in\{0,1\}^{\leq p%
 (|x|)}\right)\langle x,w\rangle\in L\right.\right\},     where     ⟨  x  ,  w  ⟩   ∈    {  0  ,  1  }   *        x  w    superscript   0  1       \langle x,w\rangle\in\{0,1\}^{*}   is some standard encoding of the pair of binary strings x and w as a single binary string. L represents a set of ordered pairs of strings, where the first string x is a member of     ∃  p   L      superscript   p   L    \exists^{p}L   , and the second string w is a "short" (     |  w  |   ≤   p   (   |  x  |   )          w     p    x      |w|\leq p(|x|)   ) witness testifying that x is a member of     ∃  p   L      superscript   p   L    \exists^{p}L   . In other words,    x  ∈    ∃  p   L       x    superscript   p   L     x\in\exists^{p}L   if and only if there exists a short witness w such that     ⟨  x  ,  w  ⟩   ∈  L       x  w   L    \langle x,w\rangle\in L   . Similarly, define       ∀  p   L  :=   {  x  ∈     {  0  ,  1  }   *    |   (  ∀  w  ∈    {  0  ,  1  }     ≤   p   (   |  x  |   )      )    ⟨  x  ,  w  ⟩   ∈  L  }      fragments   superscript  for-all  p   L  assign   fragments  normal-{  x    superscript   fragments  normal-{  0  normal-,  1  normal-}     normal-|   fragments  normal-(  for-all  w    superscript   fragments  normal-{  0  normal-,  1  normal-}     absent    p    x      normal-)    fragments  normal-⟨  x  normal-,  w  normal-⟩    L  normal-}     \forall^{p}L:=\left\{x\in\{0,1\}^{*}\ \left|\ \left(\forall w\in\{0,1\}^{\leq p%
 (|x|)}\right)\langle x,w\rangle\in L\right.\right\}   Note that De Morgan's Laws hold      (    ∃  p   L   )   c   =    ∀  p    L  c         superscript    superscript   p   L   normal-c     superscript  for-all  p    superscript  L  normal-c      \left(\exists^{p}L\right)^{\rm c}=\forall^{p}L^{\rm c}   and      (    ∀  p   L   )   c   =    ∃  p    L  c         superscript    superscript  for-all  p   L   normal-c     superscript   p    superscript  L  normal-c      \left(\forall^{p}L\right)^{\rm c}=\exists^{p}L^{\rm c}   , where L c is the complement of L .  Let   𝒞   𝒞   \mathcal{C}   be a class of languages. Extend these operators to work on whole classes of languages by the definition        ∃  P   𝒞   :=   {    ∃  p    L    |    p  is a polynomial and  L   ∈  𝒞   }      assign    superscript   normal-P   𝒞    conditional-set    superscript   p   L       p  is a polynomial and  L   𝒞      \exists^{\rm P}\mathcal{C}:=\left\{\exists^{p}L\ |\ p\mbox{ is a polynomial %
 and }L\in\mathcal{C}\right\}           ∀  P   𝒞   :=   {    ∀  p    L    |    p  is a polynomial and  L   ∈  𝒞   }      assign    superscript  for-all  normal-P   𝒞    conditional-set    superscript  for-all  p   L       p  is a polynomial and  L   𝒞      \forall^{\rm P}\mathcal{C}:=\left\{\forall^{p}L\ |\ p\mbox{ is a polynomial %
 and }L\in\mathcal{C}\right\}     Again, De Morgan's Laws hold     co    ∃  P   𝒞    =    ∀  P    co  𝒞          co    superscript   normal-P   𝒞      superscript  for-all  normal-P     co  𝒞      {\rm co}\exists^{\rm P}\mathcal{C}=\forall^{\rm P}{\rm co}\mathcal{C}   and     co    ∀  P   𝒞    =    ∃  P    co  𝒞          co    superscript  for-all  normal-P   𝒞      superscript   normal-P     co  𝒞      {\rm co}\forall^{\rm P}\mathcal{C}=\exists^{\rm P}{\rm co}\mathcal{C}   , where     co  𝒞   =   {   L  c   |   L  ∈  𝒞   }         co  𝒞    conditional-set   superscript  L  c     L  𝒞      {\rm co}\mathcal{C}=\left\{L^{c}|L\in\mathcal{C}\right\}   .  The classes NP and co-NP can be defined as    NP  =    ∃  P   P       NP    superscript   normal-P   normal-P     {\rm NP}=\exists^{\rm P}{\rm P}   , and    coNP  =    ∀  P   P       coNP    superscript  for-all  normal-P   normal-P     {\rm coNP}=\forall^{\rm P}{\rm P}   , where P is the class of all feasibly (polynomial-time) decidable languages. The polynomial hierarchy can be defined recursively as       Σ  0  P   :=   Π  0  P   :=  P       assign   superscript   subscript  normal-Σ  0   normal-P    superscript   subscript  normal-Π  0   normal-P     assign    normal-P     \Sigma_{0}^{\rm P}:=\Pi_{0}^{\rm P}:={\rm P}          Σ   k  +  1   P   :=    ∃  P    Π  k  P       assign   superscript   subscript  normal-Σ    k  1    normal-P     superscript   normal-P    superscript   subscript  normal-Π  k   normal-P      \Sigma_{k+1}^{\rm P}:=\exists^{\rm P}\Pi_{k}^{\rm P}          Π   k  +  1   P   :=    ∀  P    Σ  k  P       assign   superscript   subscript  normal-Π    k  1    normal-P     superscript  for-all  normal-P    superscript   subscript  normal-Σ  k   normal-P      \Pi_{k+1}^{\rm P}:=\forall^{\rm P}\Sigma_{k}^{\rm P}     Note that    NP  =   Σ  1  P       NP   superscript   subscript  normal-Σ  1   normal-P     {\rm NP}=\Sigma_{1}^{\rm P}   , and    coNP  =   Π  1  P       coNP   superscript   subscript  normal-Π  1   normal-P     {\rm coNP}=\Pi_{1}^{\rm P}   .  This definition reflects the close connection between the polynomial hierarchy and the arithmetical hierarchy , where R and RE play roles analogous to P and NP , respectively. The analytic hierarchy is also defined in a similar way to give a hierarchy of subsets of the real numbers.  |3=An equivalent definition in terms of alternating Turing machines defines    Σ  k  P     superscript   subscript  normal-Σ  k   normal-P    \Sigma_{k}^{\rm P}   (respectively,    Π  k  P     superscript   subscript  normal-Π  k   normal-P    \Pi_{k}^{\rm P}   ) as the set of decision problems solvable in polynomial time on an alternating Turing machine with   k   k   k   alternations starting in an existential (respectively, universal) state.  }}  Relations between classes in the polynomial hierarchy  The definitions imply the relations:       Σ  i  P   ⊆   Δ   i  +  1   P   ⊆   Σ   i  +  1   P          superscript   subscript  normal-Σ  i   normal-P    superscript   subscript  normal-Δ    i  1    normal-P         superscript   subscript  normal-Σ    i  1    normal-P      \Sigma_{i}^{\rm P}\subseteq\Delta_{i+1}^{\rm P}\subseteq\Sigma_{i+1}^{\rm P}          Π  i  P   ⊆   Δ   i  +  1   P   ⊆   Π   i  +  1   P          superscript   subscript  normal-Π  i   normal-P    superscript   subscript  normal-Δ    i  1    normal-P         superscript   subscript  normal-Π    i  1    normal-P      \Pi_{i}^{\rm P}\subseteq\Delta_{i+1}^{\rm P}\subseteq\Pi_{i+1}^{\rm P}          Σ  i  P   =   co   Π  i  P         superscript   subscript  normal-Σ  i   normal-P     co   superscript   subscript  normal-Π  i   normal-P      \Sigma_{i}^{\rm P}={\rm co}\Pi_{i}^{\rm P}     Unlike the arithmetic and analytic hierarchies, whose inclusions are known to be proper, it is an open question whether any of these inclusions are proper, though it is widely believed that they all are. If any     Σ  k  P   =   Σ   k  +  1   P        superscript   subscript  normal-Σ  k   normal-P    superscript   subscript  normal-Σ    k  1    normal-P     \Sigma_{k}^{\rm P}=\Sigma_{k+1}^{\rm P}   , or if any     Σ  k  P   =   Π  k  P        superscript   subscript  normal-Σ  k   normal-P    superscript   subscript  normal-Π  k   normal-P     \Sigma_{k}^{\rm P}=\Pi_{k}^{\rm P}   , then the hierarchy collapses to level k : for all    i  >  k      i  k    i>k   ,     Σ  i  P   =   Σ  k  P        superscript   subscript  normal-Σ  i   normal-P    superscript   subscript  normal-Σ  k   normal-P     \Sigma_{i}^{\rm P}=\Sigma_{k}^{\rm P}   . In particular, if P = NP, then the hierarchy collapses completely.  The union of all classes in the polynomial hierarchy is the complexity class PH .  Properties  The polynomial hierarchy is an analogue (at much lower complexity) of the exponential hierarchy and arithmetical hierarchy .  It is known that PH is contained within PSPACE , but it is not known whether the two classes are equal. One useful reformulation of this problem is that PH = PSPACE if and only if second-order logic over finite structures gains no additional power from the addition of a transitive closure operator.  If the polynomial hierarchy has any complete problems , then it has only finitely many distinct levels. Since there are PSPACE-complete problems, we know that if PSPACE = PH, then the polynomial hierarchy must collapse, since a PSPACE-complete problem would be a    Σ  k  P     superscript   subscript  normal-Σ  k   normal-P    \Sigma_{k}^{\rm P}   -complete problem for some k .  Each class in the polynomial hierarchy contains    ≤  m  P     superscript   subscript   normal-m   normal-P    \leq_{\rm m}^{\rm P}   -complete problems (problems complete under polynomial-time many-one reductions). Furthermore, each class in the polynomial hierarchy is closed under    ≤  m  P     superscript   subscript   normal-m   normal-P    \leq_{\rm m}^{\rm P}   -reductions : meaning that for a class   𝒞   𝒞   \mathcal{C}   in the hierarchy and a language    L  ∈  𝒞      L  𝒞    L\in\mathcal{C}   , if    A   ≤  m  P   L      superscript   subscript   normal-m   normal-P   A  L    A\leq_{\rm m}^{\rm P}L   , then    A  ∈  𝒞      A  𝒞    A\in\mathcal{C}   as well. These two facts together imply that if    K  i     subscript  K  i    K_{i}   is a complete problem for    Σ  i  P     superscript   subscript  normal-Σ  i   normal-P    \Sigma_{i}^{\rm P}   , then     Σ   i  +  1   P   =    (   Σ  i  P   )    K  i         superscript   subscript  normal-Σ    i  1    normal-P    superscript   superscript   subscript  normal-Σ  i   normal-P    subscript  K  i      \Sigma_{i+1}^{\rm P}=\left(\Sigma_{i}^{\rm P}\right)^{K_{i}}   , and     Π   i  +  1   P   =    (   Π  i  P   )    K  i  c         superscript   subscript  normal-Π    i  1    normal-P    superscript   superscript   subscript  normal-Π  i   normal-P    superscript   subscript  K  i   normal-c      \Pi_{i+1}^{\rm P}=\left(\Pi_{i}^{\rm P}\right)^{K_{i}^{\rm c}}   . For instance,     Σ  2  P   =   NP  SAT        superscript   subscript  normal-Σ  2   normal-P    superscript  NP  SAT     \Sigma_{2}^{\rm P}={\rm NP}^{\rm SAT}   . In other words, if a language is defined based on some oracle in   𝒞   𝒞   \mathcal{C}   , then we can assume that it is defined based on a complete problem for   𝒞   𝒞   \mathcal{C}   . Complete problems therefore act as "representatives" of the class for which they are complete.  Sipser–Lautemann theorem states that the class BPP is contained in second level of polynomial hierarchy.  Kannan's theorem states that for any k ,    Σ  2     subscript  normal-Σ  2    \Sigma_{2}   is not contained in SIZE (n k ).  Toda's theorem states that the polynomial hierarchy is contained in P #P .  Problems in the polynomial hierarchy  See also   EXPTIME  Exponential hierarchy  Arithmetic hierarchy   References   A. R. Meyer and L. J. Stockmeyer . The Equivalence Problem for Regular Expressions with Squaring Requires Exponential Space. In Proceedings of the 13th IEEE Symposium on Switching and Automata Theory , pp. 125–129, 1972. The paper that introduced the polynomial hierarchy.  L. J. Stockmeyer . The polynomial-time hierarchy . Theoretical Computer Science , vol.3, pp. 1–22, 1976.  C. Papadimitriou . Computational Complexity. Addison-Wesley, 1994. Chapter 17. Polynomial hierarchy , pp. 409–438.   Section 7.2: The Polynomial Hierarchy, pp. 161–167.   "  Category:Structural complexity theory  Category:Hierarchy   