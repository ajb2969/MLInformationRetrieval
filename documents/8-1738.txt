   Symmetric level-index arithmetic      Symmetric level-index arithmetic   The level-index (LI) representation of numbers, and its algorithms for arithmetic operations, were introduced by Clenshaw and Olver in 1984. 1 The symmetric form of the LI system and its arithmetic operations were presented by Clenshaw and Turner. Anuta, Lozier, Schabanel and Turner developed the algorithm for symmetric level-index (SLI) arithmetic, and a parallel implementation of it. There has been extensive work on developing the SLI arithmetic algorithms and extending them to complex and vector arithmetic operations.  Definition  The idea of the level-index system is to represent a non-negative real number X as       X  =   e   e   e   …   e  f           X   superscript  e   superscript  e   superscript  e   superscript  normal-…   superscript  e  f         X=e^{e^{e^{...^{e^{f}}}}}     where    0  ≤  f  <  1        0  f       1     0\leq f<1   and the process of exponentiation is performed l times, with    l  ≥  0      l  0    l\geq 0   . l and f are the level and index of X respectively. x = l + f is the LI image of X. For example,       X  =  1234567  =   e   e   e  0.9711308           X  1234567        superscript  e   superscript  e   superscript  e  0.9711308        X=1234567=e^{e^{e^{0.9711308}}}     so its LI image is       x  =   l  +  f   =   3  +  0.9711308   =   3.9711308         x    l  f          3  0.9711308        3.9711308     x=l+f=3+0.9711308=3.9711308\,    .  The symmetric form is used to allow negative exponents, if the magnitude of X is less than 1. One takes sgn (log(X)) or sgn (|X|-|X| −1 ) and stores it (after substituting +1 for 0 for the reciprocal sign since for X=1=e 0 the LI image is x=1.0 and uniquely defines X=1 and we can do away without a third state and use only 1 bit for the 2 states -1 and +1) as the reciprocal sign r X . Mathematically, this is equivalent to taking the reciprocal (multiplicative inverse) of a small magnitude number, and then finding the SLI image for the reciprocal. Using one bit for the reciprocal sign enables the representation of extremely small numbers.  A sign bit may also be used to allow negative numbers. One takes sgn (X) and stores it (after substituting +1 for 0 for the sign since for X=0 the LI image is x=0.0 and uniquely defines X=0 and we can do away without a third state and use only 1 bit for the 2 states -1 and +1) as the sign s X . Mathematically, this is equivalent to taking the inverse (additive inverse) of a negative number, and then finding the SLI image for the inverse. Using one bit for the sign enables the representation of negative numbers.  The mapping function is called the generalized logarithm function . It is defined as       ψ   (  X  )   =   {     X      if  0   ≤  X  <  1        1  +   ψ   (   ln  X   )         if  X   ≥  1          fragments  ψ   fragments  normal-(  X  normal-)     fragments  normal-{    X       if  0   X       1        1    ψ    X        if  X   1        \psi(X)=\left\{\begin{matrix}X&\mathrm{if}\quad 0\leq X<1\\
 1+\psi(\ln X)&\mathrm{if}\quad X\geq 1\end{matrix}\right.     and it maps    [  0  ,  ∞  )     0     [0,\infty)   onto itself monotonically and so it is invertible on this interval. The inverse, the generalized exponential function , is defined by       ϕ   (  x  )   =   {     x      if  0   ≤  x  <  1        e   ϕ   (   x  -  1   )         if  x   ≥  1          fragments  ϕ   fragments  normal-(  x  normal-)     fragments  normal-{    x       if  0   x       1       superscript  e    ϕ    x  1        if  x   1        \phi(x)=\left\{\begin{matrix}x&\mathrm{if}\quad 0\leq x<1\\
 e^{\phi(x-1)}&\mathrm{if}\quad x\geq 1\end{matrix}\right.     The density of values X represented by x has no discontinuities as we go from level l to l+1 (a very desirable property) since:           d  ϕ   (  x  )     d  x    |    x  =  1    =      d  ϕ   (   e  x   )     d  x    |    x  =  0         evaluated-at      d  ϕ  x     d  x      x  1     evaluated-at      d  ϕ   superscript  e  x      d  x      x  0      \frac{d\phi(x)}{dx}|_{x=1}=\frac{d\phi(e^{x})}{dx}|_{x=0}    .  The generalized logarithm function is closely related to the iterated logarithm used in computer science analysis of algorithms.  Formally, we can define the SLI representation for an arbitrary real X (not 0 or 1) as       X  =    s  X   ϕ    (  x  )    r  X         X     subscript  s  X   ϕ   superscript  x   subscript  r  X       X=s_{X}\phi(x)^{r_{X}}     where s X is the sign (additive inversion or not) of X and r X is the reciprocal sign (multiplicative inversion or not) as in the following equations:         s  X   =   sgn   (  X  )     ,     r  X   =   sgn   (    |  X  |   -    |  X  |    -  1     )     ,   x  =   ψ   (   max   (   |  X  |   ,    |  X  |    -  1    )    )    =   ψ   (    |  X  |    r  X    )         formulae-sequence     subscript  s  X     sgn  X     formulae-sequence     subscript  r  X     sgn      X    superscript    X     1           x    ψ      X    superscript    X     1             ψ   superscript    X    subscript  r  X          s_{X}=\text{sgn}(X),r_{X}=\text{sgn}(|X|-|X|^{-1}),x=\psi(\max(|X|,|X|^{-1}))=%
 \psi(|X|^{r_{X}})     whereas for X=0 or 1, we have:         s  0   =   +  1    ,     r  0   =   +  1    ,   x  =   0.0        formulae-sequence     subscript  s  0     1     formulae-sequence     subscript  r  0     1      x  0.0      s_{0}=+1,r_{0}=+1,x=0.0\,    ,         s  1   =   +  1    ,     r  1   =   +  1    ,   x  =   1.0        formulae-sequence     subscript  s  1     1     formulae-sequence     subscript  r  1     1      x  1.0      s_{1}=+1,r_{1}=+1,x=1.0\,    .  For example,       X  =   -    1  1234567     =   -   e   -   e   e  0.9711308             X      1  1234567            superscript  e     superscript  e   superscript  e  0.9711308          X=-\dfrac{1}{1234567}=-e^{-e^{e^{0.9711308}}}     and its SLI representation is       x  =   -   ϕ     (  3.9711308  )    -  1           x      ϕ   superscript  3.9711308    1        x=-\phi(3.9711308)^{-1}\,    .  External links   sli-c-library (hosted by Google Code), "C++ Implementation of Symmetric Level-Index Arithmetic" .   Notes and references     "  Category:Computer arithmetic     ↩     