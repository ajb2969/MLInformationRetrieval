


SymbolicC++




SymbolicC++

 table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
   margin: 0; padding: 0; vertical-align: baseline; border: none; }
 <style>
 table.sourceCode { width: 100%; line-height: 100%; }
 td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
 td.sourceCode { padding-left: 5px; }
 code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
 code > span.dt { color: #902000; } /* DataType */
 code > span.dv { color: #40a070; } /* DecVal */
 code > span.bn { color: #40a070; } /* BaseN */
 code > span.fl { color: #40a070; } /* Float */
 code > span.ch { color: #4070a0; } /* Char */
 code > span.st { color: #4070a0; } /* String */
 code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
 code > span.ot { color: #007020; } /* Other */
 code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
 code > span.fu { color: #06287e; } /* Function */
 code > span.er { color: #ff0000; font-weight: bold; } /* Error */
 code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
 code > span.cn { color: #880000; } /* Constant */
 code > span.sc { color: #4070a0; } /* SpecialChar */
 code > span.vs { color: #4070a0; } /* VerbatimString */
 code > span.ss { color: #bb6688; } /* SpecialString */
 code > span.im { } /* Import */
 code > span.va { color: #19177c; } /* Variable */
 code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
 code > span.op { color: #666666; } /* Operator */
 code > span.bu { } /* BuiltIn */
 code > span.ex { } /* Extension */
 code > span.pp { color: #bc7a00; } /* Preprocessor */
 code > span.at { color: #7d9029; } /* Attribute */
 code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
 code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
 code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
 code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
   



SymbolicC++ is a general purpose computer algebra system embedded in the programming language C++. It is free software released under the terms of the GNU General Public License. SymbolicC++ is used by including a C++ header file or by linking against a library.
Examples
#include 
 #include "symbolicc++.h"
 using namespace std;
 
 int main(void)
 {
  Symbolic x("x");
  cout << integrate(x+1, x);     // => 1/2*x^(2)+x
  Symbolic y("y");
  cout << df(y, x);              // => 0
  cout << df(y[x], x);           // => df(y[x],x)
  cout << df(exp(cos(y[x])), x); // => -sin(y[x])*df(y[x],x)*e^cos(y[x])
  return 0;
 }
 
The following program fragment inverts the matrix 
 
 
 
  symbolically.
Symbolic theta("theta");
 Symbolic R = ( (  cos(theta), sin(theta) ),
                ( -sin(theta), cos(theta) ) );
 cout << R(0,1); // sin(theta)
 Symbolic RI = R.inverse();
 cout << RI[ (cos(theta)^2) == 1 - (sin(theta)^2) ];
The output is
[ cos(theta) −sin(theta) ]
 [ sin(theta) cos(theta)  ]
The next program illustrates non-commutative symbols in SymbolicC++. Here b is a Bose annihilation operator and bd is a Bose creation operator. The variable vs denotes the vacuum state

 
 . The ~ operator toggles the commutativity of a variable, i.e. if b is commutative that ~b is non-commutative and if b is non-commutative ~b is commutative.
#include 
 #include "symbolicc++.h"
 using namespace std;
 
 int main(void)
 {
  // The operator b is the annihilation operator and bd is the creation operator
  Symbolic b("b"), bd("bd"), vs("vs");
 
  b = ~b; bd = ~bd; vs = ~vs;
 
  Equations rules = (b*bd == bd*b + 1, b*vs == 0);
 
  // Example 1
  Symbolic result1 = b*bd*b*bd;
  cout << "result1 = " << result1.subst_all(rules) << endl;
  cout << "result1*vs = " << (result1*vs).subst_all(rules) << endl;
 
  // Example 2
  Symbolic result2 = (b+bd)^4;
  cout << "result2 = " << result2.subst_all(rules) << endl;
  cout << "result2*vs = " << (result2*vs).subst_all(rules) << endl;
 
  return 0;
 }
 
Further examples can be found in the books listed below.1234
History
SymbolicC++ is described in a series of books on computer algebra. The first book5 described the first version of SymbolicC++. In this version the main data type for symbolic computation was the Sum class. The list of available classes included

Verylong : An unbounded integer implementation
Rational : A template class for rational numbers
Quaternion : A template class for quaternions
Derive : A template class for automatic differentiation
Vector : A template class for vectors (see vector space)
Matrix : A template class for matrices (see matrix (mathematics))
Sum : A template class for symbolic expressions

Example:
#include 
 #include "rational.h"
 #include "msymbol.h"
 using namespace std;
 
 int main(void)
 {
  Sum<int> x("x",1);
  Sumint> > y("y",1);
  cout << Int(y, y);       // => 1/2 yˆ2
  y.depend(x);
  cout << df(y, x);        // => df(y,x)
return 0;
 }
 int><span class="dt"int>
 
 The second version6 of SymbolicC++ featured new classes such as the Polynomial class and initial support for simple integration. Support for the algebraic computation of Clifford algebras was described in using SymbolicC++ in 2002.7 Subsequently support for Gröbner bases was added.8 The third version9 features a complete rewrite of SymbolicC++ and was released in 2008. This version encapsulates all symbolic expressions in the Symbolic class.
Newer versions are available from the SymbolicC++ website.
See also

Comparison of computer algebra systems
GiNaC

References
External links


Programming exercises in SymbolicC++

"
Category:Free computer algebra systems Category:Free software programmed in C++ Category:C++ libraries



Steeb, W.-H. (2010). Quantum Mechanics Using Computer Algebra, second edition, World Scientific Publishing, Singapore.↩
Steeb, W.-H. (2008). The Nonlinear Workbook: Chaos, Fractals, Cellular Automata, Neural Networks, Genetic Algorithm, Gene Expression Programming, Wavelets, Fuzzy Logic with C++, Java and SymbolicC++ Programs, fourth edition, World Scientific Publishing, Singapore.↩
Steeb, W.-H. (2007). Continuous Symmetries, Lie Algebras, Differential Equations and Computer Algebra, second edition, World Scientific Publishing, Singapore.↩

Tan Kiat Shi and Steeb, W.-H. (1997). SymbolicC++: An introduction to Computer Algebra Using Object-Oriented Programming Springer-Verlag, Singapore.↩
Tan Kiat Shi, Steeb, W.-H. and Hardy, Y (2000). SymbolicC++: An Introduction to Computer Algebra using Object-Oriented Programming, 2nd extended and revised edition, Springer-Verlag, London.↩
Fletcher, J.P. (2002). Symbolic Processing of Clifford Numbers in C++
 in Doran C., Dorst L. and Lasenby J. (eds.) Applied Geometrical Algebras in computer Science and Engineering AGACSE 2001, Birkhauser, Basel.
http://www.ceac.aston.ac.uk/research/staff/jpf/papers/paper25/index.php↩
Kruger, P.J.M (2003). Gröbner bases with Symbolic C++, M. Sc. Dissertation, Rand Afrikaans University.↩
Hardy, Y, Tan Kiat Shi and Steeb, W.-H. (2008). Computer Algebra with SymbolicC++, World Scientific Publishing, Singapore.↩


