   Baum–Welch algorithm      Baum–Welch algorithm   In electrical engineering , computer science , statistical computing and bioinformatics , the Baum–Welch algorithm is used to find the unknown parameters of a hidden Markov model (HMM). It makes use of the forward-backward algorithm and is named for Leonard E. Baum and Lloyd R. Welch .  History  Hidden Markov Models (HMMs) and the Baum–Welch algorithm were first described in a series of articles by Leonard E. Baum and his peers at the Institute for Defense Analysis in the late 1960s. 1 One of the first major applications of HMMs was to the field of speech processing . 2 In the 1980s, HMMs were emerging as a useful tool in the analysis of biological systems and information, and in particular genetic information . 3 They have since become an important tool in the probabilistic modeling of genomic sequences. 4  Description  A Hidden Markov Model describes the joint probability of a collection of 'hidden' and observed discrete random variables. It relies on the assumption that the    i   t  h      superscript  i    t  h     i^{th}   hidden variable given the     (   i  -  1   )    t  h      superscript    i  1     t  h     (i-1)^{th}   hidden variable is independent of previous hidden variables, and the current observation variables depend only on the current hidden state. The Baum–Welch algorithm uses the well known EM algorithm to find the maximum likelihood estimate of the parameters of a hidden Markov model given a set of observed feature vectors. Let    X  t     subscript  X  t    X_{t}   be a discrete hidden random variable with   N   N   N   possible values. We assume the    P   (   X  t   |   X   t  -  1    )      fragments  P   fragments  normal-(   subscript  X  t   normal-|   subscript  X    t  1    normal-)     P(X_{t}|X_{t-1})   is independent of time   t   t   t   , which leads to the definition of the time independent stochastic transition matrix      A  =   {   a   i  j    }   =  P   (   X  t   =  j  |   X   t  -  1    =  i  )      fragments  A    fragments  normal-{   subscript  a    i  j    normal-}    P   fragments  normal-(   subscript  X  t    j  normal-|   subscript  X    t  1     i  normal-)     A=\{a_{ij}\}=P(X_{t}=j|X_{t-1}=i)   . The initial state distribution (i.e. when    t  =  1      t  1    t=1   ) is given by       π  i   =  P   (   X  1   =  i  )      fragments   subscript  π  i    P   fragments  normal-(   subscript  X  1    i  normal-)     \pi_{i}=P(X_{1}=i)   . The observation variables    Y  t     subscript  Y  t    Y_{t}   can take one of   K   K   K   possible values. The probability of a certain observation at time   t   t   t   for state   j   j   j   is given by       b  j    (   y  t   )   =  P   (   Y  t   =   y  t   |   X  t   =  j  )      fragments   subscript  b  j    fragments  normal-(   subscript  y  t   normal-)    P   fragments  normal-(   subscript  Y  t     subscript  y  t   normal-|   subscript  X  t    j  normal-)     b_{j}(y_{t})=P(Y_{t}=y_{t}|X_{t}=j)   . Taking into account all the possible values of    Y  t     subscript  Y  t    Y_{t}   and    X  t     subscript  X  t    X_{t}   we obtain the   K   K   K   by   N   N   N   matrix    B  =   {    b  j    (   y  i   )    }       B      subscript  b  j    subscript  y  i       B=\{b_{j}(y_{i})\}   . An observation sequence is given by    Y  =   (   Y  1   =   y  1   ,   Y  2   =   y  2   ,  …  ,   Y  T   =   y  T   )      fragments  Y    fragments  normal-(   subscript  Y  1     subscript  y  1   normal-,   subscript  Y  2     subscript  y  2   normal-,  normal-…  normal-,   subscript  Y  T     subscript  y  T   normal-)     Y=(Y_{1}=y_{1},Y_{2}=y_{2},...,Y_{T}=y_{T})   .  Thus we can describe a hidden Markov chain by    θ  =   (  A  ,  B  ,  π  )       θ   A  B  π     \theta=(A,B,\pi)   . The Baum–Welch algorithm finds a local maximum for     θ  *   =     arg   max   θ   P   (  Y  |  θ  )      fragments   superscript  θ      subscript    arg  max   θ   P   fragments  normal-(  Y  normal-|  θ  normal-)     \theta^{*}=\operatorname*{arg\,max}_{\theta}P(Y|\theta)   . (i.e. the HMM parameters   θ   θ   \theta   that maximise the probability of the observation.) 5  Algorithm  Set    θ  =   (  A  ,  B  ,  π  )       θ   A  B  π     \theta=(A,B,\pi)   with random initial conditions. They can also be set using prior information about the parameters if it is available.  Forward procedure  Let     α  i    (  t  )   =  P   (   Y  1   =   y  1   ,  …  ,   Y  t   =   y  t   ,   X  t   =  i  |  θ  )      fragments   subscript  α  i    fragments  normal-(  t  normal-)    P   fragments  normal-(   subscript  Y  1     subscript  y  1   normal-,  normal-…  normal-,   subscript  Y  t     subscript  y  t   normal-,   subscript  X  t    i  normal-|  θ  normal-)     \alpha_{i}(t)=P(Y_{1}=y_{1},...,Y_{t}=y_{t},X_{t}=i|\theta)   , the probability of seeing the     y  1   ,   y  2   ,  …  ,   y  t       subscript  y  1    subscript  y  2   normal-…   subscript  y  t     y_{1},y_{2},...,y_{t}   and being in state   i   i   i   at time   t   t   t   . This is found recursively:         α  i    (  1  )    =    π  i    b  i    (   y  1   )           subscript  α  i   1      subscript  π  i    subscript  b  i    subscript  y  1      \alpha_{i}(1)=\pi_{i}b_{i}(y_{1})           α  j    (   t  +  1   )    =    b  j    (   y   t  +  1    )     ∑   i  =  1   N     α  i    (  t  )    a   i  j              subscript  α  j     t  1       subscript  b  j    subscript  y    t  1      superscript   subscript     i  1    N      subscript  α  i   t   subscript  a    i  j         \alpha_{j}(t+1)=b_{j}(y_{t+1})\sum_{i=1}^{N}\alpha_{i}(t)a_{ij}      Backward procedure  Let     β  i    (  t  )   =  P   (   Y   t  +  1    =   y   t  +  1    ,  …  ,   Y  T   =   y  T   |   X  t   =  i  ,  θ  )      fragments   subscript  β  i    fragments  normal-(  t  normal-)    P   fragments  normal-(   subscript  Y    t  1      subscript  y    t  1    normal-,  normal-…  normal-,   subscript  Y  T     subscript  y  T   normal-|   subscript  X  t    i  normal-,  θ  normal-)     \beta_{i}(t)=P(Y_{t+1}=y_{t+1},...,Y_{T}=y_{T}|X_{t}=i,\theta)   that is the probability of the ending partial sequence     y   t  +  1    ,  …  ,   y  T       subscript  y    t  1    normal-…   subscript  y  T     y_{t+1},...,y_{T}   given starting state   i   i   i   at time   t   t   t   . We calculate     β  i    (  t  )        subscript  β  i   t    \beta_{i}(t)   as,         β  i    (  T  )    =  1         subscript  β  i   T   1    \beta_{i}(T)=1           β  i    (  t  )    =    ∑   j  =  1   N     β  j    (   t  +  1   )    a   i  j     b  j    (   y   t  +  1    )            subscript  β  i   t     superscript   subscript     j  1    N      subscript  β  j     t  1    subscript  a    i  j     subscript  b  j    subscript  y    t  1        \beta_{i}(t)=\sum_{j=1}^{N}\beta_{j}(t+1)a_{ij}b_{j}(y_{t+1})      Update  We can now calculate the temporary variables, according to Bayes' theorem:       γ  i    (  t  )   =  P   (   X  t   =  i  |  Y  ,  θ  )   =     α  i    (  t  )    β  i    (  t  )      ∑   j  =  1   N     α  j    (  t  )    β  j    (  t  )         fragments   subscript  γ  i    fragments  normal-(  t  normal-)    P   fragments  normal-(   subscript  X  t    i  normal-|  Y  normal-,  θ  normal-)         subscript  α  i   t   subscript  β  i   t     superscript   subscript     j  1    N      subscript  α  j   t   subscript  β  j   t       \gamma_{i}(t)=P(X_{t}=i|Y,\theta)=\frac{\alpha_{i}(t)\beta_{i}(t)}{\sum_{j=1}^%
 {N}\alpha_{j}(t)\beta_{j}(t)}   which is the probability of being in state   i   i   i   at time   t   t   t   given the observed sequence   Y   Y   Y   and the parameters   θ   θ   \theta          ξ   i  j     (  t  )   =  P   (   X  t   =  i  ,   X   t  +  1    =  j  |  Y  ,  θ  )   =     α  i    (  t  )    a   i  j     β  j    (   t  +  1   )    b  j    (   y   t  +  1    )      ∑   k  =  1   N     ∑   l  =  1   N     α  k    (  t  )    a   k  l     β  l    (   t  +  1   )    b  l    (   y   t  +  1    )       =     α  i    (  t  )    a   i  j     β  j    (   t  +  1   )    b  j    (   y   t  +  1    )      ∑   k  =  1   N     α  k    (  t  )    β  k    (  t  )         fragments   subscript  ξ    i  j     fragments  normal-(  t  normal-)    P   fragments  normal-(   subscript  X  t    i  normal-,   subscript  X    t  1     j  normal-|  Y  normal-,  θ  normal-)         subscript  α  i   t   subscript  a    i  j     subscript  β  j     t  1    subscript  b  j    subscript  y    t  1       superscript   subscript     k  1    N     superscript   subscript     l  1    N      subscript  α  k   t   subscript  a    k  l     subscript  β  l     t  1    subscript  b  l    subscript  y    t  1              subscript  α  i   t   subscript  a    i  j     subscript  β  j     t  1    subscript  b  j    subscript  y    t  1       superscript   subscript     k  1    N      subscript  α  k   t   subscript  β  k   t       \xi_{ij}(t)=P(X_{t}=i,X_{t+1}=j|Y,\theta)=\frac{\alpha_{i}(t)a_{ij}\beta_{j}(t%
 +1)b_{j}(y_{t+1})}{\sum_{k=1}^{N}\sum_{l=1}^{N}\alpha_{k}(t)a_{kl}\beta_{l}(t+%
 1)b_{l}(y_{t+1})}=\frac{\alpha_{i}(t)a_{ij}\beta_{j}(t+1)b_{j}(y_{t+1})}{\sum_%
 {k=1}^{N}\alpha_{k}(t)\beta_{k}(t)}   which is the probability of being in state   i   i   i   and   j   j   j   at times   t   t   t   and    t  +  1      t  1    t+1   respectively given the observed sequence   Y   Y   Y   and parameters   θ   θ   \theta   .     θ   θ   \theta   can now be updated:        π  i  *   =    γ  i    (  1  )         superscript   subscript  π  i        subscript  γ  i   1     \pi_{i}^{*}=\gamma_{i}(1)      which is the expected frequency spent in state   i   i   i   at time   1   1   1   .        a   i  j   *   =      ∑   t  =  1    T  -  1       ξ   i  j     (  t  )        ∑   t  =  1    T  -  1       γ  i    (  t  )           superscript   subscript  a    i  j          subscript   superscript     T  1      t  1       subscript  ξ    i  j    t      subscript   superscript     T  1      t  1       subscript  γ  i   t       a_{ij}^{*}=\frac{\sum^{T-1}_{t=1}\xi_{ij}(t)}{\sum^{T-1}_{t=1}\gamma_{i}(t)}      which is the expected number of transitions from state i to state j compared to the expected total number of transitions away from state i. To clarify, the number of transitions away from state i does not mean transitions to a different state j, but to any state including itself. This is equivalent to the number of times state i is observed in the sequence from t=1 to t=T-1.         b  i  *    (   v  k   )    =      ∑   t  =  1   T      1    y  t   =   v  k      γ  i    (  t  )        ∑   t  =  1   T      γ  i    (  t  )             superscript   subscript  b  i      subscript  v  k        subscript   superscript   T     t  1       subscript  1     subscript  y  t    subscript  v  k      subscript  γ  i   t      subscript   superscript   T     t  1       subscript  γ  i   t       b_{i}^{*}(v_{k})=\frac{\sum^{T}_{t=1}1_{y_{t}=v_{k}}\gamma_{i}(t)}{\sum^{T}_{t%
 =1}\gamma_{i}(t)}      where     1    y  t   =   v  k     =   {      1  ,       if   y  t    =   v  k         0  ,     otherwise           subscript  1     subscript  y  t    subscript  v  k      cases  1      if   subscript  y  t     subscript  v  k    0  otherwise     1_{y_{t}=v_{k}}=\begin{cases}1,&\text{if }y_{t}=v_{k}\\
 0,&\text{otherwise}\\
 \end{cases}   is an indicator function and     b  i  *    (   v  k   )        superscript   subscript  b  i      subscript  v  k     b_{i}^{*}(v_{k})   is the expected number of times the output observations have been equal to    v  k     subscript  v  k    v_{k}   while in state   i   i   i   over the expected total number of times in state   i   i   i   . These steps are now repeated iteratively until a desired level of convergence.  Note: It is possible to over-fit a particular data set. That is    P   (  Y  |   θ   f  i  n  a  l    )   >  P   (  Y  |   θ   t  r  u  e    )      fragments  P   fragments  normal-(  Y  normal-|   subscript  θ    f  i  n  a  l    normal-)    P   fragments  normal-(  Y  normal-|   subscript  θ    t  r  u  e    normal-)     P(Y|\theta_{final})>P(Y|\theta_{true})   . The algorithm also does not guarantee a global maximum.  Example  Suppose we have a chicken from which we collect eggs at noon everyday. Now whether or not the chicken has laid eggs for collection depends on some unknown factors that are hidden. We can however (for simplicity) assume that there are only two states that determine whether the chicken lays eggs. Now we don't know the state at the initial starting point, we don't know the transition probabilities between the two states and we don't know the probability that the chicken lays an egg given a particular state. 6 7 To start we first guess the transition and emission matrices.           Transition        State 1     State 2      |      Emission        State 1     State 2      |      Initial     State 1     State 2         We then take set of observations (E = eggs, N = no eggs): NN, NN, NN, NN, NE, EE, EN, NN, NN The next step is to estimate a new transition matrix.        Observed sequence   Probability of sequence and state is S1 then S2   Highest Probability of observing that sequence       NN   0.024   0.3584 S2,S2     NN   0.024   0.3584 S2,S2     NN   0.024   0.3584 S2,S2     NN   0.024   0.3584 S2,S2     NE   0.006   0.1344 S2,S1     EE   0.014   0.0490 S1,S1     EN   0.056   0.0896 S2,S2     NN   0.024   0.3584 S2,S2     NN   0.024   0.3584 S2,S2     Total   0.22   2.4234      Thus the new estimate for the S1 to S2 transition is now     0.22  2.4234   =  0.0908        0.22  2.4234   0.0908    \frac{0.22}{2.4234}=0.0908   (referred to as "Pseudo probabilities" in the following tables). We then calculate the S2 to S1, S2 to S2 and S1 to S1 transition probabilities and normalize so they add to 1. This gives us the updated transition matrix:           Old Transition Matrix        State 1     State 2      |      New Transition Matrix (Pseudo Probabilities)        State 1     State 2      |      New Transition Matrix (After Normalization)        State 1     State 2         Next, we want to estimate a new emission matrix,        Observed Sequence   Highest probability of observing that sequence if E is assumed to come from S1   Highest Probability of observing that sequence       NE   0.1344 S2,S1   0.1344 S2,S1     EE   0.0490 S1,S1   0.0490 S1,S1     EN   0.0560 S1,S2   0.0896 S2,S2     Total   0.2394   0.2730      The new estimate for the E coming from S1 emission is now     0.2394  0.2730   =  0.8769        0.2394  0.2730   0.8769    \frac{0.2394}{0.2730}=0.8769   . This allows us to calculate the emission matrix as described above in the algorithm, by adding up the probabilities for the respective observed sequences. We then repeat for if N came from S1 and for if N and E came from S2 and normalize.          Old Emission Matrix        State 1     State 2      |      New Emission Matrix (Estimates)        State 1     State 2      |      New Emission Matrix (After Normalization)        State 1     State 2         To estimate the initial probabilities we assume all sequences start with the hidden state S1 and calculate the highest probability and then repeat for S2. Again we then normalize to give an updated initial vector. Finally we repeat these steps until the resulting probabilities converge satisfactorily.  Applications  Speech recognition  Hidden Markov Models were first applied to speech recognition by James K. Baker in 1975. 8 Continuous speech recognition occurs by the following steps, modeled by a HMM. Feature analysis is first undertaken on temporal and/or spectral features of the speech signal. This produces an observation vector. The feature is then compared to all sequences of the speech recognition units. These units could be phonemes , syllables, or whole-word units. A lexicon decoding system is applied to constrain the paths investigated, so only words in the system's lexicon (word dictionary) are investigated. Similar to the lexicon decoding, the system path is further constrained by the rules of grammar and syntax. Finally, semantic analysis is applied and the system outputs the recognized utterance. A limitation of many HMM applications to speech recognition is that the current state only depends on the state at the previous time-step, which is unrealistic for speech as dependencies are often several time-steps in duration. 9 The Baum–Welch algorithm also has extensive applications in solving HMMs used in the field of speech synthesis. 10  Cryptanalysis  The Baum–Welch algorithm is often used to estimate the parameters of HMMs in deciphering hidden or noisy information and consequently is often used in cryptanalysis . In data security an observer would like to extract information from a data stream without knowing all the parameters of the transmission. This can involve reverse engineering a channel encoder . 11 HMMs and as a consequence the Baum–Welch algorithm have also been used to identify spoken phrases in encrypted VoIP calls. 12 In addition HMM cryptanalysis is an important tool for automated investigations of cache-timing data. It allows for the automatic discovery of critical algorithm state, for example key values. 13  Applications in bioinformatics  Finding genes  Prokaryotic  The GLIMMER (Gene Locator and Interpolated Markov ModelER) software was an early gene-finding program used for the identification of coding regions in prokaryotic DNA. 14 15 GLIMMER uses Interpolated Markov Models (IMMs) to identify the coding regions and distinguish them from the noncoding DNA . The latest release (GLIMMER3) has been shown to have increased specificity and accuracy compared with its predecessors with regard to predicting translation initiation sites, demonstrating an average 99% accuracy in locating 3' locations compared to confirmed genes in prokaryotes. 16  Eukaryotic  The GENSCAN webserver is a gene locator capable of analyzing eukaryotic sequences up to one million base-pairs (1 Mbp) long. 17 GENSCAN utilizes a general inhomogeneous, three periodic, fifth order Markov model of DNA coding regions. Additionally, this model accounts for differences in gene density and structure (such as intron lengths) that occur in different isochores . While most integrated gene-finding software (at the time of GENSCANs release) assumed input sequences contained exactly one gene, GENSCAN solves a general case where partial, complete, or multiple genes (or even no gene at all) is present. 18 GENSCAN was shown to exactly predict exon location with 90% accuracy with 80% specificity compared to an annotated database. 19  Copy-number variation detection  Copy-number variations (CNVs) are an abundant form of genome structure variation in humans. A discrete-valued bivariate HMM (dbHMM) was used assigning chromosomal regions to seven distinct states: unaffected regions, deletions, duplications and four transition states. Solving this model using Baum-Welch demonstrated the ability to predict the location of CNV breakpoint to approximately 300 bp from micro-array experiments . 20 This magnitude of resolution enables more precise correlations between different CNVs and across populations than previously possible, allowing the study of CNV population frequencies. It also demonstrated a direct inheritance pattern for a particular CNV .  Implementations   jhmm or jahmm implementation in Java .  HMMFit function in the RHmm package for R .  ghmm C library with Python bindings that supports both discrete and continuous emissions.  hmmtrain in MATLAB  Accord.NET in C#   See also   Viterbi algorithm  Hidden Markov model  EM algorithm  Maximum Likelihood  Speech Recognition  Bioinformatics  Cryptanalysis   References  External links   A comprehensive review of HMM methods and software in bioinformatics - Profile Hidden Markov Models  Early HMM publications by Baum:  [ http://projecteuclid.org/DPubS?verb=Display&version; ;=1.0&service;=UI&handle;=euclid.aoms/1177697196&page;=record A Maximization Technique Occurring in the Statistical Analysis of Probabilistic Functions of Markov Chains]  [ http://projecteuclid.org/DPubS?verb=Display&version; ;=1.0&service;=UI&handle;=euclid.bams/1183528841&page;=record An inequality with applications to statistical estimation for probabilistic functions of Markov processes and to a model for ecology]  [ http://projecteuclid.org/DPubS?verb=Display&version; ;=1.0&service;=UI&handle;=euclid.aoms/1177699147&page;=record Statistical Inference for Probabilistic Functions of Finite State Markov Chains]   The Shannon Lecture by Welch, which speaks to how the algorithm can be implemented efficiently:  Hidden Markov Models and the Baum–Welch Algorithm , IEEE Information Theory Society Newsletter, Dec. 2003.   An alternative to the Baum–Welch algorithm, the Viterbi Path Counting algorithm:  R. I. A. Davis, B. C. Lovell, "Comparing and evaluating HMM ensemble training algorithms using train and test and condition number criteria" , Pattern Analysis and Applications, vol. 6, no. 4, pp. 327–336, 2003.   An Interactive Spreadsheet for Teaching the Forward-Backward Algorithm (spreadsheet and article with step-by-step walkthrough)  Formal derivation of the Baum–Welch algorithm  Implementation of the Baum–Welch algorithm   "  Category:Statistical algorithms  Category:Bioinformatics algorithms  Category:Markov models     ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩     