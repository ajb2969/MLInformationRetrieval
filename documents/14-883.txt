   WORHP      WORHP   WORHP , pronounced like the English word " warp ", also referred to as eNLP (European NLP solver) by ESA , is a mathematical software library for solving continuous large scale nonlinear optimization problems numerically. The acronym WORHP is sometimes spelled out as " W e O ptimize R eally H uge P roblems", its primary intended application. WORHP is a hybrid Fortran and C implementation and can be used from C/ C++ and Fortran programs using different interfaces of varying complexity and flexibility. In addition interfaces for the modelling environments MATLAB , CasADi and AMPL exist. 1  Problem formulation  WORHP is designed to solve problems of the form          min   x  ∈    \R   n     f    (  x  )         subscript     x   superscript  \R  n     f   x    \min_{x\in\R^{n}}f(x)       subject to       L  ≤   (     x       g   (  x  )       )   ≤  U        L    x      g  x          U     L\leq\begin{pmatrix}x\\
 g(x)\end{pmatrix}\leq U          with sufficiently smooth functions    f  :     \R   n   →   \R       normal-:  f   normal-→   superscript  \R  n   \R     f:\R^{n}\to\R   (objective) and    g  :     \R   n   →    \R   m       normal-:  g   normal-→   superscript  \R  n    superscript  \R  m      g:\R^{n}\to\R^{m}   (constraints) that may be nonlinear, and need not necessarily be convex. Even problems with large dimensions   n   n   n   and   m   m   m   can be solved efficiently, if the problem is sufficiently sparse. Cases where objective and constraints cannot be evaluated separately, or where constraints can be evaluated element-wise can be exploited by WORHP to increase the computational efficiency.  Derivatives  WORHP requires the first derivative ( Gradient ) of   f   f   f   and of   g   g   g   ( Jacobian ) and second derivatives ( Hessian matrix ) of the Lagrange function ; in a modelling environment like AMPL, these are provided by automatic differentiation methods, but need to be provided by the caller in other environments. First and second derivatives can be approximated by WORHP using finite differences . To reduce the otherwise prohibitively high number of necessary function evaluations in large scale sparse problems, graph colouring theory is used to group first and second partial derivatives. Second derivatives may also be approximated using variations of the classic BFGS method , including block-diagonal or sparse BFGS matrices.  Structure  The NLP level of WORHP is based on SQP , while the quadratic subproblems are solved using an interior point method . This approach was chosen to benefit from the robustness of SQP methods and the reliable runtime complexity of IP methods, since traditional active set methods may be unsuitable for large-scale problems.  Development  Development of WORHP started in 2006 with funding from DLR and was continued under the eNLP label after 2008 with support by ESA / ESTEC together with the Interior-Point solver ipfilter 2 (whose inclusion in eNLP was discontinued after 2010) to develop a European NLP solver for use in trajectory optimisation, mission analysis and aerospace applications in general. 3  The development of WORHP is led by the Steinbeis-Forschungszentrum Optimierung, Steuerung und Regelung and scientists of the Optimization and Optimal Control Group at the University of Bremen , and at the Bundeswehr University of Munich . 4 The developers stress that WORHP, despite its academic roots, is intended as industrial-grade tool rather than an academic research platform. 5  Applications  WORHP has been integrated into trajectory analysis tools such as LOTNAV 6 and ASTOS , and is being used at ESOC and ESTEC . It can be used as optimiser in CasADi (since version 1.5.0beta) 7 and as local optimiser in SVAGO MDO 8 tool developed at University of Bremen and Politecnico di Milano on Multidisciplinary design optimization through the ESA PRESTIGE program. 9  References  External links   WORHP home page  WORHP overview chapter   "  Category:Mathematical optimization software  Category:Mathematical software  Category:Numerical software     ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩  ↩     